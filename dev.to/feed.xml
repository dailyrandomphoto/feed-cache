<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>"Hello, world" in Assembly</title>
      <author>Bek Brace</author>
      <pubDate>Tue, 27 Jul 2021 07:26:36 +0000</pubDate>
      <link>https://dev.to/bekbrace/hello-world-in-assembly-4o6k</link>
      <guid>https://dev.to/bekbrace/hello-world-in-assembly-4o6k</guid>
      <description>&lt;p&gt;You should learn Assembly language - and I'm going to tell you why üòâ ..!&lt;/p&gt;

&lt;p&gt;Not to be a great Assembly programmer, but at least to understand how it functions.&lt;/p&gt;

&lt;p&gt;In my opinion, I think learning how to code in Assembly is to appreciate all what C language offers you; and if you want to learn C in order to appreciate all the great things that Python gives you, that's also a great move.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/j--zbDv_2QQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So Assembly, C and Python are three main languages you need to know if you want to understand how code is working and how things look like underneath the hood, I even would say Assembly and C, then you're free to choose whatever language you want for backend programming; but the reaosn why I mentioned Python is that Python is written in C, the most famous Python interpreter is Cpython.&lt;br&gt;
C itself is written in C, but you can think that the first C was coded in Assembly.&lt;br&gt;
So Python is written in C, C is written in Assembly and Assembly is the human readable form for machine language which is a bunch of 0s and 1s&lt;/p&gt;

&lt;p&gt;You will need to run on an IBM compatible PC...&lt;/p&gt;

&lt;p&gt;(hmm.. wait a minute, I think this term is deprecated , but you can call me a Nerd ü§ì ) &lt;/p&gt;

&lt;p&gt;...with an x86_64 processor that is a 64 bit of virtual memory address, and also we will need to have a copy of a Linux kernel.&lt;/p&gt;

&lt;p&gt;To check out the type of your processor, just type in your terminal&lt;/p&gt;

&lt;p&gt;~$ arch &lt;br&gt;
OR &lt;br&gt;
~$ uname -m &lt;/p&gt;

&lt;p&gt;We will need also to install the NASM assembler program which is the Netwide Assembler for the Intel X86 architecture, &lt;br&gt;
An assembler works as a compiler but for assembly, &lt;br&gt;
go ahead and install that : &lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install nasm&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many assemblers like &lt;br&gt;
Microsoft Assembler (MASM)&lt;br&gt;
The GNU assembler (GAS)&lt;/p&gt;

&lt;p&gt;An assembly program can be divided into three sections ‚àí&lt;br&gt;
The text section.&lt;br&gt;
The data section,&lt;br&gt;
The bss section&lt;/p&gt;

&lt;p&gt;1) The text section is used for keeping the actual code. &lt;br&gt;
This section must begin with the declaration global _start, which tells the kernel where the program execution begins, and global keyword followed by _start is essential for the linker, later when we will run our program.&lt;/p&gt;

&lt;p&gt;2) The data section is used for declaring data or constants. &lt;br&gt;
This data does not change at runtime. &lt;br&gt;
You can declare various constant values, file names, or buffer size, etc., in this section.&lt;br&gt;
You can think of this as the keyword const in JavaScript for constants declaration&lt;/p&gt;

&lt;p&gt;3) The bss section is used for declaring variables&lt;br&gt;
You can think of this as the word let in JavaScript for variables declaration&lt;/p&gt;

&lt;p&gt;You can watch the video to see how you can write a "Hello, World" simple program to print Hello, World on the screen .. in Assembly, it's not that simple ü§ì&lt;/p&gt;

&lt;p&gt;Thanks for readin - and watching maybe ü§î - leave your comment and contact me on &lt;a href="mailto:info@bekbrace.com"&gt;info@bekbrace.com&lt;/a&gt; , or follow me on Facebook, Twitter and Instagram : &lt;a class="mentioned-user" href="https://dev.to/bekbrace"&gt;@bekbrace&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Signin' out,&lt;br&gt;
Bek&lt;/p&gt;

</description>
      <category>python</category>
      <category>javascript</category>
      <category>csharp</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Best Programming Stuff.</title>
      <author>niksin</author>
      <pubDate>Tue, 27 Jul 2021 07:18:31 +0000</pubDate>
      <link>https://dev.to/stuffsuggested/best-programming-stuff-5249</link>
      <guid>https://dev.to/stuffsuggested/best-programming-stuff-5249</guid>
      <description>&lt;p&gt;I have seen some of the programming stuff article on internet as usual sharing it with you guys...Some of the websites are having affiliate links.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-best-monitors-for-programming"&gt;
  &lt;/a&gt;
  1. Best Monitors For Programming
&lt;/h2&gt;

&lt;p&gt;When programming or coding for long periods, it's essential to have a comfortable monitor to keep eye strain to a minimum.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://suggestedstuff.com/best-monitors-for-programming-in-india-2021/"&gt;Best Monitor For Programming&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.rtings.com/monitor/reviews/best/by-usage/programming-and-coding"&gt;Best Monitor For Programming&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.guru99.com/best-monitor-programming.html"&gt;Best Monitor for Programming &amp;amp; Coding (2021 Update)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#2-best-keyboard-for-programing"&gt;
  &lt;/a&gt;
  2. Best Keyboard For Programing
&lt;/h2&gt;

&lt;p&gt;As developers we don‚Äôt need many tools to work, many would say that we just need a laptop or computer, and even though that‚Äôs true, there‚Äôs a difference between having the minimum required to work to have the tools that you need to work comfortably, productive and healthy.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/best-keyboards-for-programming-in-2021.html"&gt;List of Best keyboard for programming India 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.thecrazyprogrammer.com/2020/09/best-keyboards-for-programming-in-india.html"&gt;8 Best Keyboards for Programming in India 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.guru99.com/best-keyboards.html"&gt;Best Keyboard for Programming &amp;amp; Coding in 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#3-best-mouse-for-programing"&gt;
  &lt;/a&gt;
  3. Best Mouse For Programing
&lt;/h2&gt;

&lt;p&gt;Programmer, Gammers, and coders spend their whole day with computers. So they have comfortable things for use. A standard mouse is irritating to use for a long time. A mouse that puts your hand in an unprejudiced position is maybe the best way to reduce these problems you just have to find a vertical or trackball mouse. Here, I've listed the Best mouse for programming.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/05/7-best-mouse-for-developer-gaming-coding.html"&gt;7 Best Mouse For Developer / Gaming / Coding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.guru99.com/best-mouse-programming.html"&gt;Best MOUSE for Programming &amp;amp; Coding (2021 Updated List)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.techradar.com/in/news/computing-components/peripherals/what-mouse-10-best-mice-compared-1027809"&gt;The best mouse of 2021: 10 top computer mice compared&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>stuff</category>
    </item>
    <item>
      <title>#7) Explain pass by value &amp; pass by reference‚ùì</title>
      <author>Mayank Yadav</author>
      <pubDate>Tue, 27 Jul 2021 07:01:57 +0000</pubDate>
      <link>https://dev.to/myk/7-explain-pass-by-value-pass-by-reference-3eah</link>
      <guid>https://dev.to/myk/7-explain-pass-by-value-pass-by-reference-3eah</guid>
      <description>&lt;p&gt;üî∞In JavaScript, &lt;em&gt;primitive data types&lt;/em&gt; is passed by value and &lt;em&gt;non-primitive data types&lt;/em&gt; is passed by reference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pass-by-value"&gt;
  &lt;/a&gt;
  üöÄPass by Value:
&lt;/h2&gt;

&lt;p&gt;-&amp;gt;In pass by value, function is called by directly passing the value of the variable as an argument.&lt;/p&gt;

&lt;p&gt;-&amp;gt;Any change that you make to the argument inside the function does not effect the original value.&lt;/p&gt;

&lt;p&gt;-&amp;gt;Parameters passed as an argument creates it's own copy.&lt;br&gt;
So, any changes inside the function will be on it's copy and not on the original value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PvIAsmr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5gott6w1kib3z9a7fm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PvIAsmr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5gott6w1kib3z9a7fm1.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Let's see how it worksüëá&lt;/p&gt;

&lt;p&gt;‚úÖFirstly, define a &lt;em&gt;passByValue&lt;/em&gt; function with an argument 'a'.&lt;/p&gt;

&lt;p&gt;‚úÖDeclare and initialize the value of &lt;em&gt;b = 1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;‚úÖThen, pass the 'b' variable into the function, JavaScript copies the value of 'b' to the 'a' variable.&lt;/p&gt;

&lt;p&gt;‚úÖAfter that, the &lt;em&gt;passByValue&lt;/em&gt; function changes the 'a' variable. However, this does not impact the original value of 'b'.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pass-by-reference"&gt;
  &lt;/a&gt;
  üöÄPass by Reference:
&lt;/h2&gt;

&lt;p&gt;-&amp;gt;In Pass by Reference, function is called by directly passing the reference/address of the variable as an argument.&lt;/p&gt;

&lt;p&gt;-&amp;gt;On changing the value inside the function also change the original value. &lt;/p&gt;

&lt;p&gt;-&amp;gt;In JavaScript array and Object follows pass by reference property.&lt;/p&gt;

&lt;p&gt;-&amp;gt;In Pass by reference, parameters passed as an arguments does not create its own copy, it refers to the original value so any changes made inside function will directly affect the original value. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HexkztzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s86noruejsfirlxogyou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HexkztzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s86noruejsfirlxogyou.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see how it worksüëá&lt;/p&gt;

&lt;p&gt;‚úÖFirstly, define the &lt;em&gt;passByReference()&lt;/em&gt; function that accepts an object person. The function sets the &lt;em&gt;name&lt;/em&gt; property of the object to &lt;em&gt;Maverick&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;‚úÖNext, declare a variable &lt;em&gt;friend&lt;/em&gt; and assign it an object whose &lt;em&gt;name&lt;/em&gt; property is set to &lt;em&gt;Ayush&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;‚ö†The &lt;em&gt;friend&lt;/em&gt; is a variable that references the actual object:&lt;br&gt;
 &lt;code&gt;let friend = {name: "Ayush",};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;‚úÖThen, pass the &lt;em&gt;friend&lt;/em&gt; variable into the function.&lt;/p&gt;

&lt;p&gt;‚úÖJavaScript copies the value of the &lt;em&gt;friend&lt;/em&gt; variable to &lt;em&gt;person&lt;/em&gt; variable. &lt;/p&gt;

&lt;p&gt;‚úÖAs a result, both &lt;em&gt;friend&lt;/em&gt; and &lt;em&gt;person&lt;/em&gt; variables are referencing the same object in the memory: &lt;code&gt;passByReference(friend);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;‚úÖAfter that, inside the function, the &lt;em&gt;name&lt;/em&gt; property of the object is set to &lt;em&gt;Maverick&lt;/em&gt; through the &lt;em&gt;person&lt;/em&gt; variable.&lt;/p&gt;

&lt;p&gt;‚úÖFinally, accessing the &lt;em&gt;name&lt;/em&gt; property of the &lt;em&gt;friend&lt;/em&gt; variable returns &lt;em&gt;Maverick&lt;/em&gt;. &lt;/p&gt;




</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The 10 most in-demand Cloud / DevOps roles</title>
      <author>DEVOPS-JOBS.NET</author>
      <pubDate>Tue, 27 Jul 2021 06:42:20 +0000</pubDate>
      <link>https://dev.to/devops_jobsnet/the-10-most-in-demand-cloud-devops-role-3ei0</link>
      <guid>https://dev.to/devops_jobsnet/the-10-most-in-demand-cloud-devops-role-3ei0</guid>
      <description>&lt;p&gt;We thought it would be interesting to go deeper into the analytics part of running our DevOps job board ‚Äì in the most privacy focused way for our users, of course. So here we are now starting to expose some of our aggregated internal job data in a systematic fashion through a simple REST API with a list of generalized job titles that are posted on devops-jobs.net.&lt;/p&gt;

&lt;p&gt;The cool thing with this is that we are able to see what‚Äôs popular in terms of the roles employers are hiring for most in the Cloud, Infrastructure and DevOps space.&lt;/p&gt;

&lt;p&gt;Our ‚Äúmethodology‚Äù here is quite simple: we‚Äôre primarily counting the occurence of job titles over the last 12 months, cleaned and adjusted for certain specialties that some companies like to do, e.g. inventing their own stuff that‚Äôs not being used by anyone else or adding crazy super-specific details to a vacancy title and so on. We also left out many titles with indicators regarding seniority or other requirements as we already have dedicated attributes for these. More on that probably in a future post.&lt;/p&gt;

&lt;p&gt;So here it is, our current (as of June 2021) top list of the ten Cloud / DevOps roles with the highest demand from employers on our site:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;DevOps Engineer&lt;/li&gt;
&lt;li&gt;Site Reliability Engineer&lt;/li&gt;
&lt;li&gt;Cloud Infrastructure Engineer&lt;/li&gt;
&lt;li&gt;Infrastructure Engineer&lt;/li&gt;
&lt;li&gt;Cloud Engineer&lt;/li&gt;
&lt;li&gt;QA Automation Engineer&lt;/li&gt;
&lt;li&gt;Cloud Architect&lt;/li&gt;
&lt;li&gt;DevSecOps Engineer&lt;/li&gt;
&lt;li&gt;Test Automation Engineer&lt;/li&gt;
&lt;li&gt;Platform Engineer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If your interested in the raw JSON data you can find the endpoint here: &lt;a href="https://devops-jobs.net/api/list-job-titles/"&gt;https://devops-jobs.net/api/list-job-titles/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The results there are updated every 6 hours, although it won‚Äôt really change that much anytime soon. And if it does we‚Äôll probably write about it üòâ&lt;/p&gt;

&lt;p&gt;We also use all the job titles from that list for our brand new salaries survey to have a ‚Äústandardized‚Äù selection of positions to choose from and attach salaries to. You can check out the survey ‚Äì and the resulting dataset being released in the public domain ‚Äì here: &lt;a href="https://salaries.devops-jobs.net/"&gt;https://salaries.devops-jobs.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was first published at &lt;a href="https://insights.devops-jobs.net/the-10-most-in-demand-cloud-devops-roles/"&gt;https://insights.devops-jobs.net/the-10-most-in-demand-cloud-devops-roles/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>cloudskills</category>
      <category>devops</category>
      <category>insights</category>
      <category>career</category>
    </item>
    <item>
      <title>How to host a website using GitHub pages?</title>
      <author>Tannu Daral</author>
      <pubDate>Tue, 27 Jul 2021 06:40:52 +0000</pubDate>
      <link>https://dev.to/tannudaral/how-to-host-a-website-using-github-pages-540l</link>
      <guid>https://dev.to/tannudaral/how-to-host-a-website-using-github-pages-540l</guid>
      <description>&lt;p&gt;Here's the video tutorial and if you like the video, please leave a like, thank you :)&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jHlrxOqqZT8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Share your salary and see what everyone else is making in InfoSec / the Cyber Security space</title>
      <author>infosec-jobs.com</author>
      <pubDate>Tue, 27 Jul 2021 06:33:03 +0000</pubDate>
      <link>https://dev.to/infosec_jobscom/share-your-salary-and-see-what-everyone-else-is-making-in-infosec-the-cyber-security-space-4man</link>
      <guid>https://dev.to/infosec_jobscom/share-your-salary-and-see-what-everyone-else-is-making-in-infosec-the-cyber-security-space-4man</guid>
      <description>&lt;p&gt;We were wondering quite recently what the global salary landscape in the InfoSec world would look like. Searching around for some data provided few results and basically all of them didn‚Äôt provide a full dataset for us to play around with and use freely.&lt;/p&gt;

&lt;p&gt;So we decided to set up our own survey, ask the global InfoSec scene what they‚Äôre making anually, and then release all the data for free afterwards in the public domain under &lt;a href="https://creativecommons.org/share-your-work/public-domain/cc0/"&gt;CC0 license terms&lt;/a&gt;. Which literally means global salary data from the public, for the public.&lt;/p&gt;

&lt;p&gt;We went on quickly by defining some generalized attributes that would make a really simplistic survey everyone can fill it out in under a minute and don‚Äôt have to think too hard while doing it, but would still provide as much valuable information as possible so you can derive real insights from it. All of this in an anonymized fashion, of course. We don‚Äôt like touching PII anyways ‚Äì &lt;a href="https://infosec-jobs.com/about/"&gt;not really our business üòâ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It took almost two weeks of deliberations about what to ask for ‚Äì yeah it gets quite difficult when you start thinking about what makes sense and trying not to mess it up completely ‚Äì and in roughly a weekend our little salaries app (Django + SQLite are your friends, yay) was built and ready to launch.&lt;/p&gt;

&lt;p&gt;üéâ Released a few days ago you can check (and fill) it out here: &lt;a href="https://salaries.infosec-jobs.com/"&gt;https://salaries.infosec-jobs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As soon as we have a little valid dataset and solved some open issues along the way (noticed we provide a selection of the 30 most used currencies in global trade? Probably some averaged conversion into USD for all non-USD salaries would be nice having added to the data as well ü§î) we‚Äôll release a first dump of the data here.&lt;/p&gt;

&lt;p&gt;In the end we think it would be great if we can manage to create a sort of rolling survey throughout the year with a constantly updated dataset that everyone can use as they wish ‚Äì candidates, recruiters, hr departments, startup founders, data scientists, you name it‚Ä¶&lt;/p&gt;

&lt;p&gt;We made everything a select/choice field to avoid free-form input in general, except for the salary value of course. The job titles are the ones that are popular on our InfoSec job board, just to stay real and not list decades old jobs that practially don‚Äôt mean anything and aren‚Äôt even hired for anymore. We provide an open API for this too (see &lt;a href="https://infosec-jobs.com/api/list-job-titles/"&gt;https://infosec-jobs.com/api/list-job-titles/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you like the idea and want to help us to gather a free and open database of InfoSec / Cyber Security salary information, feel free to share this survey with anyone who likes to fill out salary surveys ‚Äì just kidding ‚Äì the more data the better obviously üòâ&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post appeared first on &lt;a href="https://insights.infosec-jobs.com/share-your-salary-and-see-what-everyone-else-is-making-in-infosec-the-cyber-security-space/"&gt;https://insights.infosec-jobs.com/share-your-salary-and-see-what-everyone-else-is-making-in-infosec-the-cyber-security-space/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>career</category>
      <category>hiring</category>
      <category>insights</category>
    </item>
    <item>
      <title>The 10 most in-demand jobs in AI/ML and Big Data</title>
      <author>ai-jobs.net</author>
      <pubDate>Tue, 27 Jul 2021 06:23:40 +0000</pubDate>
      <link>https://dev.to/ai_jobsnet/the-10-most-in-demand-jobs-in-ai-ml-and-big-data-3394</link>
      <guid>https://dev.to/ai_jobsnet/the-10-most-in-demand-jobs-in-ai-ml-and-big-data-3394</guid>
      <description>&lt;p&gt;We thought it would be interesting to go deeper into the analytics part of running our AI/ML/DS job board ‚Äì in the most privacy focused way for our users, of course. So here we are now starting to expose some of our aggregated internal job data in a systematic fashion through a simple REST API with a list of generalized job titles that are posted on ai-jobs.net.&lt;/p&gt;

&lt;p&gt;The cool thing with this is that we are able to see what‚Äôs popular in terms of the roles employers are hiring for most often in the AI/ML and Big Data space.&lt;/p&gt;

&lt;p&gt;Our ‚Äúmethodology‚Äù here is quite simple: we‚Äôre primarily counting the occurence of job titles over the last 12 months, cleaned and adjusted for certain specialties that some companies like to do, e.g. inventing their own stuff that‚Äôs not being used by anyone else or adding crazy super-specific details to a vacancy title and so on. We also left out many titles with indicators regarding seniority or other requirements as we already have dedicated attributes for these. More on that probably in a future post.&lt;/p&gt;

&lt;p&gt;So here it is, our current (as of June 2021) top list of the ten AI/ML/Big Data roles with the highest demand from employers on our site:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data Engineer&lt;/li&gt;
&lt;li&gt;Data Scientist&lt;/li&gt;
&lt;li&gt;Data Analyst&lt;/li&gt;
&lt;li&gt;Machine Learning Engineer&lt;/li&gt;
&lt;li&gt;Big Data Engineer&lt;/li&gt;
&lt;li&gt;Principal Data Scientist&lt;/li&gt;
&lt;li&gt;Staff Data Engineer&lt;/li&gt;
&lt;li&gt;Marketing Data Analyst&lt;/li&gt;
&lt;li&gt;Data Engineering Manager&lt;/li&gt;
&lt;li&gt;Lead Data Scientist&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If your interested in the raw JSON data you can find the endpoint here: &lt;a href="https://ai-jobs.net/api/list-job-titles/"&gt;https://ai-jobs.net/api/list-job-titles/&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The results there are updated every 6 hours, although it won‚Äôt really change that much anytime soon. And if it does we‚Äôll maybe write about it üòâ&lt;/p&gt;

&lt;p&gt;We also use all the job titles from that list for our brand new salaries survey to have a ‚Äústandardized‚Äù selection of positions to choose from and attach salaries to. You can check out the survey ‚Äì and the resulting dataset being released in the public domain ‚Äì here: &lt;a href="https://salaries.ai-jobs.net/"&gt;https://salaries.ai-jobs.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally published on June 1, 2021 under &lt;a href="https://insights.ai-jobs.net/the-10-most-in-demand-jobs-in-ai-ml-and-big-data/"&gt;https://insights.ai-jobs.net/the-10-most-in-demand-jobs-in-ai-ml-and-big-data/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>machinelearning</category>
      <category>ai</category>
      <category>hiring</category>
    </item>
    <item>
      <title>6 Tools to write an eye-catching article</title>
      <author>Unclebigbay</author>
      <pubDate>Tue, 27 Jul 2021 06:23:00 +0000</pubDate>
      <link>https://dev.to/unclebigbay/6-tools-to-write-an-eye-catching-article-299</link>
      <guid>https://dev.to/unclebigbay/6-tools-to-write-an-eye-catching-article-299</guid>
      <description>&lt;p&gt;Hello beautiful bloggers üë®‚Äçüíª, below I will be sharing the list of tools that I make use while writing an article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-carbon"&gt;
  &lt;/a&gt;
  1. Carbon
&lt;/h3&gt;

&lt;p&gt;Link :  &lt;a href="https://carbon.now.sh/"&gt;carbon.now.sh&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Most of the technical articles you will probably write will come with code fragments attached to them, and readers will not find it too easy and attractive to view codes as plain text, carbon allows us to make an image of our code snippets and can be downloaded as &lt;strong&gt;PNG or SVG&lt;/strong&gt; for use as an attachment in our blog post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlkUJird--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627332083691/UrWftwaLs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlkUJird--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627332083691/UrWftwaLs.png" alt="carbon (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-grammarly"&gt;
  &lt;/a&gt;
  2. Grammarly
&lt;/h3&gt;

&lt;p&gt;Link:  &lt;a href="https://grammarly.com/"&gt;grammarly.com&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We are humans after all, which means we cannot notice all the errors in our articles before publications, but  &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt; can help identify typographical errors and provide suggestions on how to improve our sentences.&lt;/p&gt;

&lt;p&gt;My favorite Grammarly feature is the emoji prediction, which shows how the whole article will sound to the readers, I found this to be useful as it helps to adjust and be within the desired prediction.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am a big fan of emoji&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RndGn1xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627332977346/86wODetlF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RndGn1xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627332977346/86wODetlF.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-browserframe"&gt;
  &lt;/a&gt;
  3. BrowserFrame
&lt;/h3&gt;

&lt;p&gt;Link:  &lt;a href="https://browserframe.com/"&gt;browserframe.com&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;No doubts, images add to the beaut of an article when they are used properly, browser frames consist of both mobile and desktop browser frames to present the images better on articles.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#without-browserframecom"&gt;
  &lt;/a&gt;
  Without &lt;a href="https://browserframe.com/"&gt;browserframe.com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8S5f-_0K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627333314964/gejMyVVag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8S5f-_0K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627333314964/gejMyVVag.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#with-browserframecom"&gt;
  &lt;/a&gt;
  With &lt;a href="https://browserframe.com/"&gt;browserframe.com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYuYv22w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627333375753/lGZHO6Gna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYuYv22w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627333375753/lGZHO6Gna.png" alt="frame_generic_dark (20).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-ray"&gt;
  &lt;/a&gt;
  4. Ray
&lt;/h3&gt;

&lt;p&gt;Link:  &lt;a href="https://ray.so/"&gt;ray.so&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Ray is my second goto after &lt;a href="https://carbon.now.sh/"&gt;carbon&lt;/a&gt;, ray features include, linear-gradient background for code snippets and also provide a share link for the generated images.&lt;/p&gt;

&lt;p&gt;I found this to be really cool üòé&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pC9qaeZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627333693068/lt7CEmkTT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pC9qaeZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627333693068/lt7CEmkTT.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-canva"&gt;
  &lt;/a&gt;
  5. Canva
&lt;/h3&gt;

&lt;p&gt;Link:  &lt;a href="https://www.canva.com/"&gt;www.canva.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of &lt;a href="https://unclebigbay.com/"&gt;my blog&lt;/a&gt; cover images are made using &lt;a href="https://www.canva.com/"&gt;canva&lt;/a&gt;, canva has several free design templates for both presentation and article cover images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-google-gifs"&gt;
  &lt;/a&gt;
  6. Google Gifs
&lt;/h3&gt;

&lt;p&gt;Link: google anything gif üòõ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M0l-TYPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627335514814/MFtqXDKD2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0l-TYPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627335514814/MFtqXDKD2.gif" alt="200 (1).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I personally enjoy adding gifs to my articles, I believe technical articles should not be boring.&lt;/p&gt;

&lt;p&gt;I think you might want to add some to your next articleüòç, you can get your preferred gif by visiting google and searching say &lt;strong&gt;"laughing coding gifs"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_BRI2TXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627335605771/af_sqp7Cg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BRI2TXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627335605771/af_sqp7Cg.png" alt="frame_generic_dark (21).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;@&lt;a href="https://dev.to@DThompsonDev"&gt;Danny Thompson&lt;/a&gt; is also rocking some gif tooü§©&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0vqxKoiM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627335666379/4zmDrubKf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0vqxKoiM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627335666379/4zmDrubKf.gif" alt="tenor (2).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it for this article, I hope you have learned something new from this article, feel free to share your favorite tools in the comment section and which of the above tools is actually new to you.&lt;/p&gt;




&lt;p&gt;Wow, what a journey, I am glad you made it to the end of this article, if you enjoyed and learned from this article, I will like to connect with you.&lt;/p&gt;

&lt;p&gt;Let's connect on&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=unclebigbay143"&gt;Twitter @unclebigbay143&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.linkedin.com/in/unclebigbay/"&gt;LinkedIn @unclebigbay&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My friend and I are holding a meetup every Saturday to discuss JavaScript and other programming tips and to support ourselves.&lt;/p&gt;

&lt;p&gt;You can be a part üëá of the community by &lt;a href="https://unclebigbayandfriends.netlify.app/"&gt; visiting our website&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;See you in the next article. Bye Bye üôã‚Äç‚ôÇÔ∏è&lt;br&gt;
also buy me a coffee below.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Learning Python-Basic course: Day 22, String Methods Part-1</title>
      <author>Aatmaj</author>
      <pubDate>Tue, 27 Jul 2021 06:21:47 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-22-string-methods-part-1-9j8</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-22-string-methods-part-1-9j8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-learn-about-string-functions"&gt;
  &lt;/a&gt;
  Today we will learn about string functions
&lt;/h2&gt;




&lt;p&gt;Till now, we were using strings for various programs. We used them both as input and output parameters. But now we will learn how to modify them.&lt;br&gt;
This week, we will do operations like break a sentence into words, break strings into letters, capitalize them without using the &lt;code&gt;ord()&lt;/code&gt; hack or count number of vowels in a sentence.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#string-as-a-list"&gt;
  &lt;/a&gt;
  String as a list
&lt;/h2&gt;

&lt;p&gt;In Python, we can easily interpret a string as a list of characters. In the example below, we can apply the &lt;code&gt;len()&lt;/code&gt; function to the string txt, or iterate the for loop. &lt;br&gt;
But we cannot treat it as a list and do opertions like pop or append()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Interpreting the string as an array of characters.
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Python"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Length of the txt = "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;#display string using in keyword
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#display the string in original form using range()
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#to display in reverse order
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#We cannot append a character or pop using the standered length functions.
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Python
Length of the txt =  6
P
y
t
h
o
n
P y t h o n 
nohtyPTraceback (most recent call last):
  File "C:/Users/aatma/Downloads/Example 1 .py", line 21, in &amp;lt;module&amp;gt;
    txt.append("a")
AttributeError: 'str' object has no attribute 'append'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#case-changing"&gt;
  &lt;/a&gt;
  Case changing
&lt;/h2&gt;

&lt;p&gt;We will now see how to handel upper and small cases in Python without any direct use of UNICODE characters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#1. Upper case the first letter in this sentence:
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello, AND Welcome"&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#output : Hello, and welcome
&lt;/span&gt;
&lt;span class="c1"&gt;#2. Make the string lower case:
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, And Welcome!@#$"&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#output : hello, and welcome
&lt;/span&gt;
&lt;span class="c1"&gt;#3. Make the string upper case:
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, And Welcome"&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#output : HELLO, AND WELCOME
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello, and welcome
hello, and welcome!@#$
HELLO, AND WELCOME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#word-specific-methods"&gt;
  &lt;/a&gt;
  Word specific methods
&lt;/h2&gt;

&lt;p&gt;Now let's have a look at more string functions via a program. Comments are there whenever necessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="c1"&gt;#1.Print the word "computer", taking up the space of 25 characters,
#with "computer" in the middle:
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"computer"&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 2 default spaces+25 total characters. so distance between hello and world must be 27 characters.
&lt;/span&gt;
&lt;span class="c1"&gt;#2. Return the number of times the value "act" appears in the string:
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"I love programming, programming is my favorite activity"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Frequency of the value ="&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#case matters. Capital I and small i are treated differently.
&lt;/span&gt;
&lt;span class="c1"&gt;#3. Check if the string ends with a punctuation sign .
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, welcome to my world."&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my world."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#4. Set the tab size to 5 whitespaces:
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"First&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;second"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;txt1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ACADEMY"&lt;/span&gt;              

&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"A&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;C&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;A&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;DE&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;M Y"&lt;/span&gt; &lt;span class="c1"&gt;# backslah t (i.e. \t) represents tab space. 
&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expandtabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#expands the tab spaces
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#5. Locates the word "welcome" in the string and returns the index:
&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, welcome to my world."&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"welcome"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#output : 7
#if the result is -1, string does not exist in the sentence
&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hello          computer         world
I love programming, programming is my favorite activity
Frequency of the value = 6
True
First   second
A     C     A     DE    M Y
Hello, welcome to my world.
7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exercises"&gt;
  &lt;/a&gt;
  Exercises
&lt;/h2&gt;

&lt;p&gt;1)- Write a program to change the capitalization of a user input string and add full stop at the end if it isn't present.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a string: a QUick Brown FOX jumps OVer the Lazy doG
A quick brown fox jumps over the lazy dog.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2)- Write a program to give the following output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a string: Python
P 
P y 
P y t 
P y t h 
P y t h o 
P y t h o n 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>learningpython</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>I refactored all my articles</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 27 Jul 2021 06:15:24 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/i-refactored-all-my-articles-2cph</link>
      <guid>https://dev.to/dailydevtips1/i-refactored-all-my-articles-2cph</guid>
      <description>&lt;p&gt;Welcome. You must be wondering why I refactored my articles, right?&lt;/p&gt;

&lt;p&gt;In short it's because of this Tweet by Danny Thompson:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsF1k1ur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1222136283339853833/dr25E9Lk_normal.jpg" alt="Danny Thompson profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Danny Thompson
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dthompsondev"&gt;@dthompsondev&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Javascript Tip&lt;br&gt;&lt;br&gt;Many tutorials cover using var for variables.&lt;br&gt;&lt;br&gt;This is an outdated practice and you will actually use "const" if the variable never is changed or "let" if you must change it.&lt;br&gt;&lt;br&gt;This is a much better practice and will save you headaches in the future.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:27 PM - 21 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1363571000231809025" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1363571000231809025" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1363571000231809025" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The let/const variables are introduced in ES6, so it's "fairly" new. *(ECMAScript 2015).&lt;/p&gt;

&lt;p&gt;So, some of my articles where using the var variable, as I sometimes auto-type it.&lt;/p&gt;

&lt;p&gt;But Danny was right. We should evolve with the new methods we can have at hand.&lt;/p&gt;

&lt;p&gt;And for me, the first step was to update all my articles and code examples to use the respective variable declarations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-main-difference-between-var-let-and-const"&gt;
  &lt;/a&gt;
  The main difference between var, let, and const
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;var&lt;/code&gt;: Globally or function scoped&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;let/const&lt;/code&gt;: Block scoped&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;var&lt;/code&gt;: Can be updated and redeclared&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;let&lt;/code&gt;: Can be updated but not redeclared&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;const&lt;/code&gt;: Can't be updated or redeclared&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;var&lt;/code&gt;: Default initialized as &lt;code&gt;undefined&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;let/const&lt;/code&gt;: not initialised&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;var/let&lt;/code&gt;: Can be declared without being initialised&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;const&lt;/code&gt;: Must be initialised&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see some examples of what this means.&lt;/p&gt;

&lt;p&gt;The first one being the global assignment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fuu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm the var&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Let it go&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fuubar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm a const&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fuu&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// I'm the var&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fuubar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the var assignment can be made globally, where the let and const can't.&lt;br&gt;
However, you rarely need this, and even then, there are ways around it.&lt;/p&gt;

&lt;p&gt;Now let's see what is meant with the redeclaration part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fuu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Var value 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fuu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Var value 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Sure we'll reassign this&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Let value 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Let value 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Uhh, no! you declared this already&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fuubar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Const value 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fuubar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Const value 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Stop! You declared me already&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can completely redeclare the var, which in turn makes it very dangerous.&lt;br&gt;
One might have forgotten it was declared, and JavaScript will replace it anyway.&lt;/p&gt;

&lt;p&gt;As where the let and const can't be redeclared, it will throw a hard error.&lt;/p&gt;

&lt;p&gt;However looking at re-assignment this is a different story:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fuu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Var value 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fuu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Var value 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Let value 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Let value 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fuubar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Const value 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fuubar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Const value 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// TypeError! Assignment to const&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fuu&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Var value 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Let value 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fuubar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the var and let can be changed in value, as where the const can't be assigned.&lt;/p&gt;

&lt;p&gt;However, that doesn't mean you can't change a value inside a const variable. This, for example, is the case when we modify an item inside an array or object.&lt;br&gt;
This doesn't count as a reassignment in JavaScript.&lt;/p&gt;

&lt;p&gt;Let's see how that works then:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fuu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chrizz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;fuu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fuu&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { name: 'Chris' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is quite a tricky concept, and it comes down to what type of property is immutable.&lt;/p&gt;

&lt;p&gt;Are you wondering when it would be a reassignment?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fuu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chrizz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;fuu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;fuu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will throw a type error again since we are entirely reassigning the initial value with a new object!&lt;/p&gt;

&lt;p&gt;The last thing we are checking out is how we can access them without being initialised.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fuu&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Undefined&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fuu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Var value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fuu&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Var value&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hold on! Reference error&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Let value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right, so for the var, we can call it without it even being made yet.&lt;br&gt;
As where if it's a let we can't call it before every initialising.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-which-one"&gt;
  &lt;/a&gt;
  When to use which one?
&lt;/h2&gt;

&lt;p&gt;It can get tricky to decide which one to use for which variable.&lt;br&gt;
But I'll try and answer it in the best way possible.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var&lt;/code&gt;: You no longer need this unless you need to support ancient browsers...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt;: The variable must change a loop counter, a string that is dependant on an action.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const&lt;/code&gt;: This value should not change. I tend to default to const unless I realise it needs to change. And again, if it's an array or object, we can still use const.&lt;/p&gt;

&lt;p&gt;So again, use &lt;code&gt;const&lt;/code&gt; unless you want to reassign value use &lt;code&gt;let&lt;/code&gt; and don't use &lt;code&gt;var&lt;/code&gt; unless you require super old browser support.&lt;/p&gt;

&lt;p&gt;I hope you learned something about these three variable declarations.&lt;br&gt;
It's a game-changer when you properly start using them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>refactorit</category>
    </item>
    <item>
      <title>Android Basics: UI Layouts</title>
      <author>ROHIT KUMAR</author>
      <pubDate>Tue, 27 Jul 2021 06:09:28 +0000</pubDate>
      <link>https://dev.to/rohitk570/android-basics-ui-layouts-g9e</link>
      <guid>https://dev.to/rohitk570/android-basics-ui-layouts-g9e</guid>
      <description>&lt;p&gt;The entire content is inspired by ,&lt;br&gt;
Google's udacity course &lt;a href="https://www.udacity.com/course/android-basics-user-interface--ud834"&gt;Android Basics: User Interface&lt;/a&gt;. Its first part of the five parts &lt;a href="https://www.udacity.com/course/android-basics-nanodegree-by-google--nd803"&gt;Android Basics Nanodegree Program&lt;/a&gt; series , This course is for basics of &lt;strong&gt;Android&lt;/strong&gt; and &lt;strong&gt;Java programming&lt;/strong&gt; as , and take the first step on your journey to becoming an Android developer, you can learn more about this &lt;a href="https://www.udacity.com/course/android-basics-user-interface--ud834"&gt;here&lt;/a&gt;.&lt;br&gt;
So I would be writing a Blog series where I will cover everything that I have learned ,and explain it in easy way.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#in-this-article"&gt;
  &lt;/a&gt;
  In this article,
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;We cover about the basic knowledge of how to place the layouts on the page to create &lt;code&gt;image&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt; , &lt;code&gt;button&lt;/code&gt; on the phone screen.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#so-without-much-late-lets-get-into-topic"&gt;
  &lt;/a&gt;
  So without much late, let's get into topic..
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We use &lt;strong&gt;&lt;em&gt;XML&lt;/em&gt;&lt;/strong&gt; (Xtensible Markup Language) to build Layout or define an  &lt;strong&gt;UI&lt;/strong&gt; in the Android app ,like  TextView how to place and where to place something &lt;/li&gt;
&lt;li&gt;This resource are always maintained separately in various sub-directories under &lt;strong&gt;&lt;code&gt;res/&lt;/code&gt;&lt;/strong&gt; directory of the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#what-is-layout"&gt;
  &lt;/a&gt;
  What is Layoutü§î
&lt;/h1&gt;

&lt;p&gt;Every individual view make up what we call layout of the app of what the user sees on the screen. &lt;/p&gt;

&lt;p&gt;The basic building block for user interface is a &lt;strong&gt;View&lt;/strong&gt; object which is created from the View class and occupies a rectangular area on the screen and is responsible for drawing and event handling. View is the base class for widgets, which are used to create interactive UI components.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;ViewGroup&lt;/strong&gt; is a subclass of View and provides invisible container that hold other Views or other ViewGroups and define their layout properties.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pjxy67LW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52engo5br32rbclztckr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pjxy67LW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52engo5br32rbclztckr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  View
&lt;/h1&gt;

&lt;p&gt;A rectangle on the screen that shows up in a piece of information or some content&lt;br&gt;
It can be &lt;code&gt;image&lt;/code&gt; &lt;code&gt;text&lt;/code&gt; &lt;code&gt;button&lt;/code&gt;or &lt;em&gt;anything a app can display&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#some-view-attributes"&gt;
  &lt;/a&gt;
  ‚≠ïSome View attributes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;android:id&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;View object may have a unique ID assigned to it which will identify the View uniquely. The syntax for an ID, inside an XML tag is &lt;br&gt;
&lt;strong&gt;For assigning the View ID name&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;android:id="@+id/text_id"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;For using its id name to as a reference&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;android:id="@id/text_id"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;layout_width&lt;/code&gt; &amp;amp; &lt;code&gt;layout_height&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are &lt;a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams"&gt;ViewGroup Layout Params&lt;/a&gt;&lt;br&gt;
Its specifies the basic width &amp;amp; height of the view respectively.This is a required attribute for any view inside of a containing layout manager.&lt;/p&gt;

&lt;p&gt;This is actually an attributes of ViewGroup and used by the view to tell there parent view how they want to be set&lt;/p&gt;

&lt;p&gt;The attributes value may be a dimension (such as "12dp") which is hardcoded value or one of the special constants..&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attributes Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Hardcoded values&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;px&lt;/code&gt; (pixels), &lt;code&gt;dp&lt;/code&gt; (density-independent pixels), &lt;code&gt;sp&lt;/code&gt;(scaled pixels based on preferred font size), &lt;code&gt;in&lt;/code&gt; (inches), and &lt;code&gt;mm&lt;/code&gt; (millimeters)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MATCH_PARENT&lt;/td&gt;
&lt;td&gt;which means the view wants to be as big as its parent (minus padding)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WRAP_CONTENT&lt;/td&gt;
&lt;td&gt;which means that the view wants to be just big enough to enclose its content (plus padding)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;     android:layout_width="match_parent"
     android:layout_height="wrap_content"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#density-independent-pixel-dp"&gt;
  &lt;/a&gt;
  Density Independent Pixel (dp)
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#first-lets-know-about-what-is-pixel"&gt;
  &lt;/a&gt;
  First lets know about what is Pixel‚ùì
&lt;/h4&gt;

&lt;p&gt;The one small dot or illuminated area on screen is called &lt;strong&gt;1 pixel&lt;/strong&gt;&lt;br&gt;
Screens are made up of rows and columns of 1000' of these pixel.&lt;br&gt;
Now,&lt;br&gt;
Device can range in &lt;code&gt;screen density&lt;/code&gt; which is numbers of pixel per inch are on the screen , Hences devices with are varies in low,medium, high and extra high resolution.&lt;br&gt;
If we use &lt;code&gt;pixel&lt;/code&gt;(px) as a unit it would appear very smaller on high resolution device as there screen density is more &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#so-its-better-to-use-density-independent-pixel-which-is-also-a-unit-and-are-independent-of-pixel-to-achieve-same-physical-size-of-views-across-of-different-screen-densites-"&gt;
  &lt;/a&gt;
  So its better to use &lt;strong&gt;density independent pixel&lt;/strong&gt; which is also a unit and are independent of pixel ,to achieve same physical size of Views , across of different screen densites .
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#hardcoding"&gt;
  &lt;/a&gt;
  Hardcoding‚ùì
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Its set if instructions given into the app we use to give the fixed value to the &lt;code&gt;View&lt;/code&gt; attributes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Its disadvantages&lt;/strong&gt; is, its fixed we have to keep on updating according to the content .&lt;/li&gt;
&lt;li&gt;Hence we should use some special constant like &lt;code&gt;match_parent&lt;/code&gt; &lt;code&gt;wrap_content&lt;/code&gt; which is flexible and set accordingly .&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#android-ui-controls"&gt;
  &lt;/a&gt;
  ‚≠ïAndroid UI Controls
&lt;/h2&gt;

&lt;p&gt;There are number of UI controls provided by Android that allow you to build the graphical user interface for your app.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sr.No.&lt;/th&gt;
&lt;th&gt;UI Control&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;TextView&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;This control is used to display text to the user&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;EditText&lt;/td&gt;
&lt;td&gt;Its includes rich editing capabilities&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;AutoCompleteTextView&lt;/td&gt;
&lt;td&gt;Its similar to &lt;code&gt;EditText&lt;/code&gt; and shows a suggestions while the user is typing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;ImageView&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;To display image inside the view&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Button&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;It clicked by the user to perform an action&lt;/strong&gt; .&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;ImageButton&lt;/td&gt;
&lt;td&gt;This shows a button with an image (instead of text) that can be pressed or clicked by the user.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;CheckBox&lt;/td&gt;
&lt;td&gt;An on/off switch that can be toggled by the user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;ToggleButton&lt;/td&gt;
&lt;td&gt;An on/off button with a light indicator.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;RadioButton&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;RadioButton&lt;/code&gt; has two states: either checked or unchecked.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;RadioGroup&lt;/td&gt;
&lt;td&gt;A &lt;code&gt;Radiogroup&lt;/code&gt; is used to group together one or more &lt;code&gt;RadioButtons&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;TimePicker&lt;/td&gt;
&lt;td&gt;Its enables users to select a time of the day, in either 24-hour mode or &lt;em&gt;AM/PM&lt;/em&gt; mode.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;DatePicker&lt;/td&gt;
&lt;td&gt;Its  enables users to select a date of the day&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;And many more....&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#now-we-will-learn-abouts-some-important-views-and-there-attributes"&gt;
  &lt;/a&gt;
  üîò Now we will learn abouts some important &lt;em&gt;Views&lt;/em&gt; and there &lt;em&gt;attributes&lt;/em&gt;
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#1textview-attributes"&gt;
  &lt;/a&gt;
  1.TextView Attributes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;android:text&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
Text to display. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;android:textAllCaps&lt;/code&gt;&lt;/strong&gt; &lt;br&gt;
Present the text in ALL CAPS. Possible value either "true" or "false".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;android:textSize&lt;/code&gt;&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We use attributes values unit as &lt;code&gt;sp&lt;/code&gt; here because its changes to with the preference of user for the font size, which is setting app of the Android devices&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;android:textStyle&lt;/code&gt;&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Style (bold, italic, bolditalic) for the text. You can use or more of the following values separated by '|'.&lt;/p&gt;

&lt;p&gt;normal - 0&lt;br&gt;
bold - 1&lt;br&gt;
italic - 2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;android:password&lt;/code&gt;&lt;/strong&gt; &lt;br&gt;
Whether the characters of the field are displayed as password dots instead of themselves. Possible value either "true" or "false".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;android:textColor&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
For setting the color of color of the text .&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#hexcolor-code"&gt;
  &lt;/a&gt;
  HexColor Code
&lt;/h5&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Android has set of color defined byt not all ,hence from material design we can use color code called hex color code is given a specific hexadecimal digits start with &lt;strong&gt;"#"&lt;/strong&gt; sign.&lt;br&gt;
Eg:- #FF0000-&amp;gt; Red&lt;br&gt;
     #000000-&amp;gt; Black&lt;br&gt;
     #FFFFFF-&amp;gt; White ,etc&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Similarly many more attributes you can check on&lt;/strong&gt; &lt;a href="https://developer.android.com/reference/android/widget/TextView"&gt;documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
      &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/text_id"&lt;/span&gt;
      &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"300dp"&lt;/span&gt;
      &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
      &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"Hello_world"&lt;/span&gt; 
      &lt;span class="na"&gt;android:textAllCaps=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
      &lt;span class="na"&gt;android:textColor=&lt;/span&gt;&lt;span class="s"&gt;"@android:color/holo_blue_dark
      android:textSize="&lt;/span&gt;&lt;span class="err"&gt;50sp"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2imageview-attributes"&gt;
  &lt;/a&gt;
  2.ImageView Attributes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;android:src&lt;/code&gt;&lt;/strong&gt; 
Sets a drawable as the content of this ImageView.
&lt;strong&gt;How to insert and image file&lt;/strong&gt; ‚ùì

&lt;ul&gt;
&lt;li&gt;First of all download an image , save it somewhere in local&lt;/li&gt;
&lt;li&gt;Now, in the &lt;em&gt;directories&lt;/em&gt; &lt;strong&gt;app/res/drawable&lt;/strong&gt; ,we put here every images used in the app&lt;/li&gt;
&lt;li&gt;For placing here we have to right click on drawable folder, click on &lt;strong&gt;reveal in explorer&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Now, just drag and drop the image file here in the drawable folder &lt;/li&gt;
&lt;li&gt;Inside the ImageView use this attributes &lt;code&gt;android:src&lt;/code&gt; to refer our image in the &lt;strong&gt;drawable folder&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@&lt;/code&gt; is used  for the referencing a resource in an android app, here &lt;code&gt;drawable&lt;/code&gt; is the resource type, and then we write the filename of the specific image
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;android:src="@ drawable/image_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;There are many various other resources like static content that your code uses, such as bitmaps, colors, layout definitions, user interface strings, animation instructions, and more. These resources  are always &lt;em&gt;maintained separately&lt;/em&gt; in various &lt;em&gt;sub-directories&lt;/em&gt; under &lt;strong&gt;&lt;code&gt;res/&lt;/code&gt;&lt;/strong&gt; directory of the project.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; MyProject/
   app/
      manifest/
         AndroidManifest.xml
   java/
      MyActivity.java  
      res/
         drawable/  
            image_name.png  
         layout/  
            activity_main.xml
            info.xml
         values/  
            strings.xml 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;android:scaleType&lt;/code&gt;&lt;/strong&gt;
Controls how the image should be resized or moved to match the size of this ImageView. 
It has some constant attributes values Lets check some of its ,

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;center&lt;/code&gt;   Center the image in the view, but 
perform no scaling.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;centerCrop&lt;/code&gt;   Its scales the image to fit, the bounds of the view And it also maintain the aspect ratio of the image so that it didn't get distorted and then it crop of the edges and centres the image .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Similarly Many more attributes you can check on&lt;/strong&gt;&lt;a href="https://developer.android.com/reference/android/widget/ImageView"&gt;Documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;ImageView&lt;/span&gt;
         &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
         &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
         &lt;span class="na"&gt;android:src=&lt;/span&gt;&lt;span class="s"&gt;"@drawable/image_name&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#3button-attributes"&gt;
  &lt;/a&gt;
  3.Button Attributes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Button&lt;/strong&gt;, is a component which can be pressed or clicked by the user to perform an action. It has the same properties as a TextView, with a few Button specific properties.
The main usage of the Button view is that whenever we click a button, we can set a method that will handle that specific button request and will carry out the necessary action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below there is XML, how to define a button view in your android application:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
    &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/button_id"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
    &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"Click me"&lt;/span&gt;
    &lt;span class="na"&gt;android:textColor=&lt;/span&gt;&lt;span class="s"&gt;"@android:color/holo_blue_dark"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyActivity&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Activity&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

         &lt;span class="n"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;content_layout_id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

         &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;button_id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
         &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setOnClickListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OnClickListener&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
             &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                 &lt;span class="c1"&gt;// Code Perform action on click&lt;/span&gt;
             &lt;span class="o"&gt;}&lt;/span&gt;
         &lt;span class="o"&gt;});&lt;/span&gt;
     &lt;span class="o"&gt;}&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above code is in &lt;code&gt;activity class&lt;/code&gt; its  creates an instance of &lt;code&gt;View.OnClickListener&lt;/code&gt; and wires the listener to the button using &lt;code&gt;setOnClickListener&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Therefore, whenever we press the &lt;strong&gt;button&lt;/strong&gt; with &lt;strong&gt;id&lt;/strong&gt; &lt;code&gt;button_id&lt;/code&gt;, the above method is called which executes the code written in &lt;code&gt;onClick(View)&lt;/code&gt; method&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Using &lt;code&gt;android:onClick&lt;/code&gt; attributes&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can also assign a method directly in the layout XML while defining the button using, android:onClick attribute&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
    &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/button_id"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
    &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"Click Me"&lt;/span&gt;
    &lt;span class="na"&gt;android:textColor=&lt;/span&gt;&lt;span class="s"&gt;"@android:color/holo_blue_dark"&lt;/span&gt;
    &lt;span class="na"&gt;android:onClick=&lt;/span&gt;&lt;span class="s"&gt;"study"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;When user will click on the Button&lt;/strong&gt; defined in the above layout xml file, then Android system will call &lt;code&gt;study(View)&lt;/code&gt; method, defined in &lt;strong&gt;MainActivity.java&lt;/strong&gt; file. In order for this to work, the method must be public and accept a View type as its only parameter.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;study&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//Perform action on click   &lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Similarly many more attributes you can check on&lt;/strong&gt; &lt;a href="https://developer.android.com/guide/topics/ui/controls/button"&gt;documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#viewgroup"&gt;
  &lt;/a&gt;
  ViewGroup
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;It is a root view ,but that big as it contain the other view inside itself .&lt;/li&gt;
&lt;li&gt;It's called the parent view and the view inside its are called its child view of the view group ,can be &lt;code&gt;TextView&lt;/code&gt; , &lt;code&gt;Button&lt;/code&gt; , &lt;code&gt;ImageView&lt;/code&gt;,etc.&lt;/li&gt;
&lt;li&gt;The ViewGroup has also attributes ,such as layout_height, layout_width, background color ,etc.&lt;/li&gt;
&lt;li&gt;We call it as a containers for the other views .&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#types-of-viewgroup"&gt;
  &lt;/a&gt;
  Types of ViewGroup
&lt;/h3&gt;

&lt;p&gt;There are number of Layouts provided by Android which you will use in almost all the Android applications to provide different view, look and feel.&lt;br&gt;
Some of them are ,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Linear Layout&lt;/strong&gt;&lt;br&gt;
LinearLayout is a view group that aligns all children in a single direction, vertically or horizontally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Relative Layout&lt;/strong&gt;&lt;br&gt;
RelativeLayout is a view group that displays child views in relative to the parent or the other child view.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Table Layout&lt;/strong&gt;&lt;br&gt;
TableLayout is a view that groups views into rows and columns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Frame Layout&lt;/strong&gt;&lt;br&gt;
The FrameLayout is a placeholder on screen that you can use to display a single view.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Constraint Layout&lt;/strong&gt;&lt;br&gt;
Constraint Layout allows us to create large and complex layouts with a flat view hierarchy, and also allows you to position and size widgets in a very flexible way.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;
  &lt;a href="#thats-all-for-today"&gt;
  &lt;/a&gt;
  That's all for today!
&lt;/h3&gt;

&lt;p&gt;If you are thinking of starting an Android Development you can check this blog,&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rohitk570" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46bzOWvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZJpAQ_UY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/644632/af4c3bd6-8ece-4383-a417-7f1fc3eaa7c1.jpg" alt="rohitk570"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rohitk570/what-to-learn-to-get-started-with-android-app-development-19il" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What to Learn to get started with Android App Development?&lt;/h2&gt;
      &lt;h3&gt;ROHIT KUMAR „Éª Jul 12 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;If you liked my content, plz do share &lt;br&gt;
Also if you got any questions feel free to &lt;strong&gt;comment below&lt;/strong&gt; .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-there-was-any-mistake-please-do-let-me-know-ill-correct-it-immediately"&gt;
  &lt;/a&gt;
  If there was any mistake please do let me know, I'll correct it immediately.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You! üòä
&lt;/h2&gt;

&lt;p&gt;You can follow me on &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/rohitk570/"&gt;Linkedin&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/RohitK_570"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>android</category>
      <category>ux</category>
      <category>beginners</category>
    </item>
    <item>
      <title>tmux new-window</title>
      <author>Waylon Walker</author>
      <pubDate>Tue, 27 Jul 2021 05:23:06 +0000</pubDate>
      <link>https://dev.to/waylonwalker/tmux-new-window-2cpc</link>
      <guid>https://dev.to/waylonwalker/tmux-new-window-2cpc</guid>
      <description>&lt;p&gt;New window as it sounds makes new windows in tmux.  Windows are kind of like tabs.  They are another screen within your sessions that you can name and make&lt;br&gt;
new panes in.&lt;/p&gt;

&lt;p&gt;Default key bindings for creating and navigating windows in tmux.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bind-key          c new-window
bind-key          p previous-window
bind-key          n next-window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As always I have rebound these keys because I generally prefer a single keystroke over the prefix plus keybinding approach that tmux gives by default.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#‚Äï‚Äïwindows‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-c new-window &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-p previous-window
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-n next-window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When I started using tmux I did almost everything in one giant session with many panes and windows.  It became a nightmare to manage and quickly get between two sets work efficiently.  This year I leaned in on sessions quite heavily.  Checkout this üëá post to see that workflow in depth.&lt;/p&gt;



&lt;p&gt;Be sure to check out the full youtube playlist and subscribe if you like it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6Bkr"&gt;https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6Bkr&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/waylonwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ukb2PhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Izxe95PY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/271838/95e313ca-39fc-4ee6-bf57-ad52b4dcf0d2.png" alt="waylonwalker"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/waylonwalker/how-i-navigate-tmux-in-2021-2ina" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I navigate tmux in 2021&lt;/h2&gt;
      &lt;h3&gt;Waylon Walker „Éª May 12 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bash&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Also check out this long form post for more about how I use tmux.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>cli</category>
      <category>linux</category>
      <category>tmux</category>
    </item>
  </channel>
</rss>
