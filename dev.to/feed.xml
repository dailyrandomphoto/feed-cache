<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Taking Context &amp; Hooks To The Next Level With Component Factories</title>
      <author>Itay Schechner</author>
      <pubDate>Mon, 02 Aug 2021 09:10:54 +0000</pubDate>
      <link>https://dev.to/itays123/taking-context-hooks-to-the-next-level-with-component-factories-46ad</link>
      <guid>https://dev.to/itays123/taking-context-hooks-to-the-next-level-with-component-factories-46ad</guid>
      <description>&lt;p&gt;Before you slander me in the comments, I just wanted to let you know: &lt;strong&gt;It's my opinion&lt;/strong&gt;. Not all readers will agree with it. I am new to this approach as well, and I wanted to hear your opinion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Why to use the component factory approach&lt;/li&gt;
&lt;li&gt;Supercharging the context API&lt;/li&gt;
&lt;li&gt;Usage outside of the context API&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is a typical navigation bar component I wrote for one of my projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bg-gray-100 nav px-8 w-screen flex"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"md:px-4 lg:px-6 flex items-center h-16 md:ml-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-lg md:text-xl text-purple-900 font-bold"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Partydeck
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"links flex flex-grow md:flex-none items-stretch justify-end pl-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SignedOutLinks&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavigationButton&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;GameWebsiteLink&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Join Game
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavigationButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SignedInLinks&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There's nothing wrong with this component. In fact, most of you will even like it. However, what about this one:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NavigationBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bg-theme-700 h-16 nav px-8 shadow-xl w-screen flex flex-row items-center justify-between"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center space-x-1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logo&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-6 h-6"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LinkablePartydeck&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-roboto font-bold text-white text-lg hover:text-theme-300"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"links flex items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyDecks&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NewDeck&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NotAuthenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Login&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Register&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NotAuthenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;JoinGameLink&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-bold font-roboto px-3 py-2 text-theme-700 bg-green rounded hover:bg-green-light ml-2"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Both components have the exact same functionality. Yet, when you read the second one, you can actually &lt;strong&gt;understand&lt;/strong&gt; exactly what you're seeing.&lt;/p&gt;

&lt;p&gt;Believe it or not, despite having much more components in my codebase - the overall amount of lines in the navigation source code has decreased dramatically.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#component-factories-to-the-rescue"&gt;
  &lt;/a&gt;
  Component factories to the rescue
&lt;/h2&gt;

&lt;p&gt;How did I do that? Using &lt;strong&gt;component factories&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Component factories are functions that return JSX providers. In those factories, you inject the functionality, but leave the styling to the parent component.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#why-do-use-them"&gt;
  &lt;/a&gt;
  Why do use them?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Increased code readability&lt;/li&gt;
&lt;li&gt;Ease of refactoring&lt;/li&gt;
&lt;li&gt;Increased Resusability&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#some-examples"&gt;
  &lt;/a&gt;
  Some examples
&lt;/h3&gt;

&lt;p&gt;The most classic examples I can provide are using the React Context API:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Context Action Factory&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;withClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I could create a &lt;code&gt;Logout&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Navigation/buttons.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Logout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Log Out&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I used this Logout button in multiple places, and in each one of them it contained different styles.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// NavigationBar.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyDecks&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NewDeck&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// AuthPopup.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex font-bold w-max space-x-3 items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-500 text-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The Context Conditional Wrapper Factory&lt;/strong&gt;&lt;br&gt;
I find this one extremely useful. &lt;/p&gt;

&lt;p&gt;Suppose you want to conditionally render a fraction of your application to signed in users only. You'd do something like that:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isSignedIn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isSignedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SuperSafeComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Or, suppose you have a dialog and a button that opens it. Your dialog would look something like that:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDialogContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&amp;lt;/&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In an enterprise application, you might have tens of those. Whereas, the conditional wrapper factory will save you a lot of time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ConditonalWrapperFactory.tsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createConditionalWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;Wrapper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shouldRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;shouldRender&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// AuthFilters.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Authenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createConditionalWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSignedIn&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NotAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createConditionalWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSignedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Dialog.tsx&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WhenVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WhenVisible&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;WhenVisible&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#usage-outside-of-the-context-api"&gt;
  &lt;/a&gt;
  Usage outside of the Context API.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The Glyph Factory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In my project, I have 30 decorative photos, located anywhere around the website. To save myself time and effort, I created this simple factory:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// glyphFactory.tsx&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;GlyphProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;className&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createGlyph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;GlyphProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt; &lt;span class="cm"&gt;/* My favorite feature! */&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// res/glyphs/LightBulbGlyph.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;glyph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createGlyph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;glyph&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;List Factory&lt;/strong&gt; and &lt;strong&gt;Decorated Pharagraph Factory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are pretty simple ones to understand. In my website, I had plenty of "about-related" static content. I found myself over-creating a list of text, and over-creating a flexbox with a Glyph and a text.&lt;/p&gt;

&lt;p&gt;For that, I created those factories:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ListFactory.tsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createList&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;withClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// DecoratedPharagraphFactory.tsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Glyph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSXProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GlyphProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;withClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Glyph&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-full"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I created those in my home page code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home/rules.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CardPick&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/CardPick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;JudgePick&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/JudgePick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/Question&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Victory&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/Victory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../shared/decoratedPharagraphFactory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JudgePickedRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;JudgePick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Each round, a judge is picked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;QuestionRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The other players are given a question and and 4 answer cards, and pick the funniest or most clever answer of their choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BestMatchRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;CardPick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The judge gets the question and the answers displayed anonymously, and picks the best answer of their choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VictoryRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Victory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The player who submitted the answer, wins the round!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I then left it to the home page component to handle he responsive displaying logic and the styling. How Simple Is That?&lt;/p&gt;

&lt;p&gt;Another good usage was in the about page:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IdeaSubtitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;LightBulb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Idea of Partydeck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FeaturesList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Playable from distance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Inclusive and fair - the game makes the judge or the round judge based on the quality of the answer card rather than the quality of the player who had it.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Binding - it’s impossible to win when you are not 100% focused&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Personalized - each one can make their own customized version&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connecting - the game makes you get to know the other players better&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GettingBetterSubtitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Growth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Always Getting Better&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GitHubLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;externalLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GitHub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://github.com/itays123/partydeck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ScrollablePageWrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PageTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About Us&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PageTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IdeaSubtitle&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"decorated-subtitle"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content-section"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;When we thought of Partydeck, we wanted a game that is:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FeaturesList&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Those Guiding Principals will keep guiding us in the next versions.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GettingBetterSubtitle&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"decorated-subtitle"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content-section space-y-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Developing an application takes time and patience, and the result is
          not always perfect.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            If you have a bug report, a suggestion, a comment or any feedback at
            all regarding this website, we encourage you to contact us via
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GitHubLink&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"underline"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;, or the email link described there.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Thanks a lot, the Partydeck team.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ScrollablePageWrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Look how simple is that!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Do you have any ideas of using component factories in your next React.js project? Do you think it's a good approach at all? Let me know in the comments!&lt;/p&gt;

&lt;p&gt;View the full source code: (branch &lt;code&gt;1.1.2-redesign&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/itays123"&gt;
        itays123
      &lt;/a&gt; / &lt;a href="https://github.com/itays123/partydeck"&gt;
        partydeck
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A cool online card game!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>react</category>
      <category>webdev</category>
      <category>functional</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Tips and Tricks to Ace the Certified Kubernetes Application Developer</title>
      <author>Sahan</author>
      <pubDate>Mon, 02 Aug 2021 09:04:00 +0000</pubDate>
      <link>https://dev.to/sahan/tips-and-tricks-to-ace-the-certified-kubernetes-application-developer-175k</link>
      <guid>https://dev.to/sahan/tips-and-tricks-to-ace-the-certified-kubernetes-application-developer-175k</guid>
      <description>&lt;p&gt;I recently passed the &lt;a href="https://www.cncf.io/certification/ckad/"&gt;Certified Kubernetes Application Developer&lt;/a&gt; exam and thought to share some tips and tricks that might come in handy if you are also planning to take the exam in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  📔 Background
&lt;/h3&gt;

&lt;p&gt;About a month ago, I decided to learn more about Kubernetes as it would be really useful for the my current role. Prior to that, I was always fascinated by Kubernetes but never got the chance to work on an actual system that used it. I knew how it worked from a 10,000 feet view, but didn’t have an idea of core components, basic constructs and literally to be able to do anything with it.&lt;/p&gt;

&lt;p&gt;Having taken the exam, I’m quite comfortable navigating through Kubernetes and now it makes sense when I’m doing something with it, rather than merely following some commands.&lt;/p&gt;

&lt;p&gt;CKAD is a hands-on exam and managing your time is absolutely crucial. I hope you find the following tips useful✌️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-of-the-exam"&gt;
  &lt;/a&gt;
  🗒️ Summary of the exam
&lt;/h3&gt;

&lt;p&gt;To summarize the key facts about the CKAD exam,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Passing score is 66%&lt;/li&gt;
&lt;li&gt;2 hours duration, comprised of 19 questions&lt;/li&gt;
&lt;li&gt;Questions will have varying weights (from 2% - 13%)&lt;/li&gt;
&lt;li&gt;You can also open only one tab to browse Kubernetes documentation&lt;/li&gt;
&lt;li&gt;Remotely proctored&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#aliases-and-bash-tricks"&gt;
  &lt;/a&gt;
  💻 Aliases and bash tricks
&lt;/h3&gt;

&lt;p&gt;This is a really important first that I can’t recommend enough. I was using the full &lt;code&gt;kubectl&lt;/code&gt; command during the study phase but later started using just &lt;code&gt;k&lt;/code&gt; by setting up an alias when I was practising simply to cut down the time when typing commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;kubectl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initially, it will take a few seconds to type this out but it will pay dividends throughout the exam. Here are a few more if you are interested. You don’t need to use everything in here though. In fact, I only used the above alias.&lt;/p&gt;

&lt;p&gt;Feel free to mix and match the commands you are comfortable with 👍&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl describe'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl run'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl create'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ke&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl explain'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kgp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl get pods'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kgs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl get svc'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You don’t need to be a Linux guru to take the exam, but, remember you will do it in some Linux env. (potentially Ubuntu). So it helps to know a few basic Bash commands if you are coming from Windows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cp&lt;/code&gt; - Copy files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mv&lt;/code&gt; - Move/Rename files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mkdir&lt;/code&gt; - Create new folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ls&lt;/code&gt; - List files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rm&lt;/code&gt; - Remove/Delete files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep&lt;/code&gt; - Search through text. Useful when you want to filter a list of pods. Eg: &lt;code&gt;kubectl get pods | grep -i status:&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl+R&lt;/code&gt; - To do a reverse search to find a command you have previously run&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra tip: Use short names of resources whenever possible.&lt;/p&gt;

&lt;p&gt;Not sure what are the short names? You can check it with &lt;code&gt;kubectl api-resources&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ge4lsYTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/bb71424ae729b8cfd1dfcf1dd870eafc/5a190/tips-and-tricks-for-acing-ckad-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ge4lsYTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/bb71424ae729b8cfd1dfcf1dd870eafc/5a190/tips-and-tricks-for-acing-ckad-1.png" alt="tips-and-tricks-for-acing-ckad-1.png" title="tips-and-tricks-for-acing-ckad-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-a-good-grasp-of-vim"&gt;
  &lt;/a&gt;
  ⌨️ Get a good grasp of VIM
&lt;/h3&gt;

&lt;p&gt;I found having previous experience in VIM came in handy. However, you don’t need to be a master at it. Using nano would be fine too if you are good.&lt;/p&gt;

&lt;p&gt;Take the time to set the following to your VIM profile before attempting any questions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vi ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following lines and save it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;set &lt;/span&gt;expandtab
&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;tabstop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;shiftwidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These commands will save you from having indentation issues and weird syntax issues while working with YAML files during the exam.&lt;/p&gt;

&lt;p&gt;Here are some other commands that may be of help if you are not familiar with VIM.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt; - Search through text. Also, use &lt;code&gt;n&lt;/code&gt; to go to the next result.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dd&lt;/code&gt; - Delete a line&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;u&lt;/code&gt; - Undo&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift+A&lt;/code&gt; - Go to the end of the line and enter the INSERT mode&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gg&lt;/code&gt; - Go to the beginning of the file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;G&lt;/code&gt; - Go to the end of the file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;o&lt;/code&gt; - Go to the next line and enter INSERT mode&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;v&lt;/code&gt; - Enter VISUAL mode. You can select a block of lines with arrow keys or &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; keys. You can copy with &lt;code&gt;y&lt;/code&gt; and paste with &lt;code&gt;p&lt;/code&gt; . Also, you can indent a block with &lt;code&gt;Shift + &amp;gt;&lt;/code&gt; to right and &lt;code&gt;Shift + &amp;lt;&lt;/code&gt; to indent to the left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, while you are in NORMAL mode you can type &lt;code&gt;ZZ&lt;/code&gt; to quickly save and go back to the terminal without having to type &lt;code&gt;:wq&lt;/code&gt; How cool is that? ⚡&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mastering-the-imperative-commands"&gt;
  &lt;/a&gt;
  ☄️ Mastering the imperative commands
&lt;/h3&gt;

&lt;p&gt;You would come across many questions where you would have to create pods, deployments, services etc. In such cases, don’t bother writing up YAML definitions from scratch - or even finding the relevant reference in the k8s docs.&lt;/p&gt;

&lt;p&gt;You can save a lot of time by using imperative commands. For instance, if you are tasked to create a pod with &lt;code&gt;nginx&lt;/code&gt; as the image, &lt;code&gt;tier:frontend&lt;/code&gt; as labels with the port &lt;code&gt;80&lt;/code&gt; exposed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl run tmp &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nt"&gt;--labels&lt;/span&gt; &lt;span class="nv"&gt;tier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;frontend &lt;span class="nt"&gt;--port&lt;/span&gt; 80
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Say you are asked to expose a deployment &lt;code&gt;nginx&lt;/code&gt; with a &lt;code&gt;NodePort&lt;/code&gt; service called &lt;code&gt;nginx-svc&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl expose deploy nginx &lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx-svc &lt;span class="nt"&gt;--port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;80 &lt;span class="nt"&gt;--target-port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;80 &lt;span class="nt"&gt;--type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NodePort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if you can’t get everything included in a single command you can use the &lt;code&gt;--dry-run=client -o yaml &amp;gt; tmp.yaml&lt;/code&gt; to export it to a file before creating the resource.&lt;/p&gt;

&lt;p&gt;Oh btw, if you need to delete a pod quickly you can use the &lt;code&gt;--grace-period=0 --force&lt;/code&gt; command to quickly delete them without waiting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl delete po &amp;lt;pod name&amp;gt; &lt;span class="nt"&gt;--grace-period&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nt"&gt;--force&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#when-in-trouble"&gt;
  &lt;/a&gt;
  🤔 When in trouble
&lt;/h3&gt;

&lt;p&gt;Pay attention to the weightage of the question and a rough idea of how long it will take you to solve it. I can remember, I was looking at a question that was quite long and had a fair bit of configuration to be done. But the weightage was only 2% 😆 I marked it down on the provided &lt;strong&gt;notepad&lt;/strong&gt; and skipped it (you can also &lt;strong&gt;Flag&lt;/strong&gt; a question). The next question was 4% and was really really easy! I hope you get the point.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Don’t be afraid to skip and revisit questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you forgot how something is placed in a resource definition, you can use &lt;code&gt;kubectl explain &amp;lt;resource name&amp;gt; --recursive | less&lt;/code&gt; to find what you are looking for.&lt;/p&gt;

&lt;p&gt;Another useful tip I can give you is, the &lt;code&gt;kubectl &amp;lt;resource name&amp;gt; -h&lt;/code&gt; command. You can use it like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;k run &lt;span class="nt"&gt;-h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DrX4cmiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/a14f5b74fe1046df67075fe6b67a0834/5a190/tips-and-tricks-for-acing-ckad-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DrX4cmiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/a14f5b74fe1046df67075fe6b67a0834/5a190/tips-and-tricks-for-acing-ckad-2.png" alt="tips-and-tricks-for-acing-ckad-2.png" title="tips-and-tricks-for-acing-ckad-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-note-on-clusters-amp-namespaces"&gt;
  &lt;/a&gt;
  ☝️ A note on clusters &amp;amp; namespaces
&lt;/h3&gt;

&lt;p&gt;This is also a very important point you should pay attention to. At the top of each question, if you will be given a command to set the current context. &lt;strong&gt;Make sure to run it for each question&lt;/strong&gt; as different questions will be in different clusters.&lt;/p&gt;

&lt;p&gt;Another point is, &lt;strong&gt;pay attention to any namespaces&lt;/strong&gt; in the given question text. Sometimes it will be worded within the question. Sometimes it will be at the bottom of the question as a separate note!&lt;/p&gt;

&lt;p&gt;In a question where you will have to &lt;code&gt;ssh&lt;/code&gt; into servers please make sure to remember (or note it down) which cluster and server you are in. And remember to &lt;code&gt;exit&lt;/code&gt; out of it before going to the next question.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leverage-the-docs"&gt;
  &lt;/a&gt;
  📄 Leverage the docs
&lt;/h3&gt;

&lt;p&gt;In certain cases, it’s better to visit the docs than to spend time to figure out what needs to be done. For instance, if there’s a question on setting up a Persistent Volume, the question will also have a section to create a Persistent Volume Claim and to create a Pod to use that.&lt;/p&gt;

&lt;p&gt;Go to the docs, type &lt;code&gt;pv&lt;/code&gt; at the search bar and click on the link that says “Configure a Pod to Use a PersistentVolume for Storage”. And yes, you need to know where things are at within the K8S docs!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfDWkUML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/9b97538a8cd17fe8d8d482d20d5c327a/5a190/tips-and-tricks-for-acing-ckad-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfDWkUML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/9b97538a8cd17fe8d8d482d20d5c327a/5a190/tips-and-tricks-for-acing-ckad-3.png" alt="tips-and-tricks-for-acing-ckad-3.png" title="tips-and-tricks-for-acing-ckad-3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-practice-practice"&gt;
  &lt;/a&gt;
  👟 Practice, practice, practice
&lt;/h3&gt;

&lt;p&gt;Speed is key to the exam. Although you get 2 hours, it will just fly! 🦅&lt;/p&gt;

&lt;p&gt;When you pay for the exam you will get 2 free mock exam sessions before sitting the real exam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLsPDBvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/98/16/67/981667bac32a91436e9dd3fa78afa4ab.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLsPDBvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/98/16/67/981667bac32a91436e9dd3fa78afa4ab.jpg" alt="Meme on speed"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;As Jeremy Clarkson would say, "SPEEEEEEEEED!!!!" 😂&lt;/center&gt;

&lt;p&gt;Here are some more exercises I used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/dgkanatsios/CKAD-exercises"&gt;https://github.com/dgkanatsios/CKAD-exercises&lt;/a&gt; [Free]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bmuschko/ckad-prep"&gt;https://github.com/bmuschko/ckad-prep&lt;/a&gt; [Free]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kodekloud.com/courses/certified-kubernetes-application-developer-ckad/"&gt;https://kodekloud.com/courses/certified-kubernetes-application-developer-ckad/&lt;/a&gt; [Paid]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/bb-tutorials-and-thoughts/practice-enough-with-these-questions-for-the-ckad-exam-2f42d1228552"&gt;https://medium.com/bb-tutorials-and-thoughts/practice-enough-with-these-questions-for-the-ckad-exam-2f42d1228552&lt;/a&gt; [Free]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  👋 Conclusion
&lt;/h3&gt;

&lt;p&gt;Do you know what’s the hardest thing to do after the exam? waiting for the results! 🤣 It might take up to 24 - 36 hours to get your result. Here’s my certificate if you are interested.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wYItoif8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/7f318d8b9269ad918fa442ed8eddaa57/5a190/tips-and-tricks-for-acing-ckad-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wYItoif8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/7f318d8b9269ad918fa442ed8eddaa57/5a190/tips-and-tricks-for-acing-ckad-4.png" alt="tips-and-tricks-for-acing-ckad-4.png" title="tips-and-tricks-for-acing-ckad-4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you found these tips helpful. Feel free to comment below if you have got any tips and tricks too! Good luck with your exam!!! 🎉&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>ckad</category>
      <category>certification</category>
    </item>
    <item>
      <title>What are the benefits of using Angular?</title>
      <author>Aliaksei Kuncevič</author>
      <pubDate>Mon, 02 Aug 2021 08:37:26 +0000</pubDate>
      <link>https://dev.to/kuncevic/what-are-the-benefits-of-using-angular-5840</link>
      <guid>https://dev.to/kuncevic/what-are-the-benefits-of-using-angular-5840</guid>
      <description>&lt;p&gt;&lt;strong&gt;Time changes everything. Angular is timeless and meets all the modern business requirements.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Angular has picked up steam in recent years, and it becomes “the cherry on the cake” for most app developers, and there are many good reasons for it. Let's see the key reasons for using Angular and the top benefits  for your business if you choose to go with Angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-of-all-lets-understand-what-angular-is"&gt;
  &lt;/a&gt;
  First of all, let's understand what Angular is
&lt;/h2&gt;

&lt;p&gt;Angular is a Javascript-based framework for developing mobile and desktop frame applications created by Google. It is used and favored by the Google Cloud platform, AdWords, and thousands of web applications built within Google. Other big names have also chosen Angular: Forbes, Delta Airlines, BMW, Samsung, Paypal, Tesla, Netflix, SpaceX.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, why do all of these companies choose Angular?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here are the top five main benefits:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#productivity"&gt;
  &lt;/a&gt;
  Productivity
&lt;/h2&gt;

&lt;p&gt;As an app developer, you understand the time is highly precious for each project, and surely you don't want to waste any minute of it. Once you understand the core principles of Angular building blocks and build a first Angular application using it, later you can apply the same thinking creating a new one. Your journey as an Angular developer is to create modular, performant, accessible, and maintainable applications by simply following the best practices and general guidelines that goes with them&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#legolike-building-blocks"&gt;
  &lt;/a&gt;
  Lego-like building blocks
&lt;/h2&gt;

&lt;p&gt;Angular applications are built on logical modular principles, which means that you can simplify your life as an app developer by benefiting from dividing your code into small blocks. Those blocks can be reusable and can help to maintain immense code base health. It will help the business be more efficient, organised, cost-effective, and stay in line with any company’s KPI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-ecosystem"&gt;
  &lt;/a&gt;
  Angular ecosystem
&lt;/h2&gt;

&lt;p&gt;Angular ecosystem contains all the possible fundamental tools and features you need to design and build an app. For example, libraries like Angular Material incorporate diverse components and modules, which helps save a lot of time and costs when building new applications. In addition, all of the Angular Material UI components, patterns, and performance are optimised to meet all expectations and high-quality standards.&lt;/p&gt;

&lt;p&gt;You are not alone on your journey with Angular; by joining Angular, you are becoming a part of a friendly environment where you can become a part of the Angular community and benefit from various tools Angular ecosystem offers .&lt;/p&gt;

&lt;p&gt;The Angular ecosystem is boundless. Its generous selection of well-maintained production-ready components and tools will make your development life simpler and painless. In addition, things such as strong typings will save you time catching errors and help you scale your projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strong-typings-with-typescript"&gt;
  &lt;/a&gt;
  Strong Typings with TypeScript
&lt;/h2&gt;

&lt;p&gt;TypeScript is a first-class citizen in the Angular ecosystem. Angular itself is built with TypeScript, a Superset of Javascript, meaning that you are on the safe side and have more control over your code. With TypeScript, you can easily spot bugs and typing errors while producing understandable, efficient, and high-quality code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best Practices
&lt;/h2&gt;

&lt;p&gt;Angular programming style is based on best practices, which are embedded with modern component-based architecture. So, what does it mean exactly? First, as a developer, you will build components and other angular building blocks that will be united into a solid application. Then, all you need to do is construct modular parts of  the app, while Angular tooling will take care of everything else. Doing so eliminates unnecessary code creation.  Furthermore, proper and correct preliminary setup and configuration that follow best practices will simplify your work, ensuring a lighter and more efficient development process.&lt;/p&gt;

&lt;p&gt;When it comes to  app development, it can be a challenging journey. Even though we are pretty spoiled with the various options to choose from, only the right decisions and best practices can convert our efforts into success. That is the reason why so many companies are choosing Angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-development-tools"&gt;
  &lt;/a&gt;
  Angular Development Tools
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, the Angular ecosystem is boundless and very developed. It provides a wide range of advanced tools that can bring your development experience to an entirely new level. &lt;/p&gt;

&lt;p&gt;Please see below the tip of the week, which can navigate you through the available options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--57BzX8KM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626940878727/v8hvx9JXY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--57BzX8KM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626940878727/v8hvx9JXY.png" alt="3-static-TIP.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, there is a very fruitful conversation available on Angular Rocks Podcast, which focuses on this matter in every detail.&lt;/p&gt;

&lt;p&gt;The guest we hosted is Minko Gechev, the technical lead, and Angular Team DevRel  Manager at Google. He is passionate about computer science, open-source frameworks, libraries, and performance tooling. His extraordinary expertise helped us cover all of the hot topics that any web developer wants to hear about, from modern dev tools for Angular developers to insightful tips and tricks that will help to improve your development processes. You can listen to the episode &lt;a href="https://share.transistor.fm/s/a21f025f"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Angular will never let you down, and by continuing to explore the Angular world, you can progress and enjoy the development process on an entirely different level. &lt;/p&gt;

</description>
      <category>angular</category>
      <category>tips</category>
      <category>webdev</category>
      <category>inspiration</category>
    </item>
    <item>
      <title>Deploying and building React projects to GitHub Pages with GH Actions</title>
      <author>Alen Duda</author>
      <pubDate>Mon, 02 Aug 2021 08:30:45 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/deploying-and-building-react-projects-to-github-pages-with-gh-actions-8ek</link>
      <guid>https://dev.to/bornfightcompany/deploying-and-building-react-projects-to-github-pages-with-gh-actions-8ek</guid>
      <description>&lt;p&gt;For my private mini-projects, I prefer to use &lt;a href="https://parceljs.org/"&gt;Parcel bundler&lt;/a&gt; over &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt; just because there is less overhead and clutter to clean up. However, by using CRA and the &lt;a href="https://github.com/tschaub/gh-pages"&gt;appropriate package&lt;/a&gt;, deploying can be very simple. This post will tell you how to set up build and deploy when using a custom project structure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-reactparcel-project"&gt;
  &lt;/a&gt;
  Creating a React/Parcel project
&lt;/h2&gt;

&lt;p&gt;By following steps from &lt;a href="https://blog.jakoblind.no/react-parcel/"&gt;this post&lt;/a&gt; we can be up and running in a few minutes. As always with React, you are free to organize the project structure as needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-for-github-pages"&gt;
  &lt;/a&gt;
  Build for GitHub Pages
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Enable GH Pages inside repo settings (use &lt;strong&gt;docs&lt;/strong&gt; folder, as detailed in &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site"&gt;the documentation&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;Specify a build script - Parcel should create built files inside &lt;code&gt;/docs&lt;/code&gt; folder.
Example build script inside package.json: &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;"build-github": "rm -rf docs/* &amp;amp;&amp;amp; parcel build index.html --public-url ./ -d docs"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These two commands: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;delete the existing docs folder and all its contents (to make sure we don't have previously built files lying around)&lt;/li&gt;
&lt;li&gt;run the Parcel build command, as always using &lt;em&gt;index.html&lt;/em&gt; as entry point, but specifying the built files to go inside &lt;em&gt;/docs&lt;/em&gt; folder, while setting the output files to read from that folder (&lt;code&gt;./&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To test this, we can try running &lt;code&gt;npm run build-github&lt;/code&gt; command and committing the changes, pushing them to master. A green checkmark should appear on your GH repository near the latest commit, indicating all went well. The default URL template for GH Pages is &lt;code&gt;https://&amp;lt;your-github-username&amp;gt;.github.io/&amp;lt;your-github-repository&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automating-the-build-with-every-push-to-master"&gt;
  &lt;/a&gt;
  Automating the build with every push to master
&lt;/h2&gt;

&lt;p&gt;To avoid having to run that command manually, we should automate this step by using GitHub Actions, another free service from GitHub.&lt;/p&gt;

&lt;p&gt;In your repository's project root, create a folder named &lt;code&gt;.github&lt;/code&gt; and inside it another folder called &lt;code&gt;workflows&lt;/code&gt;. There, you should create a file named &lt;code&gt;build.yml&lt;/code&gt; (this name is optional).&lt;/p&gt;

&lt;p&gt;Example build.yml file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build gh-pages&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build-gh-pages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;      
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run build-github&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Commit files&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auto-commit-action&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stefanzweifel/git-auto-commit-action@v4&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;commit_message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build project for github pages&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Push changes&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.auto-commit-action.outputs.changes_detected == 'true'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ad-m/github-push-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;github_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;No changes detected&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.auto-commit-action.outputs.changes_detected == 'false'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "No changes!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After pushing this file to your remote repository, GitHub will read it and follow steps inside it: on every push to the branch master, it will run the steps detailed in &lt;code&gt;build-gh-pages&lt;/code&gt; job (name optional) - do a clean npm install (&lt;code&gt;npm ci&lt;/code&gt;) and run the &lt;code&gt;npm run build-github&lt;/code&gt; command we created earlier. Make sure you specify the correct node version for your project, as well as replacing the build-github npm command with your custom naming, if required. Feel free to modify the &lt;code&gt;commit_message&lt;/code&gt; variable as well!&lt;/p&gt;

&lt;p&gt;To test this, simply make some changes to your project and push them to the remote repository. An orange circle should appear near the latest commit message on GH repo page, where you can track the progress of the build process. Once ready, a green checkbox will replace the circle and your changes should be visible.&lt;/p&gt;

&lt;p&gt;For me, this mini-automation process was a great introduction to GH Actions. I borrowed some code and inspiration from my colleagues &lt;a href="https://dev.to/shockwavee"&gt;Davor&lt;/a&gt; and &lt;a href="https://dev.to/wnbsmart"&gt;Maroje&lt;/a&gt; with only minor customization required. I hope it will help someone and spark an interest into the wonderful world of automation!&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>github</category>
      <category>parcel</category>
      <category>react</category>
    </item>
    <item>
      <title>React lifecycle methods in Hooks</title>
      <author>Madushan Perera</author>
      <pubDate>Mon, 02 Aug 2021 07:47:34 +0000</pubDate>
      <link>https://dev.to/mcperera/react-lifecycle-methods-in-hooks-53nl</link>
      <guid>https://dev.to/mcperera/react-lifecycle-methods-in-hooks-53nl</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You can find the original post on &lt;a href="https://mcperera.com/blog/react-hooks"&gt;my blog&lt;/a&gt;. Thank you for visiting. 😊&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-are-react-hooks"&gt;
  &lt;/a&gt;
  What are React hooks?
&lt;/h2&gt;

&lt;p&gt;When we use React class components, we used to manage state and other React lifecycle features inside those class components using React lifecycle methods like ”componentDidMount”.&lt;/p&gt;

&lt;p&gt;Since React brought us functional component features, it needed to have those lifecycle methods same as the React class components.&lt;br&gt;
Therefore, Hooks are functions that let you “hook into” React state and lifecycle features from function components same as the class components.&lt;/p&gt;

&lt;p&gt;To get to know more details about React life cycle, visit &lt;a href="https://dev.to/blog/react-component-life-cycle"&gt;React Component Life Cycle&lt;/a&gt; post.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#hooks-we-should-use-in-different-stages-of-react-life-cycle"&gt;
  &lt;/a&gt;
  Hooks we should use in different stages of React Life Cycle?
&lt;/h2&gt;

&lt;p&gt;As we know React life cycle can be divided in to 3 main stages according to how the component renders to the DOM respectively mounting, Updating and Unmounting from the DOM. Let’s understand most commonly use hooks.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#usestate"&gt;
  &lt;/a&gt;
  useState
&lt;/h3&gt;

&lt;p&gt;To update the state of a React function component we need to use "useState" hook. As shown in the below code block, we need to import it as a named import before we use it.&lt;/p&gt;

&lt;p&gt;This “useState” hook takes only one parameter as the initial state of the component and returns two values, the current state of the component (“count” in the below component) and a function (“setCount” in the below component) to update the state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the setCount function we can update our state as we want. In this above code, setCount is used to increase and decrease the state “count”. Passing a callback function to this state changing function we can get the previous state as an argument of this callback function. This is the way that CountMe component gets the previous state and every time we call this “setCount” function, the render method of this CountMe component gets called and render the element with updated state.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useeffect"&gt;
  &lt;/a&gt;
  useEffect
&lt;/h3&gt;

&lt;p&gt;This function can perform the most part of react life cycle. Simply we can say that this function can use for same purpose as “componentDidMount”, “componentDidUpdate”, and “componentWillUnmount” in React classes.&lt;/p&gt;

&lt;p&gt;Basically, we use this to perform side effects like data fetching, event subscriptions in React function component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Run on mounting of &amp;lt;CountMe/&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Run on initial &amp;amp; update of count state : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function takes two parameters. First one is a function and the second one is an array of dependencies. React runs the effects after every render including the first render. But we can avoid it using dependencies.&lt;/p&gt;

&lt;p&gt;To perform “componentDidMount”, all we need to call this function with what we need to do as the first parameter and we can ignore the second parameter snice we need to run it on component mount.&lt;/p&gt;

&lt;p&gt;If we need to execute any code block when the component’s state is updated, all we need to do is add the state value which is going to update in the dependency as shown in the code above in the second “useEffect”. So, the code inside the “useEffect” will run every time the “count” is going to update.&lt;/p&gt;

&lt;p&gt;Note : if we use “useEffect” without the dependency array, at this time “useEffect” will run every update. To specifically run the “useEffect” on a state update, we need to add that variable to the array. At that time “useEffect” will only run according to the given dependencies. Also, “useEffect” will run only once when use an empty dependency array “[]”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scrollingMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scrolling&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scrollingMe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//Cleanup the EventListener&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scrollingMe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100vh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Scroll&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes, we need to subscribe for some event listeners when the component is mounted to the DOM and also we need to unsubscribe when the component is unmounted from the DOM. In React class components we used “componentDidMount” and “componentWillUnmount” to perform these kind of scenarios.&lt;/p&gt;

&lt;p&gt;We can use “useEffect” hook to subscribe and unsubscribe these events like above by adding return statement. It means if we want to do something on component unmount, we can put that code part inside return statement like above code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-your-own-hook"&gt;
  &lt;/a&gt;
  Creating your own hook
&lt;/h2&gt;

&lt;p&gt;React has given the capability of creating our own hook to keep the code DRY (Don’t Repeat Yourself) by creating reusable functionalities as a custom hook. Check the post &lt;a href="https://dev.to/blog/react-custom-hooks"&gt;React Custom Hooks&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Thank you for reading and hope this helps you 🎉&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What is Dynamic Module Import ?</title>
      <author>Madushan Perera</author>
      <pubDate>Mon, 02 Aug 2021 07:44:43 +0000</pubDate>
      <link>https://dev.to/mcperera/what-is-dynamic-module-import-44lk</link>
      <guid>https://dev.to/mcperera/what-is-dynamic-module-import-44lk</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You can find the original post on &lt;a href="https://mcperera.com/blog/dynamic-module-imports"&gt;my blog&lt;/a&gt;. Thank you for visiting. 😊&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-we-need-import-in-javascript"&gt;
  &lt;/a&gt;
  Why we need ‘import’ in JavaScript?
&lt;/h2&gt;

&lt;p&gt;The static import is very useful when we want to use read only live bindings which are exporting by other modules in your program. In this way the idea is to manage our code by separating them as we want. This can be functionality, features or component wise. But the entire code is working as a one code block after connecting them by importing.&lt;/p&gt;

&lt;p&gt;Below code block shows how we can import modules in a static way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaultExport&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;alias1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;export2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name/path/to/specific/un-exported/file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;export2&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;alias2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaultExport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaultExport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way it’s easier to understand the code to some and very helpful for debugging.&lt;br&gt;
The import statement cannot be used in the embedded scripts unless the script has a type=’ module.’&lt;br&gt;
Also, we can import modules as a dynamic import.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-dynamic-import-in-javascript"&gt;
  &lt;/a&gt;
  What’s dynamic import in JavaScript?
&lt;/h2&gt;

&lt;p&gt;Most of the time developers are used to use the standard static import. This will always import the modules at the loading time. No matter what if we use that imported module or not JavaScript always loads the static modules in loading time.&lt;/p&gt;

&lt;p&gt;What if we want to import modules conditionally or on demand? This is the place where you need to implement dynamic import in JavaScript.&lt;/p&gt;

&lt;p&gt;To use dynamic import call the ‘import()’ as a function as pass the module path as an argument. Then you can use JavaScript promise or await to get the rest of the work done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/modules/my-module.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something with the module.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module--&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/modules/my-module.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#when-to-use-dynamic-import"&gt;
  &lt;/a&gt;
  When to use dynamic import?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When importing statically significantly slows the loading of your code.&lt;/li&gt;
&lt;li&gt;When importing statically significantly increases your program's memory usage.&lt;/li&gt;
&lt;li&gt;When the module you are importing does not exist at load time&lt;/li&gt;
&lt;li&gt;When the module being imported has side effects, and you do not want those side effects unless some condition is true.&lt;/li&gt;
&lt;li&gt;When the import specifier string needs to be constructed dynamically.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading and Happy Coding 🥳&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>AWS open source news and updates #78</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 02 Aug 2021 07:37:49 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-78-4abk</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-78-4abk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#august-2nd-2021-instalment-78"&gt;
  &lt;/a&gt;
  August 2nd, 2021 - Instalment #78
&lt;/h2&gt;

&lt;p&gt;Newsletter #78.&lt;/p&gt;

&lt;p&gt;This is the last newsletter for the next three weeks, as I will be taking some time off and shutting down my laptop. I will look forward to bringing you a very full edition when I return, but in the meantime enjoy another great collection of open source projects and blog posts to help you get the most out of open source on AWS. This week we have a collection of posts on Apache Airflow, a must read post for AWS CDK users on the Construct Hub Preview, some great posts covering analytics and big data technologies such as Apache Spark and Apache Kafka, a look at some new capabilities within AWS services such as openCypher and a round up of quick updates and case studies to finish off.&lt;/p&gt;

&lt;p&gt;Enjoy the updates, and see you in a few weeks time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Book: Spring Boot on AWS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Over the weekend Tom Hombergs, Philip Riecks and Björn Wilmsmann held an online launch party for their book &lt;a href="https://aws-oss.beachgeek.co.uk/sn"&gt;Stratospheric: From zero to production with Spring Boot and AWS&lt;/a&gt;. This is an essential resource for any Java developer who is working with AWS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Sofian Hamiti, Jenna Pederson, Sebastien Stormacq, Dotan Horovits, Alex Pulver, Ravi Itha, Muhammad Zahid Ali, César Prieto Ballester, Bruno Bardelli, Tom McMeekin, Parnab Basak, Brad Bebee, Mark Richman, Mikhail Vasilyev, Rob Mesirow, Anil Lalwani, David Sapin, Mihir Desai, Maciej Radzikowski, Trivikram Kamat, Steve Roberts, Biroj Nayak, Jessica Ho, Justin Leto, David Ehrlich, and Shreyas Subramanian&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;metabadger&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/sl"&gt;metabadger&lt;/a&gt; this open source tool from Salesforce helps you to prevent SSRF attacks on AWS EC2 via automated upgrades to the more secure Instance Metadata Service v2 (IMDSv2). The project provides detailed documentation on the background and use cases that this tool is looking to help, how to setup and install as well as how to run this project. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qUgF_2BI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/salesforce/metabadger/blob/main/docs/images/metabadger.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qUgF_2BI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/salesforce/metabadger/blob/main/docs/images/metabadger.gif%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk-ipv6&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/sm"&gt;cdk-ipv6&lt;/a&gt; - my colleague Sebastien Stormacq released this open source project over the weekend that will help you create IPv6 VPCs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-cdk-pipelines-datalake-infrastructure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/rz"&gt;aws-cdk-pipelines-datalake-infrastructure&lt;/a&gt; - this is an open sourced solution to help you build a data lake on AWS. To help you get started, Ravi Itha and Muhammad Zahid Ali have written this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/s0"&gt;Deploy data lake ETL jobs using CDK Pipelines&lt;/a&gt; that should make your life a little easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--64fMkOum--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/07/02/Aws-cdk-pipelines-blog-datalake-continuous_delivery_data_lake_etl-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--64fMkOum--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/07/02/Aws-cdk-pipelines-blog-datalake-continuous_delivery_data_lake_etl-1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-cdk-tfsec&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/s1"&gt;aws-cdk-tfsec&lt;/a&gt; - this is an open source project that shows you how you can analyse and secure Terraform code using a CI/CD Pipeline and tfsec. This blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/s2"&gt;Secure and analyse your Terraform code using AWS CodeCommit, AWS CodePipeline, AWS CodeBuild and tfsec&lt;/a&gt; from César Prieto Ballester and Bruno Bardelli walks you through the code. tfsec is an open sourced static analysis security scanner for your Terraform code, including more than 90 preconfigured checks with the ability to add custom checks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eRXjFut0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/07/27/tfsec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eRXjFut0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/07/27/tfsec.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mwaa-dashboard&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/s8"&gt;mwaa-dashboard&lt;/a&gt; is an open source project that helps you automate Amazon CloudWatch dashboards and alarms for your Amazon Managed Workflows for Apache Airflow (MWAA) environments. Mark Richman provides everything you need to help you get this project up and running in his blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/s7"&gt;Automating Amazon CloudWatch dashboards and alarms for Amazon Managed Workflows for Apache Airflow&lt;/a&gt; which is a super nice post (I am using this to monitor my own test/development pipelines, and has really helped simplify this task)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-cdk-codecommit-snyk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/sb"&gt;aws-cdk-codecommit-snyk&lt;/a&gt; this open source project provides a CDK construct that uses Snyk CLI to scan Python packages for open source package vulnerabilities. BK Das provides detailed information on the architecture as well as how to get started in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/sa"&gt;Use the Snyk CLI to scan Python packages using AWS CodeCommit, AWS CodePipeline, and AWS CodeBuild&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://logz.io/learn/guides/opentelemetry-guide/"&gt;https://logz.io/learn/guides/opentelemetry-guide/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have a number of posts this week featuring Apache Airflow, or more specifically, Amazon's Managed Workflows for Apache Airflow (MWAA). &lt;/p&gt;

&lt;p&gt;First up we have Parnab Basak with &lt;a href="https://aws-oss.beachgeek.co.uk/s6"&gt;Deploying to Amazon Managed Workflows for Apache Airflow with CI/CD tools&lt;/a&gt; which will show you how you can set up a simple CI/CD system to automate how you can deploy your DAGs into MWAA. He covers how you can do this using CodeCommit/CodePipeline, GitHub/GitHub actions, Jenkins and Bitbucket/Bitbucket Pipelines. &lt;/p&gt;

&lt;p&gt;Next up, we have Justin Leto, David Ehrlich, and Shreyas Subramanian show you how to orchestrate an ML pipeline using the popular XGBoost (eXtreme Gradient Boosting) algorithm in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/sf"&gt;Orchestrate XGBoost ML Pipelines with Amazon Managed Workflows for Apache Airflow&lt;/a&gt;. They cover how to dynamically create and run AWS Glue jobs to preprocess training and validation data. How to construct the DAG to support ML pipelines, including the import statements, the DAG operator configuration, the DAG task definitions, and the DAG dependency definition. Finally, they show the difference between using native Airflow operators vs. invoking AWS SDK API calls from a generic PythonOperator. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eu1rVv-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/07/20/ml-4775-image007.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eu1rVv-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/07/20/ml-4775-image007.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, I have a post written by myself, &lt;a href="https://aws-oss.beachgeek.co.uk/ru"&gt;Working with parameters and variables in Amazon Managed Workflows for Apache Airflow&lt;/a&gt; which is a long read with examples, scripts and code that will dive deep into how you can work with parameters and variables within MWAA, what you need to be aware of that is perhaps different to self hosted Apache Airflow and how you can put this all together to create re-usable workflows. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are looking to use Apache Kafka to help you ingest and process high-volume high-frequency streaming data (in this particular example, IoT data), then this is a post you will want to check out. Siddhesh Keluskar has put this detailed post, &lt;a href="https://aws-oss.beachgeek.co.uk/s3"&gt;Field Notes: Deliver Messages Using an IoT Rule Action to Amazon Managed Streaming for Apache Kafka&lt;/a&gt; which will show you how you can build a real-time streaming data pipeline by securely delivering MQTT messages to a highly-scalable, durable, and reliable system using Apache Kafka. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XHv1JAfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/07/22/Architecture-representing-an-IoT-ingestion-pipeline.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XHv1JAfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/07/22/Architecture-representing-an-IoT-ingestion-pipeline.jpg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Spark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What would we ever do if the taxi drivers of NYC stopped working and stopped providing the rich data sets that we use week in, week out to show case how to use data analytics tools? I am not sure, but whilst they are still generating all that great data, we can be thankful that this helps put together blog posts like this one, &lt;a href="https://aws-oss.beachgeek.co.uk/s4"&gt;Visualize data using Apache Spark running on Amazon EMR with Amazon QuickSight&lt;/a&gt; from Tom McMeekin. This a really nice in depth post that covers a lot more than the title suggest. You will explore how to setup and use Apache Spark on Amazon EMR, openLDAP, deploy a Thrift server, use Beeline as your jdbc client and many more great open source tools. Well worth diving deep into. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dr4O_HwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/07/22/BDB143-image009.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dr4O_HwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/07/22/BDB143-image009.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Cloud Development Kit (AWS CDK)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week Alex Pulver put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/sh"&gt;Construct Hub Preview&lt;/a&gt;, that announced the Construct Hub preview. This is a one-stop destination for finding, reusing and sharing constructs authored by AWS, AWS Partner Network partners, third parties, and the developer community. As the CDK developer community has grown, customers have told us that they do not have an easy way to find the construct libraries created by the community because the constructs have been published through various package managers. The Construct Hub will now be a central location where CDK users can find a comprehensive collection of constructs to help them build their applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2sYX9ppD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/07/29/construct-hub-homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2sYX9ppD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/07/29/construct-hub-homepage.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As Alex concludes, "This is an open-source preview, and we need your help to make the Construct Hub the best end-to-end experience for discovering and sharing constructs."  This is a must read post this week, so make sure you check it out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finding the right balance of open-source tools and AWS services that will meet your functional and non-functional requirements, to help you maximise the value you get from those resources is the focus on this post, &lt;a href="https://aws-oss.beachgeek.co.uk/s9"&gt;Choosing a Well-Architected CI/CD approach: Open Source on AWS&lt;/a&gt; from Mikhail Vasilyev. The post helps you with a decision making framework aligned to the Well Architected framework, and looks at source code management, continuous integration and container registry options you can choose from, and how these all can work together.&lt;/p&gt;

&lt;p&gt;Colleague Jenna Pederson has been working on using Inspec, an open-source framework for testing and auditing your applications and infrastructure in her latest blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/sj"&gt;How to use CDK Outputs in your Inspec tests&lt;/a&gt; showing you how you can use this together with a feature of CDK to help you build better tests for your Infrastructure as Code. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MLFlow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MLflow is an open source platform to manage the ML lifecycle, including experimentation, reproducibility, deployment, and a central model registry. Sofian Hamiti builds on a previous blog post showing you how to  deploy MLflow on AWS, and builds on that to share how you can automate an end-to-end ML lifecycle using MLflow and Amazon SageMaker Pipelines. Well worth reading, &lt;a href="https://aws-oss.beachgeek.co.uk/sk"&gt;MLOps with MLFlow and Amazon SageMaker Pipelines&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;openCypher&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Brad Bebee posted this last week, &lt;a href="https://aws-oss.beachgeek.co.uk/s5"&gt;Announcing openCypher for Amazon Neptune: Building better graph applications with openCypher and Gremlin together&lt;/a&gt; sharing news of how developers can now use openCypher and Apache TinkerPop Gremlin to build or migrate property graph applications. Check the quick updates section for more details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jy2MdOeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/07/28/DBBLOG-1785-img02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jy2MdOeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/07/28/DBBLOG-1785-img02.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;OpenSearch Dashboards Notebooks lets you easily combine live visualizations, narrative text, and SQL and Piped Processing Language (PPL) queries so that you can tell your data’s story. Viraj Phanse, Ashwin Kumar, Anirudha Jadhav, Eli Fisher collaborated on this post, &lt;a href="https://aws-oss.beachgeek.co.uk/so"&gt;Feature Deep Dive: OpenSearch Dashboards Notebooks&lt;/a&gt; that explores popular use cases for Notebooks, how the feature works, and how to get started with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenTelemetry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This post, &lt;a href="https://aws-oss.beachgeek.co.uk/si"&gt;Beginner’s Guide to OpenTelemetry&lt;/a&gt;, from Dotan Horovits at logz.io provides a really nice, clean and easy to follow introduction into the world of OpenTelemetry. Well worth spending ten minutes of your time, and the videos are also very informative. Make sure you check this out this week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Red Hat Enterprise Linux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the ways many business' are looking to modernise their workloads is to move from proprietary systems to open source. This includes running workloads such as MS SQL Server, which you can now run on Linux. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/sp"&gt;Understanding Amazon Machine Images for Red Hat Enterprise Linux with Microsoft SQL Server&lt;/a&gt; Kumar Abhinav provides a deep dive into how to deploy SQL Server on RHEL using these new AMIs, how to tune instances for performance, and how to reduce licensing costs with RHEL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zTAa1oEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/07/15/RHEL3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTAa1oEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/07/15/RHEL3.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS SDKs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/sd"&gt;Mocking modular AWS SDK for JavaScript (v3) in Unit Tests&lt;/a&gt; Trivikram Kamat and Maciej Radzikowski show you how you can mock the SDK clients using the community-driven &lt;a href="https://aws-oss.beachgeek.co.uk/ll"&gt;AWS SDK Client mock library&lt;/a&gt;. [hands on]&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-studies"&gt;
  &lt;/a&gt;
  Case Studies
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Cassandra&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/sc"&gt;Idea to product: PricewaterhouseCoopers launches Check-In within three months on Amazon Keyspaces&lt;/a&gt; Rob Mesirow, Anil Lalwani, David Sapin, and Mihir Desai show you how PwC built the Check-In solution from idea to product within 3 months using Amazon Keyspaces (for Apache Cassandra) and additional open source technologies on AWS. Check-In is a single, technology-driven solution that provides clients the data to plan, prevent, and react precisely to mitigate risk to their people and business. Read on to find out more about Check-In and how PwC were able to reduce the time it took them, to go from idea to launch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--16QdtMn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/07/16/DBBLOG-1733-image001.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--16QdtMn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/07/16/DBBLOG-1733-image001.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Core WCF&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Core WCF is a port of Windows Communication Framework (WCF) to .NET Core. Used to build service-oriented applications based on the .NET Framework, WCF enabled applications to asynchronously send data, packaged as messages, between service endpoints.&lt;/p&gt;

&lt;p&gt;In this interview, &lt;a href="https://aws-oss.beachgeek.co.uk/se"&gt;Supporting development of Core WCF&lt;/a&gt;, Steve Roberts is joined by Biroj Nayak, a Senior Software Development Engineer working in Amazon Elastic Compute Cloud (Amazon EC2), to talk about the open source Core WCF project and the contributions he’s been involved with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drupal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jessica Ho takes a look at how Acquia and Amazon Web Services (AWS) together offer a secure, resilient, and highly performant solution with the next-generation enterprise digital experience platform, Acquia Cloud Next. To find out more, read the post, &lt;a href="https://aws-oss.beachgeek.co.uk/sg"&gt;How Acquia Enables a Highly Scalable Drupal Digital Experience Platform on AWS&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f7LoFMmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/77de68daecd823babbb58edb1c8e14d7106e83bb/2021/07/28/Acquia-Cloud-Next-3.1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f7LoFMmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/77de68daecd823babbb58edb1c8e14d7106e83bb/2021/07/28/Acquia-Cloud-Next-3.1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;openCypher&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Neptune announced support for openCypher, a popular query language for building applications with graph databases. Developers can now use openCypher with Amazon Neptune, giving them more choices to build or migrate graph applications to a highly available, secure, and fully managed graph database. Support for openCypher is compatible with our customers’ existing property graphs and developers can use both Apache TinkerPop Gremlin and openCypher queries within the same graph.&lt;/p&gt;

&lt;p&gt;Customers like openCypher’s syntax, which is inspired by SQL, because it provides a familiar structure to compose queries for graph applications. With the addition of openCypher, Amazon Neptune now provides customers with that widest array of query language support including openCypher, Gremlin, and W3C SPARQL. Customers can use the openCypher and Gremlin query languages together over the same property graph data. Support for openCypher is compatible with the Bolt protocol, enabling customers to continue to run applications that use the Bolt protocol to connect to Neptune.&lt;/p&gt;

&lt;p&gt;openCypher is available in lab mode in this release and is enabled by default. Neptune customers who use Gremlin can immediately start using openCypher to query their graphs. New customers can get started with loading and querying their data using openCypher. Customers migrating to Neptune can easily connect to the graph database and continue to use their existing openCypher queries to build and run graph applications.&lt;/p&gt;

&lt;p&gt;Customers using openCypher have access to all Neptune features, such as the Neptune workbench, which now supports querying and visualising results of openCypher queries. Support for openCypher is available in all regions where Neptune is supported, and there are no additional charges to use openCypher.&lt;/p&gt;

&lt;p&gt;Check out the documentation page, &lt;a href="https://aws-oss.beachgeek.co.uk/rx"&gt;Accessing the Neptune Graph with openCypher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPARQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Neptune announces support for SPARQL 1.1 Graph Store HTTP Protocol (GSP)  for graphs using W3C’s Resource Description Framework (RDF). Using GSP on SPARQL 1.1 endpoints, customers now have an efficient method to interact with complete named graphs within a graph store. This can streamline building graph applications using Amazon Neptune and tools that support the W3C Recommendation GSP such as Apache Jena.&lt;/p&gt;

&lt;p&gt;GSP provides customers with convenient endpoints for manipulating an entire named graph in one HTTP request, instead of having to write multiple complex SPARQL 1.1 queries to achieve the same result. SPARQL 1.1 provides a query-based approach to fetching, inserting, and deleting RDF triples, GSP supports these actions on entire named graphs in the graph store. The addition of GSP in Neptune introduces a new endpoint URL: &lt;strong&gt;&lt;a href="https://your-neptune-endpoint:port/sparql/gsp/"&gt;https://your-neptune-endpoint:port/sparql/gsp/&lt;/a&gt;&lt;/strong&gt; that customers can use to access RDF graphs in Neptune.&lt;/p&gt;

&lt;p&gt;To find out more, check out the documentation page &lt;a href="https://aws-oss.beachgeek.co.uk/ry"&gt;Using the SPARQL Graph-Store HTTP protocol (GSP) in Amazon Neptune&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now launch RabbitMQ 3.8.17 brokers on Amazon MQ. This patch update to RabbitMQ contains several fixes and enhancements compared to the previously supported version, RabbitMQ 3.8.11. To learn more, read the &lt;a href="https://aws-oss.beachgeek.co.uk/rw"&gt;RabbitMQ Changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suricata&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Network Firewall uses the open source intrusion prevention system (IPS), Suricata, for stateful inspection, and is now a Payment Card Industry Data Security Standard (PCI DSS) compliant service. Customers can now use AWS Network Firewall to capture, transmit, and retrieve sensitive payment card data for use cases such as payment processing that are subject to PCI DSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FreeRTOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FreeRTOS 202107.00 now includes the Simple Network Time Protocol (SNTP) client library to make it easier for developers to add time information in their FreeRTOS-based IoT applications. The SNTP client library, named coreSNTP, is used to synchronise clocks between two devices or a device and the cloud. &lt;/p&gt;

&lt;p&gt;You can use coreSNTP in IoT applications where devices need to display time or use time for its business logic (e.g. control temperature and lighting). In addition, you can use coreSNTP to validate certificates during TLS handshakes with the cloud or, if required, generate signatures to authenticate cloud storage requests (e.g. SigV4 signatures for HTTPs requests to Amazon Simple Storage Service). The SNTP functionality becomes especially important in IoT devices that cannot retain time and date information in the absence of external power (e.g., IoT devices that do not contain real-time-clock modules). &lt;/p&gt;

&lt;p&gt;Find out more by reading the &lt;a href="https://aws-oss.beachgeek.co.uk/rv"&gt;README&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;23rd September, Bern Switzerland&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is this, an in person event returning? A stellar line up including our own Michael Hausenblas, an event looking at CNCF projects and the future of IT. Find out more and to view prices/register, by clicking &lt;a href="https://cloudnativeday.ch/en/#speakers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on [@AWSOpen](&lt;a href="https://twitter.com/AWSOpen"&gt;https://twitter.com/AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>How to use the if not Python statement?</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 02 Aug 2021 07:37:03 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-use-the-if-not-python-statement-39ea</link>
      <guid>https://dev.to/hrishikesh1990/how-to-use-the-if-not-python-statement-39ea</guid>
      <description>&lt;p&gt;In this short tutorial, we learn about the ‘if not’ Python condition statement. We also look at its various use cases along with the code.&lt;/p&gt;

&lt;p&gt;Before we look at the if not Python statement, we will first give a small brief about the ‘Not’ operator in Python. In case you are not familiar with it, do read along. Else, please feel free to jump straight to the &lt;a href="#why-do-we-use-the-if-not-python-statement"&gt;Solution&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents-if-not-python"&gt;
  &lt;/a&gt;
  Table of Contents - If not Python
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#not-operator-recap"&gt;Not Operator - Recap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-do-we-use-the-if-not-python-statement"&gt;Why do we use the If not Python statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-and-explanation"&gt;Code and Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if-not-python-limitations-and-caveats"&gt;If not Python - Limitations and Caveats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#not-operator-recap"&gt;
  &lt;/a&gt;
  Not Operator - Recap
&lt;/h2&gt;

&lt;p&gt;Similar to ‘and’ &amp;amp; ‘or’ the ‘not’ operator is another logical operator in Python. This operator returns True if the statement is not true and vice versa. Hence the ‘Not’ operation is commonly used along with the ‘if’ statement. &lt;/p&gt;

&lt;p&gt;Based on this functionality, the Not operator is used in two major use cases. The first case is to check if an element is not in a string or any other iterable and the second is to check if a condition is not met. In this article, we look at the latter. &lt;/p&gt;

&lt;p&gt;Although both these requirements can be met using other methods, using the ‘not’ operator improves the readability of your code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-use-the-if-not-python-statement"&gt;
  &lt;/a&gt;
  Why do we use the ‘If not’ Python statement?
&lt;/h2&gt;

&lt;p&gt;When it comes to checking if a particular condition is not met, the ‘if not’ Python operator is used extensively in two areas. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To negate the output of an if statement&lt;/li&gt;
&lt;li&gt;And to check if an iterable is not empty&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us look at real-world examples of both these cases. For the first case let us assume that you have an iterable; a list that contains information of all the blocked users on your application. When a user attempts to sign in, your code could check if the user is not in the Python list. In a conventional ‘if’ statement this logic would have to be written inside the ‘else’ statement however the not operator negates the output and outputs the inverse. Thereby increasing readability by allowing the user to write the logic under the ‘if’ statement. &lt;/p&gt;

&lt;p&gt;For the second case, empty variables or items return falsy values, and similar to the previous use case, a normal ‘if’ statement would have logic within the ‘else’ statement. The ‘Not’ operator negates the output again making the code more readable. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h2&gt;

&lt;p&gt;Using the ‘if not’ Python statement to check if it negates the output of an ‘if’ statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'number is greater than 3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'number is not greater than 3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Output - number is greater than 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the code under the ‘if’ block was returned although the condition returned false. This is because the ‘not’ operator negated its value. &lt;/p&gt;

&lt;p&gt;Similarly, the code to check if an iterable is empty using the ‘if not’ Python statement is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;List_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;List_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List_1 is empty.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Output - List_1 is empty
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ‘if not’ Python code can be used to check if a string, dictionary, set, and even a tuple. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-not-python-limitations-and-caveats"&gt;
  &lt;/a&gt;
  If not Python - Limitations and Caveats:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are no major limitations while using the ‘Not’ operator, however, since the logic is inverted I would recommend practicing the ‘if not’ Python statement a few times before you actually start using it in your code. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do let me know your thoughts in the comments section below. :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Features introduced in ES2021 ✨✨</title>
      <author>Siddharth</author>
      <pubDate>Mon, 02 Aug 2021 07:31:37 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/features-introduced-in-es2021-5eal</link>
      <guid>https://dev.to/siddharthshyniben/features-introduced-in-es2021-5eal</guid>
      <description>&lt;p&gt;ES2021 is slowly &lt;a href="https://caniuse.com/?feats=mdn-javascript_builtins_string_replaceall,mdn-javascript_builtins_promise_any,mdn-javascript_builtins_weakref,mdn-javascript_operators_logical_or_assignment,mdn-javascript_operators_logical_and_assignment,mdn-javascript_operators_logical_nullish_assignment,mdn-javascript_grammar_numeric_separators"&gt;coming out&lt;/a&gt; in browsers. Here's a&lt;br&gt;
quick roundup of features provided by ES2021.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-stringreplaceall-endraw-mdn"&gt;
  &lt;/a&gt;
  &lt;code&gt;string.replaceAll&lt;/code&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll"&gt;MDN&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;Replaces all instances of a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; 'yx'&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/x/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; 'yy'&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; 'yy'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#numeric-separators-mdn"&gt;
  &lt;/a&gt;
  Numeric separators (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_separators"&gt;MDN&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;Let's you seperate your numbers&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Is this a billion? a hundred millions? Ten millions?&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;_000_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Ah, so a billion&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FEE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// is this 12,300? Or 123, because it's in cents?&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FEE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="nx"&gt;_300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// $12,300 (woah, that fee!)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#logical-or-assignment-raw-endraw-mdn"&gt;
  &lt;/a&gt;
  Logical OR assignment (&lt;code&gt;||=&lt;/code&gt;) (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment"&gt;MDN&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;Logical OR assignment (&lt;code&gt;foo ||= bar&lt;/code&gt;) assigns to &lt;code&gt;foo&lt;/code&gt; if it is falsy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; 'bar'&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;baz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; 'bar' (no assignment because foo is truthy)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#logical-and-assignment-raw-ampamp-endraw-mdn"&gt;
  &lt;/a&gt;
  Logical AND assignment (&lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;) (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment"&gt;MDN&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;Logical AND assignment (&lt;code&gt;foo &amp;amp;&amp;amp;= bar&lt;/code&gt;) assigns to &lt;code&gt;foo&lt;/code&gt; if it is truthy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; undefined (no assignment because foo is falsy)&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;baz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; 'baz'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#logical-nullish-assignment-raw-endraw-mdn"&gt;
  &lt;/a&gt;
  Logical nullish assignment (&lt;code&gt;??=&lt;/code&gt;) (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment"&gt;MDN&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;Logical AND assignment (&lt;code&gt;foo ??= bar&lt;/code&gt;) assigns to &lt;code&gt;foo&lt;/code&gt; if it is nullish (null or undefined).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; 'bar'&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;baz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; 'bar' (No assignment because foo is not nullish)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-promiseany-endraw-mdn"&gt;
  &lt;/a&gt;
  &lt;code&gt;Promise.any&lt;/code&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any"&gt;MDN&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;Basically &lt;code&gt;Promise.race&lt;/code&gt;, but waits for &lt;em&gt;resolvement&lt;/em&gt; instead of &lt;em&gt;settlement&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-weakref-endraw-mdn"&gt;
  &lt;/a&gt;
  &lt;code&gt;WeakRef&lt;/code&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef"&gt;MDN&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;A WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check out details at &lt;a href="https://caniuse.com/?feats=mdn-javascript_builtins_string_replaceall,mdn-javascript_builtins_promise_any,mdn-javascript_builtins_weakref,mdn-javascript_operators_logical_or_assignment,mdn-javascript_operators_logical_and_assignment,mdn-javascript_operators_logical_nullish_assignment,mdn-javascript_grammar_numeric_separators"&gt;CanIUse&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Support is not too bad.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IE doesn't support any of these (but it &lt;em&gt;doesn't matter&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Edge supports all of these from v85. Numeric separators are supported from v79, and &lt;code&gt;WeakRef&lt;/code&gt; is supported from v84.&lt;/li&gt;
&lt;li&gt;Firefox supports all of these from v79. Numeric separators are supported from v70, and &lt;code&gt;String.replaceAll&lt;/code&gt; is supported from v77.&lt;/li&gt;
&lt;li&gt;Chrome supports all of these from v85. Numeric separators are supported from v75, and &lt;code&gt;WeakRef&lt;/code&gt; is supported from v84.&lt;/li&gt;
&lt;li&gt;Opera supports Numeric separators from v62, and supports &lt;code&gt;String.replaceAll&lt;/code&gt; from v71.&lt;/li&gt;
&lt;li&gt;Safari on iOS supports all this from v14.7. Numeric separators are supported from v13, &lt;code&gt;String.replaceAll&lt;/code&gt; is supported from v13.7, and Logical assignment and &lt;code&gt;Promise.any&lt;/code&gt; are supported from v14.4&lt;/li&gt;
&lt;li&gt;Android browser supports all this from v92&lt;/li&gt;
&lt;li&gt;Opera Mobile supports &lt;code&gt;String.replaceAll&lt;/code&gt; from v64&lt;/li&gt;
&lt;li&gt;Chrome for Android supports all this from v92&lt;/li&gt;
&lt;li&gt;Firefox for Android supports all this from v90&lt;/li&gt;
&lt;li&gt;Samsung internet supports all this from v14.0. Numeric separators are supported from v11.1&lt;/li&gt;
&lt;li&gt;Support on Opera Mini, QQ Browser, Baidu Browser, and KaiOS browser is unknown&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>es2021</category>
      <category>news</category>
    </item>
    <item>
      <title>User preference feature queries have a boolean context</title>
      <author>Stefan Judis</author>
      <pubDate>Mon, 02 Aug 2021 07:28:14 +0000</pubDate>
      <link>https://dev.to/stefanjudis/user-preference-feature-queries-have-a-boolean-context-31gl</link>
      <guid>https://dev.to/stefanjudis/user-preference-feature-queries-have-a-boolean-context-31gl</guid>
      <description>&lt;p&gt;Today I learned a small trick about CSS media queries that can help to save some bytes on the wire. You might know that you can check for user preferences using media queries.&lt;/p&gt;

&lt;p&gt;Let's take the &lt;code&gt;prefers-reduced-motion&lt;/code&gt; media query as an example.👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* stop all these animations */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use the &lt;code&gt;prefers-reduced-motion&lt;/code&gt; query to stop animating elements when users prefer not to see motion and animations (&lt;a href="https://css-tricks.com/introduction-reduced-motion-media-query/"&gt;learn more about why you should do that on CSS-Tricks&lt;/a&gt;). The query can have two different values: &lt;code&gt;no-preference&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you have used this media query before, you might know that you can also use its short variant and drop the &lt;code&gt;reduce&lt;/code&gt; value. The media query will behave the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* stop all these animations */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And what you see there is the media query's boolean context in action. &lt;a href="https://drafts.csswg.org/mediaqueries-5/#prefers-reduced-motion"&gt;The spec defines the &lt;code&gt;no-preference&lt;/code&gt; value as follows&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[no-preference] indicates that the user has made no preference known to the system. &lt;strong&gt;This keyword value evaluates as false in the boolean context.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This definition means that when you're using the shorthand media query without defining a value, everything other than &lt;code&gt;no-preference&lt;/code&gt; will evaluate to &lt;code&gt;true&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;A boolean context might seem obvious for &lt;code&gt;prefers-reduced-motion&lt;/code&gt; because it allows only two different values, but there are also media queries with more than two options. And today I learned, that these can implement a boolean context, too.&lt;/p&gt;

&lt;p&gt;Look at &lt;code&gt;prefers-contrast&lt;/code&gt; – &lt;a href="https://drafts.csswg.org/mediaqueries-5/#prefers-reduced-motion"&gt;this media query allows four different values&lt;/a&gt;: &lt;code&gt;no-preference&lt;/code&gt;, &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;more&lt;/code&gt; and &lt;code&gt;custom&lt;/code&gt;. And while there are four available options; &lt;code&gt;no-preference&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt; and every other value to &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* evaluates to true for `less`, `more` and `custom` */&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-contrast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Boolean contexts allow you to shorten your media queries and come in handy when you only want to check for a non-default value. If you want to learn more about them, &lt;a href="https://www.w3.org/TR/mediaqueries-4/#mq-boolean-context"&gt;read the boolean context spec&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>Find index of element in list Python</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 02 Aug 2021 07:14:47 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/find-index-of-element-in-list-python-571e</link>
      <guid>https://dev.to/hrishikesh1990/find-index-of-element-in-list-python-571e</guid>
      <description>&lt;p&gt;In this short tutorial, learn to find the index of an element in a list in Python. We look at the code to achieve this with its pros and cons.&lt;/p&gt;

&lt;p&gt;Before we delve into how you could find the index of an element in a list, we do a small recap on what lists are, in Python. However, in case you are already familiar with it, you can head straight to the &lt;a href="#find-index-of-element-in-list-in-python"&gt;Solution&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-find-index-of-element-in-list-python"&gt;
  &lt;/a&gt;
  Table of Contents - Find index of element in list Python
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#list-in-python-recap"&gt;Lists in Python - Recap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#find-index-of-element-in-list-in-python"&gt;Find index of element in list Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-and-explanation"&gt;Code and Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#find-index-of-element-in-list-python-limitations-and-caveats"&gt;Limitations and Caveats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#list-in-python-recap"&gt;
  &lt;/a&gt;
  List in Python - Recap
&lt;/h2&gt;

&lt;p&gt;Lists in Python are an ordered collection of items and these items could be of various data types. Lists are enclosed in square brackets ([ ]) and the items in a list are separated by commas.&lt;/p&gt;

&lt;p&gt;Given lists are an ordered collection of items, each element has its unique position, and each element can be accessed by telling Python the position. These positions are called indexes.&lt;/p&gt;

&lt;p&gt;Index in a list starts with 0. This essentially means that the first element in the list has an index of 0 and not 1 and subsequently the second element has an index of 1. This concept holds true for most programming languages. If you have trouble understanding this concept at first, just keep in mind that the indexes are all off-by-one.&lt;/p&gt;

&lt;p&gt;With that out of the way let us look at how to find the index of an element in list Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-index-of-element-in-list-in-python"&gt;
  &lt;/a&gt;
  Find index of element in list in Python:
&lt;/h2&gt;

&lt;p&gt;Since the index of lists is used to access elements in Python, it is only natural that one would want to find the index of an element. This may seem easy when dealing with a small list; however, this could become tedious when the length of the list increases.&lt;/p&gt;

&lt;p&gt;To facilitate this, Python has an inbuilt function called index(). This function takes in the element as an argument and returns the index. By using this function we are able to find the index of an element in a list in Python.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-index"&gt;
  &lt;/a&gt;
  Syntax of Index():
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, “list” refers to the name of the list you are looking to search.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Element&lt;/strong&gt; - Required, the element whose index you would like to find.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Start&lt;/strong&gt; - Optional, the index to start the search.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;End&lt;/strong&gt; - Optional, the index to end the search.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#return-values"&gt;
  &lt;/a&gt;
  Return Values:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Return the index of the passed element&lt;/li&gt;
&lt;li&gt;ValueError is returned if the element is not found&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data_types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Str"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Int"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Float"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;# Searching for “int”
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Int"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;#Output - 1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we have used the above code to find the index of an element in a list. Next, let us look at an example using the other two parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;vowels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'o'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'u'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;# Searching for “o” within index 1-5
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"o"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 3
&lt;/span&gt;
&lt;span class="c1"&gt;# Searching for “o” within index 1-3
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"o"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - ValueError: 'o' is not in list
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we first search for the element “o” between the 1st and 5th index, and the index is returned as the element is present.&lt;/p&gt;

&lt;p&gt;However, the second code snippet searches for “o” between the 0th and 2nd index, and since “o” is at the 3rd index a ValueError is returned as “o” couldn’t be found.&lt;/p&gt;

&lt;p&gt;This is how you used the index() function to find the index of an element in a list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-index-of-element-in-list-python-limitations-and-caveats"&gt;
  &lt;/a&gt;
  Find index of element in list Python - Limitations and Caveats:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ValueErrors are returned if the element cannot be found, I would recommend using a try-catch in case you are using it in a bigger piece of code.&lt;/li&gt;
&lt;li&gt;The parameters are case-sensitive and index() would return a ValueError even if the element is present but in a different case. I would recommend using the .upper or .lower methods in case you aren’t sure about the case.&lt;/li&gt;
&lt;li&gt;Index() method only returns the index of the first occurrence, in case you are looking for the subsiding occurrence using the start and stop parameter accordingly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;P.S. If you’d like to learn more about lists, check out these tutorials on &lt;a href="#https://flexiple.com/check-if-list-is-empty-python/"&gt;checking if a list is empty&lt;/a&gt; and &lt;a href="#https://flexiple.com/remove-item-from-list-python/"&gt;removing items from lists&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do let me know your thoughts in the comments section below. :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Frontend Interview Experience at Amazon Germany</title>
      <author>Prashant Yadav</author>
      <pubDate>Mon, 02 Aug 2021 07:08:39 +0000</pubDate>
      <link>https://dev.to/learnersbucket/frontend-interview-experience-at-amazon-germany-2lom</link>
      <guid>https://dev.to/learnersbucket/frontend-interview-experience-at-amazon-germany-2lom</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YPExb6Xa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/learnersbucket.com/wp-content/uploads/2021/08/Frontend-Interview-Experience-At-Amazon-Germany.-1.png%3Fw%3D768%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YPExb6Xa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/learnersbucket.com/wp-content/uploads/2021/08/Frontend-Interview-Experience-At-Amazon-Germany.-1.png%3Fw%3D768%26ssl%3D1" alt="Frontend Interview Experience at Amazon Germany"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Visit &lt;a href="https://learnersbucket.com"&gt;learnersbucket.com&lt;/a&gt; If you are preparing for your JavaScript interview. You will find DSA, System Design and JavaScript Questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After applying at Amazon India through different means and not hearing back from them, I one day randomly applied at Amazon Germany for frontend role directly in the career section and luckily my resume got shortlisted.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note:- As I have signed an NDA, I cannot share the exact questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I received the email regarding the shortlist and was asked to fill availability for the phone screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l7Yezy_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/learnersbucket.com/wp-content/uploads/2021/08/Amazon_Shortlisting-1.png%3Fw%3D795%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l7Yezy_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/learnersbucket.com/wp-content/uploads/2021/08/Amazon_Shortlisting-1.png%3Fw%3D795%26ssl%3D1" alt="Shortlisting email"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1st-round-phone-interview"&gt;
  &lt;/a&gt;
  1st round : Phone Interview.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ft3ywYOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/learnersbucket.com/wp-content/uploads/2021/08/Amazon-1st-round-1.png%3Fw%3D786%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ft3ywYOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/learnersbucket.com/wp-content/uploads/2021/08/Amazon-1st-round-1.png%3Fw%3D786%26ssl%3D1" alt="Phone interview confirmation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was scheduled on 14th June and I had a general discussion with the technical recruiter regarding what I do on a day to day basis followed by a behavioral question and after that he asked me if I was willing to relocate and what are my salary expectations, etc.&lt;/p&gt;

&lt;p&gt;He said that your final interview will be scheduled only after your second round goes well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2nd-round-phone-screen-with-manager"&gt;
  &lt;/a&gt;
  2nd round: Phone screen with Manager.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu3QhXh0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/learnersbucket.com/wp-content/uploads/2021/08/Amazon-2nd-round-1.png%3Fw%3D1013%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu3QhXh0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/learnersbucket.com/wp-content/uploads/2021/08/Amazon-2nd-round-1.png%3Fw%3D1013%26ssl%3D1" alt="2nd Round: Managerial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second round was on 2nd July and it was taken by the manager. He asked me to create a web component followed by lots of questions and changes and one CSS styling question. At the end there was a behavioral question.&lt;/p&gt;

&lt;p&gt;After that he said will you relocate or work from India?. We are looking for a team member to join us here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3rd-amp-final-round"&gt;
  &lt;/a&gt;
  3rd &amp;amp; Final round
&lt;/h2&gt;

&lt;p&gt;It was composed of 5 technical rounds to be done on a single day. The decided date was 28th of July.&lt;/p&gt;

&lt;p&gt;I was very nervous before this as I knew I am not well prepared.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3a-oops-backend-engineer-with-9-years-of-experience-same-team"&gt;
  &lt;/a&gt;
  3.a:- OOPs (Backend engineer with 9+ years of experience) (same team).
&lt;/h3&gt;

&lt;p&gt;We had a formal introduction followed by one behavioral question and then an oops question, In the end there were two more behavioral questions.&lt;/p&gt;

&lt;p&gt;The implementation had to be scalable, otherwise it does not meets the criteria of the question.&lt;/p&gt;

&lt;p&gt;This round did not go well because I haven’t prepared for OOPS.&lt;/p&gt;

&lt;p&gt;My confidence took a toll.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3b-frontend-frontend-engineer-5-years-of-experience-same-team"&gt;
  &lt;/a&gt;
  3.b:- Frontend (Frontend engineer 5+ years of experience) (same team).
&lt;/h3&gt;

&lt;p&gt;I was asked to create a component, followed by lots of questions on accessibility, styling, events, etc.&lt;/p&gt;

&lt;p&gt;In the end 3 behavioral questions.&lt;/p&gt;

&lt;p&gt;Finished this round in half an hour, It went superb. Boosted my confidence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3c-cultural-fit-bi-data-engineer-different-team"&gt;
  &lt;/a&gt;
  3.c:- Cultural fit (BI data engineer) (different team).
&lt;/h3&gt;

&lt;p&gt;Taken by an external team member for unbiased opinion. Solely based on behavioral questions, 6 of them.&lt;/p&gt;

&lt;p&gt;All were very different, Had to think about everything I have done in my past experiences and then answer it.&lt;/p&gt;

&lt;p&gt;It went okay.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3d-managerial-system-design-same-team"&gt;
  &lt;/a&gt;
  3.d:- Managerial (System design) (same team).
&lt;/h3&gt;

&lt;p&gt;He said let’s start by answering your questions first and then move forward. After that he asked me to implement a frontend system.&lt;/p&gt;

&lt;p&gt;Discussed the following points&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Layout&lt;/li&gt;
&lt;li&gt;Styling&lt;/li&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Tracking user activity&lt;/li&gt;
&lt;li&gt;Recommendations&lt;/li&gt;
&lt;li&gt;Preferences&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Followed by 3 behavioral questions.&lt;/p&gt;

&lt;p&gt;This round went nice, the manager seemed to be happy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3e-dsa-fullstack-engineer-sister-team"&gt;
  &lt;/a&gt;
  3.e:- DSA (FullStack engineer) (Sister team).
&lt;/h3&gt;

&lt;p&gt;Was asked to implement a two way algorithm based on trees. Tree to HTML and HTML to Tree parser with lots of constraints.&lt;/p&gt;

&lt;p&gt;Which tree will you choose, why?. How to differentiate nodes and text, etc.&lt;/p&gt;

&lt;p&gt;Followed by 3 behavioral questions.&lt;/p&gt;

&lt;p&gt;This round did not go well, I had tough time understanding the question. After 1st implementation, the interviewer said there is some misunderstanding and explained the question again and asked me to re-implement the solution.&lt;/p&gt;

&lt;p&gt;After second implementation, he asked me to implement the second parser (vice versa).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verdict"&gt;
  &lt;/a&gt;
  Verdict.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOT SELECTED.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The recruiter called me next day and personally gave the feedback, he said there a lots of strong points and push but the team thinks that you need some improvements majorly on writing scalable and maintainable code.&lt;/p&gt;

&lt;p&gt;The recruiter had already told me to go through leadership principles and STAR technique because you will be grilled a lot on that.&lt;/p&gt;

&lt;p&gt;I was already hesitant that I won’t be able to make it. Still I did my best.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-strength"&gt;
  &lt;/a&gt;
  My strength
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Frontend components.&lt;/li&gt;
&lt;li&gt;System design.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#my-weakness"&gt;
  &lt;/a&gt;
  My weakness
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;OOPs&lt;/li&gt;
&lt;li&gt;DSA&lt;/li&gt;
&lt;li&gt;Behavioral questions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have noted where I have to improve and will work on it.&lt;/p&gt;

&lt;p&gt;Long way to go. Life long learning. Keep Hustling 🤞.&lt;/p&gt;

&lt;p&gt;PS:- I have 5 more interview experiences which I will share in the coming weeks.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
  </channel>
</rss>
