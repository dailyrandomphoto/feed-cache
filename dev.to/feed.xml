<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>IT Toolbox: Lessons from Star Wars: Do you work for Darth Sidius?</title>
      <author>The Sharp Ninja</author>
      <pubDate>Mon, 14 Jun 2021 01:14:45 +0000</pubDate>
      <link>https://dev.to/sharpninja/it-toolbox-lessons-from-star-wars-do-you-work-for-darth-sidius-38gd</link>
      <guid>https://dev.to/sharpninja/it-toolbox-lessons-from-star-wars-do-you-work-for-darth-sidius-38gd</guid>
      <description>&lt;p&gt;The transformation of Anikan Skywalker to Darth Vader can be summed up to office politics. Anikan is a superstar, and as such he's attracted attention, both good and bad, from people of power and influence in his workplace. This happens to all superstars, regardless of their profession. Superstars are given the most difficult tasks, and often they have to go off and do them alone or with a minimal team that simply are along for the ride to ensure that the superstar doesn't get bogged down by ancillary problems. Let the superstar deal with the hard stuff and the capable sidekicks can keep the peace and create the environment in which the superstar flourishes. But eventually the superstar must make hard choices that affect everyone. Politics must be played to get the resources necessary to get the job done. The future must also be accounted for, so some sacrifices today will seem worthwile in the future. But the devil is in the details. Playing politics requires gaining the eyes and ears of someone of influence. If that person is a follower of the Dark Side, then you may not know it until you're at the pivotal point of following or loosing the help you so desperately need to keep from failing. Dogma. Hyperbole. Exaggeration. Maybe, but most melodrama is rooted in reality. We all know Lucas loves technology and that he trusts it more than humans to do thing. He's obviously very political as well, and so his blending of politics, conflict and technology seems so completely normal for almost any person working in IT. As with all melodramas, there's an underriding moral that drives the whole thing, and in the case of Star Wars that moral is that even the greatest superstars can become what they hate most while trying to serve those they love. Be careful of offers that are too perfect since the cost of perfection is too high. Another theme from Star Wars and the fall of Anikan Skywalker comes from his jealousy of not being given his due respect and title out of fear and doubt from those who fear superstars instead of embracing them. If the Jedi Council gives him the title of Master Jedi, when that is obviously what he is, then does Darth Sidius have any chance of convincing the frustrated superstar that he should turn to the Dark Side? There's a warning in here to middle management about glass ceilings and trying to force the same old promotion path on people of all talent levels. Just because something hasn't been done before doesn't mean it shouldn't be done. Letting the enemy steal your superstars can be a very, very dangerous thing to do, so if you have to be a bit creative to keep your superstars happy then it may be the wise thing to do. If you haven't seen Star Wars III: Revenge of the Sith, I &lt;strong&gt;highly&lt;/strong&gt; recommend that you do so. This movie should be required viewing for anyone in political science or business management since so many of the events and characters can be found in almost any organization. It's simply a perfect melodrama of the reality of the times we live in, and there's lessons to be learned about the other side regardless of your political leanings.&lt;/p&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;p&gt;Feel free to elaborate or relate in the comments area below. If you've seen the movie and work for practically any organization you've probably seen or participated in such power struggles, so please share!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;The opinions expressed in this blog are not necessarily those of my employer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/sharpninja/it-toolbox-should-open-source-software-be-regulated-2kik"&gt;Should Open Source Software be Regulated?&lt;/a&gt; &amp;lt;== Previously | Next Up ==&amp;gt; &lt;a href="https://dev.to/sharpninja/it-toolbox-the-importance-of-repeatable-processes-4fap"&gt;The Importance of Repeatable Processes&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copyright"&gt;
  &lt;/a&gt;
  Copyright
&lt;/h3&gt;

&lt;p&gt;These articles are owned and copyrighted by IT Toolbox as I was a paid writer in their employ.  Please do not copy them.  If you cite them, please cite the originals.&lt;/p&gt;

</description>
      <category>opinion</category>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>Java Garbage Collecting</title>
      <author>Josh</author>
      <pubDate>Mon, 14 Jun 2021 00:20:13 +0000</pubDate>
      <link>https://dev.to/jryther/java-garbage-collecting-4098</link>
      <guid>https://dev.to/jryther/java-garbage-collecting-4098</guid>
      <description>&lt;p&gt;Hello everyone, for today’s post I am going to discuss garbage collecting for Java.  For those that don’t know, garbage collecting is the process of clearing up memory in the application at runtime.  As objects are created over the life cycle of the program they will eventually take up too much space.  In programming languages like C or C++ programmers will have to manage memory on their own.  Java is different in that it handles it in house and will delete object that are no longer referenced automatically in the JVM.&lt;/p&gt;

&lt;p&gt;Each JVM can implement its own form of garbage collecting as long as the type chosen meets the requirements of the JVM.  The most common garbage collector is Hotspot by Oracle.  Hotspot uses a generational garbage collector method that categorizes objects by the number of collections cycles it has lived through.  Hotspot’s philosophy is that most objects are short lived and in order to increase efficiency most passes of the garbage collector should just look at newer objects since they are most likely to be deleted. Looking at the graphic below, Hotspot breaks up the memory heap into sections called the young generation, old generation, and permanent generation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02BzlhKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9a6wsi4x5awa6ne7gsco.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02BzlhKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9a6wsi4x5awa6ne7gsco.PNG" alt="HotspotHeapStructure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The young generation consists of the eden, S0, and S1 blocks.  Eden is where new objects are stored.  They are frequently deleted in this phase since many are no longer used each collection cycle.  Objects that live past the first cycle move into S0 or S1 depending on which one is the survivor block for the rotation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NlByS8Ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywdf69so114lghw5epvl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NlByS8Ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywdf69so114lghw5epvl.PNG" alt="ObjectAging"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Objects already in one of the survivor blocks move between them together with each rotation they survive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4B_z2PA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceoet7cixyf8vhkwdk24.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4B_z2PA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceoet7cixyf8vhkwdk24.PNG" alt="AdditionalAging"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If an object has aged a specific threshold of cycles it then moves on to the tenured block.  Minor garbage collecting cycles of the young generation do not pass over this part of the heap.  Eventually, a major garbage collection event will occur which will clean up and compact this space as well.&lt;/p&gt;

&lt;p&gt;The permanent generation is used to contain metadata and is populated by the JVM at runtime.  This data labels and describes the classes and methods used by the program.  Java standard libraries are also stored in this section.  Classes here can be removed during a full garbage collection if the JVM determines they are no longer needed and space is required for other classes.&lt;/p&gt;

&lt;p&gt;Sources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Altvater, A. (2017, May 11). What is Java Garbage Collection? Best Practices, Tutorials &amp;amp; More. Stackify. &lt;a href="https://stackify.com/what-is-java-garbage-collection/#:%7E:text=Java%20garbage%20collection%20is%20the,Machine%2C%20or%20JVM%20for%20short.&amp;amp;text=The%20garbage%20collector%20finds%20these,them%20to%20free%20up%20memory"&gt;https://stackify.com/what-is-java-garbage-collection/#:~:text=Java%20garbage%20collection%20is%20the,Machine%2C%20or%20JVM%20for%20short.&amp;amp;text=The%20garbage%20collector%20finds%20these,them%20to%20free%20up%20memory&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Oracle. (n.d.). Java Garbage Collection Basics. &lt;a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html"&gt;https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>beginners</category>
      <category>java</category>
      <category>memory</category>
    </item>
    <item>
      <title>My Vue Experience after 3 projects in 18 months </title>
      <author>crisarji</author>
      <pubDate>Sun, 13 Jun 2021 23:52:08 +0000</pubDate>
      <link>https://dev.to/crisarji/my-vue-experience-after-3-projects-in-18-months-456c</link>
      <guid>https://dev.to/crisarji/my-vue-experience-after-3-projects-in-18-months-456c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#my-vue-experience-after-3-projects-in-18-months"&gt;
  &lt;/a&gt;
  My Vue Experience after 3 projects in 18 months
&lt;/h2&gt;

&lt;p&gt;Hello developer pal!, glad to see you here.&lt;/p&gt;

&lt;p&gt;In this post, I'll share my experience after 3 projects written/maintained in Vue 2.* during the last 18 months.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-me-the-topics"&gt;
  &lt;/a&gt;
  Show Me The Topics
&lt;/h2&gt;

&lt;p&gt;The topics to be focused on are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Agile Methodology and frameworks used&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Design Systems&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Infrastructure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Backend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;State Management&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Frontend&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: This post comes from my own experience during this lapse, not saying this is the best way to go, nor the worst, any contribution is more than welcome in the threads below!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#agile-methodology-and-frameworks-used"&gt;
  &lt;/a&gt;
  Agile Methodology and Frameworks used
&lt;/h2&gt;

&lt;p&gt;Are you familiar with &lt;a href="https://www.agilealliance.org/agile-essentials/"&gt;Agile Software Development&lt;/a&gt;?, cause I really am right now!, I really like this simple sentence as a summary:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Agile is the ability to create and respond to change. It is a way of dealing with, and ultimately succeeding in, an uncertain and turbulent environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source: &lt;a href="https://www.agilealliance.org/agile101/"&gt;What is Agile?&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nice, simple, straight to the point, isn't it?, during the last year and a half my teams passed over 3 different of its frameworks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.agilealliance.org/glossary/scrum"&gt;Scrum&lt;/a&gt;: from my perspective, the most interesting, this framework allowed our &lt;a href="https://www.visual-paradigm.com/scrum/what-is-cross-functional-team-in-agile/"&gt;cross functional team&lt;/a&gt; to interact as a whole, splitting the work up in 2-weeks sprints, and constantly adjusting the business requirements, it is a quite nice experience!, highly recommended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.agilealliance.org/glossary/kanban"&gt;Kanban&lt;/a&gt;: my second favorite from top to bottom, a good option when the work to be done does not follow the same path, for instance working on different repos at the same time(MonoRepos, MFEs, Legacy Systems)l; when this happens perhaps &lt;em&gt;Scrum&lt;/em&gt; is not enough cause the time-frames.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.agilealliance.org/glossary/xp"&gt;Extreme Programming (XP)&lt;/a&gt;: required for an MVP one of my teams had, from my experience, the most risky one since you dynamically change requirements and some heavy lifting could magically appear/disappear down the road, highly not-recommended unless it is "Extreme"-ly necessary(pun intended), and please be "Extreme"-ly cautious(pun intended X2).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case you want to read about the &lt;code&gt;Agile Manifesto&lt;/code&gt;(the corner stone of the methodology) you can do it right &lt;a href="http://agilemanifesto.org/principles.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-system"&gt;
  &lt;/a&gt;
  Design System
&lt;/h2&gt;

&lt;p&gt;I learned that after defining the &lt;a href="#agile-methodology-and-frameworks-used"&gt;Methodology&lt;/a&gt;, it is good to have a robust &lt;code&gt;Design System&lt;/code&gt;, you have 2 options: reuse an existing one or create one custom from scratch, either way the benefits are amazing!, when present it covers up 3 different areas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;code&gt;UI/UX&lt;/code&gt; does not repeat itself&lt;/li&gt;
&lt;li&gt; &lt;code&gt;WebDev&lt;/code&gt; has one-and-only-one source of truth&lt;/li&gt;
&lt;li&gt; &lt;code&gt;QA&lt;/code&gt; can evacuate questions on its own&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In case you want to have some existing guide lines, &lt;a href="https://designerup.co/blog/10-best-design-systems-and-how-to-learn-and-steal-from-them/"&gt;here&lt;/a&gt; you can find a list of available resources on the wild.&lt;/p&gt;

&lt;p&gt;In the teams I was working on, those where custom, a recipe for success was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://storybook.js.org/"&gt;StoryBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A great strategy that we found was to create &lt;code&gt;Vue&lt;/code&gt; components using &lt;code&gt;Tailwind&lt;/code&gt; and creating its respectives stories on &lt;code&gt;Storybook&lt;/code&gt;; I can say this is a great approach cause you can define your &lt;code&gt;Design System&lt;/code&gt; in &lt;code&gt;Storybook&lt;/code&gt; itself, and publish this to an accessible page for all your team members(under a VPN is even more secure), so it is available for everybody, they can see the components running in an isolated scope before even implementing it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure"&gt;
  &lt;/a&gt;
  Infrastructure
&lt;/h2&gt;

&lt;p&gt;Oh right, we had the &lt;a href="#agile-methodology-and-frameworks-used"&gt;Methodology&lt;/a&gt; and the &lt;a href="#design-system"&gt;Design System&lt;/a&gt; then what?&lt;/p&gt;

&lt;p&gt;I learned that here it comes the &lt;code&gt;Infrastructure&lt;/code&gt;, well the approaches we had the opportunity to work with where &lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt;, &lt;a href="https://travis-ci.org/"&gt;TravisCI&lt;/a&gt; and &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For experience, in big projects, &lt;code&gt;Jenkins&lt;/code&gt; is a great way to go, among all its pros, you can set it up for running on your behalf the &lt;em&gt;unit testing&lt;/em&gt; and &lt;em&gt;end-to-end&lt;/em&gt; testing before deploying!, in case of failure you are notified and a fix can be included.&lt;/p&gt;

&lt;p&gt;In small projects, or side projects, you can use the &lt;a href="https://travis-ci.org/"&gt;TravisCI&lt;/a&gt; + &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; approach; &lt;code&gt;GitHub&lt;/code&gt; already has some built-in options for setting up &lt;code&gt;ymls&lt;/code&gt; and help you with &lt;em&gt;Merge Requests&lt;/em&gt; and &lt;em&gt;Deployments&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;a href="https://travis-ci.org/"&gt;TravisCI&lt;/a&gt; gives you 10,000 builds for free with your sign up, for small projects, proof of concepts or side projects it is a great deal!.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h2&gt;

&lt;p&gt;Also I learned for these projects, that a &lt;code&gt;Backend&lt;/code&gt; on &lt;a href="https://nodejs.org/en/docs/"&gt;NodeJS&lt;/a&gt; and &lt;a href="https://firebase.google.com/docs"&gt;Firebase&lt;/a&gt; is easily handle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/docs/"&gt;NodeJS&lt;/a&gt; + &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; give you the chance to handle the routing for &lt;em&gt;CRUD&lt;/em&gt; operations, it is easy to handle the &lt;em&gt;request/responses&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://firebase.google.com/docs"&gt;Firebase&lt;/a&gt; is ready to go as soon as you import it in your &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; project; with a few lines of code you are able to do a lot!; Authentication, Storage, Realtime DB, a whole bunch of options are available for you.&lt;/p&gt;

&lt;p&gt;I wrote non-canonical series related to some Firebase features if you want to check them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#state-management"&gt;
  &lt;/a&gt;
  State Management
&lt;/h2&gt;

&lt;p&gt;I learned about &lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt; + &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt;. I'm used to Rxjs, NgRx but Vuex is from my experience the easiest; with a little of knowledge you are able to start creating on your own, the separation of concerns through modules, and the way to reference then is crystal clear:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;store/
   ├── index.js
   └── modules/
       ├── module1.store.js
       ├── module2.store.js
       ├── module3.store.js
       ├── module4.store.js
       └── module5.store.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Referencing the modules in the &lt;code&gt;index.js&lt;/code&gt; make them importable through out your project, this includes &lt;code&gt;State&lt;/code&gt;, &lt;code&gt;Getters&lt;/code&gt;, &lt;code&gt;Mutations&lt;/code&gt;, &lt;code&gt;Actions&lt;/code&gt;; a new module is just the addition of a new entry in the &lt;code&gt;index.js&lt;/code&gt;, a deprecated module is the removal of that entry(conditions may apply).&lt;/p&gt;

&lt;p&gt;I also learned that you can &lt;code&gt;namespace&lt;/code&gt; the modules!, then you can differentiate the elements by module instead of having dozens of lines with no context(trust me, with several modules this is amazing for debugging purposes, scalability and visual sake).&lt;/p&gt;

&lt;p&gt;A clear example can be found below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mapState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapGetters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapActions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapMutations&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing root properties&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;property&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing getters&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapGetters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;property&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing non-root properties&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing actions&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapActions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myAction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing mutations&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapMutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myMutation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't matter how small or how big is your project, it will be ready to scale, you can read here a bit more about &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt; and &lt;a href="https://www.telerik.com/blogs/10-good-practices-building-maintaining-large-vuejs-projects"&gt;Namespaces&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h2&gt;

&lt;p&gt;I learned that &lt;code&gt;Vue&lt;/code&gt; has a smaller learning curve than &lt;code&gt;Angular&lt;/code&gt;, and it is very similar to &lt;code&gt;React&lt;/code&gt;(&lt;em&gt;Note&lt;/em&gt;: assuming you have a strong base of Javascript, otherwise the curve is high on either of them).&lt;/p&gt;

&lt;p&gt;As a dev who was mostly involved in &lt;code&gt;Angular&lt;/code&gt; projects, understanding the core concepts and starting to be productive was easier than expected; I really think that the other way around must be harder, cause &lt;code&gt;Angular&lt;/code&gt; has its own world.&lt;/p&gt;

&lt;p&gt;Also learned about some core concepts that made my development faster and easier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://vuedose.tips/how-to-structure-a-vue-js-app-using-atomic-design-and-tailwindcss/"&gt;Atomic Design Pattern&lt;/a&gt;: structure your folders as =&amp;gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Atoms&lt;/em&gt;: these are basic components, dummy ones; could be buttons, inputs, dropdowns, any imagiable component small enough to be functional and testable&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Molecules&lt;/em&gt;: a group of &lt;em&gt;Atoms&lt;/em&gt;, at this level just a little logic included, it should not include communication with you state(if possible)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Organisms&lt;/em&gt;: mixture!, can have &lt;em&gt;Atoms&lt;/em&gt; and &lt;em&gt;Molecules&lt;/em&gt;, at this tier communication with you &lt;em&gt;State&lt;/em&gt; can be allowed; Mappers, Getters, here are accepted&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Templates&lt;/em&gt;: here you add together the aforementioned structures&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Pages&lt;/em&gt;: every page you add is an instance that can be accessed from your routing strategy
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://router.vuejs.org/guide/advanced/lazy-loading.html"&gt;Vue Lazy Routing&lt;/a&gt;: it is trivially easy to lazy load the route components; after defining your &lt;em&gt;routerOptions&lt;/em&gt; in 5 lines of code it is set and done.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routerOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routerOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* webpackChunkName: "{{route.component}}" */&lt;/span&gt; &lt;span class="s2"&gt;`../views/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.vue`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://vue-test-utils.vuejs.org/"&gt;Vue Test Utils&lt;/a&gt;: &lt;code&gt;Vue&lt;/code&gt; has its own utils for testing purposes, and it is quite easy to understand and use, let me show the most simple sample I found:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/slot&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;shallowMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vue/test-utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BaseModal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/atoms/BaseModal.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BaseModal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;existence of the element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should exist 'modal' element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shallowMount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BaseModal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[data-test='modal']&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://vuejs.org/v2/guide/components-registration.html"&gt;Global Registration of Components&lt;/a&gt;: There are components widely used, these are candidates to be registered globally so they can be referenced without importing them.
An easy way to accomplished this is creating a &lt;code&gt;_globals.js&lt;/code&gt; file and fill it in with:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Globally register all base components for convenience, because they&lt;/span&gt;
&lt;span class="c1"&gt;// will be used very frequently. Components are registered using the&lt;/span&gt;
&lt;span class="c1"&gt;// PascalCased version of their file name.&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// https://webpack.js.org/guides/dependency-management/#require-context&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requireComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// Look for files in the current directory&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./atoms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Do not look in subdirectories&lt;/span&gt;
  &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Only include .vue files&lt;/span&gt;
  &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\w&lt;/span&gt;&lt;span class="sr"&gt;-&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;vue$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// For each matching file name...&lt;/span&gt;
&lt;span class="nx"&gt;requireComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Get the component config&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requireComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Get the PascalCase version of the component name&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;
    &lt;span class="c1"&gt;// Remove the "./" from the beginning&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\.\/&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Remove the file extension from the end&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.\w&lt;/span&gt;&lt;span class="sr"&gt;+$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;componentConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, just import that file in &lt;em&gt;main.js&lt;/em&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/_globals&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some other good practices can be found:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learnvue.co/2020/01/12-vuejs-best-practices-for-pro-developers/"&gt;Syntax and Logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.telerik.com/blogs/10-good-practices-building-maintaining-large-vuejs-projects"&gt;Slots use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bitsrc.io/4-best-practices-for-large-scale-vue-js-projects-9a533450bdb2"&gt;Large Scale Vue.js Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As shown above, I had a long way during the last 18 months, I'm giving my two cents in here in the way I understood the concepts, and what I think were the best practices applied; maybe you could have a better way to do it, let's discuss in a thread below!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>github</category>
    </item>
    <item>
      <title>Como eu migrei um projeto em PHP puro para Laravel</title>
      <author>Tadeu Barbosa</author>
      <pubDate>Sun, 13 Jun 2021 23:00:32 +0000</pubDate>
      <link>https://dev.to/tadeubarbosa/como-eu-migrei-um-projeto-em-php-puro-para-laravel-606</link>
      <guid>https://dev.to/tadeubarbosa/como-eu-migrei-um-projeto-em-php-puro-para-laravel-606</guid>
      <description>&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://www.pexels.com/@somyadinkar?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Somya Dinkar&lt;/a&gt; from [Pexels]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bem, a primeira coisa é que Laravel é escrito em PHP, portanto as mudanças são mais na forma de organização ou estrutura do Laravel do que qualquer outra coisa.&lt;/p&gt;

&lt;p&gt;Programar é algo tão belo! Certo dia vi uma pergunta no twitter &lt;em&gt;mais ou menos assim&lt;/em&gt;: "você continuaria programando mesmo que isso não te rendesse grana?!". A minha resposta na hora foi: Com certeza! Conheci programação por volta de 2010--2011 no Ensino Médio, em um curso básico de HTML, no momento que percebi a grandeza disso tudo (e olha que era somente HTML), eu me apaixonei! ❤ &lt;/p&gt;

&lt;p&gt;Por ter uma certa curiosidade de como as coisas funcionam, sempre me dediquei a "criar" coisas que já existiam. No início mantinha uma fixação imensa por criar uma rede social do zero, inclusive quando finalizei o meu curso de HTML na escola, precisava criar uma página web demostrando os meus conhecimentos. A primeira coisa que me veio em mente foi criar uma rede social, vocês já devem imaginar que tentativa falha, não é mesmo? kk Sabia somente HTML, e bem básico, mas achei que poderia criar uma rede social. Acabei entregando três arquivos: pagina-inicial-vermelha.htm, pagina-inicial-verde.html, pagina-inicial-blue.html. Sim! Dentro de cada body eu coloquei o atributo: &lt;em&gt;bgcolor="blue"&lt;/em&gt;. Nem sei se existe esse atributo mais!&lt;/p&gt;

&lt;p&gt;Chega de falar de mim, vamos pro código!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LV_u_DK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ANLO0xphqDazXXEj-.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LV_u_DK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ANLO0xphqDazXXEj-.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#motivos"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Motivos&lt;/strong&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Nem todo sistema precisa de um framework!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos deixar isso bem claro! A minha intenção aqui, principalmente se você é um iniciante, não é dizer que todo sistema que você for desenvolver vai precisar de um framework. Porém, contudo, todavia, há momentos em que utilizar um framework vai te poupar tempo. E, meus amigos: Tempo é dinheiro!&lt;/p&gt;

&lt;p&gt;Digamos que você e sua equipe criaram um framework próprio a uns anos atrás, ou até mesmo você chegou depois que já haviam criado tal código. E agora as coisas estão ficando tão complicadas que você passa horas tentando dar manutenção ou encaixar um feature nova nesse código antigo. Fizeram uma reunião e decidiram migrar todo o código para um framework bastante conhecido pelo mundo PHP: Laravel. E é aqui que esse post entra!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vamos-partir-do%C2%A0in%C3%ADcio"&gt;
  &lt;/a&gt;
  Vamos partir do início
&lt;/h4&gt;

&lt;p&gt;A primeira coisa que você precisa fazer é baixar o &lt;a href="https://github.com/laravel/laravel"&gt;código do Laravel&lt;/a&gt;. Feito isso, copie todos os diretórios do seu projeto para esse novo. Fique atendo para diretórios e arquivos com o mesmo nome!&lt;/p&gt;

&lt;p&gt;Se, por exemplo, vocês utilizam o composer (se não, o trabalho vai ser bem maior), copie as configurações do seu projeto para o composer.json do laravel. &lt;/p&gt;

&lt;p&gt;Lembre-se das estruturas dos diretórios! Controllers dentro de: &lt;em&gt;app/Http/Controllers&lt;/em&gt;, das models: &lt;em&gt;app/Models&lt;/em&gt;. Utilize os comandos: &lt;em&gt;php artisan make:controller HomeController&lt;/em&gt; e &lt;em&gt;php artisan make:model NovoModel&lt;/em&gt; para gerar as novas classes. Uma coisa que vai te ajudar bastante nesse momento é o comando: "Substituir em arquivos". No PHP Storm: é &lt;em&gt;Ctrl + Shift + R&lt;/em&gt;, e vscode: &lt;em&gt;Ctrl + Shift + H&lt;/em&gt; (no Ubuntu, pelo menos).&lt;/p&gt;

&lt;p&gt;Ok, vamos para as views. Suponhamos que as suas views estejam todas organizadas e separadas em diretórios, e ainda mais, que utilizava alguma forma de template aonde o arquivo de template principal (aonde fica o html, body, navbar etc), está separado do conteúdo da página. Vai ser beeem mais fácil para fazer a migração! Crie um arquivo PHP com o seguinte conteúdo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// pegue todos os arquivos .php dentro do diretório views&lt;/span&gt;
&lt;span class="nv"&gt;$files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'path/views/*.php'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$files&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// altere a extensão de .php para .blade.php&lt;/span&gt;
  &lt;span class="nv"&gt;$newFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;preg_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/\.php$/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.blade.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$newFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
  &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;file_get_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$newFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// adicione um espaçamento de quatro linhas a cada início de linha&lt;/span&gt;
  &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"    "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;array_unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"@extends('layouts.app')&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"@section('content')"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"@endsection&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// adiciona dados do layout do laravel&lt;/span&gt;
  &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$newFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isso os arquivos das views estão configurados! Caso os seus arquivos estejam diferentes, você pode adaptar o script acima. Lembre-se de compartilhar nos comentários, com isso poderá ajudar a outras pessoas!&lt;/p&gt;

&lt;p&gt;Migramos os controllers e views, e agora talvez seja a hora mais chatinha: migrar o banco de dados! Pra criar os arquivos talvez você possa testar este código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$dbname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'dbname'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$dbh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PDO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mysql:host=localhost;dbname='&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$dbname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$dbh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA='&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$dbname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$tables&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;array_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ucwords'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
    &lt;span class="nv"&gt;$class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Create&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Table"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$dbh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' AND TABLE_SCHEMA='&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$dbname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fetchAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;?php&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"use Illuminate\Database\Migrations\Migration&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"use Illuminate\Database\Schema\Blueprint&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"use Illuminate\Support\Facades\Schema;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"class &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; extends Migration&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;{\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"    public function up()&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;    {\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"        Schema::create('&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;', function (Blueprint &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;table) {\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"            &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;table-&amp;gt;id();&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$column&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$column&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'DATA_TYPE'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="s1"&gt;'varchar'&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="s1"&gt;'int'&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'integer'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$columnName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$column&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'COLUMN_NAME'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"            &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;table-&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;('&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$columnName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;');&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"            &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;table-&amp;gt;timestamp();&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"        });&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"    }&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"    public function down()&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;    {\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"        Schema::dropIfExists('&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;');&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"    }&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="nv"&gt;$date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y_m_d_His'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"database/migrations/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_create_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_table.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$dbh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esse código vai gerar pelo menos a base de uma migration, você só precisa fazer as devidas modificações.&lt;/p&gt;

&lt;p&gt;Por fim, talvez você também precise gerar seeds:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nv"&gt;$dbname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'dbname'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$dbh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PDO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mysql:host=localhost;dbname='&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$dbname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$dbh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA='&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$dbname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$tables&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;array_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ucwords'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
    &lt;span class="nv"&gt;$class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Seeder"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$dbh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT * FROM &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fetchAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="no"&gt;PDO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FETCH_ASSOC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$column&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$column&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$values&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' =&amp;gt; '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$values&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"            [&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$values&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;",&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;?php&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"namespace Database\Seeders;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"use Illuminate\Database\Seeder;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"use Illuminate\Support\Facades\DB;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"class &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; extends Seeder&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;{\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"    public function run()&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;    {\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"        DB::table('clientes_tipos')-&amp;gt;insert([&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"        ]);&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"    }&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y_m_d_His'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"database/seeders/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$dbh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;É isso! Espero ter ajudado! Até a próxima!&lt;/p&gt;

</description>
      <category>php</category>
      <category>braziliandevs</category>
      <category>portugues</category>
    </item>
    <item>
      <title>WWDC 2021: State of the Union Recap</title>
      <author>Joseph Maurer</author>
      <pubDate>Sun, 13 Jun 2021 22:53:56 +0000</pubDate>
      <link>https://dev.to/mwrpwr/wwdc-2021-state-of-the-union-recap-1adc</link>
      <guid>https://dev.to/mwrpwr/wwdc-2021-state-of-the-union-recap-1adc</guid>
      <description>&lt;p&gt;
Here’s a quick recap of Apple’s State of the Union at WWDC (World Wide Developer Confrence 2021). You can find the &lt;a href="https://developer.apple.com/videos/play/wwdc2021/102/?time=2036"&gt;full video here&lt;/a&gt;.
&lt;/p&gt;


  
Your browser does not support the video tag.



&lt;h2&gt;XCode Build&lt;/h2&gt;

&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KB9YXBBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0d2h1765otfujio9z7h.png" alt="alt_text" title="image_tooltip"&gt;

 

&lt;p&gt;
A new continuous integration and delivery service built right into Xcode and hosted in the cloud, Xcode Build is Apple’s take on simplifying the process of building an app while helping you focus on what’s important. It helps you offload your builds, test, and code signing for distribution. It publishes your result right back into Xcode’s report navigator so you never have to switch context out of where you are building your app. 
&lt;/p&gt;

&lt;p&gt;
One cool feature is that you can have the build notify you when it completes and publish it to your Slack or any other service. There is also a public API that you can dive into for grabbing information about your builds. I can see how building apps this way is way more integrated and convenient. This actually seems like a fun way to write tests for your app!
&lt;/p&gt;

&lt;p&gt;
Code reviews also look to make massive improvements on commenting and reviewing code. The new views allow you to select between multiple ways to see what code has changed, and even view comments as you are fixing any potential bugs. Anyone who does code reviews how confusing it can get when there are multiple revisions and files removed or added to a pull request. 
&lt;/p&gt;


&lt;h2&gt;Swift Concurrency Support&lt;/h2&gt;


&lt;p&gt;
Most developers and engineers are used to the idea of writing concurrent code as it’s such a vital part of making fast and responsive code. 
&lt;/p&gt;

&lt;blockquote&gt;
&lt;a href="https://developer.apple.com/videos/play/wwdc2021-102/?time=1209"&gt;Concurrency enables your apps to perform multiple tasks at the same time, which helps your apps stay responsive to user input while doing work in the background, like a weather app fetching forecast data while the user selects a city.&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The problem? Swift never had native support for concurrent code, so it was unnecessarily difficult to write good concurrent code. Apple’s new approach to this is &lt;strong&gt;Structured Concurrency&lt;/strong&gt;. Actors are an industry standard and are vital to safe concurrent programming. 
&lt;/p&gt;

&lt;blockquote&gt;
&lt;a href="https://developer.apple.com/videos/play/wwdc2021-102/?time=1483"&gt;Conceptually, an actor is an object that protects its own state by only providing mutually exclusive access. This completely eliminates concurrent access and the low-level data races that come with it. &lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Actors’ are now a first class citizen in Swift and have a much simpler declaration:
&lt;/p&gt;

&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3n6FJUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x29vjw5swqvo40hn01xd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3n6FJUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x29vjw5swqvo40hn01xd.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;
 

&lt;/p&gt;

&lt;p&gt;
Another benefit is MainActor, which lets you decorate a function to always run on the main thread. This is vital for API calls that are needed for the UI.
&lt;/p&gt;

&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03djmYTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vket45ofwyu1gd9qunvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03djmYTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vket45ofwyu1gd9qunvw.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;

&lt;/p&gt;


&lt;h2&gt;Swift Playgrounds&lt;/h2&gt;


&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7X6GsG3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1usqhckjjdwl88fkn5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7X6GsG3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1usqhckjjdwl88fkn5r.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;
 
&lt;/p&gt;

&lt;p&gt;
This year, Swift playgrounds 4 allows you to work on your ideas wherever you go. It allows you to switch between Playgrounds and Xcode. Once you have created an app, you can even publish your app to TestFlight right from the Playgrounds app. 
&lt;/p&gt;


&lt;h2&gt;VR and AR Kits&lt;/h2&gt;


&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I9d55oxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l1bqcsnu0jfy4j1papb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I9d55oxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l1bqcsnu0jfy4j1papb.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;
 

&lt;/p&gt;

&lt;p&gt;
You can now add cool effects to your AR objects with Custom metal shaders and dynamic textures. You can see these effects in the Birthday Cake demo with confetti falling around the object.
&lt;/p&gt;


&lt;h2&gt;Metal Improvements&lt;/h2&gt;


&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v0bi6tKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp17f09ljn1edukc5r30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v0bi6tKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp17f09ljn1edukc5r30.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;

&lt;/p&gt;

&lt;p&gt;
One thing that stood out to me as a Game Engineer is that you can now have more control over the display refresh rate. Especially if you are developing games that are going to run on the IPad Pro with ProMotion or on Macs that are connected to high end monitors, having control over the refresh rate can be useful for making your game look like it’s running smoothly!
&lt;/p&gt;

&lt;p&gt;
Game controller support is also easier to add now, with haptic support. You can add a new on screen controller with only a few lines of code. 
&lt;/p&gt;


&lt;h2&gt;Notifications&lt;/h2&gt;


&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDKtFfRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkyhks52rdqbb2zrqcvh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDKtFfRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkyhks52rdqbb2zrqcvh.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;

&lt;/p&gt;

&lt;p&gt;
iOS is now changing how notifications work and at what level they are delivered. Focus allows the user to select what types of notifications are delivered. There are now 4 levels of notifications: Low, Active, Time Sensitive, and Urgent. Notifications summary allows users to get a brief overview of what was delivered with some marks of relevance. 
&lt;/p&gt;




&lt;p&gt;
There was lots more covered, but those are the highlights that stuck out to me. &lt;strong&gt;Let me know what you found interesting in the comments below!&lt;/strong&gt;
&lt;/p&gt;

</description>
      <category>swift</category>
      <category>wwdc</category>
      <category>news</category>
      <category>ios</category>
    </item>
    <item>
      <title>How Did I build My First React Package</title>
      <author>Ziad Adeela</author>
      <pubDate>Sun, 13 Jun 2021 21:17:17 +0000</pubDate>
      <link>https://dev.to/ziadadeela/how-did-i-build-my-first-react-package-3f3l</link>
      <guid>https://dev.to/ziadadeela/how-did-i-build-my-first-react-package-3f3l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;There are a lot of use cases that require the concept of repetition or recurring. A basic example for that is recurring events.&lt;/p&gt;

&lt;p&gt;A highly customizable component that you can plug into your project to have the recurring logic in no time is quite needed for such cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-process"&gt;
  &lt;/a&gt;
  Development Process
&lt;/h2&gt;

&lt;p&gt;At first, I didn't have the full picture of how my component will look like, what will be the end result, what are the internal components, or how can I make it as customizable as possible. Since recurring logic is mostly used with calendar events, The first step I did is checking existing behavior in different well-known calendars such as Google Calendar and Outlook Calendar. After that, I was able to imagine the main parts of my component, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start Date&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frequency&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ending Condition&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;if it's all day or with Start and End Time.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#make-it-work-make-it-better-ideology"&gt;
  &lt;/a&gt;
  "Make it work, Make it better" Ideology
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#make-it-work"&gt;
  &lt;/a&gt;
  Make it work
&lt;/h4&gt;

&lt;p&gt;When I started the development process, I had one big react component that contains all the logic of the main parts I mentioned. I built the general structure from UI perspective with some stylings here and there until I got the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dVtNLGSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7caz239lwfq752x6fee0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dVtNLGSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7caz239lwfq752x6fee0.png" alt="React Recurrence general structure."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step was defining my recurrence object and the type of each internal field. And here it came the blessings of typescript. At first, I had some difficulties dealing with it, but then, I realized how helpful it is.&lt;/p&gt;

&lt;p&gt;After that, I defined the click/change events for each input I had in the component in order to correctly fill the recurrence object fields.&lt;/p&gt;

&lt;p&gt;So I got a working component! (but really, not a one I can be proud of yet, nor a customizable one. 😏)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#make-it-better"&gt;
  &lt;/a&gt;
  Make it better
&lt;/h4&gt;

&lt;p&gt;The most challenging part during the component development is the continuous thoughts of how can I make it better. Making a component better is by making it cleaner as code along with a cleaner logical separation into sub-components.&lt;br&gt;
More importantly, make it as customizable as possible by thinking of other use cases that the consumers or the users of your component will face  while using it. Of course, adding some unit tests is another strength to make sure nothing breaks when any refactor is done in any part of the component.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Component Separation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following GIF sums up the process of separating the large component I started with, into  sub components. Each sub-component represents the main parts I mentioned earlier since each part is a separated logic and can live inside its own component.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JXwDrlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws8uphi36p4df0hhzbhy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JXwDrlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws8uphi36p4df0hhzbhy.gif" alt="Internal Components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org/docs/context.html"&gt;React Context&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After doing the components separation, I first used the tradition way in react for passing the data between the children which is using props. But then, I realized that the result was a tree of components and some props needed to be passed into deeper children. Here, React Context came into play.&lt;/p&gt;

&lt;p&gt;The first advantage I had from using Context is that the recurrence object is shared between the sub-components and no need to pass each field as a prop. &lt;/p&gt;

&lt;p&gt;Another advantage was giving the consumer the flexibility of structuring the sub-components according to their needs. As a result of this, the component can be used in either the default structure:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;
  &lt;span class="na"&gt;recurrence&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;recurrence&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleRecurrenceChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Or in a custom one:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;
  &lt;span class="na"&gt;recurrence&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;recurrence&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleRecurrenceChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;
      &lt;span class="na"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'column'&lt;/span&gt;
      &lt;span class="na"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'center'&lt;/span&gt;
      &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'center'&lt;/span&gt;
      &lt;span class="na"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt; &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StartDateSelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FrequencySelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt; &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;EndingConditionSelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt; &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;TimeSelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Styling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://material-ui.com/styles/basics/"&gt;Material UI styling&lt;/a&gt; solution was the choice to build a dynamic UI for the component.&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://storybook.js.org/"&gt;Storybook&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Storybook helped a lot in representing the different states of the recurrence component along with the subcomponents in an isolated way. &lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Unit Tests Using &lt;a href="https://jestjs.io/docs/tutorial-react"&gt;Jest&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unit tests helped me a lot when I reached the refactor part to make my component better. I wanted to make sure that no change will affect the logic of the component. &lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#useful-tools"&gt;
  &lt;/a&gt;
  Useful Tools
&lt;/h2&gt;

&lt;p&gt;The following tools made my life easier while developing the component and publishing it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/transitive-bullshit/create-react-library"&gt;create-react-library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This package helps a lot when creating a new react library since it saves you from all the boilerplate code and the setup needed. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sindresorhus/np"&gt;np&lt;/a&gt;&lt;br&gt;
This package makes your life easier when dealing with publishing and releasing your component to NPM.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;A live demo for the component can be found &lt;a href="https://ziadadeela.github.io/react-recurrence/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-repository"&gt;
  &lt;/a&gt;
  Github Repository
&lt;/h2&gt;

&lt;p&gt;Feel free to review the component to give any technical feedback or drop any suggestions on how to make it even more customizable. You can find it &lt;a href="https://github.com/ziadadeela/react-recurrence"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-help"&gt;
  &lt;/a&gt;
  Get Help
&lt;/h2&gt;

&lt;p&gt;A great source for getting help around the library or the tool you're using is its community. Most of the times you will find people to help you when you're stuck or to take their opinion in some cases to make sure you're following the best practice of the tool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.reactiflux.com/"&gt;Reactiflux&lt;/a&gt;&lt;/strong&gt; helped a lot in React, Context, and Jest for some of the cases I faced in react-recurrence. Same thing regarding &lt;a href="https://storybook.js.org/community"&gt;Storybook&lt;/a&gt; community.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>frontend</category>
      <category>recurrence</category>
    </item>
    <item>
      <title>Add Notifications to your React application</title>
      <author>Semir Teskeredzic</author>
      <pubDate>Sun, 13 Jun 2021 20:32:24 +0000</pubDate>
      <link>https://dev.to/semirteskeredzic/add-notifications-to-your-react-application-epc</link>
      <guid>https://dev.to/semirteskeredzic/add-notifications-to-your-react-application-epc</guid>
      <description>&lt;p&gt;Proper notifications are crucial for functional UI. Imagine you are using one of many web applications and you enter a wrong password or any kind of input just to see that nothing happens and you are left baffled. That is why integrating notifications, alerts or other kind of signals what has happened is important for any application with user interface.&lt;/p&gt;

&lt;p&gt;In this post I will go through the simple integration of &lt;code&gt;react-notifications-component&lt;/code&gt; library that has some 23k of weekly downloads on npmjs.com.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#add-package-to-your-project"&gt;
  &lt;/a&gt;
  Add package to your project
&lt;/h1&gt;

&lt;p&gt;You can use npm to add this package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i react-notifications-component
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you need to build library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm run build:library:dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You are ready to go! Now you can start your application&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#import-and-setup"&gt;
  &lt;/a&gt;
  Import and Setup
&lt;/h1&gt;

&lt;p&gt;Now in your App.js you need to import &lt;code&gt;ReactNotification&lt;/code&gt; and its &lt;code&gt;css&lt;/code&gt; file like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import ReactNotification from 'react-notifications-component'
import 'react-notifications-component/dist/theme.css'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we put &lt;code&gt;ReactNotification&lt;/code&gt; component alongdside of our main app content in order not to collide with other absolute positioned elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
  return (
    &amp;lt;div&amp;gt;
        &amp;lt;ReactNotification /&amp;gt;
        &amp;lt;Application /&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are now ready to use notification when we need it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-in-component"&gt;
  &lt;/a&gt;
  Use in Component
&lt;/h1&gt;

&lt;p&gt;Let's say you have a small component that throws a great success notification when you enter your name and click hello button and it throws bad red notification when you don't enter your name but nevertheless click hello button.&lt;/p&gt;

&lt;p&gt;First we import &lt;code&gt;store&lt;/code&gt; from our new package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { store } from 'react-notifications-component'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notification is called like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;store.addNotification({
  title: "Success!",
  message: "You have been successful!",
  type: "success",
  insert: "top",
  container: "top-right",
  animationIn: ["animate__animated", "animate__fadeIn"],
  animationOut: ["animate__animated", "animate__fadeOut"],
  dismiss: {
    duration: 5000,
    onScreen: false
  }
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see the notification in action we will create a component that will evaluate if the user entered name, if yes then success notification will be executed if not then danger notification will be executed. So here is a simple component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";
import { store } from "react-notifications-component";

function Application() {
  const [name, setName] = useState("");

  const handleChange = (e) =&amp;gt; {
    setName(e.target.value);
  };

  const handleSubmit = (e) =&amp;gt; {
    e.preventDefault();
    if (name) {
      store.addNotification({
        title: "Great",
        message: `Hello ${name}`,
        type: "success",
        insert: "top",
        container: "top-right",
        animationIn: ["animate__animated", "animate__fadeIn"],
        animationOut: ["animate__animated", "animate__fadeOut"],
        dismiss: {
          duration: 5000,
          onScreen: false
        }
      });
      setName("");
    } else {
      store.addNotification({
        title: "OOh OOh!",
        message: "Don't be shy!",
        type: "danger",
        insert: "top",
        container: "top-right",
        animationIn: ["animate__animated", "animate__fadeIn"],
        animationOut: ["animate__animated", "animate__fadeOut"],
        dismiss: {
          duration: 5000,
          onScreen: false
        }
      });
    }
  };

  return (
    &amp;lt;&amp;gt;
      &amp;lt;input
        value={name}
        onChange={(e) =&amp;gt; handleChange(e)}
        placeholder="Enter name here!"
      /&amp;gt;
      &amp;lt;button onClick={(e) =&amp;gt; handleSubmit(e)}&amp;gt;Say Hello&amp;lt;/button&amp;gt;
    &amp;lt;/&amp;gt;
  );
}

export default Application;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple setup is available in codesandbox &lt;a href="https://codesandbox.io/s/old-http-dznz8?file=/src/Application.js"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can configure notifications object with values:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#position"&gt;
  &lt;/a&gt;
  Position:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;container:
- top-left
- top-right
- top-center
- center
- bottom-left
- bottom-right
- bottom-center
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#types"&gt;
  &lt;/a&gt;
  Types:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type:
- success
- danger
- info
- default
- warning
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more in the package documentation &lt;a href="https://www.npmjs.com/package/react-notifications-component"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading and happy notifying!&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Review: a React Todo App Tutorial                                 </title>
      <author>Jonathan Hammond</author>
      <pubDate>Sun, 13 Jun 2021 20:11:38 +0000</pubDate>
      <link>https://dev.to/jonamichahammo/review-a-react-todo-app-tutorial-i52</link>
      <guid>https://dev.to/jonamichahammo/review-a-react-todo-app-tutorial-i52</guid>
      <description>&lt;p&gt;Recently I followed along a &lt;a href="https://www.youtube.com/watch?v=pCA4qpQDZD8"&gt;'Build A Todo App With REACT'&lt;/a&gt; tutorial by Dev Ed on YouTube. I wanted to review and write about what I learned, as this is a new technique I would like to add into my habits.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Note: this is an ongoing draft and is currently only 1/3 done. If you would like to get straight to the tutorial, just click above. Otherwise, enjoy what I have reviewed thus far!&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Obligatory Spoiler Alert&lt;/strong&gt; The tutorial was amazing. You create a Todo list. It's not perfectly mobile responsive. Some of the concepts you will learn about by following this tutorial include Component building, Properties (prop) drilling, State managing and storing through the &lt;code&gt;localStorage&lt;/code&gt; object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-begin"&gt;
  &lt;/a&gt;
  How do you begin?
&lt;/h2&gt;

&lt;p&gt;Ed begins with a simple introduction to the project, explaining that this is  straightforward Todo app in React, which gives you a good grasp on how to make future projects in React as well. He also adds a quick aside about his health, which overall I enjoyed for one particular reason (other than that he is focusing on his health!). You will notice early on that Ed is a very friendly and humorous content creator. If this style is your cup of tea, then I think you will have a lot of fun learning through his content.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One plus about this video is that he installs react in the beginning, so if you are new to coding in some way, don't be afraid.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After your &lt;code&gt;react app&lt;/code&gt; is created, you will delete several unnecessary files, and run the app with &lt;code&gt;npm start&lt;/code&gt; as your first test.&lt;/p&gt;

&lt;p&gt;One of the first items that are covered is the usage of &lt;code&gt;className&lt;/code&gt; while writing JSX code. The reason for this is that, while you are basically writing what looks like HTML, you are still writing this in JavaScript, and as you may already know, the &lt;code&gt;class&lt;/code&gt; keyword is a reserved keyword, but worry not. If you forget and you define an HTML attribute with class on accident, the app will let you know shortly afterwards.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-aside-past-code-required"&gt;
  &lt;/a&gt;
  A Quick Aside - Past Code Required
&lt;/h3&gt;

&lt;p&gt;Ed references a previously made project of the same app except in vanilla JavaScript, which you can find &lt;a href="https://github.com/developedbyed/vanilla-todo"&gt;here&lt;/a&gt;. You won't be covering custom CSS much at all in this project, so this is where you will be getting a lot of the content to copy over.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;The components covered in this tutorial are named &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;TodoList&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;Todo&amp;gt;&lt;/code&gt;. The Form component is essentially an input element, a dropdown option menu, and a submit button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#form"&gt;
  &lt;/a&gt;
  Form
&lt;/h3&gt;

&lt;p&gt;You begin by importing React. You have the option of creating components through the function keyword, but the author chooses to go with arrow function syntax. This makes sense, because it is 2021, React came out in 2013, and ES6 syntax (such as arrow functions) came out in 2015. But if you prefer to go with the function keyword, both should work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-aside-using-raw-return-endraw-in-jsx"&gt;
  &lt;/a&gt;
  A Quick Aside - Using &lt;code&gt;return&lt;/code&gt; in JSX
&lt;/h3&gt;

&lt;p&gt;It took me a few projects to remember that parentheses are used in JSX to return multi-line JSX code. I believe this is because JavaScript doesn't support functions that return multiple values, though you can wrap multiple values into an array or an object and return that. I think that is what is going on with return ( ), but I am not 100% sure. You can read more about this &lt;a href="https://scotch.io/starters/react/returning-jsx"&gt;here&lt;/a&gt; and &lt;a href="https://www.javascripttutorial.net/javascript-return-multiple-values/"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating your component, you will follow up the function with &lt;code&gt;export default [component name]&lt;/code&gt; and import the item within your App.js file.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;best practice&lt;/em&gt; that seems apparent is to name your component after your file name. Here is when TodoList is first created, but there was not enough time spent on it for me to write about it yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;p&gt;Ed describes how the React library works with data, and how you will be telling your App "what to do."&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Based on that data, the application is going to react. The whole goal is to get our Todos, is to get any inputs or whatever that we're using on our web app, and get them into state ... Once it's in state, your UI is going to automatically react to all the changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-aside-state"&gt;
  &lt;/a&gt;
  A Quick Aside - State
&lt;/h3&gt;

&lt;p&gt;Simplilearn has a great short video on what State is in ReactJS and can be viewed &lt;a href="https://www.youtube.com/watch?v=DPdc5Z-Tf4U"&gt;here&lt;/a&gt;. In a nutshell, State "is an object that stores the values of properties belonging to a component that could change over a period of time." These changes are generally updated by event handlers. They can change the data they hold over time, and store the data that has to be rendered to view. Dev Ed also has an entire hour-long video (in a playlist!) on React State and Props that can be found &lt;a href="https://www.youtube.com/watch?v=dMH1_YtUTSQ"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usestate"&gt;
  &lt;/a&gt;
  useState
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; is a React hook that lets you &lt;a href="https://daveceddia.com/usestate-hook-examples/"&gt;add state to function components.&lt;/a&gt;. What is a hook? According to &lt;a href="https://reactjs.org/docs/hooks-state.html"&gt;React documentation:&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Hook is a special function that lets you "hook into" React features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; hook is called directly inside a component. Calling it declares a state variable, which can be named basically anything. This variable preserves some values between function calls. It is basically a newer version of &lt;code&gt;this.state&lt;/code&gt;, if you have ever initialized state in React by using class components. The only argument passed to this hook is the initial state, such as an empty string or array, or even a default dropdown option value (as we see in this tutorial with &lt;code&gt;value="all"&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appjs-coding-a-text-state"&gt;
  &lt;/a&gt;
  App.js - Coding a text &lt;em&gt;state&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;[a, b]&lt;/code&gt; pattern consists of an actual value, followed by a function that allows you to change this value. For example, this is how Ed declares a constant &lt;code&gt;useState&lt;/code&gt; hook of an empty string:&lt;br&gt;
&lt;code&gt;const [inputText, setInputText] = useState("");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Within our App.js file component (&lt;code&gt;App()&lt;/code&gt;), we return multi-line JSX including some basic HTML, as well as our components &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;TodoList&amp;gt;&lt;/code&gt;. Within our Form component, we pass our &lt;code&gt;inputText&lt;/code&gt; and &lt;code&gt;setInputText&lt;/code&gt; state as properties. I was able to better understand this by reading this great article (~10-minute read) &lt;a href="https://www.pluralsight.com/guides/how-to-send-state-of-current-component-as-a-parameter-to-another-external-method-using-react"&gt;on PluralSight.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#formjs-creating-raw-inputtexthandler-endraw-"&gt;
  &lt;/a&gt;
  Form.js - Creating &lt;code&gt;inputTextHandler&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Ed next shows us how to "arrive to this position" (in reference to our text state in the App.js file). So, we write a function that updates a piece of state within our Form component. He creates functions with the suffix &lt;code&gt;Handler&lt;/code&gt; so we know what they do. This one, &lt;code&gt;inputTextHandler&lt;/code&gt;, takes one argument as a parameter - the event. To &lt;code&gt;console.log&lt;/code&gt; our event as a test, Ed adds an &lt;code&gt;onChange&lt;/code&gt; event listener to our &lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt; element like so:&lt;br&gt;
&lt;code&gt;&amp;lt;input onCHange={inputTextHandler}&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Each time our input changes, this function is being ran. The event tells [us] information about what just happened on this input.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Console logging &lt;code&gt;e.target&lt;/code&gt; gives us the input element itself, and logging &lt;code&gt;e.target.value&lt;/code&gt; prints out exactly what we we enter into the input box, nothing more and nothing less. Great success!&lt;/p&gt;

&lt;p&gt;Next, what we do is change the aforementioned state's &lt;code&gt;value&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#appjs-passing-down-raw-setinputtext-endraw-as-a-prop"&gt;
  &lt;/a&gt;
  App.js - Passing down &lt;code&gt;setInputText()&lt;/code&gt; as a prop
&lt;/h2&gt;

&lt;p&gt;This will be the function that updates the input text. As Ed says, the &lt;code&gt;inputText&lt;/code&gt; value will be like "our data/variable that we want to inject". We are then able to access these items by heading back into the Form.js file and passing props as a parameter into our Form component like as you see below:&lt;br&gt;
&lt;code&gt;const Form = (props) =&amp;gt; { ... }&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-quick-aside-destructuring-props"&gt;
  &lt;/a&gt;
  A Quick Aside - Destructuring props
&lt;/h3&gt;

&lt;p&gt;Destructuring Props is a simple concept, but it takes some time getting used to. Overall this makes our code more readable and clear, especially when passing down props in React. More on this can be read &lt;a href="https://medium.com/@lcriswell/destructuring-props-in-react-b1c295005ce0"&gt;here in a very straightforward Medium article!&lt;/a&gt;. Doing this in our Form component allows us to write code that looks more like this:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const Form = ({ setInputText }) =&amp;gt; {&lt;br&gt;
  setInputText(e.target.value); &lt;br&gt;
}&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Having state in App.js allows us to use it anywhere in our application. Per Ed,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every piece of state that you have, data and React automatically updates to everything (as long as you use it in different places), ... and renders it out for us.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-aside-react-developer-tools"&gt;
  &lt;/a&gt;
  A Quick Aside - React Developer Tools
&lt;/h3&gt;

&lt;p&gt;This is a great Chrome extension for the ReactJS library, which allows you to inspect the React component hierarchies in the Chrome Developer Tools. &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"&gt;More information on this can be found here!&lt;/a&gt; This is great for seeing our state and props, just by hovering of them in DevTools. This includes other data such as hooks!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appjs-coding-a-todos-state"&gt;
  &lt;/a&gt;
  App.js - Coding a todos &lt;em&gt;state&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;As implied, this state will be for coding our Todos. Since we will be storing an array of objects (a collection/list of items), Ed instructs us to use an empty array in our hook:&lt;br&gt;
&lt;code&gt;const [todos, setTodos] = useState([]);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next goal is to submit data and create an object when we do so. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#formjs-creating-raw-submittodohandler-endraw-"&gt;
  &lt;/a&gt;
  Form.js - Creating &lt;code&gt;submitTodoHandler&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This function also takes an event argument as a parameter. We begin this function by tackling the issue of the browser window refreshing each time the submit-type &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; is clicked, which is a natural out-of-the-box behavior. Fixing this is super easy:&lt;br&gt;
&lt;code&gt;e.preventDefault();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, the page refreshing will not be prevented until we add the event handler function via JSX into our &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; attributes:&lt;br&gt;
&lt;code&gt;&amp;lt;button onClick={submitTodoHandler}&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-aside-jsx"&gt;
  &lt;/a&gt;
  A Quick Aside - JSX
&lt;/h3&gt;

&lt;p&gt;JavaScript XML (JSX) syntax is an extension to the JavaScript language syntax. Their tags have a name, attributes, and children. It transpiles to pure JS. It uses camelCase as a property naming convention, hence such attributes as &lt;code&gt;onClick&lt;/code&gt; and &lt;code&gt;className&lt;/code&gt;. An example of this information can be viewed &lt;a href="https://www.youtube.com/watch?v=7fPXI_MnBOY&amp;amp;t=5s"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Understanding this syntax will help out a lot, in case you run into any confusion during this tutorial. What we are doing above is passing our event handler function &lt;code&gt;submitTodoHandler&lt;/code&gt; without the parentheses into our component. I could be mistaken, but based off Googling I believe we are binding our function to the component, so that our context remains the same even though we are passing our function from one object to another, and are doing so from JavaScript syntax to JSX syntax. Our event handlers are passed as properties.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default you can't access properties, state and component methods like setState from event handlers. To do so, you need to bind them explicitly. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I could be wrong about my interpretation of this. However, the reason why I brought this up is so you, the reader, spent some time understanding that if your event handler is not passed into wherever you use it, it won't work simply by declaring the function above the return value. More information on what I've read can be found &lt;a href="https://reactkungfu.com/2015/07/why-and-how-to-bind-methods-in-your-react-component-classes/"&gt;here, albeit a little outdated&lt;/a&gt;, and here in the &lt;a href="https://reactjs.org/docs/faq-functions.html"&gt;React documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Service Reliability Math That Every Engineer Should Know</title>
      <author>mrick</author>
      <pubDate>Sun, 13 Jun 2021 19:52:19 +0000</pubDate>
      <link>https://dev.to/mrick/service-reliability-math-that-every-engineer-should-know-afg</link>
      <guid>https://dev.to/mrick/service-reliability-math-that-every-engineer-should-know-afg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wgFiKu7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/311mw93ltrjizvstm43i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wgFiKu7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/311mw93ltrjizvstm43i.png" alt="Screen Shot 2021-06-09 at 9.50.37 AM"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>devops</category>
      <category>codenewbie</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to use Database Sharding and Scale an  ASP.NET Core Microservice Architecture</title>
      <author>Christian Zink</author>
      <pubDate>Sun, 13 Jun 2021 19:37:25 +0000</pubDate>
      <link>https://dev.to/christianzink/how-to-use-database-sharding-and-scale-an-asp-net-core-microservice-architecture-5h5l</link>
      <guid>https://dev.to/christianzink/how-to-use-database-sharding-and-scale-an-asp-net-core-microservice-architecture-5h5l</guid>
      <description>&lt;p&gt;Load Balance a C# ASP.NET Core Service and Use MySql App-Layer Sharding. Shows the Concepts, Which Also Apply to MongoDB, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVNrTWC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AqfNgu11fAZHUkZeohvUzzA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVNrTWC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AqfNgu11fAZHUkZeohvUzzA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the &lt;strong&gt;big advantages of microservices&lt;/strong&gt; is, that they can be &lt;strong&gt;scaled independently&lt;/strong&gt;. This article shows the &lt;strong&gt;benefits and challenges of scaling&lt;/strong&gt; one &lt;strong&gt;microservice and its database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You will create a &lt;strong&gt;working example application&lt;/strong&gt; and manually &lt;strong&gt;implement application-layer sharding&lt;/strong&gt;. It shows how to &lt;strong&gt;choose a shard key&lt;/strong&gt; based on the use-cases and data model. This helps to apply the same principles to DBMS with integrated scaling like MongoDB, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Further reading: &lt;a href="https://dev.to/alex_barashkov/microservices-vs-monolith-architecture-4l1m"&gt;Microservices vs. Monolith Architecture&lt;/a&gt; and &lt;a href="https://dev.to/renaissanceengineer/database-sharding-explained-2021-database-scaling-tutorial-5cej"&gt;Database Sharding Explained- 2021 Database Scaling Tutorial&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the first of two parts. You will implement the microservice and use a sharded DB.&lt;/p&gt;

&lt;p&gt;In the second part, you will scale and run multiple container instances of the microservice and databases. You will use docker compose and a load balancer. Finally, you run JMeter load tests to see how the application scales when using a different number of instances.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-usecases-and-datamodell"&gt;
  &lt;/a&gt;
  1. Usecases and Datamodell
&lt;/h2&gt;

&lt;p&gt;The example application consists of a &lt;strong&gt;user and a post microservice&lt;/strong&gt;. They &lt;strong&gt;communicate via messages&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ixHPzMWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ADN2QzWP1oFpvFM0fh9gKrQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ixHPzMWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ADN2QzWP1oFpvFM0fh9gKrQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See also my previous article &lt;a href="https://dev.to/christianzink/how-to-build-an-event-driven-asp-net-core-microservice-architecture-4fnh"&gt;How to Build an Event-Driven ASP.NET Core Microservice Architecture&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;User&lt;/em&gt; microservice handles adding and modifying users. The &lt;em&gt;Post&lt;/em&gt; microservices handles viewing and adding posts. There is far more interaction with the &lt;em&gt;Post&lt;/em&gt; microservice. So when the load to the app increases &lt;strong&gt;the &lt;em&gt;Post&lt;/em&gt; microservice will be the first microservice that needs to scale&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The name of the author is part of the &lt;em&gt;PostService&lt;/em&gt; bounded context and therefore the &lt;em&gt;Post&lt;/em&gt; microservice. Adding and modifying authors is done in the &lt;em&gt;User&lt;/em&gt; microservice. The &lt;em&gt;User&lt;/em&gt; microservice sends events when a new user is added or a username changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logical-data-model-of-the-postservice"&gt;
  &lt;/a&gt;
  Logical Data Model of the &lt;em&gt;PostService&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pbHqcnBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AN-i4KoRko3WrIakewYLykQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pbHqcnBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AN-i4KoRko3WrIakewYLykQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Users can write posts in categories. They can also read the posts by category including the author name. Newest posts are on top. The categories are fixed and change seldom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Based on these use-cases I decided to shard by category:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y91ALsWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2056/1%2AvBwiakd1uV_MnOKckNe-8A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y91ALsWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2056/1%2AvBwiakd1uV_MnOKckNe-8A.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-implement-the-microservice"&gt;
  &lt;/a&gt;
  2. Implement the Microservice
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Install &lt;a href="https://visualstudio.microsoft.com/en/vs/community/"&gt;Visual Studio Community&lt;/a&gt;&lt;/strong&gt; (it’s free) with the ASP.NET and web development workload.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a solution&lt;/strong&gt; and add an ASP.NET Core 5 Web API project with the name “&lt;em&gt;PostService&lt;/em&gt;”. Disable HTTPS and activate OpenAPI Support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install the following NuGet packages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Microsoft.EntityFrameworkCore.Tools&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Microsoft.EntityFrameworkCore.Sqlite&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Newtonsoft.Json&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create the Entities&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The index of the &lt;em&gt;Post&lt;/em&gt; entity should speed up the retrieval of the latest posts in a category:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The Version in the &lt;em&gt;User&lt;/em&gt; entity will later help to handle out-of-order messages:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Create the PostServiceContext&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Add connection strings for the shards in appsettings.Development.json&lt;/strong&gt; (you will use two shards during debugging)&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Add the &lt;em&gt;DataAccess&lt;/em&gt; Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GetConnectionString(string category)&lt;/code&gt; calculates the hash of the CategoryId. The first part of the hash modulo the number of configured shards (connection strings) determines the shard for the given category.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;InitDatabase&lt;/em&gt; drops and recreates all tables in all shards and inserts dummy users and categories.&lt;/p&gt;

&lt;p&gt;The other methods create and load posts.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Register DataAccess as a singleton in Startup.cs&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Create the PostController&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It uses the &lt;em&gt;DataAccess&lt;/em&gt; class&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-access-a-database-from-the-postservice"&gt;
  &lt;/a&gt;
  3. Access a Database from the PostService
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Install &lt;a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows"&gt;Docker Desktop&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create two MySql Containers (each command as one line)&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\dev&amp;gt;docker run -p 3310:3306 --name=mysql1 -e MYSQL_ROOT_PASSWORD=pw -d mysql:5.6

C:\dev&amp;gt;docker run -p 3311:3306 --name=mysql2 -e MYSQL_ROOT_PASSWORD=pw -d mysql:5.6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Start the &lt;em&gt;Post&lt;/em&gt; service in Visual Studio. The browser opens at &lt;a href="http://localhost:5001/swagger/index.html"&gt;http://localhost:5001/swagger/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use the swagger UI to interact with the service:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Init the Databases with 100 users and 10 categories:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GloZxkU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AfBl-wzNlTuKb9U2O9eJuPA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GloZxkU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AfBl-wzNlTuKb9U2O9eJuPA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add a post to “Category1”:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "title": "MyTitle",
  "content": "MyContent",
  "userId": 1,
  "categoryId": "Category1"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Read the top 10 posts&lt;/strong&gt; in “Category1” to see your new post:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rRfhKU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AqrfNkc28IBcL-Lp7Qg3ONQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rRfhKU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AqrfNkc28IBcL-Lp7Qg3ONQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect to the database containers and &lt;strong&gt;verify which database contains the new post&lt;/strong&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\dev&amp;gt;docker container exec -it mysql1 /bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Login to MySql with the password “pw” and read the posts:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OryUVK1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Adi3f8KF_WZBu0NY59Mno8w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OryUVK1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Adi3f8KF_WZBu0NY59Mno8w.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second instance does not contain any post:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\dev&amp;gt;docker container exec -it mysql2 /bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oWVBYumc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AGVUXZpvsfZIjDcSTr8JM2Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oWVBYumc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AGVUXZpvsfZIjDcSTr8JM2Q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-final-thoughts-and-outlook"&gt;
  &lt;/a&gt;
  4. Final Thoughts and Outlook
&lt;/h2&gt;

&lt;p&gt;You created a &lt;strong&gt;working application and implemented application-layer sharding&lt;/strong&gt; and used the concept of shard keys.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;second part&lt;/strong&gt;, you will &lt;strong&gt;scale&lt;/strong&gt; and &lt;strong&gt;run multiple container instances&lt;/strong&gt; of the microservice and database. You will use &lt;strong&gt;docker compose&lt;/strong&gt; and a &lt;strong&gt;load balancer&lt;/strong&gt;. You will then run &lt;strong&gt;JMeter load tests&lt;/strong&gt; to see how the application scales when using a different number of instances. Finally, you will &lt;strong&gt;simulate user events&lt;/strong&gt; from the &lt;em&gt;User&lt;/em&gt; microservice via &lt;strong&gt;RabbitMQ&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please contact me if you have any questions, ideas, or suggestions.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>architecture</category>
      <category>dotnet</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why it's not worth setting up a server yourself - even to save money</title>
      <author>Erik Karlsson</author>
      <pubDate>Sun, 13 Jun 2021 19:32:17 +0000</pubDate>
      <link>https://dev.to/erikkarlsson/why-it-s-not-worth-setting-up-a-server-yourself-even-to-save-money-3ag9</link>
      <guid>https://dev.to/erikkarlsson/why-it-s-not-worth-setting-up-a-server-yourself-even-to-save-money-3ag9</guid>
      <description>&lt;p&gt;&lt;strong&gt;I recently made myself a pretty portfolio page in React. Now it was time to set up a server to host it. After some &lt;a href="https://www.youtube.com/watch?v=QdHvS0D1zAI"&gt;inspiration&lt;/a&gt; I went on a journey to set it up via Raspberry Pi. This felt like the truest way. Not gonna use some pesky easy-hosting on some GoDaddy-site, it was time to do it the real way.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So I ordered&lt;/strong&gt; a sweet &lt;em&gt;rpi 4 2gb&lt;/em&gt; starter kit, and I felt like a child on christmas. I was actually stuck with Windows on my Surface Laptop, for which there are no keyboard/mouse drivers for Linux -&amp;gt; so it was very nice to finally work in a GNU/Linux environment again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After I received&lt;/strong&gt; my Pi, I went through the jazz - downloaded everything I needed and - bear with me if you've not done this before, but I: set up a proxy to my localhost/npm-build in nginx, did port-forwarding in my router and set up the DNS records to point to my ip, together with a dynamic DNS service on CloudFlare to continously update my IP when it changes (sorry, no static IP unless you have a business account my ISP told me). This took some time, but it was a learning experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I also set up&lt;/strong&gt; docker + docker compose for nginx proxy manager, a well-recommended admin tool that manages your nginx projects for you and does a free SSL for you called Let's Encrypt. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then it hit me.&lt;/strong&gt; I couldn't log in to the admin panel I just docker-composed. Somehow, it was a bad gateway (?). A big mystery, of which many other people had the exact same issue, and everyone had a different solution, if they had any. Some needed to change a tiny thing, like which DBMS they use, or a big thing, and some just neeeded to wait 10 minutes, or a day, and then it suddenly worked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I literary spent&lt;/strong&gt; the next 10 hours on this, seemingly tiny issue, to simply gain access to my own Admin Panel. It so happened that the documentation on the official site was incorrect for raspberry pies, and there actually was &lt;a href="https://dbtechreviews.com/2020/06/install-nginx-proxy-manager-on-a-raspberry-pi-4/"&gt;a proper way&lt;/a&gt; to do it for my tiny device. Well, I followed this excellent guide to the tea. I tried to log in to the admin panel again. Bad gateway.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ICmPThep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77aq0f1hjtkop79wuzkc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ICmPThep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77aq0f1hjtkop79wuzkc.jpg" alt="This is how I felt in that moment."&gt;&lt;/a&gt;&lt;br&gt;
(How I felt in that moment)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I knew if&lt;/strong&gt; I really put my head down, and tried harder, it would work at some point.  But, the thought came to me, I haven't used my free 1 year trial at Amazon Web Services. Why not give it a quick try?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So I created&lt;/strong&gt; an account, set up AWS Amplify, and connected my github repository. Then I changed some things in the DNS records to connect it to the server and voilá. AWS did all the work for me, and automatically set up SSL, continous integration/delivery whenever I pushed to my main repository, and handling all the load balancing and DDoS protection for me. I didn't even have to lift a finger more than a couple times. And now it's up and running. For free. At least for a year...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now, question, what should I do with my raspberry pi now?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>raspberrypi</category>
      <category>aws</category>
      <category>nginx</category>
      <category>react</category>
    </item>
    <item>
      <title>Understanding async and await in javascript</title>
      <author>Avinash Kr</author>
      <pubDate>Sun, 13 Jun 2021 19:26:05 +0000</pubDate>
      <link>https://dev.to/aviiwithu/understanding-async-and-await-in-javascript-4fka</link>
      <guid>https://dev.to/aviiwithu/understanding-async-and-await-in-javascript-4fka</guid>
      <description>&lt;p&gt;Async await is another way of handling promises in JavaScript.&lt;br&gt;
One of the main advantage of using it is clean code.&lt;/p&gt;

&lt;p&gt;In this article we will understand with examples and use cases.&lt;/p&gt;

&lt;p&gt;In general, we use .then().catch() to handle promises:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's handle it using async await&lt;/p&gt;

&lt;p&gt;We can write using function statement or function expression. Both will be valid, only difference is use of anonymous function in function expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//function statement&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//function expression&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Please keep in mind that we are not handling with error in the above code, the value of response will only be return when operation is success.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-we-handle-error-in-async-await-"&gt;
  &lt;/a&gt;
  HOW CAN WE HANDLE ERROR IN ASYNC AWAIT ??
&lt;/h2&gt;

&lt;p&gt;To handle error in async await, we can use 'try and catch'&lt;/p&gt;

&lt;p&gt;Look at the code below for the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;something went wrong in getting post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-handle-multiple-promises-using-async-await-"&gt;
  &lt;/a&gt;
  HOW TO HANDLE MULTIPLE PROMISES USING ASYNC AWAIT ??
&lt;/h2&gt;

&lt;p&gt;suppose we have to fetch user, post and comment in async await.&lt;/p&gt;

&lt;p&gt;Look at the code below and guess how will it work&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/posts/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/comments/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userRes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;userRes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

           &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postRes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;postRes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

           &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;commentRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;commentData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;commentRes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;In the above line of code javascript will wait on every line to complete its work, then move to next line. In simple words it will first fetch user, once its is completed, js will fetch post, then comment. Javascript will work synchronously.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-we-make-multiple-fetch-requests-at-the-same-time"&gt;
  &lt;/a&gt;
  CAN WE MAKE MULTIPLE FETCH REQUESTS AT THE SAME TIME??
&lt;/h2&gt;

&lt;p&gt;We can fetch multiple at the same time, every request will be made independently or it will not block other request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)]);&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;allRes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;promise not fulfilled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;In above code, every request will be made in parallel, and value will be returned once resolved, in case of error code in catch will run.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I hope it might helped you to get idea of how to use async await in javascript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
