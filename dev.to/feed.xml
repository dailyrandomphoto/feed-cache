<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The ONE star rating system — the future of rating</title>
      <author>Temani Afif</author>
      <pubDate>Tue, 06 Jul 2021 20:42:12 +0000</pubDate>
      <link>https://dev.to/afif/the-one-star-rating-system-the-future-of-rating-4jl8</link>
      <guid>https://dev.to/afif/the-one-star-rating-system-the-future-of-rating-4jl8</guid>
      <description>&lt;p&gt;Recently, a lot of folks tried their best to provide star rating system. Now it's time to bring THE "star rating" that will change the world!&lt;/p&gt;

&lt;p&gt;I called it: &lt;strong&gt;The ONE star rating&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;sup&gt;Click here if you want to catch with the previous episodes before continuing&lt;/sup&gt;
  
&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/5-star-rating-system-actually-accessible-no-js-no-wai-aria-3idl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 star rating system - ACTUALLY accessible, no JS, no WAI-ARIA and Semantic HTML! ⭐⭐⭐⭐⭐ [Easily converted to any framework too!]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Jul 2 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/lapstjup" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mmOMY4PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CrJ-tBeD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366670/7c384675-c0ae-4190-85c5-6de6cc849d34.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mmOMY4PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CrJ-tBeD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366670/7c384675-c0ae-4190-85c5-6de6cc849d34.jpg" alt="lapstjup"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lapstjup/implementing-a-star-rating-component-in-vanilla-js-20ob" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Implementing a Star Rating component in Vanilla JS&lt;/h2&gt;
      &lt;h3&gt;Lakshya Thakur ・ Jul 2 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#uiweekly&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/madsstoumann" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JoLwOpQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S8Kp4bXC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/515396/61d796b8-f5ce-468b-8cb5-808b2bbb9279.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoLwOpQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S8Kp4bXC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/515396/61d796b8-f5ce-468b-8cb5-808b2bbb9279.jpeg" alt="madsstoumann"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/madsstoumann/star-rating-using-a-single-input-i0l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Star-Rating Using A Single Input&lt;/h2&gt;
      &lt;h3&gt;Mads Stoumann ・ Jul 3 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/scalable-star-rating-without-js-and-no-svg-or-image-for-the-star-2mef" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Scalable "star rating" without JS (and no SVG or image for the star)&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Jul 4 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/link2twenty" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZ83AbfI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mkPwwGe8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/21408/a5b38912-48cb-4f18-b6b2-40da7956d41d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZ83AbfI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mkPwwGe8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/21408/a5b38912-48cb-4f18-b6b2-40da7956d41d.png" alt="link2twenty"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/link2twenty/star-rating-using-unicode-stars-3np2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Star-rating using Unicode stars&lt;/h2&gt;
      &lt;h3&gt;Andrew Bone ・ Jul 5 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/star-rating-wars-the-madsafif-menice-an-even-better-star-rating-system-and-a-comparison-3pg5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Star[Rating] Wars - The MadsAfif Menice [An even better star rating system and a comparison]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Jul 5 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/siddharthshyniben" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--icTFgNop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--s_1gOp8_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/606915/bc777ec0-126a-4a76-afa2-f8e27c1badb0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icTFgNop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--s_1gOp8_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/606915/bc777ec0-126a-4a76-afa2-f8e27c1badb0.jpeg" alt="siddharthshyniben"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/siddharthshyniben/star-rating-in-the-terminal-12np" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Star rating in the Terminal&lt;/h2&gt;
      &lt;h3&gt;Siddharth ・ Jul 6 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;Why having multiple stars when we can do the job with only one star? A unique star that can hold all the information. Let's think outside of the box and build the future of rating systems.&lt;/p&gt;

&lt;p&gt;See it in play:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/KKmVjZq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks to my geometry superpower, I divided the star into 5 parts and the number of selected parts will define the rating. So we have our 1 to 5 rating system with only one star!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-this-system-will-beat-all-the-others"&gt;
  &lt;/a&gt;
  Why this system will beat all the others?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;It's compact&lt;/strong&gt;: All the information hold in a small space. The space needed for one star.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's outstanding&lt;/strong&gt;: Everyone is getting bored with the old school star rating. This one will impress your visitors and they will want to rate you with a 5/5!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;rtl&lt;/code&gt; or &lt;code&gt;ltr&lt;/code&gt; ??&lt;/strong&gt;: stop thinking about that. We no more have a straight direction but a circular one. Do we have direction with clocks? no we don't! Same thing here, it's a universal circular direction.&lt;/p&gt;

&lt;p&gt;And let's not forget all the other advantages:&lt;/p&gt;

&lt;p&gt;✔️ No JavaScript.&lt;br&gt;
✔️ No complex HTML code.&lt;br&gt;
✔️ A small CSS code.&lt;br&gt;
✔️ No SVG, No images.&lt;br&gt;
✔️ Works with keyboard navigation.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;I kept the same HTML code of my previous implementation. The inputs and one extra element.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/scalable-star-rating-without-js-and-no-svg-or-image-for-the-star-2mef" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Scalable "star rating" without JS (and no SVG or image for the star)&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Jul 4 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I first start by placing all the inputs (and the extra element) above each other inside a square element.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The square is defined using a fixed width and a ratio (you can also set the height equal to width)&lt;/li&gt;
&lt;li&gt;Thanks to &lt;code&gt;grid-area:1/1&lt;/code&gt;, I can have all the elements above each other without the need of using &lt;code&gt;position:absolute&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;I add &lt;code&gt;width:100%;height:100%&lt;/code&gt; to the inputs so they cover the whole area and I make them invisible (but still interactive)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, I create the star shape using the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; element and &lt;code&gt;clip-path&lt;/code&gt;. That shape will have 3 background layers&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The bottom one that cover all the star (the grey coloration)&lt;/li&gt;
&lt;li&gt;The gold middle layer that will define the selected parts. For this I will use a &lt;code&gt;conic-gradient&lt;/code&gt; with a &lt;code&gt;72deg&lt;/code&gt; step (&lt;code&gt;360deg/5&lt;/code&gt;) controlled with the variable &lt;code&gt;--p&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The top layer similar to (2) with a semi transparent color and controlled with the variable &lt;code&gt;--l&lt;/code&gt;. Yes, this one will respond to the hover effect.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now the real trick is the position and shape of our inputs.&lt;/p&gt;

&lt;p&gt;Each one is clipped to the top part of the star like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZDHGo1Wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcpxb4pjoqa8gqfagrjt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZDHGo1Wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcpxb4pjoqa8gqfagrjt.png" alt="Star clip path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this step all of them will define the same part of our star. We have to rotate them so each one will get on the top of a different part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.stars&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;72deg&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="nc"&gt;.stars&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;144deg&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="nc"&gt;.stars&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;216deg&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="nc"&gt;.stars&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;288deg&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now each input is placed on the top of one part of the star and clipped to that part.&lt;/p&gt;

&lt;p&gt;I think everyone know the rest of the story. On &lt;code&gt;:hover&lt;/code&gt; or &lt;code&gt;:checked&lt;/code&gt; I change the variables I described previously and we have our ONE star rating.&lt;/p&gt;

&lt;p&gt;That's it! With a simple code, we get an innovative star rating. You can easily adjust the size, the circular direction and it does work with default values:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/RwVaWyb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Snake Bugs Animation (click to the attract the snake bugs)</title>
      <author>FRADAR</author>
      <pubDate>Tue, 06 Jul 2021 20:10:30 +0000</pubDate>
      <link>https://dev.to/fradar/snake-bugs-animation-click-to-the-attract-the-snake-bugs-16ch</link>
      <guid>https://dev.to/fradar/snake-bugs-animation-click-to-the-attract-the-snake-bugs-16ch</guid>
      <description>&lt;p&gt;These snake bugs don't like to be near each other... unless you hold down your mouse.&lt;/p&gt;

&lt;p&gt;A small fun animation I created in my free time.&lt;/p&gt;

&lt;p&gt;When the snake bug thingies come very near, they turn red and move away. That does not happen when you hold down your mouse, though.&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/qBmWgVW"&gt;https://codepen.io/FRADAR/full/qBmWgVW&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like it? Wanna see more?&lt;/p&gt;

&lt;p&gt;Follow me here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>showdev</category>
      <category>gamedev</category>
      <category>animation</category>
    </item>
    <item>
      <title>The Best Garbage Collection for JMeter</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Tue, 06 Jul 2021 20:08:16 +0000</pubDate>
      <link>https://dev.to/qainsights/the-best-garbage-collection-for-jmeter-99h</link>
      <guid>https://dev.to/qainsights/the-best-garbage-collection-for-jmeter-99h</guid>
      <description>&lt;p&gt;The Best Garbage Collection for JMeter: Automated memory management is one of the core features of Java. By default, JMeter uses the G1GC algorithm to clean up the unreferenced objects in the heap. GC algorithms have been evolving for the past many years. In this blog article, I have done some experiments using the various GCs in JMeter to identify which GC algorithm yields us more threads to run in a bare metal medium powered laptop.&lt;/p&gt;

&lt;p&gt;Before getting started, I am sure that some of you may not agree with the environment setup to validate the GC, base lining the maximum number of threads using the load model etc. If you are not satisfied with this setup, please share your comments so that I can learn along with you.&lt;/p&gt;

&lt;p&gt;I am not going to bore you with the formula to come up with the maximum number of threads that we can inject. Instead, let us focus on the experiment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/QAInsights/Best-Garbage-Collection-for-JMeter" rel="noreferrer noopener"&gt;This experiment's GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="h-back-to-basics"&gt;Back to basics&lt;/h1&gt;

&lt;h2 id="h-what-is-garbage-collection"&gt;What is Garbage Collection?&lt;/h2&gt;

&lt;p&gt;In Java, everything is an object. Object needs a place to live and it will be huge. When you start the Java application, your Java Virtual Machine creates new objects in the Young Generation which is expected to be short- lived. But sometimes, objects will live longer and takes up the heap space. &lt;/p&gt;

&lt;p&gt;The longer the object lives, it is likely to become garbage collected in the Old Generation. Watch the phrase, &lt;em&gt;it is likely&lt;/em&gt;. JVM may clean up the unreferenced object or it may not. It is up to JVM’s decision.&lt;/p&gt;

&lt;p&gt;So, what is an unreferenced object? If the object has a reference in the stack memory, then it will not be garbage collected. Else, it might be garbage collected.&lt;/p&gt;

&lt;p&gt;Above example is from the G1GC perspective, at least at a high level. If you want to learn more, please check my &lt;a href="https://youtube.com/playlist?list=PLJ9A48W0kpRJ6Za-PG87scNCJp7kFgW2g" rel="noreferrer noopener"&gt;Performance Engineers&lt;/a&gt; playlist on YouTube.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/BWGxFcgQcYc"&gt;https://youtu.be/BWGxFcgQcYc&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="h-types-of-garbage-collectors"&gt;Types of Garbage Collectors&lt;/h2&gt;

&lt;p&gt;Without deep diving into the GC algorithms, let us see the high-level overview about the following types of Garbage Collectors in Java. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serial Garbage Collector&lt;/li&gt;
&lt;li&gt;Parallel Garbage Collector&lt;/li&gt;
&lt;li&gt;CMS Garbage Collector&lt;/li&gt;
&lt;li&gt;G1 Garbage Collector&lt;/li&gt;
&lt;li&gt;Epsilon Garbage Collector&lt;/li&gt;
&lt;li&gt;Z Garbage Collector&lt;/li&gt;
&lt;li&gt;Shenandoah Garbage Collector&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this experiment, I did multiples execution using commonly used GC algorithms namely: G1GC, Z GC, and Shenandoah GC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serial GC&lt;/strong&gt; is one of the simplest GC algorithms. It uses single thread to carry out the GC activity. It is not ideal for multi-threaded application like JMeter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parallel GC&lt;/strong&gt; uses multiple threads to carry out the GC activity, but it injects the pauses while doing the GC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CMS (Concurrent Mark Sweep) GC &lt;/strong&gt;is deprecated algorithm in Java where it marks the referenced object and sweeps the remaining. It needs more CPU to achieve more throughput. Since it is deprecated, I have not included this GC for the experiment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Epsilon GC&lt;/strong&gt; is a passive GC. Meaning, it will not perform any GC. Once the heap is full. It just terminates the application. It is useful to baseline the configuration and for testing your application. Hence, I am not using Epsilon GC in this experiment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/Epsilon.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wfUqgbK3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/Epsilon.jpg" alt="Epsilon GC - Meme by NaveenKumar"&gt;&lt;/a&gt;Epsilon GC - Meme by NaveenKumar&lt;/p&gt;

&lt;p&gt;For more memes, please check &lt;a href="https://qainsights.github.io/Testing-Jokes-Memes/" rel="noreferrer noopener"&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;G1GC (Garbage First Garbage Collector)&lt;/strong&gt; is one of the commonly used GC algorithms in Java and it is the default GC in Java 11. It separated heaps into multiple regions as I mentioned above and carry out the GC activity efficiently. G1GC is performant than CMS GC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ZGC&lt;/strong&gt; yields less than 10ms GC time. It performs all the expensive work concurrently. ZGC yielded surprising results in this experiment. It works well with the large volume of heaps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shenandoah GC&lt;/strong&gt; is from Red Hat team which the low pause time garbage collector that reduces GC pause times by performing more garbage collection work concurrently with the running Java application. Whether your heap size is 200 GB or 2 GB, the semantics is identical.&lt;/p&gt;

&lt;h1 id="h-experiment-setup"&gt;Experiment Setup&lt;/h1&gt;

&lt;p&gt;I have not used Docker setup to run these tests. I want to measure the performance of each GC for JMeter in a bare metal machine. My laptop is at least six years old. But it is running, great apart from fan speed.&lt;/p&gt;

&lt;p&gt;Below is the system configuration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OS Name: Microsoft Windows 10 Pro&lt;/li&gt;
&lt;li&gt;System Model: Inspiron 15-7579&lt;/li&gt;
&lt;li&gt;System Type:  x64-based PC&lt;/li&gt;
&lt;li&gt;Processor: Intel(R) Core (TM) i7-7500U CPU @ 2.70GHz, 2901 Mhz, 2 Core(s), 4 Logical Processor(s)&lt;/li&gt;
&lt;li&gt;Installed Physical Memory (RAM): 16.0 GB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java and JMeter versions are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java version for G1GC and Shenandoah is Java 11.&lt;ul&gt;&lt;li&gt;AdoptOpenJDK with Hotspot JVM&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java version for ZGC is Java 16.&lt;ul&gt;&lt;li&gt;AdoptOpenJDK with Hotspot JVM&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JMeter 5.4.1&lt;ul&gt;&lt;li&gt;No JMeter plugins&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Max heap size allocated is 4 GB for all the experiments.&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demo application set up:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Jetty 9.4.38.v20210224 hitting sample demo application at localhost:8080.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;JMeter Test Plan&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Total number of HTTP Samplers: 8&lt;/li&gt;
&lt;li&gt;Constant Timer of 300 milliseconds&lt;/li&gt;
&lt;li&gt;Total Bytes for all the requests: 894.388 Kilobyte&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before I started the experiments, I have closed all the resource consuming programs such as Vivaldi browser, MS Outlook, One Drive, Docker, MS Office programs, recording software, and more.&lt;/p&gt;

&lt;p&gt;I have kept only the following programs open:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two terminal sessions - to run Jetty application and JMeter in CLI mode.&lt;/li&gt;
&lt;li&gt;Notepad – to take notes.&lt;/li&gt;
&lt;li&gt;Snagit – to capture the screenshots.&lt;/li&gt;
&lt;li&gt;Task Manager – to view the CPU and Memory trends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, there will be background processes running e.g., Anti-virus, daemon apps etc. I cannot kill those.&lt;/p&gt;

&lt;p&gt;Following are the assumptions we can make:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;50% of RAM i.e., 8 GB is for Operating System&lt;/li&gt;
&lt;li&gt;4 GB is allocated to JMeter which is consistent across the multiple runs.&lt;ul&gt;&lt;li&gt;1 GB might be allocated for the daemon threads.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;We are making use of 3 GB of RAM slice.&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remaining might be consumed by Jetty app.&lt;/li&gt;
&lt;li&gt;No network overhead as we are using locally hosted app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From JMeter perspective, there is no resource consuming elements in the test plan.&lt;/p&gt;

&lt;p&gt;Also, after each run, I gave some breath time for my system, so that it can come back to normal utilization.&lt;/p&gt;

&lt;h2 id="h-how-to-change-the-heap-size-in-jmeter"&gt;How to change the heap size in JMeter?&lt;/h2&gt;

&lt;p&gt;Open jmeter.bat in your favorite editor and edit the line which has &lt;code&gt;SET HEAP&lt;/code&gt; and configure the heap size to 4g e.g. &lt;code&gt;set HEAP=-Xms4g -Xmx4g -XX:MaxMetaspaceSize=256m&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="h-the-best-garbage-collection-for-jmeter-experiment"&gt;The Best Garbage Collection for JMeter Experiment&lt;/h2&gt;

&lt;h2 id="h-g1gc"&gt;G1GC&lt;/h2&gt;

&lt;p&gt;I started my experiment with G1GC as it is the default GC in Java 11 and with 5000 threads with a ramp up of 300 seconds. I am aware that this number is high considering my system configuration. But surprisingly it performed well.&lt;/p&gt;

&lt;p&gt;Throughout this experiment I am focusing only on the number of threads that JMeter can inject.  Jetty will throw high response time eventually. The response time, number of failed transactions, and other parameters are secondary for this experiment. But in your actual project, you need to consider all the parameters.&lt;/p&gt;

&lt;p&gt;Below is the 5000 threads – G1GC screenshot. It is a clean run. For every run, I terminated the execution after few minutes of ramp up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/G1GC-5000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--frdJgQPM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/G1GC-5000-1024x624.jpg" alt="G1GC - 5000 Threads"&gt;&lt;/a&gt;G1GC - 5000 Threads&lt;/p&gt;

&lt;p&gt;Next run I injected 7000 threads which is also performed well. But it 10000 threads run, I started seeing failures as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/G1GC-10000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgahaTII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/G1GC-10000-1024x656.jpg" alt="Garbage Collection for JMeter - G1GC - 7000 Threads"&gt;&lt;/a&gt;G1GC - 7000 Threads&lt;/p&gt;

&lt;p&gt;In 12000 and 15000 threads run as well, the trend persisted. After these runs, I injected 25000 because of over confidence. But surprisingly, 20809&lt;sup&gt;th&lt;/sup&gt; thread JMeter threw Out of Memory (heap space) error. To know more about this error, please check my YouTube tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/G1GC-25000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTInGwLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/G1GC-25000.jpg" alt="G1GC - 25000 Threads"&gt;&lt;/a&gt;G1GC - 25000 Threads&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/6gkCnhcohe4"&gt;https://youtu.be/6gkCnhcohe4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/eZIArJEkwjo"&gt;https://youtu.be/eZIArJEkwjo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I repeated the same run, the outcome is similar.&lt;/p&gt;

&lt;p&gt;Let us conclude G1GC experiment stating that JMeter could inject around 20000 threads in my system configuration.&lt;/p&gt;

&lt;h2 id="h-shenandoah-gc"&gt;Shenandoah GC&lt;/h2&gt;

&lt;p&gt;To change the GC algo in JMeter, open jmeter.bat and add the below in ` set GC_ALGO` line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-XX:+UseShenandoahGC&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As we know, Shenandoah GC should perform better than G1GC. Let us see the Shenandoah GC results. I started my first test with the over confidence by injecting 20000 threads. Shenandoah GC handled well. Here is the screenshot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/SD-20000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBZXpkJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/SD-20000-1024x487.jpg" alt="Garbage Collection for JMeter - Shenandoah - 20000 Threads"&gt;&lt;/a&gt;Shenandoah - 20000 Threads&lt;/p&gt;

&lt;p&gt;Then, I increased the thread count to 25000. It broke at 21439&lt;sup&gt;th&lt;/sup&gt; thread with heap space out of memory error. If you see the error count, it is surprisingly less.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/SD-25000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlkOWr60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/SD-25000.jpg" alt="Shenandoah - 25000 Threads"&gt;&lt;/a&gt;Shenandoah - 2000 Threads&lt;/p&gt;

&lt;h2 id="h-zgc"&gt;ZGC&lt;/h2&gt;

&lt;p&gt;To change the GC algo to ZGC, open jmeter.bat and add the below in `set GC_ALGO` line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-XX:+UseZGC&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here comes the next surprise, I started ZGC with 25000 threads. My bad. See it for yourself. It threw heap space out of memory after 8000 threads. I am not sure why. If you are expert in ZGC, please share your inputs in the comment section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/ZGC-25000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ET69WGIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/ZGC-25000-1024x431.jpg" alt="ZGC - 10000"&gt;&lt;/a&gt;ZGC - 10000&lt;/p&gt;

&lt;p&gt;Even for 10000 threads, I got out of memory error again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/ZGC-10000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LttVXf7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/ZGC-10000-1024x307.jpg" alt="ZGC - 10000 OOM"&gt;&lt;/a&gt;ZGC - 10000 OOM&lt;/p&gt;

&lt;p&gt;But it ran well for 5000 threads. As the ZGC, threw OOM for 10000 threads, I did not purse my experiment further.&lt;/p&gt;

&lt;h2 id="h-observations"&gt;Observations&lt;/h2&gt;

&lt;p&gt;G1GC injected more than 20000 threads without any issue. But there were some stutters during the execution, I am not sure is it because of my OS or JMeter. I should have executed with Visual VM, but I do not want to have overhead again. G1GC had lot of errors in the samplers consistently across high volume runs.&lt;/p&gt;

&lt;p&gt;Shenandoah GC handled the load well. The number of errors were less, observe the trend in the above screenshots, you can easily correlate. Response times were high. From my perspective, I never bothered about that. My focus is only on active threads.&lt;/p&gt;

&lt;p&gt;I expected much from ZGC, but it ran out of memory too soon. Maybe it needs more slices to work with. But clearly ZGC is not apt to run high volumes test.&lt;/p&gt;

&lt;p&gt;If you can carry out this experiment in a high-powered instance in cloud, you can begin with ZGC by slicing more memory into it.&lt;/p&gt;

&lt;p&gt;I can hear you saying that, why you have not tuned the GC parameters to yield performance. My intention is to try just vanilla flavors without touching the other parameters. The main reason is there are too many parameters to begin with. E.g. Shenandoa GC has three modes: normal/satb, iu, and passive. Default is normal/satb. Tuning these parameters might have yielded more number of threads. If you take G1GC, we could have achieved more performance. I am not a tuning expert. Let me conclude the experiment here.&lt;/p&gt;

&lt;h2 id="h-conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;From multiple runs with varying number of threads, G1GC and Shenandoah performs almost similar in terms of performance. Further tuning of G1GC might have outperformed Shenandoah GC and vice-versa.&lt;/p&gt;

&lt;p&gt;ZGC algo has failed in my system configuration. But it could perform better in a better environment. To choose the best GC, you need to run your tests with each GC and baseline each number in your environment setup. You will get surprising results as me.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>testing</category>
      <category>tutorial</category>
      <category>java</category>
    </item>
    <item>
      <title>Click | A clicking game</title>
      <author>FRADAR</author>
      <pubDate>Tue, 06 Jul 2021 20:01:03 +0000</pubDate>
      <link>https://dev.to/fradar/click-a-clicking-game-4225</link>
      <guid>https://dev.to/fradar/click-a-clicking-game-4225</guid>
      <description>&lt;p&gt;Just keep clicking!&lt;/p&gt;

&lt;p&gt;A clicking game made in 8 hours.&lt;/p&gt;

&lt;p&gt;Let's see how many things you can click before you lose your sanity!&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/dyWPPze"&gt;https://codepen.io/FRADAR/full/dyWPPze&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like my games? Follow me on dev or on &lt;a href="https://codepen.io/FRADAR" rel="noopener noreferrer"&gt;Codepen!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>showdev</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Hot Reload para desarrolladores de .NET</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Tue, 06 Jul 2021 19:56:36 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/hot-reload-para-desarrolladores-de-net-3h6h</link>
      <guid>https://dev.to/esdanielgomez/hot-reload-para-desarrolladores-de-net-3h6h</guid>
      <description>&lt;p&gt;¡Hola! Un gusto saludarte. En esta ocasión tendremos la oportunidad de aprender sobre una de las funcionalidades más esperadas por los desarrolladores de .NET: &lt;code&gt;Hot Reload&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qu%C3%A9-es-hot-reload"&gt;
  &lt;/a&gt;
  ¿Qué es Hot Reload?
&lt;/h3&gt;

&lt;p&gt;Hot Reload, o recarga en caliente en español, nos permite modificar el código fuente de nuestra aplicación mientras esta se encuentra en ejecución y visualizar estos cambios en tiempo real sin necesidad de reiniciar la ejecución. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c%C3%B3mo-acceder-a-esta-nueva-funcionalidad"&gt;
  &lt;/a&gt;
  ¿Cómo acceder a esta nueva funcionalidad?
&lt;/h3&gt;

&lt;p&gt;Al momento de escribir este artículo (junio de 2021), es posible acceder a .NET Hot Reload desde la versión &lt;a href="https://visualstudio.microsoft.com/es/vs/preview/"&gt;16.11 Preview&lt;/a&gt; de Visual Studio 2019. Con esta versión, podremos abrir cualquier proyecto sobre el ecosistema de .NET que sea compatible, y probar esta funcionalidad. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-reload-en-acci%C3%B3n"&gt;
  &lt;/a&gt;
  Hot Reload en acción
&lt;/h3&gt;

&lt;p&gt;Para probar esta funcionalidad, veamos un ejemplo de una aplicación web con el framework DotVVM sobre ASP.NET, el cual se basa en el patrón MVVM (Modelo, Vista, VistaModelo). &lt;/p&gt;

&lt;p&gt;Los pasos son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Abrir el proyecto en Visual Studio.&lt;/li&gt;
&lt;li&gt;Iniciar la aplicación con el depurador asociado con F5.&lt;/li&gt;
&lt;li&gt;Abrir el archivo con el código fuente que se desea editar. &lt;/li&gt;
&lt;li&gt;Aplicar los cambios en el código.&lt;/li&gt;
&lt;li&gt;Visualizar la actualización correspondiente. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para aplicar los cambios realizados en el código, en Visual Studio 2019 podremos ubicar el botón Hot Reload como se puede visualizar a continuación: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hM7SXpNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4bhqg6n36xghblq2ru5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hM7SXpNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4bhqg6n36xghblq2ru5.png" alt="Hot Reload Button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este es un ejemplo para los cambios efectuados en una clase en C#:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HPSnsf4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2o8vff0pcec8f4nkrwx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPSnsf4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2o8vff0pcec8f4nkrwx.gif" alt="GIF Hot Reload C Sharp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Asimismo, lo podemos aplicar a otros componentes de código fuente, por ejemplo, a las vistas HTML en DotVVM:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YF4BLMz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmhm24fy3qr4t57pqre0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YF4BLMz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmhm24fy3qr4t57pqre0.gif" alt="GIF Hot Reload HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fabuloso, ¿verdad? Ahora bien, es posible que te preguntes qué sucede cuando nos encontramos con excepciones en tiempo de ejecución o con errores de compilación. Pues bien, en esos escenarios visualizaremos algo como esto: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhjWAg4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j77wyyet3icyjpr1ghb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhjWAg4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j77wyyet3icyjpr1ghb.gif" alt="GIF Hot Reload Errors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limitaciones-del-hot-reload"&gt;
  &lt;/a&gt;
  Limitaciones del Hot Reload
&lt;/h3&gt;

&lt;p&gt;De acuerdo con la documentación de Microsoft, los cambios que se pueden realizar en el código fuente durante una sesión de depuración sin reiniciar la ejecución son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tipos.&lt;/li&gt;
&lt;li&gt;Iteradores.&lt;/li&gt;
&lt;li&gt;Expresiones asincrónicas/await.&lt;/li&gt;
&lt;li&gt;Expresiones LINQ.&lt;/li&gt;
&lt;li&gt;Lambdas.&lt;/li&gt;
&lt;li&gt;Objetos dinámicos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Asimismo, existen cambios no compatibles con esta funcionalidad, a continuación, se pueden visualizar algunos de ellos&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cambiar el nombre de los elementos.&lt;/li&gt;
&lt;li&gt;Eliminación de espacios de nombres, tipos y miembros.&lt;/li&gt;
&lt;li&gt;Modificación de interfaces.&lt;/li&gt;
&lt;li&gt;Modificación de firmas de método.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En esta página web se pueden visualizar todos los detalles en cuanto a las limitaciones del Hot Reload en .NET: &lt;a href="//aka.ms/dotnet/hot-reload"&gt;https://aka.ms/dotnet/hot-reload&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aspectos-adicionales-por-comentar"&gt;
  &lt;/a&gt;
  Aspectos adicionales por comentar
&lt;/h3&gt;

&lt;p&gt;Los ejemplos sobre Hot Reload que acabamos de visualizar fueron aplicados sobre un proyecto con .NET 5. Esto ha sido posible gracias a que hemos utilizado la Preview 16.11 de Visual Studio 2019. &lt;/p&gt;

&lt;p&gt;Ahora bien, Microsoft ha pensado esta funcionalidad principalmente para .NET 6, a diferencia de nuestros ejemplos, podríamos visualizar como se recarga nuestra página web en tiempo real con Hot Reload, asimismo, si quisiéramos utilizar esta funcionalidad en la consola de comandos, por ejemplo, necesitaríamos por lo menos la Preview 4 de .NET 6. &lt;/p&gt;

&lt;p&gt;En la actualidad (junio 2021) podemos ver únicamente de manera preliminar estas características, para el futuro, Microsoft planea obtener toda la potencia de esta característica con .NET 6 (y futuras versiones de .NET) y Visual Studio 2022. Por el momento, es posible mencionar que la nueva versión de .NET será anunciada en la &lt;a href="https://dotnetconf.net/"&gt;.NET Conf 2021&lt;/a&gt;, la cual, se llevará a cabo en noviembre 9-11 de este año. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gracias-por-leer"&gt;
  &lt;/a&gt;
  Gracias por leer
&lt;/h3&gt;

&lt;p&gt;Muchas gracias por leer, espero que este artículo te haya parecido interesante y pueda serte de utilidad en el futuro. Si tienes alguna pregunta o alguna idea que necesites discutir, será un gusto poder colaborarte y juntos intercambiar conocimientos entre sí.&lt;/p&gt;

&lt;p&gt;¡Nos vemos en &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt;! O si gustas también puedes escribirme por &lt;a href="https://instagram.com/esdanielgomez"&gt;Instagram&lt;/a&gt; o &lt;a href="https://t.me/esdanielgomez"&gt;Telegram&lt;/a&gt;. :=)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>dotnet</category>
      <category>csharp</category>
      <category>html</category>
    </item>
    <item>
      <title>HTML Standards for Better SEO: The HEAD element</title>
      <author>Danilo César</author>
      <pubDate>Tue, 06 Jul 2021 19:52:07 +0000</pubDate>
      <link>https://dev.to/danilo/html-standards-for-better-seo-the-head-element-1cck</link>
      <guid>https://dev.to/danilo/html-standards-for-better-seo-the-head-element-1cck</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article is also available in the following languages: &lt;a href="https://danilocsar.medium.com/padr%C3%B5es-html-para-melhor-seo-o-elemento-head-9cf787bcad00"&gt;Portuguese&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;In this article, we will understand the basics of Search Engine Optimization (SEO), and of the HTML's format and syntax. We will also learn how to implement better tags on our websites, that can help us to reach better results on search engines, by investigating how they do work, and what are the meta tags that they understand.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 &lt;em&gt;If you are not familiar with the HTML syntax, you should check my article “&lt;a href="https://dev.to/danilo/css-and-html-explained-for-absolute-beginners-part-1-2hjd"&gt;CSS and HTML Explained for Absolute Beginners: Part 1&lt;/a&gt;” before continue on this current one, as some markup language knowledge may be necessary.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Suppose you are getting into a new author, and walk to the next bookstore, on your neighborhood, hoping that you will find this person's new book there. How do you start searching for it?&lt;/p&gt;

&lt;p&gt;There are many options that may help you on this job: (a) you ask the salesperson, by giving some information about the book; (b) you walk through the aisles, looking for the specific category where the book belongs; or, (c) you look at every single book in this bookstore, one by one, looking for the specific cover that contains the information you're looking for.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5fmIB0eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03fstwvbifwwgxzpkqyj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5fmIB0eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03fstwvbifwwgxzpkqyj.jpg" alt="Shelf Bookcase Library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Shelf Bookcase Library”, by &lt;a href="https://pixabay.com/users/deedee86-4642964/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=3195135"&gt;Deedee86&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=3195135"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, some of these choices may take a while, but they all have one thing in common: the document's metadata. It means there are some information on these objects that can be used for catalog, and also for better searching purposes.&lt;/p&gt;

&lt;p&gt;This is the basic of &lt;strong&gt;Search Engine Optimization&lt;/strong&gt;, or &lt;strong&gt;SEO techniques&lt;/strong&gt;, a process meant to optimize the way we search for specific things on the internet. Let's investigate how this works, and how we can develop better implementations on our websites or applications, in order to reach better positions when users search for specific keywords on their favorite search engines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-seo"&gt;
  &lt;/a&gt;
  What is SEO?
&lt;/h2&gt;

&lt;p&gt;Search Engine Optimization (SEO) is a set of techniques in order to make the web content search-friendly, by making the search engines “understand” our website, and lead users to find us. The small improvements that we make, result in more relevant users viewing our content, and also help us to promote and monetize web content.&lt;/p&gt;

&lt;p&gt;There are many experts on the internet that can help us to improve our visibility on those page's results, and also to provide useful services. Let's understand how we can apply some of these techniques by following the HTML standards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WlEzBy_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mqwj0kho7wvzp23k4gn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WlEzBy_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mqwj0kho7wvzp23k4gn.jpg" alt="Search Engine Optimization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Search Engine Optimization”, by &lt;a href="https://pixabay.com/pt/users/geralt-9301/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1359429"&gt;Gerd Altmann&lt;/a&gt; from &lt;a href="https://pixabay.com/pt/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1359429"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-insert-meta-tags-in-html"&gt;
  &lt;/a&gt;
  How to insert meta tags in HTML
&lt;/h2&gt;

&lt;p&gt;Before we get started, take a minute to check the metadata information used on this current webpage.&lt;/p&gt;

&lt;p&gt;Above the web browser's address bar, the title, and the icon — a.k.a. &lt;em&gt;favicon&lt;/em&gt;, the “favorite icon” — are presented even before the page is fully rendered. See how our web browser already collect some of this data? Under the hood, when a request is made to a web server, our web browser is looking for information like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;"ltr"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width,initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
[...]
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My simple web page&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"In order to fully understand SEO, we have to start by the basics, learning its fundamentals."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
[...]
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡 Some browsers provide better information about the metadata gathered from the current webpage. If you're using Mozilla Firefox, you can open the Site Information panel by pressing &lt;code&gt;Ctrl + I&lt;/code&gt; on your PC, or by following &lt;a href="https://support.mozilla.org/en-US/kb/site-information-panel"&gt;this guide&lt;/a&gt;. The opened window should look like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mLFnjfiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rombfoxm253qi48zaeo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mLFnjfiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rombfoxm253qi48zaeo.png" alt="Firefox's Site Information panel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt;'s homepage — &lt;a href="https://stackoverflow.blog/2017/03/09/anyone-actually-visit-stack-overflows-home-page/"&gt;yes, they do have a homepage!&lt;/a&gt; — seen in Firefox's Site Information panel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even if you don't fully understand HTML yet, notice these pieces of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The source-code tells the web browser that this is an HTML-type document;&lt;/li&gt;
&lt;li&gt;The second line specifies that the following HTML elements are displayed in the English language, and the “left-to-right” (&lt;code&gt;LTR&lt;/code&gt;) direction;&lt;/li&gt;
&lt;li&gt;There are some &lt;code&gt;viewport&lt;/code&gt; definitions for rendering the current webpage;&lt;/li&gt;
&lt;li&gt;There are, also, some values provided for the &lt;code&gt;icon&lt;/code&gt;, the &lt;code&gt;title&lt;/code&gt;, and a &lt;code&gt;description&lt;/code&gt; about this page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTML is not rocket science, so we can easily insert meta tags in our HTML file by adding it to the top of our content, inside the HTML's &lt;code&gt;head&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;head&lt;/code&gt; element is meant to provide some information about the page, such as rendering definitions, links, style-sheets, and scripts. Most of this metadata are not human-readable, and will not be displayed on the page, but will be only interpreted by the web server, and by the client's web browser.&lt;/p&gt;

&lt;p&gt;The search engines usually collect data from the &lt;code&gt;head&lt;/code&gt; element to provide better results, which means that we can insert meta tags to improve the visibility of our webpages and applications, like by following the HTML's formatting syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#htmls-formatting-syntax"&gt;
  &lt;/a&gt;
  HTML's formatting syntax
&lt;/h2&gt;

&lt;p&gt;The HTML's formatting syntax is the set of rules that structure an HTML file, so its content can be recognized by the web browser and correctly rendered for the users' navigation.&lt;/p&gt;

&lt;p&gt;There are many elements defined on the HTML Standards, and developers had also implemented non-standard elements and global attributes on their applications.&lt;/p&gt;

&lt;p&gt;For the purposes of this article, we will cover only some of those that can be understood by SEO techniques, so you can implement it on your own website or application to achieve better results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-document-element"&gt;
  &lt;/a&gt;
  The document element 📃
&lt;/h3&gt;

&lt;p&gt;The first step on creating an HTML file is actually informing that it &lt;em&gt;is&lt;/em&gt; an HTML file.&lt;/p&gt;

&lt;p&gt;According to the HTML Standard, by the &lt;a href="https://whatwg.org/"&gt;Web Hypertext Application Technology Working Group&lt;/a&gt; (WHATWG), a community founded by the leading web browser vendors in 2004:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;html&lt;/code&gt; element represents the root of an HTML document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, it refers to the single element from where all the HTML's elements belong to. You can think it as &lt;em&gt;node tree&lt;/em&gt;: the whole document is a document node; so other HTML elements are hierarchical nodes, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w9Z-P9d0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ip6jlnm5zxm23xbn628.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w9Z-P9d0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ip6jlnm5zxm23xbn628.gif" alt="The HTML DOM nodes structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML DOM nodes structure. Image from &lt;a href="https://www.w3schools.com/js/js_htmldom_navigation.asp"&gt;W3Schools&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-document-tree"&gt;
  &lt;/a&gt;
  The document tree 🌳
&lt;/h3&gt;

&lt;p&gt;The way most search engines work is by traveling relevant parts of the entire document, and then gathering information from its nodes, and creating relationships between the element and its content, such as texts, by looking for HTML's &lt;code&gt;p&lt;/code&gt; elements (for the paragraphs), or images and its caption — like &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption"&gt;this one&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/media/cc0-images/elephant-660-480.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Elephant at sunset"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;An elephant at sunset&lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the &lt;code&gt;alt&lt;/code&gt; attribute on the example above: it can be used by screen readers, for blind and visually impaired people, so they can know what this image is about; but also for SEO purposes, as we can describe for the search engine what this figure is about, and how it's related to near text.&lt;/p&gt;

&lt;p&gt;Talking about &lt;strong&gt;web accessibility&lt;/strong&gt;, we should avoid placing texts &lt;em&gt;inside&lt;/em&gt; images, as it won't be read for many users. Instead, we can use a relevant image &lt;em&gt;near&lt;/em&gt; a piece of text explaining what this is about.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 The best practice is to place the most important figure near the top of the webpage, like a banner image, and the other images near its context, such as the relevant text or section's heading.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-document-metadata"&gt;
  &lt;/a&gt;
  The document metadata 📔
&lt;/h3&gt;

&lt;p&gt;Another great way to provide information for the search engine is by using meta tags. In the HTML document, it can be provided right on the front matter, inside the &lt;code&gt;head&lt;/code&gt; element. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1, maximum-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"generator"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"WordPress 5.6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;The document metadata&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"John Doe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"This article explains the HTML metadata"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"keywords"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"html,metadata,rfc"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"alternate"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"application/atom+xml"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"blog-posts.xml"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://www.example.com/html/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"license"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://creativecommons.org/licenses/by/4.0/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡 According to the HTML5 Standard, &lt;em&gt;&lt;a href="https://html.spec.whatwg.org/multipage/syntax.html#void-elements"&gt;void elements&lt;/a&gt;&lt;/em&gt;, such as &lt;code&gt;link&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt; tags are &lt;em&gt;self-closing&lt;/em&gt;, as they don't have any content. It means you can end them by just typing &lt;code&gt;&amp;gt;&lt;/code&gt;, instead of &lt;code&gt;/&amp;gt;&lt;/code&gt;. Other &lt;em&gt;void elements&lt;/em&gt; include: &lt;code&gt;area&lt;/code&gt;, &lt;code&gt;base&lt;/code&gt;, &lt;code&gt;br&lt;/code&gt;, &lt;code&gt;col&lt;/code&gt;, &lt;code&gt;embed&lt;/code&gt;, &lt;code&gt;hr&lt;/code&gt;, &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;param&lt;/code&gt;, &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;track&lt;/code&gt;, and &lt;code&gt;wbr&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's understand each one of these elements used in our example code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-head-elements"&gt;
  &lt;/a&gt;
  HTML head elements
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-meta-tag"&gt;
  &lt;/a&gt;
  The meta tag 🧬
&lt;/h3&gt;

&lt;p&gt;First, the &lt;code&gt;meta&lt;/code&gt; tag is used for defining metadata about the HTML file, and can modify the way web browsers render the document.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name"&gt;MDN Web Docs&lt;/a&gt; has a great list about the values that can be assigned to the meta tag's &lt;code&gt;name&lt;/code&gt; attribute, such as &lt;code&gt;author&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;generator&lt;/code&gt;, and &lt;code&gt;keywords&lt;/code&gt;. Most of them are self-descriptive, and automatically informed by modern frameworks already.&lt;/p&gt;

&lt;p&gt;Let's revisit our previous example. The first three meta tags can be useful: (i) to inform the characters encoding — we're using &lt;code&gt;UTF-8&lt;/code&gt;, the default &lt;code&gt;charset&lt;/code&gt; —; (ii) to specify the device's size (also to enable the responsive behavior); and (iii) to identify the software that generated the webpage.&lt;/p&gt;

&lt;p&gt;These three lines below can be used to describe the name of one of the page's authors, a brief summary of the document — modern web browsers may use it as the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name"&gt;default description&lt;/a&gt; of bookmarked pages —, and some keywords (separated by comma) related to the current page's content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"John Doe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"This article explains the HTML metadata"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"keywords"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"html,metadata,rfc"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡 Most of the search engines use this metadata to provide a short description of the webpage on their results, so using a good mix of keyword phrases can lead us to make better results. But be careful: numerous unnecessary keywords should be avoided, as they may harm your position.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If dealing with explicit content, it is strongly recommended by most of the search engines to specify the &lt;code&gt;rating&lt;/code&gt; metadata, so it won't be included in the search results for users that are not allowed, don't want, or don't expect to find these, when using search filters, like Google's &lt;a href="https://developers.google.com/search/docs/advanced/guidelines/google-images?hl=cs#safe_search"&gt;SafeSearch&lt;/a&gt;. It can be done by including one of the following meta tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"adult"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"RTA-5042-1996-1400-1577-RTA"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing to notice about the meta tag is that many search engines may change the search result title if they notice an alternative text, inside the webpage's content, that better indicates their relevance to the users' query. According to &lt;a href="https://developers.google.com/search/docs/advanced/appearance/good-titles-snippets?hl=cs#why-the-search-result-title-might-differ-from-the-pages-title-tag"&gt;Google Search Central&lt;/a&gt;, it occurs when “the title tag as specified by a website owner is limited to being static, fixed regardless of the query”, so the search result title might differ from the &lt;code&gt;title&lt;/code&gt; tag defined in the HTML file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-link-tag"&gt;
  &lt;/a&gt;
  The link tag ⛓️
&lt;/h3&gt;

&lt;p&gt;Sometimes, developers need to establish connections to use external resources from a different location, for many reasons, such as to avoid repetition of code and patterns, so replacing it with another source also reduces the size of the single file. This can be done by using the &lt;code&gt;link&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;The External Resource Link element, the HTML's &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag, tells the web browser to get this file, and use its content in the current web page. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"favicon.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"default-stylesheet.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com/css/print.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"print"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mobile.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"screen and (max-width: 576px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we are informing the browser to locate the default CSS file, used for most of the media types, in the &lt;code&gt;default-stylesheet.css&lt;/code&gt;. Notice that files can also be located outside the current page's directory, as we are reaching the &lt;code&gt;https://example.com/css/print.css&lt;/code&gt; file from a different web server.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;media&lt;/code&gt; attribute specifies that this resource should only be used by the web browser when the media condition is true. So, in our example, if we are trying to print this web page, our web browser will render the page according to the style-sheets located in that file.&lt;/p&gt;

&lt;p&gt;For targeting printers, we can add our code inside the &lt;em&gt;media breakpoint&lt;/em&gt; in our CSS file, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.banner&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡 HTML respects the order of the information provided, so we can set a new CSS file to override the previous one: by adding an external resource link element after the &lt;code&gt;default-stylesheet.css&lt;/code&gt; line, in our example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The same applies to the &lt;code&gt;mobile.css&lt;/code&gt; file: if we are opening this page on a device which screen is 576px or less, the browser will render the webpage according to its file.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 There are some common breakpoints, based on the general screen size ranges, such as: &lt;strong&gt;576px&lt;/strong&gt; (small devices), &lt;strong&gt;768px&lt;/strong&gt; (medium devices), &lt;strong&gt;992px&lt;/strong&gt; (large devices), and &lt;strong&gt;1200px&lt;/strong&gt; (extra-large devices).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Ml2mpPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/seqofhkg19hoq3jzsdym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Ml2mpPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/seqofhkg19hoq3jzsdym.png" alt="Responsive Web Design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Responsive Web Design”, by &lt;a href="https://pixabay.com/users/clovis_cheminot-949172/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1166833"&gt;Clovis Cheminot&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1166833"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For better SEO results, we should use the &lt;code&gt;rel&lt;/code&gt; attribute as well, that can set a relationship between some linked resources and our current webpage.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel"&gt;MDN Web Docs&lt;/a&gt;, the &lt;code&gt;rel&lt;/code&gt; attribute must express tokens that are semantically valid for both machines and humans. In our example, we already used three of them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"alternate"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"application/atom+xml"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"blog-posts.xml"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://www.example.com/html/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"license"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://creativecommons.org/licenses/by/4.0/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's understand what does each one of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;alternate&lt;/code&gt; value describes other representations of the current document, such as a syndication feed, or an alternative format and language, intended for other media types. In our example, we are demonstrating that there is an Atom Feed for our blog-posts as an alternate representation.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;canonical&lt;/code&gt; value should be use if there is a single page that can be accessed on multiple URLs, or different pages containing the same content. It may occur when there are duplicate versions of the same page, such as &lt;code&gt;example.com/html/&lt;/code&gt; and &lt;code&gt;example.com/?p=html&lt;/code&gt;, so all the other URLs with similar content will be considered &lt;em&gt;duplicate&lt;/em&gt; URLs and &lt;em&gt;crawled&lt;/em&gt; less often.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Many developers usually post the same content on multiple blogging platform, or information channels, to engage a larger audience. This technique is known as “crossposting”, and should be used along with the &lt;code&gt;canonical&lt;/code&gt; URL, so search engines can prioritize the one that is the most representative from a set of the duplicate pages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;license&lt;/code&gt; value indicates the licensing information for the current element or webpage. It can be used on the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;area&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; HTML elements, and so provided a hyperlink with the rules and declarations, like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"license"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://creativecommons.org/licenses/by/4.0/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Creative Commons License"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border-width:0"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.creativecommons.org/l/by/4.0/88x31.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;This work is licensed under a &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"license"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://creativecommons.org/licenses/by/4.0/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Creative Commons Attribution 4.0 International License&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡 The synonym &lt;code&gt;copyright&lt;/code&gt; is incorrect and must be avoided, although recognized by many web browsers and search engines.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;link&lt;/code&gt; tag, however, can't be used for loading scripts: instead, we can use the &lt;code&gt;script&lt;/code&gt; tag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-script-tag"&gt;
  &lt;/a&gt;
  The script tag 🕹️
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;script&lt;/code&gt; tag is used for embed executable code, and is typically used to include JavaScript code. It can also contain data, such as JSON (JavaScript Object Notation), that can be processed in our web page or application.&lt;/p&gt;

&lt;p&gt;As well as the &lt;code&gt;link&lt;/code&gt; tags, &lt;code&gt;script&lt;/code&gt; elements can refer to JavaScript code located in another web server or directory, like this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice we are using the &lt;code&gt;integrity&lt;/code&gt; and the &lt;code&gt;crossorigin&lt;/code&gt; attributes when adding this request to an external web server. It is a good practice, in order to create more secure applications that the web browser check the response.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;integrity&lt;/code&gt; attribute prevents web browser to load content that doesn't match with the expected response from the web server. It contains a &lt;em&gt;hash&lt;/em&gt; of a resource as its value, that ensures that the file was received unmodified and delivered without unexpected manipulation.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;crossorigin&lt;/code&gt; attribute defines how the element handles &lt;em&gt;cross-origin requests&lt;/em&gt;, by adding an &lt;code&gt;Origin&lt;/code&gt; field into the &lt;em&gt;HTTP Request&lt;/em&gt; to a server from a different origin. It provides support for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt; mechanism, and can be set to either &lt;code&gt;anonymous&lt;/code&gt; (default), or &lt;code&gt;use-credentials&lt;/code&gt; values: the first one creates CORS requests with the credentials flag set to &lt;code&gt;same-origin&lt;/code&gt;; the second one, with the credentials flag set to &lt;code&gt;include&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our example, the web browser won't execute the code if the delivered file doesn't match with the hash that was informed, using the &lt;em&gt;SHA-256&lt;/em&gt; cryptographic hash algorithm.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 HTML's &lt;code&gt;link&lt;/code&gt; and &lt;code&gt;script&lt;/code&gt; tags can implement the &lt;code&gt;integrity&lt;/code&gt; and &lt;code&gt;crossorigin&lt;/code&gt; in order to provide better security, by allowing proper verification of the received data and its source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That code can be implemented in the &lt;code&gt;head&lt;/code&gt; or in the &lt;code&gt;body&lt;/code&gt; of our HTML file, so the web browser would request for the file before or after the page's content is fully loaded. Also, it can be loaded in parallel with the rendering of the webpage's elements, asynchronously, or synchronously.&lt;/p&gt;

&lt;p&gt;Developers typically insert the &lt;code&gt;script&lt;/code&gt; element right after all the elements of the webpage are defined: in general, this way you can ensure the user will not be presented to a blank page until all the scripts are loaded, what can take some time depending on the users' network.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 For the purposes of this article, we won't cover the pros and cons of inserting the &lt;code&gt;script&lt;/code&gt; element on the &lt;code&gt;head&lt;/code&gt; or the &lt;code&gt;body&lt;/code&gt; element yet, nor doing it synchronously or asynchronously, as these topics require an article for themselves. In fact, you can follow this series as we will learn it in another time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In SEO terms, placing the &lt;code&gt;link&lt;/code&gt; and &lt;code&gt;script&lt;/code&gt; tags inside the &lt;code&gt;head&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt; element shouldn't matter, as search engine &lt;em&gt;crawlers&lt;/em&gt; usually won't read scripts or style-sheets, rather than our HTML content. On the other hand, their placement may impact users' experience, and the order of their declarations matter to other scripts that use them as dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We're done, so let's recap. We covered the basics of SEO techniques, and how to insert meta tags using HTML. Then, we learned about the document's elements and tree. Finally, we covered a few HTML head elements, such as the &lt;code&gt;meta&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, and &lt;code&gt;script&lt;/code&gt; tags, and how to use it correctly in order to achieve better search engine results.&lt;/p&gt;

&lt;p&gt;In the next article of this series, we will cover the HTML's &lt;code&gt;body&lt;/code&gt; element, and how it can be implemented for better SEO results. Make sure to follow it. 🏆&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps 🚶
&lt;/h3&gt;

&lt;p&gt;There are many protocols that enhances the power of SEO techniques, and we can apply them to our webpage, in order to make better results. If you'd like to know about them, make sure to follow this series, as we will continue exploring how to make use of better SEO techniques.&lt;/p&gt;

&lt;p&gt;If you have any questions or suggestions about these subjects, please make a comment below. 📣&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References 🧩
&lt;/h3&gt;

&lt;p&gt;[1] The Document Metadata (Header) element - HTML: HyperText Markup Language | MDN. (2021, June 2). MDN Web Docs. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[2] The External Resource Link element - HTML: HyperText Markup Language | MDN. (2021, June 9). MDN Web Docs. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[3] The metadata element - HTML: HyperText Markup Language | MDN. (2021, June 2). MDN Web Docs. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[4] The Script element - HTML: HyperText Markup Language | MDN. (2021, June 2). MDN Web Docs. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[5] Consolidate Duplicate URLs with Canonicals | Google Search Central. (n.d.). Google Developers. Retrieved July 5, 2021, from &lt;a href="https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls"&gt;https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[6] HTML attribute: crossorigin - HTML: HyperText Markup Language | MDN. (2021, May 26). MDN Web Docs. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[7] HTML attribute: rel - HTML: HyperText Markup Language | MDN. (2021, June 22). MDN Web Docs. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[8] HTML Standard. (2021). WHATWG. &lt;a href="https://html.spec.whatwg.org/"&gt;https://html.spec.whatwg.org/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[9] SEO Starter Guide: The Basics | Google Search Central. (n.d.). Google Developers. Retrieved July 2, 2021, from &lt;a href="https://developers.google.com/search/docs/beginner/seo-starter-guide"&gt;https://developers.google.com/search/docs/beginner/seo-starter-guide&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>beginners</category>
      <category>seo</category>
    </item>
    <item>
      <title>CSS3 selectors Cheat Sheet</title>
      <author>Mainak Das</author>
      <pubDate>Tue, 06 Jul 2021 19:52:04 +0000</pubDate>
      <link>https://dev.to/dawnind/css3-selectors-cheat-sheet-6dk</link>
      <guid>https://dev.to/dawnind/css3-selectors-cheat-sheet-6dk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#css-selectors"&gt;
  &lt;/a&gt;
  CSS Selectors
&lt;/h2&gt;

&lt;p&gt;CSS selectors are utilized to select the content you need to style. In CSS Rule Set, Selectors are the part. CSS selectors select HTML elements as per their id, class, type, attribute, etc.&lt;/p&gt;

&lt;p&gt;CSS selectors are divided into five categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Simple/Basic selectors&lt;/strong&gt; (select elements based on name, id, class)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Combinator selectors&lt;/strong&gt; (select elements based on a specific relationship between them)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pseudo-classes selectors&lt;/strong&gt; (select elements based on a certain state)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pseudo-elements selectors&lt;/strong&gt; (select and style a part of an element)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Attribute selectors&lt;/strong&gt; (select elements based on an attribute or attribute value)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#simple-selectors"&gt;
  &lt;/a&gt;
  Simple Selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Example description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#id&lt;/td&gt;
&lt;td&gt;#firstname&lt;/td&gt;
&lt;td&gt;Selects the element with id="firstname"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.class&lt;/td&gt;
&lt;td&gt;.intro&lt;/td&gt;
&lt;td&gt;Selects all elements with class="intro"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.class&lt;/td&gt;
&lt;td&gt;p.intro&lt;/td&gt;
&lt;td&gt;Selects only &lt;p&gt; elements with class="intro"&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Selects all elements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element&lt;/td&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;Selects all &lt;p&gt; elements&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element,element,..&lt;/td&gt;
&lt;td&gt;div, p&lt;/td&gt;
&lt;td&gt;Selects all  elements and all &lt;p&gt; elements&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#basic-selectors"&gt;
  &lt;/a&gt;
  Basic Selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;element&lt;/td&gt;
&lt;td&gt;Type selector. Matches an element.&lt;/td&gt;
&lt;td&gt;p { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.class&lt;/td&gt;
&lt;td&gt;Class selector. Matches the value of anclassattribute.&lt;/td&gt;
&lt;td&gt;.warning { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches elements containing class="warning" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#id&lt;/td&gt;
&lt;td&gt;ID selector. Matches the value of an id attribute.&lt;/td&gt;
&lt;td&gt;#warning { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches elements containing id="warning" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Universal selector. Matches everything.&lt;/td&gt;
&lt;td&gt;* { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches everything */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#attribute-selectors"&gt;
  &lt;/a&gt;
  Attribute selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Selector&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[attribute]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute.&lt;/td&gt;
&lt;td&gt;a[href] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with an href attribute */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a given value.&lt;/td&gt;
&lt;td&gt;a[href="/sitemap/"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with the attribute and value href="/sitemap/" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute~="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that contains a sub-value within a space-separated list.&lt;/td&gt;
&lt;td&gt;abbr[title~="Style"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches abbr elements with a title that contains 'Style' (such as in title="Cascading Style Sheets") */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute&lt;/td&gt;
&lt;td&gt;="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that contains a sub-value within a hyphen-separated list.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches html elements with a lang attribute that contains 'en' (such as in lang="en-gb") */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute^="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that starts with something.&lt;/td&gt;
&lt;td&gt;a[href^="http://"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with an href attribute, the value of which begins with 'http://' */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute$="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that ends with something.&lt;/td&gt;
&lt;td&gt;a[href$=".com"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with an href attribute, the value of which ends with '.com' */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute*="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that contains something.&lt;/td&gt;
&lt;td&gt;a[href*="htmldog"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with an href attribute, the value of which contains 'htmldog' */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#pseudoclasses-selectors"&gt;
  &lt;/a&gt;
  Pseudo-classes Selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;:link&lt;/td&gt;
&lt;td&gt;Matches a link that has not been visited.&lt;/td&gt;
&lt;td&gt;a:link { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:visited&lt;/td&gt;
&lt;td&gt;Matches a link that has been visited.&lt;/td&gt;
&lt;td&gt;a:visited { color: purple }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:active&lt;/td&gt;
&lt;td&gt;Matches an element that is being activated, such as a link being clicked on.&lt;/td&gt;
&lt;td&gt;a:active { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:hover&lt;/td&gt;
&lt;td&gt;Matches an element whose box is being hovered over by a cursor.&lt;/td&gt;
&lt;td&gt;a:hover { text-decoration: none }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:focus&lt;/td&gt;
&lt;td&gt;Matches an element that has focus, such as one that has been tabbed to.&lt;/td&gt;
&lt;td&gt;a:focus { border: 1px solid yellow }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:target&lt;/td&gt;
&lt;td&gt;Matches an element that has been linked to (via&amp;lt;a href="#x"…,for example).&lt;/td&gt;
&lt;td&gt;h2:target { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a second-level heading that has been linked to */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:lang()&lt;/td&gt;
&lt;td&gt;Matches an element of a given language.&lt;/td&gt;
&lt;td&gt;p:lang(fr) { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs that are declared, or otherwise considered, as French */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:first-child&lt;/td&gt;
&lt;td&gt;Matches the first child of an element.&lt;/td&gt;
&lt;td&gt;p:first-child { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first child, if it is a paragraph, of an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:last-child&lt;/td&gt;
&lt;td&gt;Matches the last child of an element.&lt;/td&gt;
&lt;td&gt;div p:last-child { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the last child, if it is a paragraph, of an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:first-of-type&lt;/td&gt;
&lt;td&gt;Matches the first sibling of its type in an element.&lt;/td&gt;
&lt;td&gt;li:first-of-type { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first instance of a list item inside an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:last-of-type&lt;/td&gt;
&lt;td&gt;Matches the last sibling of its type in an element.&lt;/td&gt;
&lt;td&gt;li:last-of-type { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the last instance of a list item inside an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-child()&lt;/td&gt;
&lt;td&gt;Matches an element that is the ordinal number child of its parent.&lt;/td&gt;
&lt;td&gt;p:nth-child(3) { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the third child, if it is a paragrpah, of an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-last-child()&lt;/td&gt;
&lt;td&gt;Matches an element that is the ordinal number child, in reverse order, of its parent.&lt;/td&gt;
&lt;td&gt;p:nth-last-child(2) { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the next-to-last child, if it is a paragraph, of an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-of-type()&lt;/td&gt;
&lt;td&gt;Matches an element that is the ordinal number sibling of its type.&lt;/td&gt;
&lt;td&gt;li:nth-of-type(5) { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the fifth instance of a list item inside an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-last-of-type()&lt;/td&gt;
&lt;td&gt;Matches an element that is the ordinal number sibling, in reverse order, of its type.&lt;/td&gt;
&lt;td&gt;li:nth-of-type(5) { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the next-to-last instance of a list item inside an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:only-child&lt;/td&gt;
&lt;td&gt;Matches an element if it is the only child of its parent.&lt;/td&gt;
&lt;td&gt;article p:only-child { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a paragraph if it is the only child of an article element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:only-of-type&lt;/td&gt;
&lt;td&gt;Matches an element if it is the only sibling of its type.&lt;/td&gt;
&lt;td&gt;article aside:only-of-type { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches an aside element if it is the only aside element in an article element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:empty&lt;/td&gt;
&lt;td&gt;Matches an element with no children, or content.&lt;/td&gt;
&lt;td&gt;td:empty { border-color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches table data cells with nothing in 'em */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:root&lt;/td&gt;
&lt;td&gt;Matches the root element of a document. This will be the html element in HTML.&lt;/td&gt;
&lt;td&gt;:root { background: yellow }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:enabled&lt;/td&gt;
&lt;td&gt;Matches form control elements that are not disabled.&lt;/td&gt;
&lt;td&gt;input:enabled { border-color: lime }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches input elements that are not disabled */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:disabled&lt;/td&gt;
&lt;td&gt;Matches form control elements that are disabled.&lt;/td&gt;
&lt;td&gt;input:enabled { border-color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches input elements that are disabled */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:checked&lt;/td&gt;
&lt;td&gt;Matches a radio or checkbox type input element that is checked.&lt;/td&gt;
&lt;td&gt;input:checked { outline: 3px solid yellow }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches checked input elements */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:not()&lt;/td&gt;
&lt;td&gt;Negotiation pseudo-class. Matches an element that does not match a selector.&lt;/td&gt;
&lt;td&gt;p:not(:first-child) { color: orange }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs that are not first children */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#pseudoelements-selectors"&gt;
  &lt;/a&gt;
  Pseudo-elements Selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;::first-line&lt;/td&gt;
&lt;td&gt;Matches the first textual line in an element.&lt;/td&gt;
&lt;td&gt;p::first-line { font-weight: bold }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first line in a paragraph */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::first-letter&lt;/td&gt;
&lt;td&gt;Matches the first letter in an element.&lt;/td&gt;
&lt;td&gt;p::first-letter { font-size: 2em }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first letter in a paragraph */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::before&lt;/td&gt;
&lt;td&gt;Used with the content property to generate content before the initial content of an element.&lt;/td&gt;
&lt;td&gt;h1::before { content: "*" }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* places an asterisk at the start of a top-level heading */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::after&lt;/td&gt;
&lt;td&gt;Used with the content property to generate content after the initial content of an element.&lt;/td&gt;
&lt;td&gt;h1::after { content: "+" }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* places a plus-sign at the end of a top-level heading */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Selector&lt;/td&gt;
&lt;td&gt;Description&lt;/td&gt;
&lt;td&gt;Example&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selector selector&lt;/td&gt;
&lt;td&gt;Descendant combinator. Matches elements that are descendants of another element.&lt;/td&gt;
&lt;td&gt;aside p { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs inside elements containing class="warning" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selector &amp;gt; selector&lt;/td&gt;
&lt;td&gt;Child combinator. Matches elements that are children of another element.&lt;/td&gt;
&lt;td&gt;.warning &amp;gt; p { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs that are children of elements containing class="warning" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selector + selector&lt;/td&gt;
&lt;td&gt;Adjacent sibling combinator. Matches elements that immediately follow another element.&lt;/td&gt;
&lt;td&gt;h1 + * { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first element to follow a top-level heading */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selector ~ selector&lt;/td&gt;
&lt;td&gt;General sibling combinator. Matches elements that follow another element.&lt;/td&gt;
&lt;td&gt;h2 ~ p { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches every paragraph that follows a second-level heading */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#css-group-selector"&gt;
  &lt;/a&gt;
  CSS Group Selector
&lt;/h2&gt;

&lt;p&gt;The grouping selector in CSS picks all the HTML elements with the same style definitions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To minimize the code, just apply the CSS grouping selectors. Simply group the selectors by separating each selector with a comma. Let's see the following code after CSS Grouping Selectors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Star rating with nothing but text! </title>
      <author>Adam Crockett</author>
      <pubDate>Tue, 06 Jul 2021 19:43:24 +0000</pubDate>
      <link>https://dev.to/adam_cyclones/star-rating-with-nothing-but-text-ef4</link>
      <guid>https://dev.to/adam_cyclones/star-rating-with-nothing-but-text-ef4</guid>
      <description>&lt;p&gt;I think this is getting silly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;'1'&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'radio'&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;'stars'&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; *
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;'2'&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'radio'&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;'stars'&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; **
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'radio'&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;'stars'&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; ***
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;'4'&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'radio'&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;'stars'&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; ****
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;'5'&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'radio'&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;'stars'&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; *****
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think mine has less bytes than the other solutions but I'm on my phone so forget accreditation or accessibility 😂. &lt;br&gt;
Good post folks?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>5 GraphQL clients for JavaScript and Node.js</title>
      <author>Matt Angelosanto</author>
      <pubDate>Tue, 06 Jul 2021 19:17:27 +0000</pubDate>
      <link>https://dev.to/logrocket/5-graphql-clients-for-javascript-and-node-js-59mm</link>
      <guid>https://dev.to/logrocket/5-graphql-clients-for-javascript-and-node-js-59mm</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/chisimdiriejinkeonye/"&gt;Chisimdiri Ejinkeonye&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;GraphQL is a query language and runtime for APIs. It enables clients to specify queries and allows servers to validate data against a strongly typed schema.&lt;/p&gt;

&lt;p&gt;Unlike REST APIs, GraphQL uses a single endpoint for all operations. GraphQL-based servers can only communicate via GraphQL queries. For simple projects, it’s feasible to use a REST client, like &lt;a href="https://blog.logrocket.com/axios-or-fetch-api/"&gt;Axios or &lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;, to send GraphQL queries. However, for larger, more complex projects that have advanced requirements, a GraphQL client is needed.&lt;/p&gt;

&lt;p&gt;GraphQL clients make communication easier by abstracting away small details and implementing additional features, some of which include caching, query batching and deduplication, and static typing of GraphQL query results.&lt;/p&gt;

&lt;p&gt;In this guide, we’ll compare the following five GraphQL clients and evaluate each in terms of functionality, community support, and size.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="#graphqlrequest"&gt;&lt;code&gt;graphql-request&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#apolloclient"&gt;Apollo Client&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#urql"&gt;urql&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#relay"&gt;Relay&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#graphqlhooks"&gt;&lt;code&gt;graphql-hooks&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-graphqlrequest-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;graphql-request&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://graphql.org/code/"&gt;&lt;code&gt;graphql-request&lt;/code&gt;&lt;/a&gt; is a very minimal GraphQL client. The library is isomorphic, meaning it supports both Node.js and browsers. It comes with first-class TypeScript support, so typings never become outdated. The library weighs just &lt;a href="https://bundlephobia.com/package/graphql-request@3.4.0"&gt;5.2kB&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;graphql-request&lt;/code&gt; GitHub repository activity is healthy, with &lt;a href="https://github.com/prisma-labs/graphql-request"&gt;3.7K stars&lt;/a&gt; at the time of writing. On npm, &lt;code&gt;graphql-request&lt;/code&gt; is &lt;a href="https://www.npmjs.com/package/graphql-request#whats-the-difference-between-graphql-request-apollo-and-relay"&gt;downloaded more than 1.3 million times&lt;/a&gt; weekly at the time of writing, so you shouldn’t have any trouble finding help online!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;graphql-request&lt;/code&gt; is simple to use, and there’s almost no learning curve:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql-request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`{
  hero {
    name  
  }
}`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;graphql-endpoint&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Works on both server and client&lt;/li&gt;
&lt;li&gt;  Support for TypeScript&lt;/li&gt;
&lt;li&gt;  Very lightweight&lt;/li&gt;
&lt;li&gt;  Strong community support&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  No support for advanced features like query caching and deduplication&lt;/li&gt;
&lt;li&gt;  No support for GraphQL subscriptions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#apollo-client"&gt;
  &lt;/a&gt;
  Apollo Client
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.apollographql.com/docs/react/"&gt;Apollo Client&lt;/a&gt; is an advanced GraphQL client only for frontends. It includes features for caching, query batching, query deduplication, and pagination. It can also be used to manage local state in place of a Redux store. The base library weighs about &lt;a href="https://bundlephobia.com/package/@apollo/client@3.3.6"&gt;33.9kB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apollo Client is written in TypeScript, so TypeScript support is excellent. It has integrations for popular frameworks and libraries like React, Next.js, Angular, and Vue.js. Apollo Client also has a &lt;a href="https://chrome.google.com/webstore/detail/apollo-client-devtools/jdkknkkbebbapilgoeccciglkfbmbnfm?utm_source=chrome-ntp-icon"&gt;Chrome extension&lt;/a&gt; for inspecting and making queries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;Apollo Client is updated at least once a month. It is downloaded &lt;a href="https://www.npmjs.com/package/apollo-client"&gt;more than 1 million times weekly&lt;/a&gt; on npm and has over &lt;a href="https://github.com/apollographql/apollo-client"&gt;16K stars and 2K forks&lt;/a&gt; on GitHub at the time of writing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Robust and comprehensive&lt;/li&gt;
&lt;li&gt;  Satisfies most use cases&lt;/li&gt;
&lt;li&gt;  Support for TypeScript&lt;/li&gt;
&lt;li&gt;  Integrations for popular UI libraries and frameworks&lt;/li&gt;
&lt;li&gt;  Integrations for iOS and Android&lt;/li&gt;
&lt;li&gt;  Chrome extension for inspecting queries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to activity on npm and GitHub, Apollo Client enjoys online support in the form of a dedicated &lt;a href="https://community.apollographql.com"&gt;community forum&lt;/a&gt;. It also has commercial backing from &lt;a href="https://www.apollographql.com"&gt;Apollo GraphQL Inc.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Steep learning curve for advanced features like query batching, persisted queries, and caching&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#urql"&gt;
  &lt;/a&gt;
  urql
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://formidable.com/open-source/urql/"&gt;urql&lt;/a&gt; aims to be both &lt;a href="https://blog.logrocket.com/why-i-finally-switched-to-urql-from-apollo-client/"&gt;easy to use and extensible&lt;/a&gt; through built-in caching mechanisms with sensible defaults. urql has clients for Preact, React, and Svelte, in addition to a core library for use with Node.js on the server side.&lt;/p&gt;

&lt;p&gt;urql’s bundle size is very small, &lt;a href="https://formidable.com/open-source/urql/docs/comparison/"&gt;weighing only 7.1kB&lt;/a&gt;. It is one of few GraphQL libraries with built-in offline support.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;At the time of writing, the urql library is &lt;a href="https://www.npmjs.com/package/urql"&gt;downloaded 95K times a week&lt;/a&gt; on npm, and on GitHub, urql has &lt;a href="https://github.com/FormidableLabs/urql"&gt;received over 6K stars&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;urql is robust, but it is still easy to use for basic functionality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;QUERY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  query Test($id: ID!) {
    getUser(id: $id) {
      id
      name
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;QUERY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Clear and readable documentation&lt;/li&gt;
&lt;li&gt;  Support for Typescript&lt;/li&gt;
&lt;li&gt;  Integrations for many popular UI libraries and frameworks&lt;/li&gt;
&lt;li&gt;  Browser extension for inspecting queries&lt;/li&gt;
&lt;li&gt;  Built-in offline support&lt;/li&gt;
&lt;li&gt;  Small bundle size&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  No support for Angular&lt;/li&gt;
&lt;li&gt;  No support for query batching&lt;/li&gt;
&lt;li&gt;  No built-in pagination support&lt;/li&gt;
&lt;li&gt;  Small community in comparison to other GraphQL clients&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#relay"&gt;
  &lt;/a&gt;
  Relay
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://relay.dev/"&gt;Relay&lt;/a&gt; is a highly performant and scalable GraphQL client developed by Facebook.&lt;/p&gt;

&lt;p&gt;As you might guess, Relay was built with React in mind. As such, it takes a component-based approach to data fetching. Relay is highly opinionated and is strictly for use with React frontends. Relay has a &lt;a href="https://bundlephobia.com/package/react-relay@11.0.2"&gt;bundle size of 47.1 kB&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;At the time of writing, Relay is &lt;a href="https://www.npmjs.com/package/react-relay"&gt;downloaded at least 94K times&lt;/a&gt; a week on npm and has received &lt;a href="https://github.com/facebook/relay"&gt;over 15K stars and over 1.5K forks&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Advanced features for caching, query deduplication, pagination, and local state management&lt;/li&gt;
&lt;li&gt;  Tightly integrated with React, giving it higher order components and hooks&lt;/li&gt;
&lt;li&gt;  Trusted by top companies like Facebook and Quora&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Only supports React&lt;/li&gt;
&lt;li&gt;  Very opinionated because of its rigid conventions&lt;/li&gt;
&lt;li&gt;  Steeper learning curve in comparison to other clients&lt;/li&gt;
&lt;li&gt;  Documentation is difficult to parse&lt;/li&gt;
&lt;li&gt;  Relay client can only communicate with a &lt;a href="https://blog.logrocket.com/making-a-graphql-server-compatible-with-relay/"&gt;Relay-compatible&lt;/a&gt; GraphQL server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By enforcing a rigid convention, Relay offers less room for mistakes, which can be both positive and negative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-graphqlhooks-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;graphql-hooks&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.nearform.com/blog/introducing-graphql-hooks/"&gt;&lt;code&gt;graphql-hooks&lt;/code&gt;&lt;/a&gt; is a very small GraphQL client for React. Despite its tiny size, &lt;code&gt;graphql-hooks&lt;/code&gt; features first-class support for caching, pagination, authentication, file uploads, and server-side rendering. Its bundle size &lt;a href="https://bundlephobia.com/package/graphql-hooks@5.2.0"&gt;weighs only 3.6kB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The client provides the &lt;code&gt;useQuery&lt;/code&gt;, &lt;code&gt;useMutation&lt;/code&gt;, and &lt;code&gt;useSubscription&lt;/code&gt; React Hooks for handling queries, mutations, and subscriptions, respectively. The official documentation includes a guide to &lt;a href="https://www.apollographql.com/docs/react/migrating/hooks-migration/"&gt;migrate from Apollo Client&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;graphql-hooks&lt;/code&gt; is downloaded &lt;a href="https://www.npmjs.com/package/graphql-hooks"&gt;6K times monthly on npm&lt;/a&gt; to go along with &lt;a href="https://github.com/nearform/graphql-hooks"&gt;1.5K stars on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Support for TypeScript&lt;/li&gt;
&lt;li&gt;  Support for advanced features like caching, pagination, and SSR out of the box&lt;/li&gt;
&lt;li&gt;  Very small size&lt;/li&gt;
&lt;li&gt;  API has a small surface area&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Only supports React&lt;/li&gt;
&lt;li&gt;  Small community&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#choosing-the-right-graphql-client-for-your-project"&gt;
  &lt;/a&gt;
  Choosing the right GraphQL client for your project
&lt;/h2&gt;

&lt;p&gt;The table below summarizes the information discussed above. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Community support&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Learning curve&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;TypeScript typings&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Pagination, query caching, batching, and deduplication&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Isomorphic support&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Integrations with UI libraries and frameworks&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;graphql-request&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Great&lt;/td&gt;
&lt;td&gt;Low&lt;/td&gt;
&lt;td&gt;5.2 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apollo Client&lt;/td&gt;
&lt;td&gt;Great&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;33.9 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Client only&lt;/td&gt;
&lt;td&gt;React, Next.js, Angular, Svelte, Ember, web components, and Vue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;urql&lt;/td&gt;
&lt;td&gt;Fair&lt;/td&gt;
&lt;td&gt;Low&lt;/td&gt;
&lt;td&gt;7.1 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Batching not supported&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;React, Svelte, and Vue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Relay&lt;/td&gt;
&lt;td&gt;Fair&lt;/td&gt;
&lt;td&gt;High&lt;/td&gt;
&lt;td&gt;47.1 kB&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Client only&lt;/td&gt;
&lt;td&gt;React only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;graphql-hooks&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Low&lt;/td&gt;
&lt;td&gt;Low&lt;/td&gt;
&lt;td&gt;3.6 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Batching and deduplication not supported&lt;/td&gt;
&lt;td&gt;Client only&lt;/td&gt;
&lt;td&gt;React only&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Choosing the best client for your project will depend heavily on your individual goals and needs. You can, however, use the guidelines listed below as a starting point:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;graphql-request&lt;/code&gt;: server-side or frontend project with simple requirements&lt;/li&gt;
&lt;li&gt;  Apollo Client: advanced frontend project&lt;/li&gt;
&lt;li&gt;  urql: advanced features like caching that runs server side&lt;/li&gt;
&lt;li&gt;  Relay: project is React-based, requires advanced features, and includes many components&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;graphql-hooks&lt;/code&gt;: project is React-based and doesn’t require advanced features&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;GraphQL clients make interfacing with GraphQL APIs much easier than calling them directly.&lt;/p&gt;

&lt;p&gt;Every GraphQL client has its pros and cons. Choosing a client that offers the best features for your use case is paramount to a smooth development experience. Selecting the optimal client will depend on your unique project, and there might not always be an obvious answer. Hopefully, the information in this article will help you to get started!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#monitor-failed-and-slow-graphql-requests-in-production"&gt;
  &lt;/a&gt;
  Monitor failed and slow GraphQL requests in production
&lt;/h2&gt;

&lt;p&gt;While GraphQL has some features for debugging requests and responses, making sure GraphQL reliably serves resources to your production app is where things get tougher. If you’re interested in ensuring network requests to the backend or third party services are successful, &lt;a href="https://logrocket.com/signup"&gt;try LogRocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsjLY60E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbqi8ncnli9u7o0k36qt.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt; &lt;a href="https://logrocket.com/signup"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your site. Instead of guessing why problems happen, you can aggregate and report on problematic GraphQL requests to quickly understand the root cause. In addition, you can track Apollo client state and inspect GraphQL queries' key-value pairs.&lt;/p&gt;

&lt;p&gt;LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. &lt;a href="https://logrocket.com/signup"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Make Light/Dark mode Toggle for your Website using CSS</title>
      <author>Sarah Thompson</author>
      <pubDate>Tue, 06 Jul 2021 19:13:16 +0000</pubDate>
      <link>https://dev.to/salothom/make-light-dark-mode-for-your-website-using-css-1gol</link>
      <guid>https://dev.to/salothom/make-light-dark-mode-for-your-website-using-css-1gol</guid>
      <description>&lt;p&gt;Having light and Dark mode on web or desktop applications is a great feature to not only make the user's eyes happier, but to show off some fun and fancy css skills. It gives off an extra level of polish for your personal site if you're using it in a portfolio for a new job. I recently did it on my personal website - but instead of traditional light and dark mode, I changed the colors and themes to be "Light Academia Aesthetic" and "Dark academia Aesthetic".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pick-your-colors"&gt;
  &lt;/a&gt;
  Pick Your Colors
&lt;/h3&gt;

&lt;p&gt;First thing first pick your two color palletes for light mode and dark mode. I light to use &lt;a href="https://coolors.co/"&gt;coolors.co&lt;/a&gt; top help select colors to get ideas on what to pick. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KFsszSfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9iyoyum6cnbxr7611ed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KFsszSfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9iyoyum6cnbxr7611ed.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now with your hex colors selected we are going to set them as variables in your top .css file. Setting them as variables and then using those variables to assign to individual instances using the colors is makes for cleaner code, better consitancy and easier updates should you want to change a color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
  /** sunny side **/
  --light-background: #b87e54;
  --light-olive: #4d4828;
  --light-blue: #99c1c3;
  --light-purple: #67597a;
  --light-yellow: #e0cd7e;
  /** dark side **/
  --dark-background: #283618;
  --dark-darkblue: #001d3d;
  --dark-blue: #003566;
  --dark-darkestblue: #000814;
  --dark-mustard: #664e00;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These colors can then be easily accessed  by calling the variable name you assigned the hex color to &lt;code&gt;background-color: var(--dark-background);&lt;/code&gt; . &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-your-toggle"&gt;
  &lt;/a&gt;
  Build Your Toggle
&lt;/h3&gt;

&lt;p&gt;For the toggle we are going to build off of an &lt;code&gt;input&lt;/code&gt; HTML element. This input and its associated label will be turned into something that looks like a toggle with css, but will continue to function the same as a checked, or unchecked, input element. We will be leaning heavily on the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; &lt;a href="https://css-tricks.com/almanac/selectors/a/after-and-before/"&gt;pseudo-elements&lt;/a&gt; to get it done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="checkbox" id="toggle" class="mostHigh toggle--checkbox" /&amp;gt;
&amp;lt;label for="toggle" class="toggle--label mostHigh"&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to hide &lt;code&gt;.toggle--checkbox&lt;/code&gt; with &lt;code&gt;display: none&lt;/code&gt; so that the original checkbox isn't visible and then create the toggle outline with &lt;code&gt;.toggle--label&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.toggle--label {
  width: 80px;
  height: 40px;
  background: var(--blue-color);
  border-radius: 100px;
  border: 5px solid var(--blue-border);
  display: flex;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be using the pseudo-element &lt;code&gt;::before&lt;/code&gt; to create the switch portion that will toggle back and forth.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.toggle--label:before {
  animation-name: reverse;
  animation-duration: 350ms;
  animation-fill-mode: forwards;
  transition: all 350ms ease-in;
  content: "";
  width: 30px;
  height: 30px;
  border: 5px solid var(--yellow-border);
  top: 0px;
  left: 4px;
  position: absolute;
  border-radius: 82px;
  background: var(--yellow-background);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will be using css &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;pseudo-class selector&lt;/a&gt; `:checked' to determine inside the css whether or not the toggle has been clicked on or off. This is very convenient, it prevents having to update the DOM with JavaScript or do conditional rendering.&lt;/p&gt;

&lt;p&gt;CSS selectors might have more than one simple selectors and between them we include a combinator. In this toggle we are using an adjacent sibling selector &lt;code&gt;+&lt;/code&gt; to select the sibling of the class &lt;code&gt;.toggle--checkbox&lt;/code&gt; (the input) which is &lt;code&gt;.toggle--label&lt;/code&gt; (the label).  Other combinators for simple selectors are descendant selector (space), a child selector &lt;code&gt;&amp;gt;&lt;/code&gt; and general sibling selector &lt;code&gt;~&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It works in a similar way as &lt;code&gt;:hover&lt;/code&gt; does, that when that class is checked then the css will update the sibling selectors code. The sibling qualifier is based on the HTML elements to which the classes are assigned.&lt;br&gt;
`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.toggle--checkbox:checked + .toggle--label {
  background: var(--indigo-color);
  border-color: var(--indigo-border);
}

.toggle--checkbox:checked + .toggle--label:before {
  background: var(--white);
  border-color: var(--gray-border);
  animation-name: switch;
  animation-duration: 350ms;
  animation-fill-mode: forwards;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#animate-the-toggle"&gt;
  &lt;/a&gt;
  Animate the Toggle
&lt;/h3&gt;

&lt;p&gt;Right now the toggle will change colors and move around, and make it visually appear to be toggling. We can do this in css too. We will be using Keyframes for this. Having the keyframes created then assigned to the animation-name attribute that is on &lt;code&gt;.toggle--label:before&lt;/code&gt;. We are using the keyframes to create visual motion and make the circle toggle move from the left side of the toggle switch to the right - and then back.&lt;br&gt;
`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@keyframes switch {
  0% {
    left: 4px;
  }
  60% {
    left: 20px;
    width: 50px;
  }
  100% {
    left: 40px;
    width: 30px;
  }
}
@keyframes reverse {
  0% {
    left: 24px;
    width: 42px;
  }
  60% {
    left: 20px;
    width: 50px;
  }
  100% {
    left: 4px;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#have-the-toggle-effect-the-site-with-daynight-mode"&gt;
  &lt;/a&gt;
  Have the Toggle Effect the Site with Day/Night Mode
&lt;/h3&gt;

&lt;p&gt;To push day/night mode to the rest of your site we are going to be using the same process that we used for the &lt;code&gt;.toggle--label&lt;/code&gt;. We want to make sure that the toggle itself is near the top level so that the header and the main part of the site can be sibling elements to grab on to.&lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Header /&amp;gt;
&amp;lt;Toggle /&amp;gt;
&amp;lt;Main /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;In the way you will be watching to see if the toggle input gets checked, and if so updating the initial css to the toggled css.&lt;br&gt;
`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.header {
  background-color: var(--light-background);
  color: var(--light-olive);
}

.toggle--checkbox:checked ~ .head {
  background-color: var(--dark-background);
  color: var(--white);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;Have fun toggling your different colors around!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Fetching a API, vs using ContextProvider. When should you use just fetching vs a ContextProvider??</title>
      <author>Bret</author>
      <pubDate>Tue, 06 Jul 2021 18:09:44 +0000</pubDate>
      <link>https://dev.to/yobretyo/fetching-a-api-vs-using-contextprovider-when-should-you-use-just-fetching-vs-a-contextprovider-12cg</link>
      <guid>https://dev.to/yobretyo/fetching-a-api-vs-using-contextprovider-when-should-you-use-just-fetching-vs-a-contextprovider-12cg</guid>
      <description>&lt;p&gt;I’m using Next for the first time and I’m liking it, &lt;br&gt;
There is a choice tho of… when do i need a “ContextProvider”?&lt;/p&gt;

&lt;p&gt;In my Next project i have several files to get data from Airtable:&lt;/p&gt;

&lt;p&gt;In Airtable.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
const Airtable = require('airtable');
const base = new Airtable({ apiKey: process.env.AIRTABLE_API_KEY }).base(process.env.AIRTABLE_BASE_ID);
const table = base(process.env.AIRTABLE_TABLE_NAME);
const table2 = base(process.env.AIRTABLE_TABLE_NAME2);
const table3 = base(process.env.AIRTABLE_TABLE_NAME3);

const minifyRecords = (records) =&amp;gt; {
    return records.map(record =&amp;gt; getMinifiedRecord(record));
}

const getMinifiedRecord = (record) =&amp;gt; {
    if(!record.fields.completed) {
        record.fields.completed = false;
    }
    return {
        id: record.id,
        fields: record.fields,
    }
}
export { table, table2, table3, getMinifiedRecord, minifyRecords}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in my getCorals.js i have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import { table, minifyRecords } from './utils/Airtable'

export default async (req, res) =&amp;gt; {
    try{
    const records = await table.select({}).firstPage();
    const minifiedRecords = minifyRecords(records);
    res.statusCode = 200;
    res.json(minifiedRecords);
    //console.log(records)
    }catch(err){
    res.statusCode = 500;
    res.json({msg: 'something went wrong'})
}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The in my actual page to show my data i have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import React from 'react'
import { CoralProvider } from '../contexts/CoralContext'
import { table, minifyRecords } from '../pages/api/utils/Airtable'
// im at video 6 in Airtable Nextjs video series....ITS WORKING!!!

export default function Coral({initialCoral}) {
    // console log initialCoral... it logs them out
    //console.log(initialCoral);
    try{
    return (
        &amp;lt;CoralProvider&amp;gt;
            &amp;lt;h1&amp;gt;ZOAS PAGE&amp;lt;/h1&amp;gt;
        &amp;lt;/CoralProvider&amp;gt;
    )
    }catch(err){
        console.log(err);
        return{
            props: {
                err: "something went wrong"
            }
        }
    }
}

export async function getServerSideProps(context) {
    const coral = await table.select({}).firstPage();
    return {
        props: {
            InitCoral: minifyRecords(coral)
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OOOOOOOORRRRRR&lt;/p&gt;

&lt;p&gt;Do i just fetch my data like this:??????&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import React from 'react'
import Coralapi from '../../API/Coralapi'
import { useEffect, useState } from "react";
import Airtable from 'airtable';
require('dotenv').config();

const base = new Airtable({apiKey: `${process.env.REACT_APP_AIRTABLE_API_KEY}` }).base(`${process.env.REACT_APP_AIRTABLE_BASE_ID}`);

function Coralpage() {
   const [coral, setCoral] = useState([]);
   const [care, setCare] = useState([]);
   useEffect(() =&amp;gt; {
    base("CORAL")
    .select({view: "Gallery" })
    .eachPage((records, fetchNextPage) =&amp;gt; {
        console.log(records);
        setCoral(records);
        fetchNextPage();
    });
    base("CARE")
    .select({view: "Gallery" })
    .eachPage((records, fetchNextPage) =&amp;gt; {
        console.log(records);
        setCare(records);
        fetchNextPage();
    });

},[]);
return (
    &amp;lt;&amp;gt;
    &amp;lt;h1&amp;gt;Coral Products&amp;lt;/h1&amp;gt;
    {coral.map((coral) =&amp;gt; (
        &amp;lt;Coralapi 
        key={coral.id}
        coral={coral}
        care={care.filter(
            (care) =&amp;gt; care.coral
        )}
        /&amp;gt;
    ))}
    &amp;lt;/&amp;gt;
);
}

export default Coralpage

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;IM NOT TOO SURE ON WHAT TO USE???&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>help</category>
      <category>devops</category>
    </item>
    <item>
      <title>CSS Tip - Perfect Flexbox overflow items</title>
      <author>Tony</author>
      <pubDate>Tue, 06 Jul 2021 18:06:46 +0000</pubDate>
      <link>https://dev.to/immannino/css-tip-perfect-flexbox-overflow-items-1ceb</link>
      <guid>https://dev.to/immannino/css-tip-perfect-flexbox-overflow-items-1ceb</guid>
      <description>&lt;p&gt;&lt;sup&gt;&lt;a href="https://www.pexels.com/photo/white-and-blue-painted-wall-2585552/"&gt;Credits for cover photo&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The following snippet is a powerful set of CSS rules I use all the time. I think it solves a common layout issue I want to help others solve.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coryrylan.com/blog/css-gap-space-with-flexbox"&gt;Original Source for the code&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ever needed to create a UI that required a list of items of varying length and you wanted to make it look fluid and pretty at the same time? You tried to use flex box but it all ended up looking like the image below?&lt;/p&gt;

&lt;p&gt;Follow along for a quick CSS snippet that helps level up your CSS flex game.&lt;/p&gt;

&lt;p&gt;What we will be creating:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1vk5UILY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j1xbns0p22uomz8bawt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1vk5UILY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j1xbns0p22uomz8bawt.gif" alt="Crazy Gif Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Table of Contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#the-problem"&gt;The Problem&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#the-solution"&gt;The Solution&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#the-explanation"&gt;The Explanation&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;We want to write some CSS that works when tackling variable length lists of items. In a lot of cases, when we start styling these types of pages it looks like the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fe24bEV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.stack.imgur.com/1P8vG.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fe24bEV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.stack.imgur.com/1P8vG.gif" alt="The problem"&gt;&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;&lt;a href="https://stackoverflow.com/questions/54384305/dynamic-width-parent-with-flexbox-column-wrapping"&gt;source&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Here is what I want to solve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The margin issue&lt;/strong&gt; - Children within a Flex parent do not &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing"&gt;collapse margins&lt;/a&gt;. So when we apply margins to them for spacing purposes, we end up in a scenario where the first/last elements in a row have less margin on their outsides than they do next to their siblings. This becomes an issue when we want a consistent &lt;em&gt;gap&lt;/em&gt; between elements in our list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Unu8rP_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a07xigalqddrdw1ojgp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Unu8rP_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a07xigalqddrdw1ojgp.png" alt="Margin Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The overflow elements&lt;/strong&gt; - Depending on the size of our page and the size of the elements in our list, we can have a variable number of items that "overflow" at the end of the list. How do we tackle this? Do we want them to be right justified? Do we want to hardcode some styles for each situation: if 1 item, width 100%, if 2 items width 50%, etc etc? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The size &amp;amp; spacing of the items&lt;/strong&gt; - How much tweaking do we want to do to ensure the items look good? Are we okay with a &lt;code&gt;max-width&lt;/code&gt; or do we need a &lt;code&gt;min-width&lt;/code&gt; for the item to look okay? Are we using all the white space? Are things centered or is everything left-aligned? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Is IE friendly&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h3&gt;

&lt;p&gt;Here is the solution to our problems listed above. I will explain this in further detail below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-grow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-shrink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-basis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;225px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://flex-basis-fluid-layout-demo.stackblitz.io"&gt;A small demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKdlKK4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vmxk4r427v5i6gu9cos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKdlKK4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vmxk4r427v5i6gu9cos.png" alt="Example demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-explanation"&gt;
  &lt;/a&gt;
  The Explanation
&lt;/h3&gt;

&lt;p&gt;The core elements to our solution are &lt;code&gt;margin&lt;/code&gt;, the &lt;code&gt;calc&lt;/code&gt; function, and flexbox's &lt;code&gt;flex-grow&lt;/code&gt; and &lt;code&gt;flex-basis&lt;/code&gt; properties.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#margin"&gt;
  &lt;/a&gt;
  Margin
&lt;/h4&gt;

&lt;p&gt;In the snippet we're doing 3 things with margin:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Defining how big of a gap we want between the elements.&lt;/li&gt;
&lt;li&gt;Adding &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; margin to all the children elements.&lt;/li&gt;
&lt;li&gt;Translating the parent &lt;code&gt;.flex&lt;/code&gt; container in the opposite direction of our top and left margins we added on the children.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This snippet is essentially fixing our margin issue I outlined above.&lt;/p&gt;

&lt;p&gt;Here is the margin applied to the children:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U94iMZGh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q53mzv78qe9p5jdp20i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U94iMZGh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q53mzv78qe9p5jdp20i.png" alt="Flex children"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the negative margin applied to the &lt;code&gt;.flex&lt;/code&gt; container:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--muamUfeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn1vlba7dighd0k6ej5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--muamUfeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn1vlba7dighd0k6ej5.png" alt="Flex parent"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#but-but-but-youre-forgetting-about-the-raw-gap-endraw-property"&gt;
  &lt;/a&gt;
  BUT BUT BUT You're forgetting about the &lt;code&gt;gap&lt;/code&gt; property!!!!
&lt;/h5&gt;

&lt;p&gt;Yes and no. This same functionality can be applied using the built in &lt;code&gt;gap&lt;/code&gt; property, but this currently has limited support in some mobile browsers and all of IE.&lt;/p&gt;

&lt;p&gt;I know that IE is going away, but I work in an industry &amp;amp; field that supports around 5-10% of our customer base on IE 11 and need a solution that I can trust works. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/almanac/properties/g/gap/"&gt;Here is a good article outlining the gap property&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#flex-grow"&gt;
  &lt;/a&gt;
  Flex Grow
&lt;/h4&gt;

&lt;p&gt;If you have never used &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow"&gt;flex-grow&lt;/a&gt; before, I highly recommend reading about how it works. The quick and dirty explanation is that it allows our flex children to expand to fill the row/column that they are in.&lt;/p&gt;

&lt;p&gt;In this case we're using the property &lt;code&gt;flex-grow: 1;&lt;/code&gt;. This tells the parent "Hey for all the children you have, make sure they take up &lt;em&gt;ALL&lt;/em&gt; of the white space available".&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;flex-grow: 0;&lt;/code&gt; (default)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Jtdgskj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0c95rhyy9kd3xgfcsiu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Jtdgskj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0c95rhyy9kd3xgfcsiu5.png" alt="flex grow no"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;flex-grow: 1;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--muamUfeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn1vlba7dighd0k6ej5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--muamUfeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn1vlba7dighd0k6ej5.png" alt="Flex grow yes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#flex-basis"&gt;
  &lt;/a&gt;
  Flex Basis
&lt;/h4&gt;

&lt;p&gt;I am going to be honest I really didn't understand what flex basis was until I learned about this css snippet. But, this snippet is a perfect way to understand the concepts of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis"&gt;how it works&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Flex basis lets us define the &lt;em&gt;base&lt;/em&gt; or minimum size we want an element to be in a flex container. Whats nice about this is for scenarios where we won't know how many elements we're going to be styling in our list, we can treat the &lt;code&gt;flex-basis&lt;/code&gt; as our "default" size, and then with &lt;code&gt;flex-grow&lt;/code&gt;, if we have less items on the last line, they will fill up the remaining space and look nice. &lt;/p&gt;

&lt;p&gt;Without flex-basis or flex-grow:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_tzeDRZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoukaw5enadbwcdtuwkj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_tzeDRZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoukaw5enadbwcdtuwkj.png" alt="Without both"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With flex-basis, Without flex-grow&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-k2EVD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nape0ws77dd542088fg2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-k2EVD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nape0ws77dd542088fg2.png" alt="With Basis"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With both flex-basis and flex-grow&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---n_eEjuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdmid47ni7u88ui73nn2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---n_eEjuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdmid47ni7u88ui73nn2.png" alt="With Both"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Putting it all together in the long-form way, we have the the snippet again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/*  */&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 

  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-grow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-shrink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-basis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;225px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://flex-basis-fluid-layout-demo.stackblitz.io"&gt;The small demo again&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;All in all, I hope you can take these learnings and apply them to your web projects as you see fit. I hope you learned something new and if anything -- I hope have a better understanding of how flexbox works.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>flexbox</category>
      <category>ui</category>
      <category>html</category>
    </item>
  </channel>
</rss>
