<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Natural language search for blog posts using TensorflowJS</title>
      <author>George Griffiths</author>
      <pubDate>Thu, 22 Apr 2021 13:37:55 +0000</pubDate>
      <link>https://dev.to/griffadev/natural-language-search-for-blog-posts-using-tensorflowjs-a58</link>
      <guid>https://dev.to/griffadev/natural-language-search-for-blog-posts-using-tensorflowjs-a58</guid>
      <description>&lt;p&gt;In this post i'll go into how you can get started using pre-trained Tensorflow models to do Machine learning in the browser, examine some of the potential gotchas, such as not blocking the main thread with custom logic and consider the impact of the size of models on UX.&lt;/p&gt;

&lt;p&gt;The demo that I developed as part of this article is a "search engine" using my blog posts as a data set, which I converted into an API, the idea being: can I find blog posts based on a search query by a user, by comparing the similarity of the query with a blog posts title and description?&lt;/p&gt;

&lt;p&gt;Search is a solved problem and there are better ways of achieving the same thing, but I created this to learn and to have a bit of fun!&lt;/p&gt;

&lt;p&gt;If you want to check out a live demo for what I built in this post, I've &lt;a href="https://griffa.dev/experiments/natural-language-search/"&gt;hosted it on my website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--40CZ4KQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o468fqlxir5b3j79g1bh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--40CZ4KQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o468fqlxir5b3j79g1bh.png" alt="Screen capture of Natural language search demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sentence-similarity-with-tensorflowjs"&gt;
  &lt;/a&gt;
  Sentence similarity with TensorflowJS
&lt;/h2&gt;

&lt;p&gt;I'm going to explain how this all works with a smaller example rather than the full demo that I linked earlier, but the source code for the example is available on &lt;a href="https://github.com/Georgegriff/griffadev/tree/main/src/experiments/natural-language-search"&gt;Github&lt;/a&gt;, it's the same code, just with things like UI simplified.&lt;/p&gt;

&lt;p&gt;First up, let's load in the library we are going to use. We're just going to load them from a CDN, when you're just experimenting, you don't want to be messing around with build processes.&lt;/p&gt;

&lt;p&gt;Create a HTML file called &lt;code&gt;index.html&lt;/code&gt;, with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Blog post search&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/@tensorflow-models/universal-sentence-encoder"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're loading in two libraries here, the first is TensorflowJS and the second is a the Universal Sentence Encoder model, which uses TensforflowJS, you can read about &lt;a href="https://github.com/tensorflow/tfjs-models/tree/master/universal-sentence-encoder"&gt;over here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to code along, host your files on a local dev server. I personally recommend the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server VS Code extension&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, create &lt;code&gt;index.js&lt;/code&gt; add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// IIFE - because no top level await in all browsers at time of writing.&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// download the model&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;How I got started with 11ty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Building a responsive, progressively enhanced, masonry layout with only CSS and HTML&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Using the Web Share API and meta tags, for simple native sharing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tips for debugging in 11ty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sharing to social media&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// embed the user input and the blog posts using the model -  explained next!&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogPostsTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userInputTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;userQuery&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In Chrome, and other browsers soon, you won't need to wrap the code in an IIFE because you could use &lt;a href="https://caniuse.com/?search=top%20level%20await"&gt;top level await instead&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This code is loading the model, and then passing our &lt;code&gt;userQuery&lt;/code&gt; of "Sharing to social media" and our array of &lt;code&gt;blogPosts&lt;/code&gt; into the model. &lt;br&gt;
Doing this converts the sentences into vectors (arrays) with 512 entries in the vector for each sentence, this is how the model sees the sentence.&lt;br&gt;
Universal sentence encoder has been trained on a large vocabulary and is encoding the provided data based on the data it saw during training.&lt;/p&gt;

&lt;p&gt;To help make this a bit clearer, &lt;code&gt;blogPostsTensor&lt;/code&gt; and &lt;code&gt;userInputTensor&lt;/code&gt; will be an instance of &lt;a href="https://js.tensorflow.org/api/latest/#tensor2d"&gt;tensor2d&lt;/a&gt;.&lt;br&gt;
These are 2D arrays (on the GPU) with 512 entries in each of the arrays, which represents a provided phase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The following are example embedding output of 512 dimensions per sentence&lt;/span&gt;
&lt;span class="c1"&gt;// Embedding for user input: "Sharing to social media"&lt;/span&gt;
&lt;span class="c1"&gt;// userInputTensor = tf.tensor2d([[0.01305108  0.02235125 -0.03263278, ...]])&lt;/span&gt;
&lt;span class="c1"&gt;// Embedding for: I am a sentence for which I would like to get its embedding.&lt;/span&gt;
&lt;span class="c1"&gt;// blogPostsTensor = tf.tensor2d([[0.05833394 -0.0818501   0.06890938, ...], [0.05833394 -0.0818501   0.06890938, ...]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, in order to find potentially good results based our input sentence we need to check how similar our input vector is to the vectors of the blog post titles, we can achieve this by calculating Cosine Similarity between the vectors, which will give us a value between -1 and 1. 1 being most similar and -1 being not very similar at all.&lt;/p&gt;

&lt;p&gt;I'm not going to explain the mathematics of cosine similarity, but i've provided an implementation of it.&lt;br&gt;
If you want to know how it works, there are lots of great explanations on YouTube, &lt;a href="https://www.youtube.com/watch?v=5lvS8078ykA"&gt;such as this one.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Define these at the top of your index.js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// multiply with value with corresponding value in the other array at the same index, then sum.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotProduct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vector2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;vector1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;vector2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// square each value in the array and add them all up, then square root.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vectorMagnitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cosineSimilarity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vector2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dotProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vector2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vectorMagnitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;vectorMagnitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I tried to implement this maths purely in TensorflowJS, so that I could take advantage of the GPU, but after much trial and error, I could not find a solution. If anyone knows how to do this I'd love to hear about it. Doing this calculation myself is performing a large tradeoff of having these calculations happen on the main thread, which can cause bad UX, i'll explain this in more detail towards the end of the post, including ways around this.&lt;/p&gt;

&lt;p&gt;Now lets use the functions in our code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// download the model&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;How I got started with 11ty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Building a responsive, progressively enhanced, masonry layout with only CSS and HTML&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Using the Web Share API and meta tags, for simple native sharing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tips for debugging in 11ty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sharing to social media&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// embed the user input and the blog posts using the model -  explained next!&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogPostsTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// wrap the user input in an array so model can work with it&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userInputTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;userQuery&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="c1"&gt;// == New code starts here //&lt;/span&gt;
    &lt;span class="c1"&gt;// convert to JS arrays from the tensors&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputVector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;userInputTensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataVector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;blogPostsTensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// this is an array of arrays, we only care about one piece of user input, one search query so&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userQueryVector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputVector&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// how many results do i want to show&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MAX_RESULTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// loop through the blog  post data&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dataVector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dataEntry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataEntryIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// COSINE SIMILARITY - compare the user input tensor with each blog post.&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;similarity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cosineSimilarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userQueryVector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataEntry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dataEntryIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// sort descending&lt;/span&gt;
      &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;similarity&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MAX_RESULTS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#initial-example-results&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the last line of the above example we're updating the text of an element with id "initial-example-results", to make this work, let's add the following to your html file, inside the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This will take a few moments for the model to load and run. Query: "Sharing to social media"&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pre&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"initial-example-results"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a link to the code we've built so far: &lt;a href="https://codesandbox.io/s/tensorflow-js-hardcoded-blog-search-0q5o9"&gt;https://codesandbox.io/s/tensorflow-js-hardcoded-blog-search-0q5o9&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turning-posts-into-an-api"&gt;
  &lt;/a&gt;
  Turning posts into an API
&lt;/h2&gt;

&lt;p&gt;My blog is written using the static site generator tool Eleventy. If you haven't heard of &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt; and you're into building fast websites, seriously check it out, it's awesome. I'm not going to explain how Eleventy works, but I wrote a post about how &lt;a href="https://griffa.dev/posts/how-i-got-started-with-11ty/"&gt;I got started with Eleventy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create an API out of my blog posts I generate a JSON file in the form of a &lt;a href="https://jsonfeed.org/"&gt;JSON Feed&lt;/a&gt;, which can be hosted on my server.&lt;/p&gt;

&lt;p&gt;Here's my template for my json feed, this template is based on the &lt;a href="https://github.com/11ty/eleventy-base-blog"&gt;11ty base blog&lt;/a&gt;. The  templating syntax being used is Nunjucks, and comes supported out of the box with Eleventy.&lt;/p&gt;

&lt;p&gt;If you are curious and want to check out the source code of my blog it's over here on &lt;a href="https://github.com/Georgegriff/griffadev"&gt;Github&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;--------
# Metadata comes from _data/metadata.json
permalink: "{{ metadata.jsonfeed.path | url }}"
eleventyExcludeFromCollections: true
--------
{
  "version": "https://jsonfeed.org/version/1",
  "title": "{{ metadata.title }}",
  "home_page_url": "{{ metadata.url }}",
  "feed_url": "{{ metadata.jsonfeed.url }}",
  "description": "{{ metadata.description }}",
  "author": {
    "name": "{{ metadata.author.name }}",
    "url": "{{ metadata.author.url }}"
  },
  "items": [
    {%- for post in collections.posts | reverse %}
    {%- set absolutePostUrl %}{{ post.url | url | absoluteUrl(metadata.url) }}{% endset -%}
    {
      "id": "{{ absolutePostUrl }}",
      "url": "{{ absolutePostUrl }}",
      "title": "{{ post.data.title }}",
      "tags": [
        {%- for tag in helpers.removeCollectionTags(post.data.tags) -%}
          "{{tag}}"
          {%- if not loop.last %}, {%- endif %}
        {%- endfor %}],
      "summary": "{{ post.data.description }}",
      "content_html": {% if post.templateContent %}{{ post.templateContent | dump | safe }}{% else %}""{% endif %},
      "date_published": "{{ post.date | rssDate }}"
    }
    {%- if not loop.last -%}
    ,
    {%- endif -%}
    {%- endfor %}
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This template is iterating through my blog posts and populating a JSON array with post data, as well as some other site metadata, ultimately the result is a JSON file which i can request on my server: &lt;a href="https://griffa.dev/feed/feed.json"&gt;https://griffa.dev/feed/feed.json&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now I have an API which I can use in my search, success!&lt;/p&gt;

&lt;p&gt;We can now update our code  sample to pull data from this api instead of hard-coding it.&lt;br&gt;
Add this function to the top of "index.js".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadBlogPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://griffa.dev/feed/feed.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* search on title and summary */&lt;/span&gt;
        &lt;span class="na"&gt;searchData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;summary&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;How I got started with 11ty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Building a responsive, progressively enhanced, masonry layout with only CSS and HTML&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Using the Web Share API and meta tags, for simple native sharing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tips for debugging in 11ty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="nx"&gt;loadBlogPosts&lt;/span&gt;&lt;span class="p"&gt;()]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also  replace&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogPostsTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogPostsTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;searchData&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;searchData&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a link to the code we've built so far: &lt;a href="https://codesandbox.io/s/tensorflow-js-blog-search-3k7x2"&gt;https://codesandbox.io/s/tensorflow-js-blog-search-3k7x2&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ml-in-the-browser-why"&gt;
  &lt;/a&gt;
  ML in the browser, why?
&lt;/h2&gt;

&lt;p&gt;Hopefully the examples so far have made sense, I thought i'd take a moment to talk about some of benefits and tradeoffs of doing Machine learning in the browser with TensorflowJS.&lt;/p&gt;

&lt;p&gt;One of the first things you might think of when you think Machine learning in JavaScript is it's slow, well that's where one of the great things about TensorflowJS comes in, it performs all of its expensive calculations on the GPU, under the hood it's utilising WebGL shader programs to achieve this.&lt;/p&gt;

&lt;p&gt;Running Machine learning in the browser opens up the possibilities of offering Machine learning in applications without needing to build complex server architectures, or learning another language. It also means that it's possible to provide on-device Machine learning to users, without their data ever hitting  a server.&lt;/p&gt;

&lt;p&gt;One of the other great things about the JavaScript ecosystem is its ability to not just run in the browser, but on the server too, with NodeJS. TensorflowJS is also available in Node JS, where it can be bound directly to the Tensorflow API, the same API that the python implementations of the library consume. I've considered the possibility of modifying my experiment in this blog post so that when I generate my static site at build time with Eleventy, I could run the model against my data and pre-generate the data for my blog posts, that might be cool.&lt;/p&gt;

&lt;p&gt;The final great thing is that it is possible to convert/re-use models created by the other Tensorflow ecosystems (Python etc) so that they run in the browser.&lt;/p&gt;

&lt;p&gt;Now for one of the big trade offs, Machine learning models can be large, there is a lot of work going to make these models smaller and smaller, but the model used in this demo for example is approximately 28 MB. To be fair, for a general purpose natural language model, this is quite impressively small. Many of these models, are split into chunks so that the model can be downloaded in parallel, which improves things a bit. This tradeoff might be acceptable if it unlocks the ability to provide a good enough UX, without the need to hit a server, which once the model is downloaded can be lightning fast. The model can only be as fast the end-user machine it's running on, which, especially on mobile, can vary dramatically.&lt;/p&gt;

&lt;p&gt;In applications you might be able to do some different things to make this tradeoff worth it, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enabling good caching headers&lt;/li&gt;
&lt;li&gt;Using service workers to background fetch and cache the model, and enable the feature&lt;/li&gt;
&lt;li&gt;Allowing users to opt in/out&lt;/li&gt;
&lt;li&gt;Offer the feature as a progressive enhancement that enables once downloaded&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oseNJO1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lcts5rszpshsrrewimw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oseNJO1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lcts5rszpshsrrewimw.png" alt="Chrome network panel showing model chunks downloading."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the above tradeoffs in mind it might, or might not, make sense to do ML in the browser. Where you need to try and run your models immediately as the site/app loads, or end user device constraints are a problem, maybe server side is the better choice.&lt;/p&gt;

&lt;p&gt;When using JavaScript it's always important to not block the main thread, I mentioned above that Tensorflow utilises the GPU for its calculations, but as soon as you stop using its API you're back in the JS main thread, and if you perform expensive calculations there ,you are at risk of providing a bad UX to your users.&lt;/p&gt;

&lt;p&gt;The sample in this post is guilty of this, when performing the &lt;code&gt;cosineSimilarity&lt;/code&gt; calculations, let's fix it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unblocking-the-main-thread"&gt;
  &lt;/a&gt;
  Unblocking the main thread
&lt;/h2&gt;

&lt;p&gt;In the browser you can create additional threads called "Workers", these are isolated threads, that do not have access to any DOM APIs, or variables in the main thread.&lt;br&gt;
The only way to communicate between the main thread is via &lt;code&gt;postMessage&lt;/code&gt;, which can be cumbersome.&lt;/p&gt;

&lt;p&gt;There is an absolutely fantastic library &lt;a href="https://www.npmjs.com/package/comlink"&gt;Comlink&lt;/a&gt; that makes working with Worker threads basically invisible, it allows you to work with functions as if they were on the main thread, I believe it achieves this using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;Proxy&lt;/a&gt; objects, hiding the need to work with postMessage directly 🎉.&lt;/p&gt;

&lt;p&gt;Let's convert our example to use Comlink and move our maths off the main thread.&lt;/p&gt;

&lt;p&gt;We're going to import the Tensorflow libraries in our worker instead so your HTML should look like this.&lt;/p&gt;

&lt;p&gt;Let's also add in some user input, to make the demo a bit more spicy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Blog post search&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"query"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Search&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;pre&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"initial-example-results"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, delete all of the code in "index.js". Now in "index.js" lets add the code to work with our new "worker.js" file and update the UI.&lt;/p&gt;

&lt;p&gt;We're going to add all of the same code, except this time, expose a function called "search" which returns our predictions.&lt;br&gt;
There are few other changes too, such as using importScripts to import the libraries into the Worker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;importScripts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://unpkg.com/comlink/dist/umd/comlink.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;importScripts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;importScripts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.jsdelivr.net/npm/@tensorflow-models/universal-sentence-encoder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadBlogPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// fetch + cache comparison data&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://griffa.dev/feed/feed.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;searchData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;summary&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="nx"&gt;loadModel&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="nx"&gt;loadBlogPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//// cosine similarity fns&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotProduct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vector2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;vector1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;vector2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vectorMagnitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cosineSimilarity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vector2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dotProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vector2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vectorMagnitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;vectorMagnitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;////&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogPostsTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;searchData&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;searchData&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userInputTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;userQuery&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputVector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;userInputTensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataVector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;blogPostsTensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="cm"&gt;/* this is an array of arrays, we only care about one piece of user input, one search query so */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userQueryVector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputVector&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="cm"&gt;/* how many results do i want to show */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MAX_RESULTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="cm"&gt;/* loop through the blog  post data */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dataVector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dataEntry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataEntryIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/* compare the user input tensor with tensor of a blog post. */&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;similarity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cosineSimilarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userQueryVector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataEntry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dataEntryIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="cm"&gt;/* sort descending */&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;similarity&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MAX_RESULTS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;load&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* expose the SearchService api to comlink */&lt;/span&gt;
&lt;span class="nx"&gt;Comlink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SearchService&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's use our new &lt;code&gt;SearchService&lt;/code&gt; in "index.js".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Comlink&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://unpkg.com/comlink@4.3.0/dist/esm/comlink.min.mjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Comlink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#initial-example-results&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loading model...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;SearchService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#search input[name="query"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#search button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#initial-example-results&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Model loaded, try out some queries e.g. Building a blog with JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#search&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#initial-example-results&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Searching...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;SearchService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#initial-example-results&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you load this demo code up in the browser you should get similar result to before, but with the heavy-work offloaded to a Worker thread.&lt;/p&gt;

&lt;p&gt;Here's a live demo project for reference: &lt;a href="https://codesandbox.io/s/tensorflow-js-with-web-workers-blog-searching-1shbq"&gt;https://codesandbox.io/s/tensorflow-js-with-web-workers-blog-searching-1shbq&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully you can see from the example how you can offload work into a worker using Comlink, you can also build for production using popular tools such as Rollup, but I won't cover that here.&lt;/p&gt;

&lt;p&gt;One of the neat things about using Worker threads is because they don't have access to the DOM you are forced to separate your application logic from your UI, making your code more modular and reusable in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-thoughts"&gt;
  &lt;/a&gt;
  Future thoughts
&lt;/h2&gt;

&lt;p&gt;In case you missed the links earlier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source code: &lt;a href="https://github.com/Georgegriff/griffadev/tree/main/src/experiments/natural-language-search"&gt;https://github.com/Georgegriff/griffadev/tree/main/src/experiments/natural-language-search&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Demo: &lt;a href="https://griffa.dev/experiments/natural-language-search/"&gt;https://griffa.dev/experiments/natural-language-search/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I was to continue this idea through i'd probably explore some of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making the code more production ready using module imports and a build tool chain.&lt;/li&gt;
&lt;li&gt;Investigate ways to use TensorflowJS at build time of my blog to pre-calculate embeddings for posts.&lt;/li&gt;
&lt;li&gt;See if there is in-fact ways to doo cosine similarity directly in TensorflowJS, again, i'd love to know if anybody knows how!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope to continue my Machine learning journey, I have some other blog related ideas that I might try to explore in the future:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recommending similar blog posts&lt;/li&gt;
&lt;li&gt;Text summary generation of blog posts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm fairly early on in my AI learning journey, but one of the initial resources that helped me out and inspired me was watching content from &lt;a href="https://twitter.com/jlengstorf"&gt;Jason Lengstorf&lt;/a&gt; from his &lt;a href="https://www.learnwithjason.dev/"&gt;Learn with Jason&lt;/a&gt; series, which I highly recommend. One of the truly awesome things about this series is closed captioning is provided, making this content more accessible to everybody 🎉.&lt;/p&gt;

&lt;p&gt;At the time of writing there are 3 sessions relating to Machine Learning and TensorflowJS, here is one of them:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WIHZ7kjJ35o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope this was a good read, if you feel like reading more of my work, please follow me on Twitter &lt;a href="https://twitter.com/griffadev"&gt;@griffadev&lt;/a&gt;, or get me a &lt;a href="https://ko-fi.com/griffadev"&gt;coffee&lt;/a&gt; if you feel like it ☕.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>machinelearning</category>
      <category>tensorflowjs</category>
      <category>11ty</category>
    </item>
    <item>
      <title>13 Accessibility Resources For Web designers</title>
      <author>Pawan Bhayde</author>
      <pubDate>Thu, 22 Apr 2021 12:51:18 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/13-accessibility-resources-for-web-designers-2ga4</link>
      <guid>https://dev.to/pawanbhayde/13-accessibility-resources-for-web-designers-2ga4</guid>
      <description>&lt;p&gt;&lt;strong&gt;Accessibility&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.getstark.co/"&gt;Stark&lt;/a&gt;&lt;br&gt;
Color-blind simulator and contrast checker&lt;/p&gt;

&lt;p&gt;&lt;a href="http://colorsafe.co/"&gt;Color Safe&lt;/a&gt;&lt;br&gt;
Build accessible colour combinations&lt;/p&gt;

&lt;p&gt;&lt;a href="https://usecontrast.com/"&gt;Contrast&lt;/a&gt;&lt;br&gt;
A macOS app for quick access to WCAG color contrast ratios&lt;/p&gt;

&lt;p&gt;&lt;a href="https://color.review/"&gt;Color Review&lt;/a&gt;&lt;br&gt;
A modern tool for exploring and finding accessible colors&lt;/p&gt;

&lt;p&gt;&lt;a href="https://colorable.jxnblk.com/"&gt;Colorable&lt;/a&gt;&lt;br&gt;
Test and use color combinations that are accessible&lt;/p&gt;

&lt;p&gt;&lt;a href="https://a11yproject.com/"&gt;A11y Project&lt;/a&gt;&lt;br&gt;
Community-driven effort to make web accessibility easier&lt;/p&gt;

&lt;p&gt;&lt;a href="https://contrast-grid.eightshapes.com/"&gt;Contrast Grid&lt;/a&gt;&lt;br&gt;
Test many color combinations for WCAG 2.0 compliance&lt;/p&gt;

&lt;p&gt;&lt;a href="https://clrs.cc/a11y"&gt;90 Colors&lt;/a&gt;&lt;br&gt;
A free collection of accessible color themes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://whocanuse.com/"&gt;Who Can Use&lt;/a&gt;&lt;br&gt;
Accessible color combination tester with different scenarios&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.colorbox.io/"&gt;Colorbox&lt;/a&gt;&lt;br&gt;
Produce accessible color sets&lt;/p&gt;

&lt;p&gt;&lt;a href="https://colororacle.org/"&gt;Color Oracle&lt;/a&gt;&lt;br&gt;
Free color blindness simulator&lt;/p&gt;

&lt;p&gt;&lt;a href="https://michelf.ca/projects/sim-daltonism"&gt;Sim Daltonism&lt;/a&gt;&lt;br&gt;
A color blindness simulator&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abc.useallfive.com/"&gt;Accessible Brand Colors&lt;/a&gt;&lt;br&gt;
Create ADA compliant colors&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hopefully its helpful for you&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Note:- visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pawanbhayde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FR7dkKNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--cc4jqEtb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616392/56aa242b-7e08-47cb-be8f-0b8767227b61.png" alt="pawanbhayde image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pawanbhayde/microsoft-homepage-clone-using-only-html-and-css-15jn" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Microsoft HomePage Clone Using Only HTML And CSS&lt;/h2&gt;
      &lt;h3&gt;Pawan Bhayde ・ Apr 21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>design</category>
      <category>uiweekly</category>
      <category>ux</category>
    </item>
    <item>
      <title>Playing with Twilio's OpenAPI specifications</title>
      <author>Paul B.</author>
      <pubDate>Thu, 22 Apr 2021 12:46:47 +0000</pubDate>
      <link>https://dev.to/bump/playing-with-twilio-s-openapi-specifications-552n</link>
      <guid>https://dev.to/bump/playing-with-twilio-s-openapi-specifications-552n</guid>
      <description>&lt;p&gt;This week, &lt;a href="https://www.twilio.com/blog/introducing-twilio-open-api-specification-beta"&gt;Twilio published OpenAPI definitions&lt;/a&gt; for all of their APIs. Let's see together the small steps we can take to transform those definitions into a nice looking API Reference documentation page which tracks API changes automatically.&lt;/p&gt;

&lt;p&gt;If you wonder what Twilio is, here's a paragraph taken from their about page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Twilio has democratized communications channels like voice, text, chat, video, and email by virtualizing the world’s communications infrastructure through APIs that are simple enough for any developer to use, yet robust enough to power the world’s most demanding applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Note: this is an experiment demonstration which is not endorsed, nor affiliated by, the Twilio company.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition-files-hierarchy"&gt;
  &lt;/a&gt;
  Definition files hierarchy
&lt;/h2&gt;

&lt;p&gt;First let's take a look at &lt;a href="https://github.com/twilio/twilio-oai"&gt;the repository with their published files&lt;/a&gt;. The OpenAPI definition files are available in the &lt;code&gt;spec/&lt;/code&gt; folder in both JSON or YAML formats. Here's a sneak peek of some of the JSON files available:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;spec/
└── json/
    ├── twilio_accounts_v1.json
    ├── twilio_chat_v2.json
    ├── twilio_conversations_v1.json
    ├── twilio_events_v1.json
    ├── twilio_fax_v1.json
    ├── twilio_messaging_v1.json
    ├── twilio_notify_v1.json
    ├── twilio_numbers_v2.json
    ├── twilio_verify_v2.json
    ├── twilio_video_v1.json
    ├── twilio_voice_v1.json
    └── …
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;At first glance we can imagine a quick way of generating the documentation pages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  For each file from the available &lt;code&gt;*.json&lt;/code&gt; files

&lt;ul&gt;
&lt;li&gt;  Extract the API name from filename &lt;code&gt;twilio_&amp;lt;api_name&amp;gt;_vN.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Create documentation &lt;code&gt;api_name&lt;/code&gt; from the api definition file &lt;code&gt;twilio_&amp;lt;api_name&amp;gt;_vN.json&lt;/code&gt; within a &lt;a href="https://bump.sh/#hubs"&gt;single Hub&lt;/a&gt; named Twilio&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Enjoy the result and customise the UI!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#automatically-publish-the-documentation-on-changes"&gt;
  &lt;/a&gt;
  Automatically publish the documentation on changes
&lt;/h2&gt;

&lt;p&gt;In order to demonstrate the magic on each commit I've forked their repository &lt;a href="https://github.com/paulRbr/twilio-oai"&gt;on my Github namespace&lt;/a&gt; where I will be able to push to my &lt;code&gt;main&lt;/code&gt; branch and use Github Actions on my fork.&lt;/p&gt;

&lt;p&gt;Now let's write a tiny shell script &lt;em&gt;- Don't worry it's only an experiment -&lt;/em&gt; which will do what we imagined in the previous paragraph:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env sh&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-eu&lt;/span&gt;

&lt;span class="c"&gt;# Install bump-cli (published as a Ruby gem)&lt;/span&gt;
gem &lt;span class="nb"&gt;install &lt;/span&gt;bump-cli

&lt;span class="c"&gt;# For each file from the available `*.json` files&lt;/span&gt;
&lt;span class="k"&gt;for &lt;/span&gt;api &lt;span class="k"&gt;in &lt;/span&gt;spec/json/&lt;span class="k"&gt;*&lt;/span&gt;.json&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c"&gt;# Extract the API name from filename `twilio_&amp;lt;api_name&amp;gt;_vN.json`&lt;/span&gt;
    &lt;span class="nv"&gt;apiName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;api&lt;/span&gt;&lt;span class="p"&gt;%_*&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c"&gt;# remove everything after the last '_'&lt;/span&gt;
    &lt;span class="nv"&gt;apiName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;apiName&lt;/span&gt;&lt;span class="p"&gt;#*_&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c"&gt;# remove everything before the first '_'&lt;/span&gt;

    &lt;span class="c"&gt;# Auto-create documentation &amp;lt;apiName&amp;gt; from the api definition file&lt;/span&gt;
    &lt;span class="c"&gt;# in the 'twilio' hub&lt;/span&gt;
    bump deploy &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;--doc&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;apiName&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;--token&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUMP_TOKEN&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;--hub&lt;/span&gt; twilio &lt;span class="nt"&gt;--auto-create&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;api&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;bump deploy&lt;/code&gt; command is where all the magic happens: it will push the api definition file to generate its documentation on Bump. By passing the &lt;code&gt;--auto-create&lt;/code&gt; flag together with the &lt;code&gt;--hub twilio&lt;/code&gt; and &lt;code&gt;--doc ${apiName}&lt;/code&gt; flags we are going to &lt;strong&gt;create&lt;/strong&gt; a documentation called &lt;code&gt;${apiName}&lt;/code&gt; &lt;strong&gt;if it doesn't exist&lt;/strong&gt;. On all future changes of the definition files, it will simply be &lt;strong&gt;updated&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And now the Github Action workflow to use the script above on each commit of the &lt;code&gt;main&lt;/code&gt; branch of our git repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy twilio API documentations on Bump&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;deploy-doc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ruby/setup-ruby@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;ruby-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.7&lt;/span&gt;
          &lt;span class="na"&gt;bundler-cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sh ./.github/scripts/deploy-all.sh&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;BUMP_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.BUMP_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are almost there! You might notice we are using a &lt;code&gt;secrets.BUMP_TOKEN&lt;/code&gt; variable which needs to be added in the settings of my Github repository. Let's get our hub access token from Bump.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-twilio-hub-page-on-bumpsh"&gt;
  &lt;/a&gt;
  Creating the Twilio hub page on Bump.sh
&lt;/h2&gt;

&lt;p&gt;OK let's leave the terminal and head to my &lt;a href="https://bump.sh/docs"&gt;Bump.sh&lt;/a&gt; account in order to &lt;a href="https://bump.sh/blog/organize-your-api-documentation-with-bump-hubs#creating-a-hub"&gt;create the hub&lt;/a&gt;. I'm headed to &lt;a href="https://bump.sh/hubs/new"&gt;bump.sh/hubs/new&lt;/a&gt; to do so.&lt;/p&gt;

&lt;p&gt;Now my hub is created, I can retrieve my &lt;code&gt;hub token&lt;/code&gt; from my hub &lt;code&gt;Settings &amp;gt; CI deployment&lt;/code&gt;  page&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QXnQ5MtY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/twilio-hub/twilio-hub-token.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QXnQ5MtY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/twilio-hub/twilio-hub-token.png" alt="" title="Hub token for CI deployments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And adding the token to my Github repository secrets at the following location: &lt;a href="https://github.com/paulRbr/twilio-oai/settings/secrets/actions"&gt;https://github.com/paulRbr/twilio-oai/settings/secrets/actions&lt;/a&gt; &lt;em&gt;(Don't forget to change your project namespace in the URL if you're trying it out)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRPcODDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/twilio-hub/github-repository-secrets-bump-token.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRPcODDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/twilio-hub/github-repository-secrets-bump-token.png" alt="" title="Github `secrets.BUMP_TOKEN`"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are now ready to push our two files &lt;em&gt;- the sh script and the Github Action workflow -&lt;/em&gt; of the previous paragraph.&lt;/p&gt;

&lt;p&gt;Shall we try to &lt;code&gt;git push origin main&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rSk5xE-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/twilio-hub/github-action-twilio-deploy-all.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rSk5xE-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/twilio-hub/github-action-twilio-deploy-all.png" alt="" title="Github Action publish API documentation on Bump.sh"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The screenshot above shows the &lt;a href="https://github.com/paulRbr/twilio-oai/actions/runs/766705170"&gt;Github Action logs that ran successfully&lt;/a&gt; on my &lt;code&gt;main&lt;/code&gt; branch after pushing. We can see everything seems to have worked as expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refining-the-resulting-twilio-api-reference-hub"&gt;
  &lt;/a&gt;
  Refining the resulting Twilio API reference hub
&lt;/h2&gt;

&lt;p&gt;It's live! &lt;a href="https://bump.sh/hub/twilio/"&gt;https://bump.sh/hub/twilio/&lt;/a&gt; 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OYp328oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/twilio-hub/twilio-hub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OYp328oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/twilio-hub/twilio-hub.png" alt="" title="Twilio API reference Hub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result is already pretty nice. We can browse each API documentation and have a good overview of what Twilio's API can offer. Let's see what we can change on Bump and in Twilio's definition files to make it even better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grouping-by-categories-and-ui-customisation"&gt;
  &lt;/a&gt;
  Grouping by categories and UI customisation
&lt;/h2&gt;

&lt;p&gt;Here are some of the configuration option I changed in my hub settings page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the grouping mode of API docs to “by category” from the hub &lt;code&gt;Settings &amp;gt; Customize UI&lt;/code&gt; page&lt;/li&gt;
&lt;li&gt;Adding a category to each documentation from their respective &lt;code&gt;Settings &amp;gt; Hubs settings&lt;/code&gt; page

&lt;ul&gt;
&lt;li&gt;Moving the main &lt;code&gt;api&lt;/code&gt; documentation into a dedicated category called &lt;strong&gt;“Main”&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Moving all docs containing the word &lt;code&gt;TODO:&lt;/code&gt; into a dedicated &lt;strong&gt;“Todo”&lt;/strong&gt; category (Might be useful for the Twilio dev team to track which api definition files needs attention)&lt;/li&gt;
&lt;li&gt;Moving all tools related docs into a category &lt;strong&gt;“Tools”&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;All the other docs will land in a category that I named &lt;strong&gt;“Uncategorized”&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Changing the hub defaults from the &lt;code&gt;Default settings&lt;/code&gt; page, which will apply to all documentations of that hub

&lt;ul&gt;
&lt;li&gt;Uploading Twilio's logo&lt;/li&gt;
&lt;li&gt;Change the color scheme to red&lt;/li&gt;
&lt;li&gt;Change default navigation to &lt;code&gt;Groups and operations with verbs&lt;/code&gt; to display all API operations with their associated HTTP verb in the navigation bar of each documentation page&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HC2RlLVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/twilio-hub/twilio-hub-customized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HC2RlLVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/twilio-hub/twilio-hub-customized.png" alt="" title="Twilio API reference Hub customized"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-the-api-definition-files"&gt;
  &lt;/a&gt;
  Updating the api definition files
&lt;/h2&gt;

&lt;p&gt;Now the hub is looking all good. We can get back to API definitions in our favorite text editor.&lt;/p&gt;

&lt;p&gt;To demonstrate the automatic documentation updates I have &lt;a href="https://github.com/paulRbr/twilio-oai/commit/02bb6c99721372e1516b8c1fc1ce4594ece23814"&gt;commited some changes&lt;/a&gt; on all API &lt;code&gt;*.json&lt;/code&gt; files. The goal was to change their &lt;code&gt;description&lt;/code&gt; fields and mark all docs as “unofficial” to not confuse end-users.&lt;/p&gt;

&lt;p&gt;After 1min our Github Action workflow reports &lt;a href="https://github.com/paulRbr/twilio-oai/runs/2401968115"&gt;a successful run&lt;/a&gt;. Meaning our hub and all subsequent documenation pages have been updated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://bump.sh/hub/twilio/"&gt;https://bump.sh/hub/twilio/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YyudQqyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/twilio-hub/twilio-hub-final.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YyudQqyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/twilio-hub/twilio-hub-final.png" alt="" title="Twilio API reference Hub final"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's about it. If you have a set of different APIs and need a centralised public page for your docs Bump can help you out. &lt;a href="https://bump.sh/users/sign_in"&gt;Give it a try&lt;/a&gt; and &lt;a href="//mailto:hello@bump.sh"&gt;let us know&lt;/a&gt; what you think or how we can improve to better fit your needs.&lt;/p&gt;

&lt;p&gt;Have fun, stay free and stay kind.&lt;/p&gt;

&lt;p&gt;✨&lt;/p&gt;

</description>
      <category>experiment</category>
      <category>openapi</category>
      <category>documentation</category>
    </item>
    <item>
      <title>JavaScript Interview Question #35: What is faster, zero timeout, or immediate resolve?</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Thu, 22 Apr 2021 12:25:30 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-35-what-is-faster-zero-timeout-or-immediate-resolve-3agl</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-35-what-is-faster-zero-timeout-or-immediate-resolve-3agl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uotiuJT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uotiuJT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-35.png" alt="js-test-35"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's the order of the output?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;Promise.resolve&lt;/code&gt; are asynchronous actions, which means that the inner &lt;code&gt;console.log&lt;/code&gt; statements will be evaluated after some delay.&lt;/p&gt;

&lt;p&gt;The difference is that &lt;code&gt;Promise.resolve&lt;/code&gt; schedules the microtask, and &lt;code&gt;setTimeout&lt;/code&gt; schedules the macrotask. Micro tasks have higher priority than macrotasks, thus &lt;code&gt;Promise.resolve&lt;/code&gt; will be evaluated faster and the first output will be &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: &lt;code&gt;2&lt;/code&gt; will be printed on the first line, followed by &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com/sign-in"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS Only Dog Walk Puzzle Simple Game</title>
      <author>Takane Ichinose</author>
      <pubDate>Thu, 22 Apr 2021 12:22:24 +0000</pubDate>
      <link>https://dev.to/takaneichinose/css-only-dog-walk-puzzle-simple-game-5d32</link>
      <guid>https://dev.to/takaneichinose/css-only-dog-walk-puzzle-simple-game-5d32</guid>
      <description>&lt;h1&gt;CodepenChallenge On and Off&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;I hope this is considered as microinteractions. 😅&lt;/p&gt;

&lt;p&gt;This game is full of hidden radio buttons, and checkboxes inside.&lt;/p&gt;

&lt;p&gt;CSS only simple game built with Pug, SCSS, and pixel-art images.&lt;/p&gt;

&lt;p&gt;I actually intended to draw a cat, but when I tried, the result looked like a dog, so I decided to make this game a 'dog' game.&lt;/p&gt;

&lt;p&gt;When one of the radios/checkboxes was ticked, the controls will hide/show depends on the condition.&lt;/p&gt;

&lt;p&gt;I thought of this game because in recent times, the switches element are created by hidden checkboxes anyway.&lt;/p&gt;

&lt;p&gt;There are actually many rendered controllers on the DOM, but are just hidden.&lt;/p&gt;

&lt;p&gt;The Dog is also animated when moving. Although the dog stays at the center while moving.&lt;/p&gt;

&lt;p&gt;The actual moving objects are the background. Which I also used parallax to animate. The 'farthest' object moves slower than the 'nearest' object. Which covers the 'parallax effect'.&lt;/p&gt;

&lt;p&gt;Recently, I've been studying the ways to draw a pixel art. Which I found interesting.&lt;/p&gt;




&lt;h2&gt;Controls&lt;/h2&gt;

&lt;p&gt;Although stated at the instructions, here is how to control the game:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;At the bottom right of the screen, the ▷ (Triangle facing right) icon will make you move to the right.&lt;/li&gt;
&lt;li&gt;At the bottom right of the screen, the ◁ (Triangle facing left) icon will make you move to the left.&lt;/li&gt;
&lt;li&gt;At the bottom left of the screen, the fang or tooth or whatever icon will make you interact with the object.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Objective&lt;/h2&gt;

&lt;p&gt;Because this is just a simple game, there aren't that much puzzles that will make you think.&lt;/p&gt;

&lt;p&gt;Just move further, take away the obstacle, and get the bone. Simple isn't it?&lt;/p&gt;




&lt;h2&gt;Tools&lt;/h2&gt;

&lt;p&gt;This game doesn't have any Javascript code for the functionality (Except the comment, and Pug's (or Jade) Javascript). But heavily relies on &lt;a href="https://sass-lang.com/"&gt;SCSS&lt;/a&gt;' loop, which makes the SCSS code so large when compiled.&lt;/p&gt;

&lt;p&gt;I used &lt;a href="https://www.getpaint.net/"&gt;Paint.NET&lt;/a&gt; to draw the assets.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/takaneichinose/embed/LYxgvQW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>webdev</category>
      <category>gamedev</category>
      <category>css</category>
    </item>
    <item>
      <title>DISCUSS: JavaScript just DIED! What language should replace it?</title>
      <author>Naseki</author>
      <pubDate>Thu, 22 Apr 2021 12:18:25 +0000</pubDate>
      <link>https://dev.to/naseki/discuss-javascript-just-died-what-language-should-replace-it-2ak5</link>
      <guid>https://dev.to/naseki/discuss-javascript-just-died-what-language-should-replace-it-2ak5</guid>
      <description>&lt;p&gt;People usually have a love-hate relationship with JavaScript. It's got its beauty and its unavoidable quirks. We're all familiar with them. We can't deny that it's been an absolute powerhouse for the web, though.&lt;/p&gt;

&lt;p&gt;You'll always find Js in the top 10 or even top 5 lists of most popular programming languages. It's also the #1 topic on dev.to!&lt;/p&gt;

&lt;p&gt;But what if all of that suddenly went, like, POOF! 👻&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#now-now-wheres-this-coming-from"&gt;
  &lt;/a&gt;
  Now now, where's this coming from?
&lt;/h1&gt;

&lt;p&gt;First of all, special thanks to &lt;a class="mentioned-user" href="https://dev.to/technoglot"&gt;@technoglot&lt;/a&gt;
 for the inspiration!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/technoglot" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lh6IYNlR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--sRtmRRW_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/430182/1ae1b206-5ef0-4d89-85eb-08fc33ba191f.jpg" alt="technoglot image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/technoglot/javascript-is-dead-14bm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JavaScript is DEAD 💀&lt;/h2&gt;
      &lt;h3&gt;Amelia Vieira Rosado ・ Apr  9 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Her article asked this simple question: What would your tech stack look like if JavaScript didn't exist?&lt;/p&gt;

&lt;p&gt;I'm a webdeveloper through and through. Naturally, I'd start unpacking all CSS-only solutions! However, I started thinking more about the implications of JavaScript's death, like...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%E2%9C%8D-comment-below-answering-the-following-question"&gt;
  &lt;/a&gt;
  ✍ Comment below answering the following question
&lt;/h1&gt;

&lt;p&gt;If JavaScript stopped existing, &lt;strong&gt;what language do you think should replace it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, I understand that some programming languages aren't quite ready for things like DOM manipulation and such. Imagine these things would be implemented into said languages.&lt;/p&gt;

&lt;p&gt;Or perhaps you have a better version of JavaScript in mind? 😮☝ Let me know! &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ciETrbsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa0hfs0886uf0g7c0b7e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciETrbsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa0hfs0886uf0g7c0b7e.png" alt="Naseki logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Naseki_"&gt;Twitter&lt;/a&gt; | &lt;a href="https://naseki.com"&gt;Website&lt;/a&gt; | &lt;a href="https://buttondown.email/Naseki/"&gt;Newsletter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>From Zero to Hero (▀̿Ĺ̯▀̿ ̿) in Authentication | Part 1</title>
      <author>Kushagra Mehta</author>
      <pubDate>Thu, 22 Apr 2021 12:14:03 +0000</pubDate>
      <link>https://dev.to/kushagra_mehta/from-zero-to-hero-l-in-authentication-part-1-38od</link>
      <guid>https://dev.to/kushagra_mehta/from-zero-to-hero-l-in-authentication-part-1-38od</guid>
      <description>&lt;h1&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h1&gt;

&lt;p&gt;First focus on &lt;strong&gt;"WHAT"&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;

&lt;div class="ltag__wikipedia--container"&gt;
  &lt;div class="ltag__wikipedia--header"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sew3uq9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/wikipedia-logo-0a3e76624c7b1c3ccdeb9493ea4add6ef5bd82d7e88d102d5ddfd7c981efa2e7.svg" class="ltag__wikipedia--logo" alt="Wikipedia Logo"&gt;
    &lt;a href="https://en.wikipedia.org/wiki/Authentication" rel="noopener noreferrer"&gt;Authentication&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="ltag__wikipedia--extract"&gt;&lt;p&gt;&lt;b&gt;Authentication&lt;/b&gt; is the act of proving an assertion, such as the identity of a computer system user. In contrast with identification, the act of indicating a person or thing's identity, authentication is the process of verifying that identity. It might involve validating personal identity documents, verifying the authenticity of a website with a digital certificate, determining the age of an artifact by carbon dating, or ensuring that a product or document is not counterfeit.&lt;/p&gt;&lt;/div&gt;
  &lt;div class="ltag__wikipedia--btn--container"&gt;
    
      &lt;a href="https://en.wikipedia.org/wiki/Authentication" rel="noopener noreferrer"&gt;View on Wikipedia&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;p&gt;OKAY.🤨! But it is kinda hard for me. Let's understand with a simple example. For example, you're Sheldon Cooper you go to the bank to withdraw money. You say to the cashier give me $5000, they were like &lt;em&gt;"Who are you?? I don't know you so I can't"&lt;/em&gt;. This happens because they don't know you, to identify you as a real holder of your bank account. They provided you a bank account number and pin/signature to identify you. When you give these details to the cashier, he will like &lt;em&gt;"Thank you! Mr. Cooper, here is your $5000"&lt;/em&gt;.  So this shows that by giving the details it identifies you as the real holder of the bank account. &lt;em&gt;So the process or action of verifying the identity of a user or process is &lt;strong&gt;Authentication&lt;/strong&gt;&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/3o6MbmTd7iUDK5AiHu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6MbmTd7iUDK5AiHu/giphy.gif" alt="Security"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#types-of-authentication"&gt;
  &lt;/a&gt;
  Types of Authentication
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Stateful

&lt;ul&gt;
&lt;li&gt;Cookie/Session Based Auth.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stateless

&lt;ul&gt;
&lt;li&gt;Basic Auth&lt;/li&gt;
&lt;li&gt;JWT&lt;/li&gt;
&lt;li&gt;OAuth&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#stateful-authentication"&gt;
  &lt;/a&gt;
  Stateful Authentication
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/7GYHmjk6vlqY8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/7GYHmjk6vlqY8/giphy.gif" alt="Cookie"&gt;&lt;/a&gt;&lt;br&gt;
Stateful Authentication is a way to verify users by having the server or backend store much of the session information, such as user properties. &lt;br&gt;
In this method whenever a client requests to the server, the request carries the unique-id provided by the server at the authentication time and this ID is matched against its identity provider (IdP).&lt;br&gt;
Stateful authentication is also called session-based authentication or cookie-based authentication for the session information the server must store on the user.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Revoke the session anytime.&lt;/li&gt;
&lt;li&gt;Easy to implement and manage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Increasing server overhead: As the number of logged-in users increases, the more server resources are occupied.&lt;/li&gt;
&lt;li&gt;Server has to store the session id which limits scalability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#stateless-authentication"&gt;
  &lt;/a&gt;
  Stateless Authentication
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/eSgUxM1lzE4YYL4A9O/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/eSgUxM1lzE4YYL4A9O/giphy.gif" alt="Token-based"&gt;&lt;/a&gt;&lt;br&gt;
Stateless authentication is a way to verify a user by storing its data on the client-side and signing it with some cryptographic signature. This signed data is known as a token. Whenever a client tries to request the server, the server verifies the signed token, check if the token is valid or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Easy to scale &lt;/li&gt;
&lt;li&gt;Lower server overhead: Server does not have to allocate resources to the client.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cannot revoke the session anytime: As token is stored at client side, server does not have any rights to delete the session.&lt;/li&gt;
&lt;li&gt;Relatively complex to implement: It increases the technical complexity while implementing.&lt;/li&gt;
&lt;li&gt;If a token gets steal before expiring and a hacker uses it, the server has no way to identify it. That's why token's expiry time should be less(&amp;lt;=15min).
&lt;img src="https://i.giphy.com/media/wY6uwmZZAchWM/giphy.gif" alt="Man-In-Middle"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Stateful&lt;/th&gt;
&lt;th&gt;Stateless&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Session information could be stolen&lt;/td&gt;
&lt;td&gt;❌ It is impossible to steal session information from the session identifier because it is just an identifier associated with the session&lt;/td&gt;
&lt;td&gt;✅ Session identifier contains all authentication information and it is possible to steal sensitive information, it is not encrypted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resource consuming&lt;/td&gt;
&lt;td&gt;✅ When retrieving session information, service always gets access to session storage which causes additional resource consumption.&lt;/td&gt;
&lt;td&gt;❌ The session identifier contains all session information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Easy to implement&lt;/td&gt;
&lt;td&gt;✅When session information stored in an external database, there is a need to implement session database persistence&lt;/td&gt;
&lt;td&gt;❌Session identifier contains all session information, there is no need to implement additional functionality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Easy to scale&lt;/td&gt;
&lt;td&gt;❌While adding new instances, there is a need to implement additional scale to session storage as well&lt;/td&gt;
&lt;td&gt;✅Adding new service instances does not require additional effort&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Authentication token size&lt;/td&gt;
&lt;td&gt;🤏It is just an identifier, So size is small&lt;/td&gt;
&lt;td&gt;🥵 It contains a large amount of data, the authentication token also becomes large&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Restrict access among different parts of an application&lt;/td&gt;
&lt;td&gt;✅It is possible to configure the system so different parts of the system will only have access to the data necessary for their work&lt;/td&gt;
&lt;td&gt;❌All parts of the system have access to all session data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Possibility to revoke session&lt;/td&gt;
&lt;td&gt;✅It is possible to revoke a session at any time&lt;/td&gt;
&lt;td&gt;❌Since the session token contains an expiration date, it is impossible to revoke the authentication session&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Both approaches make sense, both have their advantages and disadvantages. Stateless authentication easier to implement and scale, but stateful authentication is more secure and easier to manage. In the next part, we'll understand each way of authentication like JWT, Cookie, OAuth, Etc. 👋🏻&lt;br&gt;
&lt;a href="https://i.giphy.com/media/YnGDmAudv7F2UASBqK/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/YnGDmAudv7F2UASBqK/giphy.gif" alt="Bye"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.openidentityplatform.org/blog/stateless-vs-stateful-authentication"&gt;Stateful vs Stateless Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=44c1t_cKylo"&gt;Difference between cookies, session and tokens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>security</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Algolia Coding Contest 🧑‍💻</title>
      <author>Julie Reboul</author>
      <pubDate>Thu, 22 Apr 2021 11:41:10 +0000</pubDate>
      <link>https://dev.to/algolia/algolia-coding-contest-4cm4</link>
      <guid>https://dev.to/algolia/algolia-coding-contest-4cm4</guid>
      <description>&lt;p&gt;Hi everyone! We're happy to announce Algolia is kicking off a &lt;strong&gt;Coding Contest&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To participate, it's simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a project using Algolia, choosing one of the 3 categories listed below&lt;/li&gt;
&lt;li&gt;Place your submission in a GitHub repository&lt;/li&gt;
&lt;li&gt;Send your project to &lt;strong&gt;&lt;em&gt;codingcontest[at]algolia.com&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The deadline for all submissions is &lt;strong&gt;Wednesday, May 5th, 11:59pm PST&lt;/strong&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-prizes"&gt;
  &lt;/a&gt;
  The prizes
&lt;/h1&gt;

&lt;p&gt;Exciting news! For each category, the winner will receive one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A smartphone of your choice between an iPhone 12 64 Gb / a Samsung S21 128 Gb / an OPPO Find X3 Neo 256 Gb&lt;/li&gt;
&lt;li&gt;Or an $800 Amazon giftcard.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of that, each participant is entitled to a 1-month coupon to use Algolia for free. Please send us an email to codingcontest[at]algolia.com with “Coupon request” in the subject line.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#project-requirements"&gt;
  &lt;/a&gt;
  Project requirements
&lt;/h1&gt;

&lt;p&gt;Build a search interface using Algolia. It can be for mobile or the web. You can integrate it into an existing website or app that has no search yet, or create a simple, standalone interface for the contest.&lt;/p&gt;

&lt;p&gt;In you are not familiar with Algolia, we suggest you follow our &lt;a href="https://www.algolia.com/doc/guides/getting-started/quick-start/"&gt;Quick Start guide&lt;/a&gt;, which will help you (a) send data to Algolia and (b) build a UI. You can also use our &lt;a href="https://www.algolia.com/doc/onboarding/#/pick-dataset"&gt;Interactive Tutorial&lt;/a&gt; for the same purposes.&lt;/p&gt;

&lt;p&gt;Additionally, feel free to use any of Algolia’s features: facets, solutions, paging, menus, and so on. Check out our &lt;a href="https://www.algolia.com/doc/guides/solutions/gallery-overview/"&gt;solutions page&lt;/a&gt; in the docs for tutorials, and check our &lt;a href="https://www.algolia.com/search-inspiration-library/"&gt;inspiration library&lt;/a&gt; to see what you can build. &lt;/p&gt;

&lt;p&gt;We will not accept projects that display violence, pornography, abuse, or any kind of hate speech, as stated in the Coding Contest &lt;a href="https://drive.google.com/file/d/1tO_zOR_noyTxfkpB18gI6MNmcSu9TWRs/view?usp=sharing"&gt;Official Rules&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#criteria"&gt;
  &lt;/a&gt;
  Criteria
&lt;/h1&gt;

&lt;p&gt;To evaluate your submitted project, we will take into account:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Functionality:&lt;/strong&gt; Is your code clean, does it work well?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;User experience:&lt;/strong&gt; Once you've got the features, now it’s time to design the interface. Are features well placed on the screen? Are they nicely styled? Extra points for creativity or novelty!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#your-project-pick-one"&gt;
  &lt;/a&gt;
  Your project - Pick one:
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Important note&lt;/strong&gt;: you can only submit &lt;em&gt;one&lt;/em&gt; project. &lt;/p&gt;

&lt;p&gt;Choose from one of the following three categories:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-category"&gt;
  &lt;/a&gt;
  First category
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Build a project using both the &lt;a href="https://strapi.io/"&gt;Strapi&lt;/a&gt; and &lt;a href="https://www.algolia.com/"&gt;Algolia&lt;/a&gt; APIs.&lt;/strong&gt;&lt;br&gt;
You can also include any other APIs or tool you'd like for this project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#second-category"&gt;
  &lt;/a&gt;
  Second category
&lt;/h2&gt;

&lt;p&gt;If you're not familiar with Strapi, we offer you a broader option: &lt;strong&gt;build a project using the Algolia API&lt;/strong&gt;.&lt;br&gt;
You can also include any other APIs or tools you'd like for this project. Please refer to our &lt;a href="https://www.algolia.com/doc"&gt;documentation&lt;/a&gt; if you have any questions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#third-category"&gt;
  &lt;/a&gt;
  Third category
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Build an Algolia implementation using a pre-made Codesandbox&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;See the &lt;a href="https://github.com/algolia/algolia-coding-contest/blob/main/contest-category3-sandbox.md"&gt;rules here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#frequently-asked-questions"&gt;
  &lt;/a&gt;
  Frequently Asked Questions
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Can Algolia offer me a free plan for this project?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Yes. Algolia offers a 14-day full-featured free trial for all new users. We are also offering a 1-month coupon for each participant to thank you for joining the contest. If you’re interested in receiving the coupon, please send us an additional email to codingcontest[at]algolia.com with “Coupon request” in the subject line.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can I use Strapi for free for this project?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Yes. Strapi offers a Community plan that is free and available to everyone.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Can I participate in several categories?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;No. You can only participate in one of the 3 categories, as stated in the Coding Contest &lt;a href="https://drive.google.com/file/d/1tO_zOR_noyTxfkpB18gI6MNmcSu9TWRs/view?usp=sharing"&gt;Official Rules&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When will the results will be announced?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;The Algolia jury will deliberate during 2 weeks after the last day of submissions.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How will I know I am the winner of my category?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;You will receive an email from the Algolia team. They will contact you about the prize and how to organize the shipping.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If I have some questions for the organizers, where should I send them?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Please send them to codingcontest[at]algolia.com&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can a website/app already using Algolia be submitted?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;No. The goal of this contest is for you to build something new. We want to make the contest fair to every participant who has until May 5th to build their project. However, you can definitely get inspired by one of your previous projects using Algolia!&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does the code have to be public or can I submit a private repository?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;You can submit a private repository, but we will ask you to give access to the jury members when you submit on the codingcontest[at]algolia.com email adress.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-contest-official-rules"&gt;
  &lt;/a&gt;
  Coding Contest Official Rules
&lt;/h3&gt;

&lt;p&gt;The Official Rules of the Coding Contest are available here. By participating to the Coding Contest, you agree with the Algolia Coding Contest &lt;a href="https://drive.google.com/file/d/1tO_zOR_noyTxfkpB18gI6MNmcSu9TWRs/view?usp=sharing"&gt;Official Rules&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>contest</category>
      <category>hackathon</category>
      <category>search</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Float an Element to the Bottom Corner</title>
      <author>Temani Afif</author>
      <pubDate>Thu, 22 Apr 2021 11:36:42 +0000</pubDate>
      <link>https://dev.to/afif/float-an-element-to-the-bottom-corner-342n</link>
      <guid>https://dev.to/afif/float-an-element-to-the-bottom-corner-342n</guid>
      <description>&lt;p&gt;&lt;sup&gt;pssst, I am on twitter --&amp;gt; &lt;a href="https://twitter.com/ChallengesCss"&gt;follow me!&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Need to lay out an element to the right or the left, such that text wraps around it? That's an easy task for the float property. But what about if you also want to push that element (let's call it an image) to one of the bottom corners while we’re at it? Sounds a bit tricky, right? We probably need JavaScript?&lt;/p&gt;

&lt;p&gt;Nope, few lines of (tricky) CSS can do it! Here's the CSS-only solution that will make your image to stick to the bottom corner, regardless of the size and content.&lt;/p&gt;

&lt;p&gt;Resize the wrapper element and see the magic at work:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/JjbEXYm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's dissect the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#markup-and-layout"&gt;
  &lt;/a&gt;
  Markup and layout
&lt;/h3&gt;

&lt;p&gt;We'll need a wrapper element to contain everything, and we'll be using flexbox on it. Flexbox allows us to rely on the default stretch alignment to be able to later use &lt;code&gt;height: 100%.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"float"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    Lorem ipsum dolor ...
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.float&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;.box&lt;/code&gt; within the &lt;code&gt;.wrapper&lt;/code&gt; is our flex item. We don't need any particular CSS applied to the box. It defines the height of the wrapper and, at the same time, is stretched to the same height. This behavior will give us a "reference height" that can be used by the child elements.&lt;/p&gt;

&lt;p&gt;From &lt;a href="https://www.w3.org/TR/css-flexbox-1/#algo-stretch"&gt;the specification&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the flex item has &lt;code&gt;align-self: stretch&lt;/code&gt;, redo layout for its contents, treating this used size as its definite cross size so that percentage-sized children can be resolved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The keyword is the &lt;strong&gt;definite&lt;/strong&gt; which allows us to safely use a percentage (%) height inside the box element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-for-the-floated-element"&gt;
  &lt;/a&gt;
  Now for the floated element
&lt;/h3&gt;

&lt;p&gt;Our &lt;code&gt;.float&lt;/code&gt; element will take the entire height next to the text content, thanks to the height calculation we detailed above. Inside this element we push the image to the bottom using flexbox alignment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jUnHk5fH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/04/q0prkg5dsvplig90u78x.png%3Fw%3D836%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jUnHk5fH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/04/q0prkg5dsvplig90u78x.png%3Fw%3D836%26ssl%3D1" alt="Float image to right"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now for the real trickery, using the &lt;code&gt;shape-outside&lt;/code&gt; property. Here’s how &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside"&gt;MDN defines it&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The shape-outside CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; shape-outside provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, shape-outside sets the way content flows around an element's bounding box.&lt;/p&gt;

&lt;p&gt;It takes a number of values. One of those is the &lt;code&gt;inset()&lt;/code&gt; function which, again, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape#inset()"&gt;according to MDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Defines an inset rectangle. When all of the first four arguments are supplied they represent the top, right, bottom and left offsets from the reference box inward that define the positions of the edges of the inset rectangle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, with &lt;code&gt;shape-outside: inset(calc(100% - X) 0 0)&lt;/code&gt; we can create an inset rectangle that starts exactly at the top of the image. And the top is equal to &lt;code&gt;100% - X&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the image height and &lt;code&gt;100%&lt;/code&gt; is the height of the &lt;code&gt;.float&lt;/code&gt; element. This allows the text to wrap within the free space on the top of the image. This is responsive, plus we can easily switch between left and right (by adjusting the float property)&lt;/p&gt;

&lt;p&gt;That's it! The only major caveat is that you need to know the image height.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#want-more"&gt;
  &lt;/a&gt;
  Want more?
&lt;/h2&gt;

&lt;p&gt;We can extend this concept a little further to account for fancier situations. For example, we can float the image to the right, but pin it to the middle of the box with &lt;code&gt;justify-content: center&lt;/code&gt; and also adjust our inset rectangle to the middle by changing the shape-outside from &lt;code&gt;inset(calc(100% - X) 0 0)&lt;/code&gt; to &lt;code&gt;inset(calc(50% - X/2) 0)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/PoWEYmX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We can also float two images at both bottom corners:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/WNRdeqr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Nothing complex here. I am simply using the same floating element twice, once on the right, and again on the left. And why stop at two corners when we can place images at all four corners:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/qBRpWPV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The same basic idea is at play here, but we're are also relying on the common float feature for the top images. However, you'll notice that this is where the concept starts to break down a bit, and we get some unwanted overflow depending on the size of the containing box. We can make the height of the &lt;code&gt;.float&lt;/code&gt; element greater than 100% and apply somewhat "magic numbers" that smooth things out by adjusting the padding and margin of the images.&lt;/p&gt;

&lt;p&gt;Did you know that &lt;code&gt;shape-outside&lt;/code&gt; accepts &lt;code&gt;radial-gradient()&lt;/code&gt; as a value? We can use that to place rounded images like below:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ExZoYEX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The transparent part of the gradient is the &lt;em&gt;free&lt;/em&gt; space where the text can go. You may have noticed that we applied a &lt;code&gt;border-radius&lt;/code&gt; to the image as well. The &lt;code&gt;shape-outside&lt;/code&gt; property will simply affect the &lt;code&gt;.float&lt;/code&gt; element and we need to manually adjust the shape of the image to follow the shape defined by &lt;code&gt;shape-outside&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While we're at it, let's combine this with our earlier example that pins the image to the vertical center of the box using &lt;code&gt;justify-content: center&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/dyNJbeK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Another &lt;code&gt;radial-gradient()&lt;/code&gt; and also another &lt;code&gt;border-radius&lt;/code&gt; configuration.&lt;/p&gt;

&lt;p&gt;We could have used a &lt;code&gt;linear-gradient()&lt;/code&gt; instead to make a triangular shape for the wrapping area:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/GRryKGz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is the same idea that we used for the &lt;code&gt;radial-gradient()&lt;/code&gt;. The big difference is that we're using &lt;code&gt;clip-path&lt;/code&gt; instead of &lt;code&gt;border-radius&lt;/code&gt; to cut our image.&lt;/p&gt;

&lt;p&gt;And, since we did it for the others, let's use the &lt;code&gt;justify-content: center&lt;/code&gt; idea to pin the image to the vertical center of the box's right edge:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/abpEoaV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We used a &lt;code&gt;conic-gradient()&lt;/code&gt; in the above demo with &lt;code&gt;shape-outside&lt;/code&gt; to define the triangular shape and &lt;code&gt;clip-path&lt;/code&gt; to get a similar shape on the image&lt;/p&gt;

&lt;p&gt;All of these examples can still be optimized using less of code in the case that the image is decorative (when it's not needed inside the HTML for SEO purposes). Let's replace the &lt;code&gt;.float&lt;/code&gt; element with a pseudo-element and apply the image as background instead:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/XWpYVVz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We're using mask to show just the portion of the image that we need and, guess what, it uses the same value as &lt;code&gt;shape-outside&lt;/code&gt;! So, all we had to do is define one value for the shape.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;There are a lot of possibilities here to place not just rectangles in corners, but any kind of shape at any position, using largely the same code structure. We only need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adjust the &lt;code&gt;shape-outside&lt;/code&gt; property to define the shape&lt;/li&gt;
&lt;li&gt;Apply some styling to the image to follow the previously defined shape or apply the same value to mask in case we are using the pseudo element version&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then everything holds it place, even in responsive designs.&lt;/p&gt;




&lt;p&gt;Did I tell you that I am on twitter? Yes ... so you know what to do then:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-follow-me"&gt;
  &lt;/a&gt;
                               &lt;a href="https://twitter.com/ChallengesCss"&gt;Follow me&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Do You Do Home Automation? Join Us!</title>
      <author>Lars Richter</author>
      <pubDate>Thu, 22 Apr 2021 11:06:00 +0000</pubDate>
      <link>https://dev.to/n_develop/do-you-do-home-automation-join-us-1fkf</link>
      <guid>https://dev.to/n_develop/do-you-do-home-automation-join-us-1fkf</guid>
      <description>&lt;p&gt;A lot of developers like tinkering with all sorts of tech. And if you own, build or rent a house or an apartment, home automation is a cool area to discover and play with.&lt;/p&gt;

&lt;p&gt;But home automation can be frustrating as well. Which system should I choose? Should I go with an open-source system like Home Assistant? Or maybe with something like Philips Hue? Where do I start? Lighting? Heating? Cameras? Door locks?&lt;/p&gt;

&lt;p&gt;But even if you found a system to go with, there will be hurdles. I mean, it's tech, isn't it? 😉 And that's where a community would be awesome. Asking questions. Giving advice to others. That's what we are here for. And &lt;a href="https://dev.to/ben"&gt;Ben&lt;/a&gt;  created a special (of course Forem-powered) community for everything related to technology in your home.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-hometechnica"&gt;
  &lt;/a&gt;
  Join &lt;a href="https://www.hometechnica.com"&gt;Hometechnica&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It's not just about home automation. There is much more. Here is the "tagline" of Hometechnica.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Homebuilding in the age of automation, privacy, security, and alternative energy. Gadgets, ideas, and community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are interested in any of these topics, come join us over there. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hometechnica.com"&gt;https://www.hometechnica.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will be fun. I promise. 😄&lt;/p&gt;

</description>
      <category>homeautomation</category>
      <category>smarthome</category>
      <category>community</category>
      <category>hometechnica</category>
    </item>
    <item>
      <title>How To Make Money With Technical Articles As A Developer</title>
      <author>The Code Lounge</author>
      <pubDate>Thu, 22 Apr 2021 11:04:00 +0000</pubDate>
      <link>https://dev.to/codeloungedev/how-to-make-money-with-technical-articles-as-a-developer-1kl3</link>
      <guid>https://dev.to/codeloungedev/how-to-make-money-with-technical-articles-as-a-developer-1kl3</guid>
      <description>&lt;p&gt;&lt;a href="https://codelounge.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZGLRauQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617198357271/uoNdlXnwM.png" alt="cover (1).png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Learn how to monetise your knowledge and create a side income&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Writing paid technical articles is a great way to create a side-income or even a salary. Thus, this article will teach you how to make money with technical articles as a developer. &lt;/p&gt;

&lt;p&gt;The good thing is that you can make money with technical articles even if you are not a super experienced developer. However, that does not mean you should not have a bit of experience. To put things into perspective, I made money writing articles as a junior developer. So it is doable.&lt;/p&gt;

&lt;p&gt;With that being said, this article assumes no knowledge about the subject. As a result, you will learn how to do it from zero. You will learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;choose an area of expertise&lt;/li&gt;
&lt;li&gt;start a blog&lt;/li&gt;
&lt;li&gt;write consistently&lt;/li&gt;
&lt;li&gt;pitch websites and publications to write for them&lt;/li&gt;
&lt;li&gt;write on freeCodeCamp&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#your-area-of-expertise"&gt;
  &lt;/a&gt;
  Your area of expertise
&lt;/h1&gt;

&lt;p&gt;The first step of the process is to choose an area of expertise. Usually, people write about their area of development. What do I mean by that? If someone is a front-end developer, that person tends to write about front-end development. Likewise for other areas. As a result, you can write about the subject you know the best.&lt;/p&gt;

&lt;p&gt;However, you are not confined only to the subject you know the best. Alternatively, you can write about the stuff you want to learn. You do not have to be an expert in the technology to write about it, but you should have basic knowledge about the technologies you use. &lt;/p&gt;

&lt;p&gt;For instance, my best paid/non-paid articles are the ones where I learnt how to put together a handful of technologies. Other people went through the same hurdles to set them together, and they found my articles helpful. It's important to note that I have basic knowledge of the technologies I put together; if I wrote about building an application with Node.js, MongoDB and Pug, it means I have basic knowledge in all of them. On the flip side, I did not write about building an application with Angular, Supabase and Google Cloud because I never used them. &lt;/p&gt;

&lt;p&gt;In conclusion, define your area of expertise and write articles about it. Moreover, you can also write about the technologies you want to learn because you do not have to be an expert to write about a subject.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#start-your-blog"&gt;
  &lt;/a&gt;
  Start your blog
&lt;/h1&gt;

&lt;p&gt;The next question is where to publish your articles. There are two options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pitch publications and sell the articles directly&lt;/li&gt;
&lt;li&gt;Create a blog and build a portfolio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my case, I choose to create a blog. I decided to make a blog because I can build a portfolio of articles I can present to the publications I am pitching. Additionally, some publications &lt;em&gt;(not all of them)&lt;/em&gt; allows writers to re-publish the articles on their blog. Thus, I have all the articles I write in one place - my blog.&lt;/p&gt;

&lt;p&gt;When it comes to blogging platforms, there are many you can use. For my blog, I use &lt;a href="https://hashnode.com"&gt;Hashnode&lt;/a&gt; because it allows me to use my personal domain for free. However, you are not limited. There are other blogging platforms as well, and you can read about the &lt;a href="https://www.freecodecamp.org/news/best-blogging-platforms-for-developers/"&gt;best blogging platforms for developers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, the ball is in your yard to decide. If your sole goal is to make money, you can sell them directly to publications. If you want to create a portfolio &lt;em&gt;(which I advise you)&lt;/em&gt;, I recommend starting a blog.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h3&gt;

&lt;p&gt;There are some caveats and extra advantages if you choose to start a blog. In my case, I received many gigs after people found my blog and read the articles. Having an active blog is like having a personal recruiter looking for opportunities for you non-stop.&lt;/p&gt;

&lt;p&gt;Besides that, companies might pay you to write reviews about their products or tutorials straight on your blog. Usually, sponsored posts on your blog are more expensive since you need to write them and use your platform to promote/advertise them.&lt;/p&gt;

&lt;p&gt;Thus, your blog is more than a portfolio. It can become a source of income as well!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#write-for-freecodecamp"&gt;
  &lt;/a&gt;
  Write for freeCodeCamp
&lt;/h1&gt;

&lt;p&gt;Once you have some writing experience under your belt, I recommend applying to write for freeCodeCamp. Here is where your blog comes in handy - freeCodeCamp asks for three articles you consider to be your best articles. Having a blog with technical articles increases your chances of getting accepted as a writer.&lt;/p&gt;

&lt;p&gt;Now you might ask why do I recommend freeCodeCamp. The main reason why I recommend writing on freeCodeCamp is that they have an editorial team. That means there are professional people that read your articles and provides you with feedback. Having someone, especially professional writers, check your articles and give you feedback is extremely helpful. You will improve much quicker and thus become a better writer.&lt;/p&gt;

&lt;p&gt;Besides having an editorial team, freeCodeCamp reaches millions of people daily. It's one of the best publication to write for if you want to reach a broad audience and help people. Not many publications can match that, and there are not many places where you can reach such an enormous audience.&lt;/p&gt;

&lt;p&gt;Therefore, writing for freeCodeCamp is an excellent way to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;familiarize yourself with publications&lt;/li&gt;
&lt;li&gt;improve and become a better writer&lt;/li&gt;
&lt;li&gt;reach a wide audience&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I highly recommend writing for freeCodeCamp!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#write-consistently"&gt;
  &lt;/a&gt;
  Write consistently
&lt;/h1&gt;

&lt;p&gt;The more articles you write, the better you get at writing. The better your articles are, the better your chances of getting accepted to write for a publication. You get the idea!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-a-schedule"&gt;
  &lt;/a&gt;
  Create a schedule
&lt;/h4&gt;

&lt;p&gt;If you are a beginner in writing, I would advise you to create a schedule and stick to it. When you create a schedule, create a reasonable one. You might have many ideas at the moment, and you might think you can ship three articles weekly. But soon, you find out you cannot keep up the rhythm.&lt;/p&gt;

&lt;p&gt;As a result, I recommend sticking to one article per week. Writing one article weekly is manageable for most people, and it does not put too much pressure on you. Also, if you have lots of ideas, even better. Do not step up the rhythm by publishing more articles. Instead, spread it out, so you have content for more weeks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#list-of-topics"&gt;
  &lt;/a&gt;
  List of topics
&lt;/h4&gt;

&lt;p&gt;After creating a schedule, research and create a list of topics. In my beginnings, I made the mistake of blogging randomly when ideas popped in my head. As you might guess, I was not very consistent, and I did not have any results.&lt;/p&gt;

&lt;p&gt;That changed when I started researching topics. You can research topics and keywords with tools like Ubersuggest, Google Trends, Ahrefs and so on. In my case, I use Ahrefs. With that being said, once you have a list of topics/keywords, it's easier to keep a schedule and write consistently.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#find-online-challenges"&gt;
  &lt;/a&gt;
  Find online challenges
&lt;/h4&gt;

&lt;p&gt;If you search for "writing challenges" online, you can find a lot of content revolving around this. Alternatively, blogging platforms like Hashnode have badges and challenges. For instance, Hashnode has a challenge aimed to make you a better writer called &lt;a href="https://hashnode.com/challenge/2articles1week"&gt;#2Articles1Week&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This is just one example. However, there are many other challenges on the internet!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;Thus, my top tips for writing consistently are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a posting schedule. Preferably an article weekly for beginners.&lt;/li&gt;
&lt;li&gt;Research keywords and create a list of possible article ideas.&lt;/li&gt;
&lt;li&gt;Find online challenges.&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#find-and-pitch-publications"&gt;
  &lt;/a&gt;
  Find and pitch publications
&lt;/h1&gt;

&lt;p&gt;The last step of the process is to find and pitch publications. This is one of the most challenging steps, but I'll make it easier for you.&lt;/p&gt;

&lt;p&gt;Many, if not most, companies/technologies/tools have their blogs. The reason is that written content (articles) is still super powerful and helpful. Thus, they use their blogs to share knowledge and promote their tools. &lt;/p&gt;

&lt;p&gt;Let's take as an example a database company called MarioDB &lt;em&gt;(fictive company name)&lt;/em&gt;. MarioDB might have a company blog where employees write tutorials about integration the database with other technologies. Additionally, they also accept articles from guest authors. As a result, you could pitch them and write an article about integrating MarioDB with Vue. More or less, that is how most publications work.&lt;/p&gt;

&lt;p&gt;With that being said, each publication/company: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pays a fixed rate&lt;/li&gt;
&lt;li&gt;has their rules and policies&lt;/li&gt;
&lt;li&gt;has their list of accepted topics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All publications/companies have a particular page on their blog that specifies all the information you need and how to apply. I ​will not list all the publications and &lt;a href="https://catalins.tech/websites-that-pay-you-to-write-technical-articles"&gt;websites that pay you to write technical articles&lt;/a&gt; here. But you can click on the embedded link to find them and how much they pay.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;It's important to note that this is one way to go from zero to writing paid technical articles and not the only way. Also, it's not a get-rich-quick scheme. You have to put in the work and be patient.&lt;/p&gt;

&lt;p&gt;To recap, here are the steps I recommend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;choose your area of expertise - focus on the subject/s you know the best&lt;/li&gt;
&lt;li&gt;open a blog or not - it depends on what your goals are&lt;/li&gt;
&lt;li&gt;apply to write for freeCodeCamp - you get exposure to a wide audience&lt;/li&gt;
&lt;li&gt;get better at writing by doing it consistently&lt;/li&gt;
&lt;li&gt;find publications and write for them&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;If you are interested in JavaScript tutorials, I recommend&lt;/em&gt; &lt;a href="https://catalins.tech/frontend-masters-membership-is-it-worth-it"&gt;&lt;em&gt;Frontend Masters&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to make money with technical writing, check&lt;/em&gt; &lt;a href="https://catalins.tech/websites-that-pay-you-to-write-technical-articles"&gt;&lt;em&gt;websites that pay you to write&lt;/em&gt;&lt;/a&gt; &lt;em&gt;technical articles!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to learn JavaScript, I recommend these&lt;/em&gt; &lt;a href="https://catalins.tech/5-best-resources-to-learn-javascript-as-a-beginner"&gt;&lt;em&gt;5 resources to learn JavaScript as a beginner&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Negotiating your salary is essential — learn&lt;/em&gt; &lt;a href="https://catalins.tech/how-to-negotiate-your-salary-as-a-developer"&gt;&lt;em&gt;how to negotiate your salary as a developer&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Speed up your development with&lt;/em&gt; &lt;a href="https://catalins.tech/git-aliases-what-are-they-and-how-to-use-them"&gt;&lt;em&gt;Git Aliases&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to&lt;/em&gt; &lt;a href="https://catalins.tech/how-to-start-your-blog-as-a-developer"&gt;&lt;em&gt;start a blog as a developer&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, I recommend reading the article “&lt;/em&gt;&lt;a href="https://catalins.tech/how-to-start-your-blog-as-a-developer"&gt;&lt;em&gt;how to start your blog as a developer&lt;/em&gt;&lt;/a&gt;&lt;em&gt;”!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do you struggle to stay up-to-date with all news in tech? See&lt;/em&gt; &lt;a href="https://catalins.tech/one-way-to-stay-up-to-date-as-developer"&gt;&lt;em&gt;one way to stay up to date as a developer&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Learn&lt;/em&gt; &lt;a href="https://catalins.tech/how-to-use-asyncawait-in-javascript"&gt;&lt;em&gt;how to use Async/Await in JavaScript&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GitHub profiles are all the rage at the moment. Learn&lt;/em&gt; &lt;a href="https://catalins.tech/how-to-create-a-kickass-github-profile-page"&gt;&lt;em&gt;how to create a GitHub profile page&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Check these 7&lt;/em&gt; &lt;a href="https://catalins.tech/7-github-repositories-to-help-you-crush-your-job-interviews"&gt;&lt;em&gt;resources to help you pass your job interviews&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See the new features coming in&lt;/em&gt; &lt;a href="https://catalins.tech/javascript-es2021-you-need-to-see-these-ecmascript-2021-features"&gt;&lt;em&gt;JavaScript ECMAScript 2021 ES2021&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Are you a beginner programmer? Check these&lt;/em&gt; &lt;a href="https://catalins.tech/10-programming-project-ideas-for-beginners"&gt;&lt;em&gt;programming project ideas for beginners&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Are you learning to code or do you plan to do it? Check the&lt;/em&gt; &lt;a href="https://catalins.tech/20-best-places-to-learn-programming-for-free"&gt;&lt;em&gt;best places to learn programming for FREE&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://catalins.tech/my-9-must-have-browser-extensions-for-increased-developer-productivity"&gt;&lt;em&gt;Increase your developer productivity&lt;/em&gt;&lt;/a&gt; &lt;em&gt;with these 9 browser extensions!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are a Node.js developer, I advise you to check these&lt;/em&gt; &lt;a href="https://catalins.tech/the-4-creational-design-patterns-in-nodejs-you-should-know"&gt;&lt;em&gt;4 creational design patterns in Node.js&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Check these amazing&lt;/em&gt; &lt;a href="https://catalins.tech/javascript-es2020-the-features-you-should-know"&gt;&lt;em&gt;JavaScript ECMAScript 2020 features&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can also check this &lt;a href="https://catalins.tech/keystonejs-and-graphql-api-crash-course"&gt;KeystoneJS&lt;/a&gt; crash course!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Page scroll progress bars</title>
      <author>debadeepsen</author>
      <pubDate>Thu, 22 Apr 2021 10:56:05 +0000</pubDate>
      <link>https://dev.to/debadeepsen/page-scroll-progress-bars-fjl</link>
      <guid>https://dev.to/debadeepsen/page-scroll-progress-bars-fjl</guid>
      <description>&lt;p&gt;You must have seen this on blogs, or articles of other kinds (what's the difference again?). Basically, you are (perhaps correctly) assumed to be one of those readers who are either super-busy or super-lazy, and therefore need to know how much of the page you have visually consumed. So there's some kind of a progress bar that tells you how much you've scrolled. It looks cool, helps your readers/users, and is super simple to implement. Let's dig right in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#progress-percent"&gt;
  &lt;/a&gt;
  Progress percent
&lt;/h2&gt;

&lt;p&gt;Before we get into any progress bar, we need to calculate the progress percent, aka, how much of the page has been scrolled. Thanks to the helpful people at &lt;a href="https://css-tricks.com/how-i-put-the-scroll-percentage-in-the-browser-title-bar/"&gt;CSS Tricks&lt;/a&gt;, I was able to compute that easily. The following code does exactly that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;docHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;winHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;scrollPercent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;docHeight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;winHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;scrollPercentRounded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scrollPercent&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#horizontal-progress-bar"&gt;
  &lt;/a&gt;
  Horizontal progress bar
&lt;/h2&gt;

&lt;p&gt;This one's the simpler one of the two. All we need to do here is have a &lt;code&gt;div&lt;/code&gt; "stick" to the top of the page, and set its background to display a visual indication of the progress. The trick here is to use the &lt;code&gt;linear-gradient()&lt;/code&gt; CSS function, which you can read up all about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient()"&gt;here&lt;/a&gt;. Now, instead of a smooth gradient, what we need to achieve is a distinct color change at certain point. For that, we can use the "linear-color-stop" overload (somebody please check if they're still called function overloads in CSS, I honestly don't know for sure). If we give the gradient two colors, and set the progress percent as the color-stop for both, the result will be a distinct change of color. Since we'll be using JavaScript to set it, here's what that will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
   &lt;span class="s2"&gt;`linear-gradient(to right, #498 &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;scrollPercentRounded&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%, #eee &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;scrollPercentRounded&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The greenish "progress bar" isn't overlain on top of the grey bar, but using &lt;code&gt;linear-gradient&lt;/code&gt; this way gives the impression that it does.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now if you add the JavaScript code above to the &lt;code&gt;onscroll&lt;/code&gt; event handler for the page (be patient, a TL;DR CodeSandbox is at the end of this article, as usual), you should be able to see the scroll progress bar in action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#circular-progress-indicator"&gt;
  &lt;/a&gt;
  Circular progress indicator
&lt;/h2&gt;

&lt;p&gt;The circular progress bar(?!) is similar, with a little more coding effort added. We'll still be using gradients, but this time, we're gonna use something called the "conic gradient". Which, as the name suggests, displays a gradient to make it appear that... um, you're staring at a cone downwards from top? (My description skills aren't astounding, so why don't you look it up on the official &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/conic-gradient()"&gt;docs&lt;/a&gt;?) But the principle remains the same - we define "hard stops" so that the gradient looks less like a smooth gradient and more like a sharp change in color. That means setting the &lt;code&gt;background&lt;/code&gt; programmatically in the following way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using variables from the code block above&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;scrollPercent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;docHeight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;winHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;scrollPercentRounded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scrollPercent&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;degrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollPercent&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.bg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`conic-gradient(#498 &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg, #ddd &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;By the way, a &lt;code&gt;div&lt;/code&gt; with the same &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; that has its &lt;code&gt;border-radius&lt;/code&gt; set to &lt;code&gt;50%&lt;/code&gt; will be rendered as a perfect circle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, if we implement a conic gradient on a circle, it will look like a pie chart, like this - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4fh8sBUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MOZTzQe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fh8sBUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MOZTzQe.png" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you could keep the pie progress chart, but if you wanted, you could also overlay a circular disc on top of it using the right &lt;code&gt;position&lt;/code&gt; attribute and dimensions, and it would look like so - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2dFhGhSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j47BMq7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2dFhGhSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j47BMq7.png" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's basically it. Thank you for reading through this patiently (and if you literally just jumped to this section for the full code, I don't hate you either - we're all busy). Here's the Sandbox. Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/solitary-violet-y6s28"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>ux</category>
    </item>
  </channel>
</rss>
