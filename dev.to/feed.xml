<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Taking Marko's Tags API for a Test Drive</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 31 Aug 2021 19:27:23 +0000</pubDate>
      <link>https://dev.to/ryansolid/taking-marko-s-tags-api-for-a-test-drive-2n6i</link>
      <guid>https://dev.to/ryansolid/taking-marko-s-tags-api-for-a-test-drive-2n6i</guid>
      <description>&lt;p&gt;&lt;a href="https://www.markojs.com"&gt;Marko&lt;/a&gt; recently released a &lt;a href="https://dev.to/ryansolid/introducing-the-marko-tags-api-preview-37o4"&gt;preview for its upcoming Tags API&lt;/a&gt;. This is pretty exciting as it adds a minimal API layer over &lt;a href="https://www.markojs.com"&gt;Marko&lt;/a&gt;'s state management that allows us to express complicated ideas in a more terse way than ever before.&lt;/p&gt;

&lt;p&gt;So what's a good place to start. Well, I looked at Marko's TodoMVC example and decided it needed sprucing up. So this simple list managing example feels like the perfect place to get started and introduce this new approach.&lt;/p&gt;

&lt;p&gt;In this article, we will build a TodoMVC application using Marko's Tags API. So let's get started.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#setting-up-our-project"&gt;
  &lt;/a&gt;
  Setting up our project
&lt;/h1&gt;

&lt;p&gt;It's easy to get set up with a new Marko project using the Tags API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm init marko &lt;span class="nt"&gt;--template&lt;/span&gt; tags-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It prompts us to name the project and gives instructions to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sjaD8-QW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gew8qebtpah1lskulai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sjaD8-QW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gew8qebtpah1lskulai.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, let's open our project in our code editor. I am using VSCode. And we see a simple folder structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M8-aqZuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35u6kl5a0izy45greorl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M8-aqZuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35u6kl5a0izy45greorl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to keep this folder structure for our TodoMVC app but we will be replacing all the code. Before that, if you want to run &lt;code&gt;npm run dev&lt;/code&gt; to see this example open in your browser.&lt;/p&gt;

&lt;p&gt;Remove all the files under the &lt;code&gt;src/pages&lt;/code&gt; and &lt;code&gt;src/components&lt;/code&gt; folders and then we are good to get started with a clean slate.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#building-our-page"&gt;
  &lt;/a&gt;
  Building our Page
&lt;/h1&gt;

&lt;p&gt;Marko is a Multi-Page Framework but TodoMVC is a simple single-page example. We won't worry too much about that since our starter project here will take care of all the details. So we start the same as any application and our index page. Create a &lt;code&gt;index.marko&lt;/code&gt; file under your &lt;code&gt;src/pages&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Let's add some markup to it. &lt;code&gt;.marko&lt;/code&gt; files are basically HTML documents so to start we just add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype HTML&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Marko TodoMVC"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Marko - TodoMVC&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there we have a working app. Just run &lt;code&gt;npm run dev&lt;/code&gt; and you should see a blank page with a title. You could add as much markup you want to this page. But let's add our first components.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#creating-a-store"&gt;
  &lt;/a&gt;
  Creating a Store
&lt;/h1&gt;

&lt;p&gt;TodoMVC is driven off a central store very much in line with Model View Controller from which it gets its name. In our case, Marko isn't an MVC framework but it still makes it easiest to abstract our logic into a template that we will use as a data store.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;TodoStore.marko&lt;/code&gt; under components folder and copy in this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;let&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;nextId=&lt;/span&gt;&lt;span class="s"&gt;1/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;let&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;todos=&lt;/span&gt;&lt;span class="s"&gt;[]/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;let&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;filter=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;return&lt;/span&gt;&lt;span class="err"&gt;={&lt;/span&gt;
  &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;setFilter&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;f&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="na"&gt;filter = &lt;/span&gt;&lt;span class="s"&gt;f&lt;/span&gt; &lt;span class="err"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;updateTodo&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todoId&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;newProps&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos = &lt;/span&gt;&lt;span class="s"&gt;todos.map(function(todo)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todo.id&lt;/span&gt; &lt;span class="err"&gt;!==&lt;/span&gt; &lt;span class="na"&gt;todoId&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
      &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="na"&gt;newProps&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;})&lt;/span&gt;
  &lt;span class="err"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;clearCompleted&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos = &lt;/span&gt;&lt;span class="s"&gt;todos.filter(function(todo)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="na"&gt;todo.completed&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;});&lt;/span&gt;
  &lt;span class="err"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;removeTodo&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todoId&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos = &lt;/span&gt;&lt;span class="s"&gt;todos.filter(function(todo)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;todo.id&lt;/span&gt; &lt;span class="err"&gt;!==&lt;/span&gt; &lt;span class="na"&gt;todoId&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;});&lt;/span&gt;
  &lt;span class="err"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;toggleAllTodosCompleted&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos = &lt;/span&gt;&lt;span class="s"&gt;todos.map(function(todo)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="na"&gt;(todo.completed =&lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt; &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
      &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;completed&lt;/span&gt; &lt;span class="err"&gt;};&lt;/span&gt;
    &lt;span class="err"&gt;});&lt;/span&gt;
  &lt;span class="err"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;addNewTodo&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todoData&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos = &lt;/span&gt;&lt;span class="s"&gt;[...todos,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title:&lt;/span&gt; &lt;span class="na"&gt;todoData.title&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;id:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;nextId&lt;/span&gt;&lt;span class="err"&gt;++),&lt;/span&gt;
      &lt;span class="na"&gt;completed:&lt;/span&gt; &lt;span class="na"&gt;false&lt;/span&gt;
    &lt;span class="err"&gt;}];&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a lot going on in this file but really we are just seeing 4 tags being used in the template. The first 3 define state in our Marko Templates using Marko's &lt;code&gt;&amp;lt;let&amp;gt;&lt;/code&gt; tag. The &lt;code&gt;&amp;lt;let&amp;gt;&lt;/code&gt; tag allows us to define variables in our template. In this case, an id counter, the list of todos, and a variable to hold are filter state.&lt;/p&gt;

&lt;p&gt;This leverages Marko's tag variable syntax where we can define a variable by putting it after a slash after the tag name, and Marko's default attribute syntax that lets us pass a value without an attribute name by assigning it to the tag directly. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; tag is how we expose tag variables to a parent template. We are assigning an object that contains our state and some methods to mutate that state.&lt;/p&gt;

&lt;p&gt;This template does not render any DOM elements itself but serves as a convenient way to encapsulate the behavior we'd like to use in other templates. We will be using this to drive the rest of our application.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#creating-the-app"&gt;
  &lt;/a&gt;
  Creating the App
&lt;/h1&gt;

&lt;p&gt;So let's start wiring this together. We're going to create a new &lt;code&gt;&amp;lt;TodoApp&amp;gt;&lt;/code&gt; tag because I want to keep my top-level page document clean but this is completely unnecessary. So create &lt;code&gt;TodoApp.marko&lt;/code&gt; under the components folder. Also, create a &lt;code&gt;TodoHeader.marko&lt;/code&gt; file under the components folder as well since we will need that in a minute.&lt;/p&gt;

&lt;p&gt;Let's start by dropping the following into &lt;code&gt;TodoApp.marko&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;TodoStore&lt;/span&gt;&lt;span class="err"&gt;/{&lt;/span&gt;
  &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;addNewTodo&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section.todoapp&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;TodoHeader&lt;/span&gt; &lt;span class="na"&gt;addNewTodo=&lt;/span&gt;&lt;span class="s"&gt;addNewTodo&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;if&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="na"&gt;todos.length&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section.main&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul.todo-list&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;for&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="na"&gt;of=&lt;/span&gt;&lt;span class="s"&gt;todos&lt;/span&gt; &lt;span class="na"&gt;by=&lt;/span&gt;&lt;span class="s"&gt;(todo&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; todo.id)&amp;gt;
          ${todo.title}
        &lt;span class="nt"&gt;&amp;lt;/for&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://unpkg.com/todomvc-app-css@2.2.0/index.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be coming back to this file a few times in the course of this tutorial but this is the skeleton of our app. The first tag is our &lt;code&gt;&amp;lt;TodoStore&amp;gt;&lt;/code&gt; we created in the previous section. We can access the values returned as a tag variable we are destructuring. So far it is just the todos and &lt;code&gt;addNewTodo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is the bulk of our template. We are including the &lt;code&gt;&amp;lt;TodoHeader&amp;gt;&lt;/code&gt; component we are yet to implement. One of the great things about Marko is it can find tags in your local project automatically saving the need to import them.&lt;/p&gt;

&lt;p&gt;Next, we see a conditional &lt;code&gt;&amp;lt;if&amp;gt;&lt;/code&gt; tag that only displays the list if &lt;code&gt;todos.length&lt;/code&gt;. Marko uses tags for control flow. These use all the same syntax and capabilities you can use in your custom tags.&lt;/p&gt;

&lt;p&gt;Inside this block, there is also the &lt;code&gt;&amp;lt;for&amp;gt;&lt;/code&gt; tag that iterates over our todos. Each iteration of the loop receives its values via Tag Parameters which we denote with enclosing pipes &lt;code&gt;| |&lt;/code&gt;. This allows us to do scoped child templating similar to Render Props in React.&lt;/p&gt;

&lt;p&gt;Finally, there is a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag that imports the official TodoMVC CSS from their CDN. Marko automatically strips out the style tag out into its own &lt;code&gt;.css&lt;/code&gt; files on build.&lt;/p&gt;

&lt;p&gt;We can add our &lt;code&gt;&amp;lt;TodoApp&amp;gt;&lt;/code&gt; to the body of our &lt;code&gt;index.marko&lt;/code&gt; page and we should now see a grey background when we run it with &lt;code&gt;npm run dev&lt;/code&gt; (you can keep this running in the background and it will refresh as we add changes).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype HTML&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Marko TodoMVC"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Marko - TodoMVC&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TodoApp&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#adding-todos"&gt;
  &lt;/a&gt;
  Adding Todos
&lt;/h1&gt;

&lt;p&gt;Right now our app doesn't do very much so let's start working on the &lt;code&gt;&amp;lt;TodoHeader&amp;gt;&lt;/code&gt;. This is where we will enter our new Todos.&lt;/p&gt;

&lt;p&gt;Copy this into your &lt;code&gt;TodoHeader.marko&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;attrs&lt;/span&gt;&lt;span class="err"&gt;/{&lt;/span&gt; &lt;span class="na"&gt;addNewTodo&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;header.header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;todos&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;const&lt;/span&gt; &lt;span class="na"&gt;titleInput = &lt;/span&gt;&lt;span class="s"&gt;title();&lt;/span&gt;
    &lt;span class="na"&gt;addNewTodo&lt;/span&gt;&lt;span class="err"&gt;({&lt;/span&gt; &lt;span class="na"&gt;title:&lt;/span&gt; &lt;span class="na"&gt;titleInput.value&lt;/span&gt; &lt;span class="err"&gt;});&lt;/span&gt;
    &lt;span class="na"&gt;titleInput.value = &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;e.preventDefault&lt;/span&gt;&lt;span class="err"&gt;();&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"new-todo"&lt;/span&gt;
      &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"What needs to be done?"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.header&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing you will notice is the &lt;code&gt;&amp;lt;attr&amp;gt;&lt;/code&gt; tag. This is how we define the input that comes into our template. We passed &lt;code&gt;addNewTodo&lt;/code&gt; in from the &lt;code&gt;&amp;lt;TodoApp&amp;gt;&lt;/code&gt; template and now we can use destructuring to get it here. &lt;/p&gt;

&lt;p&gt;You can see Marko's shorthand class syntax on &lt;code&gt;&amp;lt;header.header&amp;gt;&lt;/code&gt; which applies the &lt;code&gt;header&lt;/code&gt; class to the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; element. From there we create a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; with an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The tag variable on the input element returns an Element Reference Getter. This is a function that when called retrieves the native DOM reference to that tag. We use it in our Submit handler.&lt;/p&gt;

&lt;p&gt;Marko supports a shorthand for functions that we are using here that is very similar to JavaScript object methods. This is the equivalent of assigning the function to an attribute of the same name. Our Submit handler calls the &lt;code&gt;addNewTodos&lt;/code&gt; method from our store.&lt;/p&gt;

&lt;p&gt;Try it in the browser. You should see a large input field, and you should be able to enter some text and click enter and see it added to our page. Right now they all just get appended in a long line of text but we will add more functionality to our Todos in the next section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fpgvpgCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9ms9tatf3cxknkqg3fl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fpgvpgCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9ms9tatf3cxknkqg3fl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#making-our-todos-functional"&gt;
  &lt;/a&gt;
  Making our Todos Functional
&lt;/h1&gt;

&lt;p&gt;Well, it works but it ain't pretty. Let's now add our &lt;code&gt;&amp;lt;TodoItem&amp;gt;&lt;/code&gt; component. So go ahead and add &lt;code&gt;TodoItem.marko&lt;/code&gt; under your components folder and copy in the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;attrs&lt;/span&gt;&lt;span class="err"&gt;/{&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;updateTodo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;removeTodo&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;let&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;isEditing=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;let&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;editingTitle=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;const&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;saveEdit&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;isEditing&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;const&lt;/span&gt; &lt;span class="na"&gt;el = &lt;/span&gt;&lt;span class="s"&gt;title();&lt;/span&gt;
    &lt;span class="na"&gt;updateTodo&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todo.id&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title:&lt;/span&gt; &lt;span class="na"&gt;el.value&lt;/span&gt; &lt;span class="err"&gt;});&lt;/span&gt;
    &lt;span class="na"&gt;isEditing = &lt;/span&gt;&lt;span class="s"&gt;false;&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;{&lt;/span&gt; &lt;span class="na"&gt;completed:&lt;/span&gt; &lt;span class="na"&gt;todo.completed&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;editing:&lt;/span&gt; &lt;span class="na"&gt;isEditing&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div.view&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input.toggle&lt;/span&gt;
      &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;
      &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;todo.completed&lt;/span&gt;
      &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Toggle todo completed"&lt;/span&gt;
      &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;var&lt;/span&gt; &lt;span class="na"&gt;completed = &lt;/span&gt;&lt;span class="s"&gt;e.target.checked&lt;/span&gt; &lt;span class="err"&gt;===&lt;/span&gt; &lt;span class="na"&gt;true&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="na"&gt;updateTodo&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todo.id&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="err"&gt;});&lt;/span&gt;
      &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;onDblClick&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;isEditing = &lt;/span&gt;&lt;span class="s"&gt;true;&lt;/span&gt;
      &lt;span class="na"&gt;editingTitle = &lt;/span&gt;&lt;span class="s"&gt;todo.title;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      ${todo.title}
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;button.destroy&lt;/span&gt;
      &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="na"&gt;removeTodo&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todo.id&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Delete todo"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"edit"&lt;/span&gt;
    &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Enter the new todo title"&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
    &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;editingTitle&lt;/span&gt;
    &lt;span class="na"&gt;onBlur=&lt;/span&gt;&lt;span class="s"&gt;saveEdit&lt;/span&gt;
    &lt;span class="na"&gt;onChange=&lt;/span&gt;&lt;span class="s"&gt;saveEdit&lt;/span&gt;
    &lt;span class="na"&gt;onKeydown&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="na"&gt;(e.keyCode =&lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt; &lt;span class="err"&gt;13&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;*&lt;/span&gt; &lt;span class="na"&gt;ENTER&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;saveEdit&lt;/span&gt;&lt;span class="err"&gt;();&lt;/span&gt;
      &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;else&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="na"&gt;(e.keyCode =&lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt; &lt;span class="err"&gt;27&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;*&lt;/span&gt; &lt;span class="na"&gt;ESC&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;isEditing = &lt;/span&gt;&lt;span class="s"&gt;false;&lt;/span&gt;
      &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our biggest code snippet by far and it's because the Todos do a lot of stuff. You can check them, uncheck them, and double click to edit.&lt;/p&gt;

&lt;p&gt;We are seeing the &lt;code&gt;&amp;lt;const&amp;gt;&lt;/code&gt; tag for the first time here. It is useful for defining things in our template that do not get reassigned. In this case a function we use in multiple places. We also see nice usage of Marko's support of object syntax for applying classes. &lt;/p&gt;

&lt;p&gt;If you add the necessary methods to the store and replace the contents of &lt;code&gt;&amp;lt;for&amp;gt;&lt;/code&gt; in &lt;code&gt;TodoApp.marko&lt;/code&gt; you should now have a basic working Todo application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;TodoStore&lt;/span&gt;&lt;span class="err"&gt;/{&lt;/span&gt;
  &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;addNewTodo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;updateTodo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;removeTodo&lt;/span&gt;
 &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section.todoapp&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;TodoHeader&lt;/span&gt; &lt;span class="na"&gt;addNewTodo=&lt;/span&gt;&lt;span class="s"&gt;addNewTodo&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;if&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="na"&gt;todos.length&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section.main&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul.todo-list&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;for&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="na"&gt;of=&lt;/span&gt;&lt;span class="s"&gt;todos&lt;/span&gt; &lt;span class="na"&gt;by=&lt;/span&gt;&lt;span class="s"&gt;(todo&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; todo.id)&amp;gt;
          &lt;span class="nt"&gt;&amp;lt;TodoItem&lt;/span&gt; &lt;span class="na"&gt;todo=&lt;/span&gt;&lt;span class="s"&gt;todo&lt;/span&gt; &lt;span class="na"&gt;updateTodo=&lt;/span&gt;&lt;span class="s"&gt;updateTodo&lt;/span&gt; &lt;span class="na"&gt;removeTodo=&lt;/span&gt;&lt;span class="s"&gt;removeTodo&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/for&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w5MYFkMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmikggtgtimittz71chz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5MYFkMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmikggtgtimittz71chz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#filtering-and-other-features"&gt;
  &lt;/a&gt;
  Filtering and Other Features
&lt;/h1&gt;

&lt;p&gt;We aren't quite done yet. The rest of our features are going to be focused on &lt;code&gt;TodoApp.marko&lt;/code&gt;. First, let's add a toggle all checkbox. We need to add &lt;code&gt;toggleAllTodosCompleted&lt;/code&gt; to our list of properties we are pulling out of &lt;code&gt;&amp;lt;TodoStore&amp;gt;&lt;/code&gt; and then we can replace the line &lt;code&gt;&amp;lt;section.main&amp;gt;&lt;/code&gt; tag with this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;const&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;remainingCount=&lt;/span&gt;&lt;span class="s"&gt;todos.length&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;todos.filter((todo) =&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; &lt;/span&gt;&lt;span class="s"&gt;todo.completed).length&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section.main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;id&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;toggleId&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input.toggle-all&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;toggleId&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;
    &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;(!remainingCount)&lt;/span&gt;
    &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;toggleAllTodosCompleted&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e.target.checked&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;toggleId&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We introduce another new tag here &lt;code&gt;&amp;lt;id&amp;gt;&lt;/code&gt;. This one gives us a unique identifier that is stable across server and browser execution and a perfect way to create an id to link our input to its label. And now we can toggle on and off all our todos.&lt;/p&gt;

&lt;p&gt;The last feature we need to add is filtering the list by whether they are completed or not. Instead of trying to explain I'm going to just post the final &lt;code&gt;TodoApp.marko&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;TodoStore&lt;/span&gt;&lt;span class="err"&gt;/{&lt;/span&gt;
  &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;setFilter&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;addNewTodo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;updateTodo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;removeTodo&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;toggleAllTodosCompleted&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;clearCompleted&lt;/span&gt;
 &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section.todoapp&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;TodoHeader&lt;/span&gt; &lt;span class="na"&gt;addNewTodo=&lt;/span&gt;&lt;span class="s"&gt;addNewTodo&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;if&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="na"&gt;todos.length&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;const&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;remainingCount=&lt;/span&gt;&lt;span class="s"&gt;todos.length&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;todos.filter((todo) =&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; &lt;/span&gt;&lt;span class="s"&gt;todo.completed).length&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;const&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;filteredTodos = &lt;/span&gt;&lt;span class="s"&gt;todos.filter(todo&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; {
      if (filter === "active") return !todo.completed;
      if (filter === "completed") return todo.completed;
      return true;
    })/&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;const&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;handleFilter=&lt;/span&gt;&lt;span class="s"&gt;((filter)&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; (e) =&amp;gt; {
      setFilter(filter);
      e.preventDefault();
    })/&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;section.main&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;id&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;toggleId&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input.toggle-all&lt;/span&gt;
        &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;toggleId&lt;/span&gt;
        &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;
        &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;(!remainingCount)&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;toggleAllTodosCompleted&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e.target.checked&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;toggleId&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul.todo-list&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;for&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="na"&gt;of=&lt;/span&gt;&lt;span class="s"&gt;filteredTodos&lt;/span&gt; &lt;span class="na"&gt;by=&lt;/span&gt;&lt;span class="s"&gt;(todo&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; todo.id)&amp;gt;
          &lt;span class="nt"&gt;&amp;lt;TodoItem&lt;/span&gt; &lt;span class="na"&gt;todo=&lt;/span&gt;&lt;span class="s"&gt;todo&lt;/span&gt; &lt;span class="na"&gt;updateTodo=&lt;/span&gt;&lt;span class="s"&gt;updateTodo&lt;/span&gt; &lt;span class="na"&gt;removeTodo=&lt;/span&gt;&lt;span class="s"&gt;removeTodo&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/for&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;footer.footer&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span.todo-count&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;${remainingCount}&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; ${remainingCount &amp;gt; 1 ? "items" : "item"} left
      &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul.filters&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
            &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#/"&lt;/span&gt;
            &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;{&lt;/span&gt; &lt;span class="na"&gt;selected:&lt;/span&gt; &lt;span class="na"&gt;filter =&lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;handleFilter("all")&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            All
          &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
            &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#/active"&lt;/span&gt;
            &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;{&lt;/span&gt; &lt;span class="na"&gt;selected:&lt;/span&gt; &lt;span class="na"&gt;filter =&lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;handleFilter("active")&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Active
          &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
            &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#/completed"&lt;/span&gt;
            &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;{&lt;/span&gt; &lt;span class="na"&gt;selected:&lt;/span&gt; &lt;span class="na"&gt;filter =&lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;handleFilter("completed")&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Completed
          &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;if&lt;/span&gt;&lt;span class="err"&gt;=(&lt;/span&gt;&lt;span class="na"&gt;remainingCount&lt;/span&gt; &lt;span class="err"&gt;!==&lt;/span&gt; &lt;span class="na"&gt;todos.length&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button.clear-completed&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;clearCompleted&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Clear completed
        &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://unpkg.com/todomvc-app-css@2.2.0/index.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No new functionality. Just builds on what we have been doing this whole time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUpoJAXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmunsdccx5jsw41q04wo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUpoJAXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmunsdccx5jsw41q04wo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;And that is it. We have our TodoMVC app with Marko. There are a few more things we can do. Like add persistence to local storage or database but I will leave that as an exercise for the reader. You can see the repo with our project &lt;a href="https://github.com/ryansolid/marko-todomvc"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully, through this tutorial, you gained an appreciation for how Marko and the new Tags API allows us to easily make stateful templates with some simple extensions over HTML to produce isomorphic apps.&lt;/p&gt;

&lt;p&gt;That's right. The app we just made is fully server-rendered and dynamic in the browser. It doesn't get much easier than that. &lt;/p&gt;

</description>
      <category>markojs</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Is C# really dying.? Future of C#.!</title>
      <author>mukulalpha</author>
      <pubDate>Tue, 31 Aug 2021 19:25:11 +0000</pubDate>
      <link>https://dev.to/mukulalpha/is-c-really-dying-future-of-c-1dn6</link>
      <guid>https://dev.to/mukulalpha/is-c-really-dying-future-of-c-1dn6</guid>
      <description>&lt;p&gt;C# is a general-purpose programming language. Technically speaking, you can use it for anything other than what has been developed. There are many coding styles suitable for the C# programming language (it can be used for both functional programming style and object-oriented programming style). It is compiled and strongly typed which means it is easier in doing development but if you are shipping your code into production , there’s little bit more to it.&lt;/p&gt;

&lt;p&gt;C# was developed by Microsoft in 2000 in response to JAVA. They have some similarities, such as strongly typed,compiled, Object-Oriented ,working on a virtual machine and many more. C# provides support for Modern days functionalities for all kind of software development such as front-end ,back-end, mobile ,etc.&lt;/p&gt;

&lt;p&gt;Lets talk about some pros and cons&lt;br&gt;
PROS&lt;br&gt;
Jobs- The question a person asks when choosing a programming language is “Can I use this to find a job?” No matter what career site you search , C# and .Net developers are most assault after programmers on the platform.There are a lot of jobs out there .&lt;/p&gt;

&lt;p&gt;Tools- Visual studio is one of the best and most popular IDE in the market.&lt;/p&gt;

&lt;p&gt;Frameworks- .NET Core is cross platform variant of .NET framework &amp;amp; Xamarin used for cross platform Mobile ddevelopment&lt;/p&gt;

&lt;p&gt;Cross Platform- It means it allows our C# programs to run on multiple platform instead of only windows machine.&lt;/p&gt;

&lt;p&gt;Speed- C# is fast compared to same Modern day interpreted programming languages such as Python and Javascript.&lt;/p&gt;

&lt;p&gt;CONS&lt;br&gt;
Learning Curve- Compared to some modern programming languages such as Python or Javscript .C# is quite had to learn.&lt;/p&gt;

&lt;p&gt;Is C# Dying..?Should you learn C# in 2021?&lt;br&gt;
My answer would be NO, C# is not dying and YES you should learn it in 2021 because of such new and upcoming features for every programming need.&lt;/p&gt;

&lt;p&gt;If you are building a web application, you will consider where it should be hosted, and .Net allows you to host it on a host of your choice. In the past, you had to host to Windows &amp;amp; it would be more expensive compared to a linux host. For an enterprise this can be very important, because you can now host on AWS, Heroku, Windows, Azure, and Linux (in short, you can choose to host).&lt;/p&gt;

&lt;p&gt;Let’s talk about some key points in C#&lt;br&gt;
Web Application Development- There is a framework called ASP.Net, under this framework it brings MVC and Web assembly world using Blazor. Many Enterprise solutions are made using C# because of built in scaffolding ,OEM using entity framework ,security called Identity which allows you to build very fast, secure and scalable application.&lt;/p&gt;

&lt;p&gt;Another approach to web development is Blazor, because Microsoft puts Blazor at the top of the MVC and Razor pages, because it is the future of web development. So, if u need to learn one thing it’ll be ASP.net but if you are already coding for a living and already doing things then take a look at Blazor because it has the best implementation so far in web Assembly till date &amp;amp; Another approach to web development is Blazor, because Microsoft puts Blazor at the top of the MVC and Razor pages, because it is the future of web development.&lt;/p&gt;

&lt;p&gt;Mobile Development- Writing a single code base that supports Android and IOS devices gives us cross-platform mobile development. There are basically three ways to do this: React Native, Google’s Dart / Flutter, and Microsoft’s Xamarin.&lt;/p&gt;

&lt;p&gt;Xamarin allows us to create a user interface that supports IOS and Android natively, and it also allows us to share business layer logic code between multiple platforms. Applications developed by Xamarin can run on Android devices, IOS, and Windows / Mac OS desktops. Since it is now open source, the community can jump in and build things that can extend Xamarin to infinity&lt;/p&gt;

&lt;p&gt;With C #, you can use ASP.net and the Web API to create microservices or service-based sites, allowing you to run these functions sometimes without using infrastructure in your traditional web hosting or service functions. You can create these microservice patterns and host them on Azure, AWS, or a host of your choice.&lt;/p&gt;

&lt;p&gt;Game Development- Build a game inside of C# in Unity that will allow you be break into Game Development.&lt;/p&gt;

&lt;p&gt;There’s Embeded, Machine Learning as well as Internet of things(IOT) which are being supported by C# &amp;amp; Microsoft.&lt;/p&gt;

&lt;p&gt;CLOUD- Microsoft provides you with one of the most powerful cloud platforms known on Azure. It provides you with cognitive services, enables you to perform speech recognition and text-to-speech services, and uses ML.Net for machine learning.&lt;/p&gt;

&lt;p&gt;The great thing about C # and .Net is that it is now open source and the tools are free earlier it was not.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>programming</category>
      <category>webdev</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Views and it's types in Android {Android Development} | Day 2🔥🚀</title>
      <author>Atharva Shirdhankar</author>
      <pubDate>Tue, 31 Aug 2021 19:06:11 +0000</pubDate>
      <link>https://dev.to/star_trooper/views-and-it-s-types-in-android-android-development-day-2-5hc2</link>
      <guid>https://dev.to/star_trooper/views-and-it-s-types-in-android-android-development-day-2-5hc2</guid>
      <description>&lt;p&gt;In last blog(&lt;a href="https://dev.to/star_trooper/introduction-to-android-development-part-1-day-1-4ki2"&gt;here&lt;/a&gt;)I talked about prerequisites ,tools and tech stack/Programming language we use for Android Development. And how XML help us in structuring and designing components and how Java/Kotlin/C++ is used for Logic&lt;br&gt;
for our Android app.&lt;/p&gt;

&lt;p&gt;In Android Development ,the first thing we need to learn is something called Views.&lt;br&gt;
View is a basic building block of UI (User Interface) in android. &lt;br&gt;
And using the series of views we build our Application UI&lt;br&gt;
At start we will have a look over 3 basic views 👇&lt;/p&gt;

&lt;p&gt;1.1  TextView 👇&lt;br&gt;
The first and commonly used view is "TextView".&lt;br&gt;
➡️ TextView is the most widely used view used to show pre-defined text on display screen.&lt;br&gt;
Snippet:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXfT2JPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h69mbxvl52s2rduliw1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXfT2JPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h69mbxvl52s2rduliw1s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.2 Few TextView attributes👇&lt;br&gt;
i . android:text&lt;br&gt;
➡️ Text to display. &lt;br&gt;
ii . android:textColor&lt;br&gt;
➡️ Text color. &lt;br&gt;
iii . android:textStyle&lt;br&gt;
➡️ Style (normal, bold, italic, bold|italic) for the text. &lt;br&gt;
iv . android:fontFamily&lt;br&gt;
➡️ Font family for the text.&lt;/p&gt;

&lt;p&gt;Read more about 👉 &lt;a href="https://developer.android.com/reference/android/widget/TextView"&gt;TextView&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.1 ImageView 👇&lt;br&gt;
➡️ The second commonly used view is "ImageView".&lt;br&gt;
ImageView are used in Android application to place an image in the view.ImageView is used to show any picture on the user interface.&lt;/p&gt;

&lt;p&gt;Snippet:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7gnUP0E5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fk71mc9lkqws04q81rdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7gnUP0E5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fk71mc9lkqws04q81rdp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.2 Few ImageView attributes&lt;br&gt;
i . android:src&lt;br&gt;
➡️ Sets a drawable as the content for this ImageView.&lt;br&gt;
ii. android:cropToPadding&lt;br&gt;
➡️ If true, the image will be cropped to fit within its padding.&lt;br&gt;
iii. android:tint&lt;br&gt;
➡️ The tinting color for the image.&lt;/p&gt;

&lt;p&gt;Note for ImageView 👇&lt;br&gt;
Any image that we want to display in the app should be placed under the drawable folder. This folder can be found under &lt;br&gt;
app → res → drawable. &lt;br&gt;
To insert an image, simply copy the image and then right click on drawable → Paste.&lt;/p&gt;

&lt;p&gt;Read more about 👉 &lt;a href="https://developer.android.com/reference/android/widget/ImageView"&gt;ImageView&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.1 Button&lt;br&gt;
A user interface element the user can tap or click to perform an action.&lt;br&gt;
Snippet:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iTLdEh2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5k8amvr0kmnn7qztotr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTLdEh2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5k8amvr0kmnn7qztotr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;About the Button 👇&lt;br&gt;
We use Button to trigger the method we wrote in Java/Kotlin/C++ using "android:onClick" attribute of button view.&lt;/p&gt;

&lt;p&gt;Read more about 👉 &lt;a href="https://developer.android.com/reference/android/widget/Button"&gt;Button&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resources&lt;br&gt;
&lt;a href="https://labs.udacity.com/android-visualizer/#/android/"&gt;Online XML visualizer&lt;/a&gt; for practicing Purpose.&lt;/p&gt;

</description>
      <category>xml</category>
      <category>android</category>
      <category>development</category>
      <category>sharingknowledge</category>
    </item>
    <item>
      <title>Mom, I wrote the world's simplest HTTP server!</title>
      <author>Alexander</author>
      <pubDate>Tue, 31 Aug 2021 19:03:45 +0000</pubDate>
      <link>https://dev.to/xnbox/mom-i-wrote-the-world-s-simplest-http-server-ob8</link>
      <guid>https://dev.to/xnbox/mom-i-wrote-the-world-s-simplest-http-server-ob8</guid>
      <description>&lt;p&gt;Modern web servers include millions of lines of code, but today you will find that it only takes four lines to write the simplest HTTP server.&lt;/p&gt;

&lt;p&gt;No, it's not going to be something boring like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;WebServer&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say we want Mom to see our greeting when she visits our server.&lt;br&gt;
Do you have the latest version of VS Code open? If so, close it, you won't need it! ✋&lt;br&gt;
Open your favorite text editor. Name your file: &lt;code&gt;Mom.txt&lt;/code&gt; Did you feel how good your soul felt?...&lt;br&gt;&lt;br&gt;
Ok, we won't complicate things, we'll take a text editor and write four magic lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET / HTTP/1.1

HTTP/1.1 200 OK
Content-Type: text/html

Hello, Mom!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Better than "Hello, world!", Isn't it? 😉&lt;/p&gt;

&lt;p&gt;Our server is ready! Double click on the file icon to start your server...&lt;br&gt;
File opened in a text editor?! 🤔&lt;/p&gt;

&lt;p&gt;Shit... It's not working! What to do?&lt;br&gt;
Ok, I'll whisper the name of the some tool to you, but first, &lt;strong&gt;promise not to tell anyone about this magic wand&lt;/strong&gt;. Not even your mother. You promise?&lt;/p&gt;

&lt;p&gt;Write it down, then: &lt;a href="https://github.com/xnbox/DeepfakeHTTP"&gt;DeepfakeHTTP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download it and start your world's simplest HTTP server from the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java -jar df.jar Mom.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use a browser to check whether the server is running: &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XrMe5mwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjxmo0bheraj7yttu8ly.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XrMe5mwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjxmo0bheraj7yttu8ly.png" alt="Hello, Mom!"&gt;&lt;/a&gt;&lt;br&gt;
Oh, I forgot to tell you! You must have Java version 15 or higher installed on your computer.&lt;/p&gt;

&lt;p&gt;Are you still here?! Hurry up and run and argue with someone about writing a 4-line HTTP server! 🎉🎉🎉&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to apply transparency in OO programming ?</title>
      <author>Dibyojyoti Sanyal</author>
      <pubDate>Tue, 31 Aug 2021 18:40:06 +0000</pubDate>
      <link>https://dev.to/dibyojyoti/how-to-apply-transparency-in-oo-programming-2ffo</link>
      <guid>https://dev.to/dibyojyoti/how-to-apply-transparency-in-oo-programming-2ffo</guid>
      <description>&lt;p&gt;Transparency is one of the Object Oriented Design Principles that helps developers keep the code readable and understandable.&lt;/p&gt;

&lt;p&gt;When you look at the class or methods it should be very obvious immediately what it does, within the next 1 minute it should be obvious how it does what it does. You as a programmer should be able to understand the piece of code that you have written after several months even years when you look at it. Moreover, others too, should take the same amount of time that you took after 6 years to understand the code that you have written.  For Example, when anyone looks at the name of a class and its member variables and methods they should understand what they do and how, without any effort. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The name of the class should explain what it does or what it stands for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The name of the variable should say what it is used for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The name of a method should explain the action that is performed when the method is called. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A method name should have a verb to make that happen. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The same goes for the name of the objects, they should say what they are used for and in which context. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Normally a class is named as a noun example Employee class. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example, an Employee class can have variables, to maintain the state of an employee object. When the task of the Employee class is to keep age, salary, name, department details of an employee then the variable names should be like  age, salary, name, department. We should use the easiest name that identifies what the variables are for.  &lt;/p&gt;

&lt;p&gt;Here is another example for the methods. When a method increments the salary of an employee then name it like incrementSalary(). You can increment salary by providing an increment percentage or an adding a float amount to the existing salary. Then name them differently like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;incrementSalaryByPercentage(double percentage)
incrementSalaryByAmount(long additionalAmount)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now assume a department consists of 5 employees. and one of them is an IT manager, another is an accountant, another human resource manager and two programmers. You will create 5 objects of the same Employee class in the Department class. but name the name of each Employee object should explain their role like ITManager etc.&lt;/p&gt;

&lt;p&gt;When you start creating classes, start from top to bottom. That means write the user interfaces first to provide transparency. Things like services, databases etc. should be at the bottom of the structure and written later. It should be done this way so that, even if there are changes in the technical layer like how to access the database it should not affect the upper layer.&lt;/p&gt;

&lt;p&gt;This way just by following a good naming convention we can make our code easy to understand and transparent.&lt;/p&gt;

&lt;p&gt;For the original post please refer to &lt;a href="https://www.cloudnativemaster.com/post/what-transparency-means-in-oo-design-pattern-how-to-apply-it-in-code"&gt;my blog&lt;/a&gt;&lt;br&gt;
You can see similar posts in Object Oriented Design &lt;a href="https://www.cloudnativemaster.com/object-oriented-design"&gt;here&lt;/a&gt;  &lt;/p&gt;

</description>
      <category>oop</category>
      <category>java</category>
      <category>design</category>
    </item>
    <item>
      <title>How to Level Up as a Software Engineer | AWS Community Builders Program</title>
      <author>Brian H. Hough</author>
      <pubDate>Tue, 31 Aug 2021 18:14:28 +0000</pubDate>
      <link>https://dev.to/brianhhough/how-to-level-up-as-a-software-engineer-aws-community-builders-program-55g4</link>
      <guid>https://dev.to/brianhhough/how-to-level-up-as-a-software-engineer-aws-community-builders-program-55g4</guid>
      <description>&lt;p&gt;Wondering what you can do to level up as a software engineer, developer or programmer this year? 👨‍💻💭 &lt;/p&gt;

&lt;p&gt;In this episode of the &lt;a href="https://youtu.be/hFvGrvCpEsg"&gt;Tech Stack Playbook&lt;/a&gt;, I'm diving into the program that has single-handedly helped me the most in my tech career thus far: the AWS Community Builders Program. Today's episode focuses on AWS, the community, the core benefits of the program, and how it has helped me level up as a software engineer and developer this year.&lt;/p&gt;

&lt;p&gt;📝 Quick plug: Applications close on August 30, 2021, so please reach out if you have any questions about the program and be sure to apply by the deadline here: &lt;a href="https://amazonmr.au1.qualtrics.com/jfe/form/SV_dajuY7uPsH3NSTk"&gt;https://amazonmr.au1.qualtrics.com/jfe/form/SV_dajuY7uPsH3NSTk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s a glance at what you’ll learn in this episode:&lt;/p&gt;

&lt;p&gt;Time stamps:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=0s"&gt;00:00&lt;/a&gt; How the AWS Community Builders Program has helped me level up&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=43s"&gt;00:43&lt;/a&gt; Benefit #1: Being a Part of a Vibrant Community&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=215s"&gt;03:35&lt;/a&gt; Benefit #2: Being Surrounded by Constant Education and Learning&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=306s"&gt;05:06&lt;/a&gt; Benefit #3: An Immense Amount of Resources and Tools&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=383s"&gt;06:23&lt;/a&gt; Benefit #4: Get Connected to Conferences, Events, and Workshops&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=420s"&gt;07:00&lt;/a&gt; Why constant learning is key &amp;amp; how community/mentors can help&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=575s"&gt;09:35&lt;/a&gt; Reflecting on the past year of growth and development in software engineering&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hFvGrvCpEsg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-the-aws-community-builders-program-for-developers"&gt;
  &lt;/a&gt;
  👨‍💻 What are the Benefits of the AWS Community Builder's Program for Developers?
&lt;/h2&gt;

&lt;p&gt;The benefits of the AWS Community Builders program knows no bounds because it’s a truly priceless program. In the beginning, you will get a welcome kit which has some amazing AWS swag like hats, water bottles, desktop accessories, $500 of AWS credits, and way more goodies and benefits. But, there are several core aspects of the program that can be so instrumental to fellow programmers, developers, and people in tech. From exclusive webinars and events, to a global Slack channel of developers, programmers, software engineers, developer advocates, CTOs, executives, and everyone in between, there is so much value packed into this program for all involved.&lt;/p&gt;

&lt;p&gt;So what are the key highlights from this program? I'll walk through for key benefits of the program and explain why this program has been so valuable to me.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-1-being-a-part-of-a-vibrant-community"&gt;
  &lt;/a&gt;
  👨‍💻 BENEFIT #1: Being a Part of a Vibrant Community
&lt;/h2&gt;

&lt;p&gt;When you are starting out in your developer journey, whether at the executive or technical levels, whether you are a freelancer or employed by a software company, you always need to think about your community.&lt;/p&gt;

&lt;p&gt;Who are the people you surround yourself? Who do you turn to and talk to when you have questions or comments about tech, your job, your career etc.?&lt;/p&gt;

&lt;p&gt;During the COVID-19 pandemic and even beforehand, I was constantly thinking about how I can build my network of friends, colleagues, mentors, and guides in technology. As a self-taught programmer, I have done bootcamps and courses and programs, but I don’t have a degree in computer science, so I needed to surround myself with people who went down similar paths and different paths to learn what set them up for success.&lt;/p&gt;

&lt;p&gt;And joining a highly-engaged and inspiring community of software engineers and developers from around the world building on the same tools and frameworks is one of the best ways to accomplish this. It all goes back to joining a community. The AWS Community Builders program is full of some of the most selfless, smart, caring, and supportive people I have ever met. People who go out of their way to answer questions, help people when they have questions, and work on helping the rest of the community level up as well. AWS leaders, AWS Heroes, experts in tech, and senior leaders of the industry are all a part of this program along with early career and young software engineers like me. The community is so rich with so many different types of technology people, all sharing a passion for serverless frameworks, cloud-based software, and of course, AWS! &lt;/p&gt;

&lt;p&gt;If you are looking for a highly engaged and active family of developers and programmers who constantly will push you to be better, smarter, faster, and stronger than you were the day before, look no further than the AWS Community Builders Program, especially to be around people who inspire you to constantly level up.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-2-being-surrounded-by-constant-education-and-learning"&gt;
  &lt;/a&gt;
  👨‍💻 BENEFIT #2: Being Surrounded by Constant Education and Learning
&lt;/h2&gt;

&lt;p&gt;How are you constantly thinking about how you will level up as a developer or programmer? Are you learning new things or just doing the same-old-same-old.&lt;/p&gt;

&lt;p&gt;The AWS staff puts on incredible exclusive events, workshops, talks, and meetings on cutting-edge serverless tools like SageMaker and Hugging Face for artificial intelligence and machine learning (AI &amp;amp; ML), database best practices like DynamoDB or Neptune, messaging services like SNS and SES and PinPoint, as well as networking and compute services like EC2, VPC, etc. &lt;/p&gt;

&lt;p&gt;There is so much high level content that exists on the Internet, and it can leave you wondering…so how does this tech actually work? If I wanted to actually use these tools, what do I need to do? Well thanks to the these exclusive events and workshops, you get to have leading technology experts, AWS staff, and tech visionaries walk you through implementation, code, walkthroughs, and more. You get architecture diagrams, roadmaps, how-to-guides, and a plethora of resources.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-3-an-immense-amount-of-resources-and-tools"&gt;
  &lt;/a&gt;
  👨‍💻 BENEFIT #3:  An Immense Amount of Resources and Tools
&lt;/h2&gt;

&lt;p&gt;The third biggest benefit that I think makes the AWS Community Builders Program so valuable is the resources and tools Community Builders have at their disposal. I’ve benefited a lot from having a subscription to Cloud Academy and having access to classes and guides and lessons.&lt;/p&gt;

&lt;p&gt;By going through classes and education online, on-demand, and on the topics you are most curious on, this makes it so easy to get the skills you need for your job, for your passion project, and for your company. Online education is only going to increase in importance and value in the months and years to come, and especially during these remote months, being able to attend virtual classes and webinars right from your computer makes it that much easier to upskill and level up.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-4-get-connected-to-conferences-events-and-workshops"&gt;
  &lt;/a&gt;
  👨‍💻 BENEFIT #4:  Get Connected to Conferences, Events, and Workshops
&lt;/h2&gt;

&lt;p&gt;The fourth largest benefit has to be the connection to conferences, events, and workshops. Being able to jump into a conference session or be invited to a Brown Bag lunch workshop on a certain AWS or serverless tool….and also be invited to speak at events like this…has such an immense amount of value for anyone looking to get more presentation and conference experience under their belt.&lt;/p&gt;

&lt;p&gt;As a young professional, opportunities like this can be difficult to come by, so having people that can put you in touch with event organizers and leaders can make all the difference for sharing the insights you’re learning on the job, in your side projects, or generally sharing insights based on what you are working on.&lt;/p&gt;

&lt;p&gt;One of the opportunities I was able to earn was giving a 2 hour master class on the &lt;a href="https://datasaturdays.com/2021-09-04-datasaturday0014/"&gt;9 AWS Serverless Databases all Programmers and Software Engineers Should Know&lt;/a&gt;. Additionally, this upcoming Saturday, my talk on AWS Serverless Databases was accepted for &lt;a href="https://datasaturdays.com/2021-09-04-datasaturday0014/"&gt;Data Saturday Oslo&lt;/a&gt;, which I am super excited about. &lt;/p&gt;

&lt;p&gt;Not only do you get amazing experience by presenting technology to global audiences, but you also get to inspire and empower other developers to learn new tools, solutions, strategies, and methodologies. By bringing people into the fold of cutting-edge technology, you never know who you might empower in the “virtual stands.” Or in the audience, there might be someone who goes on to implement what you talked about or builds a solution that has a large impact on the world. The possibilities are truly limitless and you never know what your talk might do to impact people and get people started in their serverless, full-stack, and AWS journeys. &lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-become-an-aws-community-builder"&gt;
  &lt;/a&gt;
  👨‍💻 How to Become an AWS Community Builder?
&lt;/h2&gt;

&lt;p&gt;If this interests you and you want join this incredible program and community, I highly recommend that you apply! The deadline is August 30th, so make sure to apply via the application link here: &lt;a href="https://amazonmr.au1.qualtrics.com/jfe/form/SV_dajuY7uPsH3NSTk"&gt;https://amazonmr.au1.qualtrics.com/jfe/form/SV_dajuY7uPsH3NSTk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions about the application process, please reach out over social media or drop a comment below and I will respond!&lt;/p&gt;

&lt;p&gt;Check out the full recording below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hFvGrvCpEsg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know if you found this post helpful! And if you haven't yet, make sure to check out these free resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Follow my Instagram for more: &lt;a href="https://instagram.com/brianhhough"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Watch my latest &lt;a href="https://youtube.com/brianhhough"&gt;YouTube video for more&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Listen to my Podcast on &lt;a href="https://youtube.com/brianhhough"&gt;Apple Podcasts&lt;/a&gt; and &lt;a href="https://youtube.com/brianhhough"&gt;Spotify&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join my FREE &lt;a href="https://facebook.com/groups/techstackplaybook"&gt;Tech Stack Playbook Facebook Group&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's digitize the world together! 🚀&lt;/p&gt;

&lt;p&gt;-- Brian&lt;/p&gt;

</description>
      <category>aws</category>
      <category>javascript</category>
      <category>react</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 31 Aug 2021 18:04:47 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-42d7</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-42d7</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sorting-through-the-chaos"&gt;
  &lt;/a&gt;
  Sorting through the Chaos
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/thenjdevopsguy"&gt;@thenjdevopsguy&lt;/a&gt;
 explains why we need chaos engineering — and how can make sense of it 💡 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenjdevopsguy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bowlfvP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dtdzRPNS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/332370/ac9865d6-3a6f-41f6-a661-b217c9e54873.png" alt="thenjdevopsguy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenjdevopsguy/three-tips-to-understand-chaos-engineering-1eoc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Three Tips To Understand Chaos Engineering&lt;/h2&gt;
      &lt;h3&gt;Mike Levan ・ Aug 24 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#chaosengineer&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sre&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloudnative&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#all-about-transfer-learning"&gt;
  &lt;/a&gt;
  All about transfer learning
&lt;/h2&gt;

&lt;p&gt;Transfer learning can save you a lot of time when developing a machine learning model from scratch. &lt;a class="mentioned-user" href="https://dev.to/flippedcoding"&gt;@flippedcoding&lt;/a&gt;
 explains. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/flippedcoding" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWt-uaTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--D-VsiVuP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/77973/be223e4c-dc34-43da-a894-10be8f272316.jpg" alt="flippedcoding"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/flippedcoding/using-experiments-for-transfer-learning-a8f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Using Experiments for Transfer Learning&lt;/h2&gt;
      &lt;h3&gt;Milecia ・ Aug 26 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#your-check-engine-light-is-on"&gt;
  &lt;/a&gt;
  Your "check engine" light is on
&lt;/h2&gt;

&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/dinamlev"&gt;@dinamlev&lt;/a&gt;
 writes, "it's critical to write de-coupled, repeatable tests that provide important, meaningful signals." You'll get a primer on how to do just that in this post. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dinamlev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHAi6Abu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S-P6cTPl--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/692709/dd43737c-a210-4818-85d5-5dd51b62ea04.jpg" alt="dinamlev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dinamlev/your-check-engine-light-is-on-how-to-write-good-software-tests-e05" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to write good software tests&lt;/h2&gt;
      &lt;h3&gt;Dina Levitan ・ Aug 27 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#testing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#where-nostalgia-meets-software"&gt;
  &lt;/a&gt;
  Where nostalgia meets software
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/christinecdev"&gt;@christinecdev&lt;/a&gt;
's tutorial aims to help you get started with Local Storage and further your React skills — with some added Pokémon flair 😎 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/christinecdev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yoPGmWOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--16HSizq8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/688776/8a509ea6-303e-4131-8911-607a4ba0f42f.jpeg" alt="christinecdev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/christinecdev/let-s-make-a-pokemon-themed-note-keeping-app-in-react-2afg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let's Make a Pokémon Themed Note Keeping App in React!&lt;/h2&gt;
      &lt;h3&gt;Christine Coomans ・ Aug 29 ・ 17 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#great-web-design-from-accessibilty-to-z"&gt;
  &lt;/a&gt;
  Great web design from A(ccessibilty) to Z
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/imiahazel"&gt;@imiahazel&lt;/a&gt;
 has provided some design guidelines that will place your website thousands of steps aheads of the pack.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/imiahazel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESBKwXwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ICB5QvkY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/680015/de81baf3-f7c7-45d7-bb7b-c0a6c74d4fed.jpeg" alt="imiahazel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/imiahazel/8-fundamental-principles-of-effective-web-design-196l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;8 Fundamental Principles of Effective Web Design&lt;/h2&gt;
      &lt;h3&gt;Imia Hazel ・ Aug 24 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdesign&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#web3-is-changing-the-game"&gt;
  &lt;/a&gt;
  Web3 is changing the game
&lt;/h2&gt;

&lt;p&gt;There's a lot of misguided and downright spammy Web3/cryptocurrency content out there. &lt;a class="mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;
 has advice you can trust. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dabit3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gYALFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YawV5F9h--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/126437/41231eb2-054b-4417-bc35-814e491a2d5d.jpeg" alt="dabit3"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dabit3/the-new-creator-economy-daos-community-ownership-and-cryptoeconomics-lnl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The New Creator Economy - DAOs, Community Ownership, and Cryptoeconomics&lt;/h2&gt;
      &lt;h3&gt;Nader Dabit ・ Aug 26 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#blockchain&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ethereum&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#knowing-and-nailing-the-expectations-of-your-role"&gt;
  &lt;/a&gt;
  Knowing and nailing the expectations of your role
&lt;/h2&gt;

&lt;p&gt;In this article, &lt;a class="mentioned-user" href="https://dev.to/eisabai"&gt;@eisabai&lt;/a&gt;
 offers answers to many of the early-career software development questions that you wanted to ask your new colleagues but were too afraid to.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/eisabai" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZlkZHg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zrRM4rpM--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/477004/e7c8b243-802a-4e3d-a7da-146e9c2e3fea.jpg" alt="eisabai"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/eisabai/your-first-30-days-as-a-software-developer-at-a-tech-company-273e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Your First 30 Days as a Software Developer at a Tech Company&lt;/h2&gt;
      &lt;h3&gt;Isabel Nyo ・ Aug 24 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#advice&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Why you should use  Cookiecutter in you next Django Project.</title>
      <author>YusufAdel</author>
      <pubDate>Tue, 31 Aug 2021 18:03:16 +0000</pubDate>
      <link>https://dev.to/yusufadel/django-cookiecutter-173n</link>
      <guid>https://dev.to/yusufadel/django-cookiecutter-173n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-cookiecutter"&gt;
  &lt;/a&gt;
  What is Cookiecutter?
&lt;/h2&gt;

&lt;p&gt;A command-line utility that creates projects from cookiecutters (project templates), e.g. creating a Python package project from a Python package project template.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cross-platform: Windows, Mac, and Linux are officially supported.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don’t have to know/write Python code to use Cookiecutter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Works with Python 2.7, 3.5, 3.6, 3.7, 3.8 ,PyPy and PyPy3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Project templates can be in any programming language or markup format:&lt;br&gt;
Python, JavaScript, Ruby, CoffeeScript, RST, Markdown, CSS, HTML, you name it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use multiple languages in the same project template.&lt;br&gt;
Simple command line usage:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#install-cookiecutter"&gt;
  &lt;/a&gt;
  Install cookiecutter
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--user&lt;/span&gt; cookiecutter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;or you can use any package manager&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;First, clone a Cookiecutter project template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git@github.com:audreyr/cookiecutter-pypackage.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#make-your-changes"&gt;
  &lt;/a&gt;
  Make your changes
&lt;/h2&gt;

&lt;p&gt;Modify the variables defined in cookiecutter.json.&lt;/p&gt;

&lt;p&gt;Open up the skeleton project. If you need to change it around a bit, do so.&lt;/p&gt;

&lt;p&gt;You probably also want to create a repo, name it differently, and push it as your own new Cookiecutter project template, for handy future use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-your-project"&gt;
  &lt;/a&gt;
  Generate your project
&lt;/h2&gt;

&lt;p&gt;Then generate your project from the project template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cookiecutter cookiecutter-pypackage/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and thats is it, your are ready to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  reference
&lt;/h2&gt;

&lt;p&gt;Documentation: &lt;a href="https://cookiecutter.readthedocs.io"&gt;https://cookiecutter.readthedocs.io&lt;/a&gt;&lt;br&gt;
GitHub: &lt;a href="https://github.com/cookiecutter/cookiecutter"&gt;https://github.com/cookiecutter/cookiecutter&lt;/a&gt;&lt;br&gt;
PyPI: &lt;a href="https://pypi.python.org/pypi/cookiecutter"&gt;https://pypi.python.org/pypi/cookiecutter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>productivity</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Data Types JS {Day -18}</title>
      <author>Al Siam</author>
      <pubDate>Tue, 31 Aug 2021 17:57:24 +0000</pubDate>
      <link>https://dev.to/alsiamworld/data-types-js-day-18-2hlp</link>
      <guid>https://dev.to/alsiamworld/data-types-js-day-18-2hlp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-18-"&gt;
  &lt;/a&gt;
  100daysofcode { Day -18 }
&lt;/h1&gt;

&lt;p&gt;Today I learned some important things about JavaScript.&lt;/p&gt;

&lt;p&gt;There are two types of data: primitive data and non-primitive data.&lt;br&gt;
Primitive data type:&lt;br&gt;
=&amp;gt; Number, string, boolean, undefined, null, symbol&lt;br&gt;
Non-primitive data types:&lt;br&gt;
=&amp;gt; Objects and arrays&lt;/p&gt;

&lt;p&gt;Also learned the difference between == and ===, the difference between block scope and global scope, also learned the difference between null and undefined.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESAgitV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cezht4t3p5x0ixq5ejfr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESAgitV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cezht4t3p5x0ixq5ejfr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-programming-codinglife-devcommunity"&gt;
  &lt;/a&gt;
  javascript #programming #codinglife #devcommunity
&lt;/h1&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Unit testing a react component which uses context API</title>
      <author>Vignesh Pugazhendhi</author>
      <pubDate>Tue, 31 Aug 2021 17:55:39 +0000</pubDate>
      <link>https://dev.to/vignesh_pugaz/unit-testing-a-react-component-which-uses-context-api-3nen</link>
      <guid>https://dev.to/vignesh_pugaz/unit-testing-a-react-component-which-uses-context-api-3nen</guid>
      <description>&lt;h1&gt;
  &lt;a href="#unit-testing"&gt;
  &lt;/a&gt;
  Unit Testing
&lt;/h1&gt;

&lt;p&gt;In programming, unit testing is the method to test a single unit of code. A single unit of code may be one or more program modules combined together or the smallest unit of working code that cannot be divided further, by doing so the unit on the whole is not functional as expected.If you are familiar with reactjs testing libraries like jest and enzyme, jasmine or react-testing-library, you must have tested individual components on the top level by shallow rendering. Shallow rendering renders a particular component without rendering it's children for it to be tested.Here we will be learning how to unit test a react component using context API with the help of enzyme testing utility.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#enzyme"&gt;
  &lt;/a&gt;
  Enzyme
&lt;/h1&gt;

&lt;p&gt;Enzyme is not a testing library.It is more of a testing utility which lets you manipulate,traverse,interact with the DOM elements. Enzyme can be used with jest or karma or mocha depending upon the need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#context-api"&gt;
  &lt;/a&gt;
  Context API
&lt;/h1&gt;

&lt;p&gt;Context API by reactjs provides a way to pass down the data to the components without having to actually pass the data as props at each level. For example, consider component A having 3 nested children B,C and D.If A has to pass some values to D,instead of prop drilling the values, one can wrap the component D as a consumer of the context and A as a provider.&lt;br&gt;
Context API might sound similar to react-redux architecture but it is completely different from it.&lt;br&gt;
For those who do not have an experience working with context API, you can go through the reactjs documentation for better understanding&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;unit testing context api&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consider the following piece of code to setup a context:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';

export default React.createContext("en")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's call this file languageContext.js. Now since the context is now defined, we can wrap our root component as the provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect, useState } from "react";
import "./App.css";
import GuessedWord from "./GuessedWord/GuessedWord";
import LanguagePicker from "./GuessedWord/LanguagePicker";
import languageContext from "./languageContext";

/**
 * @function reducer to update state automatically when dispatch is called
 * @param state {object} previous state
 * @param action {object} type and payload properties
 * @return {object} new state
 */

const reducer = (state, action) =&amp;gt; {
  switch (action.type) {
    case "setSecretWord":
      return { ...state, secretWord: action.payload };
    case "setLanguage":
      return { ...state, language: action.payload };
    default:
      throw new Error(`Invalid action type ${action.type}`);
  }
};

function App(props) {
  //const [secretWord,setSecretWord]=useState('');

  const [state, dispatch] = React.useReducer(reducer, {
    secretWord: "",
    language: "en",
  });

  const success = false;
  const guessedWords = [];

  const setSecretWord = (secretWord) =&amp;gt; {
    dispatch({ type: "setSecretWord", payload: secretWord });
  };

  const setLanguage = (lang) =&amp;gt; {
    dispatch({ type: "setLanguage", payload: lang });
  };

  useEffect(() =&amp;gt; {
    getSecretWord(setSecretWord);
  }, []);

  let content;
  if (!state.secretWord.length) content = &amp;lt;div data-test="spinner" /&amp;gt;;
  else
    content = (
      &amp;lt;&amp;gt;
        &amp;lt;h1&amp;gt;Jotto&amp;lt;/h1&amp;gt;
        &amp;lt;languageContext.Provider value={state.language}&amp;gt;
          &amp;lt;LanguagePicker setLanguage={setLanguage} /&amp;gt;
          &amp;lt;GuessedWord guessedWords={guessedWords} /&amp;gt;
        &amp;lt;/languageContext.Provider&amp;gt;
      &amp;lt;/&amp;gt;
    );

  return &amp;lt;div data-test="component-app"&amp;gt;{content}&amp;lt;/div&amp;gt;;
}

export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The LanguagePicker component is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import propTypes from "prop-types";

function LanguagePicker({setLanguage}) {
  const languages = [
    { code: "en", symbol: "🇺🇸" },
    { code: "ar", symbol: "🇦🇪" },
  ];
  const languageIcons = languages.map((lang) =&amp;gt; {
    return (
      &amp;lt;span
        key={lang.code}
        data-test="language-icon"
        onClick={() =&amp;gt; setLanguage(lang.code)}
      &amp;gt;
        {lang.symbol}
      &amp;lt;/span&amp;gt;
    );
  });
  return &amp;lt;div data-test="component-language-picker"&amp;gt;{languageIcons}&amp;lt;/div&amp;gt;;
}

LanguagePicker.propTypes = {
  setLanguage: propTypes.func.isRequired,
};

export default LanguagePicker;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The LanguagePicker component allows us to select a language of preference which we store in a local state of our root-level component. We wrap the App.js,our root-level-component as a Context Provider. This is done so that the root-level component acts a data provider to the child components. We pass the data as a "value" prop. So each of the child components now has access to this value prop as each of them act as a consumer.&lt;/p&gt;

&lt;p&gt;The GuessedWords component is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import PropTypes from "prop-types";

//services and helpers
import languageContext from "../context/languageContext";
import {getStringsByLanguage} from './strings';

function GuessedWord({ guessedWords }) {
  const language=React.useContext(languageContext);
  if (!guessedWords.length)
    return (
      &amp;lt;div data-test="guessed-word-component"&amp;gt;
        &amp;lt;span data-test="instructions"&amp;gt;{getStringsByLanguage(language,"guessPrompt")}&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  return (
    &amp;lt;div data-test="guessed-word-component"&amp;gt;
      &amp;lt;table data-test="table"&amp;gt;
        &amp;lt;thead&amp;gt;
          &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;GuessedWord&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Match Count&amp;lt;/th&amp;gt;
          &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
          {guessedWords.map((guess, index) =&amp;gt; (
            &amp;lt;tr key={index} data-test="rows"&amp;gt;
              &amp;lt;th&amp;gt;{guess.guessedWord}&amp;lt;/th&amp;gt;
              &amp;lt;th&amp;gt;{guess.match}&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
          ))}
        &amp;lt;/tbody&amp;gt;
      &amp;lt;/table&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

GuessedWord.propTypes = {
  guessedWords: PropTypes.arrayOf(
    PropTypes.shape({
      guessedWord: PropTypes.string.isRequired,
      match: PropTypes.number.isRequired,
    })
  ).isRequired,
};

export default GuessedWord;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We make use of React.useContext() hook to access the "value" prop of the parent component's provider wrapper. We pass the languageContext as an argument to the hook.&lt;br&gt;
The function getStringsByLanguage returns the localized string based on the language chosen. Now our task is to unit test this component. We test two scenarios here. If the language chosen is "en", we will return "Try to guess the secret word". If the language chosen is "ar" , we return "حاول تخمين الكلمة السرية". The code for the unit test file is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { shallow } from "enzyme";
import checkPropTypes from "check-prop-types";
import GuessedWord from "./GuessedWord";


const defaultProps = {
  guessedWords: [{ guessedWord: "train", match: 3 }],
};

const setup = (props = defaultProps) =&amp;gt; {
  return shallow(&amp;lt;GuessedWord {...props} /&amp;gt;);
};
describe("language picker scenarios", () =&amp;gt; {
  test("should prompt the guess instruction in english", () =&amp;gt; {
    const wrapper = setup({ guessedWords: [] });
    const guessInstruction = wrapper.find(`[data-test="instructions"]`);
    expect(guessInstruction.text()).toBe("Try to guess the secret word");
  });
  test("should prompt the guess instruction in arabic", () =&amp;gt; {
    const originalUseContext = React.useContext;
    const mockReactUseContext = jest.fn().mockReturnValue("ar");
    React.useContext = mockReactUseContext;
    const wrapper = setup({ guessedWords: [] });
    const guessInstruction =  wrapper.find(`[data-test="instructions"]`);
expect(guessInstruction.text()).toBe("حاول تخمين الكلمة السرية");
React.useContext=originalUseContext;
  });
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We shallow render the GuessedWords component. We know that the default language is "en" in the context provider.So the first test case should be obvious to you. In the second test case, we mock the original React.useContext() hook and we set the language as "ar"; Now since the language is set to arabic and the GuessedWords component is shallow rendered, our assertion should be the text displayed in arabic.It is always a good practice to mock your functions or hooks in your component and restore them after each assertion.This is done so that the original definition of your function or hook is restored for all other test cases in your test suite which are using them.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>testing</category>
    </item>
    <item>
      <title>Introduction </title>
      <author>Pooja DebRoy</author>
      <pubDate>Tue, 31 Aug 2021 17:47:50 +0000</pubDate>
      <link>https://dev.to/pvd5206/introduction-dhn</link>
      <guid>https://dev.to/pvd5206/introduction-dhn</guid>
      <description>&lt;p&gt;Hi everyone! My name is Pooja DebRoy and I am a Senior in the IST Integration and Application Option. I am taking this class because I am interested in learning about web development. I don't have any experience using any web development languages, but I am hoping my background in Java and Python will come in handy. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Getting Started with GitHub Codespaces from a Serverless Perspective</title>
      <author>Ken Collins</author>
      <pubDate>Tue, 31 Aug 2021 17:22:44 +0000</pubDate>
      <link>https://dev.to/aws-heroes/getting-started-with-github-codespaces-from-a-serverless-perspective-171k</link>
      <guid>https://dev.to/aws-heroes/getting-started-with-github-codespaces-from-a-serverless-perspective-171k</guid>
      <description>&lt;p&gt;If you are into Serverless and AWS Lambda, you may already know that the &lt;a href="https://aws.amazon.com/serverless/sam/"&gt;AWS Serverless Application Model (SAM)&lt;/a&gt; CLI makes it easy to leverage their Docker &lt;a href="https://github.com/aws/aws-sam-build-images"&gt;build images&lt;/a&gt; as development containers. We do exactly this for our &lt;a href="https://lamby.custominktech.com/"&gt;Rails &amp;amp; Lambda&lt;/a&gt; projects.&lt;/p&gt;

&lt;p&gt;Leveraging Docker with SAM ensures we have a Linux environment and versioned dependencies that closely mimic the Lambda Runtime or Container being shipped. The use and &lt;a href="https://dev.to/quinncuatro/the-promise-of-docker-containers-57fd"&gt;The Promise of Docker&lt;/a&gt; to sovle these problems is nothing new... but something else is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rise-of-ephemeral-dev-environments"&gt;
  &lt;/a&gt;
  ✨ The Rise of Ephemeral Dev Environments
&lt;/h2&gt;

&lt;p&gt;A few weeks ago GitHub's engineering team released an &lt;a href="https://github.blog/2021-08-11-githubs-engineering-team-moved-codespaces/"&gt;in-depth article&lt;/a&gt; announcing their internal usage of the now generally available &lt;a href="https://github.com/features/codespaces"&gt;GitHub Codespaces&lt;/a&gt;. Since Custom Ink shares many of the same problems described in this post, I was curious if our Lambda projects could easily leverage Codespaces. But what is this new tool? Where did it come from? And what is this &lt;code&gt;devcontainer.json&lt;/code&gt; file?&lt;/p&gt;

&lt;p&gt;As best I can tell this all started in May of 2019 when the VS Code team first mentioned their &lt;a href="https://code.visualstudio.com/blogs/2019/05/02/remote-development"&gt;remote development extensions&lt;/a&gt;. About a year later this content was rolled up into the &lt;a href="https://code.visualstudio.com/docs/remote/remote-overview"&gt;VS Code Remote Development&lt;/a&gt; guides we have today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9JToGH-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21j55qowytmm548xtrgz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JToGH-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21j55qowytmm548xtrgz.png" alt="VS Code Remote Development Architecture Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prior to Codespaces, we have had a clear leader in the automated development environment space with &lt;a href="https://www.gitpod.io"&gt;Gitpod&lt;/a&gt;. It was even featured in a January 2021 episode of &lt;a href="https://www.youtube.com/watch?v=rjDDAFHEYEc&amp;amp;list=PLehXSATXjcQFHpz-HAO8YOC6EqFScEz27"&gt;Containers from the Couch&lt;/a&gt;. Gitpod leverages the same technology built into VS Code for remote development.&lt;/p&gt;

&lt;p&gt;However, sometimes slow and steady wins the race. If this were ever true for GitHub-based projects, I think we have a huge winner with GitHub Codespaces. Keep reading below on how your company (or you) could get started. I will even cover how well Codespaces has worked for our Lambda projects that use an existing Docker in Docker development pattern.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-settings"&gt;
  &lt;/a&gt;
  ⚙️ GitHub Settings
&lt;/h2&gt;

&lt;p&gt;GitHub Codespaces is ONLY available now for GitHub Teams &amp;amp; Enterprise Cloud plans. It is not yet available for public repositories. If you are an administrator of such an account, here are a few things I did &lt;a href="https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization"&gt;at the organization level&lt;/a&gt; to get started experimenting.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/enabling-codespaces-for-your-organization#setting-a-spending-limit"&gt;Enable Codespaces&lt;/a&gt;: This can also be disabled completely or enabled for select users.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/managing-repository-access-for-your-organizations-codespaces"&gt;Repository Access&lt;/a&gt;: You can even limit repositories that are able to use Codespaces. If your GitHub account leverages permissions &amp;amp; teams, remember, Codespaces (via the generated &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; will not grant anyone elevated permissions to other repositories.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/billing/managing-billing-for-github-codespaces/managing-spending-limits-for-codespaces"&gt;Manage Spending Limits&lt;/a&gt;: It would have been neat to see a way to limit which VMs (vCPU/Memory) options could have been used here.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/managing-encrypted-secrets-for-your-repository-and-organization-for-codespaces#adding-secrets-for-an-organization"&gt;Organizational Secrets&lt;/a&gt;: Create any secrets your organization needs to enable individuals to work. Remember, Codespaces secrets can be set at the repository or even user level too. Pick the one(s) that work the best for y'all.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#developer-tips"&gt;
  &lt;/a&gt;
  🔰 Developer Tips
&lt;/h2&gt;

&lt;p&gt;It could go without saying but getting good at Codespaces for most may mean getting good at VS Code. Technically you could bring your own editor like Vim or Emacs. But trust me, as a recent Sublime Text convert, switching to VS Code is worth it. Make sure to take the time to Google, learn, and in some cases &lt;a href="https://github.com/Microsoft/vscode-sublime-keybindings"&gt;install packages&lt;/a&gt; that make the transition easier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dotfiles-amp-settings"&gt;
  &lt;/a&gt;
  Dotfiles &amp;amp; Settings
&lt;/h3&gt;

&lt;p&gt;Remote development needs to feel local! Everything that makes your editor &amp;amp; terminal productive needs to be available to you. As described in the &lt;a href="https://docs.github.com/en/codespaces/customizing-your-codespace/personalizing-codespaces-for-your-account"&gt;Personalizing Codespaces&lt;/a&gt; guide setting up your Dotfiles was high on my list.&lt;/p&gt;

&lt;p&gt;For years I have maintained a personal Zshkit which had a ton of personal functions and aliases. When moving to Codespaces, I took the time to clean them up and create a &lt;code&gt;github.com/metaskills/dotfiles&lt;/code&gt; repository, cloned it locally and hooked it up to my ZSH (default shell on Mac) &lt;code&gt;~/.zshrc&lt;/code&gt; file. Codespaces will automatically clone this repo when creating a Codespace and install it by running the &lt;code&gt;install.sh&lt;/code&gt; script. Here is mine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$CODESPACES&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"source /workspaces/.codespaces/.persistedshare/dotfiles/rc"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.zshrc
  &lt;span class="nb"&gt;sudo &lt;/span&gt;chsh &lt;span class="nt"&gt;-s&lt;/span&gt; /usr/bin/zsh
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can leverage the &lt;code&gt;CODESPACES&lt;/code&gt; environment variable to do any customization per environment. Also, do not forget to use &lt;a href="https://code.visualstudio.com/docs/editor/settings-sync"&gt;Settings Sync&lt;/a&gt;. I think this is only needed if you use VS Code's web-based editor. More on that topic later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-codespaces-settings"&gt;
  &lt;/a&gt;
  Your Codespaces Settings
&lt;/h3&gt;

&lt;p&gt;You can &lt;a href="https://docs.github.com/en/codespaces/managing-your-codespaces"&gt;Manage Your Codespaces&lt;/a&gt; settings at somewhat the same level as the organization. Here are a few settings I did.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Access &amp;amp; Security&lt;/strong&gt;: Set this to "All repositories". Your needs may vary.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Editor Preference&lt;/strong&gt;: Set to "Visual Studio Code" vs for web. Ensures the &lt;code&gt;[&amp;lt;&amp;gt; Code]&lt;/code&gt; button on repos opens VS Code on my Mac and avoids the need to click redirect in the browser.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Region&lt;/strong&gt;: I set this manually to &lt;code&gt;EastUs&lt;/code&gt; but I suspect I had no reason to do so.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Added Secrets&lt;/strong&gt;: Read below on using SSH with Ruby Bundler or NPM packages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#codespaces-extension"&gt;
  &lt;/a&gt;
  Codespaces Extension
&lt;/h3&gt;

&lt;p&gt;Install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.codespaces"&gt;GitHub Codespaces&lt;/a&gt; for VS Code. I think this is done for you automatically if you are using the web-based editor. Installing it on your host machine's VS Code will mean you can use Codespaces without ever browsing to GitHub.com and clicking on a &lt;code&gt;[&amp;lt;&amp;gt; Code]&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pCXFXuQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d97miz9543w1h22fdp0v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCXFXuQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d97miz9543w1h22fdp0v.png" alt="The Codespaces Command Pallet in VS Code provided by the Codespaces Extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-integrated-terminal"&gt;
  &lt;/a&gt;
  The Integrated Terminal
&lt;/h3&gt;

&lt;p&gt;Assuming you have setup your Dotfiles, VS Code's &lt;a href="https://code.visualstudio.com/docs/editor/integrated-terminal"&gt;integrated terminal&lt;/a&gt; should feel familiar by mirroring your host machine's prompt, aliases, and more. If your default shell is ZSH, you may need to do a few things to help Codespaces to use ZSH by default vs Bash. Here are my settings for the integrated terminal now. Mind you, there was (maybe still is) &lt;a href="https://github.community/t/integrated-terminal-setting-not-respected/145625"&gt;a bug&lt;/a&gt; in VS Code where ZSH would not be respected. I have noticed in some cases Bash is used but it is easy to launch a new profile with ZSH if that happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"terminal.integrated.fontSize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"terminal.integrated.defaultProfile.osx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"zsh"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"terminal.integrated.defaultProfile.linux"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"zsh"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;Command+K&lt;/code&gt; to clear the terminal's buffer is second nature to most. By default this key binding will not reach the integrated terminal. You can edit your Keyboard Shortcuts JSON file to solve for that. Below is a screen capture of the magic little button you have to press to edit that raw JSON file. Use the following snippet to fix this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t4jEsdyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4a77pqc3bk7zpymyzka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t4jEsdyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4a77pqc3bk7zpymyzka.png" alt="Super Hidden Keyboard Shortcuts JSON Edit Button"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cmd+k"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"workbench.action.terminal.clear"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"when"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"terminalFocus"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terminal visibility and placement. When working on my laptop's smaller screen, I learned that you can use &lt;code&gt;Control+~&lt;/code&gt; to toggle the visibility of the integrated terminal. However, when working at my desk and larger screen, I really want the integrated terminal to be to the right of my editor. Thanks to this &lt;a href="https://stackoverflow.com/questions/41874426/how-do-i-move-the-panel-in-visual-studio-code-to-the-right-side"&gt;this Stack Overflow&lt;/a&gt; here are convoluted steps to make this happen. Hopefully one day they will make this easier. 😅&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;At the right top of the integrated terminal, click the &lt;code&gt;+&lt;/code&gt; sign to open a 2nd terminal.&lt;/li&gt;
&lt;li&gt;Within the panel to the right, right click any of the two profiles, select &lt;code&gt;Move into Editor Area&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Close the bottom integrated terminal with the &lt;code&gt;x&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;Focus the editor tab at the top moved from step 2, click the &lt;code&gt;[|]&lt;/code&gt; split editor button.&lt;/li&gt;
&lt;li&gt;Close the shell tab on the left side of the screen.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#fun-highlights"&gt;
  &lt;/a&gt;
  🎉 Fun Highlights
&lt;/h2&gt;

&lt;p&gt;Here are a few things I was pleasantly surprised with Codespaces' DX and how it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When learning Codespaces or working on uncommitted code, you may have to rebuild your development container. Codespaces automatically maintains your present working directory, open files, etc when doing this. Amazing!&lt;/li&gt;
&lt;li&gt;You can see all your Codespaces on GitHub by navigating to &lt;a href="https://github.com/codespaces"&gt;https://github.com/codespaces&lt;/a&gt;. However, I typically use VS Code's &lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.codespaces"&gt;extension&lt;/a&gt; to navigate, open, and disconnect.&lt;/li&gt;
&lt;li&gt;Leveraging the &lt;code&gt;CODESPACES&lt;/code&gt; environment variable set to &lt;code&gt;true&lt;/code&gt; is an easy way to integrate your existing tooling into Codespaces allowing your teams to support multiple ways to bootstrap your applications.&lt;/li&gt;
&lt;li&gt;Forwarded ports are automatically detected via the integrated terminal's STDOUT. For example, a &lt;code&gt;.bin/rails server&lt;/code&gt; will ouput whatever host/port you are using and Codespaces will see it. If needed you can use the &lt;code&gt;forwardPorts&lt;/code&gt; config for &lt;code&gt;devcontainer.json&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#difficult-lessons"&gt;
  &lt;/a&gt;
  ⚠️ Difficult Lessons
&lt;/h2&gt;

&lt;p&gt;Some hard lessons learned when dipping into the deep end of using GitHub Codespaces. If you have any to share, please drop some comments below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-packages-amp-ssh"&gt;
  &lt;/a&gt;
  Private Packages &amp;amp; SSH
&lt;/h3&gt;

&lt;p&gt;GitHub does a great job at providing your Codespace with a short lived &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;. Most package managers including NPM and Bundler can leverage this. However, if your organization has standardized on SSH setting up your projects could be a problem.&lt;/p&gt;

&lt;p&gt;Thankfully when I reached out on Twitter, Jonathan Carter on the Codespaces team, &lt;a href="https://twitter.com/LostInTangent/status/1427053387007225861"&gt;seemed to suggest&lt;/a&gt; they may be working on a native SSH integration one day. Till then, here is the solution I came up with. This process address some sequencing issues around &lt;code&gt;devcontainer.json&lt;/code&gt;'s &lt;a href="https://code.visualstudio.com/docs/remote/devcontainerjson-reference#_lifecycle-scripts"&gt;Lifecycle Scripts&lt;/a&gt; and when your Dotfiles are installed. Credit to VS Codes &lt;a href="https://code.visualstudio.com/docs/remote/containers#_using-ssh-keys"&gt;Using SSH Keys&lt;/a&gt; guide. Also, some things here are pulled directly from the &lt;a href="https://github.com/webfactory/ssh-agent"&gt;GitHub Action&lt;/a&gt; to setup SSH. Again, thanks to Johnathan Carter for the ideas.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a personal Codespace secret called &lt;code&gt;PERSONAL_SSH_KEY&lt;/code&gt; by visiting this page &lt;a href="https://github.com/settings/codespaces/secrets/new"&gt;https://github.com/settings/codespaces/secrets/new&lt;/a&gt; and adding your private key, typically found in the &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Add this snippet to your &lt;code&gt;postCreate&lt;/code&gt; script. It ensures GitHub is in the known hosts for SSH.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Adding GitHub.com keys to ~/.ssh/known_hosts"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.ssh/known_hosts
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;github.com ssh-dss AAAAB3NzaC1kc3MAAACBANGFW2P9xlGU3zWrymJgI/lKo//ZW2WfVtmbsUZJ5uyKArtlQOT2+WRhcg4979aFxgKdcsqAYW3/LS1T2km3jYW/vr4Uzn+dXWODVk5VlUiZ1HFOHf6s6ITcZvjvdbp6ZbpM+DuJT7Bw+h5Fx8Qt8I16oCZYmAPJRtu46o9C2zk1AAAAFQC4gdFGcSbp5Gr0Wd5Ay/jtcldMewAAAIATTgn4sY4Nem/FQE+XJlyUQptPWMem5fwOcWtSXiTKaaN0lkk2p2snz+EJvAGXGq9dTSWHyLJSM2W6ZdQDqWJ1k+cL8CARAqL+UMwF84CR0m3hj+wtVGD/J4G5kW2DBAf4/bqzP4469lT+dF2FRQ2L9JKXrCWcnhMtJUvua8dvnwAAAIB6C4nQfAA7x8oLta6tT+oCk2WQcydNsyugE8vLrHlogoWEicla6cWPk7oXSspbzUcfkjN3Qa6e74PhRkc7JdSdAlFzU3m7LMkXo1MHgkqNX8glxWNVqBSc0YRdbFdTkL0C6gtpklilhvuHQCdbgB3LBAikcRkDp+FCVkUgPC/7Rw==&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.ssh/known_hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add this snippet to your Dotfiles. It will ensure the proper SSH agent is started, if not already, and that the key environment variables are set.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$CODESPACES&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$SSH_AUTH_SOCK&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;RUNNING_AGENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;ps &lt;span class="nt"&gt;-ax&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'ssh-agent -s'&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; | &lt;span class="nb"&gt;wc&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'[:space:]'&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$RUNNING_AGENT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="c"&gt;# Launch a new instance of the agent&lt;/span&gt;
      ssh-agent &lt;span class="nt"&gt;-s&lt;/span&gt; &amp;amp;&amp;gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.ssh/ssh-agent
    &lt;span class="k"&gt;fi
    &lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.ssh/ssh-agent&lt;span class="sb"&gt;`&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
  &lt;span class="c"&gt;# Add my SSH key.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PERSONAL_SSH_KEY&lt;/span&gt;&lt;span class="p"&gt;+1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;ssh-add - &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PERSONAL_SSH_KEY&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;fi
fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to see this all come together with our Docker in Docker Lambda patterns, please read the &lt;a href="https://dev.to/aws-heroes/serverless-docker-patterns-4g1p"&gt;Serverless Docker Patterns&lt;/a&gt; article in this series where we describe how to use the &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; in a cross platform way for Mac &amp;amp; Linux.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-cli"&gt;
  &lt;/a&gt;
  AWS CLI
&lt;/h3&gt;

&lt;p&gt;For our Lambda projects we use Docker in Docker patterns where both the AWS &amp;amp; SAM CLIs are pre-installed on the development image. However, you may need the AWS CLI installed on the developer's host machine too. In this case, Codespaces. Here is a short snippet that you can use in your &lt;code&gt;postCreate&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing AWS CLI"&lt;/span&gt;
&lt;span class="nb"&gt;pushd&lt;/span&gt; /tmp
curl &lt;span class="s2"&gt;"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="s2"&gt;"awscliv2.zip"&lt;/span&gt;
unzip &lt;span class="nt"&gt;-qq&lt;/span&gt; awscliv2.zip
&lt;span class="nb"&gt;sudo&lt;/span&gt; ./aws/install
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; awscliv2.zip ./aws
&lt;span class="nb"&gt;popd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#docker-in-docker"&gt;
  &lt;/a&gt;
  Docker in Docker
&lt;/h3&gt;

&lt;p&gt;I've said this before but cross platform Docker in Docker is really hard. This series aims to talk about most of them, but one I learned the hard way is that sometimes the pain comes from the ones you love... in this case AWS SAM. The team is doing some amazing work but I ran into a few issues where Docker in Docker patterns have broken down. Read here for details.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/aws-sam-cli/issues/2837#issuecomment-845487064"&gt;No Response from Invoke Container for Lambda Inside docker-compose #2837&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/aws-sam-cli/issues/2837#issuecomment-845487064"&gt;Watch Option for SAM Build Command #921&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#full-lamby-example"&gt;
  &lt;/a&gt;
  🚂 Full Lamby Example
&lt;/h2&gt;

&lt;p&gt;Assuming the other patterns were in place like various &lt;code&gt;postCreate&lt;/code&gt; hooks for SSH, using GitHub Codespaces with your already Docker'ized project is super easy. Here is a complete &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file for one of our projects. Again, see the &lt;a href="https://dev.to/aws-heroes/serverless-docker-patterns-4g1p"&gt;Serverless Docker Patterns&lt;/a&gt; related post on how we are using &lt;code&gt;COMPOSE_FILE&lt;/code&gt; for Mac filesystem performance and why it would be needed here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my-application"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"forwardPorts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4020&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"remoteEnv"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"COMPOSE_FILE"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"docker-compose.yml"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"postCreateCommand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./.devcontainer/postCreate"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, none of this would be needed for a starter application! Give it a try. Go through our &lt;a href="https://lamby.custominktech.com/docs/quick_start"&gt;Lamby Quick Start&lt;/a&gt; guide, commit your project to GitHub... and give Codespaces a try!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-questions"&gt;
  &lt;/a&gt;
  🔐 Security Questions
&lt;/h2&gt;

&lt;p&gt;The Codespaces team was kind enough to write their own &lt;a href="https://docs.github.com/en/codespaces/codespaces-reference/security-in-codespaces"&gt;Security in Codespaces&lt;/a&gt; documentation. I'll highlight their introduction below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Codespaces is designed to be security hardened by default. Consequently, you will need to ensure that your software development practices do not risk reducing the security posture of your codespace.&lt;/p&gt;

&lt;p&gt;This guide describes the way Codespaces keeps your development environment secure and provides some of the good practices that will help maintain your security as you work. As with any development tool, remember that you should only open and work within repositories you know and trust.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good stuff! Security is a shared responsibility and it appears GitHub is doing their part. Please read over the full documentation for more information, but here are a few things I paid special attention to.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/reviewing-your-organizations-audit-logs-for-codespaces"&gt;Audit Logs&lt;/a&gt;: Are generated and can be queried.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/managing-encrypted-secrets-for-your-repository-and-organization-for-codespaces"&gt;Organization &amp;amp; User Secrets&lt;/a&gt;: Built on the &lt;a href="https://libsodium.gitbook.io/doc/public-key_cryptography/sealed_boxes"&gt;same technology&lt;/a&gt; GitHub draws a line between GitHub standard org/user secrets with the Codespace ones. Again, they can be set at the organization, repository, or user. Providing an immense amount of control and security layers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/customizing-your-codespace/personalizing-codespaces-for-your-account#dotfiles"&gt;Dotfiles&lt;/a&gt;: Remind users that these are public repositories! Tho possible to encrypt secrets, I personally recommend keeping them basic to aliases and functions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/codespaces-reference/security-in-codespaces#isolated-networking"&gt;Secure Networking&lt;/a&gt;: Authenticated via GitHub via temporary tokens. Forwarding ports for web servers is done securely over the network between the host. Nothing is public by default.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-coming"&gt;
  &lt;/a&gt;
  🔮 What is Coming?
&lt;/h2&gt;

&lt;p&gt;As mentioned above, I would love to see a native SSH solution. For now, the workarounds are minimal and feel secure with GitHub Secrets and Codespaces integration.&lt;/p&gt;

&lt;p&gt;In their introductory &lt;a href="https://github.blog/2021-08-11-githubs-engineering-team-moved-codespaces/"&gt;blog article&lt;/a&gt;, the GitHub team put a lot of emphasis on prebuilds ensuring that each Codespaces development environment was super fast to setup. This was critical for their team and as of now Gitpod is making a clear distinction this is a &lt;a href="https://www.gitpod.io/gitpod-vs-github-codespaces"&gt;key differentiator&lt;/a&gt; for them. I suspect prebuilds are coming soon. 🤔&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  📚 Resources
&lt;/h2&gt;

&lt;p&gt;Thanks so much for reading! I would love to hear if you found this article helpful or what your organization may be doing with GitHub Codespaces. 💕&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces"&gt;GitHub Codespaces&lt;/a&gt; - Blazing fast cloud
developer environments with Visual Studio Code backed by high performance VMs that start in seconds.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.blog/2021-08-11-githubs-engineering-team-moved-codespaces/"&gt;GitHub’s Engineering Team has moved to Codespaces&lt;/a&gt; - Great description of the business needs for easy development environments. Common for most orgs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://lamby.custominktech.com/docs/quick_start"&gt;Getting Started with Rails on Lambda&lt;/a&gt; - An quick start guide using Docker for development with GitHub &amp;amp; Codespaces.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/docs/remote/remote-overview"&gt;VS Code Remote Development&lt;/a&gt; - The architecture behind GitHub Codespaces.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.gitpod.io"&gt;Gitpod&lt;/a&gt; - Spin up fresh, automated dev environments
for each task, in the cloud, in seconds.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.gitpod.io/blog/ephemeral-dev-envs"&gt;DevX Digest: The Rise of Ephemeral Developer Environments&lt;/a&gt; - Great post by &lt;a href="https://twitter.com/paulienuh"&gt;Pauline P. Narvas&lt;/a&gt; on where cloud-based dev environments are headed.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
  </channel>
</rss>
