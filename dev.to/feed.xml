<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Injecting Angular Environment Variables at build time</title>
      <author>Valentine Awe</author>
      <pubDate>Sun, 15 Aug 2021 15:38:38 +0000</pubDate>
      <link>https://dev.to/valoni01/injecting-angular-environment-variables-at-build-time-84c</link>
      <guid>https://dev.to/valoni01/injecting-angular-environment-variables-at-build-time-84c</guid>
      <description>&lt;p&gt;In this article, I assume that you are containerizing your Angular application and that you have a CI/CD process in place. While the example in the article is also AWS specific, you can use the same principle across other cloud services.&lt;/p&gt;

&lt;p&gt;By default, Angular injects the environment variable at the  application build time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gzsjPOXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m1knateh9syigwe29o2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gzsjPOXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m1knateh9syigwe29o2.png" alt="deployment image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above diagram depicts a regular flow for our application deployment. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Our frontend app. inclusive of the environment variable 
is pushed to the repo&lt;/li&gt;
&lt;li&gt;Our build process picks it up, build and deploy to our 
server. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While that works very well, there are very unique cases where you would be required not to push your environment files to your application repository. If this happens, knowing that angular injects the environment variables at build time, we would need to find a way to inject the environment files during the build process. &lt;/p&gt;

&lt;p&gt;Below are unique reasons why you might be required not to deploy your environment files to your repository&lt;/p&gt;

&lt;p&gt;1.Extra level of security: &lt;br&gt;
    Some companies have policies which prevents them from pushing applications environment variables to their repository whether private repos or not. Although it is worthy to note that the safest way to keep your secret is not to put them in your frontend applications. So, on no account should you place any secret on you Frontend application whether as an environment variable or inside the application.&lt;/p&gt;

&lt;p&gt;2.DevOps flow: &lt;br&gt;
    There are situations where the parameters of your applications can vary based on different environments, while you may know the specifics for an env. eg the dev environment, the production credentials may be required to be added to your application by your devOps team or your client. In order to avoid them making changes to your application or going through a PR flow (which could be necessary depending on your policies). You would want to isolate the environment variable from your application.   &lt;/p&gt;

&lt;p&gt;3.Multiple instances with dynamic Variables: &lt;br&gt;
    There are scenarios where you would have a single repository for your application but multiple deployment instances that requires different configuration files (environment variable). These types of variables could be styles, images, currency type, app settings, base url and many other variable that differs based on each instance. Below is a depiction.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOu_jyDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8igd6q85gtukrugi2hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOu_jyDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8igd6q85gtukrugi2hw.png" alt="deployment image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Image above, we have a single application repository that is deployed to multiple instances.&lt;/p&gt;

&lt;p&gt;If we follow the flow of having our environment variables in the repository, there would be no way to set different configurations for each of the various instances except we implement the logic of setting variables in the application level based on users, which wouldn't be a 100% perfect solution if we need some configuration on application startup.&lt;/p&gt;

&lt;p&gt;In my experience, I was faced with the three (3) situations above. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My Solution
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add the environment path to your &lt;code&gt;.gitignore&lt;/code&gt;. this ensures that you do not push your environment files to the repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a private repo on AWS S3. &lt;br&gt;
a. you can call it (Frontend Env. Variables)&lt;br&gt;
b. Create sub folders for each of your application&lt;br&gt;
c. upload the different environment files. eg (dev, staging and prod)&lt;br&gt;
(In the case of multiple instances with dynamic variables, this should be replicated in each of the environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure that our build process has the permission to read from the s3 repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modify the buildSpec file to copy the  file from the s3 repository to the application root folder during the build process.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#s3-folder-structure"&gt;
  &lt;/a&gt;
  s3 folder structure
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yjWB4gJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgzu0j3fjp5i37xl7eh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yjWB4gJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgzu0j3fjp5i37xl7eh7.png" alt="deployment image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#buildspec-file"&gt;
  &lt;/a&gt;
  Buildspec file
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; build:
    commands:
      - echo Build started on `date`
      - printenv
      - aws s3 cp s3://frontend-env-variable/payment- application/ src/ --recursive
      - docker build -t payment-app --build-arg IMAGE_TAG=$IMAGE_TAG .
      - docker images -a
      - echo Building the Docker image...
      - docker tag $APP_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.eu-west-1.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - docker images -a
      # - command
  post_build:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Before the docker file is invoked, We already have the environment file copied from the s3 folder to the app folder as seen above in our buildspec file. &lt;/p&gt;

&lt;p&gt;For the multi instance scenario with different environment variables in different cloud instances,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create  separate buildspec files for each environment in your application root. eg. (instance1.buildspec.yml, instance2.buildspec.yml) and each of them will have the reference to the corresponding s3 path.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In your AWS CDK or codebuild (or whichever build process you have in place, specify the name of the buildspec file for the specific environment&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ozW3wX18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2h7td0ykmdnwu9bgmam.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ozW3wX18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2h7td0ykmdnwu9bgmam.png" alt="deployment image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the above process in process, you can successfully &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Deploy your application to the repo without your env. files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DevOps, client of your IT support for each of your business instance that needs to to update the environment variable would be able to do so and run the build process.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just an extra info on what the docker file look file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#building angular App
FROM node:14.0.0 as node

WORKDIR /app
COPY package.json /app/
RUN npm install
COPY ./ /app/
ARG IMAGE_TAG=dev
RUN npm run build -- --prod --configuration $IMAGE_TAG

# building nginx
FROM public.ecr.aws/nginx/nginx:1.20-alpine

# FROM nginx:1.12.2-alpine
COPY --from=node /app/dist/payment-app /usr/share/nginx/html
COPY ./nginx-custom.conf /etc/nginx/conf.d/default.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;I believe that there are other fun ways to inject your environment variables at build time. While the above works perfectly for me, I am open to know if you have a differ approach in solving this. &lt;/p&gt;

&lt;p&gt;Remember that this solution is not cloud environment dependent. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-not-add-any-secret-to-your-frontend-application"&gt;
  &lt;/a&gt;
  Do not add any secret to your frontend application
&lt;/h3&gt;

</description>
      <category>aws</category>
      <category>angular</category>
      <category>devops</category>
      <category>docker</category>
    </item>
    <item>
      <title>How to overcome FOMO in Coding?</title>
      <author>Sahil Pabale</author>
      <pubDate>Sun, 15 Aug 2021 15:09:08 +0000</pubDate>
      <link>https://dev.to/byteslash/how-to-overcome-fomo-in-coding-174n</link>
      <guid>https://dev.to/byteslash/how-to-overcome-fomo-in-coding-174n</guid>
      <description>&lt;p&gt;Most people who don't know much on coding and want to start a &lt;strong&gt;career&lt;/strong&gt; in it, always end up in a common mistake — the mistake of searching "the best language to start with coding". &lt;/p&gt;

&lt;p&gt;Usually they come to a conclusion that &lt;strong&gt;Python is the best, at least when it comes to having an easy path to earning millions.&lt;/strong&gt; And thus starts their journey to watching countless Python tutorials.&lt;/p&gt;

&lt;p&gt;Not being hard, but to be honest, this is the worst way to start with coding!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-am-i-saying-so"&gt;
  &lt;/a&gt;
  Why am I saying so?
&lt;/h2&gt;

&lt;p&gt;There are tons of reasons you are learning to program the &lt;strong&gt;wrong way.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/AENoo3Hqtlkf53LWP9/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/AENoo3Hqtlkf53LWP9/giphy.gif" alt="Dont get into the wrong route"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And in this post, I'm going to solve all your myths regarding this issue.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#first-of-all-dont-go-with-the-hype"&gt;
  &lt;/a&gt;
  First of all, don't go with the HYPE!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/b1o4elYH8Tqjm/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/b1o4elYH8Tqjm/giphy.gif" alt="don't get into hype"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you search for the &lt;strong&gt;best language&lt;/strong&gt; or the &lt;strong&gt;best-paying job&lt;/strong&gt; on youtube, everyone there recommends only &lt;strong&gt;AI, ML, or python jobs!&lt;/strong&gt; Which is good but not everyone can become a machine learning engineer or data scientist. right? There are tons of fields where you can expertise aside from python!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zixFqVTm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629009807442/XrCw0qxLP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zixFqVTm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629009807442/XrCw0qxLP.png" alt="youtube image showing some results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't start coding watching these videos. Some people watch and get demotivated because they were looking for something quick! But there's nothing quick here :P &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-exactly-is-fomo-here"&gt;
  &lt;/a&gt;
  What exactly is FOMO here?
&lt;/h2&gt;

&lt;p&gt;Okay getting straight to the point, FOMO means &lt;strong&gt;fear of missing out&lt;/strong&gt;. In this context, FOMO refers to the fear of not achieving something or fear of not knowing many languages, or fear of not having a public profile :P&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UQUFM6wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/3orieP6dwoOp9LVMcg/giphy.gif%3Fcid%3Decf05e47z3ag808pmup0qc02uongef015ra3rczjx85h4v9c%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UQUFM6wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/3orieP6dwoOp9LVMcg/giphy.gif%3Fcid%3Decf05e47z3ag808pmup0qc02uongef015ra3rczjx85h4v9c%26rid%3Dgiphy.gif%26ct%3Dg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This FOMO never leads you to your goal. You will literally get stuck in Tutorial Hell. Tutorial hell is the worst phase of getting stuck in just watching youtube videos and not getting ahead. You won't make projects, rather watch youtube tutorials and complain that you are not worth it for coding.&lt;/p&gt;

&lt;p&gt;I too went through FOMO, but later I realized I'm doing nothing :/&lt;/p&gt;

&lt;p&gt;Was just scrolling YouTube, and didn't made any worthy project to display on the portfolio.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution-to-this-problem-d"&gt;
  &lt;/a&gt;
  Solution to this Problem :D
&lt;/h2&gt;

&lt;p&gt;Instead of watching YouTube tutorials, use Google and search for documentations of that programming language!&lt;/p&gt;

&lt;p&gt;For example, you're learning TypeScript. Just head over to their official documentation where they have given step-wise tutorials for all types of developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRvyWrHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629012963533/5b2xsvP0Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRvyWrHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629012963533/5b2xsvP0Z.png" alt="typescript handbook page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This doc is very perfect for you to directly start making cool projects and thereby learning &lt;strong&gt;CODING.&lt;/strong&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gR0B3Ak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1407601239727112198/V4bunpAi_normal.jpg" alt="Tanay Pratap profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tanay Pratap
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/tanaypratap"&gt;@tanaypratap&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ❌ Learn and Build. &lt;br&gt;✅ Build in order to learn. &lt;br&gt;&lt;br&gt;Don’t wait to know everything before you build something out. &lt;br&gt;&lt;br&gt;Build with whatever you know and you’ll end up learning as a side effect. 🪄
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:32 AM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1423924948611977217" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1423924948611977217" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1423924948611977217" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;This single tweet says it all!&lt;/p&gt;

&lt;p&gt;Build projects in order to learn 🚀🚀🚀&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I hope you have got some value from this article and if so, don't forget to share it with all your friends and colleagues. Because sharing is caring :P&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>coding</category>
      <category>python</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Understanding WebAssembly better by learning WebAssembly-Text</title>
      <author>Fabricio Pashaj</author>
      <pubDate>Sun, 15 Aug 2021 14:52:27 +0000</pubDate>
      <link>https://dev.to/fabriciopashaj/understanding-webassembly-better-by-learning-webassembly-text-50bj</link>
      <guid>https://dev.to/fabriciopashaj/understanding-webassembly-better-by-learning-webassembly-text-50bj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#understanding-webassembly-better-by-learning-webassembly-text"&gt;
  &lt;/a&gt;
  Understanding WebAssembly better by learning WebAssembly Text
&lt;/h1&gt;

&lt;p&gt;WebAssembly is a true revolution in tech, not just in the web, but thanks to WASI and friends, it is becoming available everywhere.&lt;br&gt;
One of the best things WebAssembly offers is being a compilation target &lt;br&gt;
instead of just another programming language. This has the potential to help a lot of non-JS developers &lt;br&gt;
get involved with web development. WebAssembly also has its text version &lt;br&gt;
called... You got it, WebAssembly Text, or WAT for short! (MDN docs &lt;a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format"&gt;here&lt;/a&gt;).&lt;br&gt;
It can be compiled to the binary format using &lt;a href="https://github.com/WebAssembly/wabt"&gt;WABT&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites-to-follow-along"&gt;
  &lt;/a&gt;
  Prerequisites (to follow along)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You know how to use WABT to assemble WAT.&lt;/li&gt;
&lt;li&gt;You know how to run WebAssembly binaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#understanding-the-syntax"&gt;
  &lt;/a&gt;
  Understanding the Syntax
&lt;/h2&gt;

&lt;p&gt;WAT offers two ways of writing code:&lt;br&gt;
The traditional assembly style&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    local.get 0
    local.get 1
    i32.add
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and a more LISPy way (called S-Expression format)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    (i32.add
        (local.get 0)
        (local.get 1))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The assembler will spit out the same result from both of them, but the former &lt;br&gt;
shows in a more clear way how the instructions are placed in the&lt;br&gt;
binary. We will be using that style in this article.&lt;br&gt;
The most basic, valid, (albeit useless) WAT file has the contents below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(module)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-webassemblys-stack-works"&gt;
  &lt;/a&gt;
  How WebAssembly's stack works
&lt;/h2&gt;

&lt;p&gt;A stack is nothing more than just a LIFO (last in, first out) linear data&lt;br&gt;
structure. Imagine it as an array where you can only&lt;br&gt;
&lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; and can't access the items in any other way.&lt;br&gt;
WebAsembly's stack is no difference, but it has a few features which make it&lt;br&gt;
cooler and safer.&lt;br&gt;
One of which is stack splitting/framing. The name may look scary, but it is&lt;br&gt;
simpler than it looks. It just puts a mark at the place where the item at the &lt;br&gt;
top of the stack is on the moment it is split. The mark is the bottom of the new frame &lt;br&gt;
and it simply says "Hey, this is a stack of its own that this &lt;strong&gt;block&lt;/strong&gt; of&lt;br&gt;
code here operates on. Only this block of code has access to it and nothing&lt;br&gt;
else. The new stack's lifetime is limited to the time that this block of code requires&lt;br&gt;
to be fully executed".&lt;br&gt;
We are going to call the stack that is split the parent frame and the new&lt;br&gt;
stack that results from the split the child frame.&lt;br&gt;
A &lt;strong&gt;block&lt;/strong&gt; is the part between a &lt;code&gt;block&lt;/code&gt;/&lt;code&gt;if&lt;/code&gt;/&lt;code&gt;loop&lt;/code&gt; instruction&lt;br&gt;
and an &lt;code&gt;end&lt;/code&gt; instruction. Every &lt;strong&gt;block&lt;/strong&gt; can have a result, which means&lt;br&gt;
that when the block's stack frame reaches the end of&lt;br&gt;
its lifetime, the last item is popped. Then that frame is destroyed (i.e. the&lt;br&gt;
mark is removed) and the popped item is pushed to the parent frame.&lt;br&gt;
That's how functions work too, but they can have parameters and can&lt;br&gt;
be executed at any time.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#hello-world-well-sort-of"&gt;
  &lt;/a&gt;
  Hello, world! Well, sort of.
&lt;/h2&gt;

&lt;p&gt;WebAssembly Text files always start with the module definition and everything else is put between the &lt;code&gt;module&lt;/code&gt; word and the last parenthesis. Let's see how we can write a simple "Hello, world!" program in WAT.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(module
    (func $hello_world (param $lhs i32) (param $rhs i32) (result i32)
        local.get $lhs
        local.get $rhs
        i32.add)
    (export "helloWorld" (func $hello_world)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, you might be saying "What the hell is this? I thought this is a 'Hello, world!' example!".&lt;br&gt;
Well, the point is that WASM wasn't created to print strings and interact with&lt;br&gt;
APIs, its purpose is to help JavaScript handle heavy computations by providing&lt;br&gt;
an interface to fast, low level instructions.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#but-what-does-the-code-do"&gt;
  &lt;/a&gt;
  But what does the code do?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;i32&lt;/code&gt; is one of the four primary types of WebAssembly, it's a 32-bit integer type.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;func&lt;/code&gt; declares a function&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$hello_world&lt;/code&gt; is a compile time name/label we give the function (we'll see more about that later)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(param $lhs i32)&lt;/code&gt; and &lt;code&gt;(param $rhs i32)&lt;/code&gt; tell that this function accepts two parameters, the first one labeled $lhs for left-hand side (notice the &lt;code&gt;$&lt;/code&gt;) with a type of &lt;code&gt;i32&lt;/code&gt;,
the second one labeled $rhs for right-hand side with a type of &lt;code&gt;i32&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(result i32)&lt;/code&gt; says that the function return type is an &lt;code&gt;i32&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;local.get $lhs&lt;/code&gt; pushes the value of the parameter labeled as $lhs into the stack.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;local.get $rhs&lt;/code&gt; does the same as above, but instead it pushes the value of $rhs.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;i32.add&lt;/code&gt; pops two values of type &lt;code&gt;i32&lt;/code&gt; from the stack and pushes the result of their addition back into the stack.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(export "helloWorld" (func $hello_world))&lt;/code&gt; exports the function labeled as &lt;code&gt;$hello_world&lt;/code&gt; to the host with the name "helloWorld".&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#where-is-the-raw-return-endraw-statement"&gt;
  &lt;/a&gt;
  Where is the &lt;code&gt;return&lt;/code&gt; statement?
&lt;/h3&gt;

&lt;p&gt;WebAssembly has a &lt;code&gt;return&lt;/code&gt; instruction, but it is only used when you need&lt;br&gt;
to immediately return and stop executing the function any further. Otherwise,&lt;br&gt;
there will be an implicit return at the end of the function that pops the last&lt;br&gt;
value on the stack and returns it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-does-a-label-actually-mean"&gt;
  &lt;/a&gt;
  What does a "label" actually mean?
&lt;/h3&gt;

&lt;p&gt;All the function calls, parameter and local access are done by index. Labels&lt;br&gt;
are just compile-time annotations to make code easier to read, write and&lt;br&gt;
understand.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#are-raw-localget-endraw-and-raw-i32add-endraw-the-only-instructions"&gt;
  &lt;/a&gt;
  Are &lt;code&gt;local.get&lt;/code&gt; and &lt;code&gt;i32.add&lt;/code&gt; the only instructions?
&lt;/h3&gt;

&lt;p&gt;Of course not. The WebAssembly instruction set is &lt;em&gt;huge&lt;/em&gt;. Just the MVP (minimal viable product)&lt;br&gt;
has around 120 instructions. Most of them start with the type, which can only&lt;br&gt;
be &lt;code&gt;i32&lt;/code&gt;, &lt;code&gt;i64&lt;/code&gt;, &lt;code&gt;f32&lt;/code&gt;, &lt;code&gt;f64&lt;/code&gt;, followed by a dot and the name of the&lt;br&gt;
operation. There are also instructions for other purpouses, like control flow&lt;br&gt;
(decision making, branching/jumping and looping).&lt;br&gt;
A list of all the instructions and their explanation can be found &lt;a href="https://github.com/sunfishcode/wasm-reference-manual/blob/master/WebAssembly.md#instructions"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#writing-something-useful"&gt;
  &lt;/a&gt;
  Writing something useful
&lt;/h2&gt;

&lt;p&gt;The example below shows how you can write a function that calculates the&lt;br&gt;
distance between two points using Pythagorean theorem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(module
    (func $distance (param $x1 i32) (param $y1 i32)
            (param $x2 i32) (param $y2 i32) (result f64)

        local.get $x1
        local.get $x2
        i32.sub ;; calculate the X axis distance (a)
        call $square ;; (a ^ 2)

        local.get $y1
        local.get $y2
        i32.sub ;; calculate the Y axis distance (b)
        call $square ;; (b ^ 2)

        i32.add ;; (c^2 = a^2 + b^2)
        f64.convert_s/i32 ;; convert to f64 so we can square root
        f64.sqrt)
    (export "distance" (func $distance))
    (func $square (param $i32) (result i32)
        local.get 0
        local.get 0
        i32.mul))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#breaking-down-the-code-again"&gt;
  &lt;/a&gt;
  Breaking down the code (again)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;;;&lt;/code&gt; is a the start of a single line comment&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;i32.sub&lt;/code&gt; pops two numbers of type &lt;code&gt;i32&lt;/code&gt; from the stack and pushes back the
result of their subtraction&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;call $square&lt;/code&gt; calls a function&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;f64.convert_s/i32&lt;/code&gt; pops an &lt;code&gt;i32&lt;/code&gt; from the stack and pushes back its value
as a signed number converted to an &lt;code&gt;f64&lt;/code&gt; (if it would have been
&lt;code&gt;f64.convert_u/i32&lt;/code&gt; it would convert it from its unsigned form).
If you don't understand the difference between signed and unsigned numbers, I suggest you read &lt;a href="https://dev.to/aidiri/signed-vs-unsigned-bit-integers-what-does-it-mean-and-what-s-the-difference-41a3"&gt;this&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;f64.sqrt&lt;/code&gt; pops a number of type &lt;code&gt;f64&lt;/code&gt; from the stack and pushes the
number's square root.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;i32.mul&lt;/code&gt; pops two numbers of type &lt;code&gt;i32&lt;/code&gt; from the stack and pushes back the
result of their multiplication.
(we multiply a number with himself to get its power of 2 in the &lt;code&gt;$square&lt;/code&gt; function).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#globals"&gt;
  &lt;/a&gt;
  Globals
&lt;/h2&gt;

&lt;p&gt;Globals are just "variables" that every function can access. &lt;br&gt;
They can be exported but can only be mutated if they are declared as mutable. &lt;br&gt;
The code below shows a way how they can be used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(module
    (;
      declare a mutable global with type `i32` and initial value 0
    ;)
    (global $counter (mut i32) (i32.const 0))
    (export "counter" (global $counter)) ;; export it with the name "counter"
    (func $countUp (result i32)
        global.get $counter ;; push the value of $counter into the stack
        i32.const 1
        i32.add ;; increment the value by 1
        global.set $counter ;; assign $counter to the incremented value
        global.get $counter) ;; return the new incremented value
    (export "countUp" (func $countUp)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#decision-making"&gt;
  &lt;/a&gt;
  Decision making
&lt;/h2&gt;

&lt;p&gt;Although WebAssembly is a low level bytecode format, it supports higher level&lt;br&gt;
concepts like if statements and loops. The code below shows a function&lt;br&gt;
that recives two &lt;code&gt;i32&lt;/code&gt; as parameters and returns the largest of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(module
    (func $largest (param $0 i32) (param $1 i32) (result i32)
        local.get $0 ;; pushing $0's value into the stack
        local.get $1 ;; pushing $1's value into the stack
        i32.gt_s ;; comparing if $0 is greater than $1
        if (result i32)
            local.get $0
        else
            local.get $1
        end)
    (export "largest" (func $largest)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The 3 first instructions are simple enough to be explained with comments, but&lt;br&gt;
if you still don't understand what they do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;local.get $0&lt;/code&gt; and &lt;code&gt;local.get $1&lt;/code&gt; push the values of the parameters labeled
&lt;code&gt;$0&lt;/code&gt; and &lt;code&gt;$1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;i32.gt_s&lt;/code&gt; pops two values of type &lt;code&gt;i32&lt;/code&gt; from the stack and pushes back
the result of their comparison (value of &lt;code&gt;param $0&lt;/code&gt; is greater than the
valule of &lt;code&gt;param $1&lt;/code&gt;). &lt;code&gt;1&lt;/code&gt; if true, &lt;code&gt;0&lt;/code&gt; if false. It has the &lt;code&gt;_s&lt;/code&gt; suffix
because it compares the numbers as signed ones (i.e. they can be negative).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#to-return-raw-0-endraw-or-to-return-raw-1-endraw-"&gt;
  &lt;/a&gt;
  To return &lt;code&gt;$0&lt;/code&gt; or to return &lt;code&gt;$1&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;When an &lt;code&gt;if&lt;/code&gt; instruction occurs, the last item in the stack (the&lt;br&gt;
condition) is popped. It must be an &lt;code&gt;i32&lt;/code&gt;. If the condition is not &lt;code&gt;0&lt;/code&gt;, the&lt;br&gt;
instructions inside the &lt;code&gt;if..else/end&lt;/code&gt; block are executed, otherwise the&lt;br&gt;
&lt;code&gt;else..end&lt;/code&gt; is executed. If there isn't an &lt;code&gt;else&lt;/code&gt;, nothing happens.&lt;br&gt;
You might notice that the if "statement" has a result. &lt;code&gt;if&lt;/code&gt; is a &lt;strong&gt;block&lt;/strong&gt;, &lt;br&gt;
which means it is able to return a result.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#select"&gt;
  &lt;/a&gt;
  Select
&lt;/h3&gt;

&lt;p&gt;For simple decisions like picking a number, &lt;code&gt;if&lt;/code&gt; might be a bit overkill.&lt;br&gt;
There is also a &lt;code&gt;select&lt;/code&gt; instruction which works like a ternary operator.&lt;br&gt;
To use &lt;code&gt;select&lt;/code&gt; instead of &lt;code&gt;if&lt;/code&gt;, we would do it like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;local.get $0
local.get $1 ;; push value of $0 and $1 into stack for selection
local.get $0
local.get $1 ;; push value of $0 and $1 into stack for comparing
i32.gt_s ;; doing the comparison between the two last `i32` items on the stack
select
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;select&lt;/code&gt; instruction pops 3 values from the stack. It decides which of&lt;br&gt;
the two first values to push back according to the third one (the condition). &lt;br&gt;
(if the condition is not &lt;code&gt;0&lt;/code&gt;, push the first value, otherwise the second).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#looping-and-branching"&gt;
  &lt;/a&gt;
  Looping and branching
&lt;/h2&gt;

&lt;p&gt;WebAssembly supports loops, but not the kind of loops you might be thinking&lt;br&gt;
of. Take this code for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(module
    (func $fac (param $0 i32) (result i32) (local $acc i32)
        (local $num i32)

        local.get $0
        local.tee $acc
        local.set $num
        block $outer
            loop $loop
                local.get $num
                i32.const 1
                i32.lt_u ;; we check if $num is lower than 1
                br_if $outer
                local.get $acc
                local.get $num
                i32.const 1
                i32.sub
                local.tee $num
                i32.add
                local.set $acc
                br $loop
            end
        end
        local.get $acc)
    (export "factorial" (func $fac)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code shows how to write a function that finds the factorial of a number&lt;br&gt;
using a loop. It could have been easier to use recursion, but the point here&lt;br&gt;
is to understand loops and branching.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#breaking-down-the-code"&gt;
  &lt;/a&gt;
  Breaking down the code
&lt;/h3&gt;

&lt;p&gt;Most of the things in this code have been explained. The only new things&lt;br&gt;
here are &lt;code&gt;(local $acc i32)&lt;/code&gt;, &lt;code&gt;block&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;br_if $outer&lt;/code&gt; and &lt;code&gt;$br $loop&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;(local $acc i32)&lt;/code&gt; is similar to what they call a local variable in higher level
languages. It is accessed the same way as the parameters. The first
local's index is 1 more than the last parameter's index.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;block $outer&lt;/code&gt; does nothing special, it just encapsulates the code
between it and the corresponding &lt;code&gt;end&lt;/code&gt; instruction. It is used when you
need to branch out at different levels.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;loop $loop&lt;/code&gt; is a special kind of &lt;strong&gt;block&lt;/strong&gt;, if you do a branch on a loop,
you don't go at the &lt;code&gt;end&lt;/code&gt;, you go to the beginning of the loop.
(branches behave like &lt;code&gt;break&lt;/code&gt; on a &lt;code&gt;block&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt; and like &lt;code&gt;continue&lt;/code&gt; on a &lt;code&gt;loop&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;br $loop&lt;/code&gt; is an unconditional branch. The label operand is a &lt;code&gt;loop&lt;/code&gt;, so
it will jump to the top where the &lt;code&gt;loop&lt;/code&gt; instruction occurs. If you know
C/C++ you know about jumping using &lt;code&gt;goto&lt;/code&gt;, but by using &lt;code&gt;goto&lt;/code&gt; you can jump
anywhere, from anywhere in the code. WebAssembly is more restrictive in 
the way that you can branch only outwards and by label / index. The innermost
&lt;strong&gt;block&lt;/strong&gt; has the smallest index (&lt;code&gt;0&lt;/code&gt;) and the outermost has the largest.
We do the branch so we can continue looping instead of dropping out.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;br_if $outer&lt;/code&gt; is a conditional branch/jump instruction. It will pop the
last item from the stack (the condition, has to be an &lt;code&gt;i32&lt;/code&gt;) and if it is
different from &lt;code&gt;0&lt;/code&gt;, it will execute the branch, otherwise it won't.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#linear-memory"&gt;
  &lt;/a&gt;
  Linear memory
&lt;/h2&gt;

&lt;p&gt;WebAssembly offers another way to store data other than the stack, the linear&lt;br&gt;
memory. It can be seen as a resizable JavaScript &lt;code&gt;TypeArray&lt;/code&gt;. Its main&lt;br&gt;
purpose is to store complex and/or continous data. There are 14 load and&lt;br&gt;
9 store instructions, and 2 other instructions for manipulating and getting&lt;br&gt;
its size. With what we have learned until now, let's implement a function&lt;br&gt;
that generates the fibonacci sequence.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(module
    (memory 1)
    (export "memory" (memory 0))
    (func $fib (param $length i32) (local $offset i32)
        i32.const 8
        local.set $offset ;; assign offset to 8 (see below)
        i32.const 0
        i32.const 1
        i32.store offset=4 ;; store 1 at offset 0 eith static offset 4
        block $block
            loop $loop
                local.get $offset
                i32.const 4
                i32.div ;; divide by 4(read below)
                local.get $length
                i32.gt_u ;; compare the requsted length
                br_if $block ;; break out if false (`9`)
                local.get $offset ;; get the offset for storing
                local.get $offset
                ;; ---------
                i32.const 8
                i32.sub
                i32.load
                local.get $offset
                i32.const 4
                i32.sub
                i32.load
                i32.add ;; load the two previous numbers from memory and add them
                ;; ---------
                i32.store ;; store the number at the current offset
                local.get $offset
                i32.const 4
                i32.add
                local.set $offset ;; increment the offset by 4
                br $loop
            end
        end)
    (export "fibonacci" (func $fib)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explaining-a-few-things"&gt;
  &lt;/a&gt;
  Explaining a few things
&lt;/h3&gt;

&lt;p&gt;The code above uses almost all the knowledge that you have gained while&lt;br&gt;
reading this article. A few things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;store offset=4&lt;/code&gt; stores an &lt;code&gt;i32&lt;/code&gt;. It pops two items from the stack. The
first one is the address/offset and the second is the value that will be
stored. &lt;code&gt;offset=4&lt;/code&gt; is a static offset, which means it will add that to the
offset that it gets from the stack, without you needing to do
&lt;code&gt;i32.const 4&lt;/code&gt; and &lt;code&gt;i32.add&lt;/code&gt; on the offset. In this example, &lt;code&gt;offset&lt;/code&gt; was only 
used for demonstrative purposes.&lt;/li&gt;
&lt;li&gt;We use the offset instead of the index, because we don't have fancy things
like arrays. Each &lt;code&gt;i32&lt;/code&gt; takes 4 bytes and we have to increment the
offset by &lt;code&gt;4&lt;/code&gt; instead of &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The offset variable points at the address in memory where the number that will
result from the addition of the two previous numbers will be stored,
thats why it is initially 8. Two &lt;code&gt;i32&lt;/code&gt;s take 8 bytes in memory.&lt;/li&gt;
&lt;li&gt;We divide the offset by 4 when comparing it, to have it like an "index".&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end.
&lt;/h2&gt;

&lt;p&gt;I hope that this article gave you a deeper understanding on how WebAssembly&lt;br&gt;
works. A big thanks to &lt;a href="https://github.com/romdotdog"&gt;rom&lt;/a&gt; who edited and&lt;br&gt;
corrected my article a few times.&lt;/p&gt;

</description>
      <category>webassembly</category>
      <category>wat</category>
      <category>lowlevel</category>
    </item>
    <item>
      <title>* as a service</title>
      <author>Prathamesh Dukare</author>
      <pubDate>Sun, 15 Aug 2021 14:33:02 +0000</pubDate>
      <link>https://dev.to/prathameshkdukare/as-a-service-4coc</link>
      <guid>https://dev.to/prathameshkdukare/as-a-service-4coc</guid>
      <description>&lt;p&gt;Hello Folks, Hope you are doing well! &lt;br&gt;
Today I want to talk about some concepts or rather important web-based services about which you might hear about. Yes, if you are into web development or in open source I am sure that you already heard about these phrases "as a service".&lt;/p&gt;

&lt;p&gt;In this blog, I'm gonna explain these concepts in short of "&lt;a href="https://en.wikipedia.org/wiki/As_a_service"&gt;as a service&lt;/a&gt;" or "*ass".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-as-a-service"&gt;
  &lt;/a&gt;
  What is As a Service?
&lt;/h2&gt;

&lt;p&gt;'As a service' is a very general term which means, Delivery of something over a network primarily internet which solves the problems of peoples. It may charge money to make things win-win for both. The service might be a product, tools, technology.&lt;/p&gt;

&lt;p&gt;There are tons of examples of *ass but we will discuss some common &amp;amp; web dev related Concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#software-as-a-service-saas"&gt;
  &lt;/a&gt;
  Software as a Service (SaaS)
&lt;/h2&gt;

&lt;p&gt;A software distribution model in which a third party provides hosts applications &amp;amp; makes them available to customers over the Internet. It is a cloud-based software delivery model in which the cloud provider develops and maintains cloud application software. &lt;/p&gt;

&lt;p&gt;SaaS provides a wide range of software applications, such as Microsoft office 365, Salesforce, google maps, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#platform-as-a-service-paas"&gt;
  &lt;/a&gt;
  Platform as a Service (PaaS)
&lt;/h2&gt;

&lt;p&gt;A model in which a third-party provider hosts application development platforms and tools on its own infrastructure and makes them available to customers over the internet. Platform as a service provides you with the platform to run your programs on good computing devices owned by the service provider.&lt;/p&gt;

&lt;p&gt;Example: Google App Engine, Netlify, Heroku etc&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure-as-a-service-iaas"&gt;
  &lt;/a&gt;
  Infrastructure as a service (IaaS)
&lt;/h2&gt;

&lt;p&gt;A model in which a thirty party provider hosts servers, storage and other virtualized compute resources and makes them available to customers over the internet. Infrastructure-as-a-service (IaaS), also known as cloud infrastructure services, is a form of cloud computing in which IT infrastructure is provided to end-users through the internet. IaaS is commonly associated with serverless computing.&lt;/p&gt;

&lt;p&gt;Examples: AWS, Microsoft Azure etc&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thought"&gt;
  &lt;/a&gt;
  Final Thought
&lt;/h3&gt;

&lt;p&gt;All internet based services are the future.It has a lot of potential as an Industry.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/prathameshtwits"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Installing Oracle 21c Database on Linux [Single Instance]</title>
      <author>Project-42</author>
      <pubDate>Sun, 15 Aug 2021 14:27:51 +0000</pubDate>
      <link>https://dev.to/project42/installing-oracle-21c-database-on-linux-single-instance-1cn</link>
      <guid>https://dev.to/project42/installing-oracle-21c-database-on-linux-single-instance-1cn</guid>
      <description>&lt;p&gt;After some time of been available on the cloud, 21c Database is now ready to install on premises (Linux version for now)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/GeraldVenzl/status/1426272990073790468?ref_src=twsrc%5Etfw"&gt;@GeraldVenzl - Aug 13&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V4CvtYpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iavd7sqwjzewmoz01ucj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V4CvtYpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iavd7sqwjzewmoz01ucj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can read more about it from the usual suspects like Mike's blog:&lt;br&gt;
&lt;a href="https://mikedietrichde.com/2021/08/13/oracle-database-21c-is-available-for-download-on-linux/"&gt;Oracle Database 21c is available for download on Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
The first thing we need to do is to download the Database Software&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.oracle.com/database/technologies/oracle21c-linux-downloads.html"&gt;Oracle Database 21c Download for Linux x86-64&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SixJwrOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gsee3vw71ysjf8yl5pp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SixJwrOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gsee3vw71ysjf8yl5pp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are assuming here the server is ready for 21c Database installation (I'm using one of the Labs servers were I have 19c installed) but if you are creating the server from the scratch, remember to use the preinstall RPM to make sure the system is ready:&lt;br&gt;
&lt;a href="https://docs.oracle.com/en/database/oracle/oracle-database/21/ladbi/running-rpm-packages-to-install-oracle-database.html#GUID-BB7C11E3-D385-4A2F-9EAF-75F4F0AACF02"&gt;Running RPM Packages to Install Oracle Database&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once is downloaded into your server, create the 21c Oracle Home folder and extract the zip file in it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;oracle@rac1-node1 ~]&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /u01/app/oracle/product/21.0.0/dbhome_1
&lt;span class="o"&gt;[&lt;/span&gt;oracle@rac1-node1 ~]&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /u01/app/oracle/product/21.0.0/dbhome_1
&lt;span class="o"&gt;[&lt;/span&gt;oracle@rac1-node1 db_home1]&lt;span class="nv"&gt;$ &lt;/span&gt;unzip /tmp/LINUX.X64_213000_db_home.zip 
Archive:  /tmp/LINUX.X64_213000_db_home.zip
   creating: addnode/
  inflating: addnode/addnode.sh      
  inflating: addnode/addnode_oraparam.ini.sbs  
  inflating: addnode/addnode_oraparam.ini  
  inflating: addnode/addnode.pl  
&lt;span class="o"&gt;[&lt;/span&gt;....]
&lt;span class="o"&gt;[&lt;/span&gt;oracle@rac1-node1 db_home1]&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the software located on our server, lets install the software using runInstaller with the INSTALL_DB_SWONLY option. &lt;br&gt;
Remember to execute the root.sh script as root after finishing it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;oracle@rac1-node1 dbhome_1]&lt;span class="nv"&gt;$ &lt;/span&gt;./runInstaller &lt;span class="nt"&gt;-silent&lt;/span&gt; &lt;span class="nt"&gt;-responseFile&lt;/span&gt; /u01/app/oracle/product/21.0.0/dbhome_1/install/response/db_install.rsp &lt;span class="se"&gt;\&lt;/span&gt;
oracle.install.option&lt;span class="o"&gt;=&lt;/span&gt;INSTALL_DB_SWONLY &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;UNIX_GROUP_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;oinstall &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ORACLE_BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/u01/app/oracle &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;INVENTORY_LOCATION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/u01/app/oraInventory  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;SELECTED_LANGUAGES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en &lt;span class="se"&gt;\&lt;/span&gt;
oracle.install.db.InstallEdition&lt;span class="o"&gt;=&lt;/span&gt;EE &lt;span class="se"&gt;\&lt;/span&gt;
oracle.install.db.isCustomInstall&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
oracle.install.db.OSDBA_GROUP&lt;span class="o"&gt;=&lt;/span&gt;oinstall &lt;span class="se"&gt;\&lt;/span&gt;
oracle.install.db.OSBACKUPDBA_GROUP&lt;span class="o"&gt;=&lt;/span&gt;oinstall &lt;span class="se"&gt;\&lt;/span&gt;
oracle.install.db.OSDGDBA_GROUP&lt;span class="o"&gt;=&lt;/span&gt;oinstall &lt;span class="se"&gt;\&lt;/span&gt;
oracle.install.db.OSKMDBA_GROUP&lt;span class="o"&gt;=&lt;/span&gt;oinstall &lt;span class="se"&gt;\&lt;/span&gt;
oracle.install.db.OSRACDBA_GROUP&lt;span class="o"&gt;=&lt;/span&gt;oinstall &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;SECURITY_UPDATES_VIA_MYORACLESUPPORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;DECLINE_SECURITY_UPDATES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true

&lt;/span&gt;Launching Oracle Database Setup Wizard...

&lt;span class="o"&gt;[&lt;/span&gt;WARNING] &lt;span class="o"&gt;[&lt;/span&gt;INS-13014] Target environment does not meet some optional requirements.
   CAUSE: Some of the optional prerequisites are not met. See logs &lt;span class="k"&gt;for &lt;/span&gt;details. /u01/app/oraInventory/logs/InstallActions2021-08-15_01-56-35PM/installActions2021-08-15_01-56-35PM.log
   ACTION: Identify the list of failed prerequisite checks from the log: /u01/app/oraInventory/logs/InstallActions2021-08-15_01-56-35PM/installActions2021-08-15_01-56-35PM.log. Then either from the log file or from installation manual find the appropriate configuration to meet the prerequisites and fix it manually.
The response file &lt;span class="k"&gt;for &lt;/span&gt;this session can be found at:
 /u01/app/oracle/product/21.0.0/dbhome_1/install/response/db_2021-08-15_01-56-35PM.rsp

You can find the log of this &lt;span class="nb"&gt;install &lt;/span&gt;session at:
 /u01/app/oraInventory/logs/InstallActions2021-08-15_01-56-35PM/installActions2021-08-15_01-56-35PM.log


As a root user, execute the following script&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;:
    1. /u01/app/oracle/product/21.0.0/dbhome_1/root.sh

Execute /u01/app/oracle/product/21.0.0/dbhome_1/root.sh on the following nodes: 
&lt;span class="o"&gt;[&lt;/span&gt;rac1-node1]


Successfully Setup Software with warning&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;oracle@rac1-node1 dbhome_1]&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;oracle@rac1-node1 dbhome_1]&lt;span class="nv"&gt;$ &lt;/span&gt;su -
Password: 
&lt;span class="o"&gt;[&lt;/span&gt;root@rac1-node1 ~]# /u01/app/oracle/product/21.0.0/dbhome_1/root.sh 
Check /u01/app/oracle/product/21.0.0/dbhome_1/install/root_rac1-node1.raclab.local_2021-08-15_14-03-18-085643579.log &lt;span class="k"&gt;for &lt;/span&gt;the output of root script
&lt;span class="o"&gt;[&lt;/span&gt;root@rac1-node1 ~]# 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now create a single instance Database on Filesystem&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;oracle@rac1-node1 ~]&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; oraenv
ORACLE_SID &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;oracle] ? cdb21
ORACLE_HOME &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;/home/oracle] ? /u01/app/oracle/product/21.0.0/dbhome_1
The Oracle base has been &lt;span class="nb"&gt;set &lt;/span&gt;to /u01/app/oracle
&lt;span class="o"&gt;[&lt;/span&gt;oracle@rac1-node1 ~]&lt;span class="nv"&gt;$ &lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;oracle@rac1-node1 ~]&lt;span class="nv"&gt;$ &lt;/span&gt;dbca &lt;span class="nt"&gt;-silent&lt;/span&gt; &lt;span class="nt"&gt;-createDatabase&lt;/span&gt;                     &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-templateName&lt;/span&gt; General_Purpose.dbc                &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-gdbname&lt;/span&gt; cdb21                                   &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-sid&lt;/span&gt; cdb21                                       &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-responseFile&lt;/span&gt; NO_VALUE                           &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-characterSet&lt;/span&gt; AL32UTF8                           &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-sysPassword&lt;/span&gt; Welcome1                            &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-systemPassword&lt;/span&gt; Welcome1                         &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-createAsContainerDatabase&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;                  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-numberOfPDBs&lt;/span&gt; 1                                  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-pdbName&lt;/span&gt; pdb21                                   &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-pdbAdminPassword&lt;/span&gt; Welcome1                       &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-databaseType&lt;/span&gt; MULTIPURPOSE                       &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-memoryMgmtType&lt;/span&gt; auto_sga                         &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-totalMemory&lt;/span&gt; 4096                                &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-storageType&lt;/span&gt; FS                                  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-datafileDestination&lt;/span&gt; /u01/oradata/               &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-emConfiguration&lt;/span&gt; NONE                            &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-ignorePreReqs&lt;/span&gt; 
Prepare &lt;span class="k"&gt;for &lt;/span&gt;db operation
8% &lt;span class="nb"&gt;complete&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;....]
58% &lt;span class="nb"&gt;complete
&lt;/span&gt;77% &lt;span class="nb"&gt;complete
&lt;/span&gt;Executing Post Configuration Actions
100% &lt;span class="nb"&gt;complete
&lt;/span&gt;Database creation complete. For details check the logfiles at:
 /u01/app/oracle/cfgtoollogs/dbca/cdb21.
Database Information:
Global Database Name:cdb21
System Identifier&lt;span class="o"&gt;(&lt;/span&gt;SID&lt;span class="o"&gt;)&lt;/span&gt;:cdb21
Look at the log file &lt;span class="s2"&gt;"/u01/app/oracle/cfgtoollogs/dbca/cdb21/cdb211.log"&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;further details.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;strong&gt;&lt;em&gt;voilà!&lt;/em&gt;&lt;/strong&gt; our new 21c Database is ready for testing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;oracle@rac1-node1 ~]&lt;span class="nv"&gt;$ &lt;/span&gt;sqlplus / as sysdba

SQL&lt;span class="k"&gt;*&lt;/span&gt;Plus: Release 21.0.0.0.0 - Production on Sun Aug 15 14:39:16 2021
Version 21.3.0.0.0

Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; 1982, 2021, Oracle.  All rights reserved.


Connected to:
Oracle Database 21c Enterprise Edition Release 21.0.0.0.0 - Production
Version 21.3.0.0.0

SQL&amp;gt; SELECT NAME as DB_NAME, HOST_NAME, DATABASE_ROLE, OPEN_MODE, status from GV&lt;span class="nv"&gt;$INSTANCE&lt;/span&gt;, V&lt;span class="nv"&gt;$DATABASE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

DB_NAME   HOST_NAME               DATABASE_ROLE    OPEN_MODE        STATUS
&lt;span class="nt"&gt;---------&lt;/span&gt; &lt;span class="nt"&gt;-----------------------------------&lt;/span&gt; &lt;span class="nt"&gt;----------------&lt;/span&gt; &lt;span class="nt"&gt;--------------------&lt;/span&gt; &lt;span class="nt"&gt;------------&lt;/span&gt;
CDB21     rac1-node1.raclab.local         PRIMARY          READ WRITE       OPEN



SQL&amp;gt; SELECT d.CON_ID, v.name, v.open_mode
FROM gv&lt;span class="nv"&gt;$pdbs&lt;/span&gt; v, dba_pdbs d WHERE v.guid &lt;span class="o"&gt;=&lt;/span&gt; d.guid
ORDER BY 1&lt;span class="p"&gt;;&lt;/span&gt;

    CON_ID NAME         OPEN_MODE
&lt;span class="nt"&gt;----------&lt;/span&gt; &lt;span class="nt"&gt;--------------------&lt;/span&gt; &lt;span class="nt"&gt;----------&lt;/span&gt;
     2 PDB&lt;span class="nv"&gt;$SEED&lt;/span&gt;     READ ONLY
     3 PDB21        READ WRITE

SQL&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like Tim have already mentioned, &lt;a href="https://oracle-base.com/blog/2021/08/14/oracle-21c-is-here-please-dont-use-it/"&gt;please don't use 21c&lt;/a&gt; unless is for your testing and to learn what new features are coming to the long term support releases (current one is 19c and next one should be 23c)&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>database</category>
      <category>21c</category>
      <category>oracle</category>
    </item>
    <item>
      <title>Git Essentials</title>
      <author>Sankalp Swami</author>
      <pubDate>Sun, 15 Aug 2021 14:13:28 +0000</pubDate>
      <link>https://dev.to/swamisankalp/git-essentials-4kff</link>
      <guid>https://dev.to/swamisankalp/git-essentials-4kff</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;INTRODUCTION&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We just cant imagine our life without &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;Github&lt;/code&gt;. Being a developer it is must to understand Git. Git is the most commonly used version control system. Git tracks all the changes you make to your files so that you have record of all the changes that has been done. In this read, you will work on git practically and will gain the basics of Git.&lt;br&gt;
Getting consistent with the work is the only way to achieve the glory and for consistency we need to work, work and work and for that sometimes even we need a therapy and for me, My therapy is listening to her songs&lt;br&gt;
&lt;a href="https://i.giphy.com/media/3ohs7J2aQBUeZmMtfG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3ohs7J2aQBUeZmMtfG/giphy.gif" alt="LANADELREY"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-git"&gt;
  &lt;/a&gt;
  &lt;strong&gt;INSTALLING GIT&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;For MacOS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;brew&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Linux&lt;br&gt;
Debian/Ubuntu&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fedora&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;yum&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For other Linux distributions, you can click &lt;a href="https://git-scm.com/download/linux"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-git-works"&gt;
  &lt;/a&gt;
  &lt;strong&gt;HOW GIT WORKS&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xe-3sHMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crjgbopbvncem1raojy4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xe-3sHMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crjgbopbvncem1raojy4.jpg" alt="Working of Git"&gt;&lt;/a&gt;&lt;br&gt;
It start with the Initialization. We need to initialize our working directory as Git Directory with the command &lt;code&gt;git init&lt;/code&gt;. Once we have initialized the git repository we can add our files to staging area. Staging is nothing but tracking files from the working directory. We can add untracked files to staging are with the command &lt;code&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt; or &lt;code&gt;git add .&lt;/code&gt; to add all the files from that particular directory. We cant commit untracked files from the working directory until and unless we dont stage them. The commit is used to save your changes to local repository. Every time you save that file, all the changes made are tracked. Git commit command takes the snapshot recording the staged changes. We can commit a file by the following command &lt;code&gt;git commit -m "&amp;lt;message&amp;gt;"&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; should be related to the changes made in that particular file at the time of staging. Once all the files are staged and commited, then we can push the local repository to the code hosting platform like Github for collaborations and to avoid losing all our program files due to any kind of failure of our local machine.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#git-setup"&gt;
  &lt;/a&gt;
  &lt;strong&gt;GIT SETUP&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;So that now we have installed git on our machine, lets get started with git with our identity.&lt;br&gt;
Setup git with the &lt;code&gt;git config&lt;/code&gt; command.&lt;br&gt;
First we will add username by the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JohnDoe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will add our email address by the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;johndoe@example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thats it. We have setup our git. Let work on git practically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-do-it-practically"&gt;
  &lt;/a&gt;
  &lt;strong&gt;LETS DO IT PRACTICALLY&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Open terminal and make a new directory with following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;mkdir&lt;/span&gt; &lt;span class="nx"&gt;gitEssentials&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now navigate to the directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;gitEssentials&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add some files to the directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;touch&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now check the created files&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1-h-MDMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfsjdknxry4u0t8orncp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-h-MDMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfsjdknxry4u0t8orncp.png" alt="ls"&gt;&lt;/a&gt;&lt;br&gt;
Initialize the working directory with &lt;code&gt;git init&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add some lines to your index.js file so that we can add them to staging area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;console.log('Git Essentials');&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; command is used to check the current status of our working directory.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0geKTED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx8t8ldootz5wlm76xiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0geKTED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx8t8ldootz5wlm76xiz.png" alt="git status"&gt;&lt;/a&gt;&lt;br&gt;
As we can see there are no commits yet and we have 4 untracked files.&lt;br&gt;
Now with the command &lt;code&gt;git add&lt;/code&gt;, we will track/stage the files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets check what &lt;code&gt;git status&lt;/code&gt; has to show now&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CvUmwfoU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaoetl8c3zgzhv5762bv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CvUmwfoU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaoetl8c3zgzhv5762bv.png" alt="git status"&gt;&lt;/a&gt;&lt;br&gt;
So we have staged all the files. Lets create another file and name it &lt;code&gt;to_Be_Deleted.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;touch&lt;/span&gt; &lt;span class="nx"&gt;to_Be_Deleted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now check the status with &lt;code&gt;git status&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fG1uOD-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jc8f8vngayi3xweo34wi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fG1uOD-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jc8f8vngayi3xweo34wi.png" alt="git status"&gt;&lt;/a&gt;&lt;br&gt;
This is what we get now. It shows that we have 1 untracked file. Let stage the untracked file using &lt;code&gt;git add&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding, check the status using &lt;code&gt;git status&lt;/code&gt; command.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnVIuUle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duaombv1yeh5vw43g03a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnVIuUle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duaombv1yeh5vw43g03a.png" alt="Git status"&gt;&lt;/a&gt;&lt;br&gt;
We have successfully staged our newly created file &lt;code&gt;to_Be_Deleted.js&lt;/code&gt;.&lt;br&gt;
Now we will learn how to unstage an file.&lt;br&gt;
For unstaging an file we will use &lt;code&gt;git rm --cached &amp;lt;file&amp;gt;&lt;/code&gt; command.&lt;br&gt;
Lets unstage the &lt;code&gt;to_Be_Deleted.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;cached&lt;/span&gt; &lt;span class="nx"&gt;to_Be_Deleted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thats it, we have unstaged the file successfully.&lt;br&gt;
Lets check it using &lt;code&gt;git status&lt;/code&gt; command.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mr1yMmyg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ur3hy1djjodb3p9d4jd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mr1yMmyg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ur3hy1djjodb3p9d4jd.png" alt="git status"&gt;&lt;/a&gt;&lt;br&gt;
Yepp! We have unstaged the file.&lt;br&gt;
Delete the file &lt;code&gt;to_Be_Deleted.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;rm&lt;/span&gt; &lt;span class="nx"&gt;to_Be_Deleted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will be working on &lt;code&gt;git commit&lt;/code&gt; command.&lt;br&gt;
Lets commit our staged files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;console.log added to index.js file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m5Qow8sX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zx7of4c03w32ye035xp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m5Qow8sX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zx7of4c03w32ye035xp.png" alt="commit"&gt;&lt;/a&gt;&lt;br&gt;
Lets check the status of our working tree after committing files.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XDOPufsw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0v6iqchpaod0f0ui54rg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDOPufsw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0v6iqchpaod0f0ui54rg.png" alt="git status"&gt;&lt;/a&gt;&lt;br&gt;
So as we have committed all the files we get the message &lt;code&gt;nothing to commit, working tree clean&lt;/code&gt;. That's cool.&lt;br&gt;
Lets check the logs using &lt;code&gt;git log&lt;/code&gt; command. This command is super handy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lNccwiDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lykdpv5huzi5pposcce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNccwiDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lykdpv5huzi5pposcce.png" alt="git log"&gt;&lt;/a&gt;&lt;br&gt;
It shows the complete commit history with commit id, author, time and commit message.&lt;br&gt;
Using &lt;code&gt;git show&lt;/code&gt; command we can track the changes made on that particular commit using the commit id.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="nx"&gt;c737e925fd76918444494f752a65fce5d6a55e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xE5Kx_6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd7cuh7598q75uvdqz1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xE5Kx_6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd7cuh7598q75uvdqz1n.png" alt="git show"&gt;&lt;/a&gt;&lt;br&gt;
With the help of &lt;code&gt;git show &amp;lt;commitId&amp;gt;&lt;/code&gt; command, we can track all the changes commited with that particular commit. &lt;br&gt;
Now if we edit our files, how do we amend the commit. Lets work on it.&lt;br&gt;
First of all we will be editing our &lt;code&gt;index.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;const age = 18;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will check the status of our working tree.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82j4Y6rg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/581qklxpdsxqc5mfsqpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82j4Y6rg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/581qklxpdsxqc5mfsqpc.png" alt="git status"&gt;&lt;/a&gt;&lt;br&gt;
So now we are getting modified message for &lt;code&gt;index.js&lt;/code&gt; file which is unstaged.&lt;br&gt;
Now we will check what changes has been added to the file using &lt;code&gt;git diff&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h5kdvFiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r2f0zmhnk7l3p2qn3hg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h5kdvFiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r2f0zmhnk7l3p2qn3hg.png" alt="git diff"&gt;&lt;/a&gt;&lt;br&gt;
So the changes are shown with &lt;code&gt;+&lt;/code&gt; sign as we can see it over here &lt;code&gt;+const age = 18&lt;/code&gt;.&lt;br&gt;
Let track the file with &lt;code&gt;git add&lt;/code&gt; command and then commit it with different message. For changing the commit message we can use the &lt;code&gt;git commit --amend -m "&amp;lt;message&amp;gt;"&lt;/code&gt; command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;amend&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;added const age&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8P7kmzAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdfqq52v0y7twtg8c40m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8P7kmzAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdfqq52v0y7twtg8c40m.png" alt="git commit"&gt;&lt;/a&gt;&lt;br&gt;
Now if we go for &lt;code&gt;git log&lt;/code&gt; command, we will get the following data.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JG1JbfrQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/if1pj72itstu82y1ad1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JG1JbfrQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/if1pj72itstu82y1ad1h.png" alt="git commit"&gt;&lt;/a&gt;&lt;br&gt;
As you can see the message got changed to &lt;code&gt;added const age&lt;/code&gt;.&lt;br&gt;
Now we will edit some other files.&lt;br&gt;
add the following command to edit your &lt;code&gt;main.css&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body {}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now stage the file using &lt;code&gt;git add&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now commit the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;added body {} to main.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wD-qsYZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcmcda0jwwetbv0q2e65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wD-qsYZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcmcda0jwwetbv0q2e65.png" alt="git commit"&gt;&lt;/a&gt;&lt;br&gt;
We have committed the file successfully.&lt;br&gt;
Now check the logs using &lt;code&gt;git log&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CbUdUXgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nv3fqajmrhzka3z4y3uy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CbUdUXgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nv3fqajmrhzka3z4y3uy.png" alt="git log"&gt;&lt;/a&gt;&lt;br&gt;
Yep now we are having two commits in our git logs.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  &lt;strong&gt;GITHUB&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Github is a code hosting platform. It is web-based platform used for version-control. It becomes super handy when it comes to collaborating on projects and working with other people.&lt;br&gt;
Lets add new repository on github which is really easy.&lt;br&gt;
Once you create new repository you go to this page.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h_0BUdHa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wlifmauxtt84rc41bop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_0BUdHa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wlifmauxtt84rc41bop.png" alt="new repo"&gt;&lt;/a&gt;&lt;br&gt;
And as we already have an existing repository we will copy lines from &lt;code&gt;…or push an existing repository from the command line&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;remote&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;SwamiSankalp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;gitEssentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives the origin the path to store our local repository to the github repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;M&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Branches are really important in &lt;code&gt;Git&lt;/code&gt;, we will talk about it in later part. For now just follow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command pushes our local repository to the github repository.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EsFlw0f6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5kkv0j8gbtsl29woz7e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EsFlw0f6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5kkv0j8gbtsl29woz7e.png" alt="git push"&gt;&lt;/a&gt;&lt;br&gt;
We have successfully added our local repository to github.&lt;br&gt;
Once done, you can refresh your github page, you will find your local repo over ther -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8RS4kxFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2e9c0548yyfqlnk7c1bn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8RS4kxFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2e9c0548yyfqlnk7c1bn.png" alt="github repo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#branches-in-git"&gt;
  &lt;/a&gt;
  &lt;strong&gt;BRANCHES IN GIT&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Branches in git are nothing but an independent line of development, ie; When there are multiple developers working on the same project everyone can have their own branches which will keep the code base safe.Git branches come to the rescue at many different places during the development of a project. There is one default &lt;code&gt;main&lt;/code&gt; branch. You can add your commited files to your own branches and can submit it to your senior dev for review. If it gets approval then your branch is merged with the default &lt;code&gt;main&lt;/code&gt; branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MlV3pVWX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gvqspewe3cg6d0ofw15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MlV3pVWX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gvqspewe3cg6d0ofw15.png" alt="git branch"&gt;&lt;/a&gt;&lt;br&gt;
As we can see we are having only one branch that is by default &lt;code&gt;main&lt;/code&gt; branch.&lt;br&gt;
&lt;code&gt;git branch &amp;lt;branchName&amp;gt;&lt;/code&gt; command is used for adding a new branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;branch&lt;/span&gt; &lt;span class="nx"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xyz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can check branches by the &lt;code&gt;git branch&lt;/code&gt; command&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9nfcZ7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aiit6ugljdfytnpq7ouw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9nfcZ7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aiit6ugljdfytnpq7ouw.png" alt="git branch"&gt;&lt;/a&gt;&lt;br&gt;
We have added a new branch successfully.&lt;br&gt;
You can swithch branches using &lt;code&gt;git checkout &amp;lt;branchName&amp;gt;&lt;/code&gt; command.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xEZhbihE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjvofmqwnmnbszyl6pet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEZhbihE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjvofmqwnmnbszyl6pet.png" alt="switch"&gt;&lt;/a&gt;&lt;br&gt;
For pushing your newly added branch to github you can use &lt;code&gt;git push -u origin &amp;lt;branchName&amp;gt;&lt;/code&gt; command.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IE7PBk8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir4pwl74sonr4e0se5dh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IE7PBk8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir4pwl74sonr4e0se5dh.png" alt="git push"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zFs8v08r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trkshcnsz603v7yqmqtu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zFs8v08r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trkshcnsz603v7yqmqtu.png" alt="branches"&gt;&lt;/a&gt;&lt;br&gt;
As you can see we have successfully pushed the branch to github.&lt;br&gt;
We can merge both the branches using &lt;code&gt;git merge&lt;/code&gt; command.&lt;br&gt;
Now we will be merging our branches.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;merge&lt;/span&gt; &lt;span class="nx"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xyz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hEa2YNbG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcw4ukzstmu7qmdt2m2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hEa2YNbG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcw4ukzstmu7qmdt2m2a.png" alt="git merge"&gt;&lt;/a&gt;&lt;br&gt;
If some changes are made directly on github repository and if we want that code on our local machine, we can use &lt;code&gt;git pull&lt;/code&gt; command.&lt;br&gt;
Lets change some code on github repo and lets pull it to our local machine.&lt;br&gt;
We will add readme file on github repo. Readme file is used for adding some basic instructions for that particular repository.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to Github and click on &lt;code&gt;add a README&lt;/code&gt; button.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WilKkb9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bdjt0cwhwqi3fctzni5.png" alt="readme"&gt;
&lt;/li&gt;
&lt;li&gt;Edit the file the way you want and click on &lt;code&gt;commit new file&lt;/code&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRsZHyCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrhz8mc4wi4pm5ln6xe1.png" alt="commit"&gt;
&lt;/li&gt;
&lt;li&gt;Now go to your terminal and check for git logs. You will find 1 less git commit than your github commits.&lt;/li&gt;
&lt;li&gt;then with the help of &lt;code&gt;git pull&lt;/code&gt; command you can pull the changes to your local machine.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FVluBUWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5g0hkswsc82v2873xxje.png" alt="git pull"&gt;
Yepp we have successfully pulled the changes from github repo to our local git repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CONCLUSION&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I hope now we are having a good knowledge about git and github and have gained good practical knowledge to use it efficiently.&lt;br&gt;
Let me know in the comment section if you have any doubt or feedback.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  🙌&lt;strong&gt;SUPPORT&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/sankalpswami"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CIp6irG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wa7xuvv19rndc0j2gab.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading, keep learning, Peace and Bubbyeye..!&lt;br&gt;
And Yeah! get intoxicated by listening to her&lt;br&gt;
&lt;a href="https://i.giphy.com/media/3osBL5crGuQtCqTN3q/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3osBL5crGuQtCqTN3q/giphy.gif" alt="LANADELREY"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>What is Dart ?</title>
      <author>Suhas Kadu</author>
      <pubDate>Sun, 15 Aug 2021 14:03:31 +0000</pubDate>
      <link>https://dev.to/suhaskadu26/what-is-dart-dmf</link>
      <guid>https://dev.to/suhaskadu26/what-is-dart-dmf</guid>
      <description>&lt;p&gt;Looking at the title you might be wondering what Dart is ?, to answer in a single line, Dart is a programming language created by Google for client Development. Dart is Object-Oriented, garbage-collected language which has a C-style syntax and it is majorly used for Cross-platform development. It first appeared in 2011, but in the last few years it has gained a lot of popularity and it is used for Flutter which is a framework developed by Google for developing Cross-platform applications. Besides that it is also one of most loved languages in  &lt;a href="https://insights.stackoverflow.com/survey/2021#technology-most-loved-dreaded-and-wanted"&gt;Stackoverflow’s 2021 Developer survey&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;But why should you learn Dart? There are 4 main reasons to learn Dart, let’s take a look at each one of them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#multiplatform"&gt;
  &lt;/a&gt;
  Multiplatform:
&lt;/h3&gt;

&lt;p&gt;Dart is a statically typed language which means that the type of variables is known at compile time. But Dart can also exhibit type inference because of which the type of variables is figured out at runtime. If you are from a Java background you will be aware about JVM(Java Virtual Machine) and JIT(just-in-time)  compilation. Similarly Dart also uses Dart VM (Dart Virtual Machine) and JIT for compiling code to Native platforms which includes mobile and desktop apps. Dart offers a development time compiler (dartdevc) as well as a production time compiler (dartprod) for web projects (dart2js). Dart is translated into JavaScript by both compilers. Because of this Dart is multiplatform.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter:
&lt;/h3&gt;

&lt;p&gt;The most important reason to learn Dart is because it is used by Flutter.  &lt;a href="https://flutter.dev/"&gt;Flutter&lt;/a&gt;  is Google’s UI development kit for developing beautiful applications with a single codebase. How is it possible ?I'll explain. To develop Android apps code has to be written in Kotlin/Java and for IOS in Swift. But in Flutter code is written in Dart and it is compiled to native code i.e. Android and IOS. Dart code is also compiled to Javascript. So the same application developed using Flutter can run on Android, IOS and Web with a single codebase. That’s why you should learn Dart to learn to have a strong foundation for Flutter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#null-safety"&gt;
  &lt;/a&gt;
  Null safety:
&lt;/h3&gt;

&lt;p&gt;While developing applications one major problem is Null or Null pointer exceptions because of which the entire app crashes. Well,  Dart has a solution for this;  &lt;a href="https://www.youtube.com/watch?v=iYhOU9AuaFs"&gt;Sound null safety&lt;/a&gt; . Sound null safety means that values can’t be null unless you explicitly mention it can be, because of this null exceptions which might occur at runtime are detected and resolved at compile time, and thus it protects your code from crashing. Moreover this is not only true for variables but also for function parameters, return expressions and generics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#objectoriented"&gt;
  &lt;/a&gt;
  Object-Oriented:
&lt;/h3&gt;

&lt;p&gt;When it comes to modern and developing high level applications,  &lt;a href="https://www.youtube.com/watch?v=pTB0EiLXUC8"&gt;Object Oriented Programming&lt;/a&gt;  is the best approach. Like C++, Java, Kotlin, etc. Dart is also an Object-Oriented Programming Language. It follows the 4 principles of OOPs viz. Abstraction, Encapsulation, Inheritance, Polymorphism. Everything in Dart is an Object including variables, functions, etc. Because of OOPs your code becomes modular, flexible, reusable and easy to debug. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, this was all about What is Dart ? and  Why you should learn Dart. If you are from a  C++ or Java background you can learn Dart easily. But even if you are from another background or non-programmer or a beginner you can still learn Dart. In the upcoming post I’ll be sharing the Best and Free resources to learn Dart. &lt;/p&gt;

&lt;p&gt;Thank you for reading this post till the end. If you like the post please give it a like, drop your suggestions in the comments. And don’t forget to share the post with your friends.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>beginners</category>
      <category>flutter</category>
    </item>
    <item>
      <title>Adding the notification component to an Angular application</title>
      <author>Rodrigo Kamada</author>
      <pubDate>Sun, 15 Aug 2021 13:33:07 +0000</pubDate>
      <link>https://dev.to/rodrigokamada/adding-the-notification-component-to-an-angular-application-28m5</link>
      <guid>https://dev.to/rodrigokamada/adding-the-notification-component-to-an-angular-application-28m5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt; is a development platform for building WEB, mobile and desktop applications using HTML, CSS and TypeScript (JavaScript). Currently, Angular is at version 12 and Google is the main maintainer of the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/ngx-toastr"&gt;ngx-toastr&lt;/a&gt; is a notification component library with many configuration options.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;Before you start, you need to install and configure the tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/"&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/"&gt;Node.js and npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angular.io/cli"&gt;Angular CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IDE (e.g. &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#create-the-angular-application"&gt;
  &lt;/a&gt;
  Create the Angular application
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Let's create the application with the Angular base structure using the &lt;code&gt;@angular/cli&lt;/code&gt; with the route file and the SCSS style format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng new angular-toastr
? Would you like to add Angular routing? Yes
? Which stylesheet format would you like to use? SCSS   &lt;span class="o"&gt;[&lt;/span&gt; https://sass-lang.com/documentation/syntax#scss                &lt;span class="o"&gt;]&lt;/span&gt;
CREATE angular-toastr/README.md &lt;span class="o"&gt;(&lt;/span&gt;1059 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/.editorconfig &lt;span class="o"&gt;(&lt;/span&gt;274 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/.gitignore &lt;span class="o"&gt;(&lt;/span&gt;604 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/angular.json &lt;span class="o"&gt;(&lt;/span&gt;3255 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/package.json &lt;span class="o"&gt;(&lt;/span&gt;1076 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/tsconfig.json &lt;span class="o"&gt;(&lt;/span&gt;783 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/.browserslistrc &lt;span class="o"&gt;(&lt;/span&gt;703 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/karma.conf.js &lt;span class="o"&gt;(&lt;/span&gt;1431 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/tsconfig.app.json &lt;span class="o"&gt;(&lt;/span&gt;287 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/tsconfig.spec.json &lt;span class="o"&gt;(&lt;/span&gt;333 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/favicon.ico &lt;span class="o"&gt;(&lt;/span&gt;948 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/index.html &lt;span class="o"&gt;(&lt;/span&gt;299 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/main.ts &lt;span class="o"&gt;(&lt;/span&gt;372 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/polyfills.ts &lt;span class="o"&gt;(&lt;/span&gt;2820 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/styles.scss &lt;span class="o"&gt;(&lt;/span&gt;80 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/test.ts &lt;span class="o"&gt;(&lt;/span&gt;788 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/assets/.gitkeep &lt;span class="o"&gt;(&lt;/span&gt;0 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/environments/environment.prod.ts &lt;span class="o"&gt;(&lt;/span&gt;51 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/environments/environment.ts &lt;span class="o"&gt;(&lt;/span&gt;658 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/app/app-routing.module.ts &lt;span class="o"&gt;(&lt;/span&gt;245 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/app/app.module.ts &lt;span class="o"&gt;(&lt;/span&gt;393 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/app/app.component.scss &lt;span class="o"&gt;(&lt;/span&gt;0 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/app/app.component.html &lt;span class="o"&gt;(&lt;/span&gt;24617 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/app/app.component.spec.ts &lt;span class="o"&gt;(&lt;/span&gt;1097 bytes&lt;span class="o"&gt;)&lt;/span&gt;
CREATE angular-toastr/src/app/app.component.ts &lt;span class="o"&gt;(&lt;/span&gt;219 bytes&lt;span class="o"&gt;)&lt;/span&gt;
✔ Packages installed successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Install and configure the Bootstrap CSS framework. Do steps 2 and 3 of the post &lt;em&gt;&lt;a href="https://dev.to/rodrigokamada/adding-the-bootstrap-css-framework-to-an-angular-application-2k40"&gt;Adding the Bootstrap CSS framework to an Angular application&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Install the &lt;code&gt;ngx-toastr&lt;/code&gt; library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;ngx-toastr
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Configure the &lt;code&gt;ngx-toastr&lt;/code&gt; library. Change the &lt;code&gt;angular.json&lt;/code&gt; file and add the &lt;code&gt;toastr.css&lt;/code&gt; file as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"styles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"node_modules/bootstrap/scss/bootstrap.scss"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"node_modules/ngx-toastr/toastr.css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"src/styles.scss"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Import the &lt;code&gt;BrowserAnimationsModule&lt;/code&gt; and &lt;code&gt;ToastrModule&lt;/code&gt; modules. Change the &lt;code&gt;app.module.ts&lt;/code&gt; file and add the lines as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserAnimationsModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser/animations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ToastrModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ngx-toastr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nl"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserAnimationsModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ToastrModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;timeOut&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 15 seconds&lt;/span&gt;
    &lt;span class="na"&gt;closeButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;progressBar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="nx"&gt;AppRoutingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; Remove the contents of the &lt;code&gt;AppComponent&lt;/code&gt; class from the &lt;code&gt;src/app/app.component.ts&lt;/code&gt; file. Import the &lt;code&gt;ToastrService&lt;/code&gt; service and create the &lt;code&gt;showSuccess&lt;/code&gt;, &lt;code&gt;showInfo&lt;/code&gt;, &lt;code&gt;showWarning&lt;/code&gt; and &lt;code&gt;showError&lt;/code&gt; methods as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ToastrService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ngx-toastr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;toastrService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ToastrService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;showSuccess&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toastrService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Message Success!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Title Success!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;showInfo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toastrService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Message Info!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Title Info!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;showWarning&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toastrService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Message Warning!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Title Warning!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;showError&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toastrService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Message Error!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Title Error!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt; Remove the contents of the &lt;code&gt;src/app/app.component.html&lt;/code&gt; file. Add the buttons as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-fluid py-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Angular Toastr&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"d-grid gap-2 col-4 mx-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-sm btn-success"&lt;/span&gt; &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"showSuccess()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Success&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-sm btn-info"&lt;/span&gt; &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"showInfo()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Info&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-sm btn-warning"&lt;/span&gt; &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"showWarning()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Warning&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-sm btn-danger"&lt;/span&gt; &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"showError()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Error&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;8.&lt;/strong&gt; Run the application with the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; angular-toastr@1.0.0 start
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ng serve

✔ Browser application bundle generation complete.

Initial Chunk Files | Names         |      Size
vendor.js           | vendor        |   2.70 MB
styles.css          | styles        | 273.40 kB
polyfills.js        | polyfills     | 128.51 kB
scripts.js          | scripts       |  76.67 kB
main.js             | main          |  12.35 kB
runtime.js          | runtime       |   6.63 kB

                    | Initial Total |   3.19 MB

Build at: 2021-08-14T12:47:44.417Z - Hash: f001123d671f4d692c5a - Time: 11454ms

&lt;span class="k"&gt;**&lt;/span&gt; Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ &lt;span class="k"&gt;**&lt;/span&gt;


✔ Compiled successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;9.&lt;/strong&gt; Ready! Access the URL &lt;code&gt;http://localhost:4200/&lt;/code&gt; and check if the application is working. See the application working on &lt;a href="https://rodrigokamada.github.io/angular-toastr/"&gt;GitHub Pages&lt;/a&gt; and &lt;a href="https://stackblitz.com/edit/angular12-toastr"&gt;Stackblitz&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FyA4pzvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rodrigokamada/angular-toastr/master/docs/images/angular-toastr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FyA4pzvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rodrigokamada/angular-toastr/master/docs/images/angular-toastr.png" alt="Angular Toastr"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application repository is available at &lt;a href="https://github.com/rodrigokamada/angular-toastr"&gt;https://github.com/rodrigokamada/angular-toastr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post was made on my &lt;a href="https://rodrigo.kamada.com.br/blog/adicionando-o-componente-de-notificacao-em-uma-aplicacao-angular"&gt;blog&lt;/a&gt; in portuguese.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>notification</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>No More ../../../ Import in React</title>
      <author>Nilanth</author>
      <pubDate>Sun, 15 Aug 2021 12:32:56 +0000</pubDate>
      <link>https://dev.to/nilanth/no-more-import-in-react-2mbo</link>
      <guid>https://dev.to/nilanth/no-more-import-in-react-2mbo</guid>
      <description>&lt;p&gt;Steps to configure absolute Import in Create React App without any third-party packages.&lt;/p&gt;

&lt;p&gt;Are you importing components like &lt;code&gt;../../../../somecomponents&lt;/code&gt;? Then you should update to Absolute imports. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-absolute%C2%A0import"&gt;
  &lt;/a&gt;
  Benefits of Absolute Import
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;You can move your existing code to other components with imports without any changes.&lt;/li&gt;
&lt;li&gt;You can easily identify that where the component is actually placed using the import path.&lt;/li&gt;
&lt;li&gt;Cleaner Code.&lt;/li&gt;
&lt;li&gt;Easier to write.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#configure-absolute%C2%A0import"&gt;
  &lt;/a&gt;
  Configure Absolute Import
&lt;/h2&gt;

&lt;p&gt;To support absolute import create a file named &lt;code&gt;jsconfig.json&lt;/code&gt; in your root directory and add the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "compilerOptions": {
    "baseUrl": "src"
  },
  "include": ["src"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's convert the relative imports in the below component to Absolute Import&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import Button from '../../components/Button';
import { red } from '../../../utils/constants/colors';

function DangerButton(){
  return &amp;lt;Button color={red} /&amp;gt;;
}

export default DangerButton;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Above imports will be changed to as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import Button from 'components/Button';
import { red } from 'utils/constants/colors';

function DangerButton(){
  return &amp;lt;Button color={red} /&amp;gt;;
}

export default DangerButton;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our imports are clean and understandable. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-in-jet-brains%C2%A0ides"&gt;
  &lt;/a&gt;
  Configuring in JET Brains IDEs
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;For JET Brains IDEs like WebStorm, PhpStorm, RubyMine and etc, we need to add some additional configurations as below to support Absolute import&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Right-click&lt;/code&gt; the &lt;code&gt;src&lt;/code&gt; folder and select &lt;code&gt;Mark Directory as&lt;/code&gt; and Click &lt;code&gt;Resource Root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OBhIK3R6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8jz2ny1wh1jyz82zlad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OBhIK3R6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8jz2ny1wh1jyz82zlad.png" alt="Resource Root"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next select &lt;strong&gt;Preferences&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Editor&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Code Style&lt;/strong&gt; -&amp;gt; &lt;strong&gt;JavaScript&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Imports&lt;/strong&gt; and Check &lt;strong&gt;Use paths relative to the project, resource or source roots&lt;/strong&gt; and Click &lt;strong&gt;Apply&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aJo2xUox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7mt34x1vw6yz0q7t1nl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aJo2xUox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7mt34x1vw6yz0q7t1nl.png" alt="ide-resource"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vs-code"&gt;
  &lt;/a&gt;
  VS Code
&lt;/h2&gt;

&lt;p&gt;No Changes need to be done in VS Code. It will automatically import the config from &lt;code&gt;jsconfig.json&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/languages/jsconfig"&gt;VS Code jsconfig.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/help/idea/settings-code-style-javascript.html#ws_js_settings_editor_code_style_imports_tab"&gt;JET Brains CodeStyle&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Absolute imports make the component more readable and clean. I hope you have found this useful. Thank you for reading.&lt;/p&gt;

&lt;p&gt;Get more updates on &lt;a href="https://twitter.com/Nilanth"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-blogs"&gt;
  &lt;/a&gt;
  More Blogs
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-create-public-and-private-routes-using-react-router-72m"&gt;How to Create Public And Private Routes using React Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/redux-toolkit-the-standard-way-to-write-redux-2g32"&gt;Redux Toolkit - The Standard Way to Write Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/5-packages-to-optimize-and-speed-up-your-react-app-during-development-4h5f"&gt;5 Packages to Optimize and Speed Up Your React App During Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-use-axios-in-an-optimized-and-scalable-way-with-react-518n"&gt;How To Use Axios in an Optimized and Scalable Way With React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/15-custom-hooks-to-make-your-react-component-lightweight-17cd"&gt;15 Custom Hooks to Make your React Component Lightweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/10-ways-to-host-your-react-app-for-free-27ga"&gt;10 Ways to Host Your React App For Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko"&gt;How to Secure JWT in a Single-Page Application&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My Expectations at Zuri Internship Program</title>
      <author>ATWINE NICKSON</author>
      <pubDate>Sun, 15 Aug 2021 12:23:44 +0000</pubDate>
      <link>https://dev.to/atwinenickson/my-expectations-at-zuri-internship-program-2763</link>
      <guid>https://dev.to/atwinenickson/my-expectations-at-zuri-internship-program-2763</guid>
      <description>&lt;p&gt;ZURI INTERNSHIP&lt;/p&gt;

&lt;p&gt;Background&lt;br&gt;
I am Atwine Nickson, a software developer with 3 years of playing with code experience. Apart from UI development (Frontend), I am a full-stack developer pro efficiently with Python(Django and Flask).&lt;/p&gt;

&lt;p&gt;I am always looking for new challenges to help me improve my skills and that is when I found the Zuri Internship Program, and I applied, then was selected, and here is my first task of writing this article.&lt;br&gt;
About Zuri Internship&lt;br&gt;
Zuri internship is an engineering-as-a-service business that helps companies build remote teams quickly and cost-effectively. We have 1,000+ software engineers working as full-time, embedded members of development teams at over 200 leading tech companies.&lt;/p&gt;

&lt;p&gt;Zuri got its first set of interns in 2018 and is now a multi-national corporation, with over 35,000 employees in more than 115 countries. Today, Cisco solutions are the networking foundations for service providers, small to medium business and enterprise customers which includes corporations, government agencies, utilities and educational institutions.&lt;/p&gt;

&lt;p&gt;Follow this link to learn more about Zuri Internship &lt;a href="https://internship.zuri.team/"&gt;https://internship.zuri.team/&lt;/a&gt;&lt;br&gt;
Benefits of Zuri Internship&lt;br&gt;
Learning&lt;br&gt;
Connections&lt;br&gt;
Jobs&lt;/p&gt;

&lt;p&gt;Who can Apply&lt;br&gt;
You have prior coding or design skills/knowledge.&lt;br&gt;
You are a professional looking to connect with others.&lt;br&gt;
You are looking for a challenge.&lt;/p&gt;

&lt;p&gt;My Expectations&lt;/p&gt;

&lt;p&gt;The chance to learn valuable work skills and gain useful experience&lt;br&gt;
Sensible working hours&lt;br&gt;
A reference upon completion of the internship.&lt;br&gt;
Meet new software engineers&lt;br&gt;
Work on real world Projects&lt;br&gt;
Access to Zuri network composed of past finalists.&lt;br&gt;
Get recommended to potential employers.&lt;br&gt;
Access to job opportunities.&lt;br&gt;
Occasional stipends depending on performance during the internship.&lt;/p&gt;

&lt;p&gt;GIT TUTORIAL&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=RGOj5yH7evk"&gt;https://www.youtube.com/watch?v=RGOj5yH7evk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTML TUTORIAL&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=qz0aGYrrlhU"&gt;https://www.youtube.com/watch?v=qz0aGYrrlhU&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JAVASCRIPT TUTORIAL&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk"&gt;https://www.youtube.com/watch?v=W6NZfCO5SIk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FIGMA TUTORIAL &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=g6rQFP9zCAM"&gt;https://www.youtube.com/watch?v=g6rQFP9zCAM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations you have reached the end of this article.&lt;/p&gt;

&lt;p&gt;Thank you for your time.&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment below, also advice is also welcome for improvement as this is my first article.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Hybrid Machine Learning</title>
      <author>Heba K. Ahmed</author>
      <pubDate>Sun, 15 Aug 2021 11:58:06 +0000</pubDate>
      <link>https://dev.to/aws-builders/hybrid-machine-learning-24b</link>
      <guid>https://dev.to/aws-builders/hybrid-machine-learning-24b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Companies who adopt a cloud-native approach realize its value when they marry compute capacity.&lt;br&gt;
But for those companies born before the cloud, in many cases even before generalized computers,&lt;br&gt;
to build on-premises, how can they realize the value of newly launched cloud services when the early.&lt;br&gt;
AWS proposes a series of tenets to guide our discussion of a world-class hybrid machine learning experience: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Seamless management experience. &lt;/li&gt;
&lt;li&gt; Tunable latency. &lt;/li&gt;
&lt;li&gt; Fast time-to-value. &lt;/li&gt;
&lt;li&gt; Flexible. &lt;/li&gt;
&lt;li&gt; Low cost. &lt;/li&gt;
&lt;li&gt; End in the cloud&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This document follows the machine learning lifecycle, from development to training and deployment. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-hybrid"&gt;
  &lt;/a&gt;
  What is Hybrid?
&lt;/h3&gt;

&lt;p&gt;We look at hybrid architectures as having a minimum of two compute environments, what we will call “primary” and “secondary” environments. Generally speaking, we see the primary environment as where the workload begins, and the secondary environment is where the workload ends.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-hybrid-is-not"&gt;
  &lt;/a&gt;
  What “Hybrid” is not?
&lt;/h3&gt;

&lt;p&gt;While either your primary or secondary environment may be, in fact, another cloud provider, we prefer not to explicitly discuss those patterns here. That’s because the technical details and capabilities around specific services, features, and global deployment options are not necessarily the same across all cloud providers, and we consider that type of analysis outside the scope for this document. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hybrid-patterns-for-development"&gt;
  &lt;/a&gt;
  Hybrid patterns for development
&lt;/h2&gt;

&lt;p&gt;Development refers to the phase in machine learning when customers are iteratively building models. This may or may not include exploratory data analysis, deep learning model development, &lt;/p&gt;

&lt;p&gt;Generally speaking, there are two major options for hybrid development:&lt;/p&gt;

&lt;p&gt;1-  laptop and desktop personal computers.&lt;br&gt;
2-  Self-managed local servers utilizing specialized GPUs, colocations, self-managed racks, or corporate data centers. Customers can develop in one or both of these compute environments, and below we’ll describe hybrid patterns for model deployment using both of these.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#develop-on-personal-computers-to-train-and-host-in-the-cloud"&gt;
  &lt;/a&gt;
  Develop on personal computers, to train and host in the cloud
&lt;/h3&gt;

&lt;p&gt;Customers can use local development environments, such as PyCharm or Jupyter installations on their laptops or personal computer, and then connect to the cloud via AWS Identity and Access Management (IAM) permissions and interface with AWS service API’s through the AWS CLI or an AWS SDK (ex boto3).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ar0VFnCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w957knb0hp3it64bgame.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ar0VFnCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w957knb0hp3it64bgame.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;
1-  You have full control of your IDE in this scenario. You just have to open up your computer to get started.&lt;br&gt;
2-  You can easily manage what’s sitting in your S3 bucket, vs what’s running on your local laptop.&lt;br&gt;
3-  You iteratively write a few lines of code in your complex models, you check them locally, and you only land in the cloud to scale/track/deploy.&lt;br&gt;
&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br&gt;
1-  Inability to scale beyond the compute resources of your laptop.&lt;br&gt;
2-  Lack of access to GUI-centric features like Autopilot, Data Wrangler, Pipelines.&lt;br&gt;
3-  If your laptop dies and you didn’t back up externally, your work is gone! Difficulty in onboarding non-super user employees can increase over time as software, OS, and hardware versions change.&lt;br&gt;
4-  This onboarding difficulty gets more and more painful as time goes by, in some worst-case scenarios, it leads to highly valued employees not getting access to Python or Pandas for multiple months!&lt;br&gt;
&lt;strong&gt;When to move&lt;/strong&gt;: &lt;br&gt;
If you find yourself spending a significant portion of your time managing local compute environments, it’s time to move to the cloud.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#develop-on-local-servers-to-train-and-host-in-the-cloud"&gt;
  &lt;/a&gt;
  Develop on local servers, to train and host in the cloud
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k0IDstOG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj3pwdqzixp8dzrh0sln.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k0IDstOG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj3pwdqzixp8dzrh0sln.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;
1-  Ability to capitalize on previous investments in local compute.&lt;br&gt;
2-  Simplifies infrastructure setup required to meet some regulatory requirements, such as those for specialized industries (health, gaming, financial). &lt;br&gt;
3-  Lower price point per compute on some compute environments, including some advanced GPU’s &lt;br&gt;
4-  Ideal for non-bursting, stable computes with high precision in the 6+ month forecast.&lt;br&gt;
&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br&gt;
1-   A fundamental challenge to dynamically provision compute resources with the needs of your business, leading teams to frequently be stuck in either overutilization of local compute resources or under-utilization.&lt;br&gt;
2-  Expensive GPUs can take months to ship, which leads to a larger total cost of ownership. New ideas and features can take longer to launch, because of extra effort to develop.&lt;br&gt;
&lt;strong&gt;When to move&lt;/strong&gt;&lt;br&gt;
1-  When you spend more time managing your local development than you do working on new data science projects.&lt;br&gt;
2-  When the multiple months it takes to procure, wait for, and provision additional compute resources leave your development teams sitting idle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hybrid-patterns-for-training"&gt;
  &lt;/a&gt;
  Hybrid patterns for training
&lt;/h2&gt;

&lt;p&gt;Usually, a hybrid pattern for training comes down to one of two paths. &lt;br&gt;
1-  Either you are training locally, and you want to deploy in the cloud.&lt;br&gt;
2-   Or you have all of your data sitting on local resources, and you want to select from that to move into the cloud to train.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#training-locally-to-deploy-in-the-cloud"&gt;
  &lt;/a&gt;
  Training locally, to deploy in the cloud
&lt;/h3&gt;

&lt;p&gt;1-  First, if you are training locally then you will need to acquire the compute capacity to train a model.&lt;br&gt;
2-  After your model is trained, there are two common approaches for packaging and hosting it in the cloud.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Docker – using a Docker file you can build your custom image that hosts your inference script, model artifact, and packages. Register this image in the Elastic Container Registry (ECR), and point to it from your SageMaker estimator.&lt;/li&gt;
&lt;li&gt;  Another option is using the pre-built containers within the SageMaker Python SDK, also known as the deep learning containers (or DL AMI’s). Bring your inference script and custom packages, upload your model artifact to Amazon S3, and import an estimator for your framework of choice. Define the version of the framework you need in the estimator, or install it directly with a requirements.txt file or a custom bash script.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1_AajLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7s7n6u5cz32a6mbuab4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1_AajLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7s7n6u5cz32a6mbuab4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-monitor-your-model-in-the-cloud"&gt;
  &lt;/a&gt;
  How to monitor your model in the cloud
&lt;/h2&gt;

&lt;p&gt;A key feature for hosting is model monitor, or the ability to detect data, bias, feature, and model thresholds, trigger a re-training pipeline.&lt;br&gt;
1-  Upload your training data to an Amazon S3 bucket, and use our pre-built image to learn the upper and lower bounds of your training data.&lt;br&gt;
2-  you will receive a JSON file with the upper and lower statistically recommended bounds for each feature. You can modify these thresholds.&lt;br&gt;
3-  After confirming your thresholds, schedule monitoring jobs in your production environment. These jobs run automatically, comparing your captured inference requests in Amazon S3 with your thresholds.&lt;br&gt;
4-  You will receive CloudWatch alerts when your inference data is outside of your pre-determined thresholds, and you can use those alerts to trigger a re-training pipeline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-handle-retrainingretuning"&gt;
  &lt;/a&gt;
  How to handle retraining/retuning
&lt;/h3&gt;

&lt;p&gt;1-  It is easy to run a retraining and retuning job in the cloud without the overhead of provision, scheduling, and managing your physical resources around this job.&lt;br&gt;
2-  SageMaker makes train and tuning jobs easy to manage because all you need to bring is your training script and dataset.&lt;br&gt;
3-  Follow best practices for training on SageMaker, ensuring your new dataset is loaded into an Amazon S3 bucket or other supported data source.&lt;br&gt;
4-  Another key feature of hosting models in SageMaker is multi-model endpoints.&lt;br&gt;
5-  Define your inference script, ensuring the framework is supported by SageMaker multi-model.&lt;br&gt;
6-  Create the multi-model endpoint, pointing to Amazon S3, and load your model artifacts into the SageMaker endpoint, invoking the endpoint with the name of the model you want to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-serve-thousands-of-models-in-the-cloud-at-a-low-cost"&gt;
  &lt;/a&gt;
  How to serve thousands of models in the cloud at a low cost
&lt;/h3&gt;

&lt;p&gt;Another key feature of hosting models in SageMaker is multi-model endpoints. SageMaker endpoint, invoking the endpoint with the name of the model you want to use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;br&gt;
1-  have more control over your training environment.&lt;br&gt;
2-  the cloud not only provides greater flexibility, but can increase a firm’s security posture, by freeing up resources from physical security, patching, and procurement.&lt;br&gt;
&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;br&gt;
1-  Not taking advantage of cost savings on spot instances.&lt;br&gt;
2-  Not using pre-built Docker images, but potentially wasting engineering effort developing these from scratch.&lt;br&gt;
3-  Not using advanced distributed training toolkits or custom hardware like the upcoming training.&lt;br&gt;
4-  Not using prebuilt tuning packages, but need to build or buy your tuning package.&lt;br&gt;
5-  Not using the debugger, profiler, feature store, and other training benefits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to move:&lt;/strong&gt;&lt;br&gt;
1-  When the cost of developing your local training platform exceeds its use, &lt;br&gt;
2-  Also when the time to provision additional computes resources is far outstripped by the demand for training by your data science resources or business needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storing-data-locally-to-train-and-deploy-in-the-cloud"&gt;
  &lt;/a&gt;
  Storing data locally, to train and deploy in the cloud
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#schedule-data-transfer-jobs-with-aws-datasync"&gt;
  &lt;/a&gt;
  Schedule data transfer jobs with AWS DataSync
&lt;/h3&gt;

&lt;p&gt;1-  AWS DataSync is a data transfer service that simplifies, automates, and accelerates moving data between on-premises storage systems and AWS storage services, as well as between AWS storage services.&lt;br&gt;
2-  Using AWS DataSync you can easily move petabytes of data from your local on-premises servers up to the AWS cloud.&lt;br&gt;
3-  AWS DataSync connects to your local NFS resources, looks for any changes, and handles populating your cloud environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#migrating-from-local-hdfs"&gt;
  &lt;/a&gt;
  Migrating from Local HDFS
&lt;/h2&gt;

&lt;p&gt;you might wholly embrace HDFS as your center and move towards hosting it within a managed service, Amazon Elastic Map Reduce (EMR).&lt;/p&gt;

&lt;p&gt;If you are interested in learning how to migrate from local HDFS clusters to Amazon EMR, please see this migration guide: &lt;a href="https://d1.awsstatic.com/whitepapers/amazon_emr_migration_guide.pdf"&gt;https://d1.awsstatic.com/whitepapers/amazon_emr_migration_guide.pdf&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best practices
&lt;/h3&gt;

&lt;p&gt;1-  Use Amazon S3 intelligent tiering for objects over 128 KB.&lt;br&gt;
2-  Use multiple AWS accounts, and connect them with Organizations.&lt;br&gt;
3-  Set billing alerts.&lt;br&gt;
4-  Enable SSO with your current Active Directory provider.&lt;br&gt;
5-  Turn on Studio!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;br&gt;
1-  This is a fast way to realize the value of your locally stored datasets, particularly during a cloud migration.&lt;br&gt;
2-  Training and developing in the cloud gives you access to fully managed features within Amazon SageMaker and the entire AWS cloud.&lt;br&gt;
3-  You can offload your on-premises resources more easily by leveraging capabilities in the cloud.&lt;br&gt;
4-  This frees up your teams from procuring, provisioning, securing, and patching local compute resources, enabling them to dynamically scale these with the needs of your business.&lt;br&gt;
5-  Generally speaking, you can deploy more models more quickly by training and hosting in the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;br&gt;
1-  Expending more resources storing data locally than potentially necessary.&lt;br&gt;
2-  If you intend to train your ML models locally, you should anticipate a high volume of node drop-outs in your data centers. One large job can easily consume 1TB of RAM while another can require smaller memory, but execute for potentially days.&lt;br&gt;
3-  Cost mitigation can be important here. Customers should be aware of any data duplication across environments and take action to reduce costs aggressively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to move&lt;/strong&gt;&lt;br&gt;
1-  When the cost of managing, securing, and storing your data on-premises exceeds the cost of archiving and storing it in the cloud.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#develop-in-the-cloud-while-connecting-to-data-hosted-onpremises"&gt;
  &lt;/a&gt;
  Develop in the cloud while connecting to data hosted on-premises
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udPQlc5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j26g9kv6o14x3fuy7bok.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udPQlc5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j26g9kv6o14x3fuy7bok.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-wrangler-amp-snowflake"&gt;
  &lt;/a&gt;
  Data Wrangler &amp;amp; Snowflake
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Data Wrangler enables customers to browse and access data stores across Amazon S3, Amazon Athena, Amazon Redshift, and 3rd party data warehouses like Snowflake. &lt;/li&gt;
&lt;li&gt;This hybrid ML pattern provides customers the ability to develop in the cloud while accessing data stored on-premises, as organizations develop their migration plans.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#train-in-the-cloud-to-deploy-ml-models-onpremises"&gt;
  &lt;/a&gt;
  Train in the cloud, to deploy ML models on-premises
&lt;/h3&gt;

&lt;p&gt;If you are deploying on-premises, you need to develop and host your local webserver. We strongly recommend you decouple* hosting your model artifact from your application.&lt;/p&gt;

&lt;p&gt;1-  Amazon SageMaker lets you specify any type of model framework, version, or output artifact you need to.&lt;br&gt;
2-  You’ll find all model artifacts wrapped as tar.gz archives after training jobs, as this compressed file format saves on job time and data costs.&lt;br&gt;
3-  If you are using your own image, you will need to own updating that image as the software version, such as TensorFlow or PyTorch, undergoes potentially major changes over time.&lt;br&gt;
4-  Lastly, keep in mind that it is an unequivocal best practice to decouple hosting your ML model from hosting your application.&lt;br&gt;
A key step in your innovation flywheel is that once you use dedicated resources to host your ML model, specifically ones that are separated from your application, this greatly simplifies your process to push better models. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;
1-  Can use SageMaker Neo to compile your model for a target device • Feels like you have more control up front.&lt;br&gt;
2-  Taking advantage of cloud-based training and tuning features, like spot, debugger, model and data-parallel, Bayesian optimization, etc.&lt;br&gt;
3-  Can enable your organization to progress on their cloud migration plan while the application development moves to the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br&gt;
1-  Need to develop, manage, maintain, and respond to operational issues with locally managed web servers.&lt;br&gt;
2-  Own the burden of building and maintaining up-to-date versions of model software frameworks, such as TensorFlow or PyTorch.&lt;br&gt;
3-  Bigger risk of tightly coupling compute for your model with computing for your application, making it more challenging for you to deploy new models and new features to your application over time.&lt;br&gt;
4-  Need to develop your own data-drift detection and model monitor capabilities.&lt;br&gt;
5-  Not taking advantage of cloud-based features for global deployment, see next section for more details.&lt;br&gt;
6-  Need to develop your own application monitoring pipeline that extracts key metrics, business details, and model responses, to share with business and data science stakeholders.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MbzDKCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55vh3j8hn89gijmruxm5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MbzDKCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55vh3j8hn89gijmruxm5.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to move&lt;/strong&gt;&lt;br&gt;
1-  When your ability to deploy new applications on-premises is hindered by your need to procure, provision, and manage local infrastructure.&lt;br&gt;
2-  When your model is losing accuracy and/or performance over time, due to your inability to quickly retrain and redeploy.&lt;br&gt;
3-  When the cost of monitoring, updating, maintaining, and troubleshooting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monitor-ml-models-deployed-onpremises-with-sagemaker-edge-manager"&gt;
  &lt;/a&gt;
  Monitor ML models deployed on-premises with SageMaker Edge Manager
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;  SageMaker Edge Manage makes it easy for customers to manage ML models deployed on Windows, Linux, or ARM-based compute environments.&lt;/li&gt;
&lt;li&gt; Install the edge manager agent onto the CPU of your intended device, and leverage AWS IOT Core or another transfer method to download the model to the device, and execute local inferencing.&lt;/li&gt;
&lt;li&gt; Edge Manage simplifies the monitoring and updating of these models by bringing the control plane up to the cloud.&lt;/li&gt;
&lt;li&gt; You can bring your own monitoring algorithm to the service and trigger retraining pipelines as necessary, using the service the redeploy that model back down to the local device.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#hybrid-patterns-for-deployment"&gt;
  &lt;/a&gt;
  Hybrid patterns for deployment
&lt;/h2&gt;

&lt;p&gt;In this pattern, we focus mostly on hosting the model in the cloud but interacting with applications that may be hosted on-premises.&lt;br&gt;
Hosting in the cloud to applications on-premises can enable the data scientists, while patterns for hosting ML models via Lambda at the Edge, Outposts, Local Zones, and Wavelength.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serve-models-in-the-cloud-to-applications-hosted-onpremises"&gt;
  &lt;/a&gt;
  Serve models in the cloud to applications hosted on-premises
&lt;/h3&gt;

&lt;p&gt;The most common use case for a hybrid pattern like this is enterprise migrations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--83yqwv1r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v45l8x56p19t6joze3ug.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--83yqwv1r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v45l8x56p19t6joze3ug.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Are deploying ML models to application consumers.&lt;/li&gt;
&lt;li&gt; Can use custom hardware for ultra-low response times with AWS Inferentia.&lt;/li&gt;
&lt;li&gt; Can serve thousands of models on the cheap with multi-model endpoints.&lt;/li&gt;
&lt;li&gt; Can deploy complex feature transforms with inference pipelines.&lt;/li&gt;
&lt;li&gt; Can use built-in autoscaling and model monitor.&lt;/li&gt;
&lt;li&gt; Can easily develop retrain and tune pipelines.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Risk of your local application infrastructure maintenance hindering the speed of your model development.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;When to move&lt;/strong&gt;: When your ability to deploy new applications on-premises is hindered by your need to procure, provision, and manage local infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#host-ml-models-with-lambda-at-edge-to-applications-onpremises"&gt;
  &lt;/a&gt;
  Host ML Models with Lambda at Edge to applications on-premises
&lt;/h2&gt;

&lt;p&gt;1-  This pattern takes advantage of a key capability of the AWS global network – the content delivery network known as Amazon CloudFront.&lt;br&gt;
2-  Once you’ve set your Lambda function to trigger off of CloudFront, you’re telling the service to replicate that function across all available regions and points of presence. This can take up to 8 minutes to replicate and become available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;
1-  Can use CloudFront, opening you up to serving on hundreds of points of presence around the world, and saving you from having to manage these. &lt;br&gt;
2-  Works nicely with Docker images on SageMaker, because you can create from ECR.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Can’t use GPU’s, so you may introduce a bit of latency in some cases, particularly where customers may be better served by an ML model on Inferentia hosted in a nearby AWS Region.&lt;/li&gt;
&lt;li&gt; Lambda has a hard limit on the largest amount of memory you can allocate to a function, which is 10.24GB. For many “classical” ML models, such as XGBoost or linear regressors, 10GB is more than sufficient. However, for some more complex deep learning models, especially those in the 10’s to 100’s of billions of parameters, 10GB is woefully short in terms of RAM.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;When to move&lt;/strong&gt;&lt;br&gt;
1-  When you need more advanced drift and monitoring capabilities.&lt;br&gt;
2-  When you want to introduce complex feature transforms, such as with inference pipelines on SageMaker.&lt;br&gt;
3-  When you want to serve thousands of models per use case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#training-with-a-3rd-party-saas-provider-to-host-in-the-cloud"&gt;
  &lt;/a&gt;
  Training with a 3rd party SaaS provider to host in the cloud
&lt;/h3&gt;

&lt;p&gt;1-  Ensure your provider allows the export of proprietary software frameworks, such as jars, bundles, images, etc. Follow w steps to create a Docker file using that software framework , port into the Elastic Container Registry, and host on SageMaker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#control-plane-patterns-for-hybrid-ml"&gt;
  &lt;/a&gt;
  Control plane patterns for hybrid ML
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; One such common control plane is Kubeflow in conjunction with EKS Anywhere. EKS Anywhere is currently in private preview, anticipated to come online in 2021.&lt;/li&gt;
&lt;li&gt; SageMaker offers a native approach for workflow orchestration, known as SageMaker Pipelines. SageMaker Pipelines is ideal for advanced SageMaker users, especially those who are already onboarded to the IDE SageMaker Studio. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#auxiliary-services-for-hybrid-ml-patterns"&gt;
  &lt;/a&gt;
  Auxiliary services for hybrid ML patterns
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#aws-outposts"&gt;
  &lt;/a&gt;
  AWS Outposts
&lt;/h3&gt;

&lt;p&gt;1-  Order AWS Outposts and Amazon will ship, install, and manage these resources for you. You can connect to these resources however you prefer, and manage them from the cloud.&lt;br&gt;
2-  You can deploy ML models via ECS to serve inference with ultra-low latency within your data centers, using AWS Outposts. You can also use ECS for model training, integrating with SageMaker in the cloud and ECS on Outposts.&lt;br&gt;
3-  Outposts help solve cases where customers want to build applications in countries where there is not currently an AWS Region, or for regulations that have strict data residency requirements, like online gambling and sports betting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-inferentia"&gt;
  &lt;/a&gt;
  AWS Inferentia
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; AWS Inferentia provides ease of accessing custom hardware for ML inferencing.&lt;/li&gt;
&lt;li&gt; The majority of Alexa operates in a hybrid ML pattern, hosting models on AWS Inferentia and serving hundreds of millions of Alexa-enabled devices around the world. Using AWS Inferentia, Alexa was able to reduce its cost of hosting by 25%.&lt;/li&gt;
&lt;li&gt; You can use SageMaker’s managed deep learning containers to train your ML models, compile them for Inferentia with Neo, host on the cloud, and develop your retrain and tune pipeline as usual.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#aws-direct-connect"&gt;
  &lt;/a&gt;
  AWS Direct Connect
&lt;/h3&gt;

&lt;p&gt;Ability to establish a private connection between your on-premises resources and your data center. Remember to establish a redundant link, as wires do go south!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hybrid-ml-use-cases"&gt;
  &lt;/a&gt;
  Hybrid ML Use Cases
&lt;/h2&gt;

&lt;p&gt;1-  Enterprise Migrations&lt;br&gt;
2-  Manufacturing&lt;br&gt;
3-  Gaming&lt;br&gt;
4-  Mobile application development&lt;br&gt;
5-  AI-enhanced media and content creation&lt;br&gt;
6-  Autonomous Vehicles&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this document, we explored hybrid ML patterns across the entire ML lifecycle. We looked at developing locally while training and deploying in the cloud. We discussed patterns for training locally to deploy on the cloud and even to host ML models in the cloud to serve applications on-premises.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>aws</category>
      <category>sagemaker</category>
      <category>awscommunitybuilder</category>
    </item>
    <item>
      <title>Microservices CI/CD With Terraform, AWS ECS &amp; AWS CI/CD Tools</title>
      <author>Sandip Das</author>
      <pubDate>Sun, 15 Aug 2021 11:45:58 +0000</pubDate>
      <link>https://dev.to/aws-heroes/microservices-ci-cd-with-terraform-aws-ecs-aws-ci-cd-tools-5hng</link>
      <guid>https://dev.to/aws-heroes/microservices-ci-cd-with-terraform-aws-ecs-aws-ci-cd-tools-5hng</guid>
      <description>&lt;p&gt;Learn how to configure AWS CodeBuild &amp;amp; CodePipeline for any applications using Terraform&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CjjSBWMwOzA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#by-the-end-of-tutorial-you-will-learn"&gt;
  &lt;/a&gt;
  By the end of tutorial you will learn:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What exactly are Microservices? &lt;/li&gt;
&lt;li&gt;What is Continuous Integration?&lt;/li&gt;
&lt;li&gt;What is Continuous Delivery &amp;amp; Deployment?&lt;/li&gt;
&lt;li&gt;What is Infrastructure as Code &amp;amp; Terraform? &lt;/li&gt;
&lt;li&gt;AWS Tools for CICD &amp;amp; Microservices&lt;/li&gt;
&lt;li&gt;Microservices CI/CD Demo with AWS + Terraform&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-microservices"&gt;
  &lt;/a&gt;
  What is Microservices?
&lt;/h2&gt;

&lt;p&gt;Microservices are an architectural and organizational approach to software development where software is composed of small independent services that communicate over well-defined APIs. These services are owned by small, self-contained teams.&lt;/p&gt;

&lt;p&gt;Microservices architectures make applications easier to scale and faster to develop, enabling innovation and accelerating time-to-market for new features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-terraform"&gt;
  &lt;/a&gt;
  What is Terraform?
&lt;/h2&gt;

&lt;p&gt;Terraform is an infrastructure as code (IaC) tool that allows you to build, change, and version infrastructure safely and efficiently. This includes low-level components such as compute instances, storage, and networking, as well as high-level components such as DNS entries, SaaS features, etc. Terraform can manage both existing service providers and custom in-house solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-aws-cicd-tools"&gt;
  &lt;/a&gt;
  What are the AWS CI/CD Tools?
&lt;/h2&gt;

&lt;p&gt;AWS CodeCommit: Managed Git Repository Services (Source)&lt;/p&gt;

&lt;p&gt;AWS CodeBuild: Container-based  Serverless Build tool/Service (Build)&lt;/p&gt;

&lt;p&gt;AWS CodeDeploy: Deployment service&lt;/p&gt;

&lt;p&gt;AWS CodePipeline: Workflow management e.g. Source ➡️  Build ➡️  Deploy &lt;/p&gt;

&lt;p&gt;▬▬▬▬▬▬ Useful Links 🔗 ▬▬▬▬▬▬ &lt;br&gt;
Terraform Course For Beginners:                             ►&lt;a href="https://bit.ly/379r5dg"&gt;https://bit.ly/379r5dg&lt;/a&gt;&lt;br&gt;
Demo Project GitHub Repo:                                      ►&lt;a href="https://bit.ly/3scmsZs"&gt;https://bit.ly/3scmsZs&lt;/a&gt;&lt;br&gt;
Terraform AWS CodeBuild Documentation:           ►&lt;a href="https://bit.ly/3jLyDss"&gt;https://bit.ly/3jLyDss&lt;/a&gt;&lt;br&gt;
Terraform AWS CodePipeline Documentation:      ►&lt;a href="https://bit.ly/3m1ZweC"&gt;https://bit.ly/3m1ZweC&lt;/a&gt;&lt;br&gt;
Terraform CodePipeline Providers Reference:       ►&lt;a href="https://amzn.to/3yLrAq0"&gt;https://amzn.to/3yLrAq0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;▬▬▬▬▬▬ Session Ebook 🚀      ▬▬▬▬▬▬ &lt;br&gt;
Microservices CI/CD With Terraform Ebook: ► &lt;a href="https://bit.ly/3xJd2WB"&gt;https://bit.ly/3xJd2WB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;▬▬▬▬▬▬ Connect with me 👋   ▬▬▬▬▬▬ &lt;br&gt;
My Site                                            ►  &lt;a href="https://bit.ly/3rz82SQ"&gt;https://bit.ly/3rz82SQ&lt;/a&gt;&lt;br&gt;
INSTAGRAM                                  ►  &lt;a href="https://bit.ly/3iFWfy8"&gt;https://bit.ly/3iFWfy8&lt;/a&gt;&lt;br&gt;
TWITTER                                        ►  &lt;a href="https://bit.ly/3i6lkDs"&gt;https://bit.ly/3i6lkDs&lt;/a&gt;&lt;br&gt;
LINKEDIN                                       ►  &lt;a href="https://bit.ly/3rAeCsm"&gt;https://bit.ly/3rAeCsm&lt;/a&gt;&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>devops</category>
      <category>aws</category>
      <category>cicd</category>
    </item>
  </channel>
</rss>
