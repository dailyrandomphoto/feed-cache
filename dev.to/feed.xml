<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Vue Academy #4: v-for directive</title>
      <author>CodeOzz</author>
      <pubDate>Fri, 06 Aug 2021 14:27:43 +0000</pubDate>
      <link>https://dev.to/codeozz/vue-academy-4-v-for-directive-4l7k</link>
      <guid>https://dev.to/codeozz/vue-academy-4-v-for-directive-4l7k</guid>
      <description>&lt;p&gt;Welcome to the new vue academy ! It will be a list of lot of article on vue! I have 2.5 years of experience in this and I can teach a few thing about this !&lt;/p&gt;

&lt;p&gt;With vue you can use some directives, today we will see &lt;code&gt;v-for&lt;/code&gt; in details !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-"&gt;
  &lt;/a&gt;
  What is ?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;v-for&lt;/code&gt; is a directive use to render a list of items based on an array or an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in toto"&lt;/span&gt;
        &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;third&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this component we will have three div as below 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first
second
third
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also get the current index of the iterated item&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(item, index) in toto"&lt;/span&gt;
        &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ item }} {{ index }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works also with object ! If we replace &lt;code&gt;toto: [ 'first', 'second', 'third' ]&lt;/code&gt; by an object like &lt;code&gt;toto: { a: 1, b: 2, c: 3 }&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;We have 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1
2
3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also access to the current key !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(item, attribute) in toto"&lt;/span&gt;
        &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ item }} {{ attribute }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-key-endraw-attribute"&gt;
  &lt;/a&gt;
  The &lt;code&gt;key&lt;/code&gt; attribute
&lt;/h3&gt;

&lt;p&gt;With the example above, you can ask what is this &lt;code&gt;:key&lt;/code&gt; value?&lt;/p&gt;

&lt;p&gt;In vue, &lt;code&gt;:key&lt;/code&gt; is used in all components, if the key is changed, the component will be reload (destroy and created hook will be triggered). It a simply way to reload properly a component !&lt;/p&gt;

&lt;p&gt;In general you don't need to handle this attribute, but in the &lt;code&gt;v-for&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;MANDATORY&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;And why ?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To give Vue a hint so that it can track each node’s identity, and thus reuse and reorder existing elements, you need to provide a unique key attribute for each item.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I advise you to never use &lt;code&gt;index&lt;/code&gt; as key attribute, always use a unique ID. The answer is not complicated to illustrate, imagine again an array with 1000 items, you delete the second item, so the &lt;code&gt;length&lt;/code&gt; of the iterated array will be changed, and &lt;em&gt;all&lt;/em&gt; index of &lt;em&gt;all&lt;/em&gt; items will changed, so &lt;em&gt;all&lt;/em&gt; components will be reload !&lt;/p&gt;

&lt;p&gt;If you use a unique id by item, and you delete the second item, the other component will be &lt;strong&gt;not reload&lt;/strong&gt; since &lt;strong&gt;all of the key is not changed&lt;/strong&gt; !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vfor-with-vif"&gt;
  &lt;/a&gt;
  v-for with v-if
&lt;/h3&gt;

&lt;p&gt;You should &lt;strong&gt;NEVER&lt;/strong&gt; use &lt;code&gt;v-for&lt;/code&gt; with &lt;code&gt;v-if&lt;/code&gt;, since when they exist on the same node, &lt;code&gt;v-for&lt;/code&gt; has a higher priority than &lt;code&gt;v-if&lt;/code&gt;. That means the &lt;code&gt;v-if&lt;/code&gt; will be run on each iteration of the loop separately !&lt;/p&gt;

&lt;p&gt;Let's go through an example !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in numberList"&lt;/span&gt;
        &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"isEven(item)"&lt;/span&gt;
        &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;numberList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For each iteration we will execute the &lt;code&gt;isEven&lt;/code&gt; function !&lt;/p&gt;

&lt;p&gt;How to avoid this?&lt;/p&gt;

&lt;p&gt;Two solutions based on the context:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We need to filter some value in your array ! &lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;computed&lt;/code&gt; property  and iterate it !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"evenItem in evenList"&lt;/span&gt;
        &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"evenItem"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;evenItem&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;numberList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;evenList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we filter the array before iterate it ! We don't need to use &lt;code&gt;v-if&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I need to display the items only if the array size is equal to 5 for exemple.&lt;/p&gt;

&lt;p&gt;You can just add an other balise that will wrap the &lt;code&gt;v-for&lt;/code&gt;, it will contain the &lt;code&gt;v-if&lt;/code&gt; !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"numberList.length === 5"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
           &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in numberList"&lt;/span&gt;
           &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;v-for&lt;/code&gt; is used to show array or object keys, you need to always use a unique id as &lt;code&gt;key&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Never use &lt;code&gt;v-for&lt;/code&gt; with &lt;code&gt;v-if&lt;/code&gt;, depending on the current context you have other possibilities !&lt;/p&gt;

&lt;p&gt;If you want to have nice article to read about web dev, you can subscribe to my &lt;strong&gt;FREE newsletter&lt;/strong&gt; at this url -&amp;gt; &lt;a href="https://codeoz.substack.com/welcome"&gt;https://codeoz.substack.com/welcome&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can follow me on :&lt;/p&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you want to buy me a coffee :D -&amp;gt; &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;https://www.buymeacoffee.com/CodeoZ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>I bought a tiny piece of internet history. [Plus a little puzzle to keep you busy this weekend!]</title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 06 Aug 2021 14:15:37 +0000</pubDate>
      <link>https://dev.to/inhuofficial/i-own-a-tiny-piece-of-internet-history-plus-a-little-puzzle-to-keep-you-busy-this-weekend-559</link>
      <guid>https://dev.to/inhuofficial/i-own-a-tiny-piece-of-internet-history-plus-a-little-puzzle-to-keep-you-busy-this-weekend-559</guid>
      <description>&lt;p&gt;Over a year ago I bought a domain name on a whim. Now you might be thinking "nothing special about that, I have done that!". In fact, some of you will probably have bought loads of domains on a whim! &lt;/p&gt;

&lt;p&gt;But this domain is at least a &lt;em&gt;little bit&lt;/em&gt; special as it is linked to quite a historic web page, one that is older than some of you reading this article (yikes, I am old!). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-little-bit-of-history"&gt;
  &lt;/a&gt;
  A little bit of history!
&lt;/h2&gt;

&lt;p&gt;Back in 2005 &lt;a href="https://twitter.com/tewy"&gt;Alex Tew&lt;/a&gt; wanted some money to pay for his University education. &lt;/p&gt;

&lt;p&gt;He came up with the idea to sell pixels on a page for $1 each. &lt;/p&gt;

&lt;p&gt;When you owned these pixels (bought in blocks of 10x10 pixels) you could upload an image that fits within those pixels.&lt;/p&gt;

&lt;p&gt;In total there were 1000x1000 pixels up for grabs and...the rest is history. They all sold out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-million-dollar-home-page"&gt;
  &lt;/a&gt;
  The million dollar home page!
&lt;/h2&gt;

&lt;p&gt;Yup, if you did the quick Maths (or knew of the site already) you will have worked out that 1000 x 1000 x $1 is $1,000,000!&lt;/p&gt;

&lt;p&gt;If only I had thought of that idea!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-it-out-in-all-of-its-glory"&gt;
  &lt;/a&gt;
  Check it out in all of its glory!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.milliondollarhomepage.com/"&gt;The million dollar home page is still live&lt;/a&gt; and hopefully will be for a long time to come! You can read more about the &lt;a href="https://en.wikipedia.org/wiki/The_Million_Dollar_Homepage"&gt;million dollar homepage over on Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can spend hours on there looking at all the little images, the random sites they lead to (and all of the dead ones!) etc.&lt;/p&gt;

&lt;p&gt;Before you go to check it out though, I better get to the point...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-why-is-this-relevant"&gt;
  &lt;/a&gt;
  So why is this relevant?
&lt;/h3&gt;

&lt;p&gt;Oh yes, to the point!&lt;/p&gt;

&lt;p&gt;When you bought these pixels you could link them to a domain name. So when you click on your pixel art it would redirect you to your domain name. &lt;/p&gt;

&lt;p&gt;So I spent (far too long) clicking on every little image, seeing where it went to, checking for dead links and then seeing if the attached domain was up for sale.&lt;/p&gt;

&lt;p&gt;By luck I found an awesome one at a reasonable price!&lt;/p&gt;

&lt;p&gt;Now I could tell you what domain I bought...but that wouldn't be much fun. So here is a little puzzle for you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-puzzle"&gt;
  &lt;/a&gt;
  The Puzzle!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Clue 1:&lt;/strong&gt; "The key to unlocking this puzzle lies next to the ______".&lt;/p&gt;

&lt;p&gt;The blank in the first clue is the missing word(s) from this famous movie quote...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clue 2:&lt;/strong&gt; "the matrix has you, follow the _______"&lt;/p&gt;

&lt;p&gt;Not too difficult (I hope!). &lt;/p&gt;

&lt;p&gt;Once you have worked out what you are looking for go to &lt;a href="http://www.milliondollarhomepage.com/"&gt;http://www.milliondollarhomepage.com/&lt;/a&gt; and see if you can find out the answer to my riddle (it may take a while!)!&lt;/p&gt;

&lt;p&gt;You will know if you have found the site as it will simply say "hello there my DEV friend" (yes, I really did make no effort to put anything else up there! It isn't even a valid HTML document...it's Friday, give me a break!). &lt;/p&gt;

&lt;p&gt;First to find it can &lt;strong&gt;put the first letter of each full word in the domain name&lt;/strong&gt; in the comments and claim your prize (which is nothing other than the satisfaction of winning I am afraid!).&lt;/p&gt;

&lt;p&gt;That way other people can play along without you spoiling it!&lt;/p&gt;

&lt;p&gt;Oh and if you do find it, if you have any funny (or good) ideas of what to do with the domain then let me know as it has been sat doing nothing for over a year!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#that-is-it"&gt;
  &lt;/a&gt;
  That is it!
&lt;/h2&gt;

&lt;p&gt;I am still recovering after &lt;a href="https://dev.to/inhuofficial/101-digital-accessibility-tips-and-tricks-4728"&gt;my monster last post&lt;/a&gt; so this is my "contribution" to the internet this week. (and the quotation marks are because I am not adding any value really 😋)&lt;/p&gt;

&lt;p&gt;However I am working on an awesome series to do with building the ultimate blogging tool (&lt;a href="https://dev.to/inhuofficial/designing-the-ultimate-inclusive-writing-tool-part-1-a-wysiwyg-in-745-bytes-ggh"&gt;an extension of some of the ideas in this post&lt;/a&gt;) so you may want to follow me if you write, or are considering writing (and you should write, it is awesome!)!&lt;/p&gt;

&lt;p&gt;I love the fact that I own a little bit of this web page, it is a shame I can't change the image or the URL but still, a little bit of internet history that I will (hopefully) put to good use one day!&lt;/p&gt;

&lt;p&gt;Have a great weekend peeps, I look forward to seeing if anyone finds the image and the domain name!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Criando Aplicações com Astro Build &amp; Azure Static Web CLI!</title>
      <author>Glaucia Lemos</author>
      <pubDate>Fri, 06 Aug 2021 13:49:10 +0000</pubDate>
      <link>https://dev.to/glaucia86/criando-aplicacoes-com-astro-build-azure-static-web-cli-39nb</link>
      <guid>https://dev.to/glaucia86/criando-aplicacoes-com-astro-build-azure-static-web-cli-39nb</guid>
      <description>&lt;p&gt;Recentemente tivemos o lançamento do serviço &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=javascript-34087-gllemos"&gt;Azure Static Web Apps&lt;/a&gt;&lt;/strong&gt;. Um serviço que te permite criar e implantar automaticamente aplicações Full Stack (desde o Back-End há Front-End) completa no Azure desde repositório do GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/D8jXxgCd"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UY5i0VYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/BnsBQ7Hy/swa-overview.png" alt="swa-overview.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A parte mais interessante do &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=javascript-34087-gllemos"&gt;Azure Static Web Apps&lt;/a&gt;&lt;/strong&gt; é que esse serviço integra perfeitamente para realizar hospedagem de forma global e de forma distribuída sua aplicação ou conteúdo estático, no lado do Back-End criando API's fazendo uso do serviço &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/apis?WT.mc_id=javascript-34087-gllemos"&gt;Azure Functions&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/key-vault-secrets?WT.mc_id=javascript-34087-gllemos"&gt;incluir recursos de autenticação&lt;/a&gt;&lt;/strong&gt;, roteamento personalizado e incluso autorização baseada em rotas!&lt;br&gt;
E, o melhor disso tudo: realizar &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/plans?WT.mc_id=javascript-34087-gllemos"&gt;hospedagem de forma totalmente gratuita!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se desejarem saber um pouco mais sobre esse novo serviço, eu escrevi um artigo mais detalhado sobre o produto no link abaixo:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/glaucia86" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TsiHKYKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7BHm3RKS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/8505/767224fd-6d7c-4ed1-aafe-d679b960a2ba.jpg" alt="glaucia86"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/glaucia86/publicando-aplicacoes-estaticas-com-static-web-apps-azure-devops-4c1o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Publicando Aplicações Estáticas com Static Web Apps &amp;amp; Azure DevOps!&lt;/h2&gt;
      &lt;h3&gt;Glaucia Lemos ・ May 12 ・ 14 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#azure&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#mas-o-que-%C3%A9-o-azure-static-web-apps-cli"&gt;
  &lt;/a&gt;
  Mas, o que é o Azure Static Web Apps CLI?!
&lt;/h2&gt;

&lt;p&gt;Bom, o enfoque de hoje será sobre uma ferramenta ligada a esse serviço que te permitirá emular localmente as suas aplicações estáticas de forma muito rápida e dinâmica: &lt;strong&gt;&lt;a href="https://github.com/Azure/static-web-apps-cli"&gt;Azure Static Web Apps CLI&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Azure"&gt;
        Azure
      &lt;/a&gt; / &lt;a href="https://github.com/Azure/static-web-apps-cli"&gt;
        static-web-apps-cli
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Azure Static Web Apps CLI ✨
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
Azure Static Web Apps CLI (preview)&lt;/h2&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://github.com/Azure/static-web-apps-clidocs/swa-emu-icon.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--twhQ4gYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Azure/static-web-apps-clidocs/swa-emu-icon.png" width="300"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;The Static Web Apps CLI, also known as SWA CLI, serves as a local development tool for &lt;a href="https://docs.microsoft.com/azure/static-web-apps" rel="nofollow"&gt;Azure Static Web Apps&lt;/a&gt;. It can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serve static app assets, or proxy to your app dev server&lt;/li&gt;
&lt;li&gt;Serve API requests, or proxy to APIs running in Azure Functions Core Tools&lt;/li&gt;
&lt;li&gt;Emulate authentication and authorization&lt;/li&gt;
&lt;li&gt;Emulate Static Web Apps configuration, including routing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Static Web Apps CLI is in preview.&lt;/strong&gt; If you have suggestions or you encounter issues, please report them or help us fix them. Your contributions are very much appreciated. 🙏&lt;/p&gt;

&lt;p&gt;The CLI emulates commonly used capabilities of the Azure Static Web Apps cloud service. &lt;strong&gt;Some differences are expected. Always deploy and test your apps in Azure to confirm behavior.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
Quickstart&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install the cli
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install -g @azure/static-web-apps-cli&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Open a SWA app folder at the root (outside any /api or /app…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Azure/static-web-apps-cli"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Conforme o próprio repositório da ferramenta o &lt;strong&gt;&lt;a href="https://github.com/Azure/static-web-apps-cli"&gt;Azure Static Web Apps CLI&lt;/a&gt;&lt;/strong&gt; com SWA CLI você pode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✅ Criar aplicações estáticas ativas ou proxy para o seu server de desenvolvimento de aplicações&lt;/li&gt;
&lt;li&gt;✅ Atender e criar requisições de API's ou proxies para API's que executem no Azure Functions&lt;/li&gt;
&lt;li&gt;✅ Emular autenticação e autorização&lt;/li&gt;
&lt;li&gt;✅ Emular configuração de aplicações Web Estáticas, incluso o roteamento!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Outro ponto importante a mencionar aqui é que você pode emular quaisquer projeto estático ou com estrutura de aplicação Front-End, seja ela:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✅ React&lt;/li&gt;
&lt;li&gt;✅ Angular&lt;/li&gt;
&lt;li&gt;✅ Svelte&lt;/li&gt;
&lt;li&gt;✅ Vue&lt;/li&gt;
&lt;li&gt;✅ Next.js&lt;/li&gt;
&lt;li&gt;✅ Blazor/WebAssembly!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bom! Falar é bom! Mas é muito melhor quando temos DEMOS! Então, vamos codificar agora e realizar uma demo bem simples de como podemos fazer uso dessa ferramenta localmente!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demo-time"&gt;
  &lt;/a&gt;
  Demo Time!
&lt;/h2&gt;

&lt;p&gt;A primeira coisa que precisamos fazer é instalar o &lt;strong&gt;&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;/strong&gt;! Sempre procuram instalar a versão LTS!&lt;/p&gt;

&lt;p&gt;Nessa demo, estarei usando um novo framework que pode ser uma grande tendência no mundo do desenvolvimento: &lt;strong&gt;&lt;a href="https://astro.build/"&gt;Astro Build&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Não estarei entrando em detalhes sobre esse framework, até porque o enfoque não é esse nesse artigo. Mas, se desejarem saber mais, posso estar fazendo um artigo e vídeo sobre esse framework fantástico!&lt;/p&gt;

&lt;p&gt;E, caso queiram saber mais detalhes sobre o &lt;strong&gt;&lt;a href="https://astro.build/"&gt;Astro Build&lt;/a&gt;&lt;/strong&gt;, vocês podem saber um pouco mais no vídeo abaixo:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dsTXcSeAZq8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Para agilizar um pouco mais a nossa demo, eu criei um projeto modelo que, peço encarecidamente que vocês façam um download ou git clone dele:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; git clone https://github.com/glaucia86/astro-swa-demo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se vocês desejarem, podem fazer as modificações necessárias. Tipo, imagens e outras cositas más! Eu super recomendo quando vocês iniciarem um novo projeto Astro, escolham a opção: &lt;em&gt;Portfolio&lt;/em&gt;. Vocês terão esse mesmo modelo para iniciar, quem sabe um novo site estático portifólio!&lt;/p&gt;

&lt;p&gt;Bom, vão até a pasta &lt;em&gt;astro-demo&lt;/em&gt; e instalam os pacotes localmente usando o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E, enfim, digitam o comando &lt;code&gt;npm start&lt;/code&gt; para iniciar o projeto. Abrem o browser na página: &lt;code&gt;http://localhost:3000/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Caso vejam conforme a imagem abaixo é porque funcionou tudo certinho!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/qtmtwf8G"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vR-zmf3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/QtDpXhCv/Captura-de-Tela-2021-08-03-a-s-23-43-51.png" alt="Captura-de-Tela-2021-08-03-a-s-23-43-51.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois disso, agora vamos ao próximo passo! Abre o seu command line e digite o seguinte comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @azure/static-web-apps-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Crie uma pasta para que possamos testar essa ferramenta. No meu caso, criei uma pasta com o seguinte nome:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;mkdir &lt;/span&gt;swa-cli-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vem a parte mais legal, onde apenas com o comando de linha vocês poderão criar uma página estática de exemplo. Para isso, execute o comando abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; swa start http://localhost:3000 &lt;span class="nt"&gt;--run&lt;/span&gt; &lt;span class="s2"&gt;"npm start"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depois que executamos esse comando note que ele pedirá a abrir uma página no browser. Porém, numa porta diferente: &lt;code&gt;http://localhost:4280/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O que isso quer nos dizer? Que estamos de fato, emulando o serve do Azure Static Web Apps. Desde esse endpoint, podemos testar até mesmo API's de Back-End com esse endpoint ou até mesmo simular uma autenticação integrada de logins. Uma vez que o Azure Static Web Apps tem suporte para isso. (Mais informações &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/authentication-authorization?WT.mc_id=javascript-34087-gllemos"&gt;AQUI&lt;/a&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Legal! Não é mesmo?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#realizando-deploy-da-aplica%C3%A7%C3%A3o-via-vs-code"&gt;
  &lt;/a&gt;
  Realizando deploy da aplicação via Vs Code!
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;para realizar os passos abaixo se faz necessário você alocar o seu projeto no GitHub e possuir uma conta free do Azure!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos agora fazer o deploy dessa aplicação usando a extensão do Azure Static Web Apps no &lt;strong&gt;&lt;a href="https://code.visualstudio.com/?WT.mc_id=javascript-34087-gllemos"&gt;Visual Studio Code&lt;/a&gt;&lt;/strong&gt;?!&lt;/p&gt;

&lt;p&gt;Para isso, baixem agora mesmo a extensão: &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps&amp;amp;WT.mc_id=javascript-34087-gllemos"&gt;Azure Static Web Apps&lt;/a&gt;&lt;/strong&gt;! &lt;/p&gt;

&lt;p&gt;Agora abra o projeto no Visual Studio Code e vamos seguir os seguintes passos:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-01"&gt;
  &lt;/a&gt;
  Passo 01:
&lt;/h5&gt;

&lt;p&gt;Clique no botão &lt;code&gt;+&lt;/code&gt; conforme a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/9DZVczCk"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GN3bXknT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/ht3Gb7wK/Captura-de-Tela-2021-08-04-a-s-01-15-35.png" alt="Captura-de-Tela-2021-08-04-a-s-01-15-35.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-02"&gt;
  &lt;/a&gt;
  Passo 02:
&lt;/h5&gt;

&lt;p&gt;Aqui vocês devem definir o nome da aplicação. O nome deve ser único!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/5QgY7pkw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TeGfKep4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/mhfYr5Y6/Captura-de-Tela-2021-08-04-a-s-01-21-19.png" alt="Captura-de-Tela-2021-08-04-a-s-01-21-19.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-03"&gt;
  &lt;/a&gt;
  Passo 03:
&lt;/h5&gt;

&lt;p&gt;Como o Astro ainda não está listado na extensão, vamos escolher a opção &lt;code&gt;custom&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/62g2Dy9Q"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g69G76gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/tJC3nxwF/step-02.png" alt="step-02.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-04"&gt;
  &lt;/a&gt;
  Passo 04:
&lt;/h5&gt;

&lt;p&gt;Já aqui estaremos definindo a localização da nossa aplicação. Muito cuidado, caso se a sua aplicação (raiz do projeto) estejam em alguma subpasta (que é o meu caso). Nesse exemplo, do meu projeto, a raiz do projeto encontra-se na pasta &lt;code&gt;astro-demo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/3WGdkr8g"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--opFz7mqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/WpWrftxf/Captura-de-Tela-2021-08-04-a-s-01-27-59.png" alt="Captura-de-Tela-2021-08-04-a-s-01-27-59.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-05"&gt;
  &lt;/a&gt;
  Passo 05:
&lt;/h5&gt;

&lt;p&gt;E, finalmente temos que definir onde está sendo gerada os arquivos de artefato do Astro. Segundo a documentação, fica localizada na pasta &lt;code&gt;dist&lt;/code&gt; (para diferentes frameworks existem diferentes pastas de artifatos. Para saber mais, clique &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/front-end-frameworks?WT.mc_id=javascript-34087-gllemos"&gt;AQUI&lt;/a&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/LJDqmyHw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CtQvM95n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/25RnFJgk/step-03.png" alt="step-03.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-06"&gt;
  &lt;/a&gt;
  Passo 06:
&lt;/h5&gt;

&lt;p&gt;Depois que executar o comando acima, abrirá uma caixa que te levará até o próximo passo (ou seja, ao repositório do GitHub)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/5YdDnWGF"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCFOn82T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/tTYyRXND/step-06.png" alt="step-06.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-07"&gt;
  &lt;/a&gt;
  Passo 07:
&lt;/h5&gt;

&lt;p&gt;Note que, no momento que somos levados ao site do repositório do projeto, apresentará uma pasta contendo um arquivo 'yaml' e além disso, uma action sendo executada pelo GitHub. Clique nessa action!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/jC8ZjrXQ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kyd3whHc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/dtFX4sZX/step-07.png" alt="step-07.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-08"&gt;
  &lt;/a&gt;
  Passo 08:
&lt;/h5&gt;

&lt;p&gt;Agora olha que interessante, há um &lt;code&gt;job&lt;/code&gt; sendo executado ali! Isso demonstra que a nossa aplicação está fazendo uma comunicação com a plataforma Azure e além do mais criando uma esteira de C.I e C.D pra nós! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/MvC0cZjR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imYKV1XP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/htj25fDC/step-08.png" alt="step-08.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-09"&gt;
  &lt;/a&gt;
  Passo 09:
&lt;/h5&gt;

&lt;p&gt;Caso tudo dê certo! Agora vamos ao último passo!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/t15Fmhvt"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--__ixgDN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/858wc4h3/step-09.png" alt="step-09.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-10"&gt;
  &lt;/a&gt;
  Passo 10:
&lt;/h5&gt;

&lt;p&gt;Retorne para o Visual Studio Code e abre novamente a extensão do SWA. E, procure pela aplicação recém criada! Clique com o botão direito em: &lt;code&gt;browser site&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Agora abram o browser! E, vocês verão o projeto de vocês disponível globalmente e pronto para ser visto por todo mundo!&lt;/p&gt;

&lt;p&gt;Se vocês desejarem ver o meu projeto online, ele está disponível &lt;strong&gt;&lt;a href="https://yellow-grass-008f2c710.azurestaticapps.net/"&gt;AQUI&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gifyu.com/image/OJkv"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GYEMGp9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s6.gifyu.com/images/astro-swa-demo.gif" alt="astro-swa-demo.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão!
&lt;/h2&gt;

&lt;p&gt;O Azure Static Web Apps veio pra nos auxiliar e facilitar quando o assunto é realizar deployment de projetos estáticos de uma maneira: simples, rápida e dinâmica! E, principalmente - a melhor parte disso tudo - integrado ao GitHub Actions! Criando assim uma esteira de C.I e C.D automaticamente pra nós! Fantástico, não é mesmo?!&lt;/p&gt;

&lt;p&gt;Se desejarem saber mais ou até mesmo experimentar esse serviço de graça, super recomendo os cursos abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/?WT.mc_id=javascript-34087-gllemos"&gt;Documentação Oficial do Azure Static Web Apps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/learn/paths/build-applications-with-azure-devops/?WT.mc_id=javascript-34087-gllemos"&gt;Curso Grátis - Azure DevOps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/pt-br/learn/modules/publish-app-service-static-web-app-api/?WT.mc_id=javascript-34087-gllemos"&gt;Curso Grátis - Publique uma Aplicação Estática no Angular, React, Vue ou Javascript &amp;amp; API&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/pt-br/learn/modules/create-deploy-static-webapp-gatsby-app-service/?WT.mc_id=javascript-34087-gllemos"&gt;Curso Grátis - Crie e Publique um site estático com Gatsby&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/publish-gatsby/?WT.mc_id=javascript-34087-gllemos"&gt;Implementando Azure Static Web Apps no Gatsby&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/publish-hugo/?WT.mc_id=javascript-34087-gllemos"&gt;Implementando Azure Static Web Apps no Hugo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/publish-vuepress/?WT.mc_id=javascript-34087-gllemos"&gt;Implementando Azure Static Web Apps no VuePress&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/pt-br/azure/static-web-apps/deploy-nextjs/?WT.mc_id=javascript-34087-gllemos"&gt;Implementando Azure Static Web Apps no Next.js&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/deploy-nuxtjs/?WT.mc_id=javascript-34087-gllemos"&gt;Implementando Azure Static Web Apps no Nuxt.js&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/pt-br/azure/static-web-apps/publish-jekyll/?WT.mc_id=javascript-34087-gllemos"&gt;Implementando Azure Static Web Apps no Jekyll&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#palavras-finais"&gt;
  &lt;/a&gt;
  Palavras Finais
&lt;/h2&gt;

&lt;p&gt;Espero que esse tutorial de SWA CLI + Astro Build seja de grande ajuda à todas as pessoas! Se vocês curtiram sobre o Astro, deixem nos comentários abaixo. Porque dependendo eu faço uma série de vídeos explicando melhor sobre esse framework incrível!&lt;/p&gt;

&lt;p&gt;Ah! Já ia esquecer de falar aqui! Não deixem de se inscrever no meu Canal do Youtube! Estou criando inúmeras séries incríveis para esse ano de 2021! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;😃 &lt;strong&gt;Microsoft Learn Live Sessions (a partir de Outubro)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;😃 &lt;strong&gt;Tutoriais semanais de Node.js, TypeScript &amp;amp; JavaScript&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;😃 &lt;strong&gt;E muitos Live Codings (a partir de Outubro)&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se são conteúdos que você curte, então não deixa de se inscrever e ative o sininho para ficar sabendo quando teremos vídeo novo!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/youtube-canal-glaucialemos"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJTWdv_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/pr3TL4Pd/Screen-Shot-12-31-20-at-01-06-AM.png" alt="Screen-Shot-12-31-20-at-01-06-AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E para ficarem por dentro de várias outras novidades, não deixem de me seguir lá no twitter!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/glaucia_lemos86"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TRF6AJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code4coders.files.wordpress.com/2019/05/image-12.png" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nos vemos! Até a próxima pessoal! 😍&lt;/p&gt;

</description>
      <category>azure</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Mobile App Development Company In India
</title>
      <author>Emmy Milly</author>
      <pubDate>Fri, 06 Aug 2021 13:45:27 +0000</pubDate>
      <link>https://dev.to/emmy161/mobile-app-development-company-in-india-53bg</link>
      <guid>https://dev.to/emmy161/mobile-app-development-company-in-india-53bg</guid>
      <description>&lt;p&gt;Grepix Infotech is a mobile app development company in India that develops custom iPhone applications for leading brands, enterprises and startups. Our experienced iPhone developers develop mobile applications for iPhone, iPad and iPod, hire iPhone app development company. We offer you the best pricing for iPhone app development.&lt;br&gt;
For more info: &lt;a href="https://www.grepixit.com/"&gt;https://www.grepixit.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
    </item>
    <item>
      <title>Advance Angular Dynamic Component</title>
      <author>ezzabuzaid</author>
      <pubDate>Fri, 06 Aug 2021 13:40:33 +0000</pubDate>
      <link>https://dev.to/this-is-angular/advance-angular-dynamic-component-12e</link>
      <guid>https://dev.to/this-is-angular/advance-angular-dynamic-component-12e</guid>
      <description>&lt;p&gt;In this article, I will show you how you can still use inputs and outputs and support OnChanges lifecycle while creating dynamic components.&lt;/p&gt;

&lt;p&gt;If you don't know about dynamic components yet, I recommend this article &lt;a href="https://netbasal.com/dynamically-creating-components-with-angular-a7346f4a982d"&gt;Dynamically Creating Components with Angular&lt;/a&gt; before going forward.&lt;/p&gt;

&lt;p&gt;For clarity about what I’m going to talk about, the &lt;a href="https://github.com/ezzabuzaid/dynamic-component-article/tree/main/src/app"&gt;project&lt;/a&gt; is available to browse through Github. or a &lt;a href="https://stackblitz.com/edit/angular-ivy-ogmamz?file=src%2Fapp%2Fcolor-box.component.ts"&gt;Demo&lt;/a&gt; if you prefer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;In order to create a dynamic component, you have to use either &lt;code&gt;ngComponentOutlet&lt;/code&gt; directive or &lt;code&gt;ComponentFactoryResolver&lt;/code&gt; object, neither provides a way to bind inputs and outputs.&lt;/p&gt;

&lt;p&gt;moreover, &lt;code&gt;ngOnChanges&lt;/code&gt; won't work, &lt;a href="https://indepth.dev/posts/1054/here-is-what-you-need-to-know-about-dynamic-components-in-angular#ngonchanges"&gt;This is because the function that performs inputs checks is generated by the compiler during compilation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;To work around the problem we would use a custom directive that could help as little as possible to facilitate the bindings.&lt;/p&gt;

&lt;p&gt;We will use &lt;code&gt;ComponentFactoryResolver&lt;/code&gt; to create a component factory that holds metadata about the component inputs and outputs. this metadata will be used to ensure correct properties names of inputs and outputs are used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;componentFactoryResolver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolveComponentFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ComponentType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;factory&lt;/code&gt; has two getters that represent the component inputs and outputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * The inputs of the component.
 */&lt;/span&gt;
&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}[];&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * The outputs of the component.
 */&lt;/span&gt;
&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each of which has &lt;code&gt;propName&lt;/code&gt; and &lt;code&gt;templateName&lt;/code&gt; that corresponds to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;templateName&lt;/code&gt; defaults to &lt;code&gt;propName&lt;/code&gt; if not specifed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Our directive would be used like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[dynamic-component]=&lt;/span&gt;&lt;span class="s"&gt;"component"&lt;/span&gt; &lt;span class="na"&gt;[inputs]=&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt; &lt;span class="na"&gt;[outputs]=&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Types that will be used in the code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UserOutputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UserInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ComponentInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ComponentFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inputs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ComponentOutputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ComponentFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;outputs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Utility function for strict mode people&lt;/strong&gt; 😅&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;asserts&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;NonNullable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`cannot be undefined or null.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The directive&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[dynamic-component]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DynamicComponentDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dynamic-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UserOutputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UserInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To complete the setup we need to make sure that&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;outputs&lt;/code&gt;/&lt;code&gt;inputs&lt;/code&gt; object corresponds to component outputs/inputs, no incorrect names used.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;component&lt;/code&gt; &lt;code&gt;ngOnChange&lt;/code&gt; runs on input change.&lt;/li&gt;
&lt;li&gt;outputs &lt;code&gt;EventEmitter&lt;/code&gt; are auto unsubscribed from.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'll show a few functions implementation to better highlight how things are done. You might want to check the &lt;a href="https://github.com/ezzabuzaid/dynamic-component-article/blob/main/src/app/dynamic-component.directive.ts"&gt;complete code&lt;/a&gt; while reading the following section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validation"&gt;
  &lt;/a&gt;
  Validation
&lt;/h2&gt;

&lt;p&gt;Since this is not Angular out-of-the-box solution we can't ensure the correct inputs/outputs names are used hence manual validation is required to avoid hidden issues.&lt;/p&gt;

&lt;p&gt;As mentioned above &lt;code&gt;ComponentFactory&lt;/code&gt; object will be used to inspect component inputs and outputs,    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inputs"&gt;
  &lt;/a&gt;
  Inputs
&lt;/h3&gt;

&lt;p&gt;Loop over the user-provided inputs, check if each provided input is declared in the component as &lt;strong&gt;Input&lt;/strong&gt;.&lt;br&gt;
A component input is a field decorated with &lt;code&gt;@Input&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;validateInputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentInputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ComponentInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userInputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserInputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userInputsKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userInputs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;userInputsKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userInputKey&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentHaveThatInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;componentInputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentInput&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;componentInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;userInputKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;componentHaveThatInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Input &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;userInputKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; input.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#outputs"&gt;
  &lt;/a&gt;
  Outputs
&lt;/h3&gt;

&lt;p&gt;Loop over the component outputs, check if each output holds an instance of &lt;code&gt;EventEmitter&lt;/code&gt;.&lt;br&gt;
A component output is a field decorated with &lt;code&gt;@Output&lt;/code&gt; and has &lt;code&gt;EventEmitter&lt;/code&gt; instance as value.&lt;/p&gt;

&lt;p&gt;In the other part, we perform a loop over the user-provided outputs, check if each provided output is declared in the component as &lt;strong&gt;Output&lt;/strong&gt; and if the user-provided output is function. that function will be used as &lt;code&gt;EventEmitter&lt;/code&gt; handler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;validateOutputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentOutputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ComponentOutputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userOutputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserOutputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;componentOutputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Output &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; must be a typeof EventEmitter`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outputsKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userOutputs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;outputsKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentHaveThatOutput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;componentOutputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;componentHaveThatOutput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Output &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; output.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userOutputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Output &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; must be a function`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#binding"&gt;
  &lt;/a&gt;
  Binding
&lt;/h2&gt;

&lt;p&gt;Binding is pretty straightforward now since we won't have incorrect inputs/outputs names.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inputs"&gt;
  &lt;/a&gt;
  Inputs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;bindInputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentInputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ComponentInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userInputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;componentInputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userInputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#outputs"&gt;
  &lt;/a&gt;
  Outputs
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;takeUntil&lt;/code&gt; operator used to unsubscribe from the &lt;code&gt;EventEmitter&lt;/code&gt; instance later on.&lt;br&gt;
&lt;code&gt;this.subscription&lt;/code&gt; is an instance of &lt;code&gt;Subject&lt;/code&gt;, which will be declared in the next sections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;bindOutputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentOutputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ComponentInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userOutputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;componentOutputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userOutputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// in case the output has not been provided at all&lt;/span&gt;
                  &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-the-component"&gt;
  &lt;/a&gt;
  Creating The Component
&lt;/h2&gt;

&lt;p&gt;Creating dynamic components is done using &lt;code&gt;ComponentFactoryResolver&lt;/code&gt; and &lt;code&gt;ViewContainerRef&lt;/code&gt;.&lt;br&gt;
First, we create a factory using &lt;code&gt;ComponentFactoryResolver&lt;/code&gt;, the factory contains the metadata to perform inputs/outputs validation.&lt;/p&gt;

&lt;p&gt;Second, we use that factory to create the component using &lt;code&gt;ViewContainerRef&lt;/code&gt;, it also takes the injector, which will be declared later on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;createComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactoryResolver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolveComponentFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h2&gt;

&lt;p&gt;To destroy a component we invoke the &lt;code&gt;destroy&lt;/code&gt; method defined in &lt;code&gt;ComponentRef&lt;/code&gt;, then we clear &lt;code&gt;ViewContainerRef&lt;/code&gt; which holds the actual component, doing so will also remove it from the UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;destroyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the cleanup will be performed in &lt;code&gt;ngOnDestroy&lt;/code&gt; lifecycle, the &lt;code&gt;subscription&lt;/code&gt; is as mentioned previously an instance of &lt;code&gt;Subject&lt;/code&gt; that we used to unsubscribe from &lt;code&gt;EventEmitter&lt;/code&gt; subscriptions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroyComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#combine-the-functions"&gt;
  &lt;/a&gt;
  Combine The Functions
&lt;/h2&gt;

&lt;p&gt;Let's call the functions, &lt;code&gt;ngOnChanges&lt;/code&gt; lifecycle will be used to create the component whenever the &lt;code&gt;component&lt;/code&gt; input or &lt;code&gt;injector&lt;/code&gt; input changes, in that case, we destroy the previous component first, then we create the new component.&lt;/p&gt;

&lt;p&gt;after that, we perform the validation then bind the inputs and outputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dynamic-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UserOutputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UserInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;injector&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Injector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ensure component is defined&lt;/span&gt;
  &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shouldCreateNewComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;
      &lt;span class="o"&gt;||&lt;/span&gt;
      &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injector&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injector&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldCreateNewComponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroyComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// to make eslint happy ^^&lt;/span&gt;
  &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// to remove old subscription&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validateOutputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validateInputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bindInputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bindOutputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with that, in place, we have all the required functionality to do what [ngComponentOutlet] can't.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ngonchanges"&gt;
  &lt;/a&gt;
  The ngOnChanges
&lt;/h2&gt;

&lt;p&gt;So far we can completely create dynamic components, but we can't use &lt;code&gt;ngOnChanges&lt;/code&gt; lifecycle since it doesn't react to &lt;code&gt;@Input&lt;/code&gt; changes therefore we have to do this manually.&lt;/p&gt;

&lt;p&gt;Another way to do this is to change the &lt;code&gt;@Input&lt;/code&gt; field that concerned you to have getter and setter, so you can know when a change happens, but it is not a favorable option so let's stick &lt;code&gt;ngOnChanges&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's start with creating &lt;em&gt;changes&lt;/em&gt; object for the component.&lt;br&gt;
Basically, do a loop over new inputs (&lt;code&gt;currentInputs&lt;/code&gt;) and compare each input with the previous one, in case of change we add it as changed input to the changes object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;makeComponentChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputsChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firstChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SimpleChange&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;previuosInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputsChange&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputsChange&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentInputs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inputName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentInputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentInputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inputName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;previuosInputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;previuosInputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inputName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentInputValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;previuosInputValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inputName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimpleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstChange&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;previuosInputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentInputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firstChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SimpleChange&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have to manually call the &lt;code&gt;ngOnChanges&lt;/code&gt; from the component instance if the component declared it and passes changes as an argument.&lt;br&gt;
Changing the previous function to have the functionality&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ensure component is defined&lt;/span&gt;
  &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;componentChanges&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SimpleChange&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shouldCreateNewComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;
      &lt;span class="o"&gt;||&lt;/span&gt;
      &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injector&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injector&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldCreateNewComponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroyComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// (1) &lt;/span&gt;
      &lt;span class="nx"&gt;componentChanges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeComponentChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// (2)&lt;/span&gt;
  &lt;span class="nx"&gt;componentChanges&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeComponentChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validateOutputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validateInputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;

  &lt;span class="c1"&gt;// (3)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bindInputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// (4)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// to remove old subscription&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bindOutputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// (5)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentChanges&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create changes object with &lt;code&gt;firstChange&lt;/code&gt; as true after creating the component.&lt;/li&gt;
&lt;li&gt;In case the component didn't change that means only the inputs or outputs did change so we create changes object with &lt;code&gt;firstChange&lt;/code&gt; as false.&lt;/li&gt;
&lt;li&gt;Rebind the inputs only if they did change.&lt;/li&gt;
&lt;li&gt;Rebind the outputs only if they did change.&lt;/li&gt;
&lt;li&gt;Calling component &lt;code&gt;ngOnChanges&lt;/code&gt; lifecycle with the possible inputs changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Time to try it out. &lt;a href="https://stackblitz.com/edit/angular-ivy-ogmamz?file=src%2Fapp%2Fcolor-box.component.ts"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a simple component that displays a color based on input and emits an event when it changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-color-box&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;div style="height: 250px; width: 250px;" [style.background-color]="backgroundColor"&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ColorBoxComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;backgroundColorChanges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColorChanges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Host component declares &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; with &lt;code&gt;ColorBoxComponent&lt;/code&gt; as the &lt;code&gt;dynamic-component&lt;/code&gt; with inputs and outputs.&lt;br&gt;
Clicking on &lt;em&gt;Change Color&lt;/em&gt; button will invoke &lt;code&gt;ngOnChanges&lt;/code&gt; of &lt;code&gt;ColorBoxComponent&lt;/code&gt;, just as it should be.  &lt;/p&gt;

&lt;p&gt;Try to change the input name and you'll see an exception thrown in the console.&lt;/p&gt;

&lt;p&gt;A bit about outputs, you'll need to use an arrow function syntax to have &lt;code&gt;this&lt;/code&gt; referring to the &lt;code&gt;AppComponent&lt;/code&gt; instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ColorBoxComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./color-box.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
  &amp;lt;ng-template
   [dynamic-component]="component"
   [inputs]="{backgroundColor: backgroundColor}"
   [outputs]="{backgroundColorChanges: onColorChange}"&amp;gt;
  &amp;lt;/ng-template&amp;gt;
  &amp;lt;button (click)="changeColor()"&amp;gt;Change Color&amp;lt;/button&amp;gt;
`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ColorBoxComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;onColorChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ColorBoxComponent&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;backgroundColor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;changeColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Dynamic component is almost required in every project and having the ability to deal with it in an easy way is important.&lt;/p&gt;

&lt;p&gt;Lastly, there's already a package that does all of that and a bit more &lt;a href="https://www.npmjs.com/package/ng-dynamic-component"&gt;ng-dynamic-component&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://indepth.dev/posts/1054/here-is-what-you-need-to-know-about-dynamic-components-in-angular#ngonchanges"&gt;Here is what you need to know about dynamic components in Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_component_outlet.ts"&gt;NgComponentOutlet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://netbasal.com/dynamically-creating-components-with-angular-a7346f4a982d"&gt;Dynamically Creating Components with Angular&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>angular</category>
    </item>
    <item>
      <title>How to develop Cryptocurrency Trading Platform?</title>
      <author>Robert John</author>
      <pubDate>Fri, 06 Aug 2021 13:29:55 +0000</pubDate>
      <link>https://dev.to/robertj46122142/how-to-develop-cryptocurrency-trading-platform-56g0</link>
      <guid>https://dev.to/robertj46122142/how-to-develop-cryptocurrency-trading-platform-56g0</guid>
      <description>&lt;p&gt;It has been more than 12 years since Bitcoin (BTC) first emerged in the world. However, the cryptocurrency industry is continuously breaking records even now.  The daily trading volume of digital currencies is $99.95 billion according to data given by CoinMarketCap. Besides that, there are 11175 cryptos in the market today. Hence, is a highly suitable time for entrepreneurs to buy a White-label Cryptocurrency Exchange software and begin their lucrative journey. They can get in touch with a well-versed app development company to create a cutting-edge trading platform. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;What are the various kinds of Bitcoin Exchange Software?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Cryptopreneurs can purchase different types of Cryptocurrency Exchange software based on the business needs, market conditions, and regulatory laws. They can choose (Centralized, Decentralized, Peer-to-Peer, and Hybrid) to set up their online trading platform.  The degree of control over funds and freedom in decision-making varies from one Bitcoin Exchange PHP script to another. &lt;/p&gt;

&lt;p&gt;Moreover, entrepreneurs can form a strong brand image in the industry by buying white-label solutions of popular crypto exchanges. For instance, an app development company will offer clones of Binance Decentralized Exchange (DEX), Bitstamp, Coinbase, IDEX, LocalBitcoins, Paxful, Poloniex, and WazirX. &lt;/p&gt;

&lt;p&gt;Get the guide to &lt;a href="https://www.appdupe.com/cryptocurrency-exchange-script"&gt;Develop Crypto trading platform&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cryptocurrency</category>
      <category>cryptotrading</category>
      <category>bitcointrading</category>
    </item>
    <item>
      <title> Game Dev Digest — Issue #105 - Double Stuffed</title>
      <author>Game Dev Digest - The Newsletter On Unity Game Dev</author>
      <pubDate>Fri, 06 Aug 2021 13:08:17 +0000</pubDate>
      <link>https://dev.to/gamedevdigest/game-dev-digest-issue-105-double-stuffed-5h4f</link>
      <guid>https://dev.to/gamedevdigest/game-dev-digest-issue-105-double-stuffed-5h4f</guid>
      <description>&lt;h3&gt;
  &lt;a href="#issue-105-double-stuffed"&gt;
  &lt;/a&gt;
  Issue #105 - Double Stuffed
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://gamedevdigest.com/digests/issue-105-double-stuffed.html"&gt;GameDevDigest.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ye6TfKSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/social-posts/issue-105.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ye6TfKSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/social-posts/issue-105.png" alt="Issue #105 - Double Stuffed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Newsletter is back this week, hope you enjoy it as usual!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://80.lv/articles/depth-of-field-in-unity-for-2d-games-with-semi-transparent-sprites"&gt;&lt;strong&gt;Depth Of Field in Unity for 2D Games With Semi-Transparent Sprites&lt;/strong&gt;&lt;/a&gt;  - The Co-Founder of The Sixth Hammer Dimitar Popov has shared the company's findings on setting up DoF Blur in 2D games, discussed the problems they faced, and how they overcame the challenges of this task.&lt;br&gt;
&lt;a href="https://80.lv/articles/depth-of-field-in-unity-for-2d-games-with-semi-transparent-sprites"&gt;&lt;em&gt;80.lv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/posts/no-bloom-no-post-53965598"&gt;&lt;strong&gt;No Bloom? No Problem: Glowing Stuff without Post Effects&lt;/strong&gt;&lt;/a&gt;  - In this lesson, we're going to look at ways to make the things in your game appear to glow without the use of bloom!&lt;br&gt;
&lt;a href="https://www.patreon.com/posts/no-bloom-no-post-53965598"&gt;&lt;em&gt;Team Dogpit&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/posts/54164790"&gt;&lt;strong&gt;URP Compute Grass Shader + Grass Painter Update&lt;/strong&gt;&lt;/a&gt;  - A few months ago I made a Geometry shader for interactive grass. While this works great on Windows, Geometry Shaders aren't that well supported on other platforms. A better option for the same effect is a Compute Shader, which is supported on PS4/5, Xbox, Switch, iOs, Android, and Windows. &lt;em&gt;[&lt;a href="https://www.patreon.com/posts/53587750"&gt;built-in pipeline version&lt;/a&gt; also available]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.patreon.com/posts/54164790"&gt;&lt;em&gt;Minions Art&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bronsonzgeb.com/index.php/2021/07/25/pixelate-filter-in-urp-using-compute-shaders/"&gt;&lt;strong&gt;Pixelate Filter in URP using Compute Shaders&lt;/strong&gt;&lt;/a&gt;  - This article will use the pixelate image filter from the previous post but in URP, the Universal Render Pipeline. We’ll set up a ScriptableRendererFeature and ScriptableRenderPass to run the compute shader at the end of the rendering pipeline. I recommend you read the previous pixelate filter post before this one to understand the full context.&lt;br&gt;
&lt;em&gt;[Don't miss the &lt;a href="https://bronsonzgeb.com/index.php/2021/08/01/pixelate-filter-in-hdrp-using-compute-shaders/"&gt;HDRP&lt;/a&gt; version as well]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://bronsonzgeb.com/index.php/2021/07/25/pixelate-filter-in-urp-using-compute-shaders/"&gt;&lt;em&gt;Bronson Zgeb&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://catlikecoding.com/unity/tutorials/pseudorandom-noise/voronoi-noise/"&gt;&lt;strong&gt;Voronoi Noise&lt;/strong&gt;&lt;/a&gt;  - This is the sixth tutorial in a series about pseudorandom noise. It introduces various flavors of Voronoi noise.&lt;br&gt;
&lt;a href="https://catlikecoding.com/unity/tutorials/pseudorandom-noise/voronoi-noise/"&gt;&lt;em&gt;catlikecoding.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.unity.com/technology/optimize-your-mobile-game-performance-expert-tips-on-graphics-and-assets"&gt;&lt;strong&gt;Optimize your mobile game performance: Expert tips on graphics and assets&lt;/strong&gt;&lt;/a&gt;  - In the final installment of this optimization series, we focus on how to improve the performance of your assets, project configuration, and graphics. In case you missed them, check out our previous posts on profiling, memory, and code architecture, as well as physics, UI, and audio, for a more complete picture of how to optimize your game – or, download the free e-book for a rundown of all these topics.&lt;br&gt;
&lt;a href="https://blog.unity.com/technology/optimize-your-mobile-game-performance-expert-tips-on-graphics-and-assets"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.unity.com/games/2d-art-creation-in-dragon-crashers"&gt;&lt;strong&gt;2D art creation in Dragon Crashers&lt;/strong&gt;&lt;/a&gt;  - Talking with Eduardo from the Unity 2D team, Jarek opened up about his creative process, tips for creating sprites, 2D lighting and animations, and using Affinity Designer and Photo, his art and design software of choice.&lt;br&gt;
&lt;a href="https://blog.unity.com/games/2d-art-creation-in-dragon-crashers"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.sunnyvalleystudio.com/blog/how-to-sort-sprites-in-unity"&gt;&lt;strong&gt;How to sort sprites by Y axis in Unity 2D&lt;/strong&gt;&lt;/a&gt;  - Creating the illusion of 3D in 2D.&lt;br&gt;
&lt;a href="http://www.sunnyvalleystudio.com/blog/how-to-sort-sprites-in-unity"&gt;&lt;em&gt;sunnyvalleystudio.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://monoflauta.com/2021/07/27/11-useful-unity-c-extension-methods/"&gt;&lt;strong&gt;11 Useful Unity C# Extension Methods&lt;/strong&gt;&lt;/a&gt;  - This time I will show you a list of useful Unity extensions and the cases where you can use them. I had been looking around to expand my list of useful extensions and some of them were pretty interesting plus I already had a few I normally use.&lt;br&gt;
&lt;a href="https://monoflauta.com/2021/07/27/11-useful-unity-c-extension-methods/"&gt;&lt;em&gt;monoflauta.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gamedev-resources.com/create-an-item-management-editor-tool-with-ui-toolkit/"&gt;&lt;strong&gt;Create an item management editor window with UI Toolkit&lt;/strong&gt;&lt;/a&gt;  - This tutorial will cover the fundamentals of creating a custom editor tool, including what scriptable objects are and how to create, delete and bind to one. You will also learn about ListView and the Object Picker.&lt;br&gt;
&lt;a href="https://gamedev-resources.com/create-an-item-management-editor-tool-with-ui-toolkit/"&gt;&lt;em&gt;gamedev-resources.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.raywenderlich.com/22175776-introduction-to-textmesh-pro-in-unity"&gt;&lt;strong&gt;Introduction to TextMesh Pro in Unity&lt;/strong&gt;&lt;/a&gt;  - Learn about TextMesh Pro in Unity by creating a spooky text-based adventure game where the style of the text changes based on what happens in the story.&lt;br&gt;
&lt;a href="https://www.raywenderlich.com/22175776-introduction-to-textmesh-pro-in-unity"&gt;&lt;em&gt;raywenderlich.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gamasutra.com/view/news/386242/Going_forward_Unity_devs_will_need_Unity_Pro_to_publish_on_consoles.php?"&gt;&lt;strong&gt;Going forward, Unity devs will need Unity Pro to publish on consoles&lt;/strong&gt;&lt;/a&gt;  - In late June, Unity quietly updated its licensing policy requirements for developers working on “closed platforms” like Xbox, PlayStation, Nintendo Switch, and Google Stadia. Unity developers starting new projects will now need either a Unity Pro license or a Preferred Platform License Key to develop for these platforms.&lt;br&gt;
&lt;em&gt;[&lt;a href="https://www.youtube.com/watch?v=fXUvnEJ3YeA"&gt;Watch&lt;/a&gt; Gamefromscratch's take]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://gamasutra.com/view/news/386242/Going_forward_Unity_devs_will_need_Unity_Pro_to_publish_on_consoles.php?"&gt;&lt;em&gt;gamasutra.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=kQIBQbAShk0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yXO4A9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/images/a28f74c18eedfc1ebb0f195c424ee8ff.png" alt="Creator Spotlight: Minute of Islands by Studio Fizbin"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=kQIBQbAShk0"&gt;&lt;strong&gt;Creator Spotlight: Minute of Islands by Studio Fizbin&lt;/strong&gt;&lt;/a&gt;  - Studio Fizbin joins us on Twitch to explore the tech behind their gorgeous 2D narrative puzzle platformer, Minute of Islands. We answer questions from the community as we open up the engine and learn how the team built their hand-drawn environment, the challenges they faced, and what tools helped achieve their vision for this vibrant world.&lt;br&gt;
&lt;em&gt;[don't miss these other Creator Spotlights as well: &lt;a href="https://www.youtube.com/watch?v=pu9krs6rHKQ"&gt;Harold Halibut | Slow Bros.&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=jR_4qVRO3e8"&gt;Praey for the Gods | No Matter Studios&lt;/a&gt;]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=kQIBQbAShk0"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=GFOpKcpKGKQ"&gt;&lt;strong&gt;Batman Arkham's Freeflow Combat | Mix and Jam&lt;/strong&gt;&lt;/a&gt;  - This project is a take on the Freeflow Combat system from the Batman Arkham series of games! Let’s explore game dev techniques and try to achieve a similar system!&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=GFOpKcpKGKQ"&gt;&lt;em&gt;Mix and Jam&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=AbV7gVCndIE"&gt;&lt;strong&gt;I Made The Legend of Zelda Boss Fights but they’re 3D&lt;/strong&gt;&lt;/a&gt;  - I Made The Legend of Zelda Boss Fights but they’re 3D. . . Last time when I made The Legend of Zelda but it’s 3D, I said at the end of the video that I might continue on with the dungeons and boss fights in another video since I had never made a boss at that point. After a couple months I’ve finally finished up with doing all the different dungeons, along with the enemies and the bosses.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=AbV7gVCndIE"&gt;&lt;em&gt;CodyCantEatThis&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=YnIiMCnAf9E"&gt;&lt;strong&gt;LEARN UNITY AUDIO - The Ultimate Guide to Audio, Implementation &amp;amp; Scripting&lt;/strong&gt;&lt;/a&gt;  - If you're struggling to implement sound effects, audio in Unity - Need help scripting them? Then this Unity tutorial is for you! This video will have details on adding 2D and 3D audio effects, understanding the basics around these, scripting audio sources, audio clips, using triggers, unity events, UI buttons and custom events. Looking at playing and pausing audio and understanding AudioMixers and how to change that at runtime. I'll lave time stamps under here for your convenience! :)&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=YnIiMCnAf9E"&gt;&lt;em&gt;SpeedTutor&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=SzQABx2YTJA"&gt;&lt;strong&gt;Creating a Dynamic Modal Window in Unity&lt;/strong&gt;&lt;/a&gt;  - Modal windows are a crucial part of Game UI, so let's make one in Unity that's flexible and versatile!&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=SzQABx2YTJA"&gt;&lt;em&gt;Game Dev Guide&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ibr8gKmz760"&gt;&lt;strong&gt;Unity Visual Scripting in 2021! (changes from 2020, BOLT)&lt;/strong&gt;&lt;/a&gt;  - Let's explore the changes in Unity Visual Scripting 2021 and Bolt.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=ibr8gKmz760"&gt;&lt;em&gt;Code Monkey&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=IzUpWU1Wd2E"&gt;&lt;strong&gt;Quickly &amp;amp; Easily Create Hit Impact Effects&lt;/strong&gt;&lt;/a&gt;  - In this video, we’ll show you how to quickly &amp;amp; easily make hit impact effects for your games.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=IzUpWU1Wd2E"&gt;&lt;em&gt;Game Dev Republic&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=h50OMdqtbKE"&gt;&lt;strong&gt;InGame Tilemap Editing - PART 2: Lines &amp;amp; Rectangles - 2D Level Editor with Unity - Tutorial&lt;/strong&gt;&lt;/a&gt;  - In this tutorial series you will learn how you can create an ingame UI where your players can draw on a grid. We are going to use Unitys Tilemaps and there will be a lot of coding involved. You'll learn how you can add the UI with clickable buttons, how to show a preview where an item would be placed and of course you can place it. It will then be drawn onto a tilemap.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=h50OMdqtbKE"&gt;&lt;em&gt;Velvary&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=rMlcwtoui4I"&gt;&lt;strong&gt;Input System Interactions Explained | Press, Hold, Tap, SlowTap, MultiTap - Unity&lt;/strong&gt;&lt;/a&gt;  - Today we go over Interactions in Unity's New Input System. I go what makes an interaction, how it impacts the actions, the individual actions themselves, code overview, interaction priority and multiple interactions, and custom interactions.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rMlcwtoui4I"&gt;&lt;em&gt;samyam&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=7eKi6NKri6I"&gt;&lt;strong&gt;Best practices: Async vs. coroutines - Unite Copenhagen&lt;/strong&gt;&lt;/a&gt;  - Before async was introduced in Unity 2017, asynchronous routines were implemented using coroutines and/or callbacks. This video covers the benefits of async over coroutines. You'll see how one example problem – building an asynchronous prompt popup – can be solved using async vs coroutines.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=7eKi6NKri6I"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#assets"&gt;
  &lt;/a&gt;
  Assets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://assetstore.unity.com/summer-sale?aid=1011l8NVc"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBRe2cEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/images/a9024c2f-b132-c78b-755f-d32fe22cb1d4.jpeg" alt="Smash Hit Summer - Asset Store Sale"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://assetstore.unity.com/summer-sale?aid=1011l8NVc"&gt;&lt;strong&gt;Smash Hit Summer - Asset Store Sale&lt;/strong&gt;&lt;/a&gt;  - 50% off&lt;br&gt;
&lt;a href="https://assetstore.unity.com/summer-sale?aid=1011l8NVc"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt; &lt;strong&gt;Affiliate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://assetstore.unity.com/publisher-sale?aid=1011l8NVc"&gt;&lt;strong&gt;The Animation Publishers Sale Begins Today!&lt;/strong&gt;&lt;/a&gt;  - All assets from 3 Animation Publishers, Kevin Iglesias, Explosive, and we make the game, are on sale for 50% off from August 2, 2021 00:00:00 PT through August 15, 2021. In addition, each Animation Publisher has one asset that will be offered for free with coupon code: ANIMATE2021 during the sale:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free asset &lt;a href="https://assetstore.unity.com/packages/3d/animations/basic-motions-157744?aid=1011l8NVc"&gt;Basic Motions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Free asset &lt;a href="https://assetstore.unity.com/packages/3d/animations/crafting-mecanim-animation-pack-36545?aid=1011l8NVc"&gt;The Crafting Mecanim Animation Pack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Free asset &lt;a href="https://assetstore.unity.com/packages/3d/animations/oriental-sword-animation-71318?aid=1011l8NVc"&gt;Oriental Sword Animation&lt;/a&gt;
&lt;em&gt;[remember to use coupon code: ANIMATE2021 at checkout]&lt;/em&gt;
&lt;a href="https://assetstore.unity.com/publisher-sale?aid=1011l8NVc"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt; &lt;strong&gt;Affiliate&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/renanwolf/UniRate?"&gt;&lt;strong&gt;UniRate&lt;/strong&gt;&lt;/a&gt;  - Unity plugin to easily manage the application frame rate and rendering interval. Preventing battery power consumption and device heat, especially on mobile platforms.&lt;br&gt;
&lt;a href="https://github.com/renanwolf/UniRate?"&gt;&lt;em&gt;renanwolf&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Cysharp/UniTask?"&gt;&lt;strong&gt;UniTask&lt;/strong&gt;&lt;/a&gt;  - Provides an efficient allocation free async/await integration for Unity.&lt;br&gt;
&lt;a href="https://github.com/Cysharp/UniTask?"&gt;&lt;em&gt;Cysharp&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ultraleap/PlayRecorder?utm_source=pocket_mylist"&gt;&lt;strong&gt;PlayRecorder&lt;/strong&gt;&lt;/a&gt;  - PlayRecorder lets you record Unity scene logic into binary files that work in both the editor or builds. Once a recording is made with a scene, even if that recording is created within a build, it can be played back within the editor, making it incredibly useful for recording data from user studies or analytics. Data can also be recorded within the editor, and then played back within a build.&lt;br&gt;
&lt;a href="https://github.com/ultraleap/PlayRecorder?utm_source=pocket_mylist"&gt;&lt;em&gt;Ultraleap&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/MonoMod/MonoMod?"&gt;&lt;strong&gt;MonoMod&lt;/strong&gt;&lt;/a&gt;  - C# modding swiss army knife, powered by cecil.&lt;br&gt;
&lt;a href="https://github.com/MonoMod/MonoMod?"&gt;&lt;em&gt;MonoMod&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/voxell-tech/UnityNLP?"&gt;&lt;strong&gt;Unity NLP&lt;/strong&gt;&lt;/a&gt;  - Natural Language Processing in Unity.&lt;br&gt;
&lt;a href="https://github.com/voxell-tech/UnityNLP?"&gt;&lt;em&gt;voxell-tech&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/snozbot/fungus?"&gt;&lt;strong&gt;Fungus&lt;/strong&gt;&lt;/a&gt;  - The goal of Fungus is to provide a free, open source tool for creating interactive storytelling games in Unity 3D. Fungus is designed to be easy to learn for beginners to Unity 3D, especially for people with no coding experience. For power users, it provides an intuitive, fast workflow for visual scripting and interactive storytelling. Fungus is being used to create Visual Novels, Point and Click Adventure Games, Childrens Stories, Hidden Object Games, eLearning apps and also some frankly weird stuff which defies classification :)&lt;br&gt;
&lt;a href="https://github.com/snozbot/fungus?"&gt;&lt;em&gt;snozbot&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/michaelday008/AnyRPGCore?"&gt;&lt;strong&gt;AnyRPG&lt;/strong&gt;&lt;/a&gt;  - Open source Role Playing Game engine for Unity 3D written in C#.&lt;br&gt;
&lt;a href="https://github.com/michaelday008/AnyRPGCore?"&gt;&lt;em&gt;michaelday008&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/FritzsHero/RoadArchitect?"&gt;&lt;strong&gt;RoadArchitect&lt;/strong&gt;&lt;/a&gt;  - Road Architect is a professional quality road system creator featuring dynamic intersections, bridges and many other road objects.&lt;br&gt;
&lt;a href="https://github.com/FritzsHero/RoadArchitect?"&gt;&lt;em&gt;FritzsHero&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/naelstrof/UnityJigglePhysics?"&gt;&lt;strong&gt;Unity Jiggle Physics&lt;/strong&gt;&lt;/a&gt;  - An acceleration-based jigglebone system with soft-body/squash-and-stretch physics for SkinnedMeshRenderers in Unity.&lt;br&gt;
&lt;a href="https://github.com/naelstrof/UnityJigglePhysics?"&gt;&lt;em&gt;naelstrof&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/komietty/unity-animated-convexhull?"&gt;&lt;strong&gt;unity-animated-convexhull&lt;/strong&gt;&lt;/a&gt;  - Realtime Fast convex generator for Unity.&lt;br&gt;
&lt;a href="https://github.com/komietty/unity-animated-convexhull?"&gt;&lt;em&gt;komietty&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/JimmyCushnie/SUCC?utm_source=pocket_mylist"&gt;&lt;strong&gt;SUCC&lt;/strong&gt;&lt;/a&gt;  - Sexy and Utilitarian Code Configuration.&lt;br&gt;
&lt;a href="https://github.com/JimmyCushnie/SUCC?utm_source=pocket_mylist"&gt;&lt;em&gt;Jimmy Cushnie&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/WooshiiDev/HierarchyDecorator?"&gt;&lt;strong&gt;Hierarchy Decorator&lt;/strong&gt;&lt;/a&gt;  - Lightweight Unity Extension for allowing Headers and GameObject info inside the Hierarchy Window.&lt;br&gt;
&lt;a href="https://github.com/WooshiiDev/HierarchyDecorator?"&gt;&lt;em&gt;WooshiiDev&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Seneral/UndoPro?"&gt;&lt;strong&gt;UndoPro&lt;/strong&gt;&lt;/a&gt;  - UndoPro is a command-based undo system integrated into Unity's default system. This allows devs to use actions for their undo/redo operations without forcing the user into a new undo-workflow!&lt;br&gt;
&lt;a href="https://github.com/Seneral/UndoPro?"&gt;&lt;em&gt;Seneral&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gasgiant/Markup-Attributes?"&gt;&lt;strong&gt;Markup Attributes&lt;/strong&gt;&lt;/a&gt;  - A Unity Editor extension for customizing inspector layout with attributes.&lt;br&gt;
&lt;a href="https://github.com/gasgiant/Markup-Attributes?"&gt;&lt;em&gt;gasgiant&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/vvrvvd/Unity-Spline-Editor?"&gt;&lt;strong&gt;Unity Spline Editor&lt;/strong&gt;&lt;/a&gt;  - Unity Spline Editor is an open-source tool for creating and managing cubic bezier curves in Unity Editor.&lt;br&gt;
&lt;a href="https://github.com/vvrvvd/Unity-Spline-Editor?"&gt;&lt;em&gt;vvrvvd&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/coder89/arfoundation-mock?"&gt;&lt;strong&gt;Unity.XR.Mock for ARFoundation 4.x&lt;/strong&gt;&lt;/a&gt;  - Unity Editor plugin that let's you mock AR environment for development &amp;amp; testing on your PC.&lt;br&gt;
&lt;a href="https://github.com/coder89/arfoundation-mock?"&gt;&lt;em&gt;coder89&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ryanslikesocool/Easings?"&gt;&lt;strong&gt;Unity-Easings&lt;/strong&gt;&lt;/a&gt;  - 41 easing methods to make transitions nicer in Unity.&lt;br&gt;
&lt;a href="https://github.com/ryanslikesocool/Easings?"&gt;&lt;em&gt;ryanslikesocool&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/NagaChiang/entity-tween?"&gt;&lt;strong&gt;Entity Tween&lt;/strong&gt;&lt;/a&gt;  - Entity compatible tween library for Unity ECS/DOTS and Project Tiny (DOTS Runtime).&lt;br&gt;
&lt;a href="https://github.com/NagaChiang/entity-tween?"&gt;&lt;em&gt;NagaChiang&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/quabug/EntitiesBT?utm_source=pocket_mylist"&gt;&lt;strong&gt;EntitiesBT&lt;/strong&gt;&lt;/a&gt;  - Behavior Tree for Unity ECS (DOTS) framework.&lt;br&gt;
&lt;a href="https://github.com/quabug/EntitiesBT?utm_source=pocket_mylist"&gt;&lt;em&gt;quabug&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/DreamersIncStudios/ECS-IAUS-sytstem"&gt;&lt;strong&gt;ECS-IAUS-sytstem&lt;/strong&gt;&lt;/a&gt;  - The utility system works by identifying options available to the AI and selecting the best option by scoring each option based on the circumstances. &lt;em&gt;[read the &lt;a href="https://dreamerincblog.wordpress.com/2021/01/24/devlog-15-the-one-about-the-dots-iaus-repo/"&gt;blog description&lt;/a&gt;]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://github.com/DreamersIncStudios/ECS-IAUS-sytstem"&gt;&lt;em&gt;DreamersIncStudios&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/FBast/ReflexityAI?utm_source=pocket_mylist"&gt;&lt;strong&gt;ReflexityAI&lt;/strong&gt;&lt;/a&gt;  - Provide a basic framework to build an Utility AI in Unity using the xNode editor of Siccity.&lt;br&gt;
&lt;a href="https://github.com/FBast/ReflexityAI?utm_source=pocket_mylist"&gt;&lt;em&gt;FBast&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/CatLib/Core?utm_source=pocket_mylist"&gt;&lt;strong&gt;CatLib Core&lt;/strong&gt;&lt;/a&gt;  - CatLib lightweight dependency injection container&lt;br&gt;
&lt;a href="https://github.com/CatLib/Core?utm_source=pocket_mylist"&gt;&lt;em&gt;CatLib&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gpvigano/AsImpL?"&gt;&lt;strong&gt;AsImpL (OBJ)&lt;/strong&gt;&lt;/a&gt;  - Asynchronous Importer and run-time Loader for Unity.&lt;br&gt;
&lt;a href="https://github.com/gpvigano/AsImpL?"&gt;&lt;em&gt;gpvigano&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/OndrejNepozitek/Edgar-Unity?"&gt;&lt;strong&gt;Edgar for Unity&lt;/strong&gt;&lt;/a&gt;  - This project is a Unity plugin for procedural generation of 2D dungeons (and platformers) and aims to give game designers a complete control over generated levels. It combines graph-based approach to procedural generation with handmade room templates to generate levels with a feeling of consistency.&lt;br&gt;
&lt;a href="https://github.com/OndrejNepozitek/Edgar-Unity?"&gt;&lt;em&gt;OndrejNepozitek&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/RadicalCSG/Chisel.Prototype?"&gt;&lt;strong&gt;Chisel.Prototype&lt;/strong&gt;&lt;/a&gt;  - Chisel is an extension for Unity that allows for rapid, iterative, non destructive level editing!&lt;br&gt;
&lt;a href="https://github.com/RadicalCSG/Chisel.Prototype?"&gt;&lt;em&gt;RadicalCSG&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cowtrix/voxul?"&gt;&lt;strong&gt;voxul&lt;/strong&gt;&lt;/a&gt;  - voxul is a voxel system and editor tool for Unity 3D. Use it to build voxel meshes, objects and levels.&lt;br&gt;
&lt;a href="https://github.com/cowtrix/voxul?"&gt;&lt;em&gt;cowtrix&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/artnas/Unity-Plane-Mesh-Splitter?"&gt;&lt;strong&gt;Unity Plane Mesh Splitter&lt;/strong&gt;&lt;/a&gt;  - A simple tool which lets you split any mesh into smaller submeshes. At first it was designed to work with imported Tiled2Unity terrains, but I rewrote it to work with everything you can throw at it.&lt;br&gt;
&lt;a href="https://github.com/artnas/Unity-Plane-Mesh-Splitter?"&gt;&lt;em&gt;artnas&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/needle-tools/compilation-visualizer?"&gt;&lt;strong&gt;Compilation Visualizer for Unity&lt;/strong&gt;&lt;/a&gt;  - Unity Tool showing a timeline of assembly compilation. This is especially helpful when trying to optimize compile times and dependencies between assemblies. Besides showing a graphical view of compilation, selecting an assembly shows both dependencies and dependents of that assembly.&lt;br&gt;
&lt;a href="https://github.com/needle-tools/compilation-visualizer?"&gt;&lt;em&gt;needle-tools&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/daemon3000/InputManager?utm_source=pocket_mylist"&gt;&lt;strong&gt;InputManager&lt;/strong&gt;&lt;/a&gt;  - InputManager is a custom input manager for Unity that allows you to rebind keys at runtime and abstract input devices for cross platform input.&lt;br&gt;
&lt;a href="https://github.com/daemon3000/InputManager?utm_source=pocket_mylist"&gt;&lt;em&gt;daemon3000&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SoftwareGuy/Ignorance?"&gt;&lt;strong&gt;Ignorance 1.4 Beta&lt;/strong&gt;&lt;/a&gt;  - Ignorance utilizes the power of ENet to provide a reliable UDP networking transport for Mirror Networking.&lt;br&gt;
&lt;a href="https://github.com/SoftwareGuy/Ignorance?"&gt;&lt;em&gt;SoftwareGuy&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/instance-id/ElementAnimationToolkit?"&gt;&lt;strong&gt;ElementAnimationToolkit&lt;/strong&gt;&lt;/a&gt;  - A collection of Unity UIElements animation extension methods, new animated elements, and examples.&lt;br&gt;
&lt;a href="https://github.com/instance-id/ElementAnimationToolkit?"&gt;&lt;em&gt;instance-id&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/alelievr/NodeGraphProcessor?"&gt;&lt;strong&gt;NodeGraphProcessor&lt;/strong&gt;&lt;/a&gt;  - Node graph editor framework focused on data processing using Unity UIElements, GraphView and C# 4.7.&lt;br&gt;
&lt;a href="https://github.com/alelievr/NodeGraphProcessor?"&gt;&lt;em&gt;alelievr&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mob-sakai/ParticleEffectForUGUI?"&gt;&lt;strong&gt;Particle Effect For UGUI (UI Particle)&lt;/strong&gt;&lt;/a&gt;  - Render particle effect in UnityUI(uGUI). Maskable, sortable, and no extra Camera/RenderTexture/Canvas.&lt;br&gt;
&lt;a href="https://github.com/mob-sakai/ParticleEffectForUGUI?"&gt;&lt;em&gt;mob-sakai&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/alelievr/HDRP-UI-Camera-Stacking?"&gt;&lt;strong&gt;HDRP UI Camera Stacking&lt;/strong&gt;&lt;/a&gt;  - The HDRP UI Camera Stacking package allows you to stack multiple camera rendering UI only at a fraction of the cost of a standard camera.&lt;br&gt;
&lt;a href="https://github.com/alelievr/HDRP-UI-Camera-Stacking?"&gt;&lt;em&gt;alelievr&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/FredericRP/Standard-Assets?"&gt;&lt;strong&gt;Standard-Assets&lt;/strong&gt;&lt;/a&gt;  - Bucket, event management, object pool, popup, screen transitions and tips helper for Unity.&lt;br&gt;
&lt;a href="https://github.com/FredericRP/Standard-Assets?"&gt;&lt;em&gt;FredericRP&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spotlight"&gt;
  &lt;/a&gt;
  Spotlight
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://store.steampowered.com/app/1252240/Aeon_Drive/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxyH6d4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/images/240f7acce420bd11f51179961ae595db.png" alt="Aeon Drive"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://store.steampowered.com/app/1252240/Aeon_Drive/"&gt;&lt;strong&gt;Aeon Drive&lt;/strong&gt;&lt;/a&gt;  - Rush through the cyberpunk landscapes of Neo Barcelona in Aeon Drive, an action-platformer with a speedrunning twist! Whether solo or in up to 4 player co-op, sprint and dash through many areas of the neon-infused city - and use your time and space-bending abilities to get ahead.&lt;/p&gt;

&lt;p&gt;[&lt;a href="https://store.steampowered.com/app/1252240/Aeon_Drive/"&gt;Play the demo&lt;/a&gt; on Steam, and follow the development on &lt;a href="https://twitter.com/AeonDrive"&gt;Twitter&lt;/a&gt; and &lt;a href="https://discord.com/invite/RfKxxFE"&gt;Discord&lt;/a&gt;]&lt;br&gt;
&lt;a href="https://store.steampowered.com/app/1252240/Aeon_Drive/"&gt;&lt;em&gt;2Awesome Studio&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You can subscribe to the free weekly newsletter on &lt;a href="https://gamedevdigest.com"&gt;GameDevDigest.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>unity</category>
      <category>csharp</category>
      <category>news</category>
    </item>
    <item>
      <title>Is there a programming language that you can call "the best"?</title>
      <author>Maddy</author>
      <pubDate>Fri, 06 Aug 2021 13:02:37 +0000</pubDate>
      <link>https://dev.to/maddy/is-there-a-programming-language-that-you-can-call-the-best-2e73</link>
      <guid>https://dev.to/maddy/is-there-a-programming-language-that-you-can-call-the-best-2e73</guid>
      <description>&lt;p&gt;Is there a programming language that you can call "the best"?&lt;/p&gt;

&lt;p&gt;When I was studying computer science at university, I had this thought several times. Now that I work as a full-time software engineer, I can say that the best programming language doesn't exist.😁 It's just a matter of personal preference, and it depends on what you are trying to build. &lt;/p&gt;

&lt;p&gt;Three criteria that I think can be useful when choosing a programming language to learn are:&lt;/p&gt;

&lt;p&gt;🎨 &lt;strong&gt;Your interests&lt;/strong&gt;: what do you like? Are you into mobile development? Then go with Kotlin/Java for Android, Swift for iOS. Data science? Python. Gaming? C++. Web development? JavaScript and PHP are great. The list goes on. &lt;/p&gt;

&lt;p&gt;📊 &lt;strong&gt;Market trends&lt;/strong&gt;: some languages are more popular than others, and if you're looking to program professionally, ideally, you might want to stick with the top 5. Also, just because a programming language is more trendy for a year, it doesn't mean that the others become obsolete all of a sudden. Every year StackOverflow publishes a developer &lt;a href="https://insights.stackoverflow.com/survey/2021#overview"&gt;survey&lt;/a&gt;. It gives a great insight into what developers are learning. &lt;/p&gt;

&lt;p&gt;💭 &lt;strong&gt;Complexity&lt;/strong&gt;: some languages take more effort than others to learn, are more verbose and strongly typed. Start with a relatively easy language and work your way up from there.&lt;/p&gt;

&lt;p&gt;🔎 &lt;strong&gt;Field&lt;/strong&gt;: I've noticed that some languages are more used in specific sectors than others. For example, in financial services Java is very popular, especially in large corporations. In healthcare, Python is predominant.&lt;/p&gt;

&lt;p&gt;In a commercial setting, a language is chosen based on the type of application to build (for example: is it a mobile or web application that we're trying to develop?), the complexity, the time available, scalability, etc. &lt;/p&gt;

&lt;p&gt;Many factors need to be taken into account when considering a suitable language for a project. But if you're starting, the three criteria listed earlier should guide you in the right direction (I hope!). &lt;/p&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>learning</category>
      <category>softwareengineering</category>
    </item>
    <item>
      <title>Export database snapshots manually to S3 &amp; export S3 content in Glue Data Catalog using Crawler for tables fetched in Athena</title>
      <author>GargeeBhatnagar</author>
      <pubDate>Fri, 06 Aug 2021 12:56:53 +0000</pubDate>
      <link>https://dev.to/aws-builders/export-database-snapshots-manually-to-s3-export-s3-content-in-glue-data-catalog-using-crawler-for-tables-fetched-in-athena-5ef6</link>
      <guid>https://dev.to/aws-builders/export-database-snapshots-manually-to-s3-export-s3-content-in-glue-data-catalog-using-crawler-for-tables-fetched-in-athena-5ef6</guid>
      <description>&lt;p&gt;“Challenges faced to find the solution of how to reduce the cost of exporting rds data to S3 without giving input as rds username and password and other details”. First and foremost I have checked the different methods of how I am able to export the rds data in S3. I got some solutions such as using Data Pipeline, Glue and doing tasks manually with database snapshot. In data pipeline, problem faced is of region as i have to do the task in mumbai region but data pipeline service is not available in mumbai region. Next I checked to do the task with AWS Glue but in Glue for exporting data to S3 i need to input rds username, password and other details in crawler. Next I have only 1 option: export the db snapshot manually to S3 and then i have calculated the cost which is charged as per GB basics. So I have chosen to do it manually.&lt;/p&gt;

&lt;p&gt;“Challenges faced to find the solution for running the crawler in Glue to get the data in Glue data catalog”. When I have exported the data to S3 manually I have not input any KMS key arn during the configuration process and as my RDS database is encrypted for security purposes. Due to which crawler configured for getting S3 data to Glue data catalog is not running properly and not adding any tables in catalog. So to resolve this problem, I have again done the process manually to export the db snapshot data to S3 using KMS key and then after configuration of crawler in Glue I have assigned the Glue role configured to KMS as a user.&lt;/p&gt;

&lt;p&gt;AWS Glue is a serverless data integration service that makes it easy to discover, prepare, and combine data for analytics, machine learning, and application development. AWS Glue provides all of the capabilities needed for data integration so that you can start analyzing your data and putting it to use in minutes instead of months. AWS Glue provides both visual and code-based interfaces to make data integration easier. Users can easily find and access data using the AWS Glue Data Catalog. To learn more, read the &lt;a href="https://docs.aws.amazon.com/glue/latest/dg/what-is-glue.html"&gt;AWS Glue&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;AWS Athena Amazon Athena is an interactive query service that makes it easy to analyze data in Amazon S3 using standard SQL. Athena is serverless, so there is no infrastructure to manage, and you pay only for the queries that you run. Athena is easy to use. Simply point to your data in Amazon S3, define the schema, and start querying using standard SQL. Most results are delivered within seconds. &lt;/p&gt;

&lt;p&gt;With Athena, there’s no need for complex ETL jobs to prepare your data for analysis. This makes it easy for anyone with SQL skills to quickly analyze large-scale datasets. Athena is out-of-the-box integrated with AWS Glue Data Catalog, allowing you to create a unified metadata repository across various services, crawl data sources to discover schemas and populate your Catalog with new and modified table and partition definitions, and maintain schema versioning. To learn more, read the &lt;a href="https://docs.aws.amazon.com/athena/latest/ug/what-is.html"&gt;AWS Athena&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In this post, you will get to know how to export database snapshots manually to S3 and export S3 content in Glue Data Catalog using crawler to get the tables fetched in Athena. Here I have taken a centos ec2 server and mysql rds database. And created a database snapshot which I need to export to S3 for getting S3 data in Glue by which I am able to run the queries in athena and store the queries output in S3 bucket from athena for ease of access by users.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;You’ll need an Amazon EC2 Server for this post. &lt;a href="https://aws.amazon.com/ec2/getting-started/"&gt;Getting started with amazon EC2&lt;/a&gt; provides instructions on how to launch an EC2 Server.&lt;/p&gt;

&lt;p&gt;You’ll also need an Amazon RDS Database. &lt;a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_GettingStarted.html"&gt;Getting started with RDS&lt;/a&gt; provides instructions on how to create a RDS. For this blog, I assume that I have an ec2 server and a rds database with a latest database snapshot which contains the current databases and tables of rds.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#architecture-overview"&gt;
  &lt;/a&gt;
  Architecture Overview
&lt;/h1&gt;

&lt;p&gt;Diagram 1&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---CDzWcqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhtcf2d84cmnr88dvh6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---CDzWcqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhtcf2d84cmnr88dvh6h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Diagram 2&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uMk6eYme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgq2k458bkcnknziindl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uMk6eYme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgq2k458bkcnknziindl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Diagram 3&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zP6uBuW4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r19kx32ekgbw6be3re3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zP6uBuW4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r19kx32ekgbw6be3re3h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The architectural diagrams show the overall deployment architecture with data flow, RDS DB Snapshot, S3, AWS Glue and AWS Athena.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#solution-overview"&gt;
  &lt;/a&gt;
  Solution overview
&lt;/h1&gt;

&lt;p&gt;The blog post consists of the following phases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Export of RDS db snapshot to S3.&lt;/li&gt;
&lt;li&gt;Create and run Crawler in AWS Glue to export S3 data in Glue Data Catalog.&lt;/li&gt;
&lt;li&gt;In Athena, run of queries and store of queries output in S3 bucket.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have a ec2 server and a rds database with latest db snapshot as below →&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b8eabAqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0xzwrdvzrbzql2yhcn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b8eabAqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0xzwrdvzrbzql2yhcn9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zvqTWRw7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sa42lyv4py8m49y6lbc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zvqTWRw7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sa42lyv4py8m49y6lbc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K7WuNfmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzoo8jnsbcurp5wtnybr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K7WuNfmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzoo8jnsbcurp5wtnybr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gps6ztYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48i24vhhtn0cdl3n6oqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gps6ztYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48i24vhhtn0cdl3n6oqu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1KW9SE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq2ns5nf26cmaiejpmcr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1KW9SE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq2ns5nf26cmaiejpmcr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UuzwUU0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r6vsji7altgz5rwovg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UuzwUU0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r6vsji7altgz5rwovg9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wSL5qTLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xanm83gxiyvcyq8wu4f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSL5qTLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xanm83gxiyvcyq8wu4f0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-1-export-of-rds-db-snapshot-to-s3"&gt;
  &lt;/a&gt;
  Phase 1: Export of RDS db snapshot to S3
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open the AWS RDS Console and goto snapshots option. Choose the snapshot and click on actions drop down and choose option export to amazon S3.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5HigMJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxh7ezi78ijl8lxajp66.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Give the export identifier name as test-demo-export-1.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxJDZcvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otuebi5bgk827mt21u3t.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;You can choose a partial option for export of data as any database or table.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T6hDtBUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scdw4qzjo20eg3p11110.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;I have chosen the option as ALL as I need to export full data to S3.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kyGr2c7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvhmhgszzwnf9q1eu8hj.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Created bucket named as test-demo-export with default settings. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fLnIr2Vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90dvjbycia3hf0lu5cpn.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzAA30FA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivy35in325ne34tsj6h3.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Selected S3 bucket “test-demo-export” and Created new IAM role named as test-demo-export in export db snapshot configurations. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ejM88_pT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eughdiu1827bz60pq0cn.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2ugRBED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsbo6oxrdlmj3biu1l7q.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yqmY9-xw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80dhbjcmkt0m7hgkqvra.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Created KMS key as “export-rds-snapshot-to-S3” in Key Management Service with default settings and copied the arn of key created to export of db snapshot configuration.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V222wz1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6h5ln2vtrtuxr6jdv01d.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dIG6Vwxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztixf0cwlr5tpz94l6pk.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9cHeclE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/seusoof9mvabwlr5dutm.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8dmv3bim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tmk6laxsrdr9hykk2dg.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--taKAHBEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frkycbym8dd4q0j6v5jj.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oVg4w0LO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxdx1v1gbfaxybszgatt.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Click on export to amazon S3 button and then the process gets started.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2DGtuM56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tj5ztbb3j2ysuzsvm7yd.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gz65BbzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9et2gxpaol3rmuxl5wyw.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AO8Jq3T9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ac0y3toqmjgssthp5cov.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;After completion of the export task to S3 bucket, I am able to see the databases and tables in the bucket named as test-demo-export. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76QX3GeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cd06gm7ub1w420u48sq8.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KhdOkFR0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfrysirdkffb833ixshu.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--au3VBHO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z67tb149t88a4k4p7jol.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#phase-2-create-and-run-crawler-in-aws-glue-to-export-s3-data-in-glue-data-catalog"&gt;
  &lt;/a&gt;
  Phase 2: Create and run Crawler in AWS Glue to export S3 data in Glue Data Catalog
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In AWS Glue Console, Goto crawler option and click on the add crawler button. Then give the crawler name as test-demo and click next. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NHxmf7lL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpdr6va3a28udx7eupoj.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Mc6H7EH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tu7g4rt3r3u8boc570uh.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;In Specify crawler source type, choose data stores option and crawl all folders option and then click next.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70gqdPbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guif61jmc6rr9ec1dhwx.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Choose S3 as a source data store from the drop down list. And choose the specified path in my account option and then give the path of s3 data location as s3://test-demo-export/test-demo-export-1/ and click on next.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OumU-UfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj2d6rnkh0ij5ph7kaif.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgA-ExLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1aiwhc41icscultxkml2.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KEZro2RT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dul5o96c20rlcya6o6d6.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Choose No in add another data store and click next.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BbM8ax64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb09cbm5onm3aq0wxuiq.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Create a new role as test-demo and click next.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BvDA3iUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlwe1r5o5pv68d8k0smp.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Choose a schedule for crawler as a Run on demand option as you need to run the crawler once and then click next.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YT50e1By--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj2fnpmgkzyam0sa6cel.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KkLiryBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mixbpbcobfylbysu04pi.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Click on add database and give name as test-demo and leave other option default and click on create button. As prefix added to tables, grouping behavior for s3 data and configuration options are optional so leave it default and click on next as do not need to add it. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WiuYKVX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cd3crj6yx3pcdlgzbu4m.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vc8_lQQy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyycundm5bj1fheqwctw.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Review the crawler information and click on the finish button.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--98CXBErD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u00n92qq5c0r7f37sym6.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3KhLMKZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpan2l5emngenry8znil.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Crawler is created and ready to run.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWz3zrHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lq9a305qqhh7qvkdbfmm.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Before running the crawler, goto customer managed keys and add a key user as glue services role created while configuration of crawler named as AWSGlueServiceRole-test-demo. Note that without this step crawler won't add tables in Data Catalog. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WhvKjtjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuw90pphbxo560fcmyko.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2P_iHLcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7knrjw2h23f1q407k6m8.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r8Paj_je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le6yhfw1zrizw2ydd0j8.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Choose the crawler and click on the run crawler option.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X6FXe8Ig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4goiya5m1smuv6mo2je.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zEeNp9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asrb0du5b5mszxjgcx1b.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Once the crawler starts and stops, again it will be in a ready state. And we can see the number of tables and logs in cloudwatch.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--panQ2AaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gqpjkoxb8kyhwode8cb.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--555S2vRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stots41z5re41dlwevbm.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Click on the crawler name and can see the configuration of crawler. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADHS7Mdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l93ynyl8fjv1ae9h0ak1.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Click on the tables option to see the number of tables added in the test-demo database.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BMLHikEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tik8cfgkqux3raql6qkr.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JywBwDJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3lvv1tzqg5fwwp0j3g8.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3UCZf9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gcybgjywpxmaf5we6nc.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#phase-3-in-athena-run-of-queries-and-store-of-queries-output-in-s3-bucket"&gt;
  &lt;/a&gt;
  Phase 3: In Athena, run of queries and store of queries output in S3 bucket
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Goto AWS Athena console, Select the database from drop down list and can see the tables of it.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQwt8-Z3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxf5fv6p164c6noso3u6.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LqmOou5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77jbjc91gae0na4z2wad.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Create the folder named as “athena-test-demo-output” in the same bucket to save the output of queries run on athena.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JOHHHEeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um0yqtqdjkzyzll8mlv0.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;In Athena console, goto settings option and give the query result location as path of output folder as s3://test-demo-export/athena-test-demo-output/ and then click on save option.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0v-Gvahq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4e7u62gfjf128q69ga7.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Choose any table and can preview it by clicking on the three dots option. And then click on the run query button to get the results of it.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQTt2adX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1kboddfotui8oxtfcg3.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hkW17IJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvv9rddmw8glserq1apj.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nixRj3RI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmhg7hoi7fxm1i7dyr3i.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Check the output folder to see the results of the run query. And can download the results from the bucket by choosing the file.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzaqnz_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6kofe0mrbh44tlwm9qw.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B7Qr5pLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmb1vtke1hbqtof30cnj.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iS3cT-XU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldstazyaa7ysz36bysjh.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;For creating the table manually without running the crawler, just goto create table option and then give the database name, path of s3 bucket, data format type, column name, column type and partition details and then click on create table button.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rl5uz9Se--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvk4sfcap1chso4zw6c5.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o4oBeEhY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y30i50ex18b863uci0s.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3vJD9uIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7stsc15y2l7b98ar8re7.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MP-p9t2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vltshu23dowhodyu7wki.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;You can view the history of the run query and can download the results.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--25t6g-lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucuhqe4osfftkp7go4qe.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#cleanup"&gt;
  &lt;/a&gt;
  Clean-up
&lt;/h1&gt;

&lt;p&gt;Delete the environment as: EC2, RDS, AWS Glue, AWS Athena, KMS, IAM, S3 and Cloudwatch log group.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h1&gt;

&lt;p&gt;I review the pricing and estimated cost of this example. &lt;/p&gt;

&lt;p&gt;For every db snapshot export to S3 depends on total storage size of data →&lt;br&gt;
Cost of per GB = $0.01&lt;br&gt;
For S3 storage →&lt;br&gt;
Cost of per GB = $0.025&lt;br&gt;
For AWS Glue Crawler depends on crawler run time →&lt;br&gt;
Cost of per Data Processing Unit-Hour = $0.44&lt;br&gt;
Your glue storage cost is $0, as the storage for the first million tables is free. Your first million glue requests are also free. You will be billed for one million requests above the free tier, which is $1.&lt;br&gt;
For AWS Athena →&lt;br&gt;
Cost of 1 TB = $5&lt;br&gt;
For Key Management Service → &lt;br&gt;
Cost of customer managed KMS key version = $1&lt;/p&gt;

&lt;p&gt;You can learn more by visiting the &lt;a href="https://aws.amazon.com/glue/pricing/"&gt;AWS Glue pricing&lt;/a&gt; and &lt;a href="https://aws.amazon.com/athena/pricing/"&gt;AWS Athena pricing&lt;/a&gt; service details page.&lt;/p&gt;

&lt;p&gt;In my case, costing of using AWS glue and AWS Athena service: &lt;br&gt;
For every db snapshot export to S3 depends on total storage size of data →&lt;br&gt;
Cost of 20 GB = $0.20&lt;br&gt;
For S3 storage →&lt;br&gt;
Cost of 2 GB = $0.05&lt;br&gt;
For AWS Glue Crawler depends on crawler run time →&lt;br&gt;
Cost of 0.074 DPU-Hour = $0.03&lt;br&gt;
For AWS Athena →&lt;br&gt;
Cost of 0.000060 Terabytes = $0.00&lt;br&gt;
For Key Management Service,&lt;br&gt;
Cost of 0.022 keys = $0.02 &lt;br&gt;
Total Cost = $(0.20+0.05+0.03+0.00+0.02) = $0.30&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;In this post, I had shown you how to export database snapshots manually to S3 and export S3 content in Glue Data Catalog using crawler to get the tables fetched in Athena.&lt;br&gt;
For more details on glue and athena service, Checkout Get started with AWS Glue and AWS Athena, open the &lt;a href="https://ap-south-1.console.aws.amazon.com/glue/home?region=ap-south-1#"&gt;AWS Glue console&lt;/a&gt; and &lt;a href="https://ap-south-1.console.aws.amazon.com/athena/home?region=ap-south-1#query"&gt;AWS Athena console&lt;/a&gt;. To learn more, read the &lt;a href="https://docs.aws.amazon.com/glue/?id=docs_gateway"&gt;AWS Glue documentation&lt;/a&gt; and &lt;a href="https://docs.aws.amazon.com/athena/?id=docs_gateway"&gt;AWS Athena documentation&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Connect with me: &lt;a href="https://www.linkedin.com/in/gargee-bhatnagar-6b7223114"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>awsglue</category>
      <category>awsathena</category>
      <category>security</category>
    </item>
    <item>
      <title>How I made $2000+ with affiliate marketing in 5 months as a 16 years old</title>
      <author>Pasca Vlad</author>
      <pubDate>Fri, 06 Aug 2021 12:52:38 +0000</pubDate>
      <link>https://dev.to/pascavld/how-i-made-2000-with-affiliate-marketing-in-5-months-as-a-16-years-old-2igj</link>
      <guid>https://dev.to/pascavld/how-i-made-2000-with-affiliate-marketing-in-5-months-as-a-16-years-old-2igj</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before you read this thread I want to clarify this:&lt;/p&gt;

&lt;p&gt;Affiliate marketing is not a get rich quick scheme and it's not a scam either&lt;/p&gt;

&lt;p&gt;Spamming links on Twitter won't work&lt;/p&gt;

&lt;p&gt;You need to focus on giving value to others through the products you're promoting&lt;/p&gt;

&lt;p&gt;Now, let's begin...&lt;/p&gt;

&lt;p&gt;I made my first affiliate sale on 8 March 2021 using Twitter&lt;/p&gt;

&lt;p&gt;At that time I had around 10k followers and I was following a Web Design course&lt;/p&gt;

&lt;p&gt;As you probably already know on Twitter people ask what courses you follow&lt;/p&gt;

&lt;p&gt;And that happened to me too so I thought "I could become an affiliate for this course because I already promote it a lot for free"&lt;/p&gt;

&lt;p&gt;So I did that and on 7 of March someone asked me about that course and I sent them the affiliate link&lt;/p&gt;

&lt;p&gt;Then on 8 March I received this email&lt;/p&gt;

&lt;p&gt;It was the first affiliate sale I ever made and my first income online at the same time so I tweeted this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/VladPasca5/status/1368953404374933508"&gt;https://twitter.com/VladPasca5/status/1368953404374933508&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see this tweet went viral and a lot of people asked me how I did it so I recommended them the course I used&lt;/p&gt;

&lt;p&gt;And because I was an affiliate for that course too I made another $60 in that day&lt;/p&gt;

&lt;p&gt;And then I realized that I could continue to do this when someone asked me about the courses I follow&lt;/p&gt;

&lt;p&gt;So that's what I did for the next 5 months and here I am now making $500/month from this&lt;/p&gt;

&lt;p&gt;Next, I want to talk a bit about my strategy&lt;/p&gt;

&lt;p&gt;So I only promote courses that I used and that are valuable for my audience&lt;/p&gt;

&lt;p&gt;Promoting something you didn't use yourself is the worst thing you could do&lt;/p&gt;

&lt;p&gt;But how do you promote that course?&lt;/p&gt;

&lt;p&gt;Here is the tricky part...&lt;/p&gt;

&lt;p&gt;You don't put the link in the first tweet and you don't make a post about that course either&lt;/p&gt;

&lt;p&gt;You need to post a tweet and promote the course under it in the second tweet&lt;/p&gt;

&lt;p&gt;If you use this strategy make sure that the course you're promoting is relevant to that tweet&lt;/p&gt;

&lt;p&gt;I also promote the same 2-3 course and this is what I recommend to everyone that wants to do this&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Because, usually, someone needs to see a product a couple of times before they buy it&lt;/p&gt;

&lt;p&gt;And if you promote a different course every day you won't convert that well&lt;/p&gt;

&lt;p&gt;Now, let's talk about you can do this too&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You need to create an audience&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How do you do this?&lt;/p&gt;

&lt;p&gt;By giving value for free&lt;/p&gt;

&lt;p&gt;Remember that you need to give before you can ask&lt;/p&gt;

&lt;p&gt;I recommend only consider monetization after you reach 10k followers&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You need to buy a course, use it and get results&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example get a web development course, learn from it and then promote it&lt;/p&gt;

&lt;p&gt;Tell others how it helped you and how it can help them too&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You need to see what works&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the beginning you'll promote different course but after you see which courses work the best for you audience stick with those&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Then you just need to keep growing and promoting&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember that if you want sales you need to promote every single day&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any question feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Kubecost vs. CAST AI: A perfect match for end-to-end cloud cost optimization</title>
      <author>CAST AI</author>
      <pubDate>Fri, 06 Aug 2021 12:52:27 +0000</pubDate>
      <link>https://dev.to/castai/kubecost-vs-cast-ai-a-perfect-match-for-end-to-end-cloud-cost-optimization-l60</link>
      <guid>https://dev.to/castai/kubecost-vs-cast-ai-a-perfect-match-for-end-to-end-cloud-cost-optimization-l60</guid>
      <description>&lt;p&gt;Scaling cloud resources is easy - so easy, in fact, that many teams end up losing control over their cloud spend. A missed bug or architecture oversight can easily snowball into a huge bill at the end of the month. &lt;/p&gt;

&lt;p&gt;That’s why teams need a cloud cost monitoring and optimization toolkit that provides detailed visibility, exhaustive reporting, and - in an ideal scenario - automated optimization capable of handling the fast-changing requirements of Kubernetes to generate some serious cost savings.&lt;/p&gt;

&lt;p&gt;Wondering whether you need something more than just cost reporting and analysis? Here’s a comparison of features delivered by two modern cloud-native solutions, Kubecost and CAST AI.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CAST AI - Analysis &amp;amp; Automation&lt;/th&gt;
&lt;th&gt;Kubecost - Analysis&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Created by industry veterans, CAST AI is a full-service cloud automation platform providing powerful automation features for optimizing Kubernetes workloads.  Companies across industries such as e-commerce and adtech are using CAST AI to save from 50% to even 90% on their cloud bills.&lt;/td&gt;
&lt;td&gt;Kubecost started as an open-source tool that provided developers with more visibility into their Kubernetes costs. Today, Kubecost is a robust cost reporting solution that teams can use to get insights into costs allocation, cost monitoring, and alerts - key tools for teams looking to gain visibility.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#kubecost-vs-cast-ai-quick-feature-comparison"&gt;
  &lt;/a&gt;
  Kubecost vs. CAST AI - quick feature comparison
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;CAST AI 🥇&lt;/th&gt;
&lt;th&gt;Kubecost&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Supported platforms&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Google Cloud Platform&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Microsoft Azure&lt;/td&gt;
&lt;td&gt;✅ (coming soon)&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cost optimization and automation&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Detailed insights on cluster cost optimization&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Recommendations for optimizing cloud costs&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Real-time alerting functionality&lt;/td&gt;
&lt;td&gt;✅ (coming soon)&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Horizontal pod autoscaling&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AI-driven instance selection&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-shape cluster construction&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Automated pod scaling parameters&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Automatic bin packing&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spot Instance automation&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Node autoscaling&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cluster scheduling&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cost allocation&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Detailed cost breakdown&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Allocation by organizational concepts&lt;/td&gt;
&lt;td&gt;✖&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cost view across multi-cloud&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Live customer support&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Full multi cloud optimization&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✖&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#detailed-feature-comparison-of-kubecost-and-cast-ai"&gt;
  &lt;/a&gt;
  Detailed feature comparison of Kubecost and CAST AI
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-installation-and-setup"&gt;
  &lt;/a&gt;
  1. Installation and setup
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CAST AI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To start saving on your cloud bill with CAST AI, you need to create an account and then either connect an existing Kubernetes cluster or create a new one inside the tool. Teams often choose to &lt;a href="https://docs.cast.ai/getting-started/external-cluster/overview/"&gt;connect their clusters&lt;/a&gt; in read-only mode to get a free detailed report of estimated monthly savings - and then take action by turning automated optimization on. It takes only 15 minutes to get the cost analysis and optimize costs automatically. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Supported platforms:&lt;/strong&gt; At the moment, CAST AI supports services from AWS and Google Cloud Platform, with Azure support coming in Q4 2021.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubecost&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To install and operate Kubecost, teams can use the Kubecost helm chart. This installation method brings you all the components for getting started, offering access to Kubecost features and an opportunity to scale to large clusters. Teams can also enjoy a lot of flexibility for configuring Kubecost and its dependencies. Kubecost offers three other installation options, but they require effort and come with less flexibility. &lt;/p&gt;

&lt;p&gt;Supported platforms: Currently, Kubecost supports cloud services from AWS, Google Cloud Platform, and Microsoft Azure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-cost-allocation"&gt;
  &lt;/a&gt;
  2. Cost allocation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#detailed-cost-breakdown"&gt;
  &lt;/a&gt;
  Detailed cost breakdown
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;CAST AI&lt;/strong&gt; offers a cost breakdown and forecasting feature at the level of projects, clusters, namespaces, and deployments. You can analyze costs down to individual microservices and generate a detailed forecast of cluster costs. Moreover, CAST AI delivers insights using universal metrics for any cloud service provider from Grafana and Kibana.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubecost&lt;/strong&gt; provides flexible and customizable cost breakdown features as well. You can divide costs by namespace, deployment, service, and more indicators across all the three major cloud service providers. Like in CAST AI, this comprehensive resource allocation points the way to generating more accurate showbacks and chargebacks, streamlining the ongoing cost monitoring.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#allocation-by-organizational-concepts"&gt;
  &lt;/a&gt;
  Allocation by organizational concepts
&lt;/h4&gt;

&lt;p&gt;Focusing on automated optimization, &lt;strong&gt;CAST AI&lt;/strong&gt; offers cost allocation per cluster and per node.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubecost&lt;/strong&gt; users can allocate costs to concepts such as teams, individual applications, products, projects, departments, or environments.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cost-view-across-multi-cloud"&gt;
  &lt;/a&gt;
  Cost view across multi cloud
&lt;/h4&gt;

&lt;p&gt;Many companies are using the services of more than one cloud provider. Allocating costs across clouds is tricky, but &lt;strong&gt;CAST AI&lt;/strong&gt; rises to this challenge. It supports teams with a unique &lt;strong&gt;full multi cloud functionality and visibility&lt;/strong&gt;, providing universal metrics for any cloud provider.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubecost&lt;/strong&gt; displays the costs across multiple clusters and multi cloud environments in a single view or through a single API endpoint. However, Kubecost doesn't help you manage multi cloud infrastructure - while CAST AI offers a full multi cloud solution with cost optimization.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-cost-monitoring"&gt;
  &lt;/a&gt;
  3. Cost monitoring
&lt;/h3&gt;

&lt;p&gt;Cost allocation is the first step to understanding where your cloud bill comes from. Next, you need to keep a close eye on how your resource use translates to costs in real time.&lt;/p&gt;

&lt;p&gt;​&lt;strong&gt;CAST AI&lt;/strong&gt; displays the biggest cost driver - compute costs - in the Savings estimator and shows potential savings associated with deployments on Spot Instances. It has a planned feature in the pipeline for &lt;strong&gt;ongoing &lt;a href="https://cast.ai/blog/cloud-cost-reporting-alone-isnt-going-to-cut-your-aws-bill/"&gt;cloud cost reporting&lt;/a&gt;&lt;/strong&gt; that will include other dimensions such as control plane, network, egress, storage, and others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubecost&lt;/strong&gt; allows teams can link &lt;strong&gt;real-time in-cluster costs&lt;/strong&gt; (CPU, memory, storage, network, etc.) with &lt;strong&gt;out-of-cluster expenses&lt;/strong&gt; from the cloud services across AWS, GCP, and Azure - for example, tagged RDS instances, BigQuery warehouses, or S3 buckets. Users get context-aware, cluster-level reports to reach an optimal balance between cost and performance in matching their service requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-cost-optimization-and-automation"&gt;
  &lt;/a&gt;
  4. Cost optimization and automation
&lt;/h3&gt;

&lt;p&gt;Once you allocate costs and monitor them on a regular basis, it’s time to take action and start optimizing your spend. Kubecost and CAST AI support teams on this mission differently.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cast-ai-fully-automated-cost-optimization-that-beats-savings-plans"&gt;
  &lt;/a&gt;
  CAST AI: Fully automated cost optimization that beats savings plans
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Horizontal pod autoscaling&lt;/strong&gt; - this feature uses business metrics to come up with the number of required pod instances. It scales the replica count of your pods up and down - and removes pods if there’s no work to be done.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AI-driven instance selection&lt;/strong&gt; - if your cluster needs extra nodes, CAST AI chooses the best instance types that meet your requirements but still help to save up. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multi-shape cluster construction&lt;/strong&gt; - CAST AI delivers an optimized mix of different instance types that are adapted to your application’s needs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automated pod scaling parameters&lt;/strong&gt; - to help teams avoid overprovisioning, CAST AI  sets these parameters automatically and maximizes cost savings.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automatic bin packing&lt;/strong&gt; - since Kubernetes distributes applications within a cluster evenly, it doesn’t really help teams reduce their cloud spend. CAST AI solves this problem via bin packing for maximum savings.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Spot Instance automation&lt;/strong&gt; - Spot Instances can bring dramatic savings of up to 90% off the On-Demand pricing. You don’t need to worry about a provider pulling the plug on your instance - their replacement is fully automated.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Node autoscaling&lt;/strong&gt; - this feature makes sure that your nodes match your requirements at all times, scaling nodes up and down automatically.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cluster scheduling&lt;/strong&gt; - automatically pause and resume clusters to avoid paying for resources your teams aren’t using.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Savings: By turning CAST AI automated optimization on, you can save from 50 to 90% on your cloud spend.&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#kubecost-clusterlevel-insights-and-recommendations-for-engineers-to-implement"&gt;
  &lt;/a&gt;
  Kubecost: Cluster-level insights and recommendations for engineers to implement
&lt;/h4&gt;

&lt;p&gt;Kubecost provides detailed reports and &lt;strong&gt;real-time alerting functionality.&lt;/strong&gt; Delivered via Slack or email, these alerts notify teams about budget overruns, anomalous spend patterns, and Kubernetes tenants that fall below the set efficiency levels. Users can set budgets for configurable aggregation levels - for example, team or application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Savings: Kubecost generates insights DevOps engineers can use to save 30-50% or more.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-security"&gt;
  &lt;/a&gt;
  5. Security
&lt;/h3&gt;

&lt;p&gt;Since both Kubecost and CAST AI work with your cloud infrastructure, their security is paramount.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST AI&lt;/strong&gt; offers a bunch of security features such as encryption at rest/in transit, secrets management, network security, logging, visibility, and more. Moreover, it provides automatic patching and upgrades to VMs and Kubernetes, so you’re always kept up to date and eliminate the chance of errors in your clusters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubecost&lt;/strong&gt; doesn’t expose private data anywhere and since users deploy Kubecost in their infrastructure, there’s no need to egress any data to a remote service. You retain and control access to sensitive cloud spend data at all times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-pricing"&gt;
  &lt;/a&gt;
  6. Pricing
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CAST AI&lt;/strong&gt; comes with a free Cost Savings report users can run anytime they want to check whether they could save up on their infrastructure. The report generates actionable recommendations. And if you want to add automated optimization into the mix, you can choose between two plans: Growth and Enterprise. In all cases, CAST AI offers &lt;strong&gt;guaranteed savings of 50%.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All &lt;strong&gt;Kubecost&lt;/strong&gt; plans are free of charge for the first 30 days. Kubecost also offers a free plan where you can monitor and optimize one cluster. To make the most of your paid plan, you’ll need to dedicate time to implement the recommendations provided by Kubecost. This will incur extra charges and doesn’t automatically guarantee savings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-when-to-choose-kubecost-vs-cast-ai"&gt;
  &lt;/a&gt;
  Summary: When to choose Kubecost vs. CAST AI
&lt;/h3&gt;

&lt;p&gt;Both Kubecost and CAST AT are great picks offer lots of value to Kubernetes teams looking to optimize their cloud bills and streamline processes related to cost monitoring, allocation, and reporting. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But if you’d like more than reporting, the automated optimization features of CAST AI are at the top among cloud cost optimization platforms.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BTW. You can use KubeCost together with CAST AI.&lt;/strong&gt; Bringing Kubecost and CAST AI together will give you an end-to-end solution that will keep your cloud costs in check and generate some pretty impressive savings.    &lt;/p&gt;

</description>
      <category>cloudnative</category>
      <category>aws</category>
      <category>googlecloud</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Async work is the future for all developers!</title>
      <author>Ankur Tyagi</author>
      <pubDate>Fri, 06 Aug 2021 12:36:02 +0000</pubDate>
      <link>https://dev.to/tyaga001/async-work-is-the-future-for-all-developers-14d3</link>
      <guid>https://dev.to/tyaga001/async-work-is-the-future-for-all-developers-14d3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#async-work-is-the-future-for-all-developers"&gt;
  &lt;/a&gt;
  Async work is the future for all developers!
&lt;/h1&gt;

&lt;p&gt;I’m sure some of you have announcements from your companies to reopen offices—and many company employees not reacting well to the announcements, because it's not easy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because async work is the work that’s most compatible with the life of a developer as it's life-first work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;So, why are some top leaders pushing back, ordering employees back to the office?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because they don’t realize is that the pre-Covid workplace no longer exists. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because leaders haven’t been listening closely enough to their people.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Technology allows us to work from wherever we want.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can log on to computers from a home office or coffee shop anywhere in the world, as long as you have internet.&lt;/p&gt;

&lt;p&gt;Although remote work offers advantages, few still argue that nothing can replace working together face two face.&lt;/p&gt;

&lt;p&gt;As many businesses utilizing a virtual workforce in some capacity, the opportunities for new graduates to obtain a remote job are becoming increasingly common.&lt;/p&gt;

&lt;p&gt;And current workforce also wants the freedom to work remotely, the freedom to work on their own schedules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If this doesn’t sound like a reason to listen to employees, I don’t know what is.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The time to listen to and involve employees in shaping the future of work is now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I believe that the future of work is remote.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-are-we-seeing-such-a-rise-in-remote-work"&gt;
  &lt;/a&gt;
  Why are we seeing such a rise in remote work?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Technology makes remote work possible&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better communication technology is obviously one of the main drivers of the rise of remote work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remote work is more than just a future goal.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#few-of-the-popular-tools-that-remote-companies-use"&gt;
  &lt;/a&gt;
  Few of the popular tools that remote companies use:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Google Docs/ Office Online&lt;/li&gt;
&lt;li&gt;Microsoft Teams/Slack/Discord/Zoom/Meet&lt;/li&gt;
&lt;li&gt;Dropbox&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;World Time Buddy&lt;/li&gt;
&lt;li&gt;Trello/Nifty/Freshconnect&lt;/li&gt;
&lt;li&gt;Mailbird/Outlook/Zoho&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Remote teams are often happier, healthier, &amp;amp; more productive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because of the need for deliberate communication, these teams are often more in sync than those that work in a traditional office.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remote has become a competitive advantage.&lt;/li&gt;
&lt;li&gt;Remote work is no longer an alternative.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the biggest reasons why remote work has become so attractive is because the high costs of living in tech hubs result in long commutes, which results in diminished work-life balance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When a team works asynchronously, no assumptions are made about the team's availability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You know your teammates work in timezone X for Y hours per day, but no one is expected to be at their desk between 9 am and 5 pm.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You workout when it most fits you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You wake up at an unusual time, start early, and take the afternoon off.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, what new skills you should focus on to participate in virtual teams? &lt;/p&gt;

&lt;p&gt;Surprisingly, my answer does not relate to technology.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication&lt;/li&gt;
&lt;li&gt;Trustworthiness&lt;/li&gt;
&lt;li&gt;Discipline&lt;/li&gt;
&lt;li&gt;Initiative&lt;/li&gt;
&lt;li&gt;Flexibility&lt;/li&gt;
&lt;li&gt;Self-Direction&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You need to be involved in the virtual workforce.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;"Don't miss out" Follow your mentor  on Twitter 👉 &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;TheAnkurTyagi&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like this you might be you are interested in my eBook as well.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have written a book for developer growth &amp;amp; shared my 11+ years of experience.&lt;/p&gt;

&lt;p&gt;Grab the book now... &lt;a href="https://theankurtyagi.gumroad.com/l/nextgendev/"&gt;ThePrimeGuide&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtPEzgRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622969340878/j1oDA44p8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtPEzgRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622969340878/j1oDA44p8.png" alt="book.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you would like to discuss your career growth issues in detail with me 1-1, you can hire me on HireTheAuthor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hiretheauthor.com/theankurtyagi"&gt;Book 1-1 Call or Chat Subscription &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can buy me a beer if you feel generous. Happy coding!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ankurtyagi"&gt;BUY Me a Beer.&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>career</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
