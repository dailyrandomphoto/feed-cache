<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 5 Distributed System Design Patterns</title>
      <author>Ryan Thelin</author>
      <pubDate>Wed, 02 Jun 2021 22:23:04 +0000</pubDate>
      <link>https://dev.to/educative/top-5-distributed-system-design-patterns-4d21</link>
      <guid>https://dev.to/educative/top-5-distributed-system-design-patterns-4d21</guid>
      <description>&lt;p&gt;Distributed applications are a staple of the modern software development industry. They're pivotal to cloud storage services and allow web applications of massive scale to stay reactive. As programmers build these systems, they need fundamental building blocks they can use as a starting point and to communicate in a shared vocabulary.&lt;/p&gt;

&lt;p&gt;This is where distributed system design patterns become invaluable. While sometimes overused, design patterns are a key skill recruiters are looking for and are essential to stand out in advanced system design interviews.&lt;/p&gt;

&lt;p&gt;Today, we'll explore 5 of the top distributed system design patterns to help you learn their advantages, disadvantages, and when to use them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s what we’ll cover today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what"&gt;What is a distributed system design pattern?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cqrs"&gt;1. Command and Query Responsibility Segregation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2pc"&gt;2. Two-Phase Commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#saga"&gt;3. Saga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#load-balance"&gt;4. Replicated Load-Balanced Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sharded"&gt;5. Sharded Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next"&gt;What to learn next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h4&gt;&lt;b&gt; Ace advanced system design questions with ease &lt;/b&gt;&lt;/h4&gt;
 

&lt;p&gt;Practice top distributed systems questions and design patterns to use in your next system design interview.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/courses/grokking-adv-system-design-intvw"&gt;Grokking the Advanced System Design Interview&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-distributed-system-design-pattern"&gt;
  &lt;/a&gt;
  What is a distributed system design pattern?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/blog/the-7-most-important-software-design-patterns"&gt;Design patterns&lt;/a&gt; are tried and tested ways of building systems that each fit a particular use case. They're not implementations but rather are abstract ways of structuring a system. Most design patterns have been developed and updated over years by many different developers, meaning they're often very efficient starting points. &lt;/p&gt;

&lt;p&gt;Design patterns are building blocks that allow programmers to pull from existing knowledge rather than starting from scratch with every system. They also create a set of standard models for system design that help other developers see how their projects can interface with a given system.&lt;/p&gt;

&lt;p&gt;Creational design patterns provide a baseline when building new objects. Structural patterns define the overall structure of a solution. Behavioral patterns describe objects and how they communicate with each other.&lt;/p&gt;

&lt;p&gt;Distributed system design patterns are design patterns used when developing &lt;a href="https://www.educative.io/blog/distributed-systems-considerations-tradeoffs"&gt;distributed systems&lt;/a&gt;, which are essentially collections of computers and data centers that act as one computer for the end-user. These distributed design patterns outline a software architecture for how different nodes communicate with each other, which nodes handle each task, and the process flow for different tasks.&lt;/p&gt;

&lt;p&gt;These patterns are widely used when designing the distributed system architecture of large-scale &lt;a href="https://www.educative.io/blog/beginners-guide-cloud-computation"&gt;cloud computing&lt;/a&gt; and scalable &lt;a href="https://www.educative.io/blog/microservices-architecture-tutorial-all-you-need-to-get-started"&gt;microservice software systems&lt;/a&gt;.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#types-of-distributed-design-patterns"&gt;
  &lt;/a&gt;
  Types of distributed design patterns
&lt;/h3&gt;

&lt;p&gt;Most distributed design patterns fall into one of three categories based on the functionality they work with.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Object communication&lt;/strong&gt;: Describes the messaging protocols and permissions for different components of the system to communicate. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security&lt;/strong&gt;: Handles confidentiality, integrity, and availability concerns to ensure the system is secure from unauthorized access.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Event-driven&lt;/strong&gt;: Patterns that describe the production, detection, consumption, and response to system events.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-command-and-query-responsibility-segregation-cqrs"&gt;
  &lt;/a&gt;
  1. Command and Query Responsibility Segregation (CQRS)
&lt;/h2&gt;

&lt;p&gt;The CQRS pattern focuses on separating the read and write operations of a distributed system to increase scalability and security. This model uses commands to write data to persistent storage and queries to locate and fetch the data.&lt;/p&gt;

&lt;p&gt;These are handled by a command center, which receives requests from users. The command center then fetches the data and makes any necessary modifications, saves the data, and notifies the read service. The read service then updates the read model to show the change to the user. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduces system complexity by delegating tasks&lt;/li&gt;
&lt;li&gt;Enforces a clear separation between business logic and validation&lt;/li&gt;
&lt;li&gt;Helps categorize processes by their job&lt;/li&gt;
&lt;li&gt;Reduces the number of unexpected changes to shared data&lt;/li&gt;
&lt;li&gt;Reduces the number of entities that have modifying access to data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requires constant back-and-forth communication between command a read-models&lt;/li&gt;
&lt;li&gt;Can cause increased latency when sending high throughput queries&lt;/li&gt;
&lt;li&gt;No means to communicate between service processes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Use Case&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CQRS is best for data-intensive applications like SQL or noSQL database management systems. It's also helpful for data-heavy microservice architectures. It's great for handling stateful applications because the writer/reader distinction helps with immutable states.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-twophase-commit-2pc"&gt;
  &lt;/a&gt;
  2. Two-Phase Commit (2PC)
&lt;/h2&gt;

&lt;p&gt;2PC is similar to CQRS in its transactional approach and reliance on a central command, but partitions are processed by their type and what stage of completion they're on. The two phases are the &lt;strong&gt;Prepare&lt;/strong&gt; phase, in which the central control tells the services to prepare the data, and the &lt;strong&gt;Commit&lt;/strong&gt; phase, which signals the service to send the prepared data.&lt;/p&gt;

&lt;p&gt;All services in a 2PC system are locked by default, meaning they cannot send data. While locked, services complete the Prepare stage so they're ready to send once unlocked. The coordinator unlocks services one-by-one and requests its data. If the service is not ready to submit its data, the coordinator moves onto another service. Once all prepared data has been sent, all services unlock to await new tasks from the coordinator.&lt;/p&gt;

&lt;p&gt;2PC essentially ensures that only one service can operate at a time, which makes the process more resistant and consistent than CQRS. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consistent and resistant to errors due to lack of concurrent requests&lt;/li&gt;
&lt;li&gt;Scalable, can handle big data pools as easily as it can handle data from a single machine&lt;/li&gt;
&lt;li&gt;Allows for isolation and data sharing at the same time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not fault-tolerant, prone to bottlenecks and blocking due to its synchronous nature&lt;/li&gt;
&lt;li&gt;Requires more resources than other design patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Use Case&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2PC is best for distributed systems that deal with high-stakes transaction operations that favor accuracy over resource efficiency. It is resistant to error and easy to track mistakes when they occur, even at scale.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#keep-learning-about-distributed-systems" class="anchor"&gt;
  &lt;/a&gt;
  Keep learning about distributed systems.
&lt;/h4&gt;

&lt;p&gt;Knowledge of distributed systems is a top priority for modern recruiters. Prepare for your next system design interview with hands-on practice and insider tips. Educative's text-based courses let you get the experience you need to land your next job on the first try.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/courses/grokking-adv-system-design-intvw"&gt;Grokking the Advanced System Design Interview&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-saga"&gt;
  &lt;/a&gt;
  3. Saga
&lt;/h2&gt;

&lt;p&gt;Saga is an &lt;a href="https://www.educative.io/blog/javascript-promises-tutorial"&gt;asynchronous&lt;/a&gt; pattern that does not use a central controller and instead communicates entirely between services. This overcomes some of the disadvantages of the previously covered synchronous patterns. &lt;/p&gt;

&lt;p&gt;Saga uses Event Bus to allow services to communicate with each other in a microservice system. The bus sends and receives requests between services and each participating service creates a local transaction. The participating services then each emit an event for other services to receive. Other services all listen for events. The first service to receive the event will perform the required action. If that service fails to complete the action, it's sent to other services.&lt;/p&gt;

&lt;p&gt;This structure is similar to the 2PC design in that services are cycled if one cannot complete a task. However, Saga removes the central control element to better manage the flow and reduce the number of back-and-forth communication required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Individual services can handle much longer transactions&lt;/li&gt;
&lt;li&gt;Great for the distributed system due to decentralization&lt;/li&gt;
&lt;li&gt;Reduces bottlenecks thanks to peer-to-peer communication between services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Asynchronous autonomy makes it difficult to track which services are doing individual tasks&lt;/li&gt;
&lt;li&gt;Difficult to debug due to complex orchestration&lt;/li&gt;
&lt;li&gt;Less service isolation than previous patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Use Case&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Saga's decentralized approach is great for scalable serverless functions that handle many parallel requests at once. AWS uses Saga-based designs in many functions like step and lambda functions.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-replicated-loadbalanced-services-rlbs"&gt;
  &lt;/a&gt;
  4. Replicated Load-Balanced Services (RLBS)
&lt;/h2&gt;

&lt;p&gt;The RLBS pattern is the simplest and most commonly used design pattern. At the most basic level, it consists of multiple identical services that all report to a central load balancer. Each service is capable of handling tasks and can replicate if they fail. The load balancer receives requests from the end-user and distributes them to the services either using a round-robin fashion or sometimes a more complex routing algorithm. &lt;/p&gt;

&lt;p&gt;The duplicate services ensures the application maintains a high availability for user requests and can redistribute work if one instance of the service should fail.&lt;/p&gt;

&lt;p&gt;RLBS is often used with Azure Kubernetes, which is an open-source container orchestration technology made by Microsoft that offers automatic service scaling based on workflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consistent performance from the view of the end-user&lt;/li&gt;
&lt;li&gt;Can quickly recover from failed services&lt;/li&gt;
&lt;li&gt;Highly scalable with more services&lt;/li&gt;
&lt;li&gt;Excellent for concurrency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inconsistent performance based on load balancer algorithm&lt;/li&gt;
&lt;li&gt;Resource intensive to manage services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Use Case&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RLBS is great for front-facing systems that have inconsistent workloads throughout the day but must maintain low latency, such as entertainment web apps like Netflix or Amazon Prime.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-sharded-services"&gt;
  &lt;/a&gt;
  5. Sharded Services
&lt;/h2&gt;

&lt;p&gt;An alternative to replica-based designs is to create a selection of services that each only completes a certain kind of request. This is called "sharding" because you split the request flow into multiple unequal sections. For example, you may have one shard service that accepts all caching requests and another that only handles high-priority requests. The load balancer evaluates each request when it comes in and distributes it to the appropriate shard for completion.&lt;/p&gt;

&lt;p&gt;Sharded services are normally used for building stateful services because the size of the state is often too large for a single stateless container. Sharding lets you scale the individual shard to meet the size of the state.&lt;/p&gt;

&lt;p&gt;Sharded services also allow you to handle high-priority requests faster. Shards dedicated to high-priority requests are always available to handle such requests the moment they come in rather than being placed in the queue. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to scale shards for common requests&lt;/li&gt;
&lt;li&gt;Easy to prioritize requests&lt;/li&gt;
&lt;li&gt;Simple to debug due to natural sorting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can be resource-intensive to maintain many shards&lt;/li&gt;
&lt;li&gt;Leads to loss in performance if shards are used disproportionately&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Use Case&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sharded services are best when your system receives a predictable imbalance in request types but some requests have priority. &lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-learn-next"&gt;
  &lt;/a&gt;
  What to learn next
&lt;/h2&gt;

&lt;p&gt;Distributed system design patterns are an essential part of any successful back-end system. However, these are just a few of the patterns used by professional software engineers. &lt;/p&gt;

&lt;p&gt;Some patterns for you to learn next are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sidecar Pattern&lt;/li&gt;
&lt;li&gt;Write-ahead Log&lt;/li&gt;
&lt;li&gt;Split-Brain Pattern&lt;/li&gt;
&lt;li&gt;Hinted Handoff&lt;/li&gt;
&lt;li&gt;Read Repair&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To help you master these advanced system design patterns, Educative has created the course &lt;a href="https://www.educative.io/courses/grokking-adv-system-design-intvw"&gt;&lt;strong&gt;Grokking the Advanced System Design Interview&lt;/strong&gt;&lt;/a&gt;. This course walks you through the top advanced SDI questions with in-depth explanations and hands-on practice. You'll learn about all the fundamental design patterns an advanced systems engineer needs. By the end, you'll have real-world experience with all the design patterns tested most by top industry recruiters.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#continue-learning-about-distributed-systems"&gt;
  &lt;/a&gt;
  Continue learning about distributed systems
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/distributed-systems-considerations-tradeoffs"&gt;What are Distributed Systems? A quick introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/scaling-in-python"&gt;An Introduction to Scaling Distributed Python Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/microservices-architecture-tutorial-all-you-need-to-get-started"&gt;Microservices Architecture Tutorial: all you need to get started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>distributedsystems</category>
      <category>systems</category>
      <category>design</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React Hooks (useContext, useEffect, useState, useRef) Summarized Like Crazy (Short &amp; Concise Article).</title>
      <author>Mohmed Ishak</author>
      <pubDate>Wed, 02 Jun 2021 22:15:38 +0000</pubDate>
      <link>https://dev.to/ishakmohmed/react-hooks-usecontext-useeffect-usestate-useref-summarized-like-crazy-short-concise-article-254k</link>
      <guid>https://dev.to/ishakmohmed/react-hooks-usecontext-useeffect-usestate-useref-summarized-like-crazy-short-concise-article-254k</guid>
      <description>&lt;p&gt;Hey React engineers! In this article, I'll explain the 4 most important hooks you need to know in React. Don't worry, I'll not write a long essay and bore you. If you love simplistic articles that get straight to the point, this is the article you need to understand these hooks. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-usestate"&gt;
  &lt;/a&gt;
  [1] useState
&lt;/h3&gt;

&lt;p&gt;The simplest of the 4 hooks I'm going to explain in this article. useState allows you to have a state variable in functional component. If you're confused, it's just a normal variable which can make a component re-render when the value of the variable is changed. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsVisible&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;m visible&amp;lt;/h1&amp;gt;}&amp;lt;/&amp;gt;;
}

export default demo;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explanation: use useState in functional component. The argument (initial value) can be anything, such as numbers, boolean values, etc. In this case, true (boolean). Doing this gives us two things in an array, the first is the actual variable itself and then a function to update the value of that variable. In this case, we're destructuring the two values right away which is the convention. Now, it's just a normal variable. To set its value use the dedicated function that we destructured earlier like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setIsVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. The only special thing to note is that state variables allow you to re-render components upon change of data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-useeffect"&gt;
  &lt;/a&gt;
  [2] useEffect
&lt;/h3&gt;

&lt;p&gt;Used in one of the following two cases. One is to trigger something when the function it is in is rendered. Another is to trigger something when a specific data it is assigned to keep an eye on is changed. &lt;br&gt;
Case 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Like my post!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please take note that the second argument is array of dependencies. In this case useEffect is not keeping an eye on any data, thus it will not get executed (except for the first time this component is rendered). Therefore, we'll only see "Like my post!" in console for the first time.&lt;/p&gt;

&lt;p&gt;Case 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Like my post!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, useEffect is keeping an eye on variable called data. Therefore, if you change this data a million times, you'll see "Like my post!" in console a million times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-usecontext"&gt;
  &lt;/a&gt;
  [3] useContext
&lt;/h3&gt;

&lt;p&gt;What this hook means is that you can send a data from a component to all child components. Now, all child components are ELIGIBLE to get that data and if they want to, the child components may choose to consume that data using useContext. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;whateverContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;whateverContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;whateverValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ChildComponent1&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ChildComponent2&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ChildComponent3&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/whateverContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, after creating the context, the parent component wraps the child component (make sure to append .Provider to provide data to child component) and passed whateverValue as the value. At this point, all child components are ELIGIBLE to get the data. Let's assume ChildComponent3 wants to consume the data. Here's how it would do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;whateverValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;whateverContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. Basically, useContext is an elegant solution instead of prop drilling. Please take note that useContext is NOT a replacement to Redux. The reason will be explained in upcoming post. However, be assured that you can build pretty much any application easily by using useContext.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-useref"&gt;
  &lt;/a&gt;
  [4] useRef
&lt;/h3&gt;

&lt;p&gt;Everyone talks about it, no one really uses it. First, let's look at the problem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ScrollView&lt;/span&gt; &lt;span class="nx"&gt;onContentSizeChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ScrollView&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, for whatever reason, we've got a component named ScrollView with incomplete onContentSizeChange() attribute. The challenge is,&lt;br&gt;
inside onContentSizeChange(), we need to reference this ScrollView and invoke a function called scrollToEnd(). How can this component refer itself? I guess useRef would help. Here's the solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;abc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scrollView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ScrollView&lt;/span&gt;
        &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;scrollView&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;horizontal&lt;/span&gt;
        &lt;span class="nx"&gt;onContentSizeChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;scrollView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollToEnd&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See, first useRef was called and the output was given a value called scrollView. Then, ScrollView component is connected with the scrollView reference from useRef. Finally, now that we've got a reference to this component and connected it, we can call the function we wanted to inside onContentSizeChange, and that is scrollView.current.scrollToEnd(), where current references the current ScrollView component.&lt;/p&gt;

&lt;p&gt;That's it. If you find this informative, please give this article a like as I've spent an hour writing it (had to review my notes).&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Keep Configuration Secrets out of a Django Project</title>
      <author>TinoMuchenje</author>
      <pubDate>Wed, 02 Jun 2021 21:58:55 +0000</pubDate>
      <link>https://dev.to/tino_muc/how-to-keep-configuration-secrets-out-of-a-django-project-k07</link>
      <guid>https://dev.to/tino_muc/how-to-keep-configuration-secrets-out-of-a-django-project-k07</guid>
      <description>&lt;p&gt;It is best practice to hide your configuration details and not include them in version control for the sake of security and independence of project instance. Getting straight to the point here is how to do it using python decouple library.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#quick-summary"&gt;
  &lt;/a&gt;
  Quick Summary
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Install decouple pip install python-decouple or [&lt;a href="https://pypi.org/project/python-decouple/"&gt;https://pypi.org/project/python-decouple/&lt;/a&gt;].&lt;/li&gt;
&lt;li&gt;Create file named .env or .ini under the route of your project.&lt;/li&gt;
&lt;li&gt;Add ignore for .env if you are using git.&lt;/li&gt;
&lt;li&gt;Retrieve the settings by importing decouple into the settings.py file and replacing variables to hide with config.
5 . Test the application&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#detailed-steps"&gt;
  &lt;/a&gt;
  Detailed Steps
&lt;/h1&gt;

&lt;p&gt;This is how our initial exposed settings.py looks like before exclusion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'3izb^ryglmyscret_key_here'&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.db.backends.postgresql_psycopg2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'HELLO_DJANGO'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'USER'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'TINO'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'thepasswordhere'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'HOST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'127.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'PORT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'0000'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1-installing-decouple"&gt;
  &lt;/a&gt;
  1. Installing decouple
&lt;/h2&gt;

&lt;p&gt;run&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;pip install python-decouple&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 or if you prefer downloading [&lt;a href="https://pypi.org/project/python-decouple/"&gt;https://pypi.org/project/python-decouple/&lt;/a&gt;]&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-create-env-file"&gt;
  &lt;/a&gt;
  2. Create .env file
&lt;/h2&gt;

&lt;p&gt;Add variables to hide or exclude by copying values from settings.py making sure you do not include quotes("").&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;izb&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;ryglmyscret_key_here&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;DB_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;HELLO_DJANGO&lt;/span&gt;
&lt;span class="n"&gt;DB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TINO&lt;/span&gt;
&lt;span class="n"&gt;DB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;thepasswordhere&lt;/span&gt;
&lt;span class="n"&gt;DB_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-ignoring-env-from-version-controlgit"&gt;
  &lt;/a&gt;
  3. Ignoring .env from version control(git)
&lt;/h2&gt;

&lt;p&gt;Go into your gitignore file and add .env as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Environments
&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will make sure our file with variables is not tracked by the source control.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-retrieve-the-settings-or-values-on-variables-set-in-the-env-file"&gt;
  &lt;/a&gt;
  4. Retrieve the settings or values on variables set in the .env file
&lt;/h2&gt;

&lt;p&gt;Import config from decouple as below and reference variables as strings&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decouple&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DEBUG'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#NB casting here for boolean
&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.db.backends.postgresql_psycopg2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_NAME'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'USER'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_USER'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'HOST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_HOST'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'PORT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please Note: On non string values we need to cast to the type e.g&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;DEBUG = ('DEBUG', cast=bool)&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 as DEBUG expects boolean True or False&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-test-to-see-if-your-application-still-run-the-same"&gt;
  &lt;/a&gt;
  5. Test to see if your application still run the same
&lt;/h2&gt;

&lt;p&gt;Execute&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;py manage.py runserver&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 to make sure your application still run smoothly.&lt;/p&gt;

&lt;p&gt;I have tried to go straight to the point for easier implementation. My motivation to write this down was the struggle I had to find similar information which is helpful. Feel free to suggest different implementations or suggestions. &lt;/p&gt;

&lt;p&gt;Happy Coding!!! &lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>security</category>
      <category>deployment</category>
    </item>
    <item>
      <title>How I became a freelance web developer</title>
      <author>Marc</author>
      <pubDate>Wed, 02 Jun 2021 21:37:14 +0000</pubDate>
      <link>https://dev.to/webdevchallenges/how-to-become-a-freelance-web-developer-31ad</link>
      <guid>https://dev.to/webdevchallenges/how-to-become-a-freelance-web-developer-31ad</guid>
      <description>&lt;p&gt;I write this post because I think freelancing in web development is a good career and has a lot of advantages over traditional permanent positions.&lt;/p&gt;

&lt;p&gt;If you can manage to have enough customers to be occupied full time, working as a freelancer should make you a significant amount more money than permanent positions. Also being able to work on your own schedule is a huge plus in my book. It enables you to take time off whenever you feel you need that without an employer insisting in you being present.&lt;/p&gt;

&lt;p&gt;A lot of employers advertise their positions with terms like “work-life-balance” and other nice sounding words but I made the experience that they are used to lure developers into their positions and once you signed the contract, their promises are no longer relevant. I made this experience multiple times but I’m sure there are nice companies to work for in permanent positions too.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-i-became-a-web-developer"&gt;
  &lt;/a&gt;
  How I became a web developer
&lt;/h1&gt;

&lt;p&gt;I live in germany, took 12 years of school and always planned to study an IT related subject on university. It was always a dream and I idolized studying on university for some reason. Maybe because it was something I was looking forward to because I didn’t like school that much.&lt;/p&gt;

&lt;p&gt;Anyways, once the time came and school ended I did not want to work while studying because I’m a lazy boy and neither did I want to take a loan. I decided to apply for apprenticeships as a software engineer. I actually did not find an employer willing to invest time into training me. So I applied for another apprenticeship path in system administration and found a nice company.&lt;/p&gt;

&lt;p&gt;During my apprenticeship which started in 2014 I learned a lot of basic sysadmin stuff that is very relevant to software engineers like setting up and securing linux servers for hosting web applications. I also was always very interested in programming. In the school part of the apprenticeship we learned Java which intrigued me.&lt;/p&gt;

&lt;p&gt;I spent time in my spare time programming some pretty useless applications, connecting to a mysql database from vanilla Java etc. Later I started to learn basic web development technologies like HTML, CSS (+Bootstrap) and JavaScript (+jQuery) with &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;. I also dug into Node.js because the idea of not needing to learn a whole new language for writing backend code was appealing to me.&lt;/p&gt;

&lt;p&gt;So towards the end of my apprenticeship I put together all the things I learned about Linux hosting, Node.js (MVC), HTML, CSS, Bootstrap and JavaScript and built a website which I used to apply to web development positions. I ordered an EC2 Instance from AWS which was free for their lowest tier and installed CentOS 7 on there. My Node.js application got served with pm2 and reverse proxied through NGINX which also handled SSL. The certificate was obtained through LetsEncrypt for free.&lt;/p&gt;

&lt;p&gt;I applied to positions towards the end of 2016 and found a web agency in munich where I began to work for them as a web developer from the beginning of 2017.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-first-permanent-position"&gt;
  &lt;/a&gt;
  My first permanent position
&lt;/h1&gt;

&lt;p&gt;An apprenticeship does not pay very well but you obviously are supposed to do a lot of learning and less earning in that period. So the first year paid 750€ montly, the second one 850€ monthly and the third year 950€ monthly. Usual pay in the area I did my apprenticeship in and with the level of experience after an apprenticeship is around 2500€ monthly. My first position was at 3000€ monthly which was more than I expected. The position was in Munich which is one of the reasons why the pay was a little better than in rural areas.&lt;/p&gt;

&lt;p&gt;These numbers are all before taxes and social security charges.&lt;/p&gt;

&lt;p&gt;To sum up my first position, I learned a lot about basic web development first. Did a project with jQuery which got more and more complicated over time. I regretted the decision to use jQuery very soon but I didn’t know any better. Later on I dove into learning Angular and developing Single Page Applications (SPAs). So I specialized more and more in frontend development. Sadly I did not learn a lot of backend development even though that is something I always have been interested in alot.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-second-permanent-position"&gt;
  &lt;/a&gt;
  My second permanent position
&lt;/h1&gt;

&lt;p&gt;Through the projects on my first job, I gathered a lot of knowledge in Angular because I was the sole frontend developer responsible for the whole frontend code of our projects. The first company I worked at had financial problems which had multiple reasons and I want to go deeper into one of them in a later post. It was clear that this company would not make it and would go bankrupt sooner or later.&lt;/p&gt;

&lt;p&gt;So towards the end I got contacted by the CEO of another company on a social media for work which was popular in germany back then called XING. They searched for a frontend developer specialized in Angular which I was a good fit for so they hired me in Januar 2019. The pay was 4300€ monthly. I learned new stuff there, worked on developing an in-house web application in the real estate business.&lt;/p&gt;

&lt;p&gt;They previously had a freelance developer build their Angular application which I continued to develop. He was still working on some parts and basically transferred the project to me. This guy was very knowledgeable in this field but I was not far behind and I was also able to show him some stuff like state management that he did not have experience with yet.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-entry-to-freelancing"&gt;
  &lt;/a&gt;
  My entry to freelancing
&lt;/h1&gt;

&lt;p&gt;I was already wondering if I too could be a freelance developer in the future. I worked for that company for 6 months. Ending the employment was mainly my decision and the reason behind this is a topic I want to discuss in a further post aswell.&lt;/p&gt;

&lt;p&gt;Anyways, I started to work on a personal project which I dumped a lot of time into. Working both on the backend and on the frontend was very fun to me and I learned a lot. Even though I did not pursue this project to have a real userbase I think the time spent was not wasted there.&lt;/p&gt;

&lt;p&gt;Two months after quitting at my previous company, the freelance developer I worked there together with contacted me. He said he is working on a different project as a freelancer and has some work for me if I’m interested. I saw this as a huge opportunity and I’m very grateful that he contacted me.&lt;/p&gt;

&lt;p&gt;So I said that I’m interested, registrated my business and started to work on this project. That was in Q3 2019 so I have been a freelance developer for almost two years now and I really enjoy it way more than working in a permanent position.&lt;/p&gt;

&lt;p&gt;My initial hourly rate was 65€ which we bumped up to 70€ after the first month. I think the rate is not very high but it’s not too low either. He knew how I worked and what I was capable of doing so we agreed to this rate which was fair in my opinion.&lt;/p&gt;

&lt;p&gt;That project lasted until the beginning of 2020. I immediately found another freelance gig afterwards and I want to create a separate post about finding work as a freelance developer soon.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me if you have any questions.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 10 Small Business Website Marketing Tips</title>
      <author>Krowser Web Services </author>
      <pubDate>Wed, 02 Jun 2021 20:58:45 +0000</pubDate>
      <link>https://dev.to/krowser/top-10-small-business-website-marketing-tips-1n87</link>
      <guid>https://dev.to/krowser/top-10-small-business-website-marketing-tips-1n87</guid>
      <description>&lt;p&gt;If you’re running a small business and just now getting started with website marketing, I’ve got some great tips to help you get started. But these tips are just as valuable for veteran online marketers, too. It’s a good idea to always learn as many website marketing tips as you can to keep sharpening your saw.&lt;/p&gt;

&lt;p&gt;Here are my 10 favorite small business website marketing tips to help you get better results with your website:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Turn your website into a lead generation machine.&lt;br&gt;
The point of a website is not to make sales. The point of a website is to capture leads. Never forget that. Every single page on your website should be focused around capturing new leads by obtaining name and email at the very least.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use email marketing to follow-up with your leads.&lt;br&gt;
When I use the term “website marketing” I’m really talking about everything that happens online, and that includes email. As I pointed out above, your first objective is to capture new leads. Once you have those new leads, you need to build an email marketing follow-up system to stay connected to them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blog frequently and consistently to build search engine presence.&lt;br&gt;
To get email leads that can grow your business, you need people to visit your website. To get website visitors, you need lots and lots of content. Your prospects are using Google every day to search for what they want. One of the most reliable ways to show up in Google results is to blog about lots of topics your customers care about.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow the new SEO rules — not the old SEO rules.&lt;br&gt;
Chances are good you’ve already done some research about Online Marketing. And chances are also good that you’ve read a few things about SEO. Just be sure you’re making a distinction between “Old SEO” strategy and “New SEO” strategy. The Old SEO stuff is manipulative and wonky. It’s all about link building and other weak practices. The New SEO stuff is about quality and value. It’s all about content, authority, and reputation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build an active presence on the top social media networks.&lt;br&gt;
When your prospects aren’t using Google, they’re using Facebook, Twitter, Google Plus, LInkedIn, and Pinterest. You need a presence on at least 3 of these top 5 networks. Ideally, you should be updating them several times each week or even every single day if possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focus on the most important rule in marketing: Content Is King!&lt;br&gt;
Burn this one into your brain forever. This is the golden rule of marketing — Content Is King! It’s the rule you need to follow in every medium where you’re creating new marketing messages: email, blogging, social media, web content, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn everything you can about Direct Response Marketing.&lt;br&gt;
If you took a marketing class in college, you can pretty much throw everything you learned (including the textbook) right out the window. Branding and institutional advertising is for corporations with multi-million dollar advertising budgets. You need to follow the rules of direct response marketing to be sure you get measurable, trackable results.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remember that Web Marketing is still just marketing.&lt;br&gt;
The goal of marketing is to grow your business. If you’re not doing that, then what’s the point? There are plenty of talking heads out there that will try to convince you that your online marketing strategy needs to be like a secret covert option to make your prospects your best friends rather than making them your best customers. It’s simply not true. Your number one goal is to grow your business.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Combine offline marketing with online marketing.&lt;br&gt;
Yes, it’s true, print media is still alive and well. It might seem strange that I’m suggesting offline marketing in a list of online marketing tips. But when in doubt, just read tip #8 above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test, track, measure, and improve your results.&lt;br&gt;
This is the most critical item on the list. If there’s any massive advantage that web marketing has over any other form of marketing, it’s that tracking and analyzing is far easier in this environment. Be sure you’re constantly measuring what you’re doing for best results.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Small Business Website Marketing Tips&lt;/strong&gt;&lt;br&gt;
I wrote this list to be punchy and direct so you can take quick action on at least a few of these items right away. Remember: all the theory and ideas in the world won’t help you if you don’t actually take action. Speed of implementation is the key to long-term success in business.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to leave questions in the comments section.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>11 of the Best Open-Source Kubernetes Tools - 2021 Edition</title>
      <author>Rich Burroughs</author>
      <pubDate>Wed, 02 Jun 2021 20:58:32 +0000</pubDate>
      <link>https://dev.to/loft/11-of-the-best-open-source-kubernetes-tools-2021-edition-4joo</link>
      <guid>https://dev.to/loft/11-of-the-best-open-source-kubernetes-tools-2021-edition-4joo</guid>
      <description>&lt;p&gt;By Matt Broberg&lt;/p&gt;

&lt;p&gt;Nearly everyone touching cloud infrastructure in 2021 is familiar with the Kubernetes project. Put simply, Kubernetes is an incredibly powerful platform for container orchestration. But in my opinion, Kubernetes, more than anything, is a collection of best practices baked into a system that can scale from a Raspberry Pi up to the largest Fortune 500 infrastructure. It empowers developers and operators alike to collaborate through standardized APIs and meaningful abstractions (like a Pod or a ConfigMap).&lt;/p&gt;

&lt;p&gt;Kubernetes can save an organization from decades of fumbling through rolling their own "container strategy" by offering an open source standard that, thankfully, is also a standard of every major cloud vendor. That said, something that’s as big of a beast as Kubernetes can be difficult to tame, and to use it to the best of it’s potential, you’ll need a suite of additional tools.&lt;/p&gt;

&lt;p&gt;The incredible community around Kubernetes is constantly sharing tools that help improve the experience of being a Kubernetes developer. Here is my list of the 11 essential tools I keep in my arsenal. I break them down by important categories: which ones help me run Kubernetes, test Kubernetes, and—last but not least—have fun in my IDE.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#category-1-running-kubernetes-environments"&gt;
  &lt;/a&gt;
  Category 1: Running Kubernetes Environments
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#minikube-still-works-well"&gt;
  &lt;/a&gt;
  Minikube Still Works Well
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3bW0wY15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvxw0aji03ok8hs9svcs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3bW0wY15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvxw0aji03ok8hs9svcs.png" alt="Minikube start command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nearly every Kubernetes tutorial starts with "download Minikube" and that still makes sense today. If you want to fiddle with containers in a truly low-risk environment, the well-packaged and maintained Minikube project will have you &lt;a href="https://minikube.sigs.k8s.io/docs/"&gt;running a cluster in about 23 seconds&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#helm-is-still-the-standard-for-repeatable-deployments"&gt;
  &lt;/a&gt;
  Helm Is Still the Standard for Repeatable Deployments
&lt;/h3&gt;

&lt;p&gt;While we have all written a one-off script or two to deploy some configuration to Kubernetes, the de facto way to manage repeatable deployments is with Helm. Much like apt on Ubuntu or rpm for RHEL, Helm is a package manager that does so much for Kubernetes developers. As a developer, I want to test my application with other projects without much work. Instead of writing my own Jenkins setup, I can simply run &lt;code&gt;helm install jenkins/jenkins&lt;/code&gt; and be on my way. To find it and other Kubernetes packages, check out the &lt;a href="https://artifacthub.io/"&gt;Artifact Hub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-rancher-k3s-anywhere-and-everywhere"&gt;
  &lt;/a&gt;
  Run Rancher K3s Anywhere and Everywhere
&lt;/h3&gt;

&lt;p&gt;Pushing containers to a near-perfectly maintained Kubernetes service is one thing, but what if you want to mess with one in the wild of your Raspberry Pi farm? The K3s project from Rancher can do the trick. It's ideal for any edge or IoT attempt at Kubernetes "clusterology," as the maintainers put it in the &lt;a href="https://github.com/k3s-io/k3s#k3s---lightweight-kubernetes"&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What makes K3s stand out as an option for local and lightweight clusters is its extensive range of supported devices. You can truly run Kubernetes anywhere with K3s. The fact that it downloads as a single binary means it  includes all the functionality of a production Kubernetes configuration (sqlite3 is the default, but you can scale up to Etcd3 through its pluggable storage backend), and it is quite actively maintained by the team at Rancher and its 1,749 (to date) contributors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loft-for-scaling-the-team"&gt;
  &lt;/a&gt;
  Loft for Scaling the Team
&lt;/h3&gt;

&lt;p&gt;Anyone can spin up a Minikube cluster as mentioned above with a call to &lt;code&gt;curl&lt;/code&gt;. But what if you want to collaborate with others? There are a ton of options at the intersection of cloud-native development tools and local development clusters. &lt;/p&gt;

&lt;p&gt;The traditional option is to spin up some publicly accessible resources on a public cloud: AKS, EKS, DigitalOcean Managed Kubernetes, or one of the many others available. But anyone who has run a &lt;code&gt;hello world&lt;/code&gt; tutorial on a cloud service and forgotten to delete it knows that it will cost you a lot, and quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://loft.sh/"&gt;Loft&lt;/a&gt; offers a set of services, including a UI and CLI, to further abstract the Kubernetes environments they'll eventually run on in production. By doing so, you can set up a self-service experience without the same concern for isolation and budget.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G-500Syx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egdn019h4n0a84rd0a2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G-500Syx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egdn019h4n0a84rd0a2r.png" alt="Loft Spaces view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Loft’s attention to isolation, especially with &lt;a href="https://loft.sh/docs/self-service/virtual-clusters"&gt;vClusters&lt;/a&gt; and their corresponding &lt;a href="https://loft.sh/docs/self-service/namespaces"&gt;Spaces&lt;/a&gt;, gives every developer a real-world environment without the real-world hit to the budget. That can be quite the value to developers and department leads alike.&lt;/p&gt;

&lt;p&gt;The value of Loft comes down to the speed of spinning up and down secure Kubernetes environments. One of their use cases mentions creating live demos of on-premises products in a single UI click. Thinking more selfishly, imagine demoing your latest production feature in its own isolated test case without mucking up your development cluster's namespaces. That sounds good to me.&lt;/p&gt;

&lt;p&gt;Additionally, Loft Labs recently hired the amazing &lt;a href="https://loft.sh/blog/meet-rich-burroughs/"&gt;Rich Burroughs&lt;/a&gt;, and that's a good sign for the type of community they are putting together.&lt;/p&gt;

&lt;p&gt;When working with a team, Loft makes a ton of sense. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#category-2-simplify-feedback-loop"&gt;
  &lt;/a&gt;
  Category 2: Simplify Feedback Loop
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#skaffold-for-handsfree-feedback-loops"&gt;
  &lt;/a&gt;
  Skaffold for Hands-free Feedback Loops
&lt;/h3&gt;

&lt;p&gt;Imagine you're a developer (because you are) and you want to write an app that will run on Kubernetes (because you do). The amount of Kubernetes concepts you need to know, from running Node.js or Python applications to running containers on Kubernetes can feel like a wall of YAML. Thankfully, the good folks at Google wrote &lt;a href="https://skaffold.dev/"&gt;Skaffold&lt;/a&gt; to provide some much-needed scaffolding.&lt;/p&gt;

&lt;p&gt;Don't get me wrong: you will still need your code, a Dockerfile, a manifest file, and all the services associated with your pipeline. What Skaffold offers is a clean way to rerun your deployment pipeline after every change to your code. It's known and loved by its users with quotes on the homepage from around the world.&lt;/p&gt;

&lt;p&gt;You may relate to this feeling: running Skaffold feels like the first time I ran Vagrant instead of managing virtual machines by hand. Tasks that once took a ton of steps and were unreliable became straightforward and repeatable in a way that simplified everything else I did. Skaffold&lt;br&gt;
is set to do that for your testing and deployment feedback loop for Kubernetes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#podman-to-stop-managing-docker-daemons"&gt;
  &lt;/a&gt;
  Podman to Stop Managing Docker Daemons
&lt;/h3&gt;

&lt;p&gt;While Dockerfiles may forever be the way we express a container, Docker itself is completely optional. Even Kubernetes itself is shifting its runtime away from &lt;a href="https://kubernetes.io/blog/2020/12/02/dockershim-faq/"&gt;Dockershim&lt;/a&gt;. I cannot recommend &lt;a href="https://podman.io/"&gt;Podman&lt;/a&gt; enough as a replacement for running Docker locally, for the sole reason you don't need to maintain a daemon service. Not messing with a daemon means less time fiddling and more time coding.&lt;/p&gt;

&lt;p&gt;That distinction may be new to you, so to explain: Docker is both a client to interact with local containers and a daemon (aka server) managing the userspace where containers run. Nick Janetakis explains it perfectly &lt;a href="https://nickjanetakis.com/blog/understanding-how-the-docker-daemon-and-docker-cli-work-together"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMQ_E5mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le16ahiq43tsalxk75ee.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMQ_E5mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le16ahiq43tsalxk75ee.jpeg" alt="Docker client and server model"&gt;&lt;/a&gt;&lt;br&gt;
Like me, you may forget there is a distinction between the Docker client and server when everything is working correctly. That said, I too often see this message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps
&lt;span class="nv"&gt;$ &lt;/span&gt;Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I am left with a choice. I could troubleshoot the Docker daemon and what service in my toolchain messed things up, or I could use something that doesn't run into the same problem. I prefer the latter.&lt;/p&gt;

&lt;p&gt;Podman gives you the option to run containers as a child process, removing the need for a separate daemon. That means I never get that error message, and my containers keep doing what they do.&lt;/p&gt;

&lt;p&gt;You may be holding back from change because your muscle memory is too embedded. In that case, I highly recommend removing the &lt;code&gt;docker&lt;/code&gt; CLI and adding &lt;code&gt;alias docker=podman&lt;/code&gt; to your shell configuration file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tilt-really-understands-your-app"&gt;
  &lt;/a&gt;
  Tilt Really Understands Your App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ovKPTPDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmmxjsaxo8gnb4bk9glf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ovKPTPDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmmxjsaxo8gnb4bk9glf.png" alt="Tilt interface"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While I covered a few different ways to manage your pipeline, I still find Tilt is the most thorough and visual way to see a continuous feedback loop from a Kubernetes-based application. The Tilt UI has incredibly succinct error catching that I find points out minor YAML errors before they become significant deployment errors. It also has customizable buttons to give you unique application-specific functionality, like flushing a message queue in your architecture between iterations.&lt;/p&gt;

&lt;p&gt;Give &lt;a href="https://tilt.dev"&gt;Tilt&lt;/a&gt; a swing if you know you want to see the details without being overwhelmed by them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#efficient-development-workflow-with-devspace"&gt;
  &lt;/a&gt;
  Efficient Development Workflow with DevSpace
&lt;/h3&gt;

&lt;p&gt;Do you love what &lt;code&gt;kubectl&lt;/code&gt; can do but lose track of the multitude of commands needed to get it to do what you want? Then you're in luck, as &lt;a href="https://devspace.cloud/"&gt;DevSpace&lt;/a&gt; is an open source command-line utility that wraps your Kubernetes developer experience up in what will feel like a warm hug. It will manage a ton of the tedious tasks so you can treat a Pod like it's running on your local system.&lt;/p&gt;

&lt;p&gt;Additionally, if you have rather particular preferences, they can simply be added to the devspace.yaml declarative configuration file.&lt;/p&gt;

&lt;p&gt;While it won't be a one-to-one replacement for the scalpel that &lt;code&gt;kubectl&lt;/code&gt; provides, running DevSpace will give you a ton of sane default behaviors that will make interacting with real Kubernetes environments feel more like &lt;code&gt;$HOME&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debug-faster-with-lens-ide"&gt;
  &lt;/a&gt;
  Debug Faster with Lens IDE
&lt;/h3&gt;

&lt;p&gt;Kubernetes projects like Minikube come out of the box with a sleek and straightforward GUI called &lt;a href="https://github.com/kubernetes/dashboard"&gt;Dashboard&lt;/a&gt;. It is an excellent read-focused view of the environment, but what if you want to do everything from a UI?&lt;/p&gt;

&lt;p&gt;The most powerful option from the open source community is &lt;a href="https://k8slens.dev/"&gt;Lens&lt;/a&gt;. I really should not call it a GUI, because it's feature-rich enough to be considered an IDE. You can do anything Kubernetes is capable of doing within Lens with a click of the button. What I most enjoy about Lens is its incredible thought context-specific options that help me learn the distinction of a service from a namespace from the many other resources that need to be known in Kubernetes land.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#category-3-ide-dev-tools-i-cant-live-without"&gt;
  &lt;/a&gt;
  Category 3: IDE Dev Tools I Can't Live Without
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-kubernetes-extension-we-all-need-for-vscode"&gt;
  &lt;/a&gt;
  The Kubernetes Extension We All Need for VSCode
&lt;/h3&gt;

&lt;p&gt;No Kubernetes development experience should be without an IDE that knows the difference between a Kubernetes resource and a Helm chart. That is where &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-kubernetes-tools.vscode-kubernetes-tools"&gt;Visual Studio Code Kubernetes Tools&lt;/a&gt; shines. Anyone living in a Kubernetes world has to start by installing this one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-yaml-more-manageable-with-this-vscode-plugin"&gt;
  &lt;/a&gt;
  Make YAML More Manageable with This VSCode Plugin
&lt;/h3&gt;

&lt;p&gt;Kubernetes developers have been described as YAML farmers, and I think the shoe fits nicely. While I like a structured domain-specific language as much as the next Kubernaut, I will take any help I can get with managing YAML itself. Thankfully the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml"&gt;YAML Language Support&lt;/a&gt; extension, supported by Red Hat, helps me help myself.&lt;/p&gt;

&lt;p&gt;It offers up a ton of autocompletion options on top of many additional nuanced options that help me out. All that said, the ability to right-click and choose to "Format Document" is worth its weight in gold alone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find-your-way-through-code-with-footsteps"&gt;
  &lt;/a&gt;
  Find Your Way Through Code with Footsteps
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v3yXmVc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqufdj48uh9l56k1zo2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3yXmVc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqufdj48uh9l56k1zo2q.png" alt="Example of Footsteps highlighting changes to code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While not strictly a Kubernetes extension, I find navigating the YAML farm can lead me to losing track of where I left off. Where was I in my 2,000 line configuration file again? That's when &lt;a href="https://github.com/Wattenberger/footsteps-vscode"&gt;Footsteps&lt;/a&gt; shines a light on where my short-term memory has lost its footing. This brilliant extension, also for VSCode or its equivalents, will show you where you most recently edited a document through highlighted text. As you continue to edit code, Footsteps slowly fades those colors away, giving you a sense of your coding pattern. Install this and save yourself quite a few moments of feeling lost.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;There is an unbelievable amount of tools out there to help Kubernetes developers and operators navigate this new paradigm of container orchestration. I like to think about them in three buckets: do they help me run Kubernetes, test Kubernetes, or code in a Kubernetes-aware manner? All three of these categories can lead you to well-maintained software in the open source ecosystem that will help you be a better YAML herder like the rest of us.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@carlevarino?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Cesar Carlevarino Aragon&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/tools?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>ide</category>
    </item>
    <item>
      <title>Next.js Beginner's Guide</title>
      <author>Eric Chapman</author>
      <pubDate>Wed, 02 Jun 2021 20:57:14 +0000</pubDate>
      <link>https://dev.to/ericchapman/next-js-beginner-s-guide-8l3</link>
      <guid>https://dev.to/ericchapman/next-js-beginner-s-guide-8l3</guid>
      <description>&lt;h2&gt;What is Next.js?&lt;/h2&gt;

&lt;p&gt;It's a React frontend development web framework that enables functionality such as server-side rendering and static site generation.&lt;/p&gt;

&lt;h3&gt;Server-side rendering?&lt;/h3&gt;

&lt;p&gt;In a traditional React app the entire app is loaded and rendered on the client. Next.js allow the first page load to be rendered by the server, which is great for SEO and performance.&lt;/p&gt;

&lt;h3&gt;Next.js other benefits&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easy page routing&lt;/li&gt;
&lt;li&gt;server Api routes&lt;/li&gt;
&lt;li&gt;Static site generation (like Gadsby)&lt;/li&gt;
&lt;li&gt;Easy Deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Create Next.js first project&lt;/h2&gt;

&lt;p&gt;To install and create a Next.js projet you can use the handy node npx command 'create-next-app my-app-name'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx create-next-app my-app-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or with Tailwind CSS pre-configure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx create-next-app -e with-tailwindcss my-app-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a folder and create all files, configs and everything you need to start a Next.js app.&lt;/p&gt;

&lt;p&gt;Once the app is created you can launch it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd your-app-name
$ npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will launch your Next.js empty app. By default a welcome page is already created for you.&lt;/p&gt;

&lt;h2&gt;Pages and Routing&lt;/h2&gt;

&lt;p&gt;In Next.js to manage routes we dont have to use a routing library. &lt;/p&gt;

&lt;p&gt;Next.js routing is very easy to implement.&lt;/p&gt;

&lt;p&gt;When you create a new Next.js app with the create-next-app command, the app create by default a folder name 'pages'&lt;/p&gt;

&lt;p&gt;This 'pages' folder is your routes management. So every react components file in the folder will be treated as a specific route.&lt;/p&gt;

&lt;p&gt;For example, if the folder is containing those files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.js&lt;/li&gt;
&lt;li&gt;about.js&lt;/li&gt;
&lt;li&gt;blog.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This file will automatically be converted in 3 routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The index page localhost/index&lt;/li&gt;
&lt;li&gt;The about page localhost/about&lt;/li&gt;
&lt;li&gt;The blog page localhost/blog&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see the principle is very easy. &lt;/p&gt;

&lt;p&gt;Also, if you visit a route that dont exist like 'localhost/home' Next.js will automatically show a not found 404 page&lt;/p&gt;

&lt;p&gt;Here an example of about.js page. Like you can see nothing is specified about the page. It is just a regular React functional component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AboutPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;AboutPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Nested routes&lt;/h3&gt;

&lt;p&gt;How about nested routes like localhost/blog/contact?&lt;/p&gt;

&lt;p&gt;To create nested routes you need to create a sub folder.&lt;/p&gt;

&lt;p&gt;For example: pages/blog&lt;/p&gt;

&lt;p&gt;Inside that folder you can create your 'contact.js' react component and that will create the page localhost/blog/contact&lt;/p&gt;

&lt;p&gt;If you create a index.js file in that sub folder, Next.js will use that component to represent your root route. ex: localhost/blog will render pages/blog/index.js&lt;/p&gt;

&lt;p&gt;If you create a file in pages/blog.js and another one under pages/blog/index.js. Both represent the same localhost/blog route. In that case Next.js will render only the blog.js file. &lt;/p&gt;

&lt;p&gt;What about dynamic routes where each blog post have it's own route:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;localhost/blog/my-first-blog&lt;/li&gt;
&lt;li&gt;localhost/blog/my-second-blog-post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Next.js you can create a dynamic route using the brackets notation.&lt;/p&gt;

&lt;p&gt;For example: pages/blog/[slug].js&lt;/p&gt;

&lt;p&gt;Yes that look a bit weird to include brackets to a file name but that's the way.&lt;/p&gt;

&lt;p&gt;If slug variable can be extract from the route using the useRoute hook.&lt;/p&gt;

&lt;p&gt;Here a example of the [slug].js page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PostPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My post: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a basic example. In a real app, the slug variable will be use to load the post file or lookup in a database for the corresponding post.&lt;/p&gt;

&lt;h2&gt;Routes links&lt;/h2&gt;

&lt;p&gt;Now that you created your first route. I guess you are wondering how to link pages to those routes? To do that you need 'next/link'&lt;/p&gt;

&lt;p&gt;Here a example of the home page with a link to the about page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"about"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the about page, if you want to create a link to come back to the home page. You can type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to style the link you have to use this syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'/about'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-blue-500"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About this project&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Route redirect&lt;/h2&gt;

&lt;p&gt;What if you want to force a redirect to a specific page? For example on a click of a button? You can use 'router.push' for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About Page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is the about page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Return to home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Where you put components?&lt;/h2&gt;

&lt;p&gt;Many time you will want to create a components or a layout file. For example a component to render navbar. &lt;/p&gt;

&lt;p&gt;Up until now we only have use the pages folder. What if you dont want your component to be a route page? You dont want user to go open page like: localhost/navbar &lt;/p&gt;

&lt;p&gt;That's what will append if you put Navbar.js component inside the pages folder. &lt;/p&gt;

&lt;p&gt;What to do in that case? Easy, you need to place all your 'not a page' components inside another folder.&lt;/p&gt;

&lt;p&gt;By convention most Next.js use a folder name 'components' and this folder is created at the root folder of your apps.&lt;/p&gt;

&lt;p&gt;So for example if you want to create a layout component you can do it in the new components folder: /components/Layout.js&lt;/p&gt;

&lt;p&gt;That React component can be use anywhere in your app but will ne be reference as a route page.&lt;/p&gt;

&lt;h2&gt;Head compoment&lt;/h2&gt;

&lt;p&gt;Next.js server side render first page load. To do so it manipulate the html of you page. Including the header section.&lt;/p&gt;

&lt;p&gt;To provide header section tag like title or meta you need to use the Next.js Head component.&lt;/p&gt;

&lt;p&gt;Here's an example of a Layout component using the Head component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/Layout.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'description'&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'keywords'&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;keywords&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;

&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my app title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my app description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web, javascript, react, next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Custom 404 not found page&lt;/h2&gt;

&lt;p&gt;It is possible to create a custom 404 not found page. You may want to personalize the message or include your own page layout. &lt;/p&gt;

&lt;p&gt;Create 404.js file in the pages folder.&lt;/p&gt;

&lt;p&gt;Next.js will then automatically redirect to this page when a 404 is encounter. &lt;/p&gt;

&lt;p&gt;Here a example of a custom 404 page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/404.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/Layout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NotFoundPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Sorry the page you are looking is no where to be found.        
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;NotFoundPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Import shortcut alias&lt;/h2&gt;

&lt;p&gt;As your app grow more and more. Some components can be nested deep in your app folder structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../components/Layout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is possible to create a shortcut to help you save some key stroke and get a result like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/Layout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The @ char is a shortcut syntax.&lt;/p&gt;

&lt;p&gt;To create this shortcut and more you need to create a file name 'jsconfig.json' at the root of your app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;jsconfig.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"baseUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"@/components/*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"components/*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Server-side data fetching&lt;/h2&gt;

&lt;p&gt;Instead of fetching data on the client side, Next.js can&lt;br&gt;
enables server-side rendering in a page and allows your to do initial data population, it means sending the page with the data already populated from the server. &lt;/p&gt;

&lt;p&gt;To implement that server-side data fetching you have 2 options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetch data on each request&lt;/li&gt;
&lt;li&gt;Fetch data only once at build time (static site)&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Fetch data on each request&lt;h3&gt;
&lt;br&gt;
To server-side render on each request you need to use the getServerSideProps function.

&lt;/h3&gt;
&lt;/h3&gt;
&lt;p&gt;You can add this function at the end of your component file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`http://server-name/api/items`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If that function is present in your component file, Next.js will automatically fill you component props with the getServerSideProps object.&lt;/p&gt;


&lt;h3&gt;Fetch data at build time&lt;h3&gt;
&lt;br&gt;
To server-side render at build time you need to use the getStaticProps function.

&lt;/h3&gt;
&lt;/h3&gt;
&lt;p&gt;You can add this function at the end of your component file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`http://server-name/api/items`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Image optimization&lt;/h2&gt;

&lt;p&gt;Next.js has a built-in Image Component and Automatic Image Optimization.&lt;/p&gt;

&lt;p&gt;The Next.js Image Component, next/image, is an extension of the HTML &lt;a href="" class="article-body-image-wrapper"&gt;&lt;img&gt;&lt;/a&gt; element, evolved for the modern web.&lt;/p&gt;

&lt;p&gt;Images are lazy loaded by default. That means your page speed isn't penalized for images outside the viewport. Images load as they are scrolled into viewport.&lt;/p&gt;

&lt;p&gt;First import the Image Component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use it in your component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt;
  &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/image.png"&lt;/span&gt;
  &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Picture of the author"&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to know more about Next.js Image component you can read the official documentation: &lt;a href="https://nextjs.org/docs/api-reference/next/image"&gt;https://nextjs.org/docs/api-reference/next/image&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That's it for today. I still have a lot of posts coming about React so if you want to be sure to miss nothing click follow me!&lt;/p&gt;

&lt;p&gt;I am new on twitter so if you want to make me happy&lt;br&gt;
Follow me!: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My Autistic son and how we are going to reach him</title>
      <author>Adam Crockett</author>
      <pubDate>Wed, 02 Jun 2021 20:41:58 +0000</pubDate>
      <link>https://dev.to/adam_cyclones/my-autistic-son-and-how-we-are-going-to-reach-him-2h0o</link>
      <guid>https://dev.to/adam_cyclones/my-autistic-son-and-how-we-are-going-to-reach-him-2h0o</guid>
      <description>&lt;p&gt;Three point five years ago, Logan was born prematurely, he scared me out of my whits! I remember racing to the hospital doing a speed &amp;gt; the speed limit. I don't remember arriving at the car park, only the birthing suite, I burst in to the entrance... The lady said. "Mother and baby haven't been very well, I will take you through in a moment".&lt;/p&gt;

&lt;p&gt;I remember the feeling, then thinking, oh god I have lost them, We walked into the hospital together laughing and I will be leaving on my own... &lt;/p&gt;

&lt;p&gt;She's taking me in, down some small corridor that felt 10 miles long, I'm crying now as I write this, as I always do... thinking about this moment, I heard something, it grew louder, we want through the double doors. Like a freight train just plowed through my chest, I heard it again, it sounded like a duck! 🦆 it was my son! Me being late as usual, I had missed the birth - shouldn't have taken that shower before I left!&lt;/p&gt;

&lt;p&gt;I spent 2 weeks in hospital visiting every day- my girlfriend the hero of this story was suffering, she's not aloud to see him for a few days! I'm his sole carer for the time being, what the hell am I doing, this baby is now in a glass House, I have to step up!&lt;br&gt;
I drive home late, living off junk, energy drinks and Costa coffee.&lt;/p&gt;

&lt;p&gt;Finally the day comes, I show my girlfriend what I have learned, how we feed him through a tube up his nose, change him and bath him. Her parents come... Mine, well its personal but I don't have any, not a typical childhood, it's me, I learn to be a dad from this day forward.&lt;/p&gt;

&lt;p&gt;Logan was Two when I started to look forward to having conversations, little questions to answer and hearing his voice, then one day he said "doggie", our dog Lizzie the jack, she brought out his first word 👏👏&lt;/p&gt;

&lt;p&gt;But then, nothing&lt;/p&gt;

&lt;p&gt;Other children, friends of ours, Thier kids all now walking and talking, Logan finally decided to start cruising, one a 2 months later, he walks! It took a while and this is expected, the impact of prematurity is bigger than I had ever understood or anticipated.&lt;/p&gt;

&lt;p&gt;He doesn't speak again for at-least six months, he knows maybe 10 words now, we read every night, 3 books a night. It's hard not to compare, we are desperately worried now, he can't or won't talk, our friends kids, full sentences and back chat!&lt;/p&gt;

&lt;p&gt;COVID hits, everyone in doors, we spend a long time indoors, he is regressing again, we need to do something fast, we learn British sign language from books from Amazon, everything comes from Amazon now, welcome to the desert that is our house.&lt;/p&gt;

&lt;p&gt;He's three now, and we have a few words he finally starts answering questions with no, not grunts... Although I'm now fluent in grunts, we sign around the house, even talk to eachother like this, it's easier for us. A very useful fascinating langue system you should absolutely learn by the way!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-point"&gt;
  &lt;/a&gt;
  The point
&lt;/h3&gt;

&lt;p&gt;Today we try PECS it's a system of communication similar to a Jira board.&lt;br&gt;
3 columns, now, next and later&lt;br&gt;
You stick your pictograms describing an activity to the column, he sees pictures and understands the plan. We think he has autism but it's a really long process in the UK to find out.. We know he hates change.&lt;/p&gt;

&lt;p&gt;So to help us all out, we have purchased a pecs board 🤘&lt;br&gt;
It sucks... It works but it sucks because we need more columns sometimes, less sometimes, different pictures. And when he's screaming the house down, we need favourite pictures quick sharp. Lastly like all things of this nature, it's badly drawn, as a UI guy this triggers me... We need an app, there is an app for everything right?&lt;br&gt;
Wrong, I think I need to write one, maybe it will help parents all over the place?&lt;/p&gt;

&lt;p&gt;So that's the plan, like many of my plans they never finish. I need a way to make this quick, get it out the door and onto an app store, I know web tech, what should I choose?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>a11y</category>
      <category>javascript</category>
      <category>android</category>
    </item>
    <item>
      <title>esbuild in a simple html+js usecase</title>
      <author>Marcin Wosinek</author>
      <pubDate>Wed, 02 Jun 2021 20:20:35 +0000</pubDate>
      <link>https://dev.to/marcinwosinek/esbuild-in-a-simple-html-js-usecase-h1d</link>
      <guid>https://dev.to/marcinwosinek/esbuild-in-a-simple-html-js-usecase-h1d</guid>
      <description>&lt;p&gt;In this series, I'll take a look on a simple usecase of js+html application, build with various js bundlers. After checking what's possible no bundler at all &amp;amp; in webpack, let's take a look on &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt; - interesting option among the js-bundlers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#esbuild"&gt;
  &lt;/a&gt;
  esbuild
&lt;/h1&gt;

&lt;p&gt;Key selling point of esbuild is speed. According to their data, they are even more then 100 times faster then alternatives. As it's written in go, instead of javascript, on can hope for a significant speed increase. In a simplified demo as we have in this series, the speed difference will be unnoticeable. For production application, every second saved in build adds across whole development team &amp;amp; it helps developers keep rebuilding &amp;amp; rerunning tests as often as possible - a good habit to have on a project.&lt;/p&gt;

&lt;p&gt;The focus on speed mean that in case of feature vs speed trade-of, the speed was a priority. So for example, for compiling ts you can only use limited part of official building options &amp;amp; you should limit yourself to use only the supported syntax.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-app"&gt;
  &lt;/a&gt;
  The app
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xssyzR8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xacwuk055mv5c4cdot9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xssyzR8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xacwuk055mv5c4cdot9z.png" alt="application screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;same as other articles of this series, simple app with 1 component with template &amp;amp; data in separate files.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;

&lt;p&gt;The html part is simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"content-type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"text/html; charset=utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Contact App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"shortcut icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./dist/index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;contrary to for example parcel, esbuild output works just fine with &lt;code&gt;&amp;lt;script type="module"&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The location of the output file, &lt;code&gt;./dist/index.js&lt;/code&gt; is set in the build script. esbuild, by default will just output the file into the standard output - ie, will drop it on the screen.&lt;/p&gt;

&lt;p&gt;Main js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./contact-list/contact-list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;note, that similar to other modern bundlers esbuild try out different extensions for use to find a file we try to load - even though it comes with performance cost.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-component"&gt;
  &lt;/a&gt;
  The component
&lt;/h1&gt;

&lt;p&gt;The component is broken down into 3 files. Same as in webpack, we are able to keep each type of content with a correct extension - data in json, template in html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/contact-list/contact-list.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./contact-list.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;contacts&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contactList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;contactList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contact-list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contacts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.phone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;contactList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contactList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JSON files are understood by eslit by default, &lt;code&gt;src/contact-list/data.json&lt;/code&gt; the data file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Christopher L Sanders"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"769-232-1807"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Frances J Nolte"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"901-287-0419"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;HTML files, need txt loader specified for html files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- src/contact-list/contact-list.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;name&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"phone"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;phone&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in this way, we can use them in a similar way one can be used to from webpack's &lt;code&gt;html-loader&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#build-dependencies-amp-configuration"&gt;
  &lt;/a&gt;
  Build dependencies &amp;amp; configuration
&lt;/h1&gt;

&lt;p&gt;For a successful build of the above code, we just need &lt;code&gt;esbuild&lt;/code&gt; build. To install it, you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; esbuild
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For easy access to build script, you can add following line to &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// other scripts&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;esbuild src/index.js --bundle --outfile=dist/index.js --loader:.html=text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;--outfile&lt;/code&gt; tells esbuild where to put our final bundle&lt;br&gt;
&lt;code&gt;--loaders:.html=test&lt;/code&gt; makes each &lt;code&gt;*.html&lt;/code&gt; imported as string&lt;/p&gt;

&lt;p&gt;Note - for complex configuration, esbuild provides node API instead of configuration file - contrary to webpack and many other bundles.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#complete-code-amp-application-example"&gt;
  &lt;/a&gt;
  Complete code &amp;amp; application example
&lt;/h1&gt;

&lt;p&gt;If you want to see the application in action in the browser you can see it here:&lt;br&gt;
&lt;a href="https://marcin-wosinek.github.io/js-html-comparison-esbuild/"&gt;https://marcin-wosinek.github.io/js-html-comparison-esbuild/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and for the working code example you can go here:&lt;br&gt;
&lt;a href="https://github.com/marcin-wosinek/js-html-comparison-esbuild"&gt;https://github.com/marcin-wosinek/js-html-comparison-esbuild&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>You don't know Redis</title>
      <author>SandorTuranszky</author>
      <pubDate>Wed, 02 Jun 2021 20:09:22 +0000</pubDate>
      <link>https://dev.to/sandorturanszky/you-don-t-know-redis-3onh</link>
      <guid>https://dev.to/sandorturanszky/you-don-t-know-redis-3onh</guid>
      <description>&lt;p&gt;In my previous &lt;a href="https://dev.to/sandorturanszky/how-to-create-linkedin-like-reactions-with-serverless-redis-4cad"&gt;post&lt;/a&gt;, I touched on the point that Redis is more than just an in-memory cache. &lt;/p&gt;

&lt;p&gt;Most people do not even consider Redis as a primary database. There are a lot of use cases where Redis is a perfect choice for non-cache related tasks. &lt;/p&gt;

&lt;p&gt;In this article, I will demonstrate how I built a fully functional Q&amp;amp;A board for asking and upvoting the most interesting questions. &lt;strong&gt;Redis will be used as a primary database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I will use Gatsby (React), Netlify serverless functions and &lt;a href="https://upstash.com?utm_source=sndr_2"&gt;Upstash Serverless Redis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Upstash has been a good choice so far and I decided to try it out in a more serious project. I love everything serverless and how it makes things simpler for me. &lt;/p&gt;

&lt;p&gt;Serverless will be a great choice for most tasks however you need to know the pros and cons of the tech you are using. I encourage you to learn more about serverless to get the most out of it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qampa-board-features"&gt;
  &lt;/a&gt;
  Q&amp;amp;A board features
&lt;/h3&gt;

&lt;p&gt;As you may know, I run a tech newsletter for recruiters where I explain complex tech in simple terms. I have an idea to collect questions from recruiters using a Q&amp;amp;A board and let them vote for questions.&lt;/p&gt;

&lt;p&gt;All questions will eventually be answered in my newsletter, however, the most upvoted questions will be addressed first. &lt;/p&gt;

&lt;p&gt;Anyone can upvote a question and registration is not required.&lt;/p&gt;

&lt;p&gt;Questions will be listed in three tabs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Active - questions sorted by votes and available for voting.&lt;/li&gt;
&lt;li&gt;Most recent - questions sorted by date (newest first).&lt;/li&gt;
&lt;li&gt;Answered - only questions that have answers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Upvoting&lt;/strong&gt; will be one of the most frequently used features and Redis has a data type and optimized commands for it.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://redis.io/topics/data-types#sorted-sets"&gt;Sorted set&lt;/a&gt; is ideal for this task because all its members are automatically sorted by the score.&lt;/p&gt;

&lt;p&gt;Scores are numeric values that we will associate with votes. It is very easy to increment a score (add a vote) by using the &lt;a href="https://redis.io/commands/zincrby"&gt;ZINCRBY&lt;/a&gt; command. &lt;/p&gt;

&lt;p&gt;We will also leverage scores for handling unmoderated questions by setting the score for them to &lt;code&gt;0&lt;/code&gt;. All approved questions will have a score of &lt;code&gt;1+&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;It allows us to fetch all unmoderated questions by simply using the &lt;a href="https://redis.io/commands/ZRANGEBYSCORE"&gt;ZRANGEBYSCORE&lt;/a&gt; command specifying the &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; arguments as &lt;code&gt;0&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To fetch all approved questions sorted by the score (highest first) we can use the &lt;a href="https://redis.io/commands/ZREVRANGEBYSCORE"&gt;ZREVRANGEBYSCORE&lt;/a&gt; command setting the &lt;code&gt;min&lt;/code&gt; score argument to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is great that by using just a few Redis commands we can also solve logical tasks along the way. &lt;strong&gt;Lower complexity is a huge benefit&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;We will also use sorted sets for sorting questions by date or filtering questions that have answers. I will explain it in more detail in a moment.&lt;/p&gt;

&lt;p&gt;Less frequent operations, namely creating, updating and deleting questions are also easy to accomplish using &lt;a href="https://redis.io/topics/data-types#hashes"&gt;hashes&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation-details"&gt;
  &lt;/a&gt;
  Implementation details
&lt;/h3&gt;

&lt;p&gt;The most interesting part is always the actual implementation. I use serverless functions and the &lt;a href="https://github.com/luin/ioredis"&gt;ioredis&lt;/a&gt; library and I will link the source code explaining what it does.&lt;/p&gt;

&lt;p&gt;This article is dedicated to client-facing functionality. Although I will explain admin-related functions, in the final source code there will be no backend interface. You will need to use Postman or a similar tool to call the admin related endpoints.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the API endpoints and what they do.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add-a-question"&gt;
  &lt;/a&gt;
  Add a question
&lt;/h4&gt;

&lt;p&gt;Users can create questions. All questions require moderation before they become visible.&lt;/p&gt;

&lt;p&gt;A question is an object and Redis hash is a perfect data type to represent objects. &lt;/p&gt;

&lt;p&gt;This is the structure of a questions:&lt;br&gt;
&lt;code&gt;{"datetime":"1633992009", "question":"What are Frontend technologies?", "author":"Alex", "email":"alex@email.com", “score:” “0”, “url”: “www.answer.com” }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will store questions in hashes using the &lt;a href="https://redis.io/commands/HMSET"&gt;HMSET&lt;/a&gt; command which takes a key and multiple key-value pairs.&lt;/p&gt;

&lt;p&gt;The key schema is &lt;code&gt;question:{ID}&lt;/code&gt; where &lt;code&gt;ID&lt;/code&gt; is the question ID generated using the &lt;a href="https://github.com/uuidjs/uuid"&gt;uuid&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;This is a new question and there is no answer yet. We skip the &lt;code&gt;url&lt;/code&gt; property but it will be an easy task to add it later using the &lt;a href="https://redis.io/commands/hset"&gt;HSET&lt;/a&gt; command. &lt;/p&gt;

&lt;p&gt;The score for a newly created question is &lt;code&gt;0&lt;/code&gt; by default. By our design, it means that this question needs moderation and will not be listed because we only fetch questions with scores starting from &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since we keep the score value in a hash, we’ll need to update it whenever it changes. There is a &lt;a href="https://redis.io/commands/hincrby"&gt;HINCRBY&lt;/a&gt; command that we can use to easily increment values in hashes.&lt;/p&gt;

&lt;p&gt;As you can see, using Redis hashes solves a lot more for us than just storing data.&lt;/p&gt;

&lt;p&gt;Now that we know how we’ll store questions, we also need to keep track of questions to be able to fetch them later.&lt;/p&gt;

&lt;p&gt;For that, we add the &lt;code&gt;ID&lt;/code&gt; of a question to a sorted set with a score of &lt;code&gt;0&lt;/code&gt; using the &lt;a href="https://redis.io/commands/zadd"&gt;ZADD&lt;/a&gt; command. A sorted set will allow us to fetch question IDs sorted by scores.&lt;/p&gt;

&lt;p&gt;As you can see, we are setting the score to &lt;code&gt;0&lt;/code&gt; just like we do it for the &lt;code&gt;score&lt;/code&gt; property in the hash above. The reason why we duplicate the score in a hash is that we need it when showing the most recent questions or questions that have answers. &lt;/p&gt;

&lt;p&gt;For instance, the most recent questions are stored in a separate sorted set with timestamp as a score hence the original score value is not available unless it’s duplicated in a hash.&lt;/p&gt;

&lt;p&gt;Since we store the score in two places, we need to make sure that values are updated both in a hash and in a sorted set. We use the &lt;a href="https://redis.io/commands/multi"&gt;MULTI&lt;/a&gt; command to execute commands in a manner where either all commands are executed successfully or they are rolled back. Check &lt;a href="https://redis.io/topics/transactions"&gt;Redis Transactions&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;We will use this approach where applicable. For example, &lt;code&gt;HMSET&lt;/code&gt; and &lt;code&gt;ZADD&lt;/code&gt; will also be executed in a transaction (see source code below).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ZADD&lt;/code&gt; command takes a key and our schema for it is &lt;code&gt;questions:{boardID}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All questions are mapped to a &lt;code&gt;boardID&lt;/code&gt;. For now, it’s a hardcoded value because I need one board only. In the future, I may decide to introduce more boards, for example, separately for Frontend, Backend, QA and so on. It’s good to have the needed structure in place.&lt;/p&gt;

&lt;p&gt;Endpoint:&lt;br&gt;
&lt;code&gt;POST /api/create_question&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/question_create.js"&gt;create_question&lt;/a&gt; serverless function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#approve-a-question"&gt;
  &lt;/a&gt;
  Approve a question
&lt;/h4&gt;

&lt;p&gt;Before a question becomes available for voting, it needs to be approved. Approving a question means the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update the score value in hash from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; using &lt;a href="https://redis.io/commands/hincrby"&gt;HINCRBY&lt;/a&gt; command.&lt;/li&gt;
&lt;li&gt;Update the score value in the &lt;code&gt;questions:{boardID}&lt;/code&gt; sorted set from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; using the &lt;a href="https://redis.io/commands/ZADD"&gt;ZADD&lt;/a&gt; command.&lt;/li&gt;
&lt;li&gt;Add the question &lt;code&gt;ID&lt;/code&gt; to the &lt;code&gt;questions:{boardID}:time&lt;/code&gt; sorted set with the timestamp as the score to fetch questions sorted by date (most recent questions) using the same &lt;code&gt;ZADD&lt;/code&gt; command.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can get the timestamp by looking up the question by its &lt;code&gt;ID&lt;/code&gt; using the &lt;a href="https://redis.io/commands/hget"&gt;HGET&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;Once we have it, we can execute the remaining three commands in a transaction. This will ensure that the score value is identical in the hash and the sorted set. &lt;/p&gt;

&lt;p&gt;To fetch all unapproved questions the &lt;a href="https://redis.io/commands/ZRANGEBYSCORE"&gt;ZRANGEBYSCORE&lt;/a&gt; command is used with the &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; values as &lt;code&gt;0&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ZRANGEBYSCORE&lt;/code&gt; returns elements ordered by a score from low to high while &lt;code&gt;ZREVRANGEBYSCORE&lt;/code&gt; - from high to low. We’ll use the latter to fetch questions ordered by the number of votes. &lt;/p&gt;

&lt;p&gt;Endpoint for fetching all unapproved questions:&lt;br&gt;
&lt;code&gt;GET /api/questions_unapproved&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Endpoint for approving a question:&lt;br&gt;
&lt;code&gt;PUT: /api/question_approve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/questions_unapproved.js"&gt;questions_unapproved&lt;/a&gt; serverless function. For the most part, this code is similar to other &lt;code&gt;GET&lt;/code&gt; endpoints and I will explain it in the next section.&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/question_approve.js"&gt;question_approve&lt;/a&gt; serverless function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fetch-approved-questions"&gt;
  &lt;/a&gt;
  Fetch approved questions
&lt;/h4&gt;

&lt;p&gt;To fetch all approved questions we use the &lt;code&gt;ZREVRANGEBYSCORE&lt;/code&gt; command setting the &lt;code&gt;min&lt;/code&gt; argument to &lt;code&gt;1&lt;/code&gt; in order to skip all unapproved questions.&lt;/p&gt;

&lt;p&gt;As a result, we get a list of IDs only. We will need to iterate over them to fetch question details using the &lt;a href="https://redis.io/commands/hgetall"&gt;HGETALL&lt;/a&gt; command. &lt;/p&gt;

&lt;p&gt;Depending on the number of questions fetched, this approach can become expensive and block the event loop in Node (I am using Node.js). There are a few ways to mitigate this potential problem. &lt;/p&gt;

&lt;p&gt;For example, we can use &lt;code&gt;ZREVRANGEBYSCORE&lt;/code&gt; with the optional &lt;code&gt;LIMIT&lt;/code&gt; argument to only get a range of elements. However, if the offset is large, &lt;a href="https://redis.io/commands/zrangebyscore"&gt;it can add up to O(N) time complexity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or we can use a Lua script to extend Redis by adding a custom command to fetch question details based on IDs from a stored set without us doing it manually in the application layer. &lt;/p&gt;

&lt;p&gt;In my opinion, it would be overhead in this case. Besides that, one must be very careful with Lua scripts because they block Redis and you can’t do expensive tasks with them without introducing performance degradation. This approach may be cleaner however we would still use the &lt;code&gt;LIMIT&lt;/code&gt; to avoid large amounts of data.&lt;/p&gt;

&lt;p&gt;Always research the pros and cons before the final implementation. As long as you understand the potential issues and have evaluated ways to mitigate them, you are safe.&lt;/p&gt;

&lt;p&gt;In my case, I know that it will take significant time before I will have enough questions to face this issue. No need for &lt;a href="https://en.wikipedia.org/wiki/Program_optimization"&gt;premature optimization&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Endpoint:&lt;br&gt;
&lt;code&gt;GET /api/questions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/questions.js"&gt;questions&lt;/a&gt; serverless function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vote-for-a-question"&gt;
  &lt;/a&gt;
  Vote for a question
&lt;/h4&gt;

&lt;p&gt;The process of upvoting a question consists of two important steps that both need to be executed as a transaction.&lt;/p&gt;

&lt;p&gt;However, before manipulating the score, we need to check if this question has no answer (&lt;code&gt;url&lt;/code&gt; property). In other words, we do not allow anyone to vote for questions that have been answered. &lt;/p&gt;

&lt;p&gt;The vote button is disabled for such questions. But we do not trust anyone on the internet and therefore check on the server if a given &lt;code&gt;ID&lt;/code&gt; exists in the &lt;code&gt;questions:{boardID}:answered&lt;/code&gt; sorted set using the &lt;a href="https://redis.io/commands/zscore"&gt;ZSCORE&lt;/a&gt; command. If so, we do nothing.&lt;/p&gt;

&lt;p&gt;We use the &lt;a href="https://redis.io/commands/hincrby"&gt;HINCRBY&lt;/a&gt; command to increment the score in the hash by &lt;code&gt;1&lt;/code&gt; and the &lt;a href="https://redis.io/commands/zincrby"&gt;ZINCRBY&lt;/a&gt; command to increment the score in the sorted set by &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Endpoint:&lt;br&gt;
&lt;code&gt;PATCH /api/question_upvote&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/question_upvote.js"&gt;question_upvote&lt;/a&gt; serverless function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fetch-most-recent-approved-questions"&gt;
  &lt;/a&gt;
  Fetch most recent approved questions
&lt;/h4&gt;

&lt;p&gt;It’s very similar to how we fetch all approved questions with the only difference being that we read another sorted set where the key schema is &lt;code&gt;questions:{boardID}:time&lt;/code&gt;. Since we used the timestamp as a score, the &lt;code&gt;ZREVRANGEBYSCORE&lt;/code&gt; command returns IDs sorted in descending order.&lt;/p&gt;

&lt;p&gt;Endpoint:&lt;br&gt;
&lt;code&gt;PATCH /api/questions_recent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/questions_recent.js"&gt;questions_recent&lt;/a&gt; serverless function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#update-a-question-with-an-answer"&gt;
  &lt;/a&gt;
  Update a question with an answer
&lt;/h4&gt;

&lt;p&gt;Updating or adding new properties to hashes is simple with the &lt;code&gt;HSET&lt;/code&gt; command. However, when we add an answer, we move the question from the &lt;code&gt;questions:{boardID}&lt;/code&gt; sorted set to the &lt;code&gt;questions:{boardID}:answered&lt;/code&gt; one preserving the score.&lt;/p&gt;

&lt;p&gt;To do so, we need to know the score of the question and we obtain it using the &lt;a href="https://redis.io/commands/zscore"&gt;ZSCORE&lt;/a&gt; command. Answered questions will be sorted by score in descending order.&lt;/p&gt;

&lt;p&gt;Then we can: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;update the hash with the &lt;code&gt;url&lt;/code&gt; property using the &lt;code&gt;HSET&lt;/code&gt; command; &lt;/li&gt;
&lt;li&gt;add the hash to the &lt;code&gt;questions:{boardID}:answered&lt;/code&gt; sorted set using &lt;code&gt;ZADD&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;remove the question from the &lt;code&gt;questions:{boardID}&lt;/code&gt; sorted set running the &lt;code&gt;ZREM&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;remove the question from the &lt;code&gt;questions:{boardID}:time&lt;/code&gt; sorted set running the &lt;code&gt;ZREM&lt;/code&gt; command.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All four commands are executed in a transaction. &lt;/p&gt;

&lt;p&gt;Endpoint:&lt;br&gt;
&lt;code&gt;PATCH /api/question_add_answer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/question_add_answer.js"&gt;question_add_answer&lt;/a&gt; serverless function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fetch-questions-with-answers"&gt;
  &lt;/a&gt;
  Fetch questions with answers
&lt;/h4&gt;

&lt;p&gt;Again, the process is similar to fetching all approved questions. This time from the &lt;code&gt;questions:{boardID}:answered&lt;/code&gt; sorted set.&lt;/p&gt;

&lt;p&gt;Endpoint:&lt;br&gt;
&lt;code&gt;PATCH /api/questions_unswered&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/questions_unswered.js"&gt;questions_unswered&lt;/a&gt; serverless function.&lt;/p&gt;




&lt;p&gt;Full &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis"&gt;source code&lt;/a&gt;.&lt;br&gt;
Working &lt;a href="https://techforitrecruiters.com/questions"&gt;DEMO&lt;/a&gt; on my website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Redis has a lot of use-cases going way beyond cache. I’ve demonstrated only one of the multiple applications for Redis that one can consider instead of reaching for an SQL database right away.&lt;/p&gt;

&lt;p&gt;Of course, if you already use a database, adding yet another one may be an overhead. &lt;/p&gt;

&lt;p&gt;Redis is very fast and scales well. Most commercial projects have Redis in their tech stack and often use them as an auxiliary database, not just in-memory cache.&lt;/p&gt;

&lt;p&gt;I strongly recommend learning about &lt;a href="https://redislabs.com/redis-best-practices/introduction/"&gt;Redis data patterns and best practices&lt;/a&gt; to realize how powerful it is and benefit from this knowledge in the long run. &lt;/p&gt;

&lt;p&gt;Check my previous article where I created &lt;a href="https://dev.to/sandorturanszky/how-to-create-linkedin-like-reactions-with-serverless-redis-4cad"&gt;LinkedIn-like reactions with Serverless Redis&lt;/a&gt; if you haven’t already.&lt;/p&gt;

&lt;p&gt;Follow for more.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>database</category>
    </item>
    <item>
      <title>Building a Contact Manager with Python, Flask, and HarperDB</title>
      <author>LordGhostX</author>
      <pubDate>Wed, 02 Jun 2021 19:45:13 +0000</pubDate>
      <link>https://dev.to/lordghostx/building-a-contact-manager-with-python-flask-and-harperdb-1h53</link>
      <guid>https://dev.to/lordghostx/building-a-contact-manager-with-python-flask-and-harperdb-1h53</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-harperdb"&gt;
  &lt;/a&gt;
  What is HarperDB?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://studio.harperdb.io/sign-up?utm_source=solomon"&gt;HarperDB&lt;/a&gt; is an easy database solution that helps collect, distribute, and analyze data throughout your organization. It provides unmatched flexibility, speed, security, and value for every data use case your organization and project require.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#benefits-of-using-harperdb-in-your-next-project"&gt;
  &lt;/a&gt;
  Benefits of Using HarperDB in Your Next Project
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Seamless integration into any project and tool using a straightforward REST API. It also comes with support for multiple languages via various drivers and plugins.&lt;/li&gt;
&lt;li&gt;HarperDB provides the ability to run your database anywhere, ranging from edge to cloud and anywhere in between.&lt;/li&gt;
&lt;li&gt;Support for executing complex, performant, ACID-compliant SQL queries on JSON with no data duplication.&lt;/li&gt;
&lt;li&gt;Functionality to search databases with JSON filters and SQL queries without the need of an ORM.&lt;/li&gt;
&lt;li&gt;You enjoy the flexibility of a NoSQL database with the security, consistency, and durability of an RDBMS by leveraging a dynamic schema with attribute level and role-based security in a single storage engine.&lt;/li&gt;
&lt;li&gt;HarperDB Studio offers a sleek and intuitive management UI that allows you to browse, query, and manage data all in one place, with no coding required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#getting-started-with-harperdb"&gt;
  &lt;/a&gt;
  Getting Started with HarperDB
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-harperdb-database-instance"&gt;
  &lt;/a&gt;
  Creating the HarperDB Database Instance
&lt;/h2&gt;

&lt;p&gt;We need to create a database for the contact manager. If you have not created an account on HarperDB before now, create one on &lt;a href="https://studio.harperdb.io/sign-up?utm_source=solomon"&gt;HarperDB’s website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the dashboard, click on &lt;code&gt;Create New HarperDB Cloud Instance&lt;/code&gt; as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CvkFPImT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x20gtfhfpd6y5dgrvieg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CvkFPImT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x20gtfhfpd6y5dgrvieg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, select a database instance type. A HarperDB instance is where you host your database. It can either be local (user-installed instance) or configured and managed on HarperDB servers (cloud instance). In this tutorial, we will be using the cloud instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eB3nPLJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdwatm8tuiuqfw5hu6cx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eB3nPLJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdwatm8tuiuqfw5hu6cx.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will need to provide information about your cloud instance, like name and authentication credentials. Click on the &lt;code&gt;Instance Details&lt;/code&gt; button after supplying this information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4ROputW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36n1g53vovrx6pp79y1q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4ROputW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36n1g53vovrx6pp79y1q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Store the credentials somewhere secure and easily retrievable as we will need them in later parts of this tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You are also required to provide the specification of the cloud instance. HarperDB allows you to choose the RAM, storage size, and region your instance should have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vdiBpB1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hc95trszs9rsncquue6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vdiBpB1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hc95trszs9rsncquue6u.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have provided all the configuration details for the cloud instance, click on the &lt;code&gt;Confirm Instance Details&lt;/code&gt; button, then finalize everything to create it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Cloud instances take several minutes to create. You’ll need to wait throughout this process. HarperDB also sends notifications via email on the instance creation status.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rsnC5P29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1esdhzd4ipe23zf8g18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rsnC5P29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1esdhzd4ipe23zf8g18.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-database-schemas"&gt;
  &lt;/a&gt;
  Creating the Database Schemas
&lt;/h2&gt;

&lt;p&gt;Let’s set up the necessary database &lt;code&gt;schema&lt;/code&gt; for our application. A &lt;code&gt;schema&lt;/code&gt; is a collection of tables in HarperDB, analogous to a database in SQL. Without schemas, you cannot store data in the database.&lt;/p&gt;

&lt;p&gt;To create a schema, first select the cloud instance in your dashboard, navigate to the &lt;code&gt;schemas&lt;/code&gt; section by the left, and then provide a name for it. In this tutorial, we will be using the name &lt;code&gt;contacts_repo&lt;/code&gt; as displayed in the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjqvNCF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqmedmlrrsom79jm9pqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjqvNCF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqmedmlrrsom79jm9pqa.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---vmtS_OK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jz4npej2r7pcz8s5s2js.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---vmtS_OK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jz4npej2r7pcz8s5s2js.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-schema-tables"&gt;
  &lt;/a&gt;
  Creating the Schema Tables
&lt;/h2&gt;

&lt;p&gt;Let’s set up &lt;code&gt;tables&lt;/code&gt; in our database schema. A &lt;code&gt;table&lt;/code&gt; is analogous to &lt;code&gt;tables&lt;/code&gt; in SQL databases like MySQL and &lt;code&gt;collections&lt;/code&gt; in NoSQL databases like MongoDB.&lt;/p&gt;

&lt;p&gt;To create a table. First, navigate to the &lt;code&gt;tables&lt;/code&gt; section by the left side of your dashboard, then provide a name and &lt;code&gt;hash_attribute&lt;/code&gt; for it. A &lt;code&gt;hash_attribute&lt;/code&gt; identifies every record in the database uniquely, and it is synonymous with &lt;code&gt;Primary Keys&lt;/code&gt; in a relational database.&lt;/p&gt;

&lt;p&gt;Here, we will set the name to &lt;code&gt;contacts&lt;/code&gt; and &lt;code&gt;hash_attribute&lt;/code&gt; to &lt;code&gt;contact_id&lt;/code&gt; as shown in the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--loguxW7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my0xs0o44kukw62gulny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--loguxW7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my0xs0o44kukw62gulny.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oHPJHhJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2vgu71r45z6v1gdlnts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oHPJHhJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2vgu71r45z6v1gdlnts.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-the-demo-application"&gt;
  &lt;/a&gt;
  Setting Up the Demo Application
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#cloning-the-contact-manager-repository"&gt;
  &lt;/a&gt;
  Cloning the Contact Manager Repository
&lt;/h2&gt;

&lt;p&gt;For the sake of convenience, I have written the user interface of the contact manager (with Flask and Bootstrap) that we will use in this article. To get started, you will need to clone &lt;a href="https://github.com/LordGhostX/harperdb-contact-manager"&gt;my repository&lt;/a&gt; and initialize the app like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/LordGhostX/harperdb-contact-manager
&lt;span class="nb"&gt;cd &lt;/span&gt;harperdb-contact-manager
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TZE-L_0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4ahfl5ffpog51loy8ob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TZE-L_0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4ahfl5ffpog51loy8ob.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;user-interface&lt;/code&gt; directory contains only the user interface of the contact manager. In contrast, the &lt;code&gt;full-application&lt;/code&gt; directory contains the entire application (HarperDB + Python + Flask) that we will build in this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-the-projects-requirements"&gt;
  &lt;/a&gt;
  Installing the Project’s Requirements
&lt;/h2&gt;

&lt;p&gt;You need to install the contact manager’s requirements before you can run it. In your terminal, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;user-interface  
pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the application to make sure it’s working. In your terminal, type:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxpdVdJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewfymxxmsotxz3gz45w5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxpdVdJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewfymxxmsotxz3gz45w5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To view the user interface of our application, head to your browser and open the URL &lt;code&gt;http://127.0.0.1:5000&lt;/code&gt;, you should get a response similar to the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H5KSIhkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ybmqika6sn4wvllqcm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H5KSIhkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ybmqika6sn4wvllqcm4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#integrating-harperdb-with-python-and-flask"&gt;
  &lt;/a&gt;
  Integrating HarperDB with Python and Flask
&lt;/h1&gt;

&lt;p&gt;Now that we have set up the base application and database schemas, let’s move to communicating with the database using Python, as shown in the &lt;a href="https://github.com/HarperDB/harperdb-sdk-python"&gt;SDK documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-harperdb-python-sdk"&gt;
  &lt;/a&gt;
  Installing HarperDB Python SDK
&lt;/h2&gt;

&lt;p&gt;We need to get the Python SDK for HarperDB. It provides functionalities that allow an application to make queries to the HarperDB database instance. It’s available on pip, making it installable with a single command in the terminal.&lt;/p&gt;

&lt;p&gt;In the terminal, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;harperdb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuring-harperdb-python-sdk"&gt;
  &lt;/a&gt;
  Configuring HarperDB Python SDK
&lt;/h2&gt;

&lt;p&gt;We need to import the HarperDB SDK into our Flask application to use it. To do this, add the following code to the &lt;code&gt;app.py&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;harperdb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have to initialize the Python SDK client with the database instance authentication credentials we saved earlier. Add the following code to the &lt;code&gt;app.py&lt;/code&gt; file right after initializing the Flask app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"SECRET_KEY"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"SECRET_KEY"&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;harperdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HarperDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"HARPERDB_URL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"HARPERDB_USERNAME"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"HARPERDB_PASSWORD"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Don’t forget to replace the credentials placeholders with the appropriate values for your application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;HARPERDB_URL&lt;/code&gt; is present in the HarperDB dashboard, where all the database instances are displayed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mC90y_kr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg29y116ui5s8uc5v4i1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mC90y_kr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg29y116ui5s8uc5v4i1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-harperdb-database-connection"&gt;
  &lt;/a&gt;
  Testing the HarperDB Database Connection
&lt;/h2&gt;

&lt;p&gt;To test our HarperDB cloud instance and credentials, we will be querying our database for its description. To do this, add the block of code below right before running the application in the &lt;code&gt;app.py&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe_all&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y91BlHla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36ct1ash8a5nzjsd087a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y91BlHla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36ct1ash8a5nzjsd087a.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run the &lt;code&gt;app.py&lt;/code&gt; file. If you get a response like an image below, the configuration is correct. If you don’t, check if your credentials are valid and correct.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HIDZJzSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4nt7mafk9hr5xmcpp5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HIDZJzSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4nt7mafk9hr5xmcpp5a.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#making-queries-to-harperdb"&gt;
  &lt;/a&gt;
  Making Queries to HarperDB
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#creating-new-documents-in-harperdb"&gt;
  &lt;/a&gt;
  Creating New Documents in HarperDB
&lt;/h2&gt;

&lt;p&gt;To create new documents in our HarperDB schema, we need to run an &lt;code&gt;INSERT&lt;/code&gt; query in the database via the Python SDK. HarperDB provides two methods to do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The SQL way: This involves running a SQL query to insert data into the database.&lt;/li&gt;
&lt;li&gt;The NoSQL way: This involves using the &lt;code&gt;insert&lt;/code&gt; method of the Python SDK to insert data into the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is sample Python code to demonstrate both methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# SQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"INSERT INTO contacts_repo.contacts (name, email) VALUES ('LordGhostX', 'lordghostx@email.com')"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# NoSQL way
&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"LordGhostX"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"lordghostx@email.com"&lt;/span&gt;&lt;span class="p"&gt;}])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: If you omit the &lt;code&gt;hash_attribute&lt;/code&gt; metadata when executing an &lt;code&gt;INSERT&lt;/code&gt; query, HarperDB will automatically generate one for you and store it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code above executes an &lt;code&gt;INSERT&lt;/code&gt; query to your HarperDB cloud database. It creates a document in the &lt;code&gt;contacts&lt;/code&gt; table, in the &lt;code&gt;contacts_repo&lt;/code&gt; schema with the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; metadata.&lt;/p&gt;

&lt;p&gt;We can integrate this into our contact manager by updating the &lt;code&gt;contacts&lt;/code&gt; route with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/contacts/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;contacts&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;contact_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s"&gt;"job"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"job"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"addContact"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;contact_data&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successfully added new contact"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZ-bfq9U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t79id6vnfbizhvdsygww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZ-bfq9U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t79id6vnfbizhvdsygww.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-documents-from-harperdb"&gt;
  &lt;/a&gt;
  Reading Documents from HarperDB
&lt;/h2&gt;

&lt;p&gt;To read documents from our HarperDB tables, we need to run a &lt;code&gt;SELECT&lt;/code&gt; or &lt;code&gt;SEARCH&lt;/code&gt; query in the database via the Python SDK. HarperDB provides two methods to do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The SQL way: This involves running a SQL query to select the data from the database.&lt;/li&gt;
&lt;li&gt;The NoSQL way: This involves using either the &lt;code&gt;search_by_hash&lt;/code&gt; or &lt;code&gt;search_by_value&lt;/code&gt; methods of the Python SDK to select data from the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is sample Python code to demonstrate both methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# SQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SELECT * FROM contacts_repo.contacts"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# NoSQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search_by_hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"hash_attribute"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# returns all documents with the specified hash attributes
&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search_by_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"LordGhostX"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns all documents with the specified values
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above executes a &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;SEARCH&lt;/code&gt; query to your HarperDB cloud database. It fetches all the documents in the &lt;code&gt;contacts&lt;/code&gt; table, in the &lt;code&gt;contacts_repo&lt;/code&gt; schema with the specified hash attributes or values.&lt;/p&gt;

&lt;p&gt;We can integrate this into our contact manager by updating the rendering of the &lt;code&gt;contacts&lt;/code&gt; route in the &lt;code&gt;app.py&lt;/code&gt; file with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;contacts_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"SELECT * FROM contacts_repo.contacts ORDER BY name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contacts_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;contacts_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYsGRsFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3m1ceub30pqsa5t0n7o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYsGRsFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3m1ceub30pqsa5t0n7o.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also need to update the contacts page to render the data fetched from the HarperDB request. Update the contacts table body &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; in the &lt;code&gt;contacts.html&lt;/code&gt; file with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
  {% for contact in contacts_data %}
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contactName-{{ contact.contact_id }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ contact.name }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contactEmail-{{ contact.contact_id }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ contact.email }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contactPhone-{{ contact.contact_id }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ contact.phone }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contactJob-{{ contact.contact_id }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ contact.job }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;"#contactModal"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"displayContactInfo('{{ contact.contact_id }}')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;View Details&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  {% endfor %}
&lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMF6RAMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrd46pn332eayyxusqza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMF6RAMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrd46pn332eayyxusqza.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-documents-in-harperdb"&gt;
  &lt;/a&gt;
  Updating Documents in HarperDB
&lt;/h2&gt;

&lt;p&gt;To update documents in our HarperDB tables, we need to run an &lt;code&gt;UPDATE&lt;/code&gt; query in the database via the Python SDK. HarperDB provides two methods to do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The SQL way: This involves running a SQL query to update the data in the database.&lt;/li&gt;
&lt;li&gt;The NoSQL way: This involves using the &lt;code&gt;update&lt;/code&gt; method of the Python SDK to update data in the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is sample Python code to demonstrate both methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# SQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UPDATE contacts_repo.contacts SET email='lordghostx@newemail.com' WHERE contact_id='sample_hash_attribute'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# NoSQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;"contact_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sample_hash_attribute"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"lordghostx@newemail.com"&lt;/span&gt;&lt;span class="p"&gt;}])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above executes an &lt;code&gt;UPDATE&lt;/code&gt; query to your HarperDB cloud database. It updates the document in the &lt;code&gt;contacts&lt;/code&gt; table, in the &lt;code&gt;contacts_repo&lt;/code&gt; schema with the specified hash attributes with the new values supplied.&lt;/p&gt;

&lt;p&gt;We can integrate this into our contact manager by updating the action handling in the &lt;code&gt;contacts&lt;/code&gt; route with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"updateContact"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;contact_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"contact_id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contactID"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;contact_data&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successfully updated contact information"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OTG8IiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1k9ti0jt9wdumw7612o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OTG8IiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1k9ti0jt9wdumw7612o.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NR6kukh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2sqxk8a3ibf93acgx93b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NR6kukh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2sqxk8a3ibf93acgx93b.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lgig-0AZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltvdxfwn5btr3tps5m5o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lgig-0AZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltvdxfwn5btr3tps5m5o.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deleting-documents-from-harperdb"&gt;
  &lt;/a&gt;
  Deleting Documents from HarperDB
&lt;/h2&gt;

&lt;p&gt;To delete documents from our HarperDB tables, we need to run a &lt;code&gt;DELETE&lt;/code&gt; query in the database via the Python SDK. HarperDB provides two methods to do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The SQL way: This involves running a SQL query to delete the data from the database.&lt;/li&gt;
&lt;li&gt;The NoSQL way: This involves using the &lt;code&gt;delete&lt;/code&gt; method of the Python SDK to delete data from the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is sample Python code to demonstrate both methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# SQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DELETE FROM contacts_repo.contacts WHERE name='LordGhostX'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# NoSQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"sample_hash_attribute"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above executes a &lt;code&gt;DELETE&lt;/code&gt; query to your HarperDB cloud database. It deletes the document in the &lt;code&gt;contacts&lt;/code&gt; table, in the &lt;code&gt;contacts_repo&lt;/code&gt; schema with the specified &lt;code&gt;hash_attribute&lt;/code&gt;, or has the value &lt;code&gt;LordGhostX&lt;/code&gt; in the &lt;code&gt;name&lt;/code&gt; column.&lt;/p&gt;

&lt;p&gt;We can integrate this into our contact manager by updating the &lt;code&gt;logout&lt;/code&gt; route with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/contacts/delete/&amp;lt;string:contact_id&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_contact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contact_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;contact_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successfully deleted contact information"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoiB-pav--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq33tr58ggecxug58sy4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoiB-pav--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq33tr58ggecxug58sy4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;By integrating HarperDB with Python and Flask, we built a contact manager with CRUD functionalities with minimal effort. We saw how to create cloud databases, manage them, and execute queries using HarperDB.&lt;/p&gt;

&lt;p&gt;The source code of the contact manager is available on &lt;a href="https://github.com/LordGhostX/harperdb-contact-manager"&gt;GitHub&lt;/a&gt;. It was exciting integrating HarperDB into a Flask application, and I can’t wait to see the amazing things you create with it!&lt;/p&gt;

&lt;p&gt;If you have any questions, don't hesitate to contact me on Twitter: &lt;a href="https://twitter.com/LordGhostX"&gt;@LordGhostX&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>database</category>
      <category>beginners</category>
    </item>
    <item>
      <title>AWS Security Groups - Once And For All</title>
      <author>Meir Gabay</author>
      <pubDate>Wed, 02 Jun 2021 19:03:59 +0000</pubDate>
      <link>https://dev.to/doitintl/aws-security-groups-once-and-for-all-176f</link>
      <guid>https://dev.to/doitintl/aws-security-groups-once-and-for-all-176f</guid>
      <description>&lt;p&gt;As part of securing applications in the cloud, it's important to set the proper network rules, for maximum security and to minimize collateral damage.&lt;/p&gt;

&lt;p&gt;Here's a quote from the &lt;a href="https://www.hhs.gov/hipaa/for-professionals/security/laws-regulations/index.html"&gt;official HIPAA&lt;/a&gt; requirement for &lt;em&gt;Transmission Security&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A covered entity must implement &lt;strong&gt;technical security measures&lt;/strong&gt; that &lt;strong&gt;guard&lt;/strong&gt; against unauthorized access to e-PHI that is being transmitted over an electronic &lt;strong&gt;network&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#hipaa"&gt;
  &lt;/a&gt;
  HIPAA
&lt;/h2&gt;

&lt;p&gt;For those of you who are not familiar with HIPAA, it's a very strict regulation that requires protecting medical records and other &lt;strong&gt;p&lt;/strong&gt;ersonal &lt;strong&gt;h&lt;/strong&gt;ealth &lt;strong&gt;i&lt;/strong&gt;nformation (PHI). &lt;/p&gt;

&lt;p&gt;Most startup companies that develop a product for the medical-healthcare sector, aspire to become &lt;a href="https://www.hhs.gov/hipaa/for-professionals/regulatory-initiatives/index.html"&gt;HIPAA compliant&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Here's the question you need to ask yourself when it comes to &lt;em&gt;Transmission Security&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What security measures are currently used to protect e-PHI during&lt;br&gt;
transmission? &lt;a href="https://www.hhs.gov/sites/default/files/ocr/privacy/hipaa/administrative/securityrule/techsafeguards.pdf"&gt;HIPAA - Security Rule - Technical Safeguards&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#network-security-layers-overview"&gt;
  &lt;/a&gt;
  Network Security Layers Overview
&lt;/h2&gt;

&lt;p&gt;I'd have to write a book to cover all the network security layers, so let's get a quick glance at the most common network security layers in AWS.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Application - &lt;a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html"&gt;AWS Web Application Firewall (WAF)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subnet - &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"&gt;AWS Network Access Lists (NACLs)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(Virtual) Firewall - &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"&gt;AWS Security Groups&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Network - &lt;a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/what-is-aws-network-firewall.html"&gt;AWS Network Firewall&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this blog post, I'll focus on the &lt;strong&gt;Virtual Firewall&lt;/strong&gt; layer. In AWS, the implementation of a Virtual Firewall is done with AWS Security Groups.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stateful-vs-stateless"&gt;
  &lt;/a&gt;
  Stateful Vs. Stateless
&lt;/h2&gt;

&lt;p&gt;Security groups are &lt;strong&gt;stateful&lt;/strong&gt;, the &lt;a href="%5Bstateful%5D(https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html)"&gt;official docs&lt;/a&gt;, describe it as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you send a request from your instance, the response traffic for that request is allowed to flow in regardless of inbound security group rules. Responses to allowed inbound traffic are allowed to flow out, regardless of outbound rules. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By default, a security group is created without any inbound rules. That means it doesn't accept traffic from any device that attempts to &lt;strong&gt;initiate&lt;/strong&gt; a connection. &lt;/p&gt;

&lt;p&gt;The default outbound rule is &lt;code&gt;0.0.0.0/0&lt;/code&gt; which allows devices to &lt;strong&gt;initiate&lt;/strong&gt; connections to anywhere. Once a connection is initiated, the security group rule is &lt;strong&gt;ignored&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So what is stateless? We'll cover that in the &lt;em&gt;Blocking Specific IPs&lt;/em&gt; section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security-groups-ground-rules"&gt;
  &lt;/a&gt;
  Security Groups Ground Rules
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Once a connection is initiated, the security group rules are ignored and traffic is allowed for the new connection.&lt;/li&gt;
&lt;li&gt;There's no way to enforce security group rules on existing connections. Rules are applied to new connections only, so you must terminate existing connections, to force new security group rules.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#practical-example"&gt;
  &lt;/a&gt;
  Practical Example
&lt;/h3&gt;

&lt;p&gt;Let's say you want to SSH from your local machine to an EC2 instance, that has a public IP address.&lt;/p&gt;

&lt;p&gt;To achieve that, you'll add an inbound security rule that allows &lt;code&gt;SSH&lt;/code&gt; connections from &lt;code&gt;My IP&lt;/code&gt; (your IP). And then, you'll SSH to the EC2 and it'll work as expected.&lt;/p&gt;

&lt;p&gt;Here comes the tricky part; What would happen if, during your SSH session, someone removes your inbound security group rule? Nothing. As mentioned earlier, security group rules &lt;strong&gt;apply to new connections only&lt;/strong&gt;, since your SSH session is active, you can still continue with your work. If by any chance, you get disconnected for even a split second, the new security group rules will take place and you'll get disconnected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#allow-or-deny"&gt;
  &lt;/a&gt;
  Allow Or Deny?
&lt;/h2&gt;

&lt;p&gt;This is very confusing; One might want to deny traffic from a known set of IP addresses. It is common to think that Security Groups can be used to &lt;strong&gt;block&lt;/strong&gt; traffic &lt;strong&gt;explicitly&lt;/strong&gt;, though it &lt;strong&gt;is impossible&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Security Groups are designed to &lt;strong&gt;Allow&lt;/strong&gt; access from/to sources, and &lt;strong&gt;implicitly&lt;/strong&gt; block unknown sources. When you add a security group rule, you don't have an option to set its type (Allow/Deny), it is &lt;strong&gt;Allowed&lt;/strong&gt; by design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blocking-specific-ips"&gt;
  &lt;/a&gt;
  Blocking Specific IPs
&lt;/h3&gt;

&lt;p&gt;To address the need for explicitly blocking specific sources, you can use AWS Network Access Lists (NACLs), which are stateless, and as part of setting a Network Access Rule, you'll have the option to set its type (Allow/Deny). It's important to mention that NACLs operate at the Subnet level, while Security Groups operate at the VPC level.&lt;/p&gt;

&lt;p&gt;Reminding you that NACLs are stateless, which means you'll need to create a rule for both inbound and outbound for any source/target device. Unlike Security Groups, if you haven't &lt;strong&gt;explicitly&lt;/strong&gt; allowed a connection both inbound/outbound, it is denied by default. The default NACLs rules, for both inbound and outbound, are &lt;code&gt;All traffic, from/to: 0.0.0.0/0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: I rarely use NACLs, unless there's a specific need to block a set of IP addresses at the subnet's level, which in my experience, is quite rare and should be used with cautious.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#allow-access-according-to-ip-and-request-uripath"&gt;
  &lt;/a&gt;
  Allow Access According To IP and Request URI-Path
&lt;/h3&gt;

&lt;p&gt;One might think "but hey, I want to allow access to &lt;code&gt;https://myapp.com/admin/dashboard&lt;/code&gt; from my IP only, how can I do that? Since HTTP requests are handled at the application layer, you can use the AWS Web Application Firewall. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a rule for &lt;a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-fields.html"&gt;web request component settings&lt;/a&gt; with the required &lt;code&gt;URI Path&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a set of IPs and add your IP, call this set &lt;code&gt;whitelisted&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create another rule that whitelists your &lt;a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-reusable-entities.html"&gt;IP address&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's the &lt;strong&gt;pseudo-code&lt;/strong&gt; of the set of rules that should be created&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if &lt;/span&gt;AND&lt;span class="o"&gt;(&lt;/span&gt;
URI-Path &lt;span class="o"&gt;==&lt;/span&gt; https://myapp.com/admin/dashboard,
SourceIP &lt;span class="o"&gt;!=&lt;/span&gt; Whitelisted-IPs
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;then &lt;/span&gt;Block
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#selecting-the-right-defense"&gt;
  &lt;/a&gt;
  Selecting The Right Defense
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Security Groups are designed to &lt;strong&gt;Allow&lt;/strong&gt; traffic from/to sources, at the VPC level.&lt;/li&gt;
&lt;li&gt;NACLs can be used for blocking a set of IP addresses (bots, bad reputation, etc.) at the Subnet level.&lt;/li&gt;
&lt;li&gt;AWS WAF can be used for blocking all traffic to a specific &lt;code&gt;URI-Path&lt;/code&gt;, and allowing traffic only from a specific set of IP addresses (whitelisted).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"&gt;Security groups for your VPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/instance-vpc-troubleshoot/"&gt;How do I troubleshoot instance connection timeout errors in Amazon VPC?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/connect-endpoint-service-vpc/"&gt;Why can't I connect to an endpoint service from my interface endpoint in an Amazon VPC?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/vpc-peering-connectivity/"&gt;How do I resolve Amazon VPC peering network connectivity issues?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cover image - &lt;a href="http://123emoji.com/hacker-boy-sticker-5682/"&gt;Hackerboy Emoticons&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;When I first started my journey with AWS, Security Groups were one of the first components that I encountered. I also didn't have any background with networks, so stateless and stateful didn't mean anything to me. Once I broke it down and found out which service should be used for each purpose, it was all clear. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>network</category>
      <category>security</category>
      <category>hipaa</category>
    </item>
  </channel>
</rss>
