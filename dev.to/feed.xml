<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Deep Learning Library From Scratch 2: Backpropagation</title>
      <author>ashwins-code</author>
      <pubDate>Sat, 01 Jan 2022 08:26:51 +0000</pubDate>
      <link>https://dev.to/ashwinscode/deep-learning-library-from-scratch-2-backpropagation-116m</link>
      <guid>https://dev.to/ashwinscode/deep-learning-library-from-scratch-2-backpropagation-116m</guid>
      <description>&lt;p&gt;Hello and welcome to this second post in this series where we build a deep learning library from scratch.&lt;/p&gt;

&lt;p&gt;The code for this blog series can be found in &lt;a href="https://github.com/ashwins-code/Zen-Deep-Learning-Library"&gt;this&lt;/a&gt; Github repo.&lt;/p&gt;

&lt;p&gt;Please also look at my Github &lt;a href="https://github.com/ashwins-code"&gt;profile&lt;/a&gt; and star anything you like or give feedback on how I can improve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-post"&gt;
  &lt;/a&gt;
  Last Post
&lt;/h2&gt;

&lt;p&gt;In the last post (found &lt;a href="https://dev.to/ashwinscode/deep-learning-library-from-scratch-1-feedforward-networks-2485"&gt;here&lt;/a&gt;), we implemented linear layers and common activation functions, and successfully built the forward pass of the neural network.&lt;/p&gt;

&lt;p&gt;So far, our model can only make predictions, but has no facility to train and correct its predictions. This is what we will be covering today by implementing a process called &lt;strong&gt;backpropagation&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview-of-how-backpropagation-works"&gt;
  &lt;/a&gt;
  Overview of how backpropagation works
&lt;/h2&gt;

&lt;p&gt;When a neural network trains, it is given a dataset with inputs and their corresponding output. &lt;/p&gt;

&lt;p&gt;The network would produce its prediction from the dataset's input and calculate how far away its prediction is from the real output given in the dataset (this is called the &lt;strong&gt;loss&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;The aim of training a neural network is to minimise this loss.&lt;/p&gt;

&lt;p&gt;After the loss is calculated, the weights and biases of the network are tweaked in such a way that it reduces the loss value. Remember in the previous post, weights and biases are our adjustable network parameters, which are used in the calculation of the network output.&lt;/p&gt;

&lt;p&gt;This process repeats several number of times, with the loss hopefully decreasing with each repetition. Each repetition is known as an &lt;strong&gt;epoch&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loss-functions"&gt;
  &lt;/a&gt;
  Loss Functions
&lt;/h2&gt;

&lt;p&gt;There are many different loss functions, however we will only look at the Mean Squared Error function in this post. More loss functions will be look at in future posts.&lt;/p&gt;

&lt;p&gt;Loss functions receive the raw error of the network (which is calculated with predicted outputs - actual outputs) and produce a measurement of how bad the error is.&lt;/p&gt;

&lt;p&gt;Mean Squared Error (MSE) takes the error vector and returns the mean of all the squared values in the vector.&lt;/p&gt;

&lt;p&gt;For example...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Network output: [1, 2, 3]
Actual outputs: [3, 2, 1]
Error: [-2, 0, 2]
Loss: 2.6666666 ( ( (-2)**2 + (0)**2 + (2)**2 ) / 3 )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The reason why you square the errors first, instead of calculating the mean immediately is so that any negative values in the error vector are treated the same as positive values in the error vector (since a negative number squared is positive).&lt;/p&gt;

&lt;p&gt;Here is the our python class for MSE...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#loss.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MSE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#backpropagation"&gt;
  &lt;/a&gt;
  Backpropagation
&lt;/h2&gt;

&lt;p&gt;Backpropagation is the training process of the network.&lt;/p&gt;

&lt;p&gt;The aim of the neural network training process is to &lt;strong&gt;minimise&lt;/strong&gt; the loss. &lt;/p&gt;

&lt;p&gt;This can be treated as an &lt;strong&gt;optimisation&lt;/strong&gt; problem, whose solutions rely heavily on calculus - &lt;strong&gt;differentiation&lt;/strong&gt; to be more specific. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#computing-gradients"&gt;
  &lt;/a&gt;
  Computing gradients
&lt;/h4&gt;

&lt;p&gt;The first step in backpropagation is to find the gradient of all the weights and biases in the network, with respect to the loss function.&lt;/p&gt;

&lt;p&gt;Let's use an example to demonstrate...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our small example network consist of &lt;br&gt;
1 Linear layer&lt;br&gt;
1 Sigmoid layer&lt;/p&gt;

&lt;p&gt;So the whole network's output calculation will be as such...&lt;br&gt;
x - the network input&lt;br&gt;
w - the linear layer's weight&lt;br&gt;
b - the linear layer's bias&lt;br&gt;
a - linear layer output&lt;br&gt;
pred - network output / sigmoid output&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QpYcZU_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zchfui44agm9rnrov793.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QpYcZU_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zchfui44agm9rnrov793.gif" alt="Image description" width="100" height="15"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ChOUJ7B7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wu172lv79jf3sw7b1iqy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ChOUJ7B7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wu172lv79jf3sw7b1iqy.gif" alt="Image description" width="119" height="39"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now let's calculate the loss&lt;br&gt;
y - the expected output for x&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Bi0VotQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/726cvhigigt9zh7wzuj8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Bi0VotQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/726cvhigigt9zh7wzuj8.gif" alt="Image description" width="133" height="17"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gE4X-nd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13dhbt0rk3mx3z0bqrjs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gE4X-nd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13dhbt0rk3mx3z0bqrjs.gif" alt="Image description" width="105" height="16"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now we have to find the gradient of the weights/biases with respect to the loss&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bQXCG-qX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qonjvm0wxpr56eju5o0q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bQXCG-qX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qonjvm0wxpr56eju5o0q.gif" alt="Image description" width="295" height="43"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--isHr9Mg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vksxhyypz0e2kxs0cmg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--isHr9Mg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vksxhyypz0e2kxs0cmg.gif" alt="Image description" width="291" height="43"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This step utilises the &lt;strong&gt;chain rule&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have now calculated the gradients of the parameters with respect to the loss.&lt;/p&gt;

&lt;p&gt;The general rule for calculating the gradient weights/biases of a certain layer with respect to the loss is...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Differentiate each layer's output with respect to it's input (starting from the last layer till you reach the layer whose parameters you want to adjust)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multiply all those results together and call this &lt;strong&gt;grad&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once you have reached the desired layer, differentiate its output with respect to its weight (call this &lt;strong&gt;w_grad&lt;/strong&gt;) and differentiate with respect to its bias (call this &lt;strong&gt;b_grad&lt;/strong&gt;). &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multiply w_grad and grad to get the gradient of loss with respect to the layer's weight. Do the same with b_grad, to get the gradient of loss with respect to the layer's bias. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this in mind, here is the code for all our layers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#layers.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Activation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Layer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Layer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_gradient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b_gradient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sigmoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Activation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Activation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Softmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Activation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;exps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exps&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keepdims&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;
        &lt;span class="n"&gt;tensor1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;einsum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ij,ik-&amp;gt;ijk'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;tensor2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;einsum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ij,jk-&amp;gt;ijk'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;dSoftmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tensor2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;tensor1&lt;/span&gt;
        &lt;span class="n"&gt;dz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;einsum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ijk,ik-&amp;gt;ij'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dSoftmax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dz&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tanh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Activation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tanh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;em&gt;backward&lt;/em&gt; method in each class is a function that differentiates the layer's output with respect to its input.&lt;br&gt;
Feel free to look up each of the activation function's derivates, to make the code make more sense.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The backward function for the linear layer is different, since it not only calculates the gradient of the output with respect to the input, but to its parameters too.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;p&gt;The differentiation rule for matrix multiplication is as follows, where x and y are matrices being multiplied together&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--36Q7_zAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lomunmaw4rrhw4zu6e8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--36Q7_zAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lomunmaw4rrhw4zu6e8.gif" alt="Image description" width="66" height="12"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gS79oz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9g4hm5yz73ki9n249tq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gS79oz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9g4hm5yz73ki9n249tq.gif" alt="Image description" width="65" height="42"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dBjmtA9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6l3b9nbcxjnt7iwuf3oz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dBjmtA9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6l3b9nbcxjnt7iwuf3oz.gif" alt="Image description" width="65" height="38"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#optimising-parameters-with-stochastic-gradient-descent"&gt;
  &lt;/a&gt;
  Optimising parameters with Stochastic Gradient Descent
&lt;/h4&gt;

&lt;p&gt;There are many ways of optimising network parameters, but in this post we will cover the most basic method which is &lt;strong&gt;Stochastic Gradient Descent (SGD)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;SGD is very simple. It takes each parameter's calculated gradient and multiplies it by a specified learning rate. The respective parameter is then subtracted by this result.&lt;/p&gt;

&lt;p&gt;The reason why a learning rate is used is to control how fast the network learns. &lt;/p&gt;

&lt;p&gt;The best learning rate value minimises the cost in a small number of epochs.&lt;br&gt;
A too small learning rate minimises the cost too, but after several epochs, so would take time.&lt;br&gt;
A too large learning rate would make the loss approach a value which is not its minimum, so the network fails to train properly.&lt;/p&gt;

&lt;p&gt;Here is the code for MSE&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#optim.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;layers&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tqdm&lt;/span&gt;
&lt;span class="c1"&gt;#tqdm is a progress bar, so we can see how far into the epoch we are
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SGD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lr&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;grad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="n"&gt;grad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#calculates layer parameter gradients
&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Layer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w_gradient&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt;
                &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b_gradient&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With all things in place to train the network, we can add a train function to our model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#layers.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;loss&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;optim&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#...
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;optim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SGD&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MSE&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
            &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;optim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"epoch &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; loss &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-it-out"&gt;
  &lt;/a&gt;
  Testing it out!
&lt;/h2&gt;

&lt;p&gt;We are going to build and train a neural network so that it can perform as an XOR gate.&lt;/p&gt;

&lt;p&gt;XOR gates take in two inputs. The inputs can either be 0 or 1 (representing False or True)&lt;/p&gt;

&lt;p&gt;If both the inputs are the same, the gate outputs 0.&lt;br&gt;
If both the inputs are not the same, the gate outputs 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#main.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;layers&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;loss&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;optim&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;


&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; 

&lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Relu&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sigmoid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sigmoid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;optim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;optim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SGD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MSE&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output
...
epoch 390 loss 0.0011290060124405485
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 391 loss 0.0011240809175767955
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 392 loss 0.0011191976855805586
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 393 loss 0.0011143557916784605
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 394 loss 0.0011095547197546522
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 395 loss 0.00110479396217416
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 396 loss 0.0011000730196106248
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 397 loss 0.0010953914008780786
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 398 loss 0.0010907486227668803
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 399 loss 0.0010861442098835058
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 400 loss 0.0010815776944942087
[[0.96955654]
 [0.03727081]
 [0.03264158]
 [0.96955654]]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the result is really good and not too far off from the real outputs (a loss of 0.001 is really low).&lt;/p&gt;

&lt;p&gt;We can also adjust our model to work with other activation functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#main.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;layers&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;loss&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;optim&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;


&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; 

&lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Relu&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sigmoid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Softmax&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;optim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;optim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SGD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MSE&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output
epoch 390 loss 0.00045429759266240227
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 391 loss 0.0004524694487356741
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 392 loss 0.000450655387643655
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 393 loss 0.00044885525012255907
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;00:00, 6236.88it/s]
epoch 394 loss 0.00044706887927775473
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 395 loss 0.0004452961205401462
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;00:00, 5748.25it/s]
epoch 396 loss 0.0004435368216234964
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 397 loss 0.00044179083248269265
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 398 loss 0.00044005800527292425
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 399 loss 0.00043833819430972714
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00&amp;lt;?, ?it/s]
epoch 400 loss 0.0004366312560299245
[[0.01846441 0.98153559]
 [0.97508489 0.02491511]
 [0.97909267 0.02090733]
 [0.01846441 0.98153559]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow! We have successfully built a working neural network. This can be successfully applied to more useful things, such as the MNIST dataset, which we will use soon in another post.&lt;/p&gt;

&lt;p&gt;The next post will go through more loss functions and more optimisation functions.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>python</category>
      <category>numpy</category>
      <category>deeplearning</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Socket.io Use as Real Time Application like Chatting Gamming in React ,Or Any Application in Express</title>
      <author>Deepak</author>
      <pubDate>Sat, 01 Jan 2022 07:17:08 +0000</pubDate>
      <link>https://dev.to/deepakjaiswal/socketio-use-as-real-time-application-like-chatting-gamming-in-react-or-any-application-in-express-3720</link>
      <guid>https://dev.to/deepakjaiswal/socketio-use-as-real-time-application-like-chatting-gamming-in-react-or-any-application-in-express-3720</guid>
      <description>&lt;p&gt;hello today we discuss a famous library for real time application&lt;br&gt;
like chat app, gamming room etc.&lt;/p&gt;

&lt;p&gt;socket.io is a server side library. its use in backend to send messages&lt;br&gt;
that send bye user store the message and we send their message to client.&lt;/p&gt;

&lt;p&gt;socket-client.io is a frontend library to connect server and using server link.&lt;br&gt;
client emit the message to the server and server on their emit and server emit their message &lt;br&gt;
and client on their emitted message into frontend side.&lt;/p&gt;

&lt;p&gt;before message we make connection between so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//server.js

io.on('connection',(socket)=&amp;gt;{

console.log("connected")

socket.on('send_message',(msg)=&amp;gt;{

socket.emit('send_message',msg);

});

socket.on('disconnect',()=&amp;gt;{
console.log("disconnect")
})

});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//client.js

let msg="hi i am sandeep"

socket.emit('send_message',msg);


socket.on('send_message',msg=&amp;gt;{

console.log(msg)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OOnbUwbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbik6fhwimu101yaa1dw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OOnbUwbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbik6fhwimu101yaa1dw.png" alt="Image description" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why are some frameworks so popular?</title>
      <author>Shubham Patil</author>
      <pubDate>Sat, 01 Jan 2022 06:56:02 +0000</pubDate>
      <link>https://dev.to/shubhampatilsd/why-are-some-frameworks-so-popular-3g58</link>
      <guid>https://dev.to/shubhampatilsd/why-are-some-frameworks-so-popular-3g58</guid>
      <description>&lt;h2&gt;
  &lt;a href="#humble-beginnings"&gt;
  &lt;/a&gt;
  Humble Beginnings
&lt;/h2&gt;

&lt;p&gt;I recently checked &lt;a href="https://insights.stackoverflow.com/survey/2021"&gt;Stack Overflow's Developer Survey 2021&lt;/a&gt; and instantly saw that&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SLEuSxTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8axqvmenzx7lesenlaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SLEuSxTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8axqvmenzx7lesenlaj.png" alt="text on survey page saying React.js surpassed jQuery as the most commonly used web framework" width="723" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why is this the case though? How did React become so wide-spread?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CRnW-ftu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wlcu1ph42v5jr9z1jca.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRnW-ftu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wlcu1ph42v5jr9z1jca.gif" alt="cat saying why gif" width="498" height="498"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#clarification"&gt;
  &lt;/a&gt;
  Clarification
&lt;/h2&gt;

&lt;p&gt;In this case,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Most Popular != Most Loved
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we take a look back at the popular web framework in the Stack Overflow Developer Survey, we see this bar graph (I think that's what it's called):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5KDFMjvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74n1ugv5tg9mi4hksmdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5KDFMjvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74n1ugv5tg9mi4hksmdu.png" alt="Popular framework graph, Svelte at 2nd to last place and React.js at first place" width="417" height="829"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if we look at the most &lt;strong&gt;loved&lt;/strong&gt; frameworks,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xhdPP56e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qn5rqws9hejk41pg7v9x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xhdPP56e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qn5rqws9hejk41pg7v9x.png" alt="Svelte at first place and React trailing behind at fourth place" width="880" height="726"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the first graph, it is evident that Svelte is evidently not that widespread/common compared to other frameworks. However, it seems that Svelte is immensely loved by developers compared to React.&lt;/p&gt;

&lt;p&gt;Hence, this is why I'm saying that the Most Popular framework is not the Most Loved. There are hidden gems that don't have the publicity to become widespread, and I believe Svelte is one of these.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-study"&gt;
  &lt;/a&gt;
  React Study
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CXZcjCkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9322d197r1npaf62dz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CXZcjCkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9322d197r1npaf62dz9.png" alt="React Logo" width="675" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t-0iF51a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxkeewoyrkcp15nhz34n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t-0iF51a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxkeewoyrkcp15nhz34n.jpg" alt="Big crowd of developers" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing that I see React has, and &lt;strong&gt;one of the most important factors&lt;/strong&gt; for increasing popularity is the size of the community for a technology. With React, if you search up for a fullstack tutorial on YouTube, I can bet that most of the results will definitely include React in them. This is because React has a bunch of developers using it, and so does JQuery.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HMmz-qd6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8oy1of2wrsdcmh2j9pp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HMmz-qd6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8oy1of2wrsdcmh2j9pp.png" alt="Ben Awad Fullstack App Tutorial with React" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IKqDyDD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1f6h8huqjn1zh9838lf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IKqDyDD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1f6h8huqjn1zh9838lf.png" alt="FreeCodeCamp Fullstack App Tutorial with React" width="880" height="170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j3Phmlbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6rw5vds7ltvk6i2c8an.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j3Phmlbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6rw5vds7ltvk6i2c8an.png" alt="FreeCodeCamp MERN Stack Tutorial with React" width="880" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uI7F8Pa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98b9eoi3jfimb6spstxr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uI7F8Pa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98b9eoi3jfimb6spstxr.png" alt="Clever Programmer Fullstack App Tutorial with React" width="880" height="179"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iGpcF1RU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sslezs1idqzz1idq6hqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iGpcF1RU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sslezs1idqzz1idq6hqj.png" alt="FreeCodeCamp React &amp;amp; Firebase Fullstack App Tutorial" width="880" height="176"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, when someone comes to learn how to create a fullstack application, they will be guided in the direction of React, not the other libraries. I'm going to call this "Filter-Pass-Down" I'm not aware if this is an actual term or not but I made it so it doesn't matter anymore unless one of you comment about it. Then I'll change it. But for now, "Filter-Pass-Down" it is. It only takes a group of developers to be enchanted by the spells of a library before spreading it to others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_GWHYfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/np33axy1osba5tx474yz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_GWHYfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/np33axy1osba5tx474yz.png" alt="Pile of packages" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is also another inconspicuous reason to why React is so widespread: its ecosystem. There are countless packages designed for React that just make developers' lives that much easier. Things like &lt;a href="https://www.framer.com/motion/"&gt;Framer Motion&lt;/a&gt; and &lt;a href="https://www.react-reveal.com/"&gt;React Reveal&lt;/a&gt; are mere examples of the vast and massive amounts of packages that help you get work done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svelte"&gt;
  &lt;/a&gt;
  Svelte
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--izRMiRfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss05phs5g719l7mf8bdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--izRMiRfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss05phs5g719l7mf8bdl.png" alt="Svelte Logo" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing that Svelte lacks compared to React is the enormous community surrounding it. Don't get me wrong, it's somewhat there; the problem is that it's small. However, not many professional-grade applications are using it. There are also not that many supporting packages for it like React does. The lack of tutorials to get someone started with development don't use Svelte, so it makes it difficult for large scale adoption to occur. However, I've seen a lot of developers use Svelte and use it afterward, giving me a sense that it will grow in popularity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cherry-on-the-cake"&gt;
  &lt;/a&gt;
  Cherry On The Cake
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrKJoObc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcya8j8e7heem9s6v9rh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrKJoObc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcya8j8e7heem9s6v9rh.png" alt="Intense big brain power" width="462" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the community is one of the most important things to make a framework/library succeed, the &lt;strong&gt;innovative features&lt;/strong&gt; it brings are equally important and tie the entire project together in a neat little package.&lt;/p&gt;

&lt;p&gt;React used the concept of a Virtual DOM opposed to changing the actual DOM of a webpage, speeding up the entire process of updating the page (it also used declarative state management so you simply had to tell what you wanted to change and it would change the element for you). React also implemented JSX, opposed to the HTML templates stuff the Angular used. All of these features were well liked by the developers who used React, thus promoting the product.&lt;/p&gt;

&lt;p&gt;This rise in popularity can also occur for Svelte, I believe. It gives a great user experience and is loved by many developers around the world. Svelte only needs a larger community/ecosystem for it to become a popular tool, and that very well might happen in the future.&lt;/p&gt;

&lt;p&gt;Anyways those were my thoughts.&lt;/p&gt;

&lt;p&gt;Recap of what you need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Massive community/ecosystem&lt;/li&gt;
&lt;li&gt;Innovative Features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;People simply need that first taste of your library before suggesting it to others, and it only expands from there.&lt;/p&gt;




&lt;p&gt;Sorry for the late blog this month I had final exams :(&lt;br&gt;
If you liked this blog though, please leave a comment and click the buttons on the left side of the screen 👍. &lt;/p&gt;

&lt;p&gt;Anyways, I'll try to post faster next month. Happy New Year!&lt;/p&gt;

&lt;p&gt;Also, Follow me on Twitter it helps out a ton!: &lt;a href="https://twitter.com/ShubhamPatilsd"&gt;https://twitter.com/ShubhamPatilsd&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>Awesome VSCode extensions for a better coding experience [ Part 2 ]</title>
      <author>Hyperloop007</author>
      <pubDate>Sat, 01 Jan 2022 06:50:57 +0000</pubDate>
      <link>https://dev.to/hyperloop/awesome-vscode-extensions-for-a-better-coding-experience-part-2--2kj7</link>
      <guid>https://dev.to/hyperloop/awesome-vscode-extensions-for-a-better-coding-experience-part-2--2kj7</guid>
      <description>&lt;p&gt;Imagine yourself typing all the HTML boilerplate code when you decided to make a new project or imagine not being able to recall the name of that single property in css and searching the web for it. Why am I talking about all this? It's obvious because this kind of stuff would really suck. So, that brings us to the wonderful extensions that we have in vscode made by a lot of people and you can use them for free.&lt;/p&gt;

&lt;p&gt;What are vscode extensions anyway?&lt;/p&gt;

&lt;p&gt;VSCode extensions let you add debuggers and various tools to your environment and works through various custom settings that the extensions bring with them.&lt;/p&gt;

&lt;p&gt;VSCode extensions are a great way to reduce your workload and make it easy for you to write your code and format it. You can even create your own vscode extensions but we won't talk about it here. There are a lots of extensions available on vscode as of today but I will mention some of which I find really useful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. ES7 React/Redux/GraphQl/React-Native Snippets:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension right here is something else altogether 🤯, it consists of such a wide variety of code snippets, and yes for all the technologies mentioned in the title itself. If you really want to get all your work done quicker do check this one out.&lt;/p&gt;

&lt;p&gt;Some snippets:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;imp -&amp;gt; import moduleName from 'module'&lt;/p&gt;

&lt;p&gt;imrse -&amp;gt; import React, { useState, useEffect } from 'react'&lt;/p&gt;

&lt;p&gt;graphql -&amp;gt; import { compose, graphql } from react-apollo'&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And not only these but it also provides snippets for react components:&lt;/p&gt;

&lt;p&gt;rafce -&amp;gt; ( will give you 👇 )&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'

const $1 = () =&amp;gt; {
  return &amp;lt;div&amp;gt;$0&amp;lt;/div&amp;gt;
}

export default $1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and a lot lot more...&lt;br&gt;
Check for the link at the end of the post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. HTML Snippets:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML snippets extensions is one of the most helpful extension as provides HTML5 tags, colorization to HTML tags and also various snippets. Noe it's functionality has been absorbed into the VSCode main HTML extension. But in any case this something really helpful.&lt;/p&gt;

&lt;p&gt;You just have to type the tag name and press tab and it generates the tag for:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;button (press tab) -&amp;gt; &amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;button.btn#btn-round (press tab) -&amp;gt; &amp;lt;button class="btn" id="btn-round"&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5qrkc2ts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urv0h28ia1idjl9vquy5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5qrkc2ts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urv0h28ia1idjl9vquy5.gif" alt="Image description" width="862" height="610"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check for the link at the end of the post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. JavaScript ES6 Code Snippets:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we have been seeing above, this one is not any different other than the fact that extension provides snippets for javascript and some really helpful one's at that. Do check it out.&lt;/p&gt;

&lt;p&gt;Here are some helpful snippets:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;fre -&amp;gt; array.forEach(currentItem =&amp;gt; {})&lt;/p&gt;

&lt;p&gt;fof -&amp;gt; for(const item of object) {}&lt;/p&gt;

&lt;p&gt;cas -&amp;gt; console.assert(expression, object)&lt;/p&gt;

&lt;p&gt;clg -&amp;gt; console.log(object)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xlyTrrvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvvels1t0svc5pf1oo1a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xlyTrrvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvvels1t0svc5pf1oo1a.gif" alt="Image description" width="880" height="526"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check for the link at the end of the post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Live Sass Compiler:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here's a really amazing extension that can convert sass/scss into css and on top of that it even goes on and supports live browser reload. Generally there are other ways to compile sass/scss into css like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sass --watch input.scss output.css&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What the command above will do is, it will watch your sass/scss input file and convert into a css output file. Here, input.scss is the name of input file and output is the name of the resultant css file.&lt;/p&gt;

&lt;p&gt;But Live Sass Compiler changes it all with just a single click sass/scss compiling initiation with custom settings. You just have to create a sass/scss file and click the button in bottom right saying (Watch Sass).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BCu1uYj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2paf36irgryobng2k9h5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCu1uYj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2paf36irgryobng2k9h5.png" alt="Image description" width="880" height="111"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are my settings for scss compilation, open settings and paste this piece of code in settings.json file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"liveSassCompile.settings.formats": [
    {
         "format": "expanded",
         "extensionName": ".css",
         "savePath": "/css"
    },
    {
         "format": "compressed",
         "extensionName": ".min.css",
         "savePath": "/css"
    }
],
"liveSassCompile.settings.generateMap": false,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check for the link at the end of the post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Markdown Preview Enhanced:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Markdown Preview Enhanced is an extension that gives you the ability to look at the preview at your markdown code, and you don't even have to switch between vscode and browser for it. The preview window appears right beside the .md file with just a click or a shortcut ( cmd-k v or ctrl-k v ).&lt;/p&gt;

&lt;p&gt;It looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKo1-jgs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dinoceqi3ba6tpzz0wnu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKo1-jgs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dinoceqi3ba6tpzz0wnu.png" alt="Image description" width="880" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To explore more and download these extensions visit here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;ES7 React/Redux/GraphQl/React-Native Snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets"&gt;HTML Snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets"&gt;JavaScript ES6 Code Snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass"&gt;Live Sass Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced#:~:text=Markdown%20Preview%20Enhanced%20is%20an,or%20%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%20Wechat%20Pay."&gt;Markdown Preview Enhanced&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://dev.to/hyperloop/awesome-vscode-extensions-for-a-better-coding-experience-part-1--3i9b"&gt;&amp;lt;- Part 1&lt;/a&gt; Visit part 1 of the post here.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>vscode</category>
      <category>productivity</category>
    </item>
    <item>
      <title>2021 in review: my second year of blogging</title>
      <author>Emma Goto 🍙</author>
      <pubDate>Sat, 01 Jan 2022 06:44:27 +0000</pubDate>
      <link>https://dev.to/emma/2021-in-review-my-second-year-of-blogging-1mf4</link>
      <guid>https://dev.to/emma/2021-in-review-my-second-year-of-blogging-1mf4</guid>
      <description>&lt;p&gt;2021 was a much more quiet year on my blog than compared to 2020. Continuing the tradition of my &lt;a href="https://www.emgoto.com/review-2020/"&gt;2020 review&lt;/a&gt; post, here’s how my site has performed over this past year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-most-popular-posts-on-emgotocom"&gt;
  &lt;/a&gt;
  My most popular posts on emgoto.com
&lt;/h2&gt;

&lt;p&gt;I published &lt;strong&gt;13 posts&lt;/strong&gt; on my website in 2021, and received &lt;strong&gt;165,203&lt;/strong&gt; page views (according to Google Analytics):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SXwpUD7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/review-2021/google-analytics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SXwpUD7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/review-2021/google-analytics.png" alt='"Google analytics statistics for 2021"' width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I only received 25k views in 2020, so it's a pretty huge jump. One of my goals for this blog was to eventually hit 10k views a month, and I passed this milestone in May 🎉  This growth is largely due to my posts showing up more frequently in Google search results. &lt;/p&gt;

&lt;p&gt;My top three posts were the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.emgoto.com/react-search-bar/"&gt;How to build a search bar in React&lt;/a&gt; (published Nov 2020)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.emgoto.com/jest-code-coverage/"&gt;Jest code coverage report explained&lt;/a&gt; (published April 2020)&lt;/li&gt;
&lt;li&gt;
&lt;a href="//emgoto.com/jest-partial-match/"&gt;Jest partial matching on objects, arrays and functions&lt;/a&gt; (published March 2021)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The search bar post in particular was a big success. It was a bit of fluke that I managed to hit upon this topic, actually. I built a search bar for my own site, and then decided to write a post about it since I didn't already see a good one out there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-devto-statistics"&gt;
  &lt;/a&gt;
  My DEV.to statistics
&lt;/h2&gt;

&lt;p&gt;After publishing a post on emgoto.com, I also cross-post it to &lt;a href="//dev.to/emma/"&gt;DEV.to&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I started 2021 with 2,820 reactions, 40,848 views and 6,518 followers on DEV. Here’s how my DEV dashboard looked at the end of 2021:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FfGaHs03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/review-2021/dev-analytics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FfGaHs03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/review-2021/dev-analytics.png" alt='"My DEV.to dashboard"' width="880" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that the numbers didn’t have a significant increase (e.g. 40k views in 2020 to 53k views). Considering I only posted 13 new posts on DEV, it makes sense to see that lack of growth.&lt;/p&gt;

&lt;p&gt;Since I didn’t have much of an audience for my blog in 2020, the DEV community was a great way to introduce people to my content. It’s become less important in 2021, compared to the growth in views from Google search results.&lt;/p&gt;

&lt;p&gt;DEV also hosts some pretty fun hackathons. I participated in one in March, and won &lt;a href="https://www.therelicans.com/therelicans-prime/hack-the-planet-contest-winners-announced-22po"&gt;a runner's up prize&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#twitter-my-newsletter-and-making-money"&gt;
  &lt;/a&gt;
  Twitter, my newsletter, and making money
&lt;/h2&gt;

&lt;p&gt;On &lt;a href="//twitter.com/emma_goto"&gt;Twitter&lt;/a&gt;, I went from &lt;strong&gt;293&lt;/strong&gt; followers to &lt;strong&gt;524&lt;/strong&gt;. I don’t tweet much, so the growth may be people coming across my site on Google, and then deciding to give me a follow. Hi to any new followers, and thank you!&lt;/p&gt;

&lt;p&gt;I have a “monthly” newsletter that I have yet to post anything to (oops), which now has &lt;strong&gt;71&lt;/strong&gt; subscribers.&lt;/p&gt;

&lt;p&gt;I added Carbon ads to my site at the end of October. In 2 months, I made about &lt;strong&gt;$40&lt;/strong&gt; in revenue. I do feel a bit bad, since I think the ad ruins the aesthetic of my site (ha). But for now I’ll be keeping it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-foray-into-food-blogging"&gt;
  &lt;/a&gt;
  A foray into food blogging
&lt;/h2&gt;

&lt;p&gt;Designing and coding a blog is the most fun part of blogging for me. So in April I decided to build a second blog devoted to Japanese food. In hindsight, 2021 wasn’t the best year to start a food blog, considering that we’re living through a pandemic. Sydney also had a multi-month lockdown where all the restaurants were closed. Right now everything has re-opened but I’m too scared to go because we’re seeing a huge surge in COVID cases.&lt;/p&gt;

&lt;p&gt;Since emgoto.com has a dark colour scheme, for my food blog I decided I wanted to do the opposite and went for something brighter. It looked pretty boring though so I spiced it up by buying a stock image to use for the background.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wffl5KNG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/review-2021/japangoto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wffl5KNG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/review-2021/japangoto.png" alt='"My food blog, japango.to"' width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Writing about eating food is a lot easier than writing about programming, so it’s also more fun. Although I’m not too sure how entertaining it is to read what I wrote (there’s only so many ways you can talk about how you enjoy food). But because it’s so much easier, the competition is probably a lot higher too. So this is more just a “for fun” blog than one that I actually see going anywhere.&lt;/p&gt;

&lt;p&gt;I also learnt that photographing food is &lt;em&gt;hard&lt;/em&gt;. My current technique involves handing my phone over to whoever I’m eating with and the chances are high that they are going to take better pictures than me. Maybe it’s a skill I can work on in 2022.&lt;/p&gt;

&lt;p&gt;Honestly I have been too embarrassed to show this site to anyone but my mum so the site gets 0 hits, but if you happened to read this far you can go check out my food blog at &lt;a href="https://japango.to/"&gt;japango.to&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-shoutout-to-the-blogging-for-devs-community"&gt;
  &lt;/a&gt;
  A shoutout to the Blogging for Devs community
&lt;/h2&gt;

&lt;p&gt;I joined the &lt;a href="https://bloggingfordevs.com/"&gt;Blogging for Devs&lt;/a&gt; community towards the end of 2020. Unfortunately I haven’t been too active in the last half-year, but I would highly recommend it for anyone with a blog, or for anyone looking to start a blog in 2022. I’ve picked up a lot of useful SEO tips that I’ve implemented on my site, and I’ve gotten into the habit of making SEO tweaks to older posts to boost their page views as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goodbye-2021-and-hello-2022"&gt;
  &lt;/a&gt;
  Goodbye 2021 and hello 2022!
&lt;/h2&gt;

&lt;p&gt;I don’t want to turn this post into too much of a downer so I’m just briefly mentioning it at the end, but 2021 &lt;em&gt;really&lt;/em&gt; sucked for me. And that’s reflected in the amount of posts I’ve written this year compared to 2020. My motivation and passion for writing hasn’t quite recovered, so I’m not too sure yet what 2022 will look like for my blog. I don't have any big plans or goals, and I'm just going to take each day as it comes.&lt;/p&gt;

&lt;p&gt;Fingers crossed for a better year in 2022!&lt;/p&gt;

</description>
      <category>writing</category>
    </item>
    <item>
      <title>Top 5 Programming Languages in 2022 You Should Learn</title>
      <author>virender</author>
      <pubDate>Sat, 01 Jan 2022 06:22:05 +0000</pubDate>
      <link>https://dev.to/virendebro/top-5-programming-languages-in-2022-you-should-learn-14kp</link>
      <guid>https://dev.to/virendebro/top-5-programming-languages-in-2022-you-should-learn-14kp</guid>
      <description>&lt;p&gt;&lt;strong&gt;Top 5 Programming Languages in 2022 You Should Learn&lt;/strong&gt;&lt;br&gt;
In this blog i am going to tell you Top 5 Programming Languages in 2022. So Lets start this article:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-5-programming-languages-in-2022-you.html"&gt;Click Here&lt;/a&gt; to see this post in detailed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thankyou&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>javascript</category>
      <category>php</category>
    </item>
    <item>
      <title>How I spend my 19% free time</title>
      <author>Chris Bongers</author>
      <pubDate>Sat, 01 Jan 2022 05:15:24 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/how-i-spend-my-19-free-time-35nd</link>
      <guid>https://dev.to/dailydevtips1/how-i-spend-my-19-free-time-35nd</guid>
      <description>&lt;p&gt;What a year, it's been one of those that seemed to only take a month. But yet, so much has happened in that short amount of time.&lt;/p&gt;

&lt;p&gt;Thinking about a year, it's only 365 days.&lt;br&gt;
There are 8760 hours in the year.&lt;/p&gt;

&lt;p&gt;Let's break that down for a second&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uc_XH3hB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640493890853/O5jYDnfvp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uc_XH3hB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640493890853/O5jYDnfvp.png" alt="How I spend my time chart" width="663" height="662"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sleep: 3.285 hours (avg 9 hours a day)&lt;br&gt;
Working days: 2088 hours of work&lt;/p&gt;

&lt;p&gt;3387 hours left. These are generally the hours you can use for other things, but let's take some elements out that you will need to do every day.&lt;/p&gt;

&lt;p&gt;Eating: 1,5 hours a day. This includes cleaning up and breakfast, lunch, and dinner. Totals to 547,50 hours a year.&lt;/p&gt;

&lt;p&gt;Workout: 5 days a week 1 hour, either running, exercise, or hiking. 260 hours&lt;/p&gt;

&lt;p&gt;Showering and self-care: (avg 1 hour a day) = 365 hours a year.&lt;/p&gt;

&lt;p&gt;Then there are certain things we'll have to take into account, and we can average this for a year.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;shopping&lt;/li&gt;
&lt;li&gt;errands&lt;/li&gt;
&lt;li&gt;home up-keeping&lt;/li&gt;
&lt;li&gt;personal admin stuff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's say this takes 1,5 hours a day on average, totaling 547,5 hours a year.&lt;/p&gt;

&lt;p&gt;1.667 hours a year left for all the other stuff.&lt;br&gt;
This is only 19% of your time in the entire year! 🤯&lt;/p&gt;

&lt;p&gt;Other stuff being:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;time with your friends, partner, family.&lt;/li&gt;
&lt;li&gt;side projects&lt;/li&gt;
&lt;li&gt;vacations&lt;/li&gt;
&lt;li&gt;weekend trips&lt;/li&gt;
&lt;li&gt;Netflix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means you will have to use this time wisely.&lt;/p&gt;

&lt;p&gt;I've written about &lt;a href="https://daily-dev-tips.com/posts/hacking-time-management/"&gt;hacking your time&lt;/a&gt; before and will keep saying this.&lt;br&gt;
It's essential to define what you want to spend your time on!&lt;/p&gt;

&lt;p&gt;Only you can make those changes.&lt;/p&gt;

&lt;p&gt;I love to hear people say, I don't know how you write every day. I wouldn't have the time for that.&lt;br&gt;
Yet people have the time to binge-watch a complete Netflix show in a weekend.&lt;/p&gt;

&lt;p&gt;And some weekends, that person is me, but I want my limited "free" time to be worth my while most of the time.&lt;/p&gt;

&lt;p&gt;In 2021 I used roughly 400 hours of my free time to work on my blog.&lt;/p&gt;

&lt;p&gt;You might think, wow, that's a lot, but it's actually less time a day than I spend on eating.&lt;/p&gt;

&lt;p&gt;Taking that into perspective, you could form a habit, like eating or showering.&lt;br&gt;
But make this new habit a productive one, like working on your side project or writing a blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-did-you-achieve-in-your-19-time"&gt;
  &lt;/a&gt;
  What did you achieve in your 19% time
&lt;/h2&gt;

&lt;p&gt;I know you are all eager to find this out!&lt;br&gt;
So you have 19% time left per year. What did you achieve?&lt;/p&gt;

&lt;p&gt;Let me break this down into categories because a lot has happened in this short time frame.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TRanzQeD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640493002618/WeUo9MdGo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRanzQeD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640493002618/WeUo9MdGo.jpeg" alt="Got married this year" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Personal wins&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Got married to the most beautiful wife ❤️&lt;/li&gt;
&lt;li&gt;Our puppy got 2 new dog training certificates&lt;/li&gt;
&lt;li&gt;Got to finally go on a holiday with my wife (and we got stuck there 😂)&lt;/li&gt;
&lt;li&gt;Met a lot of inspiring people&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Professional wins&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Got a new job at &lt;a href="https://daily.dev/"&gt;daily.dev&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Learned a ton of things!&lt;/li&gt;
&lt;li&gt;Created some game-changing projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Blog wins&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/DailyDevTips1/status/1468849867959291904"&gt;Hit 800+ newsletter subscribers&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;250K users on my domain&lt;/li&gt;
&lt;li&gt;440K views on &lt;a href="https://dev.to/dailydevtips1/"&gt;dev.to&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;6015 followers on dev.to&lt;/li&gt;
&lt;li&gt;Crossed 100K views on &lt;a href="https://h.daily-dev-tips.com/"&gt;Hashnode&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://h.daily-dev-tips.com/8-non-technical-ways-to-contribute-to-open-source"&gt;Won 1000$ for an open-source project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Published 355 articles&lt;/li&gt;
&lt;li&gt;Got a lot of awesome features for my articles&lt;/li&gt;
&lt;li&gt;Been part of many live streams and spaces&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.com/bootcamp"&gt;Spoke as a speaker for Hashnode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hit 5500+ followers on &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can't even tell you how much these wins mean to me, realizing this was all achieved in only 19% of my time! 🤯&lt;/p&gt;

&lt;p&gt;I don't know about you, but I plan to use my 19% time even better in 2022.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>C++ Strings</title>
      <author>Sushant Gaurav</author>
      <pubDate>Sat, 01 Jan 2022 05:05:13 +0000</pubDate>
      <link>https://dev.to/imsushant12/c-strings-2om0</link>
      <guid>https://dev.to/imsushant12/c-strings-2om0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h2&gt;

&lt;p&gt;Strings are variables that contain a sequence or collection of characters. Strings are very frequently used by programmers because of their flexibility and predefined functions support. In C++, we have two types of strings: the first one is C-Language style strings and the second one is String Class (a part of the Standard Template Libraries). We can perform various operations on strings such as concatenation, comparison, copy, conversion, etc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scope-of-article"&gt;
  &lt;/a&gt;
  Scope of Article
&lt;/h2&gt;

&lt;p&gt;The article contains topics such as Strings, how they are used in C++, the various functions associated with them. The article also compares the normal Strings (used in different languages) to the String class that comes with the C++ STL.&lt;br&gt;
Each of the topics is explained clearly with code and examples wherever necessary.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Definition.&lt;/li&gt;
&lt;li&gt;Types of Strings in C++.&lt;/li&gt;
&lt;li&gt;Some useful functions of the String class.&lt;/li&gt;
&lt;li&gt;Strings v/s character array.&lt;/li&gt;
&lt;li&gt;Why use Strings?&lt;/li&gt;
&lt;li&gt;Summary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h2&gt;

&lt;p&gt;Strings are nothing but variables that are used to store a sequence or collection of characters. Sometimes they are compared with character arrays (character arrays are also sequences of characters) but the main difference between them is that strings can use standard operators of C++ whereas character arrays cannot. This is one of the main reasons why strings are most widely used by programmers.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#types-of-strings-in-c"&gt;
  &lt;/a&gt;
  Types of Strings in C++
&lt;/h2&gt;

&lt;p&gt;In C++, we have two types of strings:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-the-clanguage-or-primitive-type-string"&gt;
  &lt;/a&gt;
  1. The C-Language or primitive type string:
&lt;/h4&gt;

&lt;p&gt;This string is originated in the C Language which is also known as the predecessor of C++. These strings are nothing but a character array or one-dimensional array of characters. As they are character arrays, so they have a fixed length that must be determined at the time of creation only. These strings end with a special character called the “null” character. The null character at the end denotes the termination of a string; it is represented using ‘\0’ and has an ASCII value 0x00.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;em&gt;The null character should also be considered at the time of counting the length of the string. Let’s take an example and store “hello” to understand strings better&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;char example[] = {‘h’, ‘e’, ‘l’, ‘l’, ‘o’, ‘\0’}; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;char example[] = “hello”;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This initialization is the same as an integer array with one notable difference i.e., the last character is a null character, So, the length of the string is 6.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-the-stl-version-or-string-class"&gt;
  &lt;/a&gt;
  2. The STL version or String Class:
&lt;/h4&gt;

&lt;p&gt;String Class is one of the classes of the C++ standard library. They are strings that support different operations and have a lot of handy predefined functions. One of the major advantages of string class is that string objects have no fixed length; hence we can extend their length as per our need. To use strings, we must include  header file and create an object of string class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;em&gt;We can also use , as it is a collection of all the standard template libraries. Let’s take an example to understand it better.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;string example = “hello world”;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#some-useful-functions-of-the-string-class"&gt;
  &lt;/a&gt;
  Some useful functions of the String Class
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#1-length"&gt;
  &lt;/a&gt;
  1. length()
&lt;/h4&gt;

&lt;p&gt;It returns the length, or the number of characters present in the string. &lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;string str = “hello”; 
cout &amp;lt;&amp;lt; str.length(); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output: 5 &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-pushback"&gt;
  &lt;/a&gt;
  2. push_back()
&lt;/h4&gt;

&lt;p&gt;This function is used to insert a character at the end of the string. &lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;string str = “hello”; 
str.push_back(“!”); 
cout &amp;lt;&amp;lt; str; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output: hello! &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-popback"&gt;
  &lt;/a&gt;
  3. pop_back()
&lt;/h4&gt;

&lt;p&gt;This function is used to delete the character from the end of the string. &lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;string str = “hello!”; 
str.pop_back(); 
cout &amp;lt;&amp;lt; str; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output: hello &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-append"&gt;
  &lt;/a&gt;
  4. append()
&lt;/h4&gt;

&lt;p&gt;This function is used to concatenate two strings. &lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;string str1 = “hello ”; 
string str2 = “world”; 
cout &amp;lt;&amp;lt; str1.append(str2); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output: hello world &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;We can also use the “+” operator to append these strings. But the append operation works faster than the + operator.&lt;/em&gt; &lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;string str1 = “hello ”; 
string str2 = “world”; 
cout &amp;lt;&amp;lt; str1 + str2; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output: hello world &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-compare"&gt;
  &lt;/a&gt;
  5. compare()
&lt;/h4&gt;

&lt;p&gt;This function returns an integer and is used to compare two strings. Depending on the integer returned, we can know the relation between the strings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the returned value is 0, it means both the strings are equal. &lt;/li&gt;
&lt;li&gt;Else, the strings are not equal. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;string str1 = “hello”; 
string str2 = “hello”; 
if (str1.compare(str2) == 0) 
      cout &amp;lt;&amp;lt; “Strings are equal.”; 
else 
      cout &amp;lt;&amp;lt; “Strings are not equal.”;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output: Strings are equal. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#some-other-commonly-used-functions-are"&gt;
  &lt;/a&gt;
  Some other commonly used functions are
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;begin() &lt;/li&gt;
&lt;li&gt;capacity() &lt;/li&gt;
&lt;li&gt;clear() &lt;/li&gt;
&lt;li&gt;copy() &lt;/li&gt;
&lt;li&gt;empty()&lt;/li&gt;
&lt;li&gt;erase() &lt;/li&gt;
&lt;li&gt;find() &lt;/li&gt;
&lt;li&gt;replace() &lt;/li&gt;
&lt;li&gt;resize() &lt;/li&gt;
&lt;li&gt;size() &lt;/li&gt;
&lt;li&gt;swap()&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#strings-vs-character-array"&gt;
  &lt;/a&gt;
  Strings v/s character array
&lt;/h2&gt;

&lt;p&gt;A string is a sequence of characters treated as a single data type on the other hand character array is a collection of char data types. The string is a class, but the character array is a data structure. String does not have a fixed length, but arrays have a fixed length that must be determined at the time of the creation. We can use standard C++ operators on the string, but we cannot use them on a regular character array. The String boundaries do not overrun but the character array boundaries are easily overrun.&lt;br&gt;
On the other hand, one of the disadvantages of the string is that it is slower than the character array in terms of accessing its value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-strings"&gt;
  &lt;/a&gt;
  Why use Strings?
&lt;/h2&gt;

&lt;p&gt;The string object is treated as a variable and is changeable in size. This makes the string more useful than the character array. Apart from the size concept, there are a lot more advantages associated with string which makes it useful. Some of them are mentioned in bullet form below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strings are mutable objects.&lt;/li&gt;
&lt;li&gt;Null termination and memory allocation are done by the class itself.&lt;/li&gt;
&lt;li&gt;Strings supports the standard C++ operators due to operator overloading.&lt;/li&gt;
&lt;li&gt;Strings has a wide variety of member functions associated with it (refer to the content for details).&lt;/li&gt;
&lt;li&gt;Strings supports type conversions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The string is a sequence or collection of characters.&lt;/li&gt;
&lt;li&gt;Strings are of 2 types in C++, one is the C-language string or the character array and the second one is the string class of STL.&lt;/li&gt;
&lt;li&gt;Strings have more advantages than the regular character array.&lt;/li&gt;
&lt;li&gt;Strings support standard operators of C++ and a wide variety of member functions as well.&lt;/li&gt;
&lt;li&gt;Strings terminate with a null character.&lt;/li&gt;
&lt;li&gt;Strings are frequently used by programmers.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CSS tips on Images you need to know</title>
      <author>Fidal Mathew</author>
      <pubDate>Sat, 01 Jan 2022 05:01:37 +0000</pubDate>
      <link>https://dev.to/fidalmathew/css-tips-on-images-you-need-to-know-33b1</link>
      <guid>https://dev.to/fidalmathew/css-tips-on-images-you-need-to-know-33b1</guid>
      <description>&lt;p&gt;Hi folks, hope you are doing good. In this blog I'm gonna share 5 properties to keep in mind while working with images -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Object-fit : cover -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property allows the image to fill the entire dimensions while maintaining its aspect ratio. Especially useful for profile images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MdmX5fOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0aw0kblv46tbh3a46unw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MdmX5fOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0aw0kblv46tbh3a46unw.png" alt="Cover" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Transform: scaleX(-1) / scaleY(-1) -&lt;/strong&gt; &lt;br&gt;
Use transform: scaleX(-1) to flip your image horizontally and scaleY(-1) vertically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xWVq-h3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlyqzt6il0f70qf8cauh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWVq-h3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlyqzt6il0f70qf8cauh.png" alt="flip" width="880" height="453"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;3. Object-fit : contain -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property is used to contain the entire image in the desired dimension and also maintains the aspect ratio. This property is used a lot in making banners.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--181ftt7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5tx5el0dmtgx3jeuhb4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--181ftt7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5tx5el0dmtgx3jeuhb4.png" alt="contain" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Filter: drop-shadow -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property is used to add shadows to images with no background.&lt;br&gt;
Ex: filter: drop-shadow(30px 10px 4px #3a3a3a);&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---3Dgldaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82gjps2xd4rtot3t3okv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---3Dgldaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82gjps2xd4rtot3t3okv.png" alt="drop-shadow" width="512" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;30px indicates its relative position towards the right and a negative value will move the shadow towards the left. &lt;/p&gt;

&lt;p&gt;10px indicates its relative position towards the top and a negative value will move the shadow towards the bottom.&lt;/p&gt;

&lt;p&gt;4px represents its blur factor&lt;/p&gt;

&lt;p&gt;3a3a3a represents its color&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Filter: opacity -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property increases the transparency of the image depending upon the percentage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HP47O9Aj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6sardyaci8a5849mwgg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HP47O9Aj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6sardyaci8a5849mwgg.png" alt="opacity" width="476" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you know of other tips/tricks, let me know in the comments. Thanks for reading :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect with me on -&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fidalmathew10"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FidalMathew"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/fidal-mathew-82aba7200/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Reminder — Join Us for the MongoDB Atlas Hackathon ⏰ </title>
      <author>dev.to staff</author>
      <pubDate>Sat, 01 Jan 2022 04:59:22 +0000</pubDate>
      <link>https://dev.to/devteam/reminder-join-us-for-the-mongodb-atlas-hackathon-k0m</link>
      <guid>https://dev.to/devteam/reminder-join-us-for-the-mongodb-atlas-hackathon-k0m</guid>
      <description>&lt;h4&gt;
  &lt;a href="#the-mongodb-atlas-hackathon-on-dev-closes-on-january-13th-2022-midnight-utc"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The MongoDB Atlas Hackathon on DEV closes on January 13th, 2022 @ midnight UTC.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Don't miss this chance to flex your software development muscles and win up to $1,500 USD – and more 👀&lt;/strong&gt; &lt;/p&gt;




&lt;p&gt;If you're just returning to your computer after celebrating the winter holidays OR if the end of 2021 has been a busy time for you, we wanted to share a friendly reminder that the &lt;a href="https://dev.to/devteam/announcing-the-mongodb-atlas-hackathon-on-dev-4b6m"&gt;MongoDB Atlas Hackathon on DEV&lt;/a&gt; is ongoing and we'd LOVE to see a submission from you. This is DEV's first-ever hackathon with our friends at MongoDB and we think it's a particularly exciting and fun opportunity to show off your software development skills. Plus, hey, the amazing prizes don't hurt either! How does a grand prize of $1,500 USD in cash sound? How about $300 to the DEV shop, plus a sticker pack and a limited-edition profile badge? 🤩 &lt;/p&gt;

&lt;p&gt;Refresher: this hackathon challenges you to build an application utilizing MongoDB Atlas (a collection of cloud database and data services that helps you accelerate and simplify how you use data in your work) and share an overview of your project on DEV. There are five fascinating categories so you can truly build what interests you. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgt-full-details-on-how-to-participate-in-the-mongodb-atlas-hackathon-here"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://dev.to/devteam/announcing-the-mongodb-atlas-hackathon-on-dev-4b6m"&gt;&amp;gt;&amp;gt; Full details on how to participate in the MongoDB Atlas Hackathon here&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;




&lt;h3&gt;
  &lt;a href="#additional-tools-amp-reminders"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Additional tools &amp;amp; reminders&lt;/strong&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Questions about MongoDB or the hackathon in general? Head over to our help thread, which is being monitored by the MongoDB and DEV teams&lt;/em&gt;:&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zg3sT9Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vHKcEiTe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/3/13d3b32a-d381-4549-b95e-ec665768ce8f.png" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/mongodb-atlas-hackathon-help-thread-3g3a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;MongoDB Atlas Hackathon Help Thread&lt;/h2&gt;
      &lt;h3&gt;dev.to staff for The DEV Team ・ Dec 13 '21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#atlashackathon&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#help&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Looking for a chance to connect with other participants? Want to find a project partner or simply share your progress? The community discussion thread is the perfect place to do that&lt;/em&gt;:&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zg3sT9Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vHKcEiTe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/3/13d3b32a-d381-4549-b95e-ec665768ce8f.png" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/share-your-mongodb-atlas-hackathon-updates-5g4k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Share your MongoDB Atlas Hackathon Updates!&lt;/h2&gt;
      &lt;h3&gt;dev.to staff for The DEV Team ・ Dec 13 '21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#atlashackathon&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#happy-coding-and-enjoy-this-challenge-you-have-just-under-two-weeks-left"&gt;
  &lt;/a&gt;
  Happy coding and enjoy this challenge! You have just under two weeks left!
&lt;/h2&gt;

</description>
      <category>meta</category>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Flip box/flip card with HTML CSS</title>
      <author>Atul Prajapati</author>
      <pubDate>Sat, 01 Jan 2022 04:46:27 +0000</pubDate>
      <link>https://dev.to/atulcodex/flip-boxflip-card-with-html-css-3pkp</link>
      <guid>https://dev.to/atulcodex/flip-boxflip-card-with-html-css-3pkp</guid>
      <description>&lt;p&gt;Hello coding people, hope you're doing well 👨‍💻. In this DEV post, you will learn how to make this "**Easy flip box or flip card**" with just HTML and CSS&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atulcodex/embed/LYzdPvb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>codepen</category>
      <category>css</category>
    </item>
    <item>
      <title>Introduction to Kubernetes with Amazon EKS</title>
      <author>Donald Sebastian Leung</author>
      <pubDate>Sat, 01 Jan 2022 04:43:26 +0000</pubDate>
      <link>https://dev.to/donaldsebleung/introduction-to-kubernetes-with-amazon-eks-1nj6</link>
      <guid>https://dev.to/donaldsebleung/introduction-to-kubernetes-with-amazon-eks-1nj6</guid>
      <description>&lt;p&gt;&lt;em&gt;You can access key assets in this article &lt;a href="https://github.com/DonaldKellett/k8s-intro-eks"&gt;on GitHub&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article, we will introduce basic concepts around Kubernetes, followed by a hands-on session where we spin up a Kubernetes cluster on Amazon EKS and deploy a simple website to the cluster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;It is assumed that you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are comfortable with the Linux command line&lt;/li&gt;
&lt;li&gt;Are familiar with the concept of containers; practical experience with Docker would be beneficial&lt;/li&gt;
&lt;li&gt;Have an AWS account&lt;/li&gt;
&lt;li&gt;Possess basic experience in &lt;a href="https://dev.to/donaldsebleung/introduction-to-the-aws-cli-e6o"&gt;configuring and using the AWS CLI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Are aware that following this hands-on session may incur monetary costs and you are solely responsible for any such costs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the prerequisites addressed, let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;Modern applications are often comprised of microservices communicating with each other through the network, instead of as a single, monolithic entity. Each microservice typically runs in its own container, which calls for an efficient and standardized approach for scheduling and managing these containers. Kubernetes is the industry-standard solution that addresses these needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kubernetes"&gt;
  &lt;/a&gt;
  Kubernetes
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://en.wikipedia.org/wiki/Kubernetes"&gt;Kubernetes - Wikipedia&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Kubernetes is a container orchestration tool originally developed by Google, which was released under the open source Apache 2.0 license in 2015 and donated to the Cloud Native Computing Foundation (CNCF), a non-profit organization jointly founded by Google and The Linux Foundation at the same time for this purpose. Kubernetes allows for one or more physical or virtual machines, otherwise known as &lt;em&gt;nodes&lt;/em&gt;, to form a &lt;em&gt;cluster&lt;/em&gt;, on which containerized workloads can be scheduled, deployed and managed with relative ease, providing benefits such as scalability, reliability and high availability.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A Kubernetes cluster consists of one or more nodes, which are further subdivided into &lt;em&gt;control&lt;/em&gt; and &lt;em&gt;worker&lt;/em&gt; nodes. Control nodes reside in the &lt;em&gt;control plane&lt;/em&gt; and are responsible for scheduling and managing where containerized workloads should be run, while worker nodes reside in the &lt;em&gt;data plane&lt;/em&gt; and are responsible for actually running the containerized workloads, as well as reporting the status of these workloads (and the status of the nodes themselves) to the control plane.&lt;/p&gt;

&lt;p&gt;Kubernetes primarily relies on a &lt;em&gt;declarative&lt;/em&gt; configuration model where the Kubernetes administrator specifies one or more YAML files to be &lt;em&gt;applied&lt;/em&gt; to the cluster. Each YAML file describes one or more &lt;em&gt;objects&lt;/em&gt;, logical entities that represent part of a &lt;em&gt;desired&lt;/em&gt; state. The Kubernetes cluster then constantly works towards ensuring that each object exists and that the actual state matches the desired state, taking corrective action whenever necessary to maintain or re-converge to the desired state. We say that the state of the Kubernetes cluster is &lt;em&gt;eventually consistent&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The most basic type of object in a Kubernetes cluster is the &lt;strong&gt;Pod&lt;/strong&gt;. A pod is essentially a wrapper around a container, though it is possible for a pod to hold more than one container. Pods are &lt;em&gt;ephemeral&lt;/em&gt;, meaning that they can be created and destroyed at will, either directly by the Kubernetes administrator, or through higher-level objects such as Deployments that automatically manage such pods. Therefore, one should not expect any particular pod to exist over a prolonged period of time.&lt;/p&gt;

&lt;p&gt;Next, we have &lt;strong&gt;ReplicaSet&lt;/strong&gt;s, where each ReplicaSet manages a fixed number of identical pods (replicas), and works hard to ensure that the specified number of replicas exist. So, if for some reason, a replica in a ReplicaSet terminates, the ReplicaSet will automatically spawn a new replica. Conversely, if an extra replica was somehow created (e.g. by the Kubernetes administrator), the ReplicaSet will automatically terminate a replica.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt;s are another type of object very similar to ReplicaSets, except the former also supports rolling updates and rollbacks with zero downtime. When a new version of the containerized workload is deployed to the cluster, the deployment performs a &lt;em&gt;rolling update&lt;/em&gt;; that is, each pod running the old workload is incrementally replaced by a pod running the new one, until all pods have been replaced and running the new workload. As long as the deployment consists of 2 or more replicas, this guarantees that the application will always be available.&lt;/p&gt;

&lt;p&gt;In order to expose a Deployment to other workloads within the cluster or the outside world, a &lt;strong&gt;Service&lt;/strong&gt; needs to be created for it, which is essentially an abstraction specifying how a particular workload can be contacted through the network, e.g. what IP address and / or port should be used.&lt;/p&gt;

&lt;p&gt;Within a cluster, the workloads can be further segregated into &lt;strong&gt;Namespace&lt;/strong&gt;s, which can be thought of as virtual clusters within the real, physical cluster. This allows related workloads to be grouped together, and for unrelated workloads to be logically separated from one another.&lt;/p&gt;

&lt;p&gt;Finally, Kubernetes allows for &lt;strong&gt;CustomResourceDefinition&lt;/strong&gt;s where a Kubernetes developer and / or administrator can define their own objects to extend the functionality of Kubernetes. Needless to say, this is an advanced topic that casual Kubernetes users should not need to worry too much about.&lt;/p&gt;

&lt;p&gt;With most of the basic concepts cleared, let's get our hands dirty ;-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spinning-up-a-kubernetes-cluster-with-amazon-eks"&gt;
  &lt;/a&gt;
  Spinning up a Kubernetes cluster with Amazon EKS
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html"&gt;Getting started with Amazon EKS&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Amazon EKS stands for Elastic Kubernetes Service and is a &lt;em&gt;managed&lt;/em&gt; Kubernetes offering provided by AWS. The term "managed" roughly means that certain aspects of Kubernetes, such as provisioning each node and connecting them to form the cluster, are managed by the cloud provider so you do not have to worry about it yourself. Of course, this means that there are options for provisioning and configuring a Kubernetes cluster from scratch, which will not be covered in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://minikube.sigs.k8s.io/docs/start/"&gt;Minikube&lt;/a&gt;, &lt;a href="https://kind.sigs.k8s.io/"&gt;kind&lt;/a&gt; for spinning up a single-node cluster, intended primarily for development and testing purposes&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/"&gt;kubeadm&lt;/a&gt; for provisioning a multi-cluster node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a cluster with Amazon EKS and communicate with it, we need two tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;eksctl&lt;/code&gt;: A command-line tool specific to EKS for creating EKS Kubernetes clusters&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kubectl&lt;/code&gt;: The Kubernetes command-line client, used for communicating with a Kubernetes &lt;em&gt;server&lt;/em&gt; (cluster)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also need AWS CLI version 2 or later, configured with an IAM user with sufficient permissions to create the cluster and its associated resources. If not, you may wish to first go through &lt;a href="https://dev.to/donaldsebleung/introduction-to-the-aws-cli-e6o"&gt;this introductory hands-on session on AWS CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Technically, &lt;code&gt;eksctl&lt;/code&gt; is not strictly required and an EKS cluster can be manually created using a combination of the AWS web console and the AWS CLI (and quite possibly with the CLI alone), but the process is rather complex and requires a detailed understanding of the underlying AWS services, roles, permissions, etc. &lt;code&gt;eksctl&lt;/code&gt; manages these complexities for us under the hood so we can easily create a cluster with a single command and focus on deploying our apps to Kubernetes.&lt;/p&gt;

&lt;p&gt;Now, assuming you have AWS CLI v2 installed and an IAM user with sufficient permissions (such as an IAM administrator), let's download &lt;code&gt;kubectl&lt;/code&gt; version 1.21 from AWS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-o&lt;/span&gt; kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to download &lt;code&gt;kubectl&lt;/code&gt; &lt;a href="https://kubernetes.io/docs/tasks/tools/"&gt;from upstream&lt;/a&gt;; they should be the same so it shouldn't make a difference.&lt;/p&gt;

&lt;p&gt;Download the associated checksum file and use it to verify our &lt;code&gt;kubectl&lt;/code&gt; download:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-o&lt;/span&gt; kubectl.sha256 https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl.sha256
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sha256sum&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; kubectl.sha256
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the download was not corrupted, the second command should output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl: OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, make &lt;code&gt;kubectl&lt;/code&gt; executable and install it somewhere under your PATH:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x ./kubectl
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo mv &lt;/span&gt;kubectl /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, download and install &lt;code&gt;eksctl&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;--silent&lt;/span&gt; &lt;span class="nt"&gt;--location&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;_amd64.tar.gz"&lt;/span&gt; | &lt;span class="nb"&gt;tar &lt;/span&gt;xz &lt;span class="nt"&gt;-C&lt;/span&gt; /tmp
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo mv&lt;/span&gt; /tmp/eksctl /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the installation was successful, running &lt;code&gt;eksctl version&lt;/code&gt; should print an appropriate version number and exit.&lt;/p&gt;

&lt;p&gt;With the tools installed, let's spin up a cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;eksctl create cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see some blue information text printed to the console, and the command may take a while to complete, so do be patient. In my case, it took about 20 minutes before my cluster was ready.&lt;/p&gt;

&lt;p&gt;On success, the last line of output should be similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-12-29 21:30:44 [✔]  EKS cluster "beautiful-unicorn-1640783508" in "us-east-1" region is ready
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The name of your cluster (&lt;code&gt;beautiful-unicorn-1640783508&lt;/code&gt; in my case) and the region in which it is deployed (&lt;code&gt;us-east-1&lt;/code&gt;) may vary. Note that you could also have explicitly specified a name and region when creating the cluster by passing in the &lt;code&gt;--name&lt;/code&gt; and &lt;code&gt;--region&lt;/code&gt; flags respectively.&lt;/p&gt;

&lt;p&gt;Now check our Kubernetes version. Note that you should see &lt;em&gt;two&lt;/em&gt; versions: one for the &lt;code&gt;kubectl&lt;/code&gt; client that we downloaded (v1.21.x if you followed the instructions exactly), and one for the server (cluster). However, if &lt;code&gt;kubectl&lt;/code&gt; is not correctly configured to connect to the cluster, you may receive an error when attempting to read the Kubernetes version from the server. Therefore, checking the Kubernetes version also serves to check that the cluster is up and running, and that we can connect to it with &lt;code&gt;kubectl&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl version &lt;span class="nt"&gt;--short&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(omitting the &lt;code&gt;--short&lt;/code&gt; flag prints detailed version information in JSON format)&lt;/p&gt;

&lt;p&gt;Here, I get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Client Version: v1.21.2-13+d2965f0db10712
Server Version: v1.21.2-eks-06eac09
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing to note is that the Kubernetes client and server versions should only be &lt;em&gt;at most 1 minor version apart&lt;/em&gt;. So if you downloaded the absolute latest &lt;code&gt;kubectl&lt;/code&gt; version (1.23 at the time of writing), you would see a warning about incompatible Kubernetes client / server versions as the server is at 1.21 which is 2 minor versions behind. In that case, you will have to downgrade your version of &lt;code&gt;kubectl&lt;/code&gt; accordingly.&lt;/p&gt;

&lt;p&gt;Now that our cluster is ready and we can connect to it, let's fetch some info about our cluster.&lt;/p&gt;

&lt;p&gt;Get a list of all clusters we have created with &lt;code&gt;eksctl&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;eksctl get cluster
2021-12-29 21:47:35 &lt;span class="o"&gt;[&lt;/span&gt;ℹ]  eksctl version 0.77.0
2021-12-29 21:47:35 &lt;span class="o"&gt;[&lt;/span&gt;ℹ]  using region us-east-1
NAME                REGION      EKSCTL CREATED
beautiful-unicorn-1640783508    us-east-1   True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a list of all nodes in our cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get nodes
NAME                             STATUS   ROLES    AGE   VERSION
ip-192-168-23-192.ec2.internal   Ready    &amp;lt;none&amp;gt;   20m   v1.21.5-eks-bc4871b
ip-192-168-61-32.ec2.internal    Ready    &amp;lt;none&amp;gt;   20m   v1.21.5-eks-bc4871b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a list of all namespaces in our cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get namespaces
NAME              STATUS   AGE
default           Active   30m
kube-node-lease   Active   30m
kube-public       Active   30m
kube-system       Active   30m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a list of services in the default namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get services
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;   AGE
kubernetes   ClusterIP   10.100.0.1   &amp;lt;none&amp;gt;        443/TCP   31m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a list of services in the &lt;code&gt;kube-system&lt;/code&gt; namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get services &lt;span class="nt"&gt;--namespace&lt;/span&gt; kube-system
NAME       TYPE        CLUSTER-IP    EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;         AGE
kube-dns   ClusterIP   10.100.0.10   &amp;lt;none&amp;gt;        53/UDP,53/TCP   32m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a list of pods in the default namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods
No resources found &lt;span class="k"&gt;in &lt;/span&gt;default namespace.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are no pods in the default namespace because we haven't deployed any apps yet. However, a number of pods were created in other namespaces (such as &lt;code&gt;kube-system&lt;/code&gt;) for the control plane:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods &lt;span class="nt"&gt;--all-namespaces&lt;/span&gt;
NAMESPACE     NAME                       READY   STATUS    RESTARTS   AGE
kube-system   aws-node-ftwmx             1/1     Running   0          28m
kube-system   aws-node-km5k2             1/1     Running   0          29m
kube-system   coredns-66cb55d4f4-8645g   1/1     Running   0          37m
kube-system   coredns-66cb55d4f4-l5wxg   1/1     Running   0          37m
kube-system   kube-proxy-cmpr2           1/1     Running   0          29m
kube-system   kube-proxy-h5phz           1/1     Running   0          28m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command fetches pods from all namespaces. Here, we see all control plane components were automatically deployed to the &lt;code&gt;kube-system&lt;/code&gt; namespace.&lt;/p&gt;

&lt;p&gt;Now that everything is working correctly, let's deploy our first Pod!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-a-single-pod-to-our-eks-cluster"&gt;
  &lt;/a&gt;
  Deploying a single Pod to our EKS cluster
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/sample-deployment.html"&gt;Deploy a sample application&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's first create a namespace for our website, to separate it from other workloads. Recall that Kubernetes favors a declarative approach, whereby we describe objects with YAML configuration files and apply them to the cluster.&lt;/p&gt;

&lt;p&gt;Save the following in a file &lt;code&gt;namespace.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Namespace&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at some of the fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;kind&lt;/code&gt;: Describes the kind of object we are defining; in this case, a &lt;code&gt;Namespace&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;labels&lt;/code&gt;: A set of key-value pairs used to identify and keep track of objects. In this case, we define a single label &lt;code&gt;app&lt;/code&gt; with value &lt;code&gt;donaldsebleung-com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt;: The name of our object. Here, we call it &lt;code&gt;donaldsebleung-com&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's apply it to our cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; namespace.yaml
namespace/donaldsebleung-com created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen above, we apply a YAML configuration file with &lt;code&gt;kubectl apply&lt;/code&gt;. The &lt;code&gt;-f &amp;lt;FILE&amp;gt;&lt;/code&gt; option specifies a single file to apply.&lt;/p&gt;

&lt;p&gt;The output indicates that the namespace was successfully created, but let's list all namespaces again to be safe:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get namespaces
NAME                 STATUS   AGE
default              Active   44h
donaldsebleung-com   Active   8s
kube-node-lease      Active   44h
kube-public          Active   44h
kube-system          Active   44h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also get info for a single object, like so: &lt;code&gt;kubectl get &amp;lt;OBJECT_KIND&amp;gt;/&amp;lt;OBJECT_NAME&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get namespace/donaldsebleung-com
NAME                 STATUS   AGE
donaldsebleung-com   Active   11m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since a namespace primarily exists to partition object within a cluster, they aren't very interesting on their own so we don't see much being printed out. But we can get more information on our namespace by specifying the &lt;code&gt;-o yaml&lt;/code&gt; option, which outputs the information about the object in YAML format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get namespace/donaldsebleung-com &lt;span class="nt"&gt;-o&lt;/span&gt; yaml
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"apiVersion"&lt;/span&gt;:&lt;span class="s2"&gt;"v1"&lt;/span&gt;,&lt;span class="s2"&gt;"kind"&lt;/span&gt;:&lt;span class="s2"&gt;"Namespace"&lt;/span&gt;,&lt;span class="s2"&gt;"metadata"&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"annotations"&lt;/span&gt;:&lt;span class="o"&gt;{}&lt;/span&gt;,&lt;span class="s2"&gt;"labels"&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"app"&lt;/span&gt;:&lt;span class="s2"&gt;"donaldsebleung-com"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"donaldsebleung-com"&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
  creationTimestamp: &lt;span class="s2"&gt;"2021-12-31T09:56:19Z"&lt;/span&gt;
  labels:
    app: donaldsebleung-com
    kubernetes.io/metadata.name: donaldsebleung-com
  name: donaldsebleung-com
  resourceVersion: &lt;span class="s2"&gt;"367633"&lt;/span&gt;
  uid: ef89d626-1437-41b6-b969-db44eaa47d6c
spec:
  finalizers:
  - kubernetes
status:
  phase: Active
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice this contains all the information we specified in our &lt;code&gt;namespace.yaml&lt;/code&gt; file, &lt;em&gt;and more&lt;/em&gt;. Tip: if you're not sure where to start when writing a YAML file for a particular kind of object, printing the YAML configuration for other objects of the same kind could serve as a reference.&lt;/p&gt;

&lt;p&gt;Now let's define a pod in our newly created namespace. Save the following configuration in a &lt;code&gt;pod.yaml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung/donaldsebleung-com:0.2.0&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8443&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we see that the &lt;code&gt;kind&lt;/code&gt; of object is a &lt;code&gt;Pod&lt;/code&gt; instead of a namespace. Let's look at some new (and existing) fields as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We added an &lt;code&gt;app&lt;/code&gt; label to our pod again, with value &lt;code&gt;donaldsebleung-com&lt;/code&gt;. Unlike the case of the namespace where the label was purely declarative, a label (or set of labels) on a pod has practical uses we'll see shortly&lt;/li&gt;
&lt;li&gt;The name of our pod is &lt;code&gt;donaldsebleung-com&lt;/code&gt;, which is identical to that of our namespace. In general, distinct objects only require distinct names if (1) they belong to the same namespace, and (2) they are the same kind of object&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;namespace&lt;/code&gt; field under &lt;code&gt;metadata&lt;/code&gt; specifies that this pod should be created in the &lt;code&gt;donaldsebleung-com&lt;/code&gt; namespace. If omitted, the pod is created in the &lt;code&gt;default&lt;/code&gt; namespace instead&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;spec&lt;/code&gt; top-level field describes what our pod is actually made of&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;containers&lt;/code&gt;, the &lt;code&gt;name&lt;/code&gt; field specifies the name of a container inside our pod. Recall that a pod can have multiple containers; hence we see a dash &lt;code&gt;-&lt;/code&gt; before the &lt;code&gt;name&lt;/code&gt; field, indicating that we are specifying a &lt;em&gt;list&lt;/em&gt; of containers, though in this case, the length of the list is 1&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;image&lt;/code&gt; field specifies which image our container should be based on. Here, we use an image with tag &lt;code&gt;donaldsebleung/donaldsebleung-com:0.2.0&lt;/code&gt;, built from the following Dockerfile:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ubuntu:focal&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; wget openjdk-11-jdk
&lt;span class="k"&gt;RUN &lt;/span&gt;wget https://github.com/DonaldKellett/donaldsebleung-com/archive/refs/tags/v0.2.0.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;tar &lt;/span&gt;xvf v0.2.0.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm &lt;/span&gt;v0.2.0.tar.gz
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mv &lt;/span&gt;donaldsebleung-com-0.2.0 /app
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;./mvnw package
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["/usr/bin/java", "-jar", "/app/target/personal-website-0.0.1-SNAPSHOT.jar"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;containerPort&lt;/code&gt; field under &lt;code&gt;ports&lt;/code&gt; exposes port &lt;code&gt;8443&lt;/code&gt; from the container. This is because our web server serves an HTTPS web page on port 8443&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; pod.yaml
pod/donaldsebleung-com created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;View pods in our namespace (&lt;code&gt;-n&lt;/code&gt; is short for &lt;code&gt;--namespace&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 READY   STATUS    RESTARTS   AGE
donaldsebleung-com   1/1     Running   0          85s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we see it's up and running. If not, e.g. you see &lt;code&gt;0/1&lt;/code&gt; under &lt;code&gt;READY&lt;/code&gt;, wait for a short while and run the same command again until the pod is ready.&lt;/p&gt;

&lt;p&gt;Congratulations! You've successfully deployed your first pod to a Kubernetes cluster. But wait - how do we know the web server is &lt;em&gt;actually&lt;/em&gt; up and running? Recall that pods are ephemeral - they can be created and destroyed at will, either by the cluster administrator or by higher-level objects such as deployments - so we cannot rely on a particular pod always being available. To access the web server inside our pod, we'll need to expose our pod to the rest of the cluster (and later, to the outside world) via a Service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exposing-our-pod-to-the-cluster-via-a-service"&gt;
  &lt;/a&gt;
  Exposing our pod to the cluster via a Service
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/sample-deployment.html"&gt;Deploy a sample application&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Recall that a Service is an abstraction that exposes running workloads (in our case, a single pod). There are 4 types of services at the time of writing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ClusterIP: exposes the workload to the rest of the cluster through an internal IP, but not to the outside world&lt;/li&gt;
&lt;li&gt;NodePort: exposes the workload through a specified port on all nodes in the cluster. This is the simplest way to expose a workload to the outside world, but is rarely the best choice&lt;/li&gt;
&lt;li&gt;LoadBalancer: exposes the workload through a dedicated load balancer. The exact details of how the load balancer is provisioned, etc., depends on the cloud provider&lt;/li&gt;
&lt;li&gt;ExternalName: yet another type of service we won't cover in this article&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;More details about these types of services and how they differ can be found through in &lt;a href="https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0"&gt;this excellent writeup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, we'll use a &lt;code&gt;ClusterIP&lt;/code&gt; service and explore our website within the cluster shortly. Save the following in a &lt;code&gt;clusterip-service.yaml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;    
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterIP&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
    &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8443&lt;/span&gt;
    &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, a brief overview of the fields used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Under &lt;code&gt;spec&lt;/code&gt;, we have a &lt;code&gt;selector&lt;/code&gt; field. This selects pods based on their labels that the service should target. Here, we specify that our service should target pods with an &lt;code&gt;app&lt;/code&gt; label of value &lt;code&gt;donaldsebleung-com&lt;/code&gt;. That's why I told you labels on pods are important and not purely decorative. See? ;-)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;ClusterIP&lt;/code&gt;. This produces an internal IP we can use within the cluster to access the service&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;ports&lt;/code&gt;, the first and only item has &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;targetPort&lt;/code&gt; fields. The &lt;code&gt;targetPort&lt;/code&gt; field specifies the port within the pod(s) that network requests should be forwarded to; in this case, &lt;code&gt;8443&lt;/code&gt;, since that's where our web server is listening at. The &lt;code&gt;port&lt;/code&gt; field specifies the port through which the service is accessed from outside&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;protocol&lt;/code&gt; field specifies the transport layer protocol used (e.g. TCP, UDP, ICMP); TCP in our case&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So our service provides an IP within the cluster that forwards HTTPS requests from TCP port 443 (the standard HTTPS port) to TCP port 8443. The net result is that within the cluster, instead of having to access the website as https://&amp;lt;clusterIP&amp;gt;:8443 , we can access it as https://&amp;lt;clusterIP&amp;gt; instead like we would a normal website.&lt;/p&gt;

&lt;p&gt;Apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; clusterip-service.yaml
service/donaldsebleung-com created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Confirm the service is created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get services &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;   AGE
donaldsebleung-com   ClusterIP   10.100.36.224   &amp;lt;none&amp;gt;        443/TCP   17m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we see an IP &lt;code&gt;10.100.36.224&lt;/code&gt; accessible from within the cluster. Notice that the &lt;code&gt;EXTERNAL-IP&lt;/code&gt; is &lt;code&gt;&amp;lt;none&amp;gt;&lt;/code&gt;, i.e. we still cannot access the service from outside the cluster.&lt;/p&gt;

&lt;p&gt;To access the service from within a cluster, spawn a shell inside our pod:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com &lt;span class="nt"&gt;-it&lt;/span&gt; donaldsebleung-com &lt;span class="nt"&gt;--&lt;/span&gt; /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A breakdown of the command used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;kubectl exec&lt;/code&gt;: similar to &lt;code&gt;docker exec&lt;/code&gt;, but here we execute a command within the specified pod&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-n donaldsebleung-com&lt;/code&gt;: in the &lt;code&gt;donaldsebleung-com&lt;/code&gt; namespace&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-it donaldsebleung-com&lt;/code&gt;: allocate an &lt;strong&gt;i&lt;/strong&gt;nteractive &lt;strong&gt;t&lt;/strong&gt;ty (same as in Docker) for the pod with name &lt;code&gt;donaldsebleung-com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-- /bin/bash&lt;/code&gt;: pass the remaining arguments to the pod - here we pass in &lt;code&gt;/bin/bash&lt;/code&gt; to execute the Bash shell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If successful, you should see a root shell and the working directory is &lt;code&gt;/app&lt;/code&gt;. In the root shell, fetch the webpage with &lt;code&gt;wget&lt;/code&gt; and print to stdout, replacing &lt;code&gt;10.100.36.224&lt;/code&gt; with &lt;em&gt;your&lt;/em&gt; cluster IP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# wget -qO - https://10.100.36.224 --no-check-certificate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;--no-check-certificate&lt;/code&gt; option is required since the web server uses a self-signed certificate by default.&lt;/p&gt;

&lt;p&gt;If successful, you should see an HTML page being printed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;!--
    Hyperspace by HTML5 UP
    html5up.net | @ajlkn
    Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
--&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we've seen how to expose a service within the cluster, let's see how to do the same but to the outside world. But before that, let's cover Deployments - a higher-level object that manages a ReplicaSet of pods and takes care of rolling updates and rollbacks.&lt;/p&gt;

&lt;p&gt;Clean up our existing pod and service with the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl delete &lt;span class="nt"&gt;-f&lt;/span&gt; clusterip-service.yaml
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl delete &lt;span class="nt"&gt;-f&lt;/span&gt; pod.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;kubectl delete&lt;/code&gt; deletes the object(s) specified in the provided YAML file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-our-first-deployment"&gt;
  &lt;/a&gt;
  Creating our first Deployment
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/sample-deployment.html"&gt;Deploy a sample application&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A Deployment manages a ReplicaSet, which in turn manages a fixed number of replicas of Pods. While a ReplicaSet only ensures that the number of pods remains at the desired number of replicas, a Deployment offers rolling update and rollback functionality as well by replacing pods in the deployment incrementally, so there is no downtime.&lt;/p&gt;

&lt;p&gt;Save the following in a file &lt;code&gt;deployment.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
      &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung/donaldsebleung-com:0.2.0&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8443&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, in the &lt;code&gt;spec&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;replicas&lt;/code&gt; indicates how many pod replicas should be created; in this case 3&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;selector&lt;/code&gt; indicates how the Deployment keeps track of its pods. Here, we &lt;code&gt;matchLabels&lt;/code&gt; where the &lt;code&gt;app&lt;/code&gt; label on the pod is equal to &lt;code&gt;donaldsebleung-com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;template&lt;/code&gt;: the template to use for each pod in the deployment. Notice this is identical to our &lt;code&gt;pod.yaml&lt;/code&gt; except leaving out &lt;code&gt;apiVersion&lt;/code&gt;, &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;metadata.name&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; deployment.yaml
deployment.apps/donaldsebleung-com created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check deployments in our namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get deployments &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 READY   UP-TO-DATE   AVAILABLE   AGE
donaldsebleung-com   3/3     3            3           17m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see here that all 3 replicas of the &lt;code&gt;donaldsebleung-com&lt;/code&gt; deployment are up and running. If not, e.g. you see &lt;code&gt;2/3&lt;/code&gt;, wait a few seconds and try again, until all replicas are up.&lt;/p&gt;

&lt;p&gt;Let's expose our deployment to the outside world using a load balancer. But as per &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html"&gt;Network load balancing on Amazon EKS&lt;/a&gt;, we need to first deploy &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html"&gt;AWS Load Balancer Controller&lt;/a&gt; to our EKS cluster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-aws-load-balancer-controller-to-our-eks-cluster"&gt;
  &lt;/a&gt;
  Deploying AWS Load Balancer Controller to our EKS cluster
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html"&gt;AWS Load Balancer Controller&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: this section is highly specific to Amazon EKS and contains a lot of AWS-related details that are not applicable to other managed Kubernetes offerings or Kubernetes in general. Don't feel too bad if you find yourself blindly copy-pasting commands in this section without fully understanding what is going on (-:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First we need to create an IAM OIDC identity provider for our cluster (&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html"&gt;source&lt;/a&gt;) - replace &lt;code&gt;beautiful-unicorn-1640783508&lt;/code&gt; with the actual name of your cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;eksctl utils associate-iam-oidc-provider &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--cluster&lt;/span&gt; beautiful-unicorn-1640783508 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--approve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now download "an IAM policy for the AWS Load Balancer Controller that allows it to make calls to AWS APIs on your behalf" (&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html"&gt;source&lt;/a&gt;), and use it to create an IAM policy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-o&lt;/span&gt; iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.3.1/docs/install/iam_policy.json
&lt;span class="nv"&gt;$ &lt;/span&gt;aws iam create-policy &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--policy-name&lt;/span&gt; AWSLoadBalancerControllerIAMPolicy &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--policy-document&lt;/span&gt; file://iam_policy.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now get our account ID and make note of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws sts get-caller-identity
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case, my account ID is &lt;code&gt;477657529190&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now create an IAM role for use with a Kubernetes service account (view the linked reference article for details), replacing the cluster name and account ID as appropriate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;eksctl create iamserviceaccount &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--cluster&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;beautiful-unicorn-1640783508 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;kube-system &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aws-load-balancer-controller &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--attach-policy-arn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arn:aws:iam::477657529190:policy/AWSLoadBalancerControllerIAMPolicy &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--override-existing-serviceaccounts&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--approve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we are ready to install the AWS Load Balancer Controller itself (-: Install &lt;code&gt;cert-manager&lt;/code&gt; to our cluster for managing certificate-related stuff:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--validate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-f&lt;/span&gt; https://github.com/jetstack/cert-manager/releases/download/v1.5.4/cert-manager.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may take a while to execute (no more than a few dozen seconds) as Kubernetes creates a large number of objects.&lt;/p&gt;

&lt;p&gt;Now download the controller specification:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-Lo&lt;/span&gt; v2_3_1_full.yaml https://github.com/kubernetes-sigs/aws-load-balancer-controller/releases/download/v2.3.1/v2_3_1_full.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the downloaded file &lt;code&gt;v2_3_1_full.yaml&lt;/code&gt; in your favorite text editor (mine is Vim) and make the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delete the &lt;code&gt;ServiceAccount&lt;/code&gt; section of the file. It looks like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ServiceAccount&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app.kubernetes.io/component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;controller&lt;/span&gt;
    &lt;span class="na"&gt;app.kubernetes.io/name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws-load-balancer-controller&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws-load-balancer-controller&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kube-system&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Replace &lt;code&gt;your-cluster-name&lt;/code&gt; in the deployment spec with the actual name of your cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; v2_3_1_full.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, this make take a few seconds.&lt;/p&gt;

&lt;p&gt;To gain peace of mind, verify the controller is properly installed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get deployment/aws-load-balancer-controller &lt;span class="nt"&gt;-n&lt;/span&gt; kube-system
NAME                           READY   UP-TO-DATE   AVAILABLE   AGE
aws-load-balancer-controller   1/1     1            1           105s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Phew, that was complicated! Back to the interesting stuff ;-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expose-our-deployment-to-the-outside-world-using-a-load-balancer"&gt;
  &lt;/a&gt;
  Expose our deployment to the outside world using a load balancer
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/sample-deployment.html"&gt;Deploy a sample application&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's make a copy of our &lt;code&gt;clusterip-service.yaml&lt;/code&gt;. We'll name the copy &lt;code&gt;loadbalancer-service.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp &lt;/span&gt;clusterip-service.yaml loadbalancer-service.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;code&gt;loadbalancer-service.yaml&lt;/code&gt; and change the line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterIP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LoadBalancer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yup, that's it. Now apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; loadbalancer-service.yaml
service/donaldsebleung-com created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get the service details. Notice how the type is now &lt;code&gt;LoadBalancer&lt;/code&gt;, and we have an external IP (or DNS name, rather)!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get services &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 TYPE           CLUSTER-IP      EXTERNAL-IP                                                              PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;         AGE
donaldsebleung-com   LoadBalancer   10.100.71.229   a9e75f2b7fc344b37becbe607134dfa5-772464237.us-east-1.elb.amazonaws.com   443:32501/TCP   47s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now visit &lt;a href="https://a9e75f2b7fc344b37becbe607134dfa5-772464237.us-east-1.elb.amazonaws.com"&gt;https://a9e75f2b7fc344b37becbe607134dfa5-772464237.us-east-1.elb.amazonaws.com&lt;/a&gt; , replacing the external DNS name as appropriate for your scenario. The browser may display a scary warning about a self-signed certificate. Ignore it, and proceed with viewing the website content:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2xRxcnGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j995h5k1m2dldul1u6wg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2xRxcnGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j995h5k1m2dldul1u6wg.png" alt="donaldsebleung/donaldsebleung-com:0.2.0 on Kubernetes" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to poke around the website and learn more about me (shameless promotion here :-P). When you're done, continue with the rest of this article.&lt;/p&gt;

&lt;p&gt;You did it! You exposed your deployment to the outside world using a load balancer and saw the results in your browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rolling-updates"&gt;
  &lt;/a&gt;
  Rolling updates
&lt;/h2&gt;

&lt;p&gt;A major advantage of deployments over standalone pods (or even ReplicaSets) is the ability to perform a &lt;em&gt;rolling update&lt;/em&gt; without application downtime. It does this by replacing the pods in the deployment one by one (or as configured in the YAML file) until all the old pods have been replaced by new ones. Let's see this in action.&lt;/p&gt;

&lt;p&gt;Copy our existing &lt;code&gt;deployment.yaml&lt;/code&gt; to &lt;code&gt;deployment-patched.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp &lt;/span&gt;deployment.yaml deployment-patched.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now update the container image used in each of the pods, from &lt;code&gt;donaldsebleung/donaldsebleung-com:0.2.0&lt;/code&gt; to &lt;code&gt;donaldsebleung/donaldsebleung-com:0.2.0-1&lt;/code&gt;, which simply replaces the slogan "IT consultant by day, software developer by night" on the homepage with "Cloud, virtualization and open-source enthusiast", because I've recently realized that the old slogan doesn't fit well with the rest of the content on my website. Your modified &lt;code&gt;deployment-patched.yaml&lt;/code&gt; file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
      &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung/donaldsebleung-com:0.2.0-1&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8443&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Interested learners may refer to the Dockerfile for &lt;code&gt;0.2.0-1&lt;/code&gt;, which simply applies a patch to the downloaded source code before building the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ubuntu:focal&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; wget patch openjdk-11-jdk
&lt;span class="k"&gt;RUN &lt;/span&gt;wget https://github.com/DonaldKellett/donaldsebleung-com/archive/refs/tags/v0.2.0.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;tar &lt;/span&gt;xvf v0.2.0.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm &lt;/span&gt;v0.2.0.tar.gz
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mv &lt;/span&gt;donaldsebleung-com-0.2.0 /app
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; index.patch .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;patch &lt;span class="nt"&gt;-p0&lt;/span&gt; &amp;lt; index.patch
&lt;span class="k"&gt;RUN &lt;/span&gt;./mvnw package
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["/usr/bin/java", "-jar", "/app/target/personal-website-0.0.1-SNAPSHOT.jar"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the patch, if you're interested:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--- src/main/resources/templates/index.html 2021-12-24 21:54:03.000000000 +0800
+++ src/main/resources/templates/index_new.html 2021-12-30 21:39:42.666305634 +0800
@@ -29,7 +29,7 @@
                    &amp;lt;section id="intro" class="wrapper style1 fullscreen fade-up"&amp;gt;
                        &amp;lt;div class="inner"&amp;gt;
                            &amp;lt;h1&amp;gt;Donald S. Leung&amp;lt;/h1&amp;gt;
-                           &amp;lt;p&amp;gt;IT consultant by day, software developer by night&amp;lt;/p&amp;gt;
+                           &amp;lt;p&amp;gt;Cloud, virtualization and open source enthusiast&amp;lt;/p&amp;gt;
                            &amp;lt;ul class="actions"&amp;gt;
                                &amp;lt;li&amp;gt;&amp;lt;a href="/about" class="button scrolly"&amp;gt;About me&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                            &amp;lt;/ul&amp;gt;
@@ -55,4 +55,4 @@
            &amp;lt;script src="assets/js/main.js"&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;/body&amp;gt;
-&amp;lt;/html&amp;gt;
\ No newline at end of file
+&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; deployment-patched.yaml
deployment.apps/donaldsebleung-com configured
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And refresh your browser multiple times. Notice that the website should be up all the time - there should be no moment where it is not available. Furthermore, for a while, you should see the slogan on the homepage alternate between the old and new versions. Eventually, though, it should converge to the following, which indicates all pods in the deployment have been replaced to use the new container image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mg_WEwV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whk91j2wubiwh5xgei7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mg_WEwV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whk91j2wubiwh5xgei7z.png" alt="donaldsebleung/donaldsebleung-com:0.2.0-1 on Kubernetes" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we conclude, let's look at one more feature: autoscaling deployments with HorizontalPodAutoscaler. But first, we need to &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/metrics-server.html"&gt;install the Kubernetes metric server&lt;/a&gt;, which provides aggregate resource usage data needed for autoscaling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-the-kubernetes-metric-server"&gt;
  &lt;/a&gt;
  Installing the Kubernetes metric server
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/metrics-server.html"&gt;Installing the Kubernetes metrics server&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Just apply the appropriate YAML config, as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now confirm it is properly deployed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get deployment/metrics-server &lt;span class="nt"&gt;-n&lt;/span&gt; kube-system
NAME             READY   UP-TO-DATE   AVAILABLE   AGE
metrics-server   1/1     1            1           83s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're good to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autoscaling-deployments-with-horizontalpodautoscaler"&gt;
  &lt;/a&gt;
  Autoscaling deployments with HorizontalPodAutoscaler
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/"&gt;HorizontalPodAutoscaler Walkthrough&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Currently, our deployment has a fixed number of 3 pods, which is good enough for testing and demonstration purposes. But what if the web traffic is low at a particular time interval? Would maintaining 3 pods in that case be a waste of resources? On the other hand, what if we experience a sudden surge in traffic? Is 3 pods enough to handle the surge gracefully without degradation in performance?&lt;/p&gt;

&lt;p&gt;Fortunately, through HorizontalPodAutoscaler (HPA), Kubernetes allows you to automatically scale the number of replicas in a Deployment depending on some metric(s) such as CPU utilization per pod. But first, we need to define some resource limits for our pods in the deployment. Save the following in a file &lt;code&gt;deployment-patched-with-limit.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
      &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung/donaldsebleung-com:0.2.0-1&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8443&lt;/span&gt;
        &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;500m&lt;/span&gt;
          &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;200m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is identical to &lt;code&gt;deployment-patched.yaml&lt;/code&gt; except we added the following part:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;500m&lt;/span&gt;
  &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;200m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;1m&lt;/code&gt; represents one-thousandth (or 0.001) of a CPU core, so &lt;code&gt;limits.cpu: 500m&lt;/code&gt; means each pod is not allowed to use more than 0.5 CPU cores. &lt;code&gt;requests.cpu: 200m&lt;/code&gt; means that each pod requests 0.2 CPU cores.&lt;/p&gt;

&lt;p&gt;Apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; deployment-patched-with-limit.yaml
deployment.apps/donaldsebleung-com configured
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since Kubernetes favors a declarative approach, notice we did not need to delete the deployment and re-deploy - we just had to apply the new YAML config and Kubernetes will configure the deployment to converge towards the new spec.&lt;/p&gt;

&lt;p&gt;Now save the following in &lt;code&gt;hpa.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;autoscaling/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;maxReplicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
  &lt;span class="na"&gt;minReplicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
    &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;targetCPUUtilizationPercentage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;maxReplicas&lt;/code&gt; is the maximum number of replicas we should have, regardless of the load. We set this to 10, so there can never be more than 10 replicas&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;minReplicas&lt;/code&gt;: same as &lt;code&gt;maxReplicas&lt;/code&gt; but sets the minimum. Here we make sure we always have at least 1 replica&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;scaleTargetRef&lt;/code&gt;: what object does our HPA target? Here, we target the deployment &lt;code&gt;donaldsebleung-com&lt;/code&gt; by name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;targetCPUUtilizationPercentage&lt;/code&gt;: what percentage of CPU utilization relative to the CPU limit we should aim for in each pod. Here, we specify 50%, i.e. we aim for &lt;code&gt;0.5 * 500m = 250m = 0.25&lt;/code&gt; CPU cores used per pod&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; hpa.yaml
horizontalpodautoscaler.autoscaling/donaldsebleung-com created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait a few seconds, then query our HPA:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get hpa &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 REFERENCE                       TARGETS   MINPODS   MAXPODS   REPLICAS   AGE
donaldsebleung-com   Deployment/donaldsebleung-com   0%/50%    1         10        1          20m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we now have 1 replica instead of 3. This is because there is no traffic to be handled, so the pods aren't using any noticeable amount of CPU. In response, the HPA scaled our deployment down to 1 replica in order to conserve resources.&lt;/p&gt;

&lt;p&gt;Another thing: &lt;code&gt;hpa&lt;/code&gt; is short for &lt;code&gt;horizontalpodautoscaler&lt;/code&gt;. Our command might as well have been:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get horizontalpodautoscalers &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But &lt;code&gt;hpa&lt;/code&gt; is easier to type. In fact, this isn't the only abbreviation we can use:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Shorthand&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Namespace&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ns&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pod&lt;/td&gt;
&lt;td&gt;&lt;code&gt;po&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ReplicaSet&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rs&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deployment&lt;/td&gt;
&lt;td&gt;&lt;code&gt;deploy&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;&lt;code&gt;svc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;I personally find the full names more descriptive and readable. But if you're lazy, or the full name is insanely long (e.g. &lt;code&gt;horizontalpodautoscaler&lt;/code&gt;), feel free to use the shorthands instead.&lt;/p&gt;

&lt;p&gt;Now try to generate some load by querying the site repeatedly. You might want to open this in a new terminal window (or tab), to keep it running while we make our observations in the original window (replace the external DNS name accordingly):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do &lt;/span&gt;wget &lt;span class="nt"&gt;-qO&lt;/span&gt; - https://a9e75f2b7fc344b37becbe607134dfa5-772464237.us-east-1.elb.amazonaws.com &lt;span class="nt"&gt;--no-check-certificate&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might even want to run it in multiple terminal windows; I opened a few dozen of them myself (-:&lt;/p&gt;

&lt;p&gt;Wait a short while (maybe a minute or two), and query our HPA again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get hpa &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 REFERENCE                       TARGETS   MINPODS   MAXPODS   REPLICAS   AGE
donaldsebleung-com   Deployment/donaldsebleung-com   39%/50%   1         10        10         37m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look, now the CPU utilization has gone up and our HPA responded by scaling our deployment up to 10 replicas!&lt;/p&gt;

&lt;p&gt;Once you're done exploring, stop bombarding the endpoint with requests by closing the appropriate terminal windows / tabs. Wait a few minutes, and you should see the CPU utilization go down again and the number of replicas scaled back down to 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get hpa &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 REFERENCE                       TARGETS   MINPODS   MAXPODS   REPLICAS   AGE
donaldsebleung-com   Deployment/donaldsebleung-com   1%/50%    1         10        1          45m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cleanup"&gt;
  &lt;/a&gt;
  Cleanup
&lt;/h2&gt;

&lt;p&gt;Let's delete our namespace. Since we put every other object we've created in this namespace, this should delete those objects as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl delete &lt;span class="nt"&gt;-f&lt;/span&gt; namespace.yaml
namespace &lt;span class="s2"&gt;"donaldsebleung-com"&lt;/span&gt; deleted
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now delete our cluster (replace the name accordingly):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;eksctl delete cluster &lt;span class="nt"&gt;-n&lt;/span&gt; beautiful-unicorn-1640783508
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may take a few minutes. In the end, you should see something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2022-01-01 12:30:38 [✔]  all cluster resources were deleted
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this hands-on session, we learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What Kubernetes is&lt;/li&gt;
&lt;li&gt;How it relates to the microservice architecture used in many modern applications&lt;/li&gt;
&lt;li&gt;Key concepts and objects in Kubernetes&lt;/li&gt;
&lt;li&gt;How Kubernetes works; in particular, the declarative approach it favors&lt;/li&gt;
&lt;li&gt;How to actually apply these concepts to a real, multi-node Kubernetes cluster by leveraging a managed Kubernetes offering by AWS known as Amazon EKS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, this is just the tip of the iceberg - there are so many more features in Kubernetes that we have yet to explore. If this article piqued your interest in Kubernetes, consider learning more about it through the following resources (or otherwise):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/"&gt;Official Kubernetes website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/introduction-to-kubernetes"&gt;Introduction to Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/introduction-to-containers-kubernetes-and-openshift"&gt;Introduction to Containers, Kubernetes, and OpenShift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until then, happy new year!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;DonaldKellett/k8s-intro-eks&lt;/code&gt;: &lt;a href="https://github.com/DonaldKellett/k8s-intro-eks"&gt;https://github.com/DonaldKellett/k8s-intro-eks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes - Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Kubernetes"&gt;https://en.wikipedia.org/wiki/Kubernetes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes: &lt;a href="https://kubernetes.io/"&gt;https://kubernetes.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Getting started with Amazon EKS: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Minikube: &lt;a href="https://minikube.sigs.k8s.io/docs/start/"&gt;https://minikube.sigs.k8s.io/docs/start/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;kind: &lt;a href="https://kind.sigs.k8s.io/"&gt;https://kind.sigs.k8s.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;kubeadm: &lt;a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/"&gt;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Getting started with Amazon EKS - eksctl: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Deploy a sample application: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/sample-deployment.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/sample-deployment.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Service | Kubernetes: &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;https://kubernetes.io/docs/concepts/services-networking/service/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes NodePort vs LoadBalancer vs Ingress? When should I use what?: &lt;a href="https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0"&gt;https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Network load balancing on Amazon EKS: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS Load Balancer Controller: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Create an IAM OIDC provider for your cluster: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Installing the Kubernetes metrics server: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/metrics-server.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/metrics-server.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;HorizontalPodAutoscaler Walkthrough: &lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/"&gt;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to Kubernetes: &lt;a href="https://www.edx.org/course/introduction-to-kubernetes"&gt;https://www.edx.org/course/introduction-to-kubernetes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to Containers, Kubernetes, and OpenShift: &lt;a href="https://www.edx.org/course/introduction-to-containers-kubernetes-and-openshift"&gt;https://www.edx.org/course/introduction-to-containers-kubernetes-and-openshift&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>kubernetes</category>
      <category>aws</category>
      <category>cloud</category>
      <category>containers</category>
    </item>
  </channel>
</rss>
