<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Complete Guide to Adding AWS Resources to Your Amplify Project </title>
      <author>Michael Liendo</author>
      <pubDate>Mon, 13 Dec 2021 18:03:24 +0000</pubDate>
      <link>https://dev.to/mtliendo/the-complete-guide-to-adding-aws-resources-to-your-amplify-project-4mnf</link>
      <guid>https://dev.to/mtliendo/the-complete-guide-to-adding-aws-resources-to-your-amplify-project-4mnf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RlY6M4Uo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638891565224/1Xa3SzL8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlY6M4Uo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638891565224/1Xa3SzL8f.png" alt="image.png" width="880" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During  &lt;a href="https://www.youtube.com/watch?v=8_Xs8Ik0h1w"&gt;Dr. Werner Vogel's re:Invent keynote&lt;/a&gt;, the point was made that AWS has a ton of services--each one designed to solve a customer pain point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.amplify.aws"&gt;AWS Amplify&lt;/a&gt; composes some of those services together to create a framework designed for today's professional frontend developer. These services can be added with a CLI command. For example, to add a GraphQL API or REST API, one would type.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;amplify add api&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We at Amplify integrate core services needed to build production apps, but the reality is that today's applications need a wide variety of services. One initial solution, was to put all 175+ services in the CLI 😅&lt;/p&gt;

&lt;p&gt;I'm happy to say we have a better way:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;amplify add custom&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command will scaffold out files using  &lt;a href="https://aws.amazon.com/cdk/"&gt;AWS Cloud Development Kit&lt;/a&gt; (CDK) or AWS CloudFormation.  You can then use this stack to add whatever services you like. In this post, we'll walk through what that experience is like so you can feel comfortable adding any AWS resource to your next project,  not just &lt;a href="https://docs.amplify.aws/cli/"&gt;the ones offered directly through the CLI&lt;/a&gt; .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-custom-resource"&gt;
  &lt;/a&gt;
  Adding a custom resource
&lt;/h2&gt;

&lt;p&gt;As mentioned, both CDK and CloudFormation are supported, but my opinion is that most frontend developers will enjoy writing TypeScript to generate their infrastructure, so that's what we'll be using in this post. &lt;/p&gt;

&lt;p&gt;After running &lt;code&gt;amplify add custom&lt;/code&gt; and following the prompts, Amplify will generate our CDK stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NgBsRoBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638978503725/PiK4HVO8l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NgBsRoBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638978503725/PiK4HVO8l.png" alt="CLI output where a user has confirmed they are using CDK and selected yes to the prompts" width="880" height="229"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've worked in CDK with TypeScript before, you should feel right at home since the generated files are very similar to what you would get when running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="nx"&gt;typescript&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key differences is that we include a few more examples for folks to get started, and a few Amplify helpers to easily connect Amplify with your CDK backend.&lt;/p&gt;

&lt;p&gt;After deleting the commented examples for now, the following screenshot is what is left:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vIwIBXzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638979030116/MHwL2vG6lN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vIwIBXzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638979030116/MHwL2vG6lN.png" alt="a CDK stack that is very similar to what is generated when running cdk init" width="880" height="523"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-an-sns-topic-and-sqs"&gt;
  &lt;/a&gt;
  Adding an SNS Topic and SQS
&lt;/h2&gt;

&lt;p&gt;Let's say you wanted to &lt;a href="https://blog.focusotter.com/send-an-sms-to-customers-using-react-and-aws-amplify"&gt;send a text message to a group of interested individuals&lt;/a&gt;. To avoid bottling up the downstream service, we'll also add an SQS Queue so messages can be picked up in batches.&lt;/p&gt;

&lt;p&gt;This scenario is exactly what we provide out of the box as one of our commented out examples!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UE1m0UJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638981331864/h-hf6IhVl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UE1m0UJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638981331864/h-hf6IhVl.png" alt="An SNS Topic and SQS queue being created and added together in a CDK project from Amplify" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep in mind that any resource that you see in the  &lt;a href="https://docs.aws.amazon.com/cdk/api/latest/"&gt;CDK docs&lt;/a&gt; is fair game to be added.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-amplify-helpers"&gt;
  &lt;/a&gt;
  Understanding Amplify helpers
&lt;/h2&gt;

&lt;p&gt;Now that we understand how resources can be added, let's look at some of the extra benefits Amplify provides.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AmplifyHelpers&lt;/strong&gt;: We automatically install a package called &lt;code&gt;@aws-amplify/cli-extensibility-helper&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This currently contains two methods: &lt;code&gt;getProjectInfo&lt;/code&gt; and &lt;code&gt;addResourceDependency&lt;/code&gt;. We'll chat about adding resources dependencies in a bit, but let's first explore the available project info.&lt;/p&gt;

&lt;p&gt;Calling this method currently provides two properties: &lt;code&gt;envName&lt;/code&gt; and &lt;code&gt;projectName&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---lDUzeyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638984433953/pOlzlAf3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---lDUzeyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638984433953/pOlzlAf3r.png" alt="envName and projectName being show via intellisense" width="880" height="143"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;envName&lt;/code&gt; corresponds to the current Amplify environment. By default, this is &lt;code&gt;dev&lt;/code&gt;, though by running &lt;code&gt;amplify env add &amp;lt;envName&amp;gt;&lt;/code&gt; &lt;a href="https://docs.amplify.aws/cli/teams/overview/"&gt;users can add branches to their backends&lt;/a&gt; , much like when working in git.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🚨Due to the lifecycle of when the environment name gets populated, the &lt;code&gt;envName&lt;/code&gt; here is to be used for conditional checks only, not for naming resources:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AmplifyHelpers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getProjectInfo&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;envName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prod&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// create an IAM role to allow access to a prod account&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, the &lt;code&gt;projectName&lt;/code&gt; is the name specified in the CLI when first running &lt;code&gt;amplify add custom&lt;/code&gt; (see the first screenshot). As we saw when we created our resources, this is great for project organization:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7WfqN5z2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638985245133/RVgGjxJqV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7WfqN5z2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638985245133/RVgGjxJqV.png" alt="resource naming with the correct Amplify environment" width="880" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🗒️Note that the above screenshot also shows the correct way to pull in the Amplify environment when naming resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#working-with-amplify-generated-resources"&gt;
  &lt;/a&gt;
  Working with Amplify generated resources
&lt;/h2&gt;

&lt;p&gt;In addition to &lt;code&gt;AmplifyHelpers.getProjectInfo()&lt;/code&gt;, let's look at &lt;code&gt;AmplifyHelpers.addResourceDependency()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This method will bring in resources that we generated with the Amplify CLI. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🗒️ It's worth noting that when running &lt;code&gt;amplify add custom&lt;/code&gt;, example 3 of the commented boilerplate code provides this function by default.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because we're in TypeScript, our &lt;code&gt;retVal&lt;/code&gt; variable is already typed to reference our Amplify resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5-hXkLAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638988680956/ooaE55wfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5-hXkLAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638988680956/ooaE55wfl.png" alt="amplify resources typed objects" width="880" height="597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If by chance you just pushed up some resources and aren't seeing values like &lt;code&gt;Arn&lt;/code&gt; and &lt;code&gt;region&lt;/code&gt;, running &lt;code&gt;amplify build&lt;/code&gt; will regenerate this file.&lt;/p&gt;

&lt;p&gt;Within the &lt;code&gt;addResourceDependency&lt;/code&gt; function, we can specify which of our Amplify resources we would like access to by passing in an array, where each object in it has a &lt;code&gt;category&lt;/code&gt; and &lt;code&gt;resourceName&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;Keep in mind that what we have so far is a type representation of what we need (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, etc). So from here, we can use a CDK helper method to extract the actual value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authArn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;retVal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amplifystripestarter9420c337&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UserPoolArn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AUPEfcmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638989231513/lnQF7hGWR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AUPEfcmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638989231513/lnQF7hGWR.png" alt="complete flow of adding resources and extracting their values" width="880" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-custom-stacks-in-lambda"&gt;
  &lt;/a&gt;
  Accessing custom stacks in Lambda
&lt;/h2&gt;

&lt;p&gt;To look at the other side of the fence, suppose we ran &lt;code&gt;amplify push&lt;/code&gt; and deployed our custom stack. Then we add a Lambda via &lt;code&gt;amplify add function&lt;/code&gt; to our project. In this case, we also need to grant access for our Lambda to call SNS.&lt;/p&gt;

&lt;p&gt;To accomplish this, we can take advantage of the &lt;code&gt;custom-policies.json&lt;/code&gt; file that we now generate with every Lambda created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SNS:Publish&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Resource&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arn:aws:sns:*:*:mySNSTopic-${env}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we support wildcards for the region and account number. Additionally, we interpolate the Amplify environment by using the &lt;code&gt;${env}&lt;/code&gt; syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this example, we took a peek at how to subscribe an SQS Queue to an SNS Topic, but the learnings went far beyond that. By adding custom resources with the CDK, pulling in existing resources created with the Amplify CLI, and updating policies so Lambda functions have permissions to call our external resources, users now have the ability to create truly rich applications while minimizing time spent in the AWS Console.&lt;/p&gt;

&lt;p&gt;This is just one of aspects of Amplify's new extensibility releases. For a rundown of all the new enhancements and a glimpse into the posts I'll be releasing, checkout my blog post over on A Cloud Guru that covers  &lt;a href="https://acloudguru.com/blog/engineering/5-new-amplify-features-to-take-your-app-to-any-scale"&gt;5 new Amplify features to take your app to any scale&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Go Concurrency Patterns - Fan Out  Semaphore</title>
      <author>b0r</author>
      <pubDate>Mon, 13 Dec 2021 18:02:17 +0000</pubDate>
      <link>https://dev.to/b0r/go-concurrency-patterns-fan-out-semaphore-1ojf</link>
      <guid>https://dev.to/b0r/go-concurrency-patterns-fan-out-semaphore-1ojf</guid>
      <description>&lt;p&gt;To improve my Go Programming skills and become a better Go engineer, I have recently purchased an excellent on-demand education from &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt;. Materials are created by an expert Go engineer, &lt;a href="https://twitter.com/goinggodotnet"&gt;Bill Kennedy&lt;/a&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fxHctJEJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1108810000967892996/q5NMxGBG_normal.png" alt="Ardan Labs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ardan Labs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @ardanlabs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🎙️Welcome &lt;a href="https://twitter.com/MGallagher2010"&gt;@MGallagher2010&lt;/a&gt; to the podcast! 🎙️&lt;br&gt;&lt;br&gt;Engineers often have a negative impression of recruiters but sometimes you find a special person like Martin. As a specialist in &lt;a href="https://twitter.com/hashtag/golang"&gt;#golang&lt;/a&gt;, Martin is dedicated to finding the best opportunity for you &amp;amp; your family 😊
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:01 PM - 08 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1468657044907515910" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1468657044907515910" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1468657044907515910" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I have decide to record my process of learning how to write more idiomatic code, following Go best practices and design philosophies. &lt;/p&gt;

&lt;p&gt;This series of posts will describe concurrency patterns used for orchestration/signaling in Go via goroutines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fan-out-semaphore-pattern"&gt;
  &lt;/a&gt;
  Fan Out Semaphore Pattern
&lt;/h2&gt;

&lt;p&gt;The main idea behind &lt;strong&gt;Fan Out Semaphore Pattern&lt;/strong&gt; is to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;everything we had in the &lt;strong&gt;Fan Out Pattern&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a buffered channel that provides a signaling semantics &lt;/li&gt;
&lt;li&gt;a goroutine that starts multiple (child) goroutines to do some work&lt;/li&gt;
&lt;li&gt;a multiple (child) goroutines that do some work and use signaling channel to signal the work is done&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;PLUS&lt;/strong&gt; the addition of a:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;new &lt;strong&gt;semaphore channel&lt;/strong&gt; used to restrict the number of child goroutines that can be schedule to run&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TSBm7yiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75veyea6p6vynzpc3zse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSBm7yiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75veyea6p6vynzpc3zse.png" alt="Fan Out Pattern" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;Fan Out Pattern&lt;/strong&gt; we have multiple &lt;code&gt;employees&lt;/code&gt; that have some work to do. &lt;/p&gt;

&lt;p&gt;We also have a &lt;code&gt;manager&lt;/code&gt; (&lt;code&gt;main&lt;/code&gt; goroutine) that waits on that work to be done. Once each &lt;code&gt;employee&lt;/code&gt; work is done, &lt;code&gt;employee&lt;/code&gt; notifies &lt;code&gt;manager&lt;/code&gt; by sending a signal (&lt;code&gt;paper&lt;/code&gt;) via communication channel &lt;code&gt;ch&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Fan Out Semaphore Pattern&lt;/strong&gt; we have an additional constraint in terms of maximum number of &lt;code&gt;employees&lt;/code&gt; that can do work at any given moment. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h4&gt;

&lt;p&gt;For example, we have 100 employees, but only 10 available free seats in the office space. It doesn't matter that 100 employees are available to do the work when we only have adequate space for 10 employees at any given moment. Other 90 employees have to wait until on of those 10 finish the work and frees the seat.&lt;/p&gt;

&lt;p&gt;Good use case for this pattern would be batch processing, where we have some amount of work to do, but we want to limit the number of active executors at any given moment.&lt;/p&gt;

&lt;p&gt;Feel free to try the example on &lt;a href="https://play.golang.com/p/znS2WqIrWeG"&gt;Go Playground&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"math/rand"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;emps&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

    &lt;span class="c"&gt;// buffered channel, one slot for every goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// send side can complete without receive (non-blocking)&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;emps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// max number of RUNNING goroutines at any given time&lt;/span&gt;
    &lt;span class="c"&gt;// g := runtime.NumCPU()&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
    &lt;span class="c"&gt;// buffered channel, based on the max number of the goroutines in RUNNING state&lt;/span&gt;
    &lt;span class="c"&gt;// added to CONTROL the number of goroutines in RUNNING state&lt;/span&gt;
    &lt;span class="n"&gt;sem&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;emps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// create 10 goroutines in the RUNNABLE state&lt;/span&gt;
        &lt;span class="c"&gt;// one for each employee&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emp&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="c"&gt;// when goroutine moves from RUNNABLE to RUNNING state&lt;/span&gt;
            &lt;span class="c"&gt;// send signal/value inside a `sem` channel&lt;/span&gt;
            &lt;span class="c"&gt;// if `sem` channel buffer is full, this will block&lt;/span&gt;
            &lt;span class="c"&gt;// e.g. employee takes a seat&lt;/span&gt;
            &lt;span class="n"&gt;sem&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c"&gt;// simulate the idea of unknown latency (do not use in production)&lt;/span&gt;
                &lt;span class="c"&gt;// e.g. employee does some work&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="c"&gt;// once work is done, signal on ch channel&lt;/span&gt;
                &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;"paper"&lt;/span&gt;
                &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"employee : sent signal : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c"&gt;// once all work is done pull the value from the `sem` channel&lt;/span&gt;
            &lt;span class="c"&gt;// give place to another goroutine to do the work&lt;/span&gt;
            &lt;span class="c"&gt;// e.g. employee stands up and free up seat for another employee&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;sem&lt;/span&gt;
        &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// wait for all employee work to be done&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;emps&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// receive signal sent from the employee&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;

        &lt;span class="n"&gt;emps&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"manager : received signal : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;emps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go

employee : sent signal :  9
paper
manager : received signal :  9
employee : sent signal :  4
paper
manager : received signal :  8
employee : sent signal :  1
paper
manager : received signal :  7
employee : sent signal :  2
paper
manager : received signal :  6
employee : sent signal :  3
paper
manager : received signal :  5
employee : sent signal :  8
paper
manager : received signal :  4
employee : sent signal :  6
paper
manager : received signal :  3
employee : sent signal :  5
paper
manager : received signal :  2
employee : sent signal :  0
paper
manager : received signal :  1
employee : sent signal :  7
paper
manager : received signal :  0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, fan out semaphore concurrency pattern was described. In addition, simple implementation was provided.&lt;/p&gt;

&lt;p&gt;Readers are encouraged to check out excellent &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt; education materials to learn more.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.ardanlabs.com/"&gt;Ardan Labs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pexels.com/photo/radio-telescope-against-sky-with-stars-6325001/"&gt;Cover image by Igor Mashkov from Pexels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://habr.com/ru/company/ua-hosting/blog/490750/"&gt;Fan out picture&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>⭐️ CodeCast's Coding Advent: Day Thirteen ⭐️</title>
      <author>CodeCast</author>
      <pubDate>Mon, 13 Dec 2021 17:50:42 +0000</pubDate>
      <link>https://dev.to/codecast/codecasts-coding-advent-day-thirteen-4ej6</link>
      <guid>https://dev.to/codecast/codecasts-coding-advent-day-thirteen-4ej6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMn4xQnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ogyhoh5ynwf6dpkxg50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMn4xQnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ogyhoh5ynwf6dpkxg50.png" alt="Day 13" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-13"&gt;
  &lt;/a&gt;
  DAY 13
&lt;/h2&gt;

&lt;p&gt;In continuing with GSAP animations, today we're featuring a Cast from our own designer, Adam Lin! He goes over creating a simple scroll animation using Greensock's GSAP's ScrollTrigger Plugin!&lt;/p&gt;

&lt;p&gt;Check it out here: &lt;a href="https://www.codecast.io/casts/odgQxxW3QxnM-how-to-start-your-1st-gsap-scroll-animation"&gt;https://www.codecast.io/casts/odgQxxW3QxnM-how-to-start-your-1st-gsap-scroll-animation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also be sure to follow us on &lt;a href="https://www.instagram.com/codecastapp/"&gt;Instagram&lt;/a&gt;, &lt;a href="https://twitter.com/CodeCastApp"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/codecastapp"&gt;Facebook&lt;/a&gt;, and &lt;a href="https://www.linkedin.com/company/code-cast/"&gt;LinkedIn&lt;/a&gt; to see our daily advent releases there!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>🤶🏻 CodeCast's Coding Advent: Day Ten 🤶🏻</title>
      <author>CodeCast</author>
      <pubDate>Mon, 13 Dec 2021 17:50:21 +0000</pubDate>
      <link>https://dev.to/codecast/codecasts-coding-advent-day-ten-4kk7</link>
      <guid>https://dev.to/codecast/codecasts-coding-advent-day-ten-4kk7</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EY-95D_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz60mpjmbn7ua5knd0t4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EY-95D_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz60mpjmbn7ua5knd0t4.png" alt="Day 10" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-10"&gt;
  &lt;/a&gt;
  DAY 10
&lt;/h2&gt;

&lt;p&gt;We talk about portfolio building and interview-prep a lot here at CodeCast and are excited to share that &lt;a href="//hankerrank.com"&gt;Hackerrank&lt;/a&gt; has an entire interview prep kit &lt;a href="https://www.hackerrank.com/interview/preparation-kits/one-week-preparation-kit/one-week-day-one/challenges"&gt;for free on their website&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;You can also be sure to follow us on &lt;a href="https://www.instagram.com/codecastapp/"&gt;Instagram&lt;/a&gt;, &lt;a href="https://twitter.com/CodeCastApp"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/codecastapp"&gt;Facebook&lt;/a&gt;, and &lt;a href="https://www.linkedin.com/company/code-cast/"&gt;LinkedIn&lt;/a&gt; to see our daily advent releases there!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>NodeJS - version 2.7 of Foal framework is here 🎉</title>
      <author>Loïc Poullain</author>
      <pubDate>Mon, 13 Dec 2021 17:48:30 +0000</pubDate>
      <link>https://dev.to/loicpoullain/foalts-version-27-is-here-5b37</link>
      <guid>https://dev.to/loicpoullain/foalts-version-27-is-here-5b37</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5UPsYWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/banner-190c7b228be95a70c374e2baada10395.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5UPsYWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/banner-190c7b228be95a70c374e2baada10395.png" alt="Banner" width="880" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Version 2.7 of &lt;a href="https://foalts.org"&gt;Foal&lt;/a&gt; has been released! Here are the improvements that it brings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-body-of-raw-httpresponse-endraw-can-be-typed"&gt;
  &lt;/a&gt;
  The body of &lt;code&gt;HttpResponse&lt;/code&gt; can be typed
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;HttpResponse&lt;/code&gt; class becomes generic so as to enforce the type of its &lt;code&gt;body&lt;/code&gt; property if needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../entities&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;HttpResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It also allows you to infer the type of the body in your tests:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t3yZX-ZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/generic-http-response-e03d9894b29b2a8389cc7edd29c24e7b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t3yZX-ZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/generic-http-response-e03d9894b29b2a8389cc7edd29c24e7b.png" alt="Generic HttpResponse" width="880" height="167"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support-for-signed-cookies"&gt;
  &lt;/a&gt;
  Support for signed cookies
&lt;/h2&gt;

&lt;p&gt;Starting from this version, you can sign cookies and read them through the &lt;code&gt;signedCookies&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cookie1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signedCookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Do something.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sign-cookie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseOK&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cookie1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In order to use signed cookies, you must provide a secret with the configuration key &lt;code&gt;settings.cookieParser.secret&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#environment-name-can-be-provided-via-raw-nodeenv-endraw-or-raw-foalenv-endraw-"&gt;
  &lt;/a&gt;
  Environment name can be provided via &lt;code&gt;NODE_ENV&lt;/code&gt; or &lt;code&gt;FOAL_ENV&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Version 2.7 allows to you to specify the environment name (production, development, etc) with the &lt;code&gt;FOAL_ENV&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;This can be useful if you have third party libraries whose behavior also depends on the value of &lt;code&gt;NODE_ENV&lt;/code&gt; (see &lt;a href="https://github.com/FoalTS/foal/issues/1004"&gt;Github issue here&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-foal-generate-entity-endraw-and-raw-foal-generate-hook-endraw-support-subdirectories"&gt;
  &lt;/a&gt;
  &lt;code&gt;foal generate entity&lt;/code&gt; and &lt;code&gt;foal generate hook&lt;/code&gt; support sub-directories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#example-with-entities-models"&gt;
  &lt;/a&gt;
  Example with entities (models)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;foal g entity user
foal g entity business/product
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
 '- app/
  '- entities/
   |- business/
   | |- product.entity.ts
   | '- index.ts
   |- user.entity.ts
   '- index.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-with-hooks"&gt;
  &lt;/a&gt;
  Example with hooks
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;foal g hook log
foal g hook auth/admin-required
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
 '- app/
  '- hooks/
   |- auth/
   | |- admin-required.hook.ts
   | '- index.ts
   |- log.hook.ts
   '- index.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#new-raw-afterpremiddlewares-endraw-option-in-raw-createapp-endraw-"&gt;
  &lt;/a&gt;
  New &lt;code&gt;afterPreMiddlewares&lt;/code&gt; option in &lt;code&gt;createApp&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;It is now possible to run a custom middleware after all internal Express middlewares of the framework.&lt;/p&gt;

&lt;p&gt;This can be useful in rare situations, for example when using the &lt;a href="https://mikro-orm.io/docs/identity-map/#-requestcontext-helper-for-di-containers"&gt;RequestContext helper&lt;/a&gt; in Mikro-ORM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;afterPreMiddlewares&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#contributors"&gt;
  &lt;/a&gt;
  Contributors
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MCluck90"&gt;@MCluck90&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kingdun3284"&gt;@kingdun3284&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Best collection of codepen Dashboard UI 2022</title>
      <author>Codes Frontend</author>
      <pubDate>Mon, 13 Dec 2021 17:44:24 +0000</pubDate>
      <link>https://dev.to/codesfrontend/best-collection-of-codepen-dashboard-ui-2022-4j6o</link>
      <guid>https://dev.to/codesfrontend/best-collection-of-codepen-dashboard-ui-2022-4j6o</guid>
      <description>&lt;p&gt;You can find more than &lt;a href="https://www.front-end.codes/2021/12/40-open-source-and-free-dashboard-ui.html"&gt;40+ Collection of Dashboard UI&lt;/a&gt; Source blog&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x9QHYaII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gn5ofou7aaithr55gt5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x9QHYaII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gn5ofou7aaithr55gt5.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Project Management Dashboard UI&lt;br&gt;
Creator - Aybüke Ceylan&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/aybukeceylan/pen/OJRNbZp"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2-fbJh9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0amf8gku3v4b7al69b8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-fbJh9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0amf8gku3v4b7al69b8q.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Dashboard UI&lt;br&gt;
Creator - Mike Torosian&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/mtorosian/pen/gRapyw"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2VjR7knv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtekb9bc3yxzr9emyqv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2VjR7knv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtekb9bc3yxzr9emyqv2.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Job Recruiter Dashboard UI&lt;br&gt;
Creator - Aybüke Ceylan&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.front-end.codes/2021/12/40-open-source-and-free-dashboard-ui.html"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--isH47qPQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1afcr0mumd4sx8dq6tmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--isH47qPQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1afcr0mumd4sx8dq6tmf.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Dashboard UI&lt;br&gt;
Creator - Maciej&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/Jaroszewski_Maciej/pen/aVLOxQ"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--orWbUd5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zp2v6yprz1sv7ejgml1j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--orWbUd5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zp2v6yprz1sv7ejgml1j.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
GitBets - Betting Dashboard UI&lt;br&gt;
Creator - Liombe&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.front-end.codes/2021/12/40-open-source-and-free-dashboard-ui.html"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRmv5KCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cd9oolk0lkk3y0gd8gx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRmv5KCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cd9oolk0lkk3y0gd8gx.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Healthcare Dashboard UI&lt;br&gt;
Creator - Zafer AYAN&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/zaferayan/pen/VwaYzgy"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8E_jdekm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcgzf1bhlu0c64fhfz7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8E_jdekm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcgzf1bhlu0c64fhfz7t.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Dashboard UI&lt;br&gt;
Creator - TenderScript&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/tenderScript/pen/dMMqPd"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R4Q99G3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lijdfe0n3iqsaoigxdr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4Q99G3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lijdfe0n3iqsaoigxdr.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Dashboard Layout&lt;br&gt;
Creator - Donny Burnside&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/donnyburnside/pen/ONdbRKv"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ZsG9_mk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j486o7uryq1v8wa63gb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ZsG9_mk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j486o7uryq1v8wa63gb.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
User Dashboard UI&lt;br&gt;
Creator - GEOX&lt;/p&gt;

&lt;p&gt;Made With - HTML&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/GeoxCodes/pen/jZRdqy"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Us26EpWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/141vtdcxod79hbmjrtnx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Us26EpWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/141vtdcxod79hbmjrtnx.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Dashboard UI&lt;br&gt;
Creator - Azri Kahar&lt;/p&gt;

&lt;p&gt;Made With - HTML&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/azrikahar/pen/QWNPKLZ"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4YbOvbNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb6mjn7gli7gie1t5t9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4YbOvbNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb6mjn7gli7gie1t5t9a.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Products Dashboard UI&lt;br&gt;
Creator - Aybüke Ceylan&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.front-end.codes/2021/12/40-open-source-and-free-dashboard-ui.html"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bw3wdTqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15rt14w3hxmepbpd13uo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bw3wdTqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15rt14w3hxmepbpd13uo.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Progress Dashboard UI&lt;br&gt;
Creator - Calin Dodon&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.front-end.codes/2021/12/40-open-source-and-free-dashboard-ui.html"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yyPK0o_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kf7fh2r7s73uz0dguf9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yyPK0o_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kf7fh2r7s73uz0dguf9.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Dashboard UI&lt;br&gt;
Creator - Michael Lewallen&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/michael-lewallen/pen/vYEjZMb"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyAax-K_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjugqyig0ue6e5j5vdod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyAax-K_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjugqyig0ue6e5j5vdod.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Based on Proxy Dashboard UI by Notifees&lt;br&gt;
Creator - Lewi Hussey&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/azrikahar/pen/XWdGvNm"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--419G_zOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ut9vnslmtz98a2ia3zu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--419G_zOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ut9vnslmtz98a2ia3zu6.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Online Courses Dashboard&lt;br&gt;
Creator - Azri Kahar&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/azrikahar/pen/abZzaga"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tt96FzlE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32w0gknu5y5a4jy9c8az.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tt96FzlE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32w0gknu5y5a4jy9c8az.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Mail Dashboard UI&lt;br&gt;
Creator - Rene&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/rmcproductions/pen/GRgqWzG"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oC96RGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omsm2s4hx6apkckyhf9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oC96RGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omsm2s4hx6apkckyhf9w.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Dashboard UI&lt;br&gt;
Creator - Håvard Brynjulfsen&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.front-end.codes/2021/12/40-open-source-and-free-dashboard-ui.html"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFGpZTzY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lo9m7bwp0p42htndcth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFGpZTzY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lo9m7bwp0p42htndcth.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Dashboard - tailwind css&lt;br&gt;
Creator - Abeer Ibrahim&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/abeeribrahim/pen/yLJMNdw"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mha6xxkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3yjren7b7cgyyllk57g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mha6xxkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3yjren7b7cgyyllk57g.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Social Media-Dashboard-UI&lt;br&gt;
Creator - Vicky Rao&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/vicky-rao/pen/gOwvEBL"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_J6DuRBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zhqjr77iza6eypmfleo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_J6DuRBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zhqjr77iza6eypmfleo.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Dashboard UI Admin&lt;br&gt;
Creator - takagotch&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/takagotch/pen/jOMxOoG"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4vDeFvGg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9j00l6310ytqurlpa6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4vDeFvGg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9j00l6310ytqurlpa6f.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Customers Dashboard UI&lt;br&gt;
Creator - Emre Süslü&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/codedbyEmre/pen/bGBWEVj"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oCwCYcrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psn25j52oe3w49wnsia5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oCwCYcrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psn25j52oe3w49wnsia5.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Simple Project Dashboard UI&lt;br&gt;
Creator - Kalaiselvi Balu&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/kalaiselvi22/pen/PopgjpP"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-A-IW-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/krzckb66c0hvpzepd7g0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-A-IW-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/krzckb66c0hvpzepd7g0.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Dashboard UI Exploration&lt;br&gt;
Creator - Umut&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/ukeskin/pen/QWMGodm"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cVxtHWT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0trg3pq9n981fv77cpdr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cVxtHWT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0trg3pq9n981fv77cpdr.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Group List Dashboard UI Design&lt;br&gt;
Creator - Gerald&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/geraldmuvengei06/pen/MWvGqbR"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5SWfpGTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vvee2lphktiy2knr84c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5SWfpGTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vvee2lphktiy2knr84c.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Web Dashboard UI - Data Analytics&lt;br&gt;
Creator - Brian Lawrence&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)/JS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/brilaw/pen/oNZbomy"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6lq7_rGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdsvq9exiyx38troya7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6lq7_rGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdsvq9exiyx38troya7v.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Dashboard UI Design&lt;br&gt;
Creator - Yasin Inan&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS(SCSS)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.front-end.codes/2021/12/40-open-source-and-free-dashboard-ui.html"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pOLkXJ6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvgxvn6wikge2wq1rr5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pOLkXJ6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvgxvn6wikge2wq1rr5g.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Tailwind CSS Task Manager Dashboard UI&lt;br&gt;
Creator - Tirso Lecointere&lt;/p&gt;

&lt;p&gt;Made With - HTML/CSS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/tirsolecointere/pen/oNwpRdd"&gt;Demo of Codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find more than &lt;a href="https://www.front-end.codes/2021/12/40-open-source-and-free-dashboard-ui.html"&gt;40+ Collection of Dashboard UI&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Top 10 marketplace software development companies to hire the best IT partner
</title>
      <author>Arateg</author>
      <pubDate>Mon, 13 Dec 2021 17:28:09 +0000</pubDate>
      <link>https://dev.to/arateg/top-10-marketplace-software-development-companies-to-hire-the-best-it-partner-1ojm</link>
      <guid>https://dev.to/arateg/top-10-marketplace-software-development-companies-to-hire-the-best-it-partner-1ojm</guid>
      <description>&lt;p&gt;Hiring a trusted marketplace software development company is key to project success. A reliable provider will build a marketplace platform with business purposes in mind, ensuring compliance with a software requirement document and making meaningful recommendations if necessary. What’s more, an experienced IT partner can help you prepare a technical specification, prioritize features, choose a technology stack, and identify a type of architecture that will perfectly suit existing needs.&lt;/p&gt;

&lt;p&gt;When looking for a trustworthy IT service vendor, customers should pay attention to multiple aspects, including hourly rates, time zone, specialty, portfolio, and awards. So, let’s take a look at t*&lt;em&gt;he top 10 marketplace software development companies, starting from the lowest hourly rates&lt;/em&gt;* and moving to the highest salaries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-10-marketplace-software-development-companies-in-2021"&gt;
  &lt;/a&gt;
  Top 10 marketplace software development companies in 2021
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. MobileCoderz Technologies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Services rendered: custom software engineering (web, mobile)&lt;br&gt;
Hourly rates: &amp;lt; $25 / hr&lt;br&gt;
Minimum project size: $5,000+&lt;br&gt;
The number of employees: 50–249&lt;br&gt;
Location: India&lt;br&gt;
Website: mobilecoderz.com&lt;/p&gt;

&lt;p&gt;MobileCoderz is a provider of custom software engineering services that specializes in creating content management systems (CMS) and e-commerce solutions. Founded in 2015, MobileCoderz has proficiency in the Internet of Things (IoT), AR, VR, and machine learning (ML).&lt;/p&gt;

&lt;p&gt;With solid experience in the e-commerce domain, MobileCoderz develops digital marketplace platforms that provide an engaging shopping experience. For example, a marketplace software development company built a mobile app that allows for purchasing cars, clothes, furniture, and other goods.&lt;/p&gt;

&lt;p&gt;Available for iOS and Android, the marketplace utilizes AR to boost consumer satisfaction and increase the conversion rate. Speaking of the technology stack, the team at MobileCoderz employs HTML, JavaScript, Ruby, PHP, Node.js, AngularJS, Flutter, and React Native.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://arateg.com/"&gt;2. Arateg&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Services rendered: custom software engineering (mobile, web), UI/UX design, IT consulting&lt;br&gt;
Hourly rates: $25–$49 / hr&lt;br&gt;
Minimum project size: $20,000+&lt;br&gt;
The number of employees: 10–49&lt;br&gt;
Location: Belarus&lt;br&gt;
Website: arateg.com&lt;/p&gt;

&lt;p&gt;Established in 2014, Arateg is a marketplace software development company that offers services to industries such as healthcare, e-commerce, food and hospitality, education, real estate, freelancing, as well as human resource management. Headquartered in Belarus, Arateg has representative offices in Germany and Switzerland.&lt;/p&gt;

&lt;p&gt;To date, the team at Arateg has created more than 20 marketplaces, with &lt;a href="https://arateg.com/cases"&gt;14 featured projects&lt;/a&gt; in its portfolio. For instance, Arateg has recently delivered a recruitment marketplace for a Canadian firm that now has over 80,000 monthly users in the country. Other solutions include a real estate website, an online lodging marketplace, an e-learning application, and a web healthcare marketplace. Arateg also develops marketplaces similar to Uber Eats and Amazon.&lt;/p&gt;

&lt;p&gt;Helping startups and SMEs achieve their business objectives, Arateg follows best software engineering practices to achieve scalability, high availability, security, and compliance with the necessary regulations.&lt;/p&gt;

&lt;p&gt;Recognized by trustworthy B2B review and rating platforms like Clutch, GoodFirms, AppFutura, DesignRush, Top App Firms, WADLINE, and The Manifest, Arateg specializes in making blockchain and data analytics solutions. What’s more, software experts at Arateg provide assistance in conducting competitor analysis, prioritizing features, outlining an implementation roadmap, choosing a technology stack and architecture.&lt;/p&gt;

&lt;p&gt;To build performant web and mobile (iOS, Android) apps, Arateg uses the following technologies: Python, Golang, TypeScript, JavaScript, Django, Flask, Node.js, Angular, React, Redux, Amazon Web Services (AWS), Microsoft Azure, Google Cloud Platform, Docker, Kubernetes, etc. for web development, as well as Swift, Kotlin, Java, and React Native for mobile app development. Additionally, the company integrates marketplaces with numerous third-party services for data analytics, online payments, order and inventory management.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Codica&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Services rendered: custom web development (PWA, SPA), SaaS development&lt;br&gt;
Hourly rates: $25–$49 / hr&lt;br&gt;
Minimum project size: $10,000&lt;br&gt;
The number of employees: 10–49&lt;br&gt;
Location: Ukraine&lt;br&gt;
Website: codica.com&lt;/p&gt;

&lt;p&gt;Founded in 2015, Codica is a custom software engineering firm that specializes in building web and software-as-a-service (SaaS) solutions for travel, e-commerce, insurance, banking and finance. Based in Kharkiv, Ukraine, Codica delivers services to customers from the US, Israel, Australia, and Western Europe.&lt;/p&gt;

&lt;p&gt;Recognized by multiple B2B review and rating platforms (e.g., Clutch, GoodFirms, The Manifest), Codica is among the leading marketplace software development companies in Ukraine. Featured projects are a multi-vendor vehicle marketplace, an accommodation search website, a global travel marketplace, and an online collaboration platform.&lt;/p&gt;

&lt;p&gt;With extensive expertise in the field, the team at Codica develops marketplace applications while ensuring intuitiveness, performance, and scalability.&lt;/p&gt;

&lt;p&gt;The technology stack used by Codica comprises TypeScript, JavaScript, HTML, CSS, Ruby, Ruby on Rails, Angular, Vue.js, React, Redux, AWS, Docker, and DigitalOcean.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Webkul&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Services rendered: custom software engineering (mobile, web)&lt;br&gt;
Hourly rates: $25–$49 / hr&lt;br&gt;
Minimum project size: unknown&lt;br&gt;
The number of employees: 200–500&lt;br&gt;
Location: India&lt;br&gt;
Website: webkul.com&lt;/p&gt;

&lt;p&gt;Established in 2010, Webkul is a marketplace software development company that builds multi-sided platforms for the e-commerce sector. Headquartered in India, Webkul has offices in the US and Italy. It is worth remarking that the organization specializes in making software products, such as customer relationship management (CRM) solutions and content management systems (CMS).&lt;/p&gt;

&lt;p&gt;In addition, engineers at Webkul are able to create progressive web apps (PWA) and accelerated mobile pages (AMP). Having experience in AI and AR, Webkul delivers marketplace development services to either startups or corporations. Featured projects involve an online grocery delivery service and two e-commerce fashion marketplaces.&lt;/p&gt;

&lt;p&gt;The technology stack of Webkul comprises JavaScript, PHP, Symfony, Laravel, Java, Kotlin, Swift, Objective-C, Xcode, Flutter, React Native, Ionic, Firebase, Shopify, Magento, WooCommerce, and others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Cleveroad&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Services rendered: custom software engineering (web, mobile)&lt;br&gt;
Hourly rates: $25–$49 / hr&lt;br&gt;
Minimum project size: $10,000+&lt;br&gt;
The number of employees: 50–249&lt;br&gt;
Location: Ukraine&lt;br&gt;
Website: cleveroad.com&lt;/p&gt;

&lt;p&gt;Founded in 2011, Cleveroad is a provider of web and mobile development services to industries such as healthcare, logistics, retail, e-commerce, fintech, and education. Having expertise in artificial intelligence (AI), robotic process automation (RPA), and virtual (VR) /augmented (AR) reality, the organization delivers software solutions to startups, small and medium-sized enterprises, as well as enterprise-level companies.&lt;/p&gt;

&lt;p&gt;Recognized by various B2B review and rating platforms (e.g., Clutch, GoodFirms, AppFutura, WADLINE), Cleveroad has experience in e-commerce marketplace development. For instance, the firm’s featured projects in this field involve a global trading app (iOS, Android), a marketplace to find a specialist offering a certain kind of service (iOS, Android, web), and a platform for travelers to find a gym nearby (iOS, Android, web).&lt;/p&gt;

&lt;p&gt;The technology stack used by Cleveroad comprises React, JavaScript, Bootstrap, Node.js, Kotlin, Swift, and Flutter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Uptech&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Services rendered: custom software engineering (web, mobile)&lt;br&gt;
Hourly rates: $50–$99 / hr&lt;br&gt;
Minimum project size: $25,000+&lt;br&gt;
The number of employees: 50–249&lt;br&gt;
Location: Ukraine, US&lt;br&gt;
Website: uptech.team&lt;/p&gt;

&lt;p&gt;Founded in 2016, Uptech is an IT outsourcing vendor that offers full-cycle software development services to sectors such as fintech, healthcare, e-commerce, and hospitality. Headquartered in Kyiv, Uptech primarily works with startups and SMEs.&lt;/p&gt;

&lt;p&gt;Featured by Clutch, GoodFirms, and DOU, a software engineering firm has already delivered dozens of products that include web and mobile (iOS, Android, cross-platform) applications.&lt;/p&gt;

&lt;p&gt;With solid experience in implementing projects of different sizes and complexity, Uptech is able to build e-commerce marketplaces and on-demand service platforms similar to Uber. The team at Uptech employs a range of technologies that involve HTML, CSS, JavaScript, React.js, Node.js, Java, and Ruby to create web systems, as well as Swift, Java, Kotlin, and React Native to make smartphone solutions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Bilberrry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Services rendered: custom software engineering (web, mobile)&lt;br&gt;
Hourly rates: $100–$149 / hr&lt;br&gt;
Minimum project size: $25,000+&lt;br&gt;
The number of employees: 10–49&lt;br&gt;
Location: US, Ukraine&lt;br&gt;
Website: bilberrry.com&lt;/p&gt;

&lt;p&gt;Founded in 2010, Bilberry offers custom software engineering services to sectors like retail, e-commerce, as well as finance and banking. Based in Seattle, Bilberry has another office in Kyiv, Ukraine.&lt;/p&gt;

&lt;p&gt;With vast experience in web and mobile development, the firm also builds digital marketplace platforms while focusing on scalability and performance. For example, Bilberry created a mobile app for iOS and Android that enables merchants to list items for sale, reaching out to users from local communities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. StartupCraft&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Services rendered: custom software engineering (web and mobile), blockchain development&lt;br&gt;
Hourly rates: $100–$149 / hr&lt;br&gt;
Minimum project size: $25,000+&lt;br&gt;
The number of employees: 50–249&lt;br&gt;
Location: US&lt;br&gt;
Website: &lt;a href="https://startupcraft.io/"&gt;https://startupcraft.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;StartupCraft was started in 2015 to help startups and large enterprises address business challenges with the help of technological advancements. Headquartered in Miami, Florida, StartupCraft offers services to a variety of sectors that involve healthcare, wealth management, e-commerce, sports, digital media, and marketing.&lt;/p&gt;

&lt;p&gt;It is worth noting that StartupCraft has vast experience in AI, in particular, deep learning. Besides programming, design, and testing, the organization provides assistance in carrying out a technical audit, conducting benchmarking, prioritizing features, and outlining a roadmap for implementation.&lt;/p&gt;

&lt;p&gt;Being among the top web and mobile app development companies, StartupCraft also has experience in building marketplace software. Recently, for instance, StartupCraft launched a marketplace platform—powered by blockchain—that connects consumers with content creators across the globe.&lt;/p&gt;

&lt;p&gt;To make websites and applications, software experts at StartupCraft use Ruby, Elixir, Solidity, Ember.js, React, Java, Swift, and React Native.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Coding Pixel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Services rendered: custom software engineering (mobile, web), blockchain development&lt;br&gt;
Hourly rates: $100–$149 / hr&lt;br&gt;
Minimum project size: $1,000&lt;br&gt;
The number of employees: 10–49&lt;br&gt;
Location: US&lt;br&gt;
Website: codingpixel.com&lt;/p&gt;

&lt;p&gt;Founded in 2012, Coding Pixel is one of the top software development companies that have extensive experience in online marketplace creation. Delivering services to enterprises and SMEs, Coding Pixel has over 600 customers globally.&lt;/p&gt;

&lt;p&gt;The organization builds various types of digital marketplace platforms (business-to-business, business-to-consumer, customer-to-customer, etc.) for industries like e-commerce, human resource management, freelancing, and entertainment.&lt;/p&gt;

&lt;p&gt;For example, the team at Coding Pixel has recently launched a marketplace website that connects consumers with vendors operating in the beauty, fitness, and cosmetic surgery sectors. The firm also developed a web marketplace that allows churches to search and hire musicians. Other featured projects are an online collaboration platform for artists and influencers, as well as a freelance website for players.&lt;/p&gt;

&lt;p&gt;When building software systems, software experts at Coding Pixel employ PHP, Laravel, Node.js, HTML, CSS, Angular, JavaScript, React.js, Vue.js, AWS, and Microsoft Azure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. CobbleWeb&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Services rendered: custom software engineering (web, mobile), UI/UX design&lt;br&gt;
Hourly rates: undisclosed&lt;br&gt;
Minimum project size: $10,000+&lt;br&gt;
The number of employees: 10–49&lt;br&gt;
Location: UK&lt;br&gt;
Website: cobbleweb.co.uk&lt;/p&gt;

&lt;p&gt;Established in 2012, CobbleWeb is a marketplace software development company that helps startups, SMEs, and enterprises achieve their business goals. Headquartered in London, UK, CobbleWeb also has offices in Paris and Germany.&lt;/p&gt;

&lt;p&gt;With solid experience in building web and mobile solutions, CobbleWeb provides full-cycle services, from the user interface (UI) / experience (UX) design to testing and deployment.&lt;/p&gt;

&lt;p&gt;The team at CobbleWeb creates various types of multi-sided platforms, including B2B, B2C, and P2P marketplaces. Featured projects are a web marketplace to buy tickets for sports and entertainment events, as well as a platform—consisting of a website and mobile app—that acts as Airbnb's analog for parking.&lt;/p&gt;

&lt;p&gt;The technology stack used by CobbleWeb comprises HTML, PHP, Symfony, and React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;While all marketplace software development companies mentioned above have considerable experience in delivering tailor-made solutions to many industries, it is important to hire an IT firm able to not only build a high-quality product but meet the budget.&lt;/p&gt;

&lt;p&gt;A time zone is another aspect you should take into account, as communication is essential for effective cooperation. When choosing an IT service vendor, you should also consider industries served by the provider. With this aim in view, you can visit a website of a potential partner and check out its portfolio.&lt;/p&gt;

&lt;p&gt;If you want to launch a digital marketplace platform, &lt;a href="https://arateg.com/contacts"&gt;contact our team&lt;/a&gt;. We will get back to you within 1 business day and help address the required issues. Project consultation is for free.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>mobile</category>
      <category>startup</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Getting Funky With Filters</title>
      <author>Toby Parent</author>
      <pubDate>Mon, 13 Dec 2021 17:21:06 +0000</pubDate>
      <link>https://dev.to/parenttobias/getting-funky-with-filters-4h9j</link>
      <guid>https://dev.to/parenttobias/getting-funky-with-filters-4h9j</guid>
      <description>&lt;p&gt;Some time back, I was playing around with filters. Again, the question had been asked, "can I filter an array of objects by more than one property? The answer, of course, is yes. There are two main ways of doing this, using &lt;code&gt;Array.prototype.filter()&lt;/code&gt;, and we'll start by talking about both.&lt;/p&gt;

&lt;p&gt;Let's say, for the sake of argument, that we had a sample data JSON object of 1000 users. If you want to make one to play around with, I found a GREAT data-fakery site that created a 1000-user JSON object for me, over at &lt;a href="https://www.mockaroo.com/"&gt;Mockaroo &lt;/a&gt;. It's pretty customizeable, and for this, it worked WONDERS. Here's a sample of one of the objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;617&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Orly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;last_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ilieve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;oilieveh4@bloomberg.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;job_title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Structural Analysis Engineer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gender&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;language&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fijian&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;favorite_color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Crimson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;last_login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7/19/2019&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we have a &lt;code&gt;users&lt;/code&gt; array, containing 1000 of those. Suppose we wanted to filter by &lt;code&gt;language=="Arabic"&lt;/code&gt; and also &lt;code&gt;online==true&lt;/code&gt;. We could do this easily, using &lt;code&gt;Array.prototype.filter()&lt;/code&gt;, in one of two ways:&lt;/p&gt;

&lt;p&gt;First, we could filter once, then reduce the filtered array by filtering again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arabicSpeakers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arabic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arabicOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arabicSpeakers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or in a single pass:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arabicOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arabic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that works great. I did shorthand the second filter, as the &lt;code&gt;filter&lt;/code&gt; function is checking for a true/false value - and if the user is online, we simply return that &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The downside is, if there are a LOT of records returned by the first filter, then we're repeatedly touching all those records... twice. &lt;code&gt;filter()&lt;/code&gt; is not a fast alternative to a simple &lt;code&gt;for(...)&lt;/code&gt; loop, in fact it has considerable overhead - particularly if the dataset is massive.&lt;/p&gt;

&lt;p&gt;So the second option: we could check all the object properties at once, simply filter for more than one property. This requires that we understand a little about javascript's logic operators, as we'll use &lt;code&gt;||&lt;/code&gt; or &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (logical OR and logical AND, in order), but let's see how that would look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arabicOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arabic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is considerably shorter, and loses the overhead of touching multiple records every time. That does the trick! But...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-we-go"&gt;
  &lt;/a&gt;
  Here we go.
&lt;/h2&gt;

&lt;p&gt;What if we wanted to change that filter some? Suppose we wanted to get all users currently online who spoke Arabic, or who were women who like the color Crimson? Well, that gets a little more complicated, but if we parse it out, we get something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="nx"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arabic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;OR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;AND&lt;/span&gt; 
     &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;favorite_color&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Crimson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use the parentheses in our function, but the use of conjunctions will change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arabic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;favorite_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Crimson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that can get tedious. But there are TWO points I'm making here. First, we &lt;em&gt;can&lt;/em&gt; do really complex filters on arrays of objects, and they work just fine. And second, there's got to be a better, cleaner way. And that's what this post is about!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teeny-tiny-bites"&gt;
  &lt;/a&gt;
  Teeny tiny bites
&lt;/h2&gt;

&lt;p&gt;So, the point of all this is... functional programming. I was so excited last week, got all crazy excited, because I was building these insanely massively nested filter queries, and it was WORKING. Blew my mind, and I was so excited about sharing it. Until I actually shared it.&lt;/p&gt;

&lt;p&gt;The folks I chose to share with are professionals, both peers and those I consider to be mentors of mine. And, while they thought it was neat, they were just not as excited as I was. And that bothered me, for quite a while, until I realized - they weren't excited because it's a fundamental thing.&lt;/p&gt;

&lt;p&gt;There are things that are so simple that, when we realize them, we wonder that they weren't common knowledge before. But they likely were. The issue isn't the knowledge, then, but that I may not be part of the "tribe" where that knowledge is common.&lt;/p&gt;

&lt;p&gt;So, if you're one of those who already &lt;strong&gt;know&lt;/strong&gt; this, great! This may just be a refresher for you. And that's okay. But for the rest of the class, this can be eye-opening.&lt;/p&gt;

&lt;p&gt;So let's jump back a bit. We have a number of filter functions, right? If we look back at that last compound filter, there are four basic conditions we check for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is &lt;code&gt;user.online===true&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Is &lt;code&gt;user.language==='Arabic'&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Is &lt;code&gt;user.gender==='Female'&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Is &lt;code&gt;user.favorite_color==='Crimson'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are the basic conditions. Each of those can be run as unique, independent functions, each can be used as a filter, and each is testable in isolation. And (and here's the power of functional programming) each is &lt;em&gt;composable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What does this mean? Let's start by writing out each of those four as a function in themselves:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isArabic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Arabic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFemale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;likesCrimson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;favorite_color&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Crimson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that works fine. Each one is testable against an array of objects, each returns a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; based on the user's property matching as we want, each does what it says on the box. Incidentally, in terms of conventions, functions that return a true or false are called &lt;em&gt;predicate&lt;/em&gt; functions (as in "decisions are predicated on this thing").&lt;/p&gt;

&lt;p&gt;But it's ugly, and inelegant. I don't like it. Nope. Nuh-uh.&lt;/p&gt;

&lt;p&gt;Why not? Because each line does the exact same thing: given a property, find a given matching value on some object. They all do the same thing. So we're repeating code unnecessarily. What can we do? We can step back one step further. We can abstract that out, by writing a generic function, which we'll call &lt;code&gt;filterByProp()&lt;/code&gt;. I use the full name like that, because I also have a &lt;code&gt;sortByProp()&lt;/code&gt;, a &lt;code&gt;findByProp()&lt;/code&gt; and a &lt;code&gt;reduceByProp()&lt;/code&gt;, all of which use the same basic idea: given an array of objects, work with a given property. Here's how this one might look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterByProp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. That's the whole shebang. We start by calling &lt;code&gt;filterByProp()&lt;/code&gt; with the property name we want to filter by, and we get a function back. That function is waiting for a value to which we compare that property. So we call the function we just got back, passing a value, and we get another function back, that's waiting for the object itself. This third function? That's the one that our filter function can consume.&lt;/p&gt;

&lt;p&gt;And here's one way to look at using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;byOnlineStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterByProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// byOnlineStatus is now a function, waiting to be&lt;/span&gt;
&lt;span class="c1"&gt;//  given a value to match that property against.&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;byOnlineStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// and isOnline is now the same function as we wrote&lt;/span&gt;
&lt;span class="c1"&gt;//  above: isOnline = (user) =&amp;gt; user.online===true;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we've done here is functional currying. We've started with a function, and passed in a value, and got back a function awaiting a &lt;strong&gt;second&lt;/strong&gt; value. When we pass in that second value, we get a function awaiting the third, the final object against which we'll check. A shorthand version of the same &lt;code&gt;isOnline()&lt;/code&gt; might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterByProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isArabic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterByProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;language&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arabic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFemale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterByProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gender&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;likesCrimson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterByProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;favorite_color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Crimson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, they each work in isolation, they can each be tested, both in isolation and in integration, they are tidy, &lt;em&gt;and&lt;/em&gt; they are elegant.&lt;/p&gt;

&lt;p&gt;When I speak of elegance here, I mean that, within our &lt;code&gt;filterByProp()&lt;/code&gt; function, I have zero knowledge of what's going on inside our object. I don't hard-code into the function itself what those properties or values might be, I simply create a function that says "Hey, I've got some object - tell me if it has this property-value pair". It's object-agnostic.&lt;/p&gt;

&lt;p&gt;So with those pieces, we could now do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;isOnline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isArabic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;isFemale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;likesCrimson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
         &lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much more succinct, much more readable, our filter has become... well wait. Not so much. In order to compose our functions, we need to call them all inside our outer function. The way we've done this, you'll note that each of our inner filter functions is being called independently. Not so pretty, not so well documenting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-do-what-to-do"&gt;
  &lt;/a&gt;
  What to do, what to do...
&lt;/h2&gt;

&lt;p&gt;Here's my thinking: what if we had a mechanism that would let us &lt;em&gt;compose&lt;/em&gt; those functions into larger pieces, each of which can simply be plugged in as a filter function?&lt;/p&gt;

&lt;p&gt;To do this, we'll need functions that combine our filters, and we want to combine them in two different ways: we want to replace the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; with a function we'll call &lt;code&gt;and()&lt;/code&gt;, and replace the &lt;code&gt;||&lt;/code&gt; with a function we'll call &lt;code&gt;or()&lt;/code&gt;. Each of these should take multiple functions as parameters, and return a function that checks if all the conditions of those functions are met (in the case of &lt;code&gt;and&lt;/code&gt;), or if some of them are met (in the case of &lt;code&gt;or&lt;/code&gt;). So let's dive in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// So we pass in any number of parameters, and we turn&lt;/span&gt;
&lt;span class="c1"&gt;//  that into an array of funcs. We want every func in&lt;/span&gt;
&lt;span class="c1"&gt;//  that array to return true for a given object.&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;// now to use this, we can combine our functions, taking&lt;/span&gt;
&lt;span class="c1"&gt;//  (isFemale(user) &amp;amp;&amp;amp; likesCrimson(user) ) and turning it to:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFemaleAndLikesCrimson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFemale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;likesCrimson&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// The or function is exactly the same, except for the function&lt;/span&gt;
&lt;span class="c1"&gt;//   we use on the array of funcs:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Here, we are saying "if one or more of these pass, I'm good!"&lt;/span&gt;

&lt;span class="c1"&gt;// with this one, we can combine the next level out: We've gone from&lt;/span&gt;
&lt;span class="c1"&gt;//  (isArabic(user) || (isFemale(user) &amp;amp;&amp;amp; likesCrimson(user) ) )&lt;/span&gt;
&lt;span class="c1"&gt;// to&lt;/span&gt;
&lt;span class="c1"&gt;//  (isArabic(user) || isFemaleAndLikesCrimson)&lt;/span&gt;
&lt;span class="c1"&gt;// so next we simply:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isArabicOr_IsFemaleAndLikesCrimson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isArabic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isFemaleAndLikesCrimson&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// and, for the final piece of our complex filter function:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isOnlineAnd_IsArabicOr_IsFemaleAndLikesCrimson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isOnline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isArabicOr_IsFemaleAndLikesCrimson&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that I used the underscores simply to denote groupings, but they're not necessary. I worked from the innermost combination out, composing larger and larger functions that, as a final result, return &lt;em&gt;the exact same data type as the composed functions&lt;/em&gt;. Why does that matter? They become interchangeable. Our ridiculously-long-named function can now be used as a filter function's callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isOnlineAnd_isArabicOr_isFemaleAndLikesCrimson&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that function we pass into the filter function is now complete and self-documenting. We can see at a glance what we're filtering for (though I would really prefer a way to delineate the separation between ors and ands - if anyone has suggestions, I'm open to them!), we can read what's happening, we can test each smaller part in isolation, and each larger part as we grow, and we have a great start for a functional toolkit.&lt;/p&gt;

&lt;p&gt;I suppose, if we wanted to keep it nice and legible, we could back it up a small step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
  &lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isOnline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;isArabic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFemale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;likesCrimson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is a more readable version. The outermost &lt;code&gt;and(...)&lt;/code&gt; is the function actually being called by the &lt;code&gt;filter(...)&lt;/code&gt;, and that one is simply composing its two parameters into an array on the fly, and so on, down the line.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-takeaway"&gt;
  &lt;/a&gt;
  What's the takeaway?
&lt;/h2&gt;

&lt;p&gt;Good question, that. First, that we can compose small, simple functions into very complex ones that still do simple things. Second, that those small parts, while unaware of things &lt;em&gt;outside&lt;/em&gt; themselves, can be very powerful with those things of which they are aware. And third, that we have the beginnings of a functional library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This is a great tool to add to a functional library, and one you can use over and over for other situations.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterByProp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// the two functions, and() and or(), are powerful composers.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are others, we'll continue to grow this collection, but this is a good place to start.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>functional</category>
    </item>
    <item>
      <title>📊 AnyChart JS 8.11.0 Is Out with Awesome New Features</title>
      <author>andreykh1985</author>
      <pubDate>Mon, 13 Dec 2021 17:04:37 +0000</pubDate>
      <link>https://dev.to/andreykh1985/anychart-js-8110-is-out-with-awesome-new-features-2d8m</link>
      <guid>https://dev.to/andreykh1985/anychart-js-8110-is-out-with-awesome-new-features-2d8m</guid>
      <description>&lt;p&gt;AnyChart 8.11.0 has been &lt;a href="https://www.anychart.com/blog/2021/12/07/js-charts-8-11-0-released/"&gt;released&lt;/a&gt; with awesome new features and improvements making this &lt;a href="https://www.anychart.com"&gt;JavaScript charting library&lt;/a&gt; even more flexible and mature.&lt;/p&gt;

&lt;p&gt;The three most important additions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Custom axis placement&lt;/li&gt;
&lt;li&gt;Baseline milestones in Gantt charts&lt;/li&gt;
&lt;li&gt;Outside labels in waterfall charts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Along with these new charting features, other significant improvements and bug fixes are also included in this major update. Learn more about AnyChart 8.11.0 on the company's &lt;a href="https://www.anychart.com/blog/2021/12/07/js-charts-8-11-0-released/"&gt;blog&lt;/a&gt;. You can also leave your suggestions there on new features that you would like to see added in future versions.&lt;/p&gt;

&lt;p&gt;In case you missed it, the previous major update AnyChart 8.10.0 brought two brand new chart types - Circle Packing Chart and Calendar Chart - &lt;a href="https://www.anychart.com/blog/2021/05/24/anychart-js-8-10-0/"&gt;and more&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>datascience</category>
      <category>product</category>
    </item>
    <item>
      <title>Get Swole: The React/Rails Workout App</title>
      <author>wgotterer</author>
      <pubDate>Mon, 13 Dec 2021 17:04:00 +0000</pubDate>
      <link>https://dev.to/wgotterer/get-swole-the-reactrails-workout-app-112b</link>
      <guid>https://dev.to/wgotterer/get-swole-the-reactrails-workout-app-112b</guid>
      <description>&lt;p&gt;In this blog I aim to give a detailed overview of what is happening behind the scenes in this application by first giving a walkthrough of the apps functionality and then looking at the code of both the Rails backend and React front end.&lt;/p&gt;

&lt;p&gt;The full code on Git Hub can be found &lt;a href="https://github.com/wgotterer/get-swole"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The front end is in the "client" folder&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-overview"&gt;
  &lt;/a&gt;
  General Overview
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GZfXz4jRI9s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend-rails-overview"&gt;
  &lt;/a&gt;
  Backend Rails Overview
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0sCEhqJDV6k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#login-overview"&gt;
  &lt;/a&gt;
  Login Overview
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iLHbXIpuQxM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dashboard-overview"&gt;
  &lt;/a&gt;
  Dashboard Overview
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nTcqWqbtgUw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#online-classes-overview"&gt;
  &lt;/a&gt;
  Online Classes Overview
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oM9EAkGPphA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-classes-overview"&gt;
  &lt;/a&gt;
  Private Classes Overview
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/73q5fp9DezY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trainer-overview"&gt;
  &lt;/a&gt;
  Trainer Overview
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ap_fhAKRY54"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>rails</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>An ultimate introduction to the Linux world</title>
      <author>Nicolas Beauvais</author>
      <pubDate>Mon, 13 Dec 2021 16:55:12 +0000</pubDate>
      <link>https://dev.to/nicolasbeauvais/an-ultimate-introduction-to-the-linux-world-1odn</link>
      <guid>https://dev.to/nicolasbeauvais/an-ultimate-introduction-to-the-linux-world-1odn</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You can read the original article on &lt;a href="https://divinglinux.com/blog/an-ultimate-introduction-to-the-linux-world"&gt;DivingLinux.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;, you already heard of it, maybe even used it once or twice for work, and certainly a thousand of times without knowing. It has a different aura, something special that you do not feel when thinking about Apple's macOS or Microsoft's Windows, it's loved by geeks, power user, misfits, scientists, engineers...&lt;/p&gt;

&lt;p&gt;It's not advertised on TV or online, you most likely won't see any computer sold with Linux in a shop, and yet Linux and its derivatives runs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;100% of the top 500 supercomputers&lt;/li&gt;
&lt;li&gt;96% of the internet&lt;/li&gt;
&lt;li&gt;85% of all smartphones&lt;/li&gt;
&lt;li&gt;The International space station&lt;/li&gt;
&lt;li&gt;Nasa's Perseverance rover on Mars&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it comes to desktop use, Linux sits at 2% [6] of market share, 5% if we count ChromeOS which is based on Linux, way behind macOS and Windows. Going through all the reason behind this would make this article too long and boring [7] so we will stick to one key point: Linux is hard for newcomers.&lt;/p&gt;

&lt;p&gt;You need to learn a new vocabulary, find new online resources, learn new ways of doing things, even if the reward is worth it at the end, this can discourage the most tech-savvy users. To make it easier for you, I've made a compilation of the questions I get the most from my students when they begin to learn Linux, and answered them with brief overview answers to make it easy to digest.&lt;/p&gt;

&lt;p&gt;Questions covered in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What exactly is Linux?&lt;/li&gt;
&lt;li&gt;What is the difference between Linux, macOS and Windows?&lt;/li&gt;
&lt;li&gt;Are UNIX, and Linux the same thing?&lt;/li&gt;
&lt;li&gt;What is GNU?&lt;/li&gt;
&lt;li&gt;Is macOS based on Linux?&lt;/li&gt;
&lt;li&gt;What is a Linux distribution?&lt;/li&gt;
&lt;li&gt;How can I try Linux as a beginner?&lt;/li&gt;
&lt;li&gt;Tl;dr&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-is-linux"&gt;
  &lt;/a&gt;
  What exactly is Linux?
&lt;/h2&gt;

&lt;p&gt;You probably know that Linux is an operating system, but almost nobody uses it directly as is. When we refer to Linux, we most often refer to any operating system that is based on the Linux Kernel.&lt;/p&gt;

&lt;p&gt;The Linux Kernel is a secure and stable base program that will handle all the things that you typically don't think about when using a computer, like communicating with the processor, handling the memory, connecting to the internet, receive the keys you pressed on your keyboard and display them on your screen.&lt;/p&gt;

&lt;p&gt;This base kernel is then completed by other program to make it operable (see GNU), do specific tasks, or make it easy to use by non-technical users, like Android on mobile or Ubuntu on desktop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-linux-macos-and-windows"&gt;
  &lt;/a&gt;
  What is the difference between Linux, macOS and Windows?
&lt;/h2&gt;

&lt;p&gt;Contrary to macOS and Windows, the Linux Kernel is free and open-source, meaning that anybody can see the code [8], improve it for everyone or modify it for their particular use case. It also means that you can install and use it for free on any device, but if something goes wrong, there is no hotline to complains to, you're on your own.&lt;/p&gt;

&lt;p&gt;As it is not locked in any way by a vendor, you can do anything you want with a Linux operating system. Customize its appearance or behavior, and also make it completely unusable with an ease that you won't find on Microsoft an Apple operating systems. Which is why Linux is loved by power users, and Windows / macOS by companies that want to keep a maximum control on their fleet of devices.&lt;/p&gt;

&lt;p&gt;Linux and macOS are both based on a UNIX-like architecture, so there is a lot of similarity between the two operating systems, and most of the command-line knowledge that you learn from one can be applied to the other. Windows on the other end use its own architecture, although, since Windows 10, the Windows Subsystem for Linux (WSL) makes it possible to use a virtualized Linux Kernel and run Linux binaries directly in Windows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-unix-and-linux-the-same-thing"&gt;
  &lt;/a&gt;
  Are UNIX, and Linux the same thing?
&lt;/h2&gt;

&lt;p&gt;They're not, UNIX was created about 20 years before Linux. UNIX got popular with businesses and academics in the 70s, but the creators of Unix used a licensing scheme forbidding modification of the operating system. At this time the GNU project started with the goal of creating a UNIX compatible operating system that was open source and free to use.&lt;/p&gt;

&lt;p&gt;Unfortunately the GNU kernel was not complete and progress was slow, then Linux got released and became the go-to Kernel for the GNU suite creating the "GNU/Linux" operating system that we know today.&lt;/p&gt;

&lt;p&gt;The UNIX system gave birth to a lot of other operating systems, called UNIX-like[9], as they do not share the same code, but are most of the time compatible and follow a similar architecture. Linux, macOS, FreeBSD or OpenBSD are just a few of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-gnu"&gt;
  &lt;/a&gt;
  What is GNU?
&lt;/h2&gt;

&lt;p&gt;If you look anything related to Linux online, you will see theses three letters in no time "GNU", and sometime in the form "GNU/Linux" but what is it?&lt;/p&gt;

&lt;p&gt;GNU is a collection of software written by the GNU project, the most famous being Bash, Gimp, and GRUB to only name a few. Started about 10 years before Linux, had a crucial role in the history of open source and free software, and remains highly important to this day, it is also at the origin of the General Public License (GPL)[10].&lt;/p&gt;

&lt;p&gt;The GNU software collection offer a base operating system when coupled with a Kernel (Linux). This is why you can come across the name "GNU/Linux" because most operating-system that use Linux as a Kernel will also use some part of the GNU software collection. There's been some conflict on this particular naming so let's not expand on that, but I advise that you do your own research on the subject[11].&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gnu-coreutils"&gt;
  &lt;/a&gt;
  GNU coreutils
&lt;/h3&gt;

&lt;p&gt;A big part of the GNU software collection, that is less known by its name, is coreutils. It is a set of tools to help you use your operating system, most base commands on a Linux operating system, like cd, ls, cp, cat, echo and a few dozens more are part of GNU coreutils.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-macos-based-on-linux"&gt;
  &lt;/a&gt;
  Is macOS based on Linux?
&lt;/h2&gt;

&lt;p&gt;As we've seen previously, macOS uses a UNIX-like architecture, with its own kernel called XNU[12]. So macOS is definitely not based on the Linux kernel, but they do share a lot of architectural concept and standards. Both operating systems are POSIX[11] compliant, making it easy for user to move from one to the other, with shared base commands that are implemented in a similar way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-linux-distribution"&gt;
  &lt;/a&gt;
  What is a Linux distribution?
&lt;/h2&gt;

&lt;p&gt;Installing the raw Linux kernel on your computer is like driving a car, with nothing else than the engine. To do task on your computer you need many tools, something to handle Wifi, bluetooth, a file explorer, a web browser, and so on.&lt;/p&gt;

&lt;p&gt;Just like Windows and macOS come prepackaged with everything you need for a general use, Linux distributions, commonly called "Distro" are fully operational operating systems. Each distro as its particularity and targeted audience.&lt;/p&gt;

&lt;p&gt;Here is a brief overview of well-known Linux distribution:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-purpose"&gt;
  &lt;/a&gt;
  General purpose
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu&lt;/li&gt;
&lt;li&gt;Debian&lt;/li&gt;
&lt;li&gt;Fedora&lt;/li&gt;
&lt;li&gt;Manjaro&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#advanced-use"&gt;
  &lt;/a&gt;
  Advanced use
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Arch linux&lt;/li&gt;
&lt;li&gt;Gentoo&lt;/li&gt;
&lt;li&gt;Void Linux&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cyber-security-and-penetration-testing"&gt;
  &lt;/a&gt;
  Cyber security and penetration testing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Kali linux&lt;/li&gt;
&lt;li&gt;BackBox&lt;/li&gt;
&lt;li&gt;Parrot OS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find information on the wide range of Linux distributions on the distrowatch.com website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-try-linux-as-a-beginner"&gt;
  &lt;/a&gt;
  How can I try Linux as a beginner?
&lt;/h2&gt;

&lt;p&gt;There is already a fair amount of online tutorials with step-by-step instructions for each technique explained. So I will just give you an overview of what you could do to test a Linux Distribution at home.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#virtual-machine"&gt;
  &lt;/a&gt;
  Virtual machine
&lt;/h3&gt;

&lt;p&gt;The easiest way to try a Linux distribution is by using a Virtual Machine, for this you can install VirtualBox on Windows or macOS. Choose the Linux distribution that you would like to try and download it as an ISO file, you should find this option on most well-known Linux distribution website. Now run that ISO file using VirtualBox and Tada!&lt;/p&gt;

&lt;p&gt;Virtual machine is a way to recreate a "fake" computer on top of your running computer, which can be slow if you do not have a modern computer, but it is the easiest and safest way to learn and try new Linux Distributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-usb"&gt;
  &lt;/a&gt;
  Live USB
&lt;/h3&gt;

&lt;p&gt;A live USB is a way to install an operating system, in our case a Linux Distribution, on a USB sticks. This allows to boot your computer using the operating system installed on live USB stick instead of the storage device where your computer's usual operating system is installed.&lt;/p&gt;

&lt;p&gt;All you need for this method is a USB stick, the ISO file of the Linux distribution that you would like to try, and a tool to move the ISO file to the USB stick and make it bootable. You can try BalenaEtcher which work on Windows and macOs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dual-boot"&gt;
  &lt;/a&gt;
  Dual boot
&lt;/h3&gt;

&lt;p&gt;The dual boot technique is probably the most complicated one, and you can damage your computer if you're not careful. Dual boot consist on installing a full Linux distribution on your computer along your main operating system (Windows or macOS). This method is probably the best if you are serious about learning to use a Linux operating system, you will be able to leverage the full hardware power of your computer, and still be able to go back to Windows or macOS when necessary.&lt;/p&gt;

&lt;p&gt;Creating a dual boot computer can be challenging for beginners, make sure to back up all important files, and do not hesitate to get some help if you do not fully understand a step of the process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-computer"&gt;
  &lt;/a&gt;
  Other computer
&lt;/h3&gt;

&lt;p&gt;One last way is to install Linux on a computer that you are not using, you could also buy a cheap second-hand laptop to experiment. This way you do not risk damaging your main computer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  Tl;dr
&lt;/h2&gt;

&lt;p&gt;Linux is a kernel, a piece of code that allow other software to communicate with the hardware of your computer, it is inspired by and compliant with the UNIX kernel.&lt;br&gt;
Combine the Linux kernel with GNU utils, a set of basic programs, and you have a basic, but fully working operating system which is referred as "GNU/Linux".&lt;/p&gt;

&lt;p&gt;MacOS is based on UNIX too, which is why there is similarity between macOs and Linux-based operating systems.&lt;br&gt;
Distro, or distributions, are variant of the "GNU/Linux" operating system, with carefully chosen default settings and installed programs that make it easier to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this article cleared things out for you. I did not include many names or dates to not complicate things too much and keep the explanations as concise as possible. Don't hesitate to look for more info on Wikipedia or other sources I linked, the history of Linux and the people who created its ecosystem is fascinating.&lt;/p&gt;

&lt;p&gt;Sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.top500.org/lists/top500/2021/06/"&gt;https://www.top500.org/lists/top500/2021/06/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/20150806093859/http://www.w3cook.com/os/summary/"&gt;https://web.archive.org/web/20150806093859/http://www.w3cook.com/os/summary/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://haydenjames.io/85-of-all-smartphones-are-powered-by-linux/"&gt;https://haydenjames.io/85-of-all-smartphones-are-powered-by-linux/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fsf.org/blogs/community/gnu-linux-chosen-as-operating-system-of-the-international-space-station"&gt;https://www.fsf.org/blogs/community/gnu-linux-chosen-as-operating-system-of-the-international-space-station&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fossbytes.com/perseverance-rover-linux-os/"&gt;https://fossbytes.com/perseverance-rover-linux-os/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Usage_share_of_operating_systems"&gt;https://en.wikipedia.org/wiki/Usage_share_of_operating_systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Criticism_of_desktop_Linux"&gt;https://en.wikipedia.org/wiki/Criticism_of_desktop_Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/torvalds/linux"&gt;https://github.com/torvalds/linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Unix-like"&gt;https://en.wikipedia.org/wiki/Unix-like&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/GNU_General_Public_License"&gt;https://en.wikipedia.org/wiki/GNU_General_Public_License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/GNU/Linux_naming_controversy"&gt;https://en.wikipedia.org/wiki/GNU/Linux_naming_controversy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/XNU"&gt;https://en.wikipedia.org/wiki/XNU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/POSIX"&gt;https://en.wikipedia.org/wiki/POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you want to learn more on this topic, consider trying &lt;a href="https://divinglinux.com"&gt;DivingLinux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will learn to use Linux from the command-line with confidence, by doing interactive hands-on exercises, and build strong foundation in monitoring, networking, and system administration.&lt;/p&gt;

</description>
      <category>linux</category>
    </item>
    <item>
      <title>Build and Deploy a Responsive Portfolio Using React and Styled Components 💅</title>
      <author>Chaoo Charles</author>
      <pubDate>Mon, 13 Dec 2021 16:43:46 +0000</pubDate>
      <link>https://dev.to/chaoocharles/build-and-deploy-a-responsive-portfolio-using-react-and-styled-components-22mc</link>
      <guid>https://dev.to/chaoocharles/build-and-deploy-a-responsive-portfolio-using-react-and-styled-components-22mc</guid>
      <description>&lt;p&gt;In this course I will be showing you how I revamped my portfolio site using React and styled Components 💅.&lt;/p&gt;

&lt;p&gt;Live Portfolio: &lt;a href="https://chaoocharles.dev/"&gt;https://chaoocharles.dev/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial 👇
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dK4f2Piqilo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
  </channel>
</rss>
