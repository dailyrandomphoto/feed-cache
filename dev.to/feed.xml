<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Git Workflows - Solo Vs Team Work, Undoing Mistakes, Contributing to Open Source... and more</title>
      <author>Danny Adams</author>
      <pubDate>Thu, 06 Jan 2022 18:40:18 +0000</pubDate>
      <link>https://dev.to/doabledanny/git-workflows-solo-vs-team-work-undoing-mistakes-contributing-to-open-source-and-more-2bda</link>
      <guid>https://dev.to/doabledanny/git-workflows-solo-vs-team-work-undoing-mistakes-contributing-to-open-source-and-more-2bda</guid>
      <description>&lt;p&gt;In this article, I give my workflows for almost everything that you will ever need to do with Git:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic Git commands&lt;/li&gt;
&lt;li&gt;Setting up a remote repository and pushing to Github&lt;/li&gt;
&lt;li&gt;Undoing things in Git&lt;/li&gt;
&lt;li&gt;Ignoring things in Git&lt;/li&gt;
&lt;li&gt;Git branches for new features&lt;/li&gt;
&lt;li&gt;Working solo vs in a team&lt;/li&gt;
&lt;li&gt;Forking and contributing to open source&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-git-commands"&gt;
  &lt;/a&gt;
  Basic Git Commands
&lt;/h2&gt;

&lt;p&gt;These are the commands you will use in every single project.&lt;/p&gt;

&lt;p&gt;1) Initialise Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git init &amp;lt;project-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Add files to the staging area&lt;/p&gt;

&lt;p&gt;To add all files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add all files in a specific folder:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add src/posts/Git_Commands_Post&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add one file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add styles.css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add all files with a specific extension (in this case, all html files):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add *.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) Check the staging area is correct before committing to Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4) Committing the changes to Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "A short message describing the changes here"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5) Push to remote repository (see below for how to set up remote repository)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-remote-repository-and-pushing-to-github"&gt;
  &lt;/a&gt;
  Setting up a remote repository and pushing to Github
&lt;/h2&gt;

&lt;p&gt;First we need to set up the repository on Github:&lt;/p&gt;

&lt;p&gt;1) Go to github.com&lt;br&gt;
2) Sign in or create an account&lt;br&gt;
3) Select "New" to create a new repository&lt;br&gt;
4) Type in your repository information. I always leave the "Add a README file", "Add a .gitignore" and "Choose a license" checkbox unchecked.&lt;br&gt;
5) Click "Create repository"&lt;/p&gt;

&lt;p&gt;Now we need to connect up our local repository to the just-created Github repository:&lt;/p&gt;

&lt;p&gt;6) Add the remote repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add origin https://github.com/YourUsername/Your-remote-repo-name.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7)  Ensure we are in the main branch&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -M main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;8) Push your committed local code to Github&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push -u origin main&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#changing-your-username-and-email-in-git"&gt;
  &lt;/a&gt;
  Changing your username and email in Git
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "Danny Adams"
git config --global user.email "my-email@gmail.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#undoing-things-in-git"&gt;
  &lt;/a&gt;
  Undoing things in Git
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#remove-a-file-from-staging"&gt;
  &lt;/a&gt;
  Remove a file from staging
&lt;/h3&gt;

&lt;p&gt;The below command removes the file only from the Git repository. The local, working directory copy of the file will remain intact - this is ensured by adding the &lt;code&gt;--cached&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm --cached &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To remove all files in a folder, add the recursive flag:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm --cached &amp;lt;filename&amp;gt; -r&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#going-back-to-a-previous-commit-to-read-only"&gt;
  &lt;/a&gt;
  Going back to a previous commit to READ ONLY
&lt;/h3&gt;

&lt;p&gt;To see how things looked at a particular commit, without re-writing history or deleting things, we can simply:&lt;/p&gt;

&lt;p&gt;1) Log the commit history and copy the ID of the commit we want to go back to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --oneline&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Go back in time to the commit&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout &amp;lt;commit_ID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) Once done, go back to where we were&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout main&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reverting-a-commit"&gt;
  &lt;/a&gt;
  Reverting a commit
&lt;/h3&gt;

&lt;p&gt;Revert commit creates a new commit, where the changes made in a specific commit are undone.&lt;/p&gt;

&lt;p&gt;Let's say we wanted to undo what we did in commit 2 of the below branch:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dMw7fuX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjnl5u78yrxwun4ssql3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dMw7fuX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjnl5u78yrxwun4ssql3.jpg" alt="Git Revert commit branch before" width="427" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using Revert, a new commit would be made, where the changes made in C2 are undone - but C2 is still kept in history so we could still go back and keep the changes if we decide we want them again:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dAWV_WDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewxmeujepd9sptf3uxqb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dAWV_WDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewxmeujepd9sptf3uxqb.jpg" alt="Git Revert commit after" width="579" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go through an example. Below, I have 3 commits in my project - with the latest at the top:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3P7gz9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j61o10ca2fr4coono0vz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3P7gz9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j61o10ca2fr4coono0vz.JPG" alt="Git log of commits" width="382" height="83"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say I wanted to undo the changes I made with the "Created styles.css" commit only. I can simply revert this commit:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git revert a432c9f&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Git will then open up a file in your text editor (if your using VS code) and ask you to create a message for the new commit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VNtGMboC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/229hxf1zu11gplyx20sz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VNtGMboC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/229hxf1zu11gplyx20sz.JPG" alt="Git revert command line" width="467" height="63"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqTskTr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yltyld3fcaibwb1cezb.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqTskTr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yltyld3fcaibwb1cezb.JPG" alt="Git revert message" width="723" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, the commit message reads 'Revert "Created styles.css"', but this can be changed to whatever you want. I usually just leave it as is.&lt;/p&gt;

&lt;p&gt;Once you're happy with the message, simply close the file and Git will add the new commit where the "Create styles.css" changes are undone.&lt;/p&gt;

&lt;p&gt;But here's the beauty of using revert to undo things: the commit history is all still there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adWwdoHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsfc6li2ep14d0186oqs.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adWwdoHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsfc6li2ep14d0186oqs.JPG" alt="Commit history after reverting" width="457" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the "Created styles.css" commit is still there. Revert has simply made a new commit where the changes made in "Created styles.css" are reverted (undone). This is MUCH safer than using Reset - the next section - which deletes commits.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reset-commit"&gt;
  &lt;/a&gt;
  Reset commit
&lt;/h3&gt;

&lt;p&gt;Reset commit goes back in time to a previous commit and permanently deletes all commits that happened ahead of it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mas5OZti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlo3p6yn5espyxkxso7t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mas5OZti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlo3p6yn5espyxkxso7t.jpg" alt="Git Reset branch diagram" width="566" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) Get the Id of the commit you want to go back to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --oneline&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Reset&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset &amp;lt;commit_ID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: all the code changes will still remain in the workspace files - but they'll be uncommitted. To remove from Git AND your workspace, use:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset &amp;lt;commit_ID&amp;gt; --hard&lt;/code&gt; (Very dangerous - be very careful!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tell-git-to-ignore-certain-files"&gt;
  &lt;/a&gt;
  Tell Git to ignore certain files
&lt;/h2&gt;

&lt;p&gt;Some files in your project will contain private information, such as passwords and keys. It's very important that this information isn't pushed to Github. Also, folders like the node_modules folder can take up lots of disc space, and there is no need for them to be pushed to Github as they can be reinstalled any time via the project's package.json file.&lt;/p&gt;

&lt;p&gt;1) Create a &lt;code&gt;.gitignore&lt;/code&gt; file in the root of your project&lt;br&gt;
2) Add the names of the folders and files you want to ignore:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
secret-password.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to add these files to .gitignore as soon as they are made. But if you have accidentally committed them to git, you can untrack them with the following commands:&lt;/p&gt;

&lt;p&gt;1) Remove everything from the repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm -r --cached .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Re add everything&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now everything apart from the files in your .gitignore will be added to the staging area.&lt;/p&gt;

&lt;p&gt;3) Commit&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m ".gitignore fix"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The local repository is now clean. Push the changes to Github to see the changes effective there too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-branches"&gt;
  &lt;/a&gt;
  Git branches
&lt;/h2&gt;

&lt;p&gt;A common Git paradigm is to always keep the main branch deployable. This means that whenever you're working on a new feature, you should create a new branch and make your commits to that. Then once the feature is complete, you can merge it back into main.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wciQqXfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhd4ch9mtfwo9xa8s6x3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wciQqXfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhd4ch9mtfwo9xa8s6x3.jpg" alt="Git merge branch diagram" width="640" height="296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-working-solo"&gt;
  &lt;/a&gt;
  When working solo
&lt;/h3&gt;

&lt;p&gt;If you're the only one contributing to a repo, then you can safely merge a feature into main without creating a pull request.&lt;/p&gt;

&lt;p&gt;1) Create new branch and go into it&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Make your changes in this branch. Add and commit your changes as many times as necessary.&lt;/p&gt;

&lt;p&gt;3) Checkout to main and merge the feature branch into main&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge &amp;lt;branch-name&amp;gt; --no-ff&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The no-fastforward flag creates a new merge commit and maintains history of the feature branches. Without this flag, the head will simply fastforward to the end of the feature without a new merge commit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-working-in-a-team"&gt;
  &lt;/a&gt;
  When working in a team
&lt;/h3&gt;

&lt;p&gt;Let's say someone has added you to a Github repository, so that you can now contribute as part of the team.&lt;/p&gt;

&lt;p&gt;To contribute, you will need to make a pull request. A pull request is for communicating and reviewing code, before merging it to main. Merging directly, and merging with a pull request are identical - the only difference is that a pull request creates a dedicated forum on Github for discussion - this allows team members to review your code before merging it.&lt;/p&gt;

&lt;p&gt;1) Clone the Github repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone &amp;lt;repo-url&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Ensure our code is up to date&lt;/p&gt;

&lt;p&gt;Before making any changes, you should always make sure your local copy is up to date with the remote repo - as other devs may have contributed. Pull the latest code from remote repo.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull origin main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) Create and checkout to new branch&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4) Make desired changes&lt;/p&gt;

&lt;p&gt;5) Add and commit changes&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "some message"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;6) Push the code in this branch to a branch in Github&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push origin &amp;lt;name-of-branch-for-Github&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7) Create a pull request&lt;/p&gt;

&lt;p&gt;Go to the Github repo main branch and click "compare and pull request".&lt;/p&gt;

&lt;p&gt;8) Leave a comment to explain exactly what you've done, then "create pull request".&lt;/p&gt;

&lt;p&gt;Other team members will get an email for the request to pull your code into main. They can see changes, see commits, leave comments, and (if happy) merge the code into main.&lt;/p&gt;

&lt;p&gt;Feature branch can be deleted once merged.&lt;/p&gt;

&lt;p&gt;** But what if people make changes to main while your still working on the feature branch? **&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git checkout main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout &amp;lt;feature-branch-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Merge the latest main branch into your feature branch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;git merge main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can now incorporate the latest changes by other devs into your feature.&lt;/p&gt;

&lt;p&gt;Note: you may need to iron out merge conflicts. This is normal and part of working with Git.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forking-and-contributing-to-open-source-projects"&gt;
  &lt;/a&gt;
  Forking and contributing to open source projects
&lt;/h3&gt;

&lt;p&gt;If you don't have write access to a repo, but still want to contribute to it, you can Fork the project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find an open source public repo&lt;/li&gt;
&lt;li&gt;Fork the repo (create a copy to your own Github account)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;url-of-your-fork&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make changes (could also create a new branch for the changes then push to a new branch)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add .&lt;/code&gt; &lt;code&gt;git commit -m "message"&lt;/code&gt; &lt;code&gt;git push origin main&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go to your forked copy on Github and click "New pull request"&lt;/li&gt;
&lt;li&gt;"Create pull request" - this pulls your code into the parent repo to be reviewed for merging. YOU CAN'T MERGE THIS - only the repo owners are allowed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h2&gt;

&lt;p&gt;Hopefully that was helpful.&lt;/p&gt;

&lt;p&gt;For more from me, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/DoableDanny"&gt;Follow me on twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;Subscribe to my YouTube channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👋&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to delete remote commits in git?</title>
      <author>Danyson</author>
      <pubDate>Thu, 06 Jan 2022 18:00:54 +0000</pubDate>
      <link>https://dev.to/danyson/how-to-delete-remote-commits-in-git-11h0</link>
      <guid>https://dev.to/danyson/how-to-delete-remote-commits-in-git-11h0</guid>
      <description>&lt;p&gt;Assume you have pushed commits in order A1 =&amp;gt; B2 =&amp;gt; C3 in remote repository.&lt;/p&gt;

&lt;p&gt;Now you want to delete commits C3 and B2.&lt;/p&gt;

&lt;p&gt;The simple solution is as follows using  &lt;code&gt;git reset&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; git reset --hard &amp;lt;A1-commit-id&amp;gt;
 git push -f origin &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, you should avoid doing this if anyone else is working with your remote repository and has pulled your changes C3 and B2.&lt;/p&gt;

&lt;p&gt;That's where &lt;code&gt;git revert&lt;/code&gt; comes in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git revert --no-commit C3
git revert --no-commit B2
git commit -m "commit message for your reverts"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>github</category>
      <category>git</category>
      <category>devops</category>
    </item>
    <item>
      <title>Mocking Redis in Python's unittest</title>
      <author>Akarshan Gandotra</author>
      <pubDate>Thu, 06 Jan 2022 17:50:16 +0000</pubDate>
      <link>https://dev.to/akarshan96/mocking-redis-in-pythons-unittest-ha2</link>
      <guid>https://dev.to/akarshan96/mocking-redis-in-pythons-unittest-ha2</guid>
      <description>&lt;p&gt;Hello folks,&lt;/p&gt;

&lt;p&gt;This blog will guide you to mock redis without using any new library. Redis is used as cache in almost every application. It's very likely you will be required to mock redis at some point of writing those testcases. Scanning through solution available on internet, I felt the need of way to &lt;em&gt;mock redis&lt;/em&gt; should be documented in a blog.&lt;/p&gt;

&lt;p&gt;So working with the saying 😂,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;fake it before you make it&lt;br&gt;
mock it before you rock it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's start 💁&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#back-to-basics-%EF%B8%8F"&gt;
  &lt;/a&gt;
  Back to Basics ⚡️
&lt;/h2&gt;

&lt;p&gt;In this section let us have a refresher course on &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;mock&lt;/code&gt;, &lt;code&gt;side_effect&lt;/code&gt; and &lt;code&gt;return_value&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-mock"&gt;
  &lt;/a&gt;
  1. Mock
&lt;/h3&gt;

&lt;p&gt;A typical piece of code consists of is objects, function calls and variables. While writing tests we don't want to actual objects/methods/class-methods to execute, so we can replace it with a mock object or mock call.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-patch"&gt;
  &lt;/a&gt;
  2. Patch
&lt;/h3&gt;

&lt;p&gt;We now know that we can mock objects and functional calls but how we can establish for which function we have to associate a particular mock with?&lt;br&gt;
Here patch comes into play, patch is a decorator which accepts fully qualified name of method to be mocked as string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"app.function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_01_another_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have patched function method which will automatically send a positional argument to the function you're decorating. Usually this position argument is an instance of &lt;code&gt;MagicMock&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-return-value"&gt;
  &lt;/a&gt;
  3. Return Value
&lt;/h3&gt;

&lt;p&gt;While writing tests we require mock method or mock class method to return a particular value. We can add the expected return value in &lt;strong&gt;return_value&lt;/strong&gt; attribute of MagicMock instance.&lt;/p&gt;

&lt;p&gt;Suppose we have a RandomObject class where we have to mock method &lt;code&gt;function&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.module&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomObject&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"app.module.RandomObject"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_01_another_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_random&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mock_random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"test-value"&lt;/span&gt;
    &lt;span class="n"&gt;random_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"test-value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-side-effect"&gt;
  &lt;/a&gt;
  4. Side Effect
&lt;/h3&gt;

&lt;p&gt;This is typically used to test if Exceptions are handled correctly in the code. When the patched function is called, the exception mentioned in &lt;strong&gt;side_effect&lt;/strong&gt; is raised.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.module&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomObject&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"app.module.RandomObject"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_01_another_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_random&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mock_random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test-message"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;random_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#leveraging-sideeffect"&gt;
  &lt;/a&gt;
  Leveraging side_effect ☄️
&lt;/h2&gt;

&lt;p&gt;Another way to use side_effect is we can pass a list of possible values which we want to bind with side effect attribute. Each time the patched function is called the mock will return next element in the list of values. Also we can have any set of data type (not specifically Exceptions).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;

&lt;span class="n"&gt;mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;side_effect_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"dummy_val"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"dummy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;  &lt;span class="c1"&gt;# list of values on which we want to be returned.
&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;side_effect_list&lt;/span&gt;

&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'dummy_val'&lt;/span&gt;
&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'dummy'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To leverage side_effect even further, we can even side_effect attribute with a method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;

&lt;span class="n"&gt;foo_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# function which we need to bind with side effect
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo_function&lt;/span&gt;
&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'bar'&lt;/span&gt;
&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'foo'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mocking-redis"&gt;
  &lt;/a&gt;
  Mocking Redis 🔘
&lt;/h2&gt;

&lt;p&gt;Now let's discuss how we can now use above to mock redis. Let us for now consider 5 most common redis methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hget&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exists&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since redis is a key-value data store, we can use dictionary for caching these key-value pairs. We can then define above methods in a MockRedis class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockRedis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us write function that will mimic the &lt;a href="https://redis.io/commands/GET"&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; functionality. The get method will simply take a key and return its value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# return nil
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://redis.io/commands/set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; functionality puts the value in the cache.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"OK"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# return nil in case of some issue
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly let us implement &lt;a href="https://redis.io/commands/hset"&gt;&lt;code&gt;hset&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://redis.io/commands/hget"&gt;&lt;code&gt;hget&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://redis.io/commands/exists"&gt;&lt;code&gt;exists&lt;/code&gt;&lt;/a&gt; in the class MockRedis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockRedis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# return nil
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"OK"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# return nil in case of some issue
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# return nil
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# return nil in case of some issue
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cache_overwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;mock_redis_method.py&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So now let us mock redis now, for that we have to patch StrictRedis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock_redis_method&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MockRedis&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"redis.StrictRedis"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_01_redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_redis&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# initialising the cache with test values 
&lt;/span&gt;    &lt;span class="n"&gt;redis_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="s"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Foo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Bar"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;mock_redis_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MockRedis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redis_cache&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# binding a side_effect of a MagicMock instance with redis methods we defined in the MockRedis class.
&lt;/span&gt;    &lt;span class="n"&gt;mock_redis_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mock_redis_method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_redis_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mock_redis_method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_redis_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mock_redis_method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_redis_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mock_redis_method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_redis_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mock_redis_method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_redis_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# StrictRedis mock return_values is set as above mock_redis_method.
&lt;/span&gt;    &lt;span class="n"&gt;mock_redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock_redis_method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! it's done 🍸. We have successfully mocked redis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-content"&gt;
  &lt;/a&gt;
  Bonus Content ✅
&lt;/h2&gt;

&lt;p&gt;We can similarly mock requests library&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"requests.get"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"requests.post"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_02_external_api_calls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# request and response are mapped in a dict
&lt;/span&gt;    &lt;span class="n"&gt;request_response_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"https://dummy-host?key=foo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;"https://dummy-host?key=bar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Not Found"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockResponse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_data&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;

        &lt;span class="c1"&gt;# request.json()
&lt;/span&gt;        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_data&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mock_request_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request_response_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MockResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c1"&gt;# get and post method return similar kind of response. 
&lt;/span&gt;    &lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock_request_method&lt;/span&gt;
    &lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock_request_method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cheers 🍻 &lt;/p&gt;

</description>
      <category>redis</category>
      <category>mock</category>
      <category>python</category>
      <category>unittest</category>
    </item>
    <item>
      <title>Optimistic or Pessimistic locking for Token Buckets Rate limiting in PostgreSQL</title>
      <author>Franck Pachot</author>
      <pubDate>Thu, 06 Jan 2022 17:42:07 +0000</pubDate>
      <link>https://dev.to/aws-heroes/optimistic-or-pessimistic-locking-for-token-buckets-rate-limiting-in-postgresql-4om5</link>
      <guid>https://dev.to/aws-heroes/optimistic-or-pessimistic-locking-for-token-buckets-rate-limiting-in-postgresql-4om5</guid>
      <description>&lt;p&gt;In a &lt;a href="https://dev.to/franckpachot/rate-limiting-with-postgresql-yugabytedb-token-buckets-function-5dh8"&gt;Part 2&lt;/a&gt; of this series I defined a function to get tokens for API call rate limiting. I've run it in &lt;code&gt;\watch 0.01&lt;/code&gt; loops in 8 sessions to show concurrent access for the same user. With PostgreSQL, the guarantee that reads and writes happen on the same state is enforced by pessimistic locking: sessions wait but don't fail. With YugabyteDB, optimistic locking is more scalable, but can fail on conflict. This must be handled by the application. In the &lt;a href="https://dev.to/yugabyte/yugabytedb-jdbc-smart-driver-for-proxyless-halb-2k8a"&gt;Part 3&lt;/a&gt; of this series, I introduced the JDBC driver for YugabyteDB. I'll use it even when connecting to PostgreSQL because all is compatible. But of course, no cluster-aware features will not be used as PostgreSQL has only one writer endpoint.&lt;/p&gt;

&lt;p&gt;Here is how I installed the driver (but check for &lt;a href="https://github.com/yugabyte/pgjdbc/releases"&gt;newer releases&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget &lt;span class="nt"&gt;-qc&lt;/span&gt; &lt;span class="nt"&gt;-O&lt;/span&gt; jdbc-yugabytedb.jar https://github.com/yugabyte/pgjdbc/releases/download/v1.0.0/jdbc-yugabytedb-42.3.0.jar
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CLASSPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;.:./jdbc-yugabytedb.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The creation of the table and function is in the &lt;a href="https://dev.to/yugabyte/rate-limiting-with-postgresql-yugabytedb-token-buckets-function-5dh8"&gt;Part 2&lt;/a&gt; of this series and I do not reproduce it here. All will go to a github repository at the end of this blog series.&lt;/p&gt;

&lt;p&gt;I'll create a RateLimitDemo class with a &lt;code&gt;main()&lt;/code&gt; that defines the DataSource (&lt;code&gt;"jdbc:yugabytedb://...&lt;/code&gt;) in &lt;code&gt;args[1]&lt;/code&gt; and start a specific number of threads (&lt;code&gt;args[0]&lt;/code&gt;). The call to the PL/pgSQL function defined in &lt;a href="https://dev.to/yugabyte/rate-limiting-with-postgresql-yugabytedb-token-buckets-function-5dh8"&gt;Part 2&lt;/a&gt; takes a rate limit (&lt;code&gt;args[3]&lt;/code&gt;) for an id (&lt;code&gt;args[2]&lt;/code&gt;) which can be a user, a tenant, an edge location... on which we want to allow a maximum number of tokens per second. Each thread will connect to the data source (&lt;code&gt;ds&lt;/code&gt;) and set the user requesting the tokens (&lt;code&gt;id&lt;/code&gt;) with a rate of refill per second (&lt;code&gt;rate&lt;/code&gt; token/s here) and the number of retries in case of transaction conflicts (&lt;code&gt;max_retry&lt;/code&gt; passed in args[4]).&lt;/p&gt;

&lt;p&gt;The constructor &lt;code&gt;public RateLimitDemo(YBClusterAwareDataSource ds, String id, int rate, int max_retry&lt;/code&gt; connects and sets the default transaction isolation level to SERIALIZABLE and prepares the statement to call the procedure. The SELECT statement returns the host@pid session identification (&lt;code&gt;rs.getString(1)&lt;/code&gt;) and the number of tokens (&lt;code&gt;rs.getInt(2)&lt;/code&gt;). The query is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; 
 &lt;span class="n"&gt;pg_backend_pid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s1"&gt;'@'&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="k"&gt;host&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inet_server_addr&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
 &lt;span class="n"&gt;rate_limiting_token_bucket_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll also run some variations adding the &lt;code&gt;pg_backend_pid()&lt;/code&gt; to the &lt;code&gt;id&lt;/code&gt; to test without contention.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;public void run()&lt;/code&gt; is a loop that calls the token request stored function. If tokens are available (&lt;code&gt;(rs.getInt(2) &amp;gt;= 0)&lt;/code&gt;) it increments the call counter. If not, it waits one second (&lt;code&gt;Thread.sleep(1000)&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.time.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.sql.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.yugabyte.ysql.YBClusterAwareDataSource&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RateLimitDemo&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Thread&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

 &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;             &lt;span class="c1"&gt;// id on which to get a token&lt;/span&gt;
 &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;              &lt;span class="c1"&gt;// rate for allowed token / second&lt;/span&gt;
 &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;max_retry&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;         &lt;span class="c1"&gt;// number of retry on tx conflict&lt;/span&gt;
 &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Connection&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// SQL connection to the database&lt;/span&gt;
 &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;PreparedStatement&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// SQL statement to call to function&lt;/span&gt;

 &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RateLimitDemo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;YBClusterAwareDataSource&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;max_retry&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;SQLException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max_retry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;max_retry&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getConnection&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;prepareStatement&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
     &lt;span class="s"&gt;"select pg_backend_pid()||'@'||host(inet_server_addr()),rate_limiting_token_bucket_request(?,?)"&lt;/span&gt;
     &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// parameter 1 of sql function is the id requesting a token&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;// parameter 2 of sql function is the rate limit&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAutoCommit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setTransactionIsolation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TRANSACTION_SERIALIZABLE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="nc"&gt;Instant&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;Instant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// initial time to calculate the per-thread throughput&lt;/span&gt;
   &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;total_duration&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// duration since initial time&lt;/span&gt;
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total_tokens&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// counter for accepted tokens&lt;/span&gt;
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;          &lt;span class="c1"&gt;// retries before failure&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;        &lt;span class="c1"&gt;// loop to demo with maximum thoughput&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ResultSet&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;executeQuery&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
     &lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// reset retries when sucessful&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;total_tokens&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;      &lt;span class="c1"&gt;// requested token was accepted&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// wait when tokens are exhausted&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
     &lt;span class="n"&gt;total_duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;between&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;Instant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;toNanos&lt;/span&gt;&lt;span class="o"&gt;()/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;e9&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
     &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;"(pid@host %12s) %6d calls %6d tokens %8.1f /sec %5d remaining\n"&lt;/span&gt;
      &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;total_tokens&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;total_tokens&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;total_duration&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
     &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;SQLException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"40001"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSQLState&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// transaction conflict&lt;/span&gt;
       &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Instant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;" SQLSTATE %s on retry #%d %s\n"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSQLState&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;retries&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;max_retry&lt;/span&gt; &lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Instant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()+&lt;/span&gt;&lt;span class="s"&gt;" failure after #%d retries %s\n"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt;
         &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
       &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
       &lt;span class="o"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failure"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;SQLException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="nc"&gt;YBClusterAwareDataSource&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;YBClusterAwareDataSource&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
     &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt;
     &lt;span class="nc"&gt;RateLimitDemo&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
      &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;RateLimitDemo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
       &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;));&lt;/span&gt;
      &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;}&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// RateLimitDemo &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The transaction conflicts are detected by &lt;code&gt;catch(SQLException e)&lt;/code&gt; and &lt;code&gt;"40001".equals(e.getSQLState())&lt;/code&gt;. A &lt;code&gt;retries&lt;/code&gt; counter is incremented and waits &lt;code&gt;Thread.sleep(50*retries)&lt;/code&gt;. Before the maximum retries &lt;code&gt;(retries &amp;lt; max_retry )&lt;/code&gt; I display the exception and increment the retries. &lt;code&gt;retries&lt;/code&gt; is set back to zero as soon as a call is successful. After &lt;code&gt;max_retries&lt;/code&gt;, I stop the program (&lt;code&gt;System.exit(1);&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#postgresql-read-committed-different-raw-id-endraw-"&gt;
  &lt;/a&gt;
  PostgreSQL READ COMMITTED different &lt;code&gt;id&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;First, I've run it on PostgreSQL (Amazon RDS db.m5.xlarge with no HA). I changed two things in the previous java code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; use the default Read Committed isolation level with the &lt;code&gt;setTransactionIsolation&lt;/code&gt; line commented out&lt;/li&gt;
&lt;li&gt;call tokens for different users by concatenating the backend pid in the call: &lt;code&gt;select pg_backend_pid()||?||host(inet_server_addr()) ,rate_limiting_token_bucket_request(?||pg_backend_pid()::text,?)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've run this over the night to be sure that throughput is constant:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;javac RateLimitDemo.java &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; java RateLimitDemo 50 &lt;span class="s2"&gt;"jdbc:yugabytedb://database-1.cvlvfe1jv6n5.eu-west-1.rds.amazonaws.com/postgres?user=postgres&amp;amp;password=Covid-19"&lt;/span&gt; &lt;span class="s2"&gt;"user2"&lt;/span&gt; 1000 20 | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'BEGIN{t=systime()}/remaining$/{c=c+1;p=100*$5/$3}NR%100==0{printf "rate: %8.2f/s (last pct: %5.2f) max retry:%3d\n",c/(systime()-t),p,retry}/retry/{sub(/#/,"",$6);if($6&amp;gt;retry)retry=$6}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This runs 50 threads with a high limit per user (1000 tokens per second) to show the maximum throughput without contention:&lt;/p&gt;

&lt;p&gt;The awk script sums the tokens acquired, to display the actual rate, show percentage of successful calls and maximum number of retries encountered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rate:   999.29/s (last pct: 100.00) max retry:  0
rate:  1000.00/s (last pct: 100.00) max retry:  0
rate:  1000.71/s (last pct: 100.00) max retry:  0
rate:  1001.42/s (last pct: 100.00) max retry:  0
rate:  1002.13/s (last pct: 100.00) max retry:  0
rate:   995.77/s (last pct: 100.00) max retry:  0
rate:   996.48/s (last pct: 100.00) max retry:  0
rate:   997.18/s (last pct: 100.00) max retry:  0
rate:   997.89/s (last pct: 100.00) max retry:  0
rate:   998.59/s (last pct: 100.00) max retry:  0
rate:   999.30/s (last pct: 100.00) max retry:  0
rate:  1000.00/s (last pct: 100.00) max retry:  0
rate:  1000.70/s (last pct: 100.00) max retry:  0
rate:  1001.41/s (last pct: 100.00) max retry:  0
rate:  1002.11/s (last pct: 100.00) max retry:  0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've run this on AWS RDS to get the Performance Insight view.&lt;/p&gt;

&lt;p&gt;About 1000 autocommit updates per second:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qudn_brZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddfteojv7xwuhxhbmgmc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qudn_brZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddfteojv7xwuhxhbmgmc.png" alt="1000 xact_commit/s" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From my 50 threads doing those single-row calls, an average of 15 are active in database, mostly waiting on WALWrite. &lt;/p&gt;

&lt;p&gt;The numbers match what I display: 100 transaction commit per second, 1000 tuples fetched and 1000 rows updated. However I have some doubts about the relevance of displaying those statistics which depend on the access path. For example I have 1000 tup_fetched (index access) but 2000 tup_returned (because of UPDATE ... RETURNING I guess)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RL5YjQqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7i19rgc9gouuauarzb9b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RL5YjQqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7i19rgc9gouuauarzb9b.png" alt="WALWrite" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is no contention so the main bottleneck is on keeping up writing WAL. PostgreSQL generates a lot of WAL, even for a single counter + timestamp update, because the whole tuple is inserted, the old one marked as previous version, index updates, and all this with full page logging. And this, with no multi-AZ configuration for HA.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#postgresql-serializable-different-raw-id-endraw-"&gt;
  &lt;/a&gt;
  PostgreSQL SERIALIZABLE different &lt;code&gt;id&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;I've run the same in Serializable isolation level:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rate:   929.99/s (last pct: 100.00) max retry:  4
rate:   930.24/s (last pct: 100.00) max retry:  4
rate:   930.50/s (last pct: 100.00) max retry:  4
rate:   930.75/s (last pct: 100.00) max retry:  4
rate:   931.01/s (last pct: 100.00) max retry:  4
rate:   931.26/s (last pct: 100.00) max retry:  4
rate:   931.51/s (last pct: 100.00) max retry:  4
rate:   931.77/s (last pct: 100.00) max retry:  4
rate:   932.02/s (last pct: 100.00) max retry:  4
rate:   929.91/s (last pct: 100.00) max retry:  4
rate:   930.16/s (last pct: 100.00) max retry:  4
rate:   930.42/s (last pct: 100.00) max retry:  4
rate:   930.67/s (last pct: 100.00) max retry:  4
rate:   930.93/s (last pct: 100.00) max retry:  4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The throughput is nearly the same and the number or retries was very small. This post is about performance. I'll write another post about the two isolation levels and which anomalies we can get in PostgreSQL or YugabyteDB with this "token bucket" algorithm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#postgresql-read-committed-with-same-raw-id-endraw-"&gt;
  &lt;/a&gt;
  PostgreSQL READ COMMITTED with same &lt;code&gt;id&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Now I want to test a race condition where all threads request a token for the same id. I wasn't sure about a real case of it, until a discussion with Adrian:&lt;br&gt;
 &lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8YCVGqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1181856114838781953/2ZcXLENa_normal.jpg" alt="Adrian Dozsa profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Adrian Dozsa
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @adriandozsa
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/FranckPachot"&gt;@FranckPachot&lt;/a&gt; &lt;a href="https://twitter.com/Yugabyte"&gt;@Yugabyte&lt;/a&gt; No right or wrong, just different use cases. I was thinking of a rate limiter for a SaaS service that can have high parallelism even per tenant.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      01:05 AM - 05 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1478533100917374976" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1478533100917374976" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1478533100917374976" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
 

&lt;p&gt;The rate has decreased a lot here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rate:   124.85/s (last pct: 100.00) max retry:  0
rate:   124.78/s (last pct: 100.00) max retry:  0
rate:   124.71/s (last pct: 100.00) max retry:  0
rate:   124.63/s (last pct: 100.00) max retry:  0
rate:   124.56/s (last pct: 100.00) max retry:  0
rate:   124.49/s (last pct: 100.00) max retry:  0
rate:   124.42/s (last pct: 100.00) max retry:  0
rate:   124.35/s (last pct: 100.00) max retry:  0
rate:   124.28/s (last pct: 100.00) max retry:  0
rate:   124.21/s (last pct: 100.00) max retry:  0
rate:   124.14/s (last pct: 100.00) max retry:  0
rate:   124.07/s (last pct: 100.00) max retry:  0
rate:   124.00/s (last pct: 100.00) max retry:  0
rate:   123.93/s (last pct: 100.00) max retry:  0
rate:   123.86/s (last pct: 100.00) max retry:  0
rate:   123.80/s (last pct: 100.00) max retry:  0
rate:   123.73/s (last pct: 100.00) max retry:  0
rate:   123.66/s (last pct: 100.00) max retry:  0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the bottleneck is tuple lock because all threads compete to update the row, with &lt;code&gt;Lock:tuple&lt;/code&gt; and &lt;code&gt;Lock:transactionid&lt;/code&gt; because when a row is locked we have to wait for the transaction that locked it. 45 sessions waiting on average: all my threads are waiting for only 5 doing calls:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8qGab4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekrp6hegpb36z95myqiu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8qGab4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekrp6hegpb36z95myqiu.png" alt="Image description" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#postgresql-serializable-with-same-raw-id-endraw-"&gt;
  &lt;/a&gt;
  PostgreSQL SERIALIZABLE with same &lt;code&gt;id&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Now I'l run the exact program I've put above, updating the same row in Serializable mode. I have reduced the number of threads from 50 to 10 because the number of maximum retries were immediately reached. Anyway, the throughput from 10 threads is better than with the 50 ones in Read Commited:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rate:   218.48/s (last pct: 83.85) max retry:  5
rate:   217.19/s (last pct: 81.35) max retry:  5
rate:   217.39/s (last pct: 85.39) max retry:  5
rate:   217.78/s (last pct: 83.48) max retry:  5
rate:   218.07/s (last pct: 85.09) max retry:  5
rate:   218.37/s (last pct: 84.04) max retry:  5
rate:   218.70/s (last pct: 81.29) max retry:  5
rate:   217.47/s (last pct: 83.84) max retry:  5
rate:   217.82/s (last pct: 85.12) max retry:  5
rate:   218.06/s (last pct: 85.36) max retry:  5
rate:   218.44/s (last pct: 85.13) max retry:  5
rate:   218.65/s (last pct: 83.54) max retry:  5
rate:   217.31/s (last pct: 82.77) max retry:  5
rate:   217.64/s (last pct: 81.35) max retry:  5
rate:   217.82/s (last pct: 83.88) max retry:  5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With 7% of retries, I don't think it makes sense to run more threads. I've seen nothing in Performance Insight about this: bottleneck. This run was just after the previous one:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HdKESxah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vk7lpv87tcywjqegfpx1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HdKESxah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vk7lpv87tcywjqegfpx1.png" alt="transactions blocked" width="880" height="390"&gt;&lt;/a&gt;&lt;br&gt;
With Read Committed pessimistic locking, the 50 sessions waiting were visible in &lt;code&gt;Lock&lt;/code&gt; wait events and in &lt;code&gt;transactions blocked&lt;/code&gt; statistics but here, where I know I have a lot of retries, I see nothing visible in those metrics.&lt;/p&gt;

&lt;p&gt;By the way, my awk script hides it but the retries raise as SQL State 40001:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(pid@host 17774@172.31.24.228)    579 calls    471 tokens     22.2 /sec 60000 remaining
(pid@host 17780@172.31.24.228)    544 calls    454 tokens     22.2 /sec 60000 remaining
(pid@host 17726@172.31.24.228)    655 calls    562 tokens     23.1 /sec 60000 remaining
2022-01-05T09:13:28.809161Z SQLSTATE 40001 on retry #0 com.yugabyte.util.PSQLException: ERROR: could not serialize access due to concurrent update
  Where: SQL statement "update rate_limiting_token_bucket
     set ts=now(), tk=greatest(least(
      tk-1+refill_per_sec*extract(epoch from clock_timestamp()-ts)
      ,window_seconds*refill_per_sec),-1)
     where rate_limiting_token_bucket.id=rate_id
     returning tk"
PL/pgSQL function rate_limiting_token_bucket_request(text,integer,integer) line 7 at SQL statement
2022-01-05T09:13:28.815876Z SQLSTATE 40001 on retry #1 com.yugabyte.util.PSQLException: ERROR: could not serialize access due to concurrent update
  Where: SQL statement "update rate_limiting_token_bucket
     set ts=now(), tk=greatest(least(
      tk-1+refill_per_sec*extract(epoch from clock_timestamp()-ts)
      ,window_seconds*refill_per_sec),-1)
     where rate_limiting_token_bucket.id=rate_id
     returning tk"
PL/pgSQL function rate_limiting_token_bucket_request(text,integer,integer) line 7 at SQL statement
(pid@host 17786@172.31.24.228)    565 calls    471 tokens     23.9 /sec 60000 remaining
(pid@host 17721@172.31.24.228)    739 calls    636 tokens     25.4 /sec 60000 remaining
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've run this in Amazon RDS because a managed service is easy to provision and monitor, but all this is the same as vanilla PostgreSQL. AWS changes only little things to the postgres code, to cope with the cloud security model. I've used the YugabyteDB JDBC driver so you can guess what I'll run in the next post 🤔&lt;/p&gt;

&lt;p&gt;What is important to remember is that, for this workload, the default Read Committed or Serializable have good performance without contention on the same rows. You may think that Read Committed is easier because there are no retries, but this is because I'm running on existing rows. The UPDATE-then-INSERT will always need retry because they can encounter a &lt;code&gt;duplicate key&lt;/code&gt;. I'll detail that in another post. For this Token Bucket algorithm, Serializable is more appropriate, especially with high probability of contention.&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>sql</category>
      <category>database</category>
      <category>serializable</category>
    </item>
    <item>
      <title>AWS Roadmap</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Thu, 06 Jan 2022 17:21:25 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/aws-roadmap-2493</link>
      <guid>https://dev.to/karanpratapsingh/aws-roadmap-2493</guid>
      <description>&lt;p&gt;Today, we'll take a look at a brief AWS roadmap. Our goal is to focus on fundamentals then identify and learn the most commonly used services first and learn specialized services on a need to know basis.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yzCx4qvjwgw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Here a summary of the services we'll be discussing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fundamentals"&gt;
  &lt;/a&gt;
  Fundamentals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Regions and Availability Zones&lt;/li&gt;
&lt;li&gt;Identity and Access Management
(IAM)&lt;/li&gt;
&lt;li&gt;Virtual Private Cloud (VPC)

&lt;ul&gt;
&lt;li&gt;Private &amp;amp; Public Subnet&lt;/li&gt;
&lt;li&gt;Internet &amp;amp; NAT Gateway&lt;/li&gt;
&lt;li&gt;ACLs and Security Groups&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CloudFront&lt;/li&gt;
&lt;li&gt;Simple Storage Service (S3)&lt;/li&gt;
&lt;li&gt;Amplify&lt;/li&gt;
&lt;li&gt;Cognito&lt;/li&gt;
&lt;li&gt;Elastic Beanstalk&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Compute&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elastic Compute Cloud (EC2)

&lt;ul&gt;
&lt;li&gt;Auto Scaling Groups&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Lambda&lt;/li&gt;
&lt;li&gt;Lightsail&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Database&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Relational Database Service (RDS)&lt;/li&gt;
&lt;li&gt;Aurora&lt;/li&gt;
&lt;li&gt;DynamoDB&lt;/li&gt;
&lt;li&gt;ElastiCache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Networking &amp;amp; Delivery&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API Gateway&lt;/li&gt;
&lt;li&gt;Route 53&lt;/li&gt;
&lt;li&gt;Elastic Load Balancing (ELB)

&lt;ul&gt;
&lt;li&gt;Application Load Balancing (ALB)&lt;/li&gt;
&lt;li&gt;Network Load Balancing (NLB)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Certificate Manager (ACM)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Integration&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple Queue Service (SQS)&lt;/li&gt;
&lt;li&gt;Simple Notification Service (SNS)&lt;/li&gt;
&lt;li&gt;EventBridge&lt;/li&gt;
&lt;li&gt;Step Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elastic Container Service (ECS)&lt;/li&gt;
&lt;li&gt;Elastic Kubernetes Service (EKS)&lt;/li&gt;
&lt;li&gt;App Runner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Monitoring&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CloudWatch

&lt;ul&gt;
&lt;li&gt;Metrics&lt;/li&gt;
&lt;li&gt;Alarms&lt;/li&gt;
&lt;li&gt;Log Groups&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#devops"&gt;
  &lt;/a&gt;
  DevOps
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Cloud Development Kit (CDK)&lt;/li&gt;
&lt;li&gt;CodeBuild&lt;/li&gt;
&lt;li&gt;CodeDeploy&lt;/li&gt;
&lt;li&gt;CodePipeline&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data-engineering"&gt;
  &lt;/a&gt;
  Data Engineering
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Athena&lt;/li&gt;
&lt;li&gt;Kinesis&lt;/li&gt;
&lt;li&gt;Redshift&lt;/li&gt;
&lt;li&gt;Glue&lt;/li&gt;
&lt;li&gt;Lake Formation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This only scratches the surface of what AWS is capable of! I hope this was helpful, you can find the complete roadmap &lt;a href="https://github.com/karanpratapsingh/roadmaps"&gt;here&lt;/a&gt; as well. As always, feel free to reach out anytime!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The best database pagination technique is ...</title>
      <author>Matej Bačo</author>
      <pubDate>Thu, 06 Jan 2022 17:16:18 +0000</pubDate>
      <link>https://dev.to/appwrite/this-is-why-you-should-use-cursor-pagination-4nh5</link>
      <guid>https://dev.to/appwrite/this-is-why-you-should-use-cursor-pagination-4nh5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  👋 Introduction
&lt;/h2&gt;

&lt;p&gt;The Database is one of the cornerstones of every application. It's where you store everything your app needs to remember, compute later, or display to other users online. It's all fun and games until the database grows and your application starts lagging because you were trying to fetch and render 1,000 posts at once. Well, you're a smart engineer right? You quickly patch that with a &lt;code&gt;Show more&lt;/code&gt; button. A few weeks later, you're presented with a new &lt;code&gt;Timeout error&lt;/code&gt;! You head to Stack Overflow but quickly realize that &lt;code&gt;Ctrl&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; have stopped working due to excessive usage 🤦 With no more options at your disposal, you actually start debugging and realize that the database returns over 50,000 posts each time a user opens your app! What do we do now ?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--989Af_RY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nfygocl0lbuimnun5pm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--989Af_RY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nfygocl0lbuimnun5pm.jpg" alt="This is fine meme" width="880" height="660"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To prevent these horrific scenarios, we should be aware of risks from the beginning because a well-prepared developer will never have to risk. This article will prepare you to fight database-related performance issues using &lt;strong&gt;offset and cursor pagination&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"An ounce of prevention is worth a pound of cure." &lt;em&gt;- Benjamin Franklin&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-pagination"&gt;
  &lt;/a&gt;
  📚 What is pagination?
&lt;/h2&gt;

&lt;p&gt;Pagination is a strategy employed when querying any dataset that holds more than just a few hundred records. Thanks to pagination, we can split our large dataset into chunks ( or pages ) that we can gradually fetch and display to the user, thus reducing the load on the database. Pagination also solves a lot of performance issues both on the client and server-side! Without pagination, you'd have to load the entire chat history only to read the latest message sent to you.&lt;/p&gt;

&lt;p&gt;These days, pagination has almost become a necessity since &lt;strong&gt;every&lt;/strong&gt; application is very likely to deal with large amounts of data. This data could be anything from user-generated content, content added by administrators or editors, or automatically generated audits and logs. As soon as your list grows to more than a few thousand items, your database will take too long to resolve each request and your front-end's speed and accessibility will suffer. As for your users, their experience will look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fXGXtqMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/3o7bu3XilJ5BOiSGic/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fXGXtqMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/3o7bu3XilJ5BOiSGic/giphy.webp" alt="loading" width="300" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we know what pagination is, how do we actually use it? And why is it necessary?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-pagination"&gt;
  &lt;/a&gt;
  🔍 Types of pagination
&lt;/h2&gt;

&lt;p&gt;There are two pagination strategies that are widely used - &lt;strong&gt;offset&lt;/strong&gt; and &lt;strong&gt;cursor&lt;/strong&gt;. Before digging in-depth and learning everything about them, let's look at some websites using them.&lt;/p&gt;

&lt;p&gt;First, let's visit GitHub's &lt;a href="https://github.com/appwrite/appwrite/stargazers"&gt;Stargazer page&lt;/a&gt; and notice how the tab says &lt;code&gt;5,000+&lt;/code&gt; and not an absolute number? Also, instead of standard page numbers, they use &lt;code&gt;Previous&lt;/code&gt; and &lt;code&gt;Next&lt;/code&gt; buttons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pfJld42i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb4mal2wh1g0voajvdgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pfJld42i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb4mal2wh1g0voajvdgb.png" alt="GitHub pagination" width="880" height="63"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, let's switch to &lt;a href="https://www.amazon.com/s?k=microwave"&gt;Amazon's products list&lt;/a&gt; and notice the exact amount of results &lt;code&gt;364&lt;/code&gt;, and standard pagination with all page numbers you can click through &lt;code&gt;1 2 3 ... 20&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBNXX384--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv1qinukjcoylwvaa5pr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBNXX384--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv1qinukjcoylwvaa5pr.png" alt="Amazon pagination" width="880" height="74"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's very clear that two tech &lt;strong&gt;giants&lt;/strong&gt; could not agree on which solution is better! Why? Well, we'll need to use an answer developers hate, &lt;code&gt;Because it depends&lt;/code&gt;. Let's explore both methods to understand their advantages, limitations, and performance implications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#offset-pagination"&gt;
  &lt;/a&gt;
  Offset pagination
&lt;/h3&gt;

&lt;p&gt;Most websites use offset pagination because of its simplicity and how intuitive pagination is to users. To implement offset pagination, we will usually need two pieces of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;limit&lt;/code&gt; - Number of rows to fetch from the database&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;offset&lt;/code&gt; - Number of rows to skip. Offset is like a page number, but with a bit of math around it (&lt;code&gt;offset = (page-1) * limit&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get the first page of our data, we set the limit to 10 (because we want 10 items on the page) and offset to 0 (because we want to start counting 10 items from the 0th item). As a result, we will get ten rows.&lt;/p&gt;

&lt;p&gt;To get the second page, we keep the limit at 10 ( this doesn't change since we want every page to contain 10 rows ) and set offset to 10 ( return results from the 10th row onwards ). We continue this approach thereby allowing the end user to paginate through the results and see all of their content.&lt;/p&gt;

&lt;p&gt;In the SQL world, such a query would be written as &lt;code&gt;SELECT * FROM posts OFFSET 10 LIMIT 10&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some websites implementing offset pagination also show the page number of the last page. How do they do it? Alongside results for each page, they also tend to return a &lt;code&gt;sum&lt;/code&gt; attribute telling you how many rows there are in total. Using &lt;code&gt;limit&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt; and a bit of math, you can calculate last page number using &lt;code&gt;lastPage = ceil(sum / limit)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As convenient as this feature is for the user, developers struggle to scale this type of pagination. Looking at &lt;code&gt;sum&lt;/code&gt; attribute, we can already see that it can take quite some time to count all rows in a database to the exact number. &lt;strong&gt;Alongside that, the &lt;code&gt;offset&lt;/code&gt; in databases is implemented in a way that loops through rows to know how many should be skipped.&lt;/strong&gt; That means that the higher our offset is, the longer our database query will take.&lt;/p&gt;

&lt;p&gt;Another downside of offset pagination is that it doesn't play well with real-time data or data that changes often. Offset says how many rows we want to skip but doesn't account for row deletion or new rows being created. Such an offset can result in showing duplicate data or some data missing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cursor-pagination"&gt;
  &lt;/a&gt;
  Cursor pagination
&lt;/h3&gt;

&lt;p&gt;Cursors are successors to offsets, as they solve all issues that offset pagination has - performance, missing data and data duplication because it does not rely on the relative ordering of the rows as in the case of offset pagination. Instead, it relies on an index created and managed by the database. To implement cursor pagination, we will need the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;limit&lt;/code&gt; - Same as before, amount of rows we want to show on one page&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cursor&lt;/code&gt; - ID of a reference element in the list. This can be the &lt;strong&gt;first item&lt;/strong&gt; if you're querying the &lt;strong&gt;previous&lt;/strong&gt; page and the &lt;strong&gt;last item&lt;/strong&gt; if querying the &lt;strong&gt;next&lt;/strong&gt; page.
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cursorDirection&lt;/code&gt; - If user clicked &lt;code&gt;Next&lt;/code&gt; or &lt;code&gt;Previous&lt;/code&gt; (&lt;code&gt;after&lt;/code&gt; or &lt;code&gt;before&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When requesting the first page, we don't need to provide anything, just the limit &lt;code&gt;10&lt;/code&gt;, saying how many rows we want to get. As a result, we get our ten rows.&lt;/p&gt;

&lt;p&gt;To get the next page, we use the ID of the last row as the &lt;code&gt;cursor&lt;/code&gt; and set &lt;code&gt;cursorDirection&lt;/code&gt; to &lt;code&gt;after&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, if we want to go to the previous page, we use the ID of the first row as &lt;code&gt;cursor&lt;/code&gt; and set direction to &lt;code&gt;before&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To compare, in the SQL world, we could write our query as &lt;code&gt;SELECT * FROM posts WHERE id &amp;gt; 10 LIMIT 10 ORDER BY id DESC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Queries that use a cursor instead of offset are more performant because the &lt;code&gt;WHERE&lt;/code&gt; query helps skip unwanted rows, while &lt;code&gt;OFFSET&lt;/code&gt; needs to iterate over them, resulting in a full-table scan.&lt;/strong&gt; Skipping rows using &lt;code&gt;WHERE&lt;/code&gt; can get even faster if you set up proper indexes on your IDs. The index is created by default in case of your primary key.&lt;/p&gt;

&lt;p&gt;Not only that, you no longer need to worry about rows being inserted or deleted. If you were using an offset of 10, you would expect exactly 10 rows to be present ahead of your current page. If this condition were not met, your query will return inconsistent results leading to data duplication and even missing rows. This can happen if any of the rows ahead of your current page were deleted or new rows were added. Cursor pagination solves this by using the index of the last row you fetched and it knows exactly where to start looking from, when you request for more. &lt;/p&gt;

&lt;p&gt;It's not all sunshine and rainbows. Cursor pagination is a really complex problem if you need to implement it on the backend on your own. To implement cursor pagination, you will need &lt;code&gt;WHERE&lt;/code&gt; and &lt;code&gt;ORDER BY&lt;/code&gt; clauses in your query. In addition, you will also need &lt;code&gt;WHERE&lt;/code&gt; clauses to filter by your required conditions. This can get quite complex very quickly and you might end up huge nested query. Alongside that, you will also need to create indexes for all the columns you need to query. Thankfully, services such as &lt;a href="https://appwrite.io/"&gt;Appwrite&lt;/a&gt; take care of that, so you can simply use cursor pagination as a feature.&lt;/p&gt;

&lt;p&gt;Great! We got rid of duplicates and missing data by switching to cursor pagination! but we still have one problem left. Since you should not expose incremental numeric IDs to the user (for security reasons), you must now maintain a hashed version of each ID. Whenever you need to query a database, you convert this string ID to its numeric ID by looking at a table that holds these pairs. What if this row is missing? What if you click the &lt;code&gt;Next&lt;/code&gt; button, take the last row's ID, and request the next page, but the database can't find the ID? &lt;/p&gt;

&lt;p&gt;This is a really rare condition and only occurs if the row's ID that you are about to use as cursor has been just deleted. We can solve this problem by trying previous rows or re-fetching data of earlier requests to update the last row with a new ID, but all of that brings a whole new level of complexity, and the developer needs to understand a bunch of new concepts, such as recursion and proper state management.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pagination-in-appwrite"&gt;
  &lt;/a&gt;
  🚀 Pagination in Appwrite
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://appwrite.io/"&gt;Appwrite&lt;/a&gt; is open source backend-as-a-service that abstracts all the complexity involved in building a modern application by providing you with a set of REST APIs for your core backend needs. Appwrite handles user authentication and authorization, databases, file storage, cloud functions, webhooks and much more! If there is anything missing, you can extend Appwrite using your favourite backend language.&lt;/p&gt;

&lt;p&gt;Appwrite Database lets you store any text-based data that needs to be shared across your users. Appwrite's database allows you to create multiple collections (tables) and store multiple documents (rows) in it. Each collection has attributes (columns) configured to give your dataset a proper schema. You can also configure indexes to make your search queries more performant. When reading your data, you can use a host of powerful queries, filter them, sort them, limit the number of results, and paginate over them. And all this comes out-of-the-box!&lt;/p&gt;

&lt;p&gt;What makes Appwrite Database even better is Appwrite's pagination support, as we support both offset and cursor pagination! Let's imagine we have collection with ID &lt;code&gt;articles&lt;/code&gt;, we can get documents from this collection with either offset or cursor pagination:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Setup&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://demo.appwrite.io/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;articles-demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Offset pagination&lt;/span&gt;
&lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listDocuments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Collection ID&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;published&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// Filters&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Limit&lt;/span&gt;
    &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Offset, amount of documents to skip&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Cursor pagination&lt;/span&gt;
&lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listDocuments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Collection ID&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;published&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// Filters&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Limit&lt;/span&gt;
    &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Not using offset&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;61d6eb2281fce3650c2c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// ID of document I want to paginate after&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we import Appwrite SDK library and setup an instance that connects to specific Appwrite instance and a specific project. Then, we list 10 documents using offset pagination while having a filter to only show those that are published. Right after, we write the exact same list documents query, but this time using cursor instead of offset pagination.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benchmarks"&gt;
  &lt;/a&gt;
  📊 Benchmarks
&lt;/h2&gt;

&lt;p&gt;We've used the word &lt;em&gt;performance&lt;/em&gt; pretty often in this article without providing any actual numbers, so let's create a benchmark together! We will be using Appwrite as our backend server because it supports both offset and cursor pagination and Node.JS to write the benchmark scripts. After all, Javascript is pretty easy to follow along.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can find complete source code as &lt;a href="https://github.com/Meldiron/pagination-benchmark"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, we set up Appwrite, register a user, create a project and create a collection called &lt;code&gt;posts&lt;/code&gt; with collection-level permission and read permission set to &lt;code&gt;role:all&lt;/code&gt;. To learn more about this process, visit the &lt;a href="https://appwrite.io/docs"&gt;Appwrite docs&lt;/a&gt;. We should now have Appwrite ready to be used.&lt;/p&gt;

&lt;p&gt;We can't do a benchmark yet, because our database is empty! Let's fill our tables with some data. We use the following script to load data into our MariadDB database and prepare for the benchmark.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="c1"&gt;// Don't forget to fill config variable with secret information&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🤖 Connecting to database ...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createConnection&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mariadbHost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mariadbPost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mariadbUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mariadbPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`appwrite`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promises&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🤖 Database connection established&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🤖 Preparing database queries ...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;queryValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`('id&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;', '[]', '[]')`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`INSERT INTO _project_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_collection_posts (_uid, _read, _write) VALUES &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;queryValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🤖 Pushing data. Get ready, this will take quite some time ...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`🌟 Successfully finished`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We used two layers for loops to increase the speed of the script. First for loop creates query executions that need to be awaited, and the second loop creates a long query holding multiple insert requests. Ideally, we would want everything in one request, but that is impossible due to MySQL configuration, so we split it into 100 requests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have 1 million documents inserted in less than a minute, and we are ready to start our benchmarks. We will be using the &lt;a href="https://k6.io/"&gt;k6&lt;/a&gt; load testing library for this demo.&lt;/p&gt;

&lt;p&gt;Let's benchmark the well-known and widely used offset pagination first. During each test scenario, we try to fetch a page with 10 documents, from different parts of our dataset. We will start with offset 0 and go all the way to an offset of 900k in increments of 100k. The benchmark is written in a way, that it makes only one request at a time to keep it as accurate as possible. We will also run the same benchmark ten times and measure average response times to ensure statistical significance. We'll be using k6's HTTP client to make requests to Appwrite's REST API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// script_offset.sh&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;k6/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Before running, make sure to run setup.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;summaryTimeUnit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ms&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;summaryTrendStats&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;avg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;config.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/database/collections/posts/documents?offset=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__ENV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OFFSET&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;limit=10`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-Appwrite-Project&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;projectId&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the benchmark with different offset configurations and store output in CSV files, I created a simple bash script. This script executes k6 ten times, with a different offset configuration each time. The output will be provided as console output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# benchmark_offset.sh&lt;/span&gt;

k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;OFFSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0 run script.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;OFFSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000 run script.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;OFFSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;200000 run script.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;OFFSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;300000 run script.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;OFFSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;400000 run script.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;OFFSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;500000 run script.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;OFFSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;600000 run script.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;OFFSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;700000 run script.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;OFFSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;800000 run script.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;OFFSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;900000 run script.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within a minute, all benchmarks have finished and provided me with the average response time for each offset configuration. The results were as expected but not satisfying at all.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Offset pagination (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0% offset&lt;/td&gt;
&lt;td&gt;3.73&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10% offset&lt;/td&gt;
&lt;td&gt;52.39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20% offset&lt;/td&gt;
&lt;td&gt;96.83&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30% offset&lt;/td&gt;
&lt;td&gt;144.13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40% offset&lt;/td&gt;
&lt;td&gt;216.06&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;50% offset&lt;/td&gt;
&lt;td&gt;257.71&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;60% offset&lt;/td&gt;
&lt;td&gt;313.06&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;70% offset&lt;/td&gt;
&lt;td&gt;371.03&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;80% offset&lt;/td&gt;
&lt;td&gt;424.63&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;90% offset&lt;/td&gt;
&lt;td&gt;482.71&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oOni826H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgna0wy96yjh8bk30dng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oOni826H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgna0wy96yjh8bk30dng.png" alt="Graph with offset pagination" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see, offset 0 was pretty fast, responding in less than 4ms. Our first jump was to offset 100k, and the change was drastic, increasing response times to 52ms. With each increase in the offset, the duration went up, resulting in almost 500ms to get ten documents after an offset of 900k documents. That is crazy!&lt;/p&gt;

&lt;p&gt;Now let's update our script to use cursor pagination. We will update our script to use a cursor instead of offset and update our bash script to provide a cursor (document ID) instead of an offset number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// script_cursor.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;k6/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Before running, make sure to run setup.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;summaryTimeUnit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ms&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;summaryTrendStats&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;avg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;config.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/database/collections/posts/documents?cursor=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__ENV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CURSOR&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;cursorDirection=after&amp;amp;limit=10`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-Appwrite-Project&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;projectId&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# benchmark_cursor.sh&lt;/span&gt;

k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;CURSOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id1 run script_cursor.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;CURSOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id100000 run script_cursor.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;CURSOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id200000 run script_cursor.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;CURSOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id300000 run script_cursor.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;CURSOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id400000 run script_cursor.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;CURSOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id500000 run script_cursor.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;CURSOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id600000 run script_cursor.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;CURSOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id700000 run script_cursor.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;CURSOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id800000 run script_cursor.js
k6 &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;CURSOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;id900000 run script_cursor.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the script, we could already tell that there was a performance boost as there was a noticeable differences in response times. We've put the results into a table to compare these two pagination methods side-by-side.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Offset pagination (ms)&lt;/th&gt;
&lt;th&gt;Cursor pagination (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0% offset&lt;/td&gt;
&lt;td&gt;3.73&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;6.27&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10% offset&lt;/td&gt;
&lt;td&gt;52.39&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;4.07&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20% offset&lt;/td&gt;
&lt;td&gt;96.83&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;5.15&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30% offset&lt;/td&gt;
&lt;td&gt;144.13&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;5.29&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40% offset&lt;/td&gt;
&lt;td&gt;216.06&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;6.65&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;50% offset&lt;/td&gt;
&lt;td&gt;257.71&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;7.26&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;60% offset&lt;/td&gt;
&lt;td&gt;313.06&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;4.61&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;70% offset&lt;/td&gt;
&lt;td&gt;371.03&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;6.00&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;80% offset&lt;/td&gt;
&lt;td&gt;424.63&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;5.60&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;90% offset&lt;/td&gt;
&lt;td&gt;482.71&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;5.05&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SgqStzod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14q2d330ofvri6ph5sod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgqStzod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14q2d330ofvri6ph5sod.png" alt="Graph with offset and cursor pagination" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow! Cursor pagination rocks! The graph shows that cursor pagination does not care about offset size, and every query is as performant as the first or last one. Can you imagine how much harm can be done by loading the last page of a huge list repeatedly? 😬&lt;/p&gt;

&lt;p&gt;If you are interested in running tests on your own machine, you can find the complete source code as &lt;a href="https://github.com/Meldiron/pagination-benchmark"&gt;GitHub repository&lt;/a&gt;. The repository includes &lt;code&gt;README.md&lt;/code&gt; explaining the whole process of installation and running scripts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  👨‍🎓 Summary
&lt;/h2&gt;

&lt;p&gt;Offset pagination offers a well-known pagination method where you can see page numbers and click through them. This intuitive method comes with a bunch of downsides, such as terrible performance with high offsets and a chance of data duplication and missing data.&lt;/p&gt;

&lt;p&gt;Cursor pagination solves all of these problems and brings a reliable pagination system that is fast and can handle real-time (often changing) data. The downside of cursor pagination is not showing page numbers, its complexity to implement, and a new set of challenges to overcome, such as missing cursor ID.&lt;/p&gt;

&lt;p&gt;Let's now get back to our original question, why does GitHub use cursor pagination, but Amazon decided to go with offset pagination? Performance is not always the key... User experience is much more valuable than how many servers your business has to pay for. &lt;/p&gt;

&lt;p&gt;I believe Amazon decided to go with offset because it improves UX, but that is a topic for another research. We can already notice that if we visit &lt;code&gt;amazon.com&lt;/code&gt; and search for a &lt;code&gt;pen&lt;/code&gt;, it says there are &lt;em&gt;exactly&lt;/em&gt; &lt;code&gt;10 000&lt;/code&gt; results, but you can only visit the first seven pages (350 results). &lt;/p&gt;

&lt;p&gt;First, there are way more than just 10k results, but Amazon limits it. Secondly, you can visit the first seven pages anyway. If you try to visit page 8, it shows a 404 error. As we can see, Amazon is aware of offset pagination's performance but still decided to keep it because their user-base prefers seeing page numbers. They had to include some limits, but who goes to page 100 of search results anyway. ? 🤷&lt;/p&gt;

&lt;p&gt;Do you know what is better than reading about pagination? Trying it out! I would encourage you to try both methods because it's best to get first-hand experience. Setting up Appwrite takes less than a few minutes, and you can start playing with both pagination methods.  If you have any questions, you can also reach us on &lt;a href="https://appwrite.io/discord"&gt;our Discord server&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  🔗 Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://uxdesign.cc/why-facebook-says-cursor-pagination-is-the-greatest-d6b98d86b6c0"&gt;Is offset pagination dead? Why cursor pagination is taking over&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/55744926/offset-pagination-vs-cursor-pagination"&gt;Offset pagination vs Cursor pagination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/18314687/how-to-implement-cursors-for-pagination-in-an-api"&gt;How to implement cursors for pagination in an api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/swlh/how-to-implement-cursor-pagination-like-a-pro-513140b65f32"&gt;How to Implement Cursor Pagination Like a Pro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>database</category>
      <category>tutorial</category>
      <category>news</category>
      <category>performance</category>
    </item>
    <item>
      <title>What is your best tip for working remotely as an software engineer?</title>
      <author>Emmett Naughton</author>
      <pubDate>Thu, 06 Jan 2022 17:09:05 +0000</pubDate>
      <link>https://dev.to/enaughton/what-is-your-best-tip-for-working-remotely-as-an-software-engineer-4o23</link>
      <guid>https://dev.to/enaughton/what-is-your-best-tip-for-working-remotely-as-an-software-engineer-4o23</guid>
      <description>&lt;p&gt;I am starting my first fully remote full time job on Monday. What is your best tip?&lt;/p&gt;

&lt;p&gt;Tweet is down below &lt;br&gt;
Nice!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Nh3CMdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1296425733020176385/tcO9mjan_normal.jpg" alt="emmett naughton profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        emmett naughton
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @emmettnaughton
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/darrenbuckner"&gt;@darrenbuckner&lt;/a&gt; What’s your biggest tip for working remotely as an IC? I start remote on Monday.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:36 PM - 06 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1479129647296172040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1479129647296172040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1479129647296172040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>discuss</category>
      <category>workstations</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Important PostgreSQL Concepts - 16 psql Command-line Utilities You Don't Want To Miss And A Lot More</title>
      <author>Audarya</author>
      <pubDate>Thu, 06 Jan 2022 16:46:26 +0000</pubDate>
      <link>https://dev.to/audarya07/important-postgresql-concepts-16-psql-command-line-utilities-you-dont-want-to-miss-and-a-lot-more-4c4a</link>
      <guid>https://dev.to/audarya07/important-postgresql-concepts-16-psql-command-line-utilities-you-dont-want-to-miss-and-a-lot-more-4c4a</guid>
      <description>&lt;p&gt;PostgreSQL is one of the most advanced database in the open source relational database market.According to db-engines, it is the fourth most used database at the time of writing.&lt;br&gt;&lt;br&gt;
This blog is more of a cheat sheet to quickly know about PostgreSQL and get started with it.&lt;br&gt;&lt;br&gt;
So...lets get started !! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-postgres"&gt;
  &lt;/a&gt;
  Features of Postgres
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It is an object relational database.
&lt;/li&gt;
&lt;li&gt;It handles concurrency better than MySQL.
&lt;/li&gt;
&lt;li&gt;It implements Multiversion Concurrency Control (MVCC) without read locks.
&lt;/li&gt;
&lt;li&gt;It protects data integrity at transaction level.
&lt;/li&gt;
&lt;li&gt;Less vulnerable to data corruption.
&lt;/li&gt;
&lt;li&gt;Supports parallel query plan that can use multiple CPU/cores.
&lt;/li&gt;
&lt;li&gt;It can create partial indexes.
&lt;/li&gt;
&lt;li&gt;It can create indexes in non-blocking way.
&lt;/li&gt;
&lt;li&gt;Allows us to add our own datatypes, operators and index types.
&lt;/li&gt;
&lt;li&gt;Capable of writing large amounts of data more efficiently.
&lt;/li&gt;
&lt;li&gt;It supports table inheritance.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-postgres"&gt;
  &lt;/a&gt;
  Disadvantages of Postgres
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Slow for read-heavy operations compared to MySQL.
&lt;/li&gt;
&lt;li&gt;It forks a new process for each new client connection which allocates a non-trivial amount of memory (about 10 MB).
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: If you found some words fancy in the above list, I would suggest you to quickly google about it to get an idea. This tip applies to everything in this blog. You can mention these points in your interviews as well 😎  &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#server-and-database-objects-provided-by-postgresql"&gt;
  &lt;/a&gt;
  Server and database objects provided by PostgreSQL
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Server service
&lt;/li&gt;
&lt;li&gt;Databases -&amp;gt; container of objects like tables, views, functions, indexes.
&lt;/li&gt;
&lt;li&gt;Tables -&amp;gt; Stores actual data. Belongs to a database.
&lt;/li&gt;
&lt;li&gt;Schema -&amp;gt; Logical container of table and other objects.
&lt;/li&gt;
&lt;li&gt;Tablespaces - place where data is stored physically
Provides 2 default tablespaces:

&lt;ul&gt;
&lt;li&gt;pg_default -&amp;gt; for storing user data
&lt;/li&gt;
&lt;li&gt;pg_global -&amp;gt; for storing system data
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Views -&amp;gt; views are named queries stored in the database.
&lt;/li&gt;
&lt;li&gt;Functions
&lt;/li&gt;
&lt;li&gt;Operators
&lt;/li&gt;
&lt;li&gt;Casts -&amp;gt; to convert one datatype to another.
&lt;/li&gt;
&lt;li&gt;Sequence -&amp;gt; used to manage auto-increment columns in a table.
&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#evaluation-order-in-queries"&gt;
  &lt;/a&gt;
  Evaluation order in Queries
&lt;/h3&gt;

&lt;p&gt;The following sequence shows the decreasing priority(from left to right) given to different clauses in a complex SQL Query.  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;FROM --&amp;gt; WHERE --&amp;gt; SELECT --&amp;gt; ORDER BY&lt;/code&gt;  &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#most-used-clauses"&gt;
  &lt;/a&gt;
  Most Used Clauses
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;IN&lt;/code&gt;             - Returns true if a value matches any value in the list
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BETWEEN&lt;/code&gt;    - Return true if a value is between a range of values ex. BETWEEN 3 AND 5
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;LIKE&lt;/code&gt;       - Return true if a value matches a pattern ex. LIKE 'Aud%' means match string starting with 'Aud'.
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ILIKE&lt;/code&gt;      - Same as LIKE but case insensitive pattern matching. Notation (~~*)
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;OFFSET&lt;/code&gt;         - Skip a number of rows before returning the resultset
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;LIMIT&lt;/code&gt;      - To constrain the number of rows returned by a query (not a SQl standard)
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FETCH&lt;/code&gt;      - Same as LIMIT and it a SQL standard. Syntax -&amp;gt; &lt;code&gt;FETCH {FIRST|NEXT} row_cnt {ROW|ROWS} ONLY&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;LEFT(s, n)&lt;/code&gt;     - Extracts first n characters from s
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ALL&lt;/code&gt;            - We can use the word ALL to allow &amp;gt;= or &amp;gt; or &amp;lt; or &amp;lt;= to act over a list ex. on result of select subquery
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ORDER BY&lt;/code&gt;   - Sort thr column in ASC or DESC order
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GROUP BY&lt;/code&gt;   - Functions such as SUM and COUNT are applied to groups of items sharing values.ex."GROUP BY continent" ,the result is only one row for each different value of continent. All the other columns must be "aggregated" by one of SUM, COUNT etc.
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;WHERE&lt;/code&gt;      - filters the rows before aggregation operation
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;HAVING&lt;/code&gt;     - filters after the agregation
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#some-important-psql-commands"&gt;
  &lt;/a&gt;
  Some important psql commands
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;sudo -u &amp;lt;role name&amp;gt; psql&lt;/code&gt;  -&amp;gt; switched to  and starts psql command prompt&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\c dbname username&lt;/code&gt;        -&amp;gt; switch connection to new database (dbname) under a user specified by &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\l&lt;/code&gt;                    -&amp;gt; list all available databases&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\dt&lt;/code&gt;               -&amp;gt; list all tables in current database&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\d table_name&lt;/code&gt;      -&amp;gt; describe a table&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\dn&lt;/code&gt;               -&amp;gt; list all Schemas of current database&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\df&lt;/code&gt;               -&amp;gt; list all functions of current database&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\dv&lt;/code&gt;               -&amp;gt; list all Views of current database&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\du&lt;/code&gt;               -&amp;gt; list all users and their assigned roles
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;psql -h localhost -U username db_name;&lt;/code&gt; -&amp;gt; switch user and database  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\s&lt;/code&gt;               -&amp;gt; to display command history&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\g&lt;/code&gt;               -&amp;gt; to execute previous command&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\i filename&lt;/code&gt;      -&amp;gt; to execute psql commands from a file &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\timing&lt;/code&gt;          -&amp;gt; to turn ON/OFF query execution time:w&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\e&lt;/code&gt;               -&amp;gt; to write command in default editor(vim/nano)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\q&lt;/code&gt;               -&amp;gt; to quit psql&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#common-queries"&gt;
  &lt;/a&gt;
  Common Queries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create new user   -&amp;gt; &lt;code&gt;CREATE USER &amp;lt;username&amp;gt; WITH PASSWORD 'password';&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Drop user     -&amp;gt; &lt;code&gt;DROP USER IF EXISTS &amp;lt;username&amp;gt;;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create new database   -&amp;gt; &lt;code&gt;CREATE DATABASE &amp;lt;db_name&amp;gt;;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Grant privileges  -&amp;gt; &lt;code&gt;GRANT ALL|SELECT|UPDATE|DELETE PRIVILEGES ON DATABASE &amp;lt;db_name&amp;gt; TO &amp;lt;username&amp;gt;;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Drop database     -&amp;gt; &lt;code&gt;DROP DATABASE IF EXISTS &amp;lt;db_name&amp;gt;;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create schema     -&amp;gt; &lt;code&gt;CREATE SCHEMA &amp;lt;schema_name&amp;gt; [CASCADE];&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create table      -&amp;gt; &lt;code&gt;CREATE TABLE &amp;lt;tb_name&amp;gt;;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Insert data       -&amp;gt; &lt;code&gt;INSERT INTO tb_name(col1, col2,...) VALUES (val1, val2,...);&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Update Column     -&amp;gt; &lt;code&gt;UPDATE &amp;lt;tb_name&amp;gt; SET col_name = value WHERE &amp;lt;condition&amp;gt;;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Delete row        -&amp;gt; &lt;code&gt;DELETE FROM &amp;lt;tb_name&amp;gt; WHERE &amp;lt;condition&amp;gt;;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-delete-table-gt-raw-drop-table-if-exists-lttbnamegt-endraw-"&gt;
  &lt;/a&gt;
  - Delete table      -&amp;gt; &lt;code&gt;DROP TABLE IF EXISTS &amp;lt;tb_name&amp;gt;;&lt;/code&gt;  
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#resources-and-references"&gt;
  &lt;/a&gt;
  Resources And References
&lt;/h3&gt;

&lt;p&gt;This is one of the most awesome resource I have found to know anything about using PostgreSQL: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.postgresqltutorial.com/"&gt;https://www.postgresqltutorial.com/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;I hope you found this cheat sheet helpful and keep it handy for a quick reference. If you want me to add more information in this blog or need any help please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;Let's connect on &lt;a href="https://www.linkedin.com/in/audarya-uttarwar/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>database</category>
      <category>cheatsheet</category>
    </item>
    <item>
      <title>The Five Minute Journal with Dendron and Visual Studio Code</title>
      <author>Derek Ardolf</author>
      <pubDate>Thu, 06 Jan 2022 16:39:05 +0000</pubDate>
      <link>https://dev.to/dendron/the-five-minute-journal-with-dendron-and-visual-studio-code-6nc</link>
      <guid>https://dev.to/dendron/the-five-minute-journal-with-dendron-and-visual-studio-code-6nc</guid>
      <description>&lt;p&gt;It's 2022 and you're looking to start off the year right by keeping a journal. Where to start? &lt;em&gt;The Five Minute Journal&lt;/em&gt; (5MJ)&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; is a simple but effective way to get started with note taking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-five-minute-journal"&gt;
  &lt;/a&gt;
  The Five Minute Journal
&lt;/h2&gt;

&lt;p&gt;Tim Ferriss,&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt; world-famous entrepreneur and author of books such as &lt;em&gt;Tribe of Mentors&lt;/em&gt;,&lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt; uploaded a video in 2020 all about his approach to note taking with physical notebooks.&lt;sup id="fnref4"&gt;&lt;a href="#fn4"&gt;4&lt;/a&gt;&lt;/sup&gt; 5MJ helps him express gratitude, make days better, and focus on mindfulness.&lt;/p&gt;

&lt;p&gt;In this post, we'll be going over how to create your own 5MJ using &lt;a href="https://www.dendron.so/"&gt;Dendron&lt;/a&gt;. Dendron is a structured note taking tool for developers that is open source, local first, and integrated with Visual Studio Code (VS Code).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;This post expects that you've gone through the &lt;a href="https://wiki.dendron.so/notes/678c77d9-ef2c-4537-97b5-64556d6337f1/"&gt;Dendron Getting Started Guide&lt;/a&gt; and have a workspace opened to work with. If you're new to Dendron, make sure to take a look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concepts"&gt;
  &lt;/a&gt;
  Concepts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#daily-journal-notes"&gt;
  &lt;/a&gt;
  Daily journal notes
&lt;/h3&gt;

&lt;p&gt;Daily journal notes are special notes meant to easily track your everyday life. Dendron also has a built-in &lt;a href="https://wiki.dendron.so/notes/25287595-96bb-410b-ab46-eb9a26b0e259/#calendar-view"&gt;Calendar View&lt;/a&gt; that helps you visually navigate and create new journal entries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#templates"&gt;
  &lt;/a&gt;
  Templates
&lt;/h3&gt;

&lt;p&gt;Templates are notes with pre-outlined content meant for reuse. Templates can either be inserted into an open note with the &lt;code&gt;Dendron: Insert Note&lt;/code&gt; command, or automatically applied at note creation with &lt;a href="https://wiki.dendron.so/notes/c5e5adde-5459-409b-b34d-a0d75cbb1052/"&gt;Schemas&lt;/a&gt;. These are meant to reduce friction in the creation of new content, providing standardized outlines to your notes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schemas"&gt;
  &lt;/a&gt;
  Schemas
&lt;/h3&gt;

&lt;p&gt;As you end up creating more notes, it can be hard to keep track of them all. This is why Dendron has &lt;strong&gt;schemas&lt;/strong&gt; to help you manage your notes at scale. Think of schemas as an &lt;strong&gt;optional type system&lt;/strong&gt; for your notes. They describe the hierarchy of your data and are themselves, represented as a hierarchy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-5mj-template"&gt;
  &lt;/a&gt;
  Create 5MJ template
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open &lt;a href="https://wiki.dendron.so/notes/a7c3a810-28c8-4b47-96a6-8156b1524af3.html"&gt;lookup&lt;/a&gt; (&lt;code&gt;Ctrl+L&lt;/code&gt; / &lt;code&gt;Cmd+L&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type &lt;code&gt;templates.daily-5mj&lt;/code&gt; in the text prompt and hit enter to create the template&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy and paste the following markdown:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&amp;lt;!--
Based on the journaling method created by Intelligent Change:
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Intelligent Change: Our Story&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://www.intelligentchange.com/pages/our-story&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;The Five Minute Journal&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://www.intelligentchange.com/products/the-five-minute-journal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
--&amp;gt;

&lt;span class="gu"&gt;## Morning&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Fill out this section after waking up --&amp;gt;&lt;/span&gt;

&lt;span class="gu"&gt;### Gratitude&lt;/span&gt;

I am grateful for:
&lt;span class="p"&gt;
1.&lt;/span&gt;
&lt;span class="p"&gt;2.&lt;/span&gt;
&lt;span class="p"&gt;3.&lt;/span&gt;

&lt;span class="gu"&gt;### What would make today great?&lt;/span&gt;
&lt;span class="p"&gt;
1.&lt;/span&gt;
&lt;span class="p"&gt;2.&lt;/span&gt;
&lt;span class="p"&gt;3.&lt;/span&gt;

&lt;span class="gu"&gt;### Daily affirmations&lt;/span&gt;

I am...

&lt;span class="gu"&gt;## Evening&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Fill out this section before going to sleep, reflecting on your day --&amp;gt;&lt;/span&gt;

&lt;span class="gu"&gt;### Amazing things that happened today&lt;/span&gt;
&lt;span class="p"&gt;
1.&lt;/span&gt;
&lt;span class="p"&gt;2.&lt;/span&gt;
&lt;span class="p"&gt;3.&lt;/span&gt;

&lt;span class="gu"&gt;### How could I have made today even better?&lt;/span&gt;

I could have made today better by
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Save the file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You now have a new template with the 5MJ outline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-5mj-schema"&gt;
  &lt;/a&gt;
  Create 5MJ schema
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Templates can be used with or without schemas. Run &lt;a href="https://wiki.dendron.so/notes/eea2b078-1acc-4071-a14e-18299fc28f47.html#insert-note"&gt;Insert Note&lt;/a&gt; to insert a template into a currently opened note.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Open &lt;a href="https://wiki.dendron.so/notes/60c03500-98e4-4a02-a31e-2702b4068a88.html"&gt;schema lookup&lt;/a&gt; (&lt;code&gt;Ctrl+Shift+L&lt;/code&gt; / &lt;code&gt;Cmd+Shift+L&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;5mj&lt;/code&gt; in the text prompt and hit enter to create the schema, which should look like the following:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
&lt;span class="na"&gt;schemas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;5mj&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;5mj&lt;/span&gt;
    &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;root&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#update-5mj-schema-contents"&gt;
  &lt;/a&gt;
  Update 5MJ schema contents
&lt;/h3&gt;

&lt;p&gt;We are going to use &lt;a href="https://wiki.dendron.so/notes/c5e5adde-5459-409b-b34d-a0d75cbb1052.html#inline-schema-anatomy"&gt;Inline Schema&lt;/a&gt;, a simpler schema format that takes less lines and uses indentation for visual understanding.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Replace the content of &lt;code&gt;5mj.schema.yml&lt;/code&gt; with the following:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;schemas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;# Daily is the top most schema since its parent is 'root' it must have an identifier&lt;/span&gt;
&lt;span class="c1"&gt;# this identifier 'daily' will be used when using 'Lookup (schema)' command.&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;daily&lt;/span&gt;
  &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;root&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;daily&lt;/span&gt;
  &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
  &lt;span class="c1"&gt;# Children of the top most schema do not need to contain identifier and just &lt;/span&gt;
  &lt;span class="c1"&gt;# require a 'pattern' to be set to match the hierarchy of notes.&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;journal&lt;/span&gt;
      &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;# This pattern matches the YYYY (year) child hierarchy&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[0-2][0-9][0-9][0-9]"&lt;/span&gt;
          &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="c1"&gt;# This pattern matches the MM (month) child hierarchy&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[0-1][0-9]"&lt;/span&gt;
              &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="c1"&gt;# This pattern matches the DD (day) child hierarchy&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[0-3][0-9]"&lt;/span&gt;
                  &lt;span class="c1"&gt;# As with regular schema we can set the template to be used with&lt;/span&gt;
                  &lt;span class="c1"&gt;# the match of our notes. Below is an example usage of shorthand template&lt;/span&gt;
                  &lt;span class="c1"&gt;# definition (which defaults to type: note). &lt;/span&gt;
                  &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Five Minute Journal&lt;/span&gt;
                  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;templates.daily-5mj&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;pattern&lt;/code&gt; attribute is using a &lt;a href="https://wiki.dendron.so/notes/c6fd6bc4-7f75-4cbb-8f34-f7b99bfe2d50.html#glob-pattern"&gt;Glob Pattern&lt;/a&gt;, which is an expression used to match ranges and combinations of characters.&lt;/p&gt;

&lt;p&gt;To match with the daily journal structure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;daily.journal.2021.12.31&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Patterns:

&lt;ul&gt;
&lt;li&gt;Year: &lt;code&gt;[0-2][0-9][0-9][0-9]&lt;/code&gt; means match the range &lt;code&gt;0000 - 2999&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Month: &lt;code&gt;[0-1][0-9]&lt;/code&gt; means match the range &lt;code&gt;00 - 19&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Day: &lt;code&gt;[0-3][0-9]&lt;/code&gt; means match the range &lt;code&gt;00 - 39&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means all new daily journal notes are within pattern ranges.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-new-daily-journal"&gt;
  &lt;/a&gt;
  Create a new daily journal
&lt;/h3&gt;

&lt;p&gt;Creating a daily journal entry results in the &lt;code&gt;templates.daily-5mj&lt;/code&gt; template automatically inserted.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;Create Daily Journal Note&lt;/code&gt; (&lt;code&gt;Ctrl+Shift+I&lt;/code&gt; / &lt;code&gt;Cmd+Shift+I&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should see a new daily journal note with the 5MJ template inserted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3nVoVLwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://org-dendron-public-assets.s3.amazonaws.com/images/5mj-new-daily-journal.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3nVoVLwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://org-dendron-public-assets.s3.amazonaws.com/images/5mj-new-daily-journal.gif" alt="Create 5MJ Daily Journal from Schema and Template" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  Congratulations!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key takeaways
&lt;/h3&gt;

&lt;p&gt;After doing this, you've now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Created a 5MJ template&lt;/li&gt;
&lt;li&gt;Created a 5MJ schema&lt;/li&gt;
&lt;li&gt;Created your first daily journal with the 5MJ template applied via schema&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h3&gt;

&lt;p&gt;Now what? You have daily journals using templates, but Dendron can do much more. It's an open source, local-first knowledge management solution that scales as you do.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn to &lt;a href="https://wiki.dendron.so/notes/gHERCRoEXzASfXorBgZN0.html"&gt;swiftly create schema by targeting existing note hierarchies&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Learn to level-up your daily life with &lt;a href="https://wiki.dendron.so/notes/e65dfe53-41f7-4b16-b870-dadec1775497.html"&gt;the bullet journaling workflow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Learn to explore your schema visually using the &lt;a href="https://wiki.dendron.so/notes/587e6d62-3c5b-49b0-aedc-02f62f0448e6.html#schema-graph"&gt;schema graph&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Check out an end-to-end workstyle, managing 20k notes, using schemas and daily journals from &lt;a href="https://wiki.dendron.so/notes/fzHazEFWTpUVexmv/"&gt;A Day in Dendron&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.dendron.so/notes/683740e3-70ce-4a47-a1f4-1f140e80b558/"&gt;Dendron FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.dendron.so/notes/c6fd6bc4-7f75-4cbb-8f34-f7b99bfe2d50/"&gt;Dendron Concepts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Enjoy the blog? &lt;a href="https://link.dendron.so/newsletter"&gt;Subscribe to our newsletter!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Newsletters not your thing? You can also follow us elsewhere on the interwebs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Join &lt;a href="https://link.dendron.so/discord"&gt;Dendron on Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Register for &lt;a href="https://link.dendron.so/luma"&gt;Dendron Events on Luma&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Follow &lt;a href="https://link.dendron.so/twitter"&gt;Dendron on Twitter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Checkout &lt;a href="https://link.dendron.so/github"&gt;Dendron on GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://www.intelligentchange.com/pages/customers#journal"&gt;&lt;em&gt;The Five Minute Journal&lt;/em&gt;&lt;/a&gt;, by &lt;a href="https://www.intelligentchange.com/pages/our-story"&gt;Intelligent Change&lt;/a&gt; &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;It's hard to use one sentence to describe all the things Tim Ferris does. He has one of the most popular podcasts in the world, and has authored several books from all of his notes and interview content. He seems shorter in person. Anyway, learn more &lt;a href="https://tim.blog/"&gt;at his website&lt;/a&gt;! &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;For a list of books, see &lt;a href="https://tim.blog/tim-ferriss-books"&gt;Books by Tim Ferriss&lt;/a&gt;. &lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn4"&gt;
&lt;p&gt;The video: &lt;a href="https://youtu.be/UFdR8w_R1HA"&gt;How I Journal and Take Notes: Brainstorming + Focusing + Reducing Anxiety&lt;/a&gt;. For a companion guide to the video, take a look at &lt;em&gt;&lt;a href="https://www.intelligentchange.com/blogs/read/how-tim-ferriss-uses-the-five-minute-journal-6-tips-for-new-journalers"&gt;How Tim Ferriss Uses The Five Minute Journal: 6 Tips For New Journalers&lt;/a&gt;.&lt;/em&gt; &lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>vscode</category>
      <category>gratitude</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Get Better At Technical Writing: The Beauty of Consistency</title>
      <author>MacBobby Chibuzor</author>
      <pubDate>Thu, 06 Jan 2022 16:37:37 +0000</pubDate>
      <link>https://dev.to/theghostmac/get-better-at-technical-writing-the-beauty-of-consistency-194a</link>
      <guid>https://dev.to/theghostmac/get-better-at-technical-writing-the-beauty-of-consistency-194a</guid>
      <description>&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h3&gt;

&lt;p&gt;This is not a technical article, but a test article. If it proves helpful to you and you wish to see more like it, please drop a like and comment. I might be motivated to start a weekly newsletter on Getting Better At Technical Writing, or something similar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Consistency is the absence of contradiction. Whenever you conclude a write-up, it is imperative to go proofread it while checking for inconsistencies. In this article, I will give you tips on how to do this, based on the experience I've gained over years of commercial writing.&lt;/p&gt;

&lt;p&gt;In the next section, I take you through Grammar Consistency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grammar-consistency"&gt;
  &lt;/a&gt;
  Grammar Consistency
&lt;/h2&gt;

&lt;p&gt;Before starting a write-up, you should have in mind who your audiences are or what type of English you wish to express in.&lt;br&gt;
If you're writing for an English audience, you should use “recognise” and not “recognize.” Also, make sure to not mix British and American English in your write-up. Using “recognize” in Section 1 and “itemise” in Section 2 is an example.&lt;/p&gt;

&lt;p&gt;If you write with an MS Office product or a mobile phone with auto-prediction switched on, you should be extra careful with this mistake. Some softwares use your location - or theirs - to predict spellings.&lt;/p&gt;

&lt;p&gt;Sticking to a particular tone throughout your write-up is also important. When writing about personal experiences or opinionated contents, use “I.” When writing tutorial guides, use “You,” or “We” if you want the reader to feel held and guided. Technical documentations, manuals and some technical articles must be written without these pronouns.&lt;/p&gt;

&lt;p&gt;In the next section, I take you through Paragraph Consistency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paragraph-consistency"&gt;
  &lt;/a&gt;
  Paragraph Consistency
&lt;/h2&gt;

&lt;p&gt;It is no new information that each paragraph in your write-up must have one tone. Its unprofessional to raise two points in one paragraph and another point in a third paragraph.&lt;/p&gt;

&lt;p&gt;A proper way I recently learnt to structure paragraphs is provided below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start with a sentence that introduces everything your paragraph is going to say.&lt;/li&gt;
&lt;li&gt;Keep sentences short, and free of unnecessary contents.&lt;/li&gt;
&lt;li&gt;Having 2 - 3  sentences or paragraph is great, although some paragraphs might be occasionally longer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
A serious Frontend developer must have ReactJS in their repertoire. Knowing HTML5, CSS3, and JavaScript is not enough to land a job as a Frontend developer. This is because virtually all talent recruiters are searching for developers who know and use the ReactJS framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#style-consistency"&gt;
  &lt;/a&gt;
  Style Consistency
&lt;/h2&gt;

&lt;p&gt;I ended every section of this article with an introduction to the next section, except for the previous one. This is purposely to explain style inconsistency to you. Another inconsistency is not using Consistency as the prefix in a consecutively related section, like I did in the next section.&lt;/p&gt;

&lt;p&gt;Whichever writing style you adopt, make sure to stick to it.&lt;/p&gt;

&lt;p&gt;If you connect words with an hyphen instead of indentation, stock to it. Don't say “hard-earned” in Section 1 and “easy going” in Section 3.&lt;/p&gt;

&lt;p&gt;If you bolden user interface elements (e.g. Click Save, then Exit), stick to it throughout.&lt;/p&gt;

&lt;p&gt;If you capitalise all the words in a heading, you should repeat that for every other heading, especially if they are related. That said, you obviously know very short words are not capitalized.&lt;/p&gt;

&lt;p&gt;If you use a comma, a period, or nothing at all at the end of an itemization, stick to this pattern throughout your write-up. For example, it's inconsistent having these two formats in one article:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9DdggAc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641486615678/ev7zPsdvU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9DdggAc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641486615678/ev7zPsdvU.png" alt="Screenshot_20220106-153527.png" width="720" height="304"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--214opscz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641486795275/y5h0SQduA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--214opscz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641486795275/y5h0SQduA.png" alt="Screenshot_20220106-153556.png" width="720" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next section, I take you through Format Consistency.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consistency-in-formatting"&gt;
  &lt;/a&gt;
  Consistency in Formatting
&lt;/h1&gt;

&lt;p&gt;You must have observed that the heading above is a bit bigger than the others. This is purposely to explain to you that Markdown inconsistency is ugly. If you're familiar with Markdown - of course, every technical writer knows Markdown like the back of their hands - then you'd know I used an H1 tag here, and an H2 tag in the others.&lt;/p&gt;

&lt;p&gt;Preserve whichever formatting pattern you adopt throughout your write-up.&lt;br&gt;
If you use numbers for itemizing, don't switch to bullet points.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These are not everything you must know about Consistency in writing, but I am pretty sure you will be able to detect inconsistency in any write-up. These aren't rules, also, but best practices; we are all striving to get better.&lt;/p&gt;

&lt;p&gt;You're getting better when your article ships on the first drafting, without any edits. Don't flatter yourself, this is subjective. If your message is technically perfect, it is sometimes a fair trade off for grammar and structure.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Is it too much to ask for both?”                                      - Tony Stark&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#let-me-know-what-you-think-about-this-article-as-i-am-skeptical-of-writing-more"&gt;
  &lt;/a&gt;
  Let me know what you think about this article, as I am skeptical of writing more.
&lt;/h2&gt;

</description>
      <category>techtalks</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>Flask Useful Extensions - DebugToolbar, Cache, Rate Limiter </title>
      <author>Sm0ke</author>
      <pubDate>Thu, 06 Jan 2022 16:12:45 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-useful-extensions-debugtoolbar-cache-rate-limiter-2c76</link>
      <guid>https://dev.to/sm0ke/flask-useful-extensions-debugtoolbar-cache-rate-limiter-2c76</guid>
      <description>&lt;p&gt;Hello coders!&lt;/p&gt;

&lt;p&gt;This article presents a short-list with &lt;a href="https://blog.appseed.us/flask-extensions-debug-toolbar-minify-limiter/"&gt;Flask Libraries and Extensions&lt;/a&gt; we can use to make our projects faster or stable. For newcomers, &lt;strong&gt;Flask&lt;/strong&gt; is a leading framework powered by Python that we can use to code simple sites, APIs, or complex eCommerce solutions. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;strong&gt;Flask-DebugToolbar&lt;/strong&gt; - useful in the development phase&lt;/li&gt;
&lt;li&gt;👉 &lt;strong&gt;Flask-Marshmallow&lt;/strong&gt; - for API development&lt;/li&gt;
&lt;li&gt;👉 &lt;strong&gt;Flask-Cache&lt;/strong&gt; - for blazing-fast websites&lt;/li&gt;
&lt;li&gt;👉 &lt;strong&gt;Flask-Minify&lt;/strong&gt; - HTML &amp;amp; assets compression&lt;/li&gt;
&lt;li&gt;👉 &lt;strong&gt;Flask-Limiter&lt;/strong&gt; - rate limiter for Flask&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#flaskdebugtoolbar"&gt;
  &lt;/a&gt;
  ✨ Flask-DebugToolbar
&lt;/h2&gt;

&lt;p&gt;This extension adds a toolbar overlay to Flask applications containing useful information for debugging. Once this module is installed we should be able to see in the browser things like HTTP headers, configuration, or even profiling information.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👉 Step #1 - Installation&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;flask-debugtoolbar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #2 - Usage&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_debugtoolbar&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DebugToolbarExtension&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# the toolbar is only enabled in debug mode:
&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# Inject the toolbar 
&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DebugToolbarExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The toolbar will automatically be injected into HTML responses when debug mode is on. In production, setting &lt;code&gt;app.debug = False&lt;/code&gt; will disable the toolbar.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sOeCtdaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62xsi80vhtngrwk7293i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sOeCtdaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62xsi80vhtngrwk7293i.gif" alt="Flask Debug Toolbar." width="636" height="600"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#flask-marshmallow"&gt;
  &lt;/a&gt;
  ✨ Flask Marshmallow
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Flask-Marshmallow&lt;/code&gt; is a thin integration layer for Flask (a Python web framework) and marshmallow (an object serialization/deserialization library) that optionally integrates with Flask-SQLAlchemy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👉 Step #1 - Installation&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;flask-marshmallow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #2 - Usage in Code&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_marshmallow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Marshmallow&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- NEW
&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Marshmallow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                      &lt;span class="c1"&gt;# &amp;lt;-- NEW  
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Define a model&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SqlAchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Define your output format with marshmallow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Fields to expose
&lt;/span&gt;        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;user_schema&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;users_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Define API nodes&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/users/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;users&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;all_users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;users_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/users/&amp;lt;id&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#flask-cache"&gt;
  &lt;/a&gt;
  ✨ Flask Cache
&lt;/h2&gt;

&lt;p&gt;This extension might help us to reduce the performance issues that sometimes occur in our projects and also speed up the response for static pages.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👉 Step #1 - Installation&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Flask-Cache
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #2 - Usage&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.cache&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Cache&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Check Configuring Flask-Cache section for more details
&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'CACHE_TYPE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'simple'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Cache views&lt;/strong&gt; (via a decorator)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#flask-minify"&gt;
  &lt;/a&gt;
  ✨ Flask Minify
&lt;/h2&gt;

&lt;p&gt;This extension provides a runtime compression of served pages and optionally to assets (JSS, CSS). This optimization might improve the SEO score of our projects and also the overall experience for our users.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👉 Step #1 - Installation&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Flask-Minify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #2 - Usage in code&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_minify&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Minify&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Minify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cssless&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The extension effect can be isolated to a single view using the &lt;code&gt;passive&lt;/code&gt; flag and decorators:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_minify&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Minify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;decorators&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;minify_decorators&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Minify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# &amp;lt;-- Passive mode enabled
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;minify_decorators&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cssless&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;example&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;h1&amp;gt;Example...&amp;lt;/h1&amp;gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#flask-limiter"&gt;
  &lt;/a&gt;
  ✨ Flask Limiter
&lt;/h2&gt;

&lt;p&gt;Flask-Limiter provides rate limiting features to Flask applications. Flask-Limiter can be configured to persist the rate limit state to many commonly used storage backends via the limits library.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👉 Step #1 - Installation&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Flask-Limiter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #2 - Usage in code&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_limiter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Limiter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_limiter.util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_remote_address&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;limiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Limiter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;key_func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_remote_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;default_limits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"200 per day"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"50 per hour"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/slow"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1 per day"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;":("&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/medium"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1/second"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;override_defaults&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;":|"&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/fast"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;":)"&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/ping"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ping&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"PONG"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources and support, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;👉 Download &lt;a href="https://appseed.us/apps/flask-apps"&gt;Flask Apps&lt;/a&gt; generated by &lt;code&gt;AppSeed&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;👉 Get &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; via email and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt; (1k+ community) &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>flask</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Getting started with Super Productivity</title>
      <author>Johannes Millan</author>
      <pubDate>Thu, 06 Jan 2022 15:51:42 +0000</pubDate>
      <link>https://dev.to/johannesjo/getting-started-with-super-productivity-2791</link>
      <guid>https://dev.to/johannesjo/getting-started-with-super-productivity-2791</guid>
      <description>&lt;p&gt;&lt;a href="https://super-productivity.com/"&gt;Super Productivity&lt;/a&gt; is an advanced open source todo list app with integrated &lt;a href="https://de.wikipedia.org/wiki/Timeboxing"&gt;Timeboxing&lt;/a&gt; and time tracking capabilities. While the app won't magically solve all your productivity, time management and procrastination issues, the combination of planning ahead and quickly re-planning whenever necessary, breaking tasks down into smaller bits and doing a bit of timeboxing can be a surprisingly powerful combination.&lt;/p&gt;

&lt;p&gt;The following article will introduce the basic features of the app. Since quickest way to do things in Super Productvity, is to use keyboard shortcuts, I will be focussing on using the most important ones in this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-your-tasks-and-break-them-down"&gt;
  &lt;/a&gt;
  Plan your tasks and break them down
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#adding-new-tasks"&gt;
  &lt;/a&gt;
  Adding new tasks
&lt;/h3&gt;

&lt;p&gt;First thing you want to do when starting the app is to create a task. When there are no tasks the app should greet you with an input box to do so. If you already created some you can use the "+" button in the top right or the keyboard shortcut &lt;code&gt;Shift+A&lt;/code&gt; to do so. You can close the add task overlay by pressing escape.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ic-29uV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/336ees415q3rjfc9oltu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ic-29uV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/336ees415q3rjfc9oltu.png" alt="Add task bar" width="697" height="95"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below the input where you enter the task title you can see a little info text which introduces the &lt;strong&gt;short syntax&lt;/strong&gt;. Using the short syntax you can quickly add and edit the time estimated and spent for a task (and also the project and tags assigned to it).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adding-estimates-at-task-creation"&gt;
  &lt;/a&gt;
  Adding estimates at task creation
&lt;/h4&gt;

&lt;p&gt;Giving time estimates to tasks (aka Timeboxing) is recommended as it can help to increase focus, avoid procrastination and reduce the time spent on a task. To create a new timeboxed task:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;Shift+A&lt;/code&gt; (requires the app window to be focused)&lt;/li&gt;
&lt;li&gt;Enter "&lt;code&gt;Getting to now Super Productivity 30m&lt;/code&gt;"&lt;/li&gt;
&lt;li&gt;Press the &lt;code&gt;Enter&lt;/code&gt; key to create the task&lt;/li&gt;
&lt;li&gt;Press the &lt;code&gt;Escape&lt;/code&gt; key to close the overlay&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#tracking-time"&gt;
  &lt;/a&gt;
  Tracking time
&lt;/h3&gt;

&lt;p&gt;To start tracking time you can either press the &lt;code&gt;y&lt;/code&gt; key while a task is focused or click on the little "play" button that appears once you hover it. To stop press &lt;code&gt;y&lt;/code&gt; again or press the "pause" button at the top right of the screen.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#productivity-tip-dont-beat-yourself-up-about-not-meeting-the-times-you-estimated-and-replan-instead"&gt;
  &lt;/a&gt;
  Productivity Tip: Don't beat yourself up about not meeting the times you estimated and re-plan instead!
&lt;/h4&gt;

&lt;p&gt;Timeboxing is meant to be a tool to help you and not intended to provide you with fixed deadlines to be stressed out about. &lt;strong&gt;Plans are always very likely &lt;em&gt;not&lt;/em&gt; to go &lt;em&gt;exactly&lt;/em&gt; as you intended&lt;/strong&gt; and that is fine! However, an exceeded time estimate might give you a good indication, when it is time to take step back and to consciously adjust your plans and maybe to tackle the problem at hand from another angle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#completing-tasks"&gt;
  &lt;/a&gt;
  Completing tasks
&lt;/h3&gt;

&lt;p&gt;Tasks can be marked as done by pressing &lt;code&gt;d&lt;/code&gt; or by clicking on the checkmark button that appears when hovering it. For the mobile app you swipe the task to the right.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editing-tasks"&gt;
  &lt;/a&gt;
  Editing tasks
&lt;/h3&gt;

&lt;p&gt;Once a task is focused (indicated by the colored border around them) you can quickly navigate to other tasks in the list by using the arrow keys. Pressing &lt;code&gt;Enter&lt;/code&gt; will allow you to edit the task title (and also using the short syntax here again). Press &lt;code&gt;Enter&lt;/code&gt; again to save the changes you made.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prioritize-tasks"&gt;
  &lt;/a&gt;
  Prioritize tasks
&lt;/h3&gt;

&lt;p&gt;In addition to using custom tags (e.g. "#A #B #C #important") the most efficient way to prioritize your tasks is by simply ordering them. You can do so by dragging them around using the drag handle to the left of the task title or by moving them via &lt;code&gt;Ctrl+Shift+ArrowUp&lt;/code&gt; and &lt;code&gt;Ctrl+Shift+ArrowDown&lt;/code&gt; to move them up and down.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#break-tasks-down-by-adding-subtasks"&gt;
  &lt;/a&gt;
  Break tasks down by adding subtasks
&lt;/h3&gt;

&lt;p&gt;When you are facing a big and/or complex task, it usually helps a lot if you break it down into smaller, more manageable parts. This will help you avoid stress and procrastination. The quickest way to add a subtask is to press &lt;code&gt;a&lt;/code&gt; while a task is being focused. Alternatively you can use the task context menu which can be opened up by right-clicking on the task (or long pressing it on macOS).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hint-use-markdown-checkboxes-if-you-need-another-subtask-level"&gt;
  &lt;/a&gt;
  Hint: Use markdown checkboxes if you need another subtask level
&lt;/h4&gt;

&lt;p&gt;To avoid never completed giant mega tasks – which can be frustrating to deal with – subtasks are limited to one level, if you really need another level, you can use markdown, inside the task notes panel to write another checklist. To do so select a task via keyboard and press the &lt;code&gt;ArrowRight&lt;/code&gt; key, which will open up an additional panel form the right. You can select the items in this panel via the arrow keys (&lt;code&gt;ArrowUp&lt;/code&gt;/&lt;code&gt;ArrowDown&lt;/code&gt; to move and &lt;code&gt;ArrowRight&lt;/code&gt;/&lt;code&gt;Enter&lt;/code&gt; to select an item). Under "Description" you find a small panel where you can enter some &lt;a href="https://www.markdownguide.org/getting-started/"&gt;markdown&lt;/a&gt; text for additional context information. Using the following syntax will provide you with a check-list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- [ ] Some item
- [x] Checked item
- [x] Another checked item
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And produce the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WL-2zuBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvm6kprrq9lbe109ubdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WL-2zuBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvm6kprrq9lbe109ubdl.png" alt="Nested subtasks" width="819" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hint-avoid-mega-tasks"&gt;
  &lt;/a&gt;
  Hint: Avoid mega tasks
&lt;/h4&gt;

&lt;p&gt;It also might be helpful to avoid long ongoing tasks with hundreds of subtasks. It might feel better to create a new task instead and simply assigning a number to them such as "My long task 2" and to then drag the remaining subtasks over to it. This approach might also make it easier to focus on the current problem at hand and to put irrelevant stuff out of your mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recap-the-most-important-shortcuts"&gt;
  &lt;/a&gt;
  Recap: The most important shortcuts
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Shift+A&lt;/code&gt;: Open add task bar&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Enter&lt;/code&gt;: Edit currently focussed task title&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Arrow keys&lt;/code&gt;: Navigate around task list&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;D&lt;/code&gt;: Mark currently focused task as done&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt;: Add subtask to currently focused task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Y&lt;/code&gt;: Toggle tracking time to currently focused task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;S&lt;/code&gt;: Open schedule dialog for currently focused task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Backspace&lt;/code&gt;: Delete currently focused task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ArrowRight&lt;/code&gt;: Open additional info panel for currently focused task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl+Shift+ArrowUp&lt;/code&gt;: Move currently focused task up in list&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl+Shift+ArrowDown&lt;/code&gt;: Move currently focused task down in list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can edit these and all other shortcuts on the settings page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-done-tasks-to-the-archive-and-finishing-your-day"&gt;
  &lt;/a&gt;
  Moving done tasks to the archive (and finishing your day)
&lt;/h2&gt;

&lt;p&gt;At the bottom of the task list you find a button labeled "Finish Day". Clicking it will bring you to the another page, that gives you an overview over what you did that day. We ignore that for now and scroll to the bottom of the page where there is another button labeled "Save and go home". By clicking it all (non sub-) tasks will be moved to the task archive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#productivity-tip-why-reflecting-and-winding-down-is-a-good-idea"&gt;
  &lt;/a&gt;
  Productivity Tip: Why reflecting and winding down is a good idea
&lt;/h3&gt;

&lt;p&gt;In most literature about productivity giving yourself a pat on the back, winding down and taking a moment to reflect after a busy day is considered a good practise as it helps you among other things with getting some distance between you and your work, which in turn allows to be more refreshed and productive the next day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-else-is-there"&gt;
  &lt;/a&gt;
  What else is there?
&lt;/h2&gt;

&lt;p&gt;These are the most important basic Super Productivity offers and that should be enough to get some benefit out of the app. There are other helpful (and all optional) features, too, which I would recommend gradually exploring and to experiment with whatever might work for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#projects-tags-and-color-coding"&gt;
  &lt;/a&gt;
  Projects, Tags and Color Coding
&lt;/h3&gt;

&lt;p&gt;Each task can have multiple tags assigned, but only a single project. Each project and tag offers its own sortable list, which could be helpful if you only want to work on a particular subject and hae everything else out of the way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#import-tasks-from-your-companies-project-management-software"&gt;
  &lt;/a&gt;
  Import tasks from your companies project management software
&lt;/h3&gt;

&lt;p&gt;Super Productivity allows you to directly import tasks from Jira, GitHub, GitLab and Open Project. This allows you to integrate your personal planning with that of your team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-an-overview-over-time-via-the-timeline"&gt;
  &lt;/a&gt;
  Get an overview over time via the Timeline
&lt;/h3&gt;

&lt;p&gt;The timeline view offers a quick overview on how your planning might work out over time. Non-scheduled tasks float around scheduled tasks, and you can also show data from your calendar there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-sheets-amp-worklogs"&gt;
  &lt;/a&gt;
  Time sheets &amp;amp; worklogs
&lt;/h3&gt;

&lt;p&gt;There are multiple ways that allow you to export the tracked time in different formats, which might be handy in case you need to report your time worked somewhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#productivity-helpers"&gt;
  &lt;/a&gt;
  Productivity Helpers
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#break-reminder"&gt;
  &lt;/a&gt;
  Break reminder
&lt;/h4&gt;

&lt;p&gt;Reminds you to regularly take breaks. Can be (de)activated on the settings page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pomodoro-timer"&gt;
  &lt;/a&gt;
  Pomodoro timer
&lt;/h4&gt;

&lt;p&gt;Integrated pomodoro timer if you need some extra focus. Can be activated on the settings page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#procrastination-helper"&gt;
  &lt;/a&gt;
  Procrastination Helper
&lt;/h4&gt;

&lt;p&gt;Some emergency information about procrastination and some tools to help with it. Can be reached by clicking on the flash button in the top right.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#simple-counters"&gt;
  &lt;/a&gt;
  Simple counters
&lt;/h4&gt;

&lt;p&gt;Freely configurable stopwatch and single click counters, to be used for whatever you please. E.g. a coffee counter. Can be configured on the settings page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#evaluate-your-work-days"&gt;
  &lt;/a&gt;
  Evaluate your work days
&lt;/h4&gt;

&lt;p&gt;Collect simple metrics to get a better grasp at what works for you and what doesn't. Can be filled on the "Finish Day" page and evaluated on the "Metrics" pages.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>workflow</category>
      <category>tips</category>
    </item>
  </channel>
</rss>
