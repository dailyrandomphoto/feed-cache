<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Material Kit 2 - Free Python/Jinja template</title>
      <author>Sm0ke</author>
      <pubDate>Fri, 29 Oct 2021 17:53:00 +0000</pubDate>
      <link>https://dev.to/sm0ke/material-kit-2-free-pythonjinja-template-5akc</link>
      <guid>https://dev.to/sm0ke/material-kit-2-free-pythonjinja-template-5akc</guid>
      <description>&lt;p&gt;Hello Coders, &lt;/p&gt;

&lt;p&gt;This article presents an open-source &lt;strong&gt;Jinja Template&lt;/strong&gt; built on top of &lt;strong&gt;&lt;a href="https://github.com/app-generator/jinja-material-kit"&gt;Material Kit 2&lt;/a&gt;&lt;/strong&gt;, a colorful Bootstrap 5 design. The product, available for download directly from Github, can be used to style any Python-based web app that uses Flask, Django or any other compatible framework. For newcomers, &lt;strong&gt;&lt;a href="https://jinja-material-kit.appseed-srv1.com/"&gt;Material Kit 2&lt;/a&gt;&lt;/strong&gt; is a popular design developed by Creative-Tim agency with more than 160k downloads. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;‚ú® &lt;a href="https://jinja-material-kit.appseed-srv1.com/"&gt;Jinja Material Kit&lt;/a&gt; - LIVE demo&lt;/li&gt;
&lt;li&gt;‚ú® &lt;a href="https://github.com/app-generator/jinja-material-kit"&gt;Jinja Material Kit&lt;/a&gt; - Source Code&lt;/li&gt;
&lt;li&gt;‚ú® More &lt;a href="https://appseed.us/jinja-template"&gt;Jinja Templates&lt;/a&gt; - a curated index&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DkI-9n_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgp0oe7i430jo17mghfl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DkI-9n_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgp0oe7i430jo17mghfl.gif" alt="Material Kit 2 - Free Python/Jinja template" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Probably the most easier way to use the product is to follow the Docker set up (steps listed on the README file): &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the sources&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/jinja-material-kit.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;jinja-material-kit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Start in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull   &lt;span class="c"&gt;# download dependencies&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose build  &lt;span class="c"&gt;# local set up&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up     &lt;span class="c"&gt;# start the app in Docker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the above commands are executed, the product should be up &amp;amp; running in the browser on address &lt;code&gt;http://localhost:85&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gdFhEsF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gaow6ydgerkwrw3dwkn2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gdFhEsF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gaow6ydgerkwrw3dwkn2.png" alt="Jinja Material Kit - Contact page." width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Jinja Material 2 - Components Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---SR6w1bK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn4k0qpjumsgp3mbgysm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---SR6w1bK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn4k0qpjumsgp3mbgysm.png" alt="Jinja Material 2 - Components Page" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Jinja Material 2 - Team Cards&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4-8___n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ek28vj86y88vahjxxnif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4-8___n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ek28vj86y88vahjxxnif.png" alt="Jinja Material 2 - Team Cards" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#official-product-information"&gt;
  &lt;/a&gt;
  Official Product Information
&lt;/h2&gt;

&lt;p&gt;The most complex and innovative UI Kit Made by Creative Tim. Check our latest Freebie Bootstrap 5 UI Kit with a fresh, new design inspired by Google's Material Design 2. Designed for those who like bold elements and beautiful websites, Material Kit 2 is ready to help you create stunning websites and web apps.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WxDg40b7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx87j4tv6a78vcyucfn1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WxDg40b7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx87j4tv6a78vcyucfn1.png" alt="Material Kit 2 - FREE BOOTSTRAP 5 UI KIT." width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Fully Coded Elements&lt;/strong&gt; - Material Kit 2 is built with over 60 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can take variations in color, which you can easily modify using SASS files and classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Pages&lt;/strong&gt; - If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;‚ú® &lt;a href="https://bit.ly/3u2lZc6"&gt;Material Kit 2&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;‚ú® More &lt;a href="https://appseed.us/jinja-template"&gt;Jinja Templates&lt;/a&gt; - provided by AppSeed &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>material</category>
      <category>uikit</category>
      <category>opensource</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 29 Oct 2021 17:31:38 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-1p73</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-1p73</guid>
      <description>&lt;p&gt;Hey there! &lt;/p&gt;

&lt;p&gt;Looking back on this past week, what was something you were proud of accomplishing?&lt;/p&gt;

&lt;p&gt;All wins count ‚Äî big or small üéâ&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Trying out a new recipe... or whatever else might spark joy ‚ù§Ô∏è &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Congrats on your wins! I hope you all have a great day! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Ote7fuZrFEV12yjvs5/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Ote7fuZrFEV12yjvs5/giphy.gif" alt="Dog with sunglasses saying happy friday" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>JavaScript Internal Property`[[]]` </title>
      <author>Dani Schuhman</author>
      <pubDate>Fri, 29 Oct 2021 17:20:57 +0000</pubDate>
      <link>https://dev.to/dani8439/javascript-internal-property-1nl2</link>
      <guid>https://dev.to/dani8439/javascript-internal-property-1nl2</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@dtopkin1?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Dayne Topkin&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/private?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maybe one day you were playing in the dev browser, and one day come across something that seemed a bit different. &lt;/p&gt;

&lt;p&gt;You've printed things out to the console, and something odd appears.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function foo() { 
    console.log("Hello")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;foo.prototype
{constructor: ∆í}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clicking on the arrow for the constructor, will return an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{constructor: ∆í}
constructor: ∆í foo()
arguments: null
caller: null
length: 0
name: "foo"
prototype: {constructor: ∆í}
[[FunctionLocation]]: VM572:1
[[Prototype]]: ∆í ()
[[Scopes]]: Scopes[2]
[[Prototype]]: Object
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What on earth are those double brackets &lt;code&gt;[[]]&lt;/code&gt;? &lt;/p&gt;

&lt;p&gt;It's the internal property. In JavaScript, objects have an internal property known as &lt;code&gt;Prototype&lt;/code&gt;. You can also see that there is a &lt;code&gt;Scopes&lt;/code&gt; inside of these double brackets as well once clicking inside an object. &lt;/p&gt;

&lt;p&gt;Whenever there are &lt;code&gt;[[]]&lt;/code&gt; that appear, it's an internal property that can't be accessed by our code. Both &lt;code&gt;Scopes&lt;/code&gt; and &lt;code&gt;Prototype&lt;/code&gt; are internal properties of the &lt;code&gt;foo&lt;/code&gt; object. &lt;/p&gt;

&lt;p&gt;What's pretty cool, and also very helpful when clicking on the &lt;code&gt;Scopes&lt;/code&gt; internal property, is that when working with some concepts, say, a closure, clicking on the scopes property will show the closure itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let f;

const g = function() {
    const a = 23;
    f = function() {
        console.log(a * 2);
    };
};

g();
f();

console.dir(f)

// Returns
∆í f()
arguments: null
caller: null
length: 0
name: "f"
prototype: {constructor: ∆í}
[[FunctionLocation]]: VM495:3
[[Prototype]]: ∆í ()
[[Scopes]]: Scopes[3]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clicking on the &lt;code&gt;Scopes&lt;/code&gt; internal property, we can see where the closure lives.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[Scopes]]: Scopes[3]
0: Closure (g) {a: 23}
1: Script {f: ∆í, g: ∆í}
2: Global {0: Window, window: Window, self: Window, docum...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's pretty cool, isn't it? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/11003021/what-internal-property-in-ecmascript-is-defined-for"&gt;StackOverFlow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/private-protected-properties-methods"&gt;JavaScript Info - Private Protected Properties&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Ultimate Resource Guide for Your Next 100 Days of Code</title>
      <author>John</author>
      <pubDate>Fri, 29 Oct 2021 16:58:42 +0000</pubDate>
      <link>https://dev.to/jnb/the-ultimate-resource-guide-for-your-next-100-days-of-code-2nhb</link>
      <guid>https://dev.to/jnb/the-ultimate-resource-guide-for-your-next-100-days-of-code-2nhb</guid>
      <description>&lt;p&gt;Are you looking for the¬†&lt;span&gt;best design resources websites&lt;/span&gt;? Well, then this collection is something every developer should bookmark, as it consists of the best resources that can help you to develop an amazing eye-catchy and visually enriched project.&lt;/p&gt;

&lt;p&gt;Here you'll find the best websites and resources with modern UI components in different formats such as PSD, Sketch, Figma, Icons, and Illustrations, etc. They are great for ideas for web components/UI.&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/web-development-resources-that-you-should-bookmark/&amp;amp;ved=2ahUKEwjoo5KWs-fzAhVZbn0KHX0bAG4QFnoECAQQAQ&amp;amp;usg=AOvVaw2cCTfPBK9M-kHilZgjzmdV"&gt;The Ultimate Resource Guide for Your Next 100 Days of Code&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners ‚Äì Easy Ideas to Get Started Coding JS [Beginners To Advance]</title>
      <author>John</author>
      <pubDate>Fri, 29 Oct 2021 16:44:50 +0000</pubDate>
      <link>https://dev.to/jnb/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-to-advance-54lh</link>
      <guid>https://dev.to/jnb/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-to-advance-54lh</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40+ JavaScript Projects for Beginners ‚Äì Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>2021 New GitHub profile readme template.</title>
      <author>Kije Park</author>
      <pubDate>Fri, 29 Oct 2021 16:38:31 +0000</pubDate>
      <link>https://dev.to/kijepark/2021-new-github-profile-readme-template-43ac</link>
      <guid>https://dev.to/kijepark/2021-new-github-profile-readme-template-43ac</guid>
      <description>&lt;p&gt;Hi guys, I have made an GitHub profile readme. If you're interested in it please check it out&lt;br&gt;
Decorate the GitHub Profile most effectively. GitHub HR Profile Template most effectively show your development skills to recruiters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FGApO-61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://scontent-ssn1-1.xx.fbcdn.net/v/t1.6435-9/248604563_403856607869153_7981656207480907734_n.jpg%3F_nc_cat%3D102%26ccb%3D1-5%26_nc_sid%3D730e14%26_nc_ohc%3D-jZc3SxvfUcAX8Cy2l9%26_nc_ht%3Dscontent-ssn1-1.xx%26oh%3D71292d9a79f50283704d97b665134991%26oe%3D61A054DA" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FGApO-61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://scontent-ssn1-1.xx.fbcdn.net/v/t1.6435-9/248604563_403856607869153_7981656207480907734_n.jpg%3F_nc_cat%3D102%26ccb%3D1-5%26_nc_sid%3D730e14%26_nc_ohc%3D-jZc3SxvfUcAX8Cy2l9%26_nc_ht%3Dscontent-ssn1-1.xx%26oh%3D71292d9a79f50283704d97b665134991%26oe%3D61A054DA" alt="alt text" title="GitHub HR Profile" width="880" height="943"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://githubprofile.com"&gt;https://githubprofile.com&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My top 3 programming languages&lt;/li&gt;
&lt;li&gt;My tech stack&lt;/li&gt;
&lt;li&gt;My contribution to open source and ranking of contributors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use in the following cases&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When to submit GitHub to your company&lt;/li&gt;
&lt;li&gt;When to include GitHub in your resume&lt;/li&gt;
&lt;li&gt;When to use GitHub for your brand&lt;/li&gt;
&lt;li&gt;When to show your skills to GitHub visitors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try it for yourself! Thank you very much :)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Being RESTful about your routes</title>
      <author>Stefan Vermaas</author>
      <pubDate>Fri, 29 Oct 2021 16:27:48 +0000</pubDate>
      <link>https://dev.to/knowndecimal/being-restful-about-your-routes-1gmf</link>
      <guid>https://dev.to/knowndecimal/being-restful-about-your-routes-1gmf</guid>
      <description>&lt;p&gt;Ruby on Rails advocates heavily for "&lt;a href="https://rubyonrails.org/doctrine/#convention-over-configuration"&gt;convention over configuration&lt;/a&gt;". One of these core conventions is the baked-in RESTful design for CRUD actions. You're introduced to this convention &lt;a href="https://guides.rubyonrails.org/getting_started.html#crudit-where-crudit-is-due"&gt;when you're just starting out with Ruby on Rails&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Almost all web applications involve CRUD (Create, Read, Update, and Delete) operations. You may even find that the majority of the work your application does is CRUD. Rails acknowledges this and provides many features to help simplify code doing CRUD.&lt;br&gt;
&lt;em&gt;&lt;a href="https://guides.rubyonrails.org/getting_started.html#crudit-where-crudit-is-due"&gt;The Rails docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is one big disadvantage about "convention over configuration"; it's not always obvious what principle is applied, why it's being applied, and how it should be applied when things get harder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-short-introduction-to-rest"&gt;
  &lt;/a&gt;
  A (short) introduction to REST
&lt;/h2&gt;

&lt;p&gt;The centerpiece of the REST principle is a resource. Interacting with a resource should be done with stateless HTTP requests using one of the four verbs: &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT/PATCH&lt;/code&gt;, or &lt;code&gt;DELETE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With "stateless HTTP requests," we mean that the server should be able to perform the operation with the given information from the client. This information can be as part of the URI, query-string parameters, body, or headers.&lt;/p&gt;

&lt;p&gt;In Rails, a less pure implementation of REST is often used because most Rails apps are both the client and the server.&lt;/p&gt;

&lt;p&gt;Uniform Resource Naming (URN) of resources is another part of REST. The name of the resources should reflect what it is: a singleton or a collection.&lt;/p&gt;

&lt;p&gt;A list of repositories on Github is a collection resource that can be identified with the &lt;code&gt;/repositories&lt;/code&gt; URN. An individual repository is a singleton resource and can be identified with the &lt;code&gt;/repositories/1234&lt;/code&gt; URN.&lt;/p&gt;

&lt;p&gt;Want to learn more about REST? See "&lt;a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm"&gt;Architectural Styles and the Design of Network-based Software Architectures&lt;/a&gt;", the dissertation of &lt;a href="https://en.wikipedia.org/wiki/Roy_Fielding"&gt;Roy Fielding&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rest-on-rails"&gt;
  &lt;/a&gt;
  REST on Rails
&lt;/h2&gt;

&lt;p&gt;In Rails, a resource is often translated to an ActiveRecord model. However, an ActiveRecord isn't the only resource in a Rails app. A resource can be anything according to the REST design principles.&lt;/p&gt;

&lt;p&gt;It can be an ActiveRecord model, it can be a Plain Old Ruby Object (PORO) model, it can be a service, an operation, and so on.&lt;/p&gt;

&lt;p&gt;As we mentioned before, Rails is opinionated. Resourceful routing is one of these conventions. In &lt;a href="https://guides.rubyonrails.org/routing.html#non-resourceful-routes"&gt;the Rails docs&lt;/a&gt;, the preference for using resourceful routes is briefly mentioned:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;While you should usually use resourceful routing...&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ruby on Rails provides a resourceful way to map the HTTP requests and URLs to controller actions. There are multiple ways to define this mapping. However, the main two ways are to define a route; resource and resources.&lt;/p&gt;

&lt;p&gt;Let's take a look at a simple example that uses resources.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:repositories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index show]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:collaborators&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the routes above, we're able to show a list of repositories and for each of these repositories, we can show a list of collaborators. Let's see how non-restful routes can make sense at first, but start to be a problem further down the road.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-nonrestful-route"&gt;
  &lt;/a&gt;
  The non-RESTful route
&lt;/h2&gt;

&lt;p&gt;Let's say we want to invite a new collaborator to a repository by extending our previous example with non-RESTful routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:repositories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index show]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:collaborators&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seems reasonable, doesn't it? We're inviting a new collaborator to a repository. However, now the new collaborator needs to be able to accept and decline the invite. So we add it as a custom action to the controller too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:repositories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index show]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:collaborators&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:accept_invite&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:decline_invite&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;
      &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="ss"&gt;:show_invite&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This approach still seems to be reasonable, however, our collaborators_controller.rb starts to grow. It's not only responsible anymore for listing the collaborators, but also for handling the invites.&lt;/p&gt;

&lt;p&gt;It's not only breaking the &lt;a href="https://thoughtbot.com/blog/back-to-basics-solid#single-responsibility-principle"&gt;Single Responsibility Principle&lt;/a&gt; (SRP) that goes hand-in-hand with a RESTful API design, but it will also make it harder to maintain the codebase as it grows. The &lt;code&gt;collaborators_controller.rb&lt;/code&gt; will become longer, harder to read, and thus harder to maintain.&lt;/p&gt;

&lt;p&gt;Let's see how the above example could be improved if one would follow a RESTful API design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-restful-route"&gt;
  &lt;/a&gt;
  The RESTful route
&lt;/h2&gt;

&lt;p&gt;If we're following &lt;a href="https://www.restapitutorial.com/lessons/whatisrest.html"&gt;the REST design principles&lt;/a&gt;, we will see that we're not actually inviting a new collaborator. We're creating an invitation for the collaborator which they can accept or decline.&lt;/p&gt;

&lt;p&gt;REST encourages us to think in terms of creating/updating/deleting resources rather than in actions. So instead of inviting a collaborator, we create an invitation for a collaborator. The same is true regarding accepting or declining an invitation.&lt;/p&gt;

&lt;p&gt;Wrapping your head around REST can take some time but it will make your code much cleaner and easier to maintain. Let's take a look at a more RESTful approach to inviting new collaborators.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:repositories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index show]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:collaborators&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index]&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:invitations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[show create update destroy]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we enable collaborators to see an invitation for a repository before accepting/declining it. We also allow them to accept the invitation by updating it and we allow them to decline the invitation by deleting it.&lt;/p&gt;

&lt;p&gt;By expressing our intentions in a RESTful way, we're separating the responsibilities of our controllers and are keeping them small. This will not only make it easier to maintain and to read through them, but it will also make them easier to test.&lt;/p&gt;

&lt;p&gt;Following the REST design principles will help you to keep responsibilities of a controller to a minimum. Whenever a new feature request comes in, ask yourself "how can I make this RESTful?"&lt;/p&gt;

&lt;p&gt;Splitting up your controllers, following the REST design principles, and reducing the responsibilities of a single controller will help you to make your applications more maintainable.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>rest</category>
    </item>
    <item>
      <title>Data Engineering:Extract, Transform,and Load Using Talend Open Studio.</title>
      <author>WanjohiChristopher</author>
      <pubDate>Fri, 29 Oct 2021 16:17:51 +0000</pubDate>
      <link>https://dev.to/wanjohichristopher/data-engineeringextract-transformand-load-using-talend-open-studio-4h0n</link>
      <guid>https://dev.to/wanjohichristopher/data-engineeringextract-transformand-load-using-talend-open-studio-4h0n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction-to-etl-tools"&gt;
  &lt;/a&gt;
  Introduction To ETL Tools.
&lt;/h2&gt;

&lt;p&gt;Hi there, welcome back to the data engineering series. I know most of you ask how do we do these so-called ETL Or ELT processes as a Data Engineer?&lt;/p&gt;

&lt;p&gt;I've got you now, don't worry.&lt;/p&gt;

&lt;p&gt;Today we will be going through the process of Extracting, Transforming, and Loading Data step by step from SQL server to Postgres. There are several ETL tools including, Talend, Pentaho, Informatica, Stitch, Xplenty, Alooma, Panapoly, Aws Glue, etc. I will introduce one ETL tool called Talend.&lt;br&gt;
Introduction toTalend OpenStudio&lt;/p&gt;

&lt;p&gt;It is important to use low code ETL tools. In this article, we will show how to install and get started with Talend. We will use Talend later to Migrate Data from MSSQL Server to Postgres.&lt;br&gt;
To get started we download Talend Open Studio for Linux &lt;a href="https://www.talend.com/lp/open-studio-for-data-integration/"&gt;here&lt;/a&gt;. Note that you can also download for any Operating System in the same link.&lt;br&gt;
After downloading you will receive multiple files, run the Linux file which has a¬†.sh file. This is how it looks!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SSQLGr_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8qus9ybm2li20n2dvfi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SSQLGr_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8qus9ybm2li20n2dvfi.png" alt="Image description" width="144" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Launch Talend now. This is how it should open:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ARhHAa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lemt5sb52e9lsbwtsgg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ARhHAa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lemt5sb52e9lsbwtsgg9.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's now time to get our hands dirty.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#migrating-data-from-sql-server-to-postgres-using-talend-etl"&gt;
  &lt;/a&gt;
  Migrating Data from SQL Server to Postgres Using Talend ETL
&lt;/h2&gt;

&lt;p&gt;At the Talend Studio, we create a job design(on your left-hand side)then create tBDInput for SQL Server and tBDOutput for Postgres. These inputs and outputs DBs will be used during connections and migration. At this point, you can create a connection between the two databases.&lt;br&gt;
Right Click on tBDInput Trigger the On subjob OK and drag it to tBDOutput to make the connection complete.&lt;br&gt;
Ensure to enter correctly the database credentials i.e username, password and database name,table name¬†, which hosts the table and database to migrate.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbi5Pt3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsycwev67b0sbwskbvvy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbi5Pt3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsycwev67b0sbwskbvvy.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c7XLtMPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q34qdzqyv5xr2vu11cyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c7XLtMPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q34qdzqyv5xr2vu11cyy.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
This shows the SQL server credentials to¬†enter.After all the configuring and connecting both databases, it's time now to start moving our data from SQL server to Postgres. We write an SQL query to migrate the data. To start with we start with SQL server by using the following command which gets data from the users table:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AcqWPRS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsick615tmlpzdbtn1mn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AcqWPRS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsick615tmlpzdbtn1mn.png" alt="Image description" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is used for migration and logging using the get_date function.&lt;br&gt;
Now we now have to write an SQL query to insert data into Postgres.In the UI we create a table and drop it if it exists then perform the action of insertion to custdatademo table as shown;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YNgKpxmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s66h56kpiibsc02kr5h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YNgKpxmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s66h56kpiibsc02kr5h.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
For Postgres configuration on¬†Talend.It's now time for us to run the job and migrate our data from MSSQL to Postgres.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S9HvPlYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3npjnw53fqd0to1f43qb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S9HvPlYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3npjnw53fqd0to1f43qb.png" alt="Image description" width="817" height="441"&gt;&lt;/a&gt;&lt;br&gt;
Our job runs successfully!.&lt;br&gt;
Now it's time where we have been waiting for so long and it's time to see our output in Postgres. Let's dive in fast and confirm our hard work.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zTI0FgF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmyzdoamuf57uox9avq3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTI0FgF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmyzdoamuf57uox9avq3.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
The data has been MIgrated Successfully using Talend as you can see in¬†PostgresAs you can see we have migrated the data successfully.Thank you for being with us on this long journey.&lt;br&gt;
This is a complete Extract, Transform, and Load(ETL) using Talend.&lt;br&gt;
Happy learning guys!&lt;br&gt;
Article Written by¬†:&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/wanjohichristopher/"&gt;WanjohiChristopher&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/nicholas-musau-69657186/"&gt;NicholasMusau&lt;/a&gt;&lt;br&gt;
Respects:&lt;a href="https://www.linkedin.com/in/omwenganeville/"&gt;Neville Omwenga&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dataengineer</category>
      <category>etl</category>
      <category>python</category>
      <category>talend</category>
    </item>
    <item>
      <title>AWS - NLP newsletter     October 2021</title>
      <author>Mia Chang</author>
      <pubDate>Fri, 29 Oct 2021 16:11:23 +0000</pubDate>
      <link>https://dev.to/aws/aws-nlp-newsletter-2021-oct-2e3o</link>
      <guid>https://dev.to/aws/aws-nlp-newsletter-2021-oct-2e3o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MnBZwfWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzc11lvq3a2nvdrqrkws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnBZwfWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzc11lvq3a2nvdrqrkws.png" alt="Cover Photo for AWS NLP Newsletter Ep03.2021.Oct." width="880" height="494"&gt;&lt;/a&gt;&lt;br&gt;
Hello world. This is the monthly Natural Language Processing(NLP) newsletter covering everything related to NLP at AWS. This is our third newsletter on Dev.to. If you missed our earlier episode, here are &lt;a href="https://dev.to/aws/aws-nlp-newsletter-2021-aug-i40"&gt;Ep01&lt;/a&gt; and &lt;a href="https://dev.to/aws/aws-nlp-newsletter-2021-sep-34o2"&gt;Ep02&lt;/a&gt;. Feel free to leave comments, share it on your social network to celebrate this new launch with us!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#service-updates-about-nlp-on-aws"&gt;
  &lt;/a&gt;
  Service updates about NLP on AWS
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/10/amazon-lex-progress-updates/"&gt;Amazon Lex launches progress updates for fulfillment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now configure your &lt;a href="https://aws.amazon.com/lex/"&gt;Amazon Lex&lt;/a&gt; bots to provide periodic updates to users while their requests are processed. Customer support conversations often require execution of business logic that can take some time to complete. For example, updating an itinerary on an airline reservation system may take a couple of minutes during peak hours. Typically, support agents put the call on hold and provide periodic updates (e.g., ‚ÄúWe are still processing your request; thank you for your patience‚Äù) until the request is fulfilled. Now, you can easily configure your bot to automatically provide such periodic updates in a conversation. With progress updates capability, bot builders can quickly enhance the ability of virtual contact center agents and smart assistants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/10/aws-solution-aws-qnabot-chatbot-built-amazon-lex/"&gt;New AWS Solution: AWS QnABot, a self-service conversational chatbot built on Amazon Lex&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://aws.amazon.com/solutions/implementations/aws-qnabot/"&gt;AWS QnABot&lt;/a&gt; has now been released as an official AWS Solution Implementation. The AWS QnABot is an open source, multichannel, multi-language conversational chatbot built on &lt;a href="https://aws.amazon.com/lex/"&gt;Amazon Lex&lt;/a&gt;, that responds to your customer‚Äôs questions, answers, and feedback. Without programming, the AWS QnABot solution allows customers to quickly deploy self-service conversational AI on multiple channels including their contact centers, websites, social media channels, SMS text messaging, or Amazon Alexa.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/10/amazon-transcribe-custom-language-models-streaming-transcription/"&gt;Amazon Transcribe now supports custom language models for streaming transcription&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/transcribe/"&gt;Amazon Transcribe&lt;/a&gt; will now support custom language models (CLM) for streaming transcription. Amazon Transcribe is an automatic speech recognition (ASR) service that makes it easy for you to add speech-to-text capabilities to your applications. CLM allows you to leverage pre-existing data to build a custom speech engine tailored for your transcription use case. No prior machine learning experience required. &lt;a href="https://aws.amazon.com/es/blogs/machine-learning/building-custom-language-models-to-supercharge-speech-to-text-performance-for-amazon-transcribe/"&gt;AWS ML Blog&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html"&gt;Transcribe Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DO1v74uC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/09/28/ML-5741-image012.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DO1v74uC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/09/28/ML-5741-image012.png" alt="Text analysis charts" width="880" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/es/blogs/machine-learning/translate-and-analyze-text-using-sql-functions-with-amazon-redshift-amazon-translate-and-amazon-comprehend/"&gt;Translate and analyze text using SQL functions with Amazon Redshift, Amazon Translate, and Amazon Comprehend&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You already know how to use Amazon Redshift to transform data using simple SQL commands and built-in functions. Now you can also use Amazon Redshift to translate, analyze, and redact text fields, thanks to &lt;a href="https://aws.amazon.com/translate/"&gt;Amazon Translate&lt;/a&gt;, &lt;a href="https://aws.amazon.com/comprehend/"&gt;Amazon Comprehend&lt;/a&gt;, and the power of Amazon Redshift supported &lt;a href="http://aws.amazon.com/lambda"&gt;AWS Lambda&lt;/a&gt; user-defined functions (UDFs).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/amazon-comprehend-adds-trusted-advisor-checks/?nc1=h_ls"&gt;Amazon Comprehend adds two Trusted Advisor checks&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/comprehend/"&gt;Amazon Comprehend&lt;/a&gt; now supports two new AWS Trusted Advisor checks to help customers optimize the cost and security of Amazon Comprehend endpoints. Today, Amazon Comprehend checks are available in the AWS Business Support and &lt;a href="https://aws.amazon.com/premiumsupport/plans/"&gt;AWS Enterprise Support plans&lt;/a&gt;. The new checks are: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Underutilized endpoints: Checks the throughput configuration of your endpoints and generates a warning when they are not actively used for any real-time inference requests; &lt;/li&gt;
&lt;li&gt;Endpoint permissions: Checks the KMS key permissions for an endpoint whose underlying model was encrypted using customer managed keys. If the customer managed key has been disabled or the key policy has been changed to alter the granted permissions for Amazon Comprehend for any reason, the endpoint availability might be impacted.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/10/amazon-textract-tiff-asynchronous-receipts-invoices/"&gt;Amazon Textract launches TIFF support and adds asynchronous support for receipts and invoices processing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/textract/"&gt;Amazon Textract&lt;/a&gt; now supports Tag Image File Format (TIFF) documents in addition to the PNG, JPEG, and PDF formats. Customers can now process TIFF documents either synchronously or asynchronously using any of the following Amazon Textract APIs - &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_DetectDocumentText.html"&gt;DetectDocumentText&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentAnalysis.html"&gt;StartDocumentAnalysis&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentTextDetection.html"&gt;StartDocumentTextDetection&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_AnalyzeDocument.html"&gt;AnalyzeDocument&lt;/a&gt;, and &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_AnalyzeExpense.html"&gt;AnalyzeExpense&lt;/a&gt;. Amazon Textract is a machine learning service that automatically extracts printed and handwritten text and data from any document.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nlp-on-sagemaker"&gt;
  &lt;/a&gt;
  NLP on SageMaker
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/amazon-sagemaker-jumpstart-multimodal-financial-analysis-tools/"&gt;Amazon SageMaker JumpStart introduces new multimodal (long-form text, tabular) financial analysis tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this new release, you can use the new set of multimodal financial analysis tools within Amazon SageMaker JumpStart. With these new tools, you can enhance your tabular ML workflows with new insights from financial text documents and potentially help save up to weeks of development time. Using the new SageMaker JumpStart Industry SDK, you can easily retrieve common public financial documents, including SEC filings, and further process financial text documents with features such as summarization and scoring for sentiment, litigiousness, risk, readability etc. In addition, you can access pre-trained language models trained on financial text for transfer learning, and use example notebooks for data retrieval, text feature engineering, multimodal classification and regression models. &lt;a href="https://aws.amazon.com/blogs/machine-learning/use-sec-text-for-ratings-classification-using-multimodal-ml-in-amazon-sagemaker-jumpstart/"&gt;AWS ML Blog #1&lt;/a&gt;, &lt;a href="https://aws.amazon.com/blogs/machine-learning/use-pre-trained-financial-language-models-for-transfer-learning-in-amazon-sagemaker-jumpstart/"&gt;AWS ML Blog #2&lt;/a&gt;, &lt;a href="https://aws.amazon.com/es/blogs/machine-learning/create-a-dashboard-with-sec-text-for-financial-nlp-in-amazon-sagemaker-jumpstart/"&gt;AWS ML Blog #3&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-jumpstart.html"&gt;JumpStart Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/es/blogs/machine-learning/organize-product-data-to-your-taxonomy-with-amazon-sagemaker/"&gt;Organize product data to your taxonomy with Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When companies deal with data that comes from various sources or the collection of this data has changed over time, the data often becomes difficult to organize. Perhaps you have product category names that are similar but don‚Äôt match, and on your website you want to surface these products as a group. Therefore, you need to go through the tedious work of manually creating a map from source to target to be able to transform the data into your own taxonomy. In these cases, we‚Äôre not talking about a few hundred rows of data, but more often many hundreds of thousands of rows, with new data flowing in regularly. In this post, we discuss how to organize product data to your classification needs with Amazon SageMaker.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/es/blogs/machine-learning/bring-structure-to-diverse-documents-with-amazon-textract-and-transformer-based-models-on-amazon-sagemaker/"&gt;Bring structure to diverse documents with Amazon Textract and transformer-based models on Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From application forms, to identity documents, recent utility bills, and bank statements, many business processes today still rely on exchanging and analyzing human-readable documents‚Äîparticularly in industries like financial services and law. In this post, we show how you can use Amazon SageMaker, an end-to-end platform for machine learning (ML), to automate especially challenging document analysis tasks with advanced ML models.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-blog-posts-papers-and-more"&gt;
  &lt;/a&gt;
  AWS Blog posts, papers, and more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/create-a-dashboard-with-sec-text-for-financial-nlp-in-amazon-sagemaker-jumpstart/"&gt;Create a dashboard with SEC text for financial NLP in Amazon SageMaker JumpStart&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, the author showed how to curate a dataset of Securities Exchange Commission, SEC filings, use NLP for feature engineering on the dataset, and present the features in a dashboard. &lt;/p&gt;

&lt;p&gt;To get started, you can refer to the example notebook in JumpStart titled Dashboarding SEC Filings. You can also refer to the example notebook in JumpStart titled Create a TabText Dataset of SEC Filings in a Single API Call, which contains more details of SEC forms retrieval, summarization, and NLP scoring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.amazon.science/publications/sample-selection-guided-by-domain-and-task-for-cross-domain-targeted-sentiment-analysis"&gt;Amazon Science Publication: Sample selection guided by domain and task for cross-domain targeted sentiment analysis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building supervised targeted sentiment analysis models for a new target domain requires substantial annotation effort since most datasets for this task are domain-specific. Domain adaptation for this task has two dimensions: the nature of targets and the opinion words used to describe sentiment towards the target. We present a data sampling strategy informed by domain differences across these two dimensions with the goal of selecting a small number of examples, thereby minimizing annotation effort. This obtains performance in the 86-100% range compared to the full supervised model using only ‚àº4-15% of the full training data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XIBFtzVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xija6jn3qg15fmkg04w1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIBFtzVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xija6jn3qg15fmkg04w1.png" alt='YouTube demo video "Amazon Transcribe video snacks: Using vocabulary filters"' width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=TcpSqbr0FnI"&gt;YouTube demo video "Amazon Transcribe video snacks: Using vocabulary filters"&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Transcribe is a automatic speech recognition service that can be used when you have audio and video that contains speech you want to convert to text. You can mask, remove, or tag words you don't want in your transcription results with vocabulary filtering. For example, you can use vocabulary filtering to prevent the display of offensive or profane terms. In the demo, we will customize Transcribe to mask swear words that we recently encountered in a famous play written by William Shakespeare.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/publicsector/4-ways-conversational-ai-amazon-lex-help-public-sector-transform-customer-engagement/"&gt;4 ways conversational AI and Amazon Lex help the public sector transform customer engagement&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Conversational artificial intelligence (AI) and chatbots can be used to transform the customer experience, enhance engagement, improve services, and help scale more simply. Learn how conversational AI and chatbots help public sector organizations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#community-content"&gt;
  &lt;/a&gt;
  Community content
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIuoOxY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5n6hwwg4jyncwjap0o4y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIuoOxY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5n6hwwg4jyncwjap0o4y.png" alt="SageMaker and Hugging Face" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=pYqjCzoyWyo"&gt;Workshop: Getting started with Amazon Sagemaker Train a Hugging Face Transformers and deploy it&lt;/a&gt;&lt;br&gt;
Learn how to use Amazon SageMaker to train a Hugging Face Transformer model and deploy it afterward. Prepare and upload a test dataset to S3, prepare a fine-tuning script to be used with Amazon SageMaker Training jobs, Launch a training job and store the trained model into S3, and Deploy the model after successful training. GitHub Repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;October ‚Äú&lt;a href="https://huggingface.co/blog"&gt;HuggingFace Blog&lt;/a&gt;‚Äù entries:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Showcase Your Projects in Spaces using Gradio &lt;/li&gt;
&lt;li&gt;Hosting your Models and Datasets on Hugging Face Spaces using Streamlit&lt;/li&gt;
&lt;li&gt;Fine-tuning CLIP with Remote Sensing (Satellite) images and captions&lt;/li&gt;
&lt;li&gt;The Age of Machine Learning As Code Has Arrived&lt;/li&gt;
&lt;li&gt;Train a Sentence Embedding Model with 1B Training Pairs&lt;/li&gt;
&lt;li&gt;Large Language Models: A New Moore‚Äôs Law?&lt;/li&gt;
&lt;li&gt;Course Launch Community Event &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#upcoming-nlp-events"&gt;
  &lt;/a&gt;
  Upcoming NLP events
&lt;/h2&gt;

&lt;p&gt;Both community events and AWS events&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://app.livestorm.co/hugging-face/going-production-deploying-scaling-and-monitoring-hugging-face-transformer-models"&gt;Going Production: Deploying, Scaling &amp;amp; Monitoring Hugging Face Transformer models | Hugging Face&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tuesday, November 2nd, 2021 &lt;/li&gt;
&lt;li&gt;5:00 PM to 6:00 PM CEST&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://www.meetup.com/Artificial-Intelligence-Suisse/events/281384880"&gt;Pie &amp;amp; AI Suisse - Trustworthiness of AI models: Improving NLP with Causality | Meetup&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wednesday, November 3, 2021. &lt;/li&gt;
&lt;li&gt;6:30 PM to 8:00 PM CEST&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://codecamp.ro/e-conferences/ndr-the-ai-conf/"&gt;NLP inference optimization on Amazon SageMaker in NDR conference&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tuesday, November 09, 2021&lt;/li&gt;
&lt;li&gt;11:40 AM to 12:20 PM CEST&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://www.meetup.com/Dublin-Data-Science/events/281499104"&gt;Analysing Politeness: Can NLP Tools Help? | Meetup&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wednesday, November 17, 2021&lt;/li&gt;
&lt;li&gt;8:00 PM to 9:30 PM CEST&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stay-in-touch-with-nlp-on-aws"&gt;
  &lt;/a&gt;
  Stay in touch with NLP on AWS
&lt;/h2&gt;

&lt;p&gt;Our contact: &lt;a href="//mailto:aws-nlp@amazon.com"&gt;aws-nlp@amazon.com&lt;/a&gt; &lt;br&gt;
Email us about (1) your awesome project about NLP on AWS, (2) let us know which post in the newsletter helped your NLP journey, (3) other things that you want us to post on the newsletter. Talk to you soon.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>nlp</category>
      <category>machinelearning</category>
      <category>ai</category>
    </item>
    <item>
      <title>Hotwire with StimulusReflex</title>
      <author>julianrubisch</author>
      <pubDate>Fri, 29 Oct 2021 16:09:36 +0000</pubDate>
      <link>https://dev.to/julianrubisch/hotwire-with-stimulusreflex-2bh5</link>
      <guid>https://dev.to/julianrubisch/hotwire-with-stimulusreflex-2bh5</guid>
      <description>&lt;p&gt;Here's a deck of slides I made for a talk I gave at the viennarb meetup. Enjoy!&lt;/p&gt;


&lt;div class="ltag_speakerdeck"&gt;
  &lt;iframe height="463" id="talk_frame_7264e1d6eaf04067af1fdb4afca5cad1" src="//speakerdeck.com/player/7264e1d6eaf04067af1fdb4afca5cad1" width="710"&gt;&lt;/iframe&gt;
&lt;/div&gt;


</description>
      <category>rails</category>
      <category>hotwire</category>
      <category>stimulusreflex</category>
    </item>
    <item>
      <title>Downloading data from Render.com's persistent Redis service</title>
      <author>Ayush Newatia</author>
      <pubDate>Fri, 29 Oct 2021 15:57:27 +0000</pubDate>
      <link>https://dev.to/ayushn21/downloading-data-from-rendercoms-persistent-redis-service-333h</link>
      <guid>https://dev.to/ayushn21/downloading-data-from-rendercoms-persistent-redis-service-333h</guid>
      <description>&lt;p&gt;Render.com &lt;a href="https://feedback.render.com/features/p/managed-redis"&gt;doesn't yet have a managed Redis&lt;/a&gt; offering, but we can still deploy a &lt;a href="https://render-web.onrender.com/docs/deploy-redis"&gt;persistent Redis instance as a Private Service&lt;/a&gt; with an attached disk to store its data.  &lt;/p&gt;

&lt;p&gt;The problem is, Render's private services are not exposed to the internet, so how do we download the Redis data if we want to back it up, or migrate it somewhere else or whatever?  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://render-web.onrender.com/docs/disks#transferring-files"&gt;This Render article&lt;/a&gt; describes how we can get our hands on the data stored on attached disks using &lt;code&gt;magic_wormhole&lt;/code&gt;. However, the Redis Docker image runs &lt;a href="https://alpinelinux.org"&gt;Alpine Linux&lt;/a&gt;; and to install &lt;code&gt;magic_wormhole&lt;/code&gt; we need &lt;code&gt;apt&lt;/code&gt; which isn't available on this Linux distribution.  &lt;/p&gt;

&lt;p&gt;There is a workaround to install it using a long and complicated command, that I don't understand. Go to your Redis service from your Render dashboard and select the &lt;strong&gt;Shell&lt;/strong&gt; tab.  &lt;/p&gt;

&lt;p&gt;Then run this command (it will take a few minutes to complete):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;apk add build-base python3-dev libffi-dev openssl-dev py3-pip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; pip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pip3 &lt;span class="nb"&gt;install &lt;/span&gt;magic-wormhole
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure you have &lt;code&gt;magic_wormhole&lt;/code&gt; installed on your local machine as well. Follow the instructions for your OS &lt;a href="https://magic-wormhole.readthedocs.io/en/latest/welcome.html"&gt;on this page&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Once the installation in both places is complete, run the following command in the Render dashboard:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wormhole send /var/lib/redis/appendonly.eof
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;magic_wormhole&lt;/code&gt; will then go away and do its magic and give you a command to run on your local machine. Run that once you have it and voila, you have the Redis data file from Render on your local machine to do with as you please!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://binarysolo.chapter24.blog/downloading-data-from-render-com-s-persistent-redis-service/"&gt;my blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>redis</category>
      <category>render</category>
    </item>
    <item>
      <title>Alternative Constructors in Python</title>
      <author>P0intMaN</author>
      <pubDate>Fri, 29 Oct 2021 15:27:43 +0000</pubDate>
      <link>https://dev.to/p0intman/alternative-constructors-in-python-58gb</link>
      <guid>https://dev.to/p0intman/alternative-constructors-in-python-58gb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#article-agenda"&gt;
  &lt;/a&gt;
  Article Agenda
&lt;/h2&gt;

&lt;p&gt;This post is dedicated towards understanding how we can create &lt;strong&gt;alternative constructors&lt;/strong&gt; in Python. Also, we would be taking a look at a real developmental scenario where I felt comfortable using it. To cut this short, we would be covering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#constructors"&gt;Constructors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#alternative-constructors"&gt;Alternative Constructors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#a-real-application-example"&gt;A Real Application Example&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Python OOPs has rocked the world with its &lt;strong&gt;simple yet stunning&lt;/strong&gt; flow of programming. Almost all the programs and software written in Python follow the OOPs paradigm. The OOP in Python is so modernized and enhanced that huge amount of developers are making a shift towards this amazing Programming language.&lt;/p&gt;

&lt;p&gt;In case you are wondering what an OOP is, I already have a &lt;strong&gt;&lt;a href="https://dev.to/p0intman/a-primer-on-object-oriented-programming-with-python-231g"&gt;Python OOP&lt;/a&gt;&lt;/strong&gt; post on this, which gives you a brief overview about it. You may want to give it a thorough read.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#constructors"&gt;
  &lt;/a&gt;
  Constructors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ex78j93F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/foohjioacc2sj090jvw2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ex78j93F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/foohjioacc2sj090jvw2.png" alt="constructors" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Constructors by definition, is a &lt;strong&gt;subroutine designed to create an object in a particular class&lt;/strong&gt;. In layman's terms, a &lt;em&gt;method&lt;/em&gt;, which gets &lt;strong&gt;automatically called at the time of object creation and assists it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Constructors are like ordinary methods defined inside the class. The only difference being, we need &lt;strong&gt;not&lt;/strong&gt; call it explicitly. Programming languages automatically calls it while creating the object of the class.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;C++&lt;/strong&gt;, constructors have the &lt;strong&gt;same name&lt;/strong&gt; as the class name. For example (I know this is a Python tutorial, but I really felt the urge to show you the difference. So, here you go):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;          &lt;span class="c1"&gt;// Class name&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Constructor. Notice how its name is same as class name&lt;/span&gt;
    &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// I will be automatically executed during instantiation&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// instantiation.&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Python, this is &lt;strong&gt;not&lt;/strong&gt; the case. However, there is a &lt;em&gt;huge misconception&lt;/em&gt; out there:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-init-endraw-vs-raw-new-endraw-which-one-is-the-real-constructor"&gt;
  &lt;/a&gt;
  The &lt;code&gt;__init__()&lt;/code&gt; vs &lt;code&gt;__new__()&lt;/code&gt;. Which one is the real constructor?
&lt;/h3&gt;

&lt;p&gt;As opposed to a popular yet &lt;strong&gt;wrong&lt;/strong&gt; belief where &lt;strong&gt;&lt;code&gt;__init__()&lt;/code&gt; method is considered to be constructor, its actually the &lt;code&gt;__new__()&lt;/code&gt; method which is the constructor of the class&lt;/strong&gt;. To put it more clearly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/strong&gt; : This method is called automatically to &lt;strong&gt;control&lt;/strong&gt; the object creation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/strong&gt; : This method is also called automatically during object creation, but this is more of an &lt;strong&gt;initializer method&lt;/strong&gt; which initializes the object attributes. That's why we used it in our OOPs concept (an earlier post), to initialize our object attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moreover, if both &lt;strong&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/strong&gt; methods exist in the same class, then &lt;strong&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/strong&gt; is called first and then Python interpreter decides whether to call &lt;strong&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/strong&gt; or not. &lt;/p&gt;

&lt;p&gt;So, from the OOP standpoint, and from the above observations, it can be safely concluded that &lt;strong&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/strong&gt; is the &lt;strong&gt;real constructor&lt;/strong&gt;. But several Devs just want to stay out of this pandemonium. Therefore, instead of going after this &lt;strong&gt;&lt;em&gt;"init vs new thing"&lt;/em&gt;&lt;/strong&gt;, they adopted another way to create constructors, enter the &lt;em&gt;Alternative Constructors&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-constructors"&gt;
  &lt;/a&gt;
  Alternative Constructors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oByu8e5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4oebat8xj8gbtvoimvd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oByu8e5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4oebat8xj8gbtvoimvd.png" alt="ac" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Alternative constructors are actually &lt;strong&gt;class methods&lt;/strong&gt; which serves the purpose of object creation. We hack the &lt;strong&gt;class methods&lt;/strong&gt; and command them to control the object creation. This is pretty similar to a constructor's (&lt;code&gt;__new__()&lt;/code&gt;'s) working. &lt;/p&gt;

&lt;p&gt;There is a convention for naming methods to be used as alternative constructors. All such methods should start with &lt;strong&gt;&lt;code&gt;from_&lt;/code&gt;&lt;/strong&gt;. For example, if I have a method say, &lt;strong&gt;&lt;code&gt;getDetails()&lt;/code&gt;&lt;/strong&gt; and if I were to make it an alternative constructor, then I would have to rename it as &lt;strong&gt;&lt;code&gt;from_getDetails()&lt;/code&gt;&lt;/strong&gt;. Although this is not necessary, but it is considered to be a good practice.&lt;/p&gt;

&lt;p&gt;The following snippet shows the basic syntax of defining alternative constructors (AC):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_alternativeConstructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;      &lt;span class="c1"&gt;# Alternative Constructor
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                           &lt;span class="c1"&gt;# returns object
&lt;/span&gt;
&lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_alternativeConstructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# calling AC
&lt;/span&gt;
&lt;span class="c1"&gt;# an object is crafted successfully due to the execution of AC
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-real-application-example"&gt;
  &lt;/a&gt;
  A Real Application Example
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zwn9F0HM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92dh8csug5o5sgg96e31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwn9F0HM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92dh8csug5o5sgg96e31.png" alt="EXAMPLE" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
While I was developing a backend, I had a long list of strings. I had to come up with a way to convert these &lt;strong&gt;strings to objects&lt;/strong&gt;. Luckily, I had AC by my side and the task went on smoothly. In real world, you would get raw data like these. You would have to circumvent these obstacles and find a solution. &lt;/p&gt;

&lt;p&gt;The following snippet shows a demonstration of how I converted a long list of strings (but here, for the sake of simplicity, lets take a single string) and then converted it into objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Professor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_getDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;      &lt;span class="c1"&gt;# Alternative Constructor
&lt;/span&gt;        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# split string and assign to variables
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="c1"&gt;# returns object
&lt;/span&gt;
&lt;span class="n"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Jack Robins,2233394,45"&lt;/span&gt;

&lt;span class="n"&gt;prof&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Professor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_getDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prof&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;prof&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;prof&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;# prints --&amp;gt; "Jack Robins" 2233394 45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The string is now converted to an object and I can easily access it using its attributes. So, this was all about alternative constructors. One of the most interesting ways to bypass the basic working system of OOPs and also, exploiting the most out of it. After all, we are programmers, its in our DNA to exploit stuff and get things working for us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#would-you-like-to-support-me"&gt;
  &lt;/a&gt;
  Would You Like to Support Me?
&lt;/h2&gt;

&lt;p&gt;If you want to support me and my contents, then go ahead and consider doing it. I would highly appreciate that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UC1QZPervOHLiC4xpVnzbDFg"&gt;YouTube Channel&lt;/a&gt;: Home to all sorts of &lt;strong&gt;peculiar&lt;/strong&gt; tutos.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.github.com/P0intMaN"&gt;GitHub&lt;/a&gt;: Looking forward to your PR üòâ&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
  </channel>
</rss>
