<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript, Single Threaded but Non-Blocking</title>
      <author>Dylan Oh</author>
      <pubDate>Mon, 06 Dec 2021 13:25:01 +0000</pubDate>
      <link>https://dev.to/ohdylan/javascript-single-threaded-but-non-blocking-198e</link>
      <guid>https://dev.to/ohdylan/javascript-single-threaded-but-non-blocking-198e</guid>
      <description>&lt;p&gt;For those who just got in touch with JavaScript might be confused when hearing people say that JavaScript is a single threaded and non-blocking programming language. You might be thinking how could one be single threaded but non-blocking? &lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Single Threaded&lt;/strong&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
JavaScript is known to be single threaded because of its property of having only one call stack, which some other programming languages have multiple. JavaScript functions are executed on the call stack, by LIFO (Last In First Out). For example we have a piece of code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the call stack will have foo to enter into call stack, then bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cdqp8Odv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exvl0p4kqy36psxbjr00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cdqp8Odv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exvl0p4kqy36psxbjr00.png" alt="Image description" width="496" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After bar() is done, it will be popped off from the call stack, followed by foo(). You will see an anonymous function underneath when printing out the stack trace, and that is the global execution context of main thread.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjxRxe7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfgz6mxfax3zebp2xjzx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjxRxe7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfgz6mxfax3zebp2xjzx.png" alt="Image description" width="203" height="228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This seems to be logical as JavaScript is a single threaded language and there is only a single flow to execute all these functions. However, in the case that we are having some unpredictable or heavy tasks in the flow (for example making an API call), we do not want them to block the execution of the remaining codes (else users might be staring at a frozen screen). This is where the asynchronous JavaScript comes in.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Non-Blocking&lt;/strong&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Other than JavaScript Engine, we also have Web APIs, Callback Queue and Event Loop to form JavaScript runtime in the browser. Let's say we have a piece of code here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"setTimeout" is a Web API function that will execute a callback function after a certain amount of time (in milliseconds, in this case is 5000 milliseconds). When you execute this script, you will see that "1" and "3" are printed out instantly, and "2" is printed out around 5 seconds later. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LTH44MmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkachgjqdjftob1gm07r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LTH44MmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkachgjqdjftob1gm07r.png" alt="Image description" width="333" height="154"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what happened behind the scene:&lt;/p&gt;

&lt;p&gt;The first console log is put into the stack, and popped off after printed out "1" in the console. When setTimeout function is put into the stack, the callback function is set to await by this Web API function. The setTimeout function is then popped off the stack and the third console log enters. After finished executing, the third console log and the current global execution context are popped off from stack. &lt;/p&gt;

&lt;p&gt;When the callback function in setTimeout finished awaiting, it will enter to Callback Queue (or event queue) and wait to be executed. Event loop facilitates and checks if the call stack is empty. If it is empty, new global execution context is created and this call back function (console log out "2") will then be put into the stack, executed and popped off. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MOs4GbAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guc8ykvjaahtv1045ws9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MOs4GbAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guc8ykvjaahtv1045ws9.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this gives you an idea of why JavaScript can be single threaded and non-blocking at the same time. Thought of writing this as I just recently shared this with the new joiner to our company.&lt;/p&gt;

&lt;p&gt;Oh btw, if you still need a video explanation, here is a good resource:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;What the heck is the event loop anyway? | Philip Roberts | JSConf EU&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Do follow me for more future articles on web design, programming and self-improvement&lt;/strong&gt; 😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 15 Django Hosting Services: Pros and Cons</title>
      <author>Kateryna Pakhomova</author>
      <pubDate>Mon, 06 Dec 2021 12:54:23 +0000</pubDate>
      <link>https://dev.to/kateryna_pakhomova/top-15-django-hosting-services-pros-and-cons-4flm</link>
      <guid>https://dev.to/kateryna_pakhomova/top-15-django-hosting-services-pros-and-cons-4flm</guid>
      <description>&lt;p&gt;&lt;strong&gt;The original article was written by SoftFormance &lt;a href="https://www.softformance.com/blog/top-15-django-hostings/"&gt;https://www.softformance.com/blog/top-15-django-hostings/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Choosing a Django hosting service is one of many decisions you’ll need to make when working on a project, and it’s a step that cannot be overlooked! With so many options on the market available, it surely is an overwhelming task.&lt;/p&gt;

&lt;p&gt;At first, all of these hosting services look quite similar in their features. However, due to huge differences, choosing the wrong one will doom your project from the very beginning. For example, a hosting service with limited scalability, bandwidth, or storage isn’t the right choice for a fast-growing project that is constantly updating and changing. &lt;/p&gt;

&lt;p&gt;But don’t worry, we got you covered and made a list of 15 Django hosting services, with their main pros and cons. We also highlighted the most important factors to consider and what to pay attention to when choosing a hosting service. So, let’s dive right in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-consider-when-choosing-a-hosting-service-for-your-project"&gt;
  &lt;/a&gt;
  What to consider when choosing a hosting service for your project?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Multi-platform software vs PaaS.&lt;/strong&gt; The multi-platform model gives you an operational system with complete freedom to build your site in any language you like. Meanwhile, the PaaS model provides you with virtual space, where you can install a limited number of languages (Python, Django, or others, provided by the platform). &lt;br&gt;
&lt;strong&gt;Price. **Whether you are a huge company or a rising startup, money for hosting services always takes a significant part of the budget. Thus, choosing a service that has a balance between price and quality is important. &lt;br&gt;
**Scalability. **Being able to adapt your platform depending on the changing needs of your business is the key to success. Scalable hosting services allow you to add bandwidth, storage, and other resources at once. &lt;br&gt;
Speed. Only with a 1-second delay, customer satisfaction rate drops by 16%, while a 1-3 seconds delay on a page load leads up to a 32% bounce rate. As such, consider the speed of website load, server response, and file download/upload to a server. &lt;br&gt;
**Control panel.&lt;/strong&gt; It allows you to monitor and adjust your website and its features. Usually, control panels have many tools that may vary slightly from one hosting service to another. Pay attention to it and choose the one that matches the best with your needs.&lt;br&gt;
Without further ado, let’s talk about services that will make your project a success. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-amp-djangospecific-hosting-providers"&gt;
  &lt;/a&gt;
  Python &amp;amp; Django-specific hosting providers
&lt;/h2&gt;

&lt;p&gt;Most of the hosting services are oriented on a lot of programming languages. However, let’s start with a few providers that are only Django-specific. &lt;/p&gt;

&lt;p&gt;django CMS&lt;/p&gt;

&lt;p&gt;Django CMS is easy-to-use, developer-friendly, Python CMS founded in 2007. NASA, Instagram, and National Geographic are only a few examples of companies that used it. &lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User-friendliness. Django CMS is oriented not only at developers but also at marketing managers and content editors. Hence, it has a short learning curve and quite an intuitive drag and drop interface. &lt;/li&gt;
&lt;li&gt;Scalability and customization. It is flexible, easy to extend, and possible to add other integrations in the later stages of the project.&lt;/li&gt;
&lt;li&gt;Broad Django CMS community available through their Slack Channel and Forum. 
Cons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The basic user interface but it’s easily extendable with lots of plugins available. &lt;br&gt;
Plans &amp;amp; Pricing&lt;/p&gt;

&lt;p&gt;Django CMS is a free and open-source platform. &lt;/p&gt;

&lt;p&gt;Wagtail CMS&lt;/p&gt;

&lt;p&gt;This CMS was originally built for the Royal College of Art, but today is used by lots of developers and companies all over the world. &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Pros *&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lightweight and straightforward interface.&lt;/li&gt;
&lt;li&gt;Flexibility in development. It provides developers with a platform and set of tools, giving them complete freedom in how to use them.&lt;/li&gt;
&lt;li&gt;Integration with existing Django applications. It is easily integrated with other Django apps in your tech stack. &lt;/li&gt;
&lt;li&gt;Multi-site support. You can run several sites using the same admin.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In order to extend, you need significant coding knowledge and skills.&lt;/li&gt;
&lt;li&gt;Not a fully developed CMS. Even basic components require heave coding. &lt;/li&gt;
&lt;li&gt;Plans &amp;amp; Pricing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wagtail CMS is a free and open-source platform. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mezzanine"&gt;
  &lt;/a&gt;
  Mezzanine
&lt;/h2&gt;

&lt;p&gt;Mezzanine is a CMS created by Stephen McDonald in 2010. Similar to WordPress, it has most of its functionality by default, which makes it a more integrated and productive platform. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beginner-friendly. For inexperienced users, Mezzanine is ready to use out of the box. It provides a built-in search engine and API, numerous integrations, a blog, and lots of themes and templates. &lt;/li&gt;
&lt;li&gt;Front-end editing. Meaning that users can edit blog posts, themes, and widgets as long as they are logged with an Admin account. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integrations with third-party applications, such as Disqus, Gravatar, Google Analytics, Twitter, and others. &lt;br&gt;
&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No feature of scheduled publishing. With Mezzanine, you cannot schedule publications to be posted at a specific time. &lt;br&gt;
Plans &amp;amp; Pricing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mezzanine is a free and open-source platform. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pythonanywhere"&gt;
  &lt;/a&gt;
  PythonAnywhere
&lt;/h2&gt;

&lt;p&gt;If you search for Django hosting, this is one of the first platforms that you’ll come across. Focused exclusively on Python and running on AWS servers, this PaaS hosting service allows you to install your Django project with one click. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One-click installation for Django projects.&lt;/li&gt;
&lt;li&gt;Quick and easy to set up even for inexperienced users. &lt;/li&gt;
&lt;li&gt;Accessible and simple options for scaling.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Free SSL support no matter what plan you are choosing.&lt;br&gt;
&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support service is accessible only via email.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No WebSocket support, meaning it can’t host real-time applications.&lt;br&gt;
Plans &amp;amp; Pricing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PythonAnywhere has a free plan with limited options, which is perfect to test the service and get you started as well as four paid plans. The prices vary from 5 to 100$, and there is a custom option where you can choose all of the features you need (5-500$ per month).&lt;/p&gt;

&lt;p&gt;djangoeurope&lt;/p&gt;

&lt;p&gt;Which hosting service can be better than the one founded by one of the Django developers himself? It was set up in 2009 by a small team of experts and grew into one of the most developer-friendly Django-specific hosting services. &lt;/p&gt;

&lt;p&gt;djangoeurope doesn’t have its own data centers and uses ones of other hosting services, depending on location (Hetzner’s in Germany and Finland, hosttech’s in Switzerland, and so on). &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Pros *&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High level of customization. It has a fully customizable web server, and you gain complete control over the configuration of your app. &lt;/li&gt;
&lt;li&gt;One-click Django installation. You will have your website up and running within minutes, just by entering your project’s name, website name, and address login. &lt;/li&gt;
&lt;li&gt;An unlimited number of sites. djangoeurope allows hosting an unlimited number of sites and domains.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backups. The service provides daily and weekly backups that are available from 7 days to 3 months. &lt;br&gt;
&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scalability. The service offers quite limited bandwidth (each server has a bandwidth of 1 Gbps that cannot be modified). &lt;br&gt;
Plans &amp;amp; Pricing &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The plans vary from 5 to 60 euros per month, and there is a policy of a 30-days money-back guarantee. You can also pay in advance for the whole year and get a 10% discount. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wideranging-hosting-providers"&gt;
  &lt;/a&gt;
  Wide-ranging hosting providers
&lt;/h2&gt;

&lt;p&gt;Let’s move on to the hosting services of broader use. But don’t worry, all of them are perfectly fit to host Django projects.&lt;/p&gt;

&lt;p&gt;Amazon Web Services&lt;/p&gt;

&lt;p&gt;Today, more than 33% of all websites around the globe are built upon Amazon Web Services. This makes AWS one of the most widespread hosting services used by countless businesses and organizations. Let’s find out the secret to the success of this cloud hosting service. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security and compliance. AWS ensures complete redundancy, backups, and server cloning for their clients.&lt;/li&gt;
&lt;li&gt;Scalability. You purchase the necessary amount of storage, with an opportunity to increase or reduce it when needed.&lt;/li&gt;
&lt;li&gt;Excellent support. Several support plans are available, according to your needs.&lt;/li&gt;
&lt;li&gt;High speed and agility. AWS allows setting up an application within minutes, saving your time and money, and boosting efficiency and agility.&lt;/li&gt;
&lt;li&gt;Pay as you go method. You are paying only for the services and tools you are using.
*&lt;em&gt;Cons 
*&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Not beginner-friendly. The abundance of options and choices is overwhelming and difficult to understand for a newbie.&lt;/li&gt;
&lt;li&gt;Country specific. While AWS provides an extensive range of options, all of them are available only in the USA, while if you are located in another country, you’ll need to check for the availability of each option specifically.&lt;/li&gt;
&lt;li&gt;Complicated pricing. Too many options and different prices for each one make it difficult to determine the exact price beforehand.
Plans &amp;amp; Pricing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At first, AWS pricing may seem a little too complicated when you look at it. The service offers free trials, but with a limited number of options. If you need a lot of storage or some add-ons, here comes added costs. To determine the exact cost you will need to pay, use AWS Pricing Calculator. &lt;/p&gt;

&lt;p&gt;Azure (Microsoft)&lt;/p&gt;

&lt;p&gt;Azure is another cloud giant in the area of hosting services, but we prefer other services to it. Our tech stack is Python/Django, which is open-source and completely contradictory to the core values of Microsoft, which is a proprietary company. As such, we go for such open-source OCs as Linux (in particular, Ubuntu).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scalability. The service allows you to purchase, use, and remove data packages exactly when needed.&lt;/li&gt;
&lt;li&gt;Security. Azure’s security system is based on the DADSC approach, which is Detect, Assess, Diagnose, Stabilise, and Close and received multiple compliance certifications&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Availability. The service has more than 40 data centers all over the world, making it accessible for international businesses.&lt;br&gt;
&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not beginner-friendly. Same as with AWS, it will take lots of time and effort to understand all of its features for a newbie.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inefficient customer support. In case of an emergency or problem that requires instant solution, it’s hard to contact the customer support asap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data loss. Since the service is a single solution, it means that all of your data will be hosted in one space. If you won’t be able to access it for some reason or Azure itself will lose it, you will risk losing it for good.&lt;br&gt;
Plans &amp;amp; Pricing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Azure’s pricing system is rather complicated and includes many different factors and pitfalls, lacking precise prices and costs. On the other hand, it uses the pay-as-you-go method, so you don’t overpay for features and add-ons you don’t use.&lt;/p&gt;

&lt;p&gt;DigitalOcean&lt;/p&gt;

&lt;p&gt;Back in 2012, the founders of DigitalOcean, Ben and Moisey Uretsky stumbled upon the Craiglist job listing of Mitch Wainer, co-founder of the company to be. Several months later, they launched a beta version of the site. &lt;/p&gt;

&lt;p&gt;Today, DigitalOcean is a popular cloud provider among developers across North America, Europe, and East Asia.&lt;/p&gt;

&lt;p&gt;We prefer DigitalOcean over other hosting services and use it for the majority of our clients who want to automate their business or start a new software product. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beginner-friendly. DigitalOcean has a simple API interface that allows both newbies and seasoned developers to use it to their best advantage.&lt;/li&gt;
&lt;li&gt;Scalability. You can both add more space or downsize easily, depending on your needs.&lt;/li&gt;
&lt;li&gt;Affordability. Compared with similar hosting services, DigitalOcean offers one of the best prices on the market. 
High speed. A 40 Gbps network allows you to access one of the best speed levels on the market. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Broad outreach. DigitalOcean has 13 data centers on three continents. &lt;br&gt;
*&lt;em&gt;Cons *&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Limited range of products in comparison with other hosting services. &lt;br&gt;
Plans &amp;amp; Pricing &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prices start from 5$ per month. Depending on your needs, there are different options available, from 5 to 960$. You can also get a two-month free trial and try out free credits up to 100$ every month. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-cloud-platform"&gt;
  &lt;/a&gt;
  Google Cloud Platform
&lt;/h2&gt;

&lt;p&gt;Over the last three years, Google Cloud’s revenue grew from 4 to 13 billion dollars, making up more than 7% of the company’s total revenues. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scalability. There are wide options regarding data storage, updates, and functionality. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Global outreach. Wherever you are, GCP gets you covered and allows deploying from all over the world. &lt;br&gt;
&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lack of innovation. In comparison with other hosting services, it is not as innovative and wide in its features and productivity as the competitors. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focus on smaller projects. Large projects are out of GCP’s focus in comparison with its competitors, such as Microsoft. &lt;br&gt;
Plans &amp;amp; Pricing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The platform offers 300$ in free credits and 20+ free products, has pay as you go method and 24/7 free billing support. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hetzner"&gt;
  &lt;/a&gt;
  Hetzner
&lt;/h2&gt;

&lt;p&gt;Hetzner is a Germany-based company that has data centers in Germany and Finland. It has been on the market since 1997 and provided services for Userlike, Leoni, Whereby, Talkwalker, and many more companies.&lt;/p&gt;

&lt;p&gt;We also use Hetzner for demo servers and other inner goals due to its affordability. &lt;/p&gt;

&lt;p&gt;Hetzner is also an environmentally sound organization. It uses exclusively renewable sources to power the servers in the data centers (wind and hydropower) and concentrates on choosing energy-efficient hardware. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Affordable prices. Its prices are one of the lowest on the market and affordable for both large and small-scale businesses. 
24×7 support. The support is free and available at any time. Documentation and email support are free for everyone while phone support is only free for users with Level 4 pricing plans. &lt;/li&gt;
&lt;li&gt;Partnership with Dell, Intel, and other vendors, which is a guarantee of reliable software and hardware. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Free domain and SSL. &lt;br&gt;
&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No data centers in the United States. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inconvenient and difficult to use control panel. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Most of the documentation is in German. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No uptime guarantee. &lt;br&gt;
Plans &amp;amp; Pricing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hetzner offers various levels of subscriptions, with prices starting at 1.90 euros per month for level one. There are also plans for 4.90 and 9.90 euros per month, and a premium level for 19.90 euros monthly. You can learn more about the details of each level here. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heroku"&gt;
  &lt;/a&gt;
  Heroku
&lt;/h2&gt;

&lt;p&gt;Founded in 2007, this PaaS platform supported only Ruby programming language at first. Today, the number of supported languages expanded, including Python, which makes Heroku a polyglot platform. It hosts more than 105 thousand social and mobile cloud applications. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;-Beginner-friendly. Its initial deployment and environment configuration are easy and clear, even for a newbie.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Seamless integration with other SaaS products and services. &lt;/li&gt;
&lt;li&gt;Exceptional support, ready to assist with all kinds of issues. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Heroku uses Amazon’s secure data centers to host and manage its physical infrastructure. &lt;br&gt;
&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Quite pricey, especially in comparison with other hosting services. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some plans include sleeping mode, which automatically puts your application into sleeping mode after some period of inactivity. Unless you have enough coding skills to work around built-in functionality, it may be inconvenient. &lt;br&gt;
Plans &amp;amp; Pricing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Heroku offers a free plan with a limited number of choices as well as paid ones. For the Standard plan, prices vary between 25 and 50$, and for the Performance plan between 250 and 500$, depending on the features you need. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a2-hosting"&gt;
  &lt;/a&gt;
  A2 Hosting
&lt;/h2&gt;

&lt;p&gt;A2 Hosting was founded back in 2001 and provides services for large and small-scale companies for two decades now. Having data centers in Amsterdam, Singapore, and Michigan, the platform has global coverage and can offer services to companies all over the world. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Great hosting performance speed.&lt;/li&gt;
&lt;li&gt;Data centers around the globe.&lt;/li&gt;
&lt;li&gt;Easy to scale.&lt;/li&gt;
&lt;li&gt;Unlimited disk space and bandwidth.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;99.9% uptime guarantee.&lt;br&gt;
&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The cheaper plans are quite limited in their features in comparison with more expensive ones.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plans &amp;amp; Pricing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The prices vary between 8 and 123$ per month, with all plans including unlimited storage and data transfer, as well as free SSD. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bluehost"&gt;
  &lt;/a&gt;
  Bluehost
&lt;/h2&gt;

&lt;p&gt;Founded by one of the oldest and largest global hosting corporations, Bluehost is another platform to consider when looking for a hosting service. FalconStor Software, HB Communications, Quest are just a few companies among many others who used Bluehost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;User-friendly hosting dashboard and control panel.&lt;br&gt;
Simple and straightforward website transfer and setup.&lt;br&gt;
Money-back guarantee.&lt;br&gt;
24×7 support via chat, email, and phone.&lt;br&gt;
&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No automated backup. You have to set up your own backup via the control panel or additionally pay for the Backup Pro feature.&lt;/li&gt;
&lt;li&gt;Slower speed in comparison with other hosting services.
No unlimited storage.
Plans &amp;amp; Pricing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The platform offers three plans for 19.99, 29.99, and 59.99$ per month, which vary by the amount of SSD storage, bandwidth, cores, and IP addresses. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tmdhosting"&gt;
  &lt;/a&gt;
  TMDHosting
&lt;/h2&gt;

&lt;p&gt;TMDHosting has data centers in 7 locations around the world and uses cutting-edge cloud technology to provide its customers with the fastest load times. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Convenient and easy-to-use interface, including control panel, support tickets, billing, and other features.&lt;/li&gt;
&lt;li&gt;Exceptional server performance: high speed and quick server response time.&lt;/li&gt;
&lt;li&gt;Regular updates and daily backup.&lt;/li&gt;
&lt;li&gt;24×7 support time, response time is less than 15 minutes.
*&lt;em&gt;Cons
*&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;There are not a lot of features and characteristics for more complex projects. 
Plans &amp;amp; Pricing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The prices start from 2.95$ per month for the Starter Plan, 5.95$ for the Business Plan, and 12.95$ for the Professional Plan. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hostupon"&gt;
  &lt;/a&gt;
  HostUpon
&lt;/h2&gt;

&lt;p&gt;Based in Toronto, HostUpon accounts for more than 10 thousand customers and 50 thousand websites and offers a tailored solution for clients all over the world. &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Pros&lt;br&gt;
*&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unlimited disk space and bandwidth.&lt;/li&gt;
&lt;li&gt;5 data centers across the world.&lt;/li&gt;
&lt;li&gt;99.9% uptime guarantee.&lt;/li&gt;
&lt;li&gt;Full control with cPanel and WHM Control Panels. &lt;/li&gt;
&lt;li&gt;Free migration from your current provider.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;24×7 support available via phone, live chat, and support ticket.&lt;br&gt;
&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Too many features and details in the basic plans.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lower-price plans don’t offer SSL certificates and backups.&lt;br&gt;
Plans &amp;amp; Pricing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The prices of VPS hosting start with 49.95$ per month, offering 20GB disk space, 100GB bandwidth, and 512MB memory. All of the other plans include unlimited bandwidth and more disk space and memory. The most popular plan costs 69.95$ per month and includes 50GB disk space, unlimited bandwidth, and 1 GB memory. &lt;/p&gt;

&lt;p&gt;Comparison Table&lt;br&gt;
Up to this point, you are probably overwhelmed with all the facts, numbers, and statistics. So, we simplified it a bit for you. Take a look at the table with all the core features and characteristics of each of the listed hosting services: &lt;/p&gt;

&lt;p&gt;Type of cloud computing service Price   Scalability Speed   Control Panel&lt;br&gt;
Django CMS      Free    Easily scalable&lt;br&gt;&lt;br&gt;
Wagtail CMS     Free&lt;br&gt;&lt;br&gt;
Mezzanine       Free&lt;br&gt;&lt;br&gt;
PythonAnywhere  PaaS    5-500$  Accessible and simple scaling options   Slower in several times in comparison with other providers  No control panel&lt;br&gt;
djangoeurope    Multi-platform  5-60€ Limited bandwidth       Django-based control panel&lt;br&gt;
Amazon Web Services Multi-platform  Pricing Calculator  Accessible and simple scaling   High speed and agility&lt;br&gt;&lt;br&gt;
Azure (Microsoft)   PaaS    Pricing Calculator&lt;br&gt;&lt;br&gt;
DigitalOcean    Multi-platform  5-960$  Highly scalable 40 Gbps network; one of the best speeds on the market   cPanel, WHM Control Panels&lt;br&gt;
Google Cloud Platform   Multi-platform  300$ free credits, 20+ free products    Highly scalable     cPanel/WHM Control Panels&lt;br&gt;
Hetzner Multi-platform  1.90-19.90$         Inconvenient, difficult to use&lt;br&gt;
Heroku  PaaS    25-500$&lt;br&gt;&lt;br&gt;
A2 Hosting      8-123$  Easy to scale   285ms&lt;br&gt;&lt;br&gt;
Bluehost    Multi-platform  19.99-59.99$    Not highly scalable 688ms   User-friendly control panel&lt;br&gt;
TMD Hosting Multi-platform  2.95-12.95$ Up to 10TB bandwidth    648ms   cPanel, WHM Control Panels &lt;br&gt;
HostUpon    Multi-platform  49.95-149.95$   Unlimited disk space and bandwidth  846ms   cPanel, WHM Control Panels&lt;br&gt;
Sum Up&lt;br&gt;
The right hosting provider is a significant part of building a successful project. There are lots of factors to consider, from your experience to the budget of your project. You should always pay attention to scalability, speed, prices, control panel, among other characteristics when checking out the hosting service. &lt;/p&gt;

&lt;p&gt;We prefer to use DigitalOcean for the majority of our clients due to its extended features, user-friendly control panel, excellent functionality, and affordable prices. &lt;/p&gt;

&lt;p&gt;Also, we use Amazon Web Services for fast-growing and developing projects with bigger budgets. &lt;/p&gt;

&lt;p&gt;If you are looking to launch a Django-based software but don’t know where to start, waste no time and contact us! We’d be happy to help you to figure out all the details and calculate the costs for the development, support, and hosting of your project. &lt;/p&gt;

&lt;p&gt;Still unsure? Check out some of our latest work. &lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>hostings</category>
    </item>
    <item>
      <title>How to use Class-based Components in React </title>
      <author>SnowBit</author>
      <pubDate>Mon, 06 Dec 2021 12:50:04 +0000</pubDate>
      <link>https://dev.to/snowbit/how-to-use-class-based-components-in-react-1cnb</link>
      <guid>https://dev.to/snowbit/how-to-use-class-based-components-in-react-1cnb</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HI56D6orlJ0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this article, I am going to show you how you can use &lt;strong&gt;class-based components&lt;/strong&gt; in React JS&lt;/p&gt;

&lt;p&gt;Let's get started 🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-classbased-components"&gt;
  &lt;/a&gt;
  What is Class-based components
&lt;/h3&gt;

&lt;p&gt;Class-based components are simple classes which tends as a React components which can be easily used anywhere in your React Project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-them"&gt;
  &lt;/a&gt;
  How to use them?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Snowbit&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;SnowBit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Shown&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;based&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Hosting a website on github page</title>
      <author>MD Taseen Khan</author>
      <pubDate>Mon, 06 Dec 2021 12:47:10 +0000</pubDate>
      <link>https://dev.to/mohammadtaseenkhan/hosting-a-website-on-github-page-563m</link>
      <guid>https://dev.to/mohammadtaseenkhan/hosting-a-website-on-github-page-563m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hostingawebsiteongithubpage"&gt;
  &lt;/a&gt;
  Hosting-a-website-on-github-page
&lt;/h2&gt;

&lt;p&gt;Now I am telling you how you host your page on GitHub &lt;/p&gt;

&lt;p&gt;Step 1&lt;/p&gt;

&lt;p&gt;Upload Your Necessary Files&lt;/p&gt;

&lt;p&gt;Step 2 &lt;/p&gt;

&lt;p&gt;Go to settings of the repository and scroll down &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CSPWF7mf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/85288261/136652834-2f893411-60d8-4115-b0d1-27b774b08150.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CSPWF7mf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/85288261/136652834-2f893411-60d8-4115-b0d1-27b774b08150.png" alt="image" width="704" height="118"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 3 &lt;/p&gt;

&lt;p&gt;Then Click on the picture shown down below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6rHS1eZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/85288261/136652846-a3bd57fc-0ecd-4552-b565-697d511b9399.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6rHS1eZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/85288261/136652846-a3bd57fc-0ecd-4552-b565-697d511b9399.png" alt="image" width="880" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 4 &lt;/p&gt;

&lt;p&gt;Then click on the branch and select Main &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TrcVvkVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/85288261/136652873-ed004a0d-c7b3-4755-9a0e-4b78228e9de7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TrcVvkVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/85288261/136652873-ed004a0d-c7b3-4755-9a0e-4b78228e9de7.png" alt="image" width="460" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that you will see the link of the github hosted page like this shown down below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBB-LY5o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/85288261/136652913-9e234787-d571-40f1-9d86-fa7eb4c29fe0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBB-LY5o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/85288261/136652913-9e234787-d571-40f1-9d86-fa7eb4c29fe0.png" alt="image" width="880" height="172"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then wait for at least some minutes and then click the link&lt;/p&gt;

&lt;p&gt;There you GO !!!!!&lt;/p&gt;

&lt;p&gt;GOOD LUCK :)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Time saving developer tools</title>
      <author>MD Taseen Khan</author>
      <pubDate>Mon, 06 Dec 2021 12:27:21 +0000</pubDate>
      <link>https://dev.to/mohammadtaseenkhan/time-saving-developer-tools-37li</link>
      <guid>https://dev.to/mohammadtaseenkhan/time-saving-developer-tools-37li</guid>
      <description>&lt;p&gt;Time saving developer tools&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://vscode.dev/"&gt;VS code online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css3generator.com/"&gt;CSS3 Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coolors.co/"&gt;coolors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://csstypeset.com/"&gt;CSS Type Set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.blobmaker.app/"&gt;blobmaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://9elements.github.io/fancy-border-radius/"&gt;fancy border radius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hype4.academy/tools/glassmorphism-generator"&gt;glassmorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Follow to get more updates&lt;/p&gt;

</description>
      <category>developer</category>
      <category>time</category>
      <category>tools</category>
    </item>
    <item>
      <title>In pursuit of an even playing field</title>
      <author>Lee Englestone 💡🧠👨‍💻</author>
      <pubDate>Mon, 06 Dec 2021 12:22:42 +0000</pubDate>
      <link>https://dev.to/leeenglestone/in-pursuit-of-an-even-playing-field-3jcd</link>
      <guid>https://dev.to/leeenglestone/in-pursuit-of-an-even-playing-field-3jcd</guid>
      <description>&lt;p&gt;This post is overdue, and for that I apologise. The fact that I have been putting this off and not prioritising it, is perhaps in some small way indicative of the problem.&lt;/p&gt;

&lt;p&gt;Because there is a problem. Whether we want to admit it or discuss it is another matter.&lt;/p&gt;

&lt;p&gt;The problem is that women are not yet treated the same as men in tech. In fact, in many cases they are treated down right despicably and it is up to everyone, (especially men) to acknowledge this and address it.&lt;/p&gt;

&lt;p&gt;This post is in part dedicated to the work by Salma and &lt;a href="//unbreak.tech"&gt;unbreak.tech&lt;/a&gt; whose aim is to highlight and bring about change.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5sw6Syw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1354397337020473347/3wtvj84L_normal.jpg" alt="⚡️ Salma | whitep4nth3r profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        ⚡️ Salma | whitep4nth3r
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/whitep4nth3r"&gt;@whitep4nth3r&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      5 months ago I tweeted a call to action for men in tech who wanted to help advocate for and promote inclusivity and equality in tech.&lt;br&gt;&lt;br&gt;Then I launched &lt;a href="https://t.co/LeGrIeL3BD"&gt;unbreak.tech&lt;/a&gt;.&lt;br&gt;&lt;br&gt;I received 100+ DMs from men wanting to get involved.&lt;br&gt;&lt;br&gt;But I received only 21 contributions so far 👇🏼
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:57 AM - 19 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1450370452363296768" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1450370452363296768" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1450370452363296768" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;There are a number of things that we can do.. so I thought I would just list a few that I think are important (in no particular order).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Equal pay for women&lt;/li&gt;
&lt;li&gt;Gender bias awareness and training (especially in recruitment)&lt;/li&gt;
&lt;li&gt;Improve female speaker ratios at conferences&lt;/li&gt;
&lt;li&gt;Increase female attendance at tech conferences&lt;/li&gt;
&lt;li&gt;Don't assume women are less technical than male colleagues around them&lt;/li&gt;
&lt;li&gt;Don't assume women at tech conferences are non technical&lt;/li&gt;
&lt;li&gt;Don't explain things to women that they may already know&lt;/li&gt;
&lt;li&gt;Reduce female drop out of STEM subjects at early ages&lt;/li&gt;
&lt;li&gt;Support groups encouraging women in tech&lt;/li&gt;
&lt;li&gt;Support women in tech&lt;/li&gt;
&lt;li&gt;Speak up when we see something wrong&lt;/li&gt;
&lt;li&gt;Consider what we say and how we act can be interpreted i.e. "hi guys"&lt;/li&gt;
&lt;li&gt;Help women feel safe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(I may update this list)&lt;/p&gt;

&lt;p&gt;But I'd really like to take the opportunity to highlight that the many female colleagues that I have had the honour of working with, have been/are absolutely amazing (you know who you are), and I dare say better (on average) than their male colleagues.&lt;/p&gt;

&lt;p&gt;I'd also like to challenge anyone of my male peers who's initial thoughts are "yeah but..". You need to get yourself to a place where you acknowledge that there is a problem.&lt;/p&gt;

&lt;p&gt;In my opinion, it is similar to white people having a problem with the "black lives matter" message and insisting on using a "black lives matter too" or "all lives matter" instead.. of course they do! but the original phrase is to help raise awareness of the particular problem and I can completely understand why variations on it detract from the original message/problem. &lt;a href="https://theconversation.com/why-is-it-so-offensive-to-say-all-lives-matter-153188"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For me the most important thing that men can do is admit there is a problem and after that, as I've listed, there are various ways to help to get towards a place where women are treated equally in tech. (I don't have all the answers before someone asks me how we get there).&lt;/p&gt;

&lt;p&gt;Slightly selfishly as I write this I realise that I am thinking about the world I want my 8yo daughter to live in and my 5yo son to be aware of and help towards creating. &lt;/p&gt;

&lt;p&gt;What kind of future do you want future generations to live in?&lt;/p&gt;

&lt;p&gt;-- Lee&lt;/p&gt;

&lt;p&gt;(Photo by Elena Mozhvilo, from Unsplash)&lt;/p&gt;

</description>
      <category>womenintech</category>
    </item>
    <item>
      <title>Day 9 - CSS Grid | #100DaysOfCode</title>
      <author>MD Jannatin Naim</author>
      <pubDate>Mon, 06 Dec 2021 12:12:16 +0000</pubDate>
      <link>https://dev.to/jannatinnaim/day-9-css-grid-100daysofcode-jkg</link>
      <guid>https://dev.to/jannatinnaim/day-9-css-grid-100daysofcode-jkg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HQrRr2Ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szrfxmbejlyljbyfpqix.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HQrRr2Ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szrfxmbejlyljbyfpqix.jpg" alt="Coding Motivation Banner" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-learn-today"&gt;
  &lt;/a&gt;
  What did I learn today?
&lt;/h3&gt;

&lt;p&gt;The progressive learning path after flexbox is grid. CSS Grid is just another way of laying out content for a page. It's fairly complicated, but the templates make it easy to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-did-i-face"&gt;
  &lt;/a&gt;
  What problems did I face?
&lt;/h3&gt;

&lt;p&gt;None so far.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-want-to-do-tomorrow"&gt;
  &lt;/a&gt;
  What do I want to do tomorrow?
&lt;/h3&gt;

&lt;p&gt;The projects. The course content is finished, now the projects are the only thing left. I'll do them tomorrow after I do some more research.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-is-the-experience-so-far"&gt;
  &lt;/a&gt;
  How is the experience so far?
&lt;/h3&gt;

&lt;p&gt;I did learn a lot, now it's time to put them to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/JannatinNaim/"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Automation Testing? Why You Should Use Automated Tests?</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Mon, 06 Dec 2021 12:06:07 +0000</pubDate>
      <link>https://dev.to/uilicious/what-is-automation-testing-why-you-should-use-automated-tests-4edp</link>
      <guid>https://dev.to/uilicious/what-is-automation-testing-why-you-should-use-automated-tests-4edp</guid>
      <description>&lt;p&gt;We've long believed that automation testing is a wonderful formula for improving the quality of apps right from the start. However, it is only when we begin automating that we grasp the true reality. We frequently confront issues such as deciding when to start automating tests, what tests to automate, how to choose the correct technology, and how to write automation test scripts that follow the best practices.&lt;/p&gt;

&lt;p&gt;So let’s discuss all this in detail in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-test-automation-and-how-does-it-work"&gt;
  &lt;/a&gt;
  What is Test Automation and how does it work?
&lt;/h2&gt;

&lt;p&gt;It is a method in which automation tools run a test suite, perform predetermined actions on a software application, report on the results, compare them, and generate detailed test reports.&lt;/p&gt;

&lt;p&gt;Test automation requires financial and human resources, long development cycles, and repeated executions. However, before we begin automating tests, we must first determine the best time for automation, the breadth of automation, and the best tool for automation. It might lead your project to unexpected additional costs if this process is not done properly from the beginning.&lt;/p&gt;

&lt;p&gt;Automated tests can be done across several servers during off-peak hours (midnight) and consume a fraction of the time that manual testing takes. This implies that the developer and tester’s time is used in the most efficient way possible, and the team receives faster feedback on code quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criteria-for-automation"&gt;
  &lt;/a&gt;
  Criteria for Automation
&lt;/h2&gt;

&lt;p&gt;To be automated, a test must match certain conditions; otherwise, it may wind up costing more than it saves. After all, saving time, effort, and money is a fundamental purpose of automation.&lt;/p&gt;

&lt;p&gt;Here are some general test automation criteria. Keep in mind that these are only suggestions. Depending on your circumstances, your criteria may differ.&lt;/p&gt;

&lt;p&gt;Repeatable: The test must be able to be repeated. Automating a test that can only be run once makes no sense. The following three steps comprise a repeatable test:&lt;/p&gt;

&lt;p&gt;Configure the test, including the data and the environment.&lt;br&gt;
Execute the function and determine the outcome.&lt;br&gt;
Clean up the data as well as the surroundings..&lt;br&gt;
We want to be able to make the environment consistent in the initial phase.&lt;/p&gt;

&lt;p&gt;Determinant: When a function is determinant, the result is the same each time it is performed with the same input. The same may be said for automated tests. Let's imagine we wish to put an additional function to the test. We now know that 1+1=2, and that 394.19 + 5.81 = 400.00. The function of addition is determinant. Software, on the other hand, may have such a large number of varied inputs that getting the same result over time is challenging. Some variables may be completely random, making it difficult to predict a specific outcome.&lt;/p&gt;

&lt;p&gt;Unopinionated: You cannot automate matters of opinion. This is where usability testing, beta testing, and so forth really shine. User feedback is important, but it just can’t be automated … sorry!&lt;/p&gt;

&lt;p&gt;Most devs say software test automation demands considerable investments of money and resources. But UI-licious makes it easy to implement and maintain. We created this all-in-one automation tool with the desire to deliver better web experiences for everyone in mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-at-different-levels"&gt;
  &lt;/a&gt;
  Testing at different levels
&lt;/h3&gt;

&lt;p&gt;A strategy to decide the number of tests to automate is the test automation pyramid. This strategy suggests writing three types of tests with different levels of granularity. The higher the level, the fewer tests there are to write.&lt;/p&gt;

&lt;p&gt;Unit testing offers software products with robustness as a firm base. It's simple to write and execute tests when you test particular pieces of the code.&lt;br&gt;
The service layer refers to evaluating an application's services separately from its user interface; these services include everything that the application does in response to a single or multiple inputs.&lt;br&gt;
We have UI testing at the top level, which has fewer tests due to many attributes that make them more difficult to run, such as the fragility of the tests, where a tiny change in the user interface can break a large number of tests, requiring additional maintenance effort.&lt;br&gt;
Type of automated tests&lt;br&gt;
Knowing what are the different forms of automated testing is critical when it comes to integrating test automation in your QA department. This will give you a good idea of how comprehensive a test automation program is, and if you can integrate it into your present quality assurance procedures or not. Furthermore, understanding the various sorts of tests allows you to make informed decisions about which types of testing would produce the best results for your organization.&lt;/p&gt;

&lt;p&gt;There are many different types of test automation. The following is a comprehensive list of the most common ones:&lt;/p&gt;

&lt;p&gt;Code Analysis: Static and dynamic code analysis tools are just two of the numerous types of code analysis tools available. Some of these checks are for security issues, while others are for style and form. When a developer checks in code, these tests are run. There isn't much test writing to perform with these automated tests other than configuring rules and keeping the tools up to date.&lt;br&gt;
Unit Testing: Unit testing is doing tests on individual components in isolation to ensure that they function properly. It is commonly the first type of automated testing performed on an application because it is usually done during the development phase.&lt;br&gt;
Integration Testing: Integration testing entails testing the application's various elements as a whole. When it comes to automation, integration tests are a unique kind. Integration tests, often known as end-to-end tests, are more difficult to put up since they must interface with external dependencies. When working with resources that aren't under your control, it's often beneficial to construct false external resources.&lt;br&gt;
Performance Testing: Performance testing is putting a piece of software through its paces, stability, and responsiveness while under load. The fundamental goal of performance testing is to detect and eliminate any potential performance bottlenecks so that the program can offer the best results to the end-user. Performance testing is an important part of assuring a product's market success since it helps uncover potential issues that consumers may encounter, such as slow software functioning under a heavy workload.&lt;br&gt;
Regression Testing: Regression testing is a sort of maintenance testing. It entails running functional and non-functional tests again to see if the software behaves the same way it did previously after a code or program change. The software is said to have regressed if the performance is no longer the same. The primary goal of regression testing is to guarantee that existing functionality is not harmed as a result of code changes.&lt;br&gt;
Smoke Testing: Smoke testing, also known as "Build Verification Testing" and "Confidence Testing," is a series of tests designed to evaluate the stability and viability of the software's delivered build. Smoke testing is used to determine whether an application should be shelved due to lack of functioning or moved on to the next stage of testing. Once the generated software functions have been merged with the software build, smoke testing is performed. Any failures in testing at this stage will almost always result in the application being sent back to the development team for changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-automated-tests"&gt;
  &lt;/a&gt;
  Why use automated tests?
&lt;/h2&gt;

&lt;p&gt;Pocket-friendly&lt;br&gt;
Contrary to popular belief, automated testing can be less expensive than manual testing. You can't conduct repeating tests with manual testing. In reality, the cost of manually testing your application increases over time. Automated testing, on the other hand, is less expensive in the long run since once you've built your test scripts, you can reuse them at any time without incurring additional costs. True, automation adoption is initially costly, but it will quickly pay for itself.&lt;/p&gt;

&lt;p&gt;It's important to remember that the amount of the automated testing ROI is determined by the extent of automation adoption. The bigger the return on investment is, the more automated test cases you create and use.&lt;/p&gt;

&lt;p&gt;Time-Saving&lt;br&gt;
You can save time by automating your tests. Automated tests are quick to complete and can be repeated. To put it another way, you won't have to wait weeks to do the tests again — only a few hours will be enough.&lt;/p&gt;

&lt;p&gt;Automated testing accelerates development by taking advantage of their quick execution and repeatability. Transitioning from manual testing to automation will shorten your development time and increase your productivity.&lt;/p&gt;

&lt;p&gt;Better Accuracy&lt;br&gt;
You're more likely to have error-free releases if you use test automation. Automated testing is more accurate than manual testing because it requires less human intervention. The problem is that a human tester can make mistakes at any stage of the review process. The machine, on the other hand, will not cooperate. Because generated test cases are more precise than human testers, you can lower the likelihood of failure by removing human errors.&lt;/p&gt;

&lt;p&gt;Immediate Feedback&lt;br&gt;
Another advantage of automated testing is that it provides immediate feedback. Developers receive testing reports instantaneously with fast test execution, so they can react swiftly if a problem happens. Forget about deciphering the code that was written three weeks ago.&lt;/p&gt;

&lt;p&gt;When your app is already on the market, immediate feedback is very useful. Manual testing can simply slow down the process if you need to fix some errors immediately. Test automation, on the other hand, will allow you to make quick changes to your application. As a result, automated testing leads to increased team responsiveness, improved user experience, and increased customer satisfaction.&lt;/p&gt;

&lt;p&gt;DevOps Implementation&lt;br&gt;
Every developer's commit to the source code must be tested as part of the CI/CD pipeline, and there's no other way to accomplish it fast and efficiently than with test automation. As a result, once you've deployed automated testing, transitioning to Continuous Testing and Delivery will be simple. When the complexity of the code and the number of test cases increases, it becomes increasingly difficult to manage.&lt;/p&gt;

&lt;p&gt;The good news is that we created a solution called UI-licious which is an all-in-one automation tool that helps anyone automate tests in minutes, not in hours. With our flexible testing solution, experienced testers, as well as non-coding beginners, can ensure that crucial error scenarios are quickly identified, so users do not encounter any unexpected failures when browsing your website or web app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-automated-testing"&gt;
  &lt;/a&gt;
  When to use automated testing?
&lt;/h3&gt;

&lt;p&gt;If you're running the same test again and again without altering it, it's likely that automating it would save you a lot of time. That's because having a manual task done on a frequent basis wastes your team's time and is likely to result in additional errors due to inattention.&lt;/p&gt;

&lt;p&gt;Human error is no longer a possibility thanks to automation. As a result, the adoption of automated testing can drastically increase quality in particular cases.&lt;/p&gt;

&lt;p&gt;The bottom line is that if you can save money while still delivering a high-quality product, do so. This is where automation really shines. Most automation technologies aren't cheap, so the project must be large enough to justify the investment. However, UI-licious has plans starting from $12 a month, which happen to be very cost-effective and pocket-friendly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-misconceptions-about-automation-testing"&gt;
  &lt;/a&gt;
  Common Misconceptions about Automation testing
&lt;/h3&gt;

&lt;p&gt;It is both true and incorrect that test automation will allow you to have more free time. The majority of manual testing time is spent on exploratory and functional testing, which involves manually searching for faults. Once that process is finished, the manual tester must perform the identical actions over and over again. That time is greatly reduced with automated testing. Instead of writing tests, automation testers spend their time coding them and improving them as needed. However, after the test is completed, automated testing enables for the reuse of tests, eliminating the need to repeat the entire procedure.&lt;/p&gt;

&lt;p&gt;Automated testing allows you to concentrate on more important topics like client needs, functionality, and enhancements. Furthermore, the software tests can be run each time the source code is amended. Manually performing these tests is time-consuming and expensive, whereas automated tests can be done repeatedly at no additional cost.&lt;/p&gt;

&lt;p&gt;Investing in automated testing may appear to be prohibitively expensive at first, especially if you're a small business. But that's not the case with UI-licious, our pricing is cost-effective because you can create tests fast. Indeed, you don't need to hire an expert who is proficient in a particular coding language to write your tests. Moreover, the monthly fee is derisory compared to most of the similar solutions.&lt;/p&gt;

&lt;p&gt;Another prevalent misunderstanding concerning automated testing is that it eliminates the need for human involvement. In all honesty, automated testing is more precise and faster than what people can accomplish without incurring significant human error, thus this misunderstanding is acceptable. This does not replace the need for face-to-face communication in software development. Instead, it increases that aspect by giving an additional communication route.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-to-and-not-to-automate"&gt;
  &lt;/a&gt;
  What to and not to automate
&lt;/h3&gt;

&lt;p&gt;Without necessarily automating tests end-to-end, testing tools can assist with tasks such as product installation, test data creation, GUI interaction, problem detection (think parsing or polling agents equipped with test oracles), defect tracking, and so on.&lt;/p&gt;

&lt;p&gt;We shouldn't try to automate negative or failover tests since they need testers to think analytically, and negative tests aren't always easy to offer a pass or fail result that can help us.&lt;/p&gt;

&lt;p&gt;Who should be involved with test automation?&lt;br&gt;
With short Agile iterations, testing frequently needs a "shift left" strategy. Because of the shift to the left in the agile development process, testing can begin considerably earlier in the application lifetime. As a result of this strategy, developers with strong technical skills are increasingly being held responsible for testing, and they frequently collaborate with testers to design test automation frameworks. When assessing a testing solution, it's critical to find one that meets the requirements of all team members who will be involved in the testing process. Manual testers, automation engineers, and developers are among them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-automate-your-tests"&gt;
  &lt;/a&gt;
  How to automate your tests?
&lt;/h3&gt;

&lt;p&gt;If you are wondering how to start with automation testing, you can follow this easy 5 step process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Select software or tools for testing.&lt;br&gt;
After you've decided which test to automate, you may look at the various testing tools accessible. Consider how a tool will operate with your present software platform before selecting one, as certain tools are better suited to a specific platform. Like UI-licious is a great choice because of its framework-agnostic character and cheaper solutions than most other products out there. Not only is it easy to start, but you also don’t need to master a coding language to implement your automated testing strategy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Determine which tests should be automated.&lt;br&gt;
Choose which test you wish to automate first. Manual and automated testing are used by many software engineers. Certain functionality may need to be manually tested. With UI-licious, you can get started with 0 coding knowledge.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plans, Designs, and Scripts&lt;br&gt;
After you have chosen your tools for automation, plan the design of the framework and its features. Then you can plan automation things that are in-scope and out-of-scope. Next, you can start scripting and execution of schedules and timelines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execute your automated tests&lt;br&gt;
During this phase, automation scripts are run. Before they may be set to run, some scripts require input test data. Once they’ve been run, they generate extensive test reports you can easily analyze and share with your team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maintain your test scripts&lt;br&gt;
The Test Automation Maintenance Approach is a phase of automation testing that is used to see if the new features added to the software are working properly. When new automation scripts are added, they must be reviewed and maintained in order to improve the effectiveness of automation scripts with each release cycle. UI-licious makes the maintenance easier because the scripting language relies less on CSS and XPATH selectors and more on user behaviors. Indeed, with our testing solution, you are actually creating scripts that are following the user journey you want to verify.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusion&lt;br&gt;
Test automation allows testers to devote more time to exploratory tests, which often uncover more flaws than any automated test. Because of these and other factors, test automation can make you save time and money on all your projects.&lt;/p&gt;

&lt;p&gt;And so, UI-licious is there to help you out in this world of automation testing.&lt;/p&gt;

&lt;p&gt;Apart from being a flexible and accessible way to start test automation, UI-licious provides precise results after testing, and the reports are also very informative and helpful, especially when looking up the history of past tests. It also provides a monitoring tab where we can see how our automation is progressing. It has a very user-friendly interface, and even non-technical individuals can understand the process.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>devops</category>
    </item>
    <item>
      <title>Learn How to Boost Productivity with Strapi</title>
      <author>Shada </author>
      <pubDate>Mon, 06 Dec 2021 11:44:20 +0000</pubDate>
      <link>https://dev.to/strapi/learn-how-to-boost-productivity-with-strapi-kd9</link>
      <guid>https://dev.to/strapi/learn-how-to-boost-productivity-with-strapi-kd9</guid>
      <description>&lt;p&gt;When we talk about boosting productivity in application management, we are talking about the ability to produce greater output with the same amount of input to reduce human labor, capital, and development time. &lt;/p&gt;

&lt;p&gt;Strapi is a tool that can be used in boosting productivity in any application.&lt;br&gt;
Boosting productivity helps meet the primary goals of the application. It will encourage each team member to improve their skills, and also it will help in rendering better services to the application users in an effective way. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Strapi&lt;/strong&gt;? &lt;br&gt;
Strapi is an open-source Node.js headless CMS based on Nodejs to build fast, dynamic, and easily manageable APIs written in JavaScript. strapi makes it easier to build applications using jamstack technology, which separates the backend from the frontend and enables dynamic applications.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-benefit-of-effective-productivity"&gt;
  &lt;/a&gt;
  The benefit of effective productivity
&lt;/h2&gt;

&lt;p&gt;There are many benefits of boosting productivity which vary from one application to another. Here are some of the major benefits of effective productivity of using strapi:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhanced team relationship&lt;/strong&gt; - effective productivity enables good communication between each team member as they work together to offer the best services. Each team will deliberate on improving the application and how they can work together to achieve their common goals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting and meeting goals&lt;/strong&gt; - it helps set and meet the application goals, In the sense that each member of the team knows how they can improve the application on their own using appropriate tools and work to achieve these common goals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhance better concentration&lt;/strong&gt; - it enables team members to focus on their part without depending on one another. While the backend team is working, the frontend team can be working on their part simultaneously. This enables each team member to be productive on their part. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It saves development time&lt;/strong&gt; - application build using jamstack technology always saves application development time. It allows the backend team to work on the application while the frontend team is working on the same application simultaneously without negatively affecting the application.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#strapi-installation-prerequisite"&gt;
  &lt;/a&gt;
  Strapi installation prerequisite
&lt;/h2&gt;

&lt;p&gt;Before installing strapi, the following software should have the following application installed on your computer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Npm&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#installation-of-strapi"&gt;
  &lt;/a&gt;
  Installation of strapi
&lt;/h2&gt;

&lt;p&gt;Installing the Strap is pretty straightforward. Use the following cmd code to create a new strapi project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npx create-strapi-app applicationname &lt;span class="nt"&gt;--quickstart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure that the folder to install the strapi is empty.&lt;/p&gt;

&lt;p&gt;This will install all the needed packages for this project. After the installation, our Strapi app will automatically be launched in our browser, then register for super admin users to manage the database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strapi-increases-productivity"&gt;
  &lt;/a&gt;
  Strapi increases productivity
&lt;/h2&gt;

&lt;p&gt;Strapi is used to increase application productivity because it has all the tools required to boost application productivity. Because of these tools, many applications are built using strapi.&lt;/p&gt;

&lt;p&gt;Strapi increase productivity through the following ways:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User-Friendly Interface&lt;/strong&gt;: &lt;br&gt;
Strapi has a very good user interface that enables the admin user to navigate and manage their resources and other team members. These features make it easy to learn how to interact with the Interface and make it simple to manage any team member.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: &lt;br&gt;
Strapi makes the applications scalable in the sense that whenever the frontend is having performance issues, it does not affect the backend because they are separated using jamstack technology. &lt;/p&gt;

&lt;p&gt;This helps increase productivity in the applications because the backend team does not have to wait for the frontend team to resolve the issue before working on their side. strapi enable independent components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plugin:&lt;/strong&gt; &lt;br&gt;
Strapi enables the admin to install any plugin needed for effective management of the application. A plugin can be installed from the strapi marketplace. Examples of plugins are content manager, content type builder, media library, international plugin e.t.c. All these plugins help to boost productivity in one way or the other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jamstack technology:&lt;/strong&gt; &lt;br&gt;
Strapi supports jamstack, which allows the frontend team to share content with the backend team via a RESTFUL API call. This allows dynamic delivery of content across many platforms. This helps boost productivity because it allows the application to load faster and makes SEO optimization very effective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-creators-focus-on-content"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Content creators focus on content&lt;/strong&gt;.
&lt;/h2&gt;

&lt;p&gt;Strapi allows different users with specific roles and permission on the dashboard. This helps to determine what type of actions each team member can perform on the dashboard.&lt;/p&gt;

&lt;p&gt;A team member with the &lt;strong&gt;author's&lt;/strong&gt; role will only be permitted to post content into the application, which will need the approval of the &lt;strong&gt;Editor&lt;/strong&gt; user or &lt;strong&gt;Super-admin&lt;/strong&gt; user after the review of the content. In contrast, a team member with an Editor role can create content without the super-admin user's approval and manage the content of the &lt;strong&gt;author&lt;/strong&gt; group.&lt;/p&gt;

&lt;p&gt;Strapi enables different team members to work on the application simultaneously without affecting the system. Content creators only have to focus on creating good, dynamic content and how to optimize this content effectively using the available tools provided by strapi in the dashboard.&lt;/p&gt;

&lt;p&gt;These tools include the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Target users:&lt;/strong&gt; it helps to deliver different content for different users in different areas. This enables you to render content for your users in their local language by translating them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content modeling&lt;/strong&gt; allows you to document all types of content that you'll need now and in the future to ensure it is effectively configured for multiple channels.&lt;br&gt;
It's possible to serve your user the content that they are looking for whenever they need it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The editor interface&lt;/strong&gt; enables restricted content access and automates workflows with webhooks to communicate with your team when content has been changed and is ready for editor review. With the editor interface creating content is made easy by strapi. It allows a content creator to add a description to content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devs-focus-on-dev-work"&gt;
  &lt;/a&gt;
  Devs focus on dev work
&lt;/h2&gt;

&lt;p&gt;With strapi used as a backend, developers only have to focus on the frontend because strapi is easy to set up, manage and connect to the frontend using jamstack technology. &lt;/p&gt;

&lt;p&gt;Developers do not have to worry about the security of the content. Strapi has them back up. The content exchange between strapi (backend) and the frontend is done via a RESTFUL API call, and these API calls have many functions that developers can use to suit their own needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multi-Medium Sharing:&lt;/strong&gt; Strapi allows developers to share content across different mediums. The same content can be shared with web applications, mobile applications, desktop applications simultaneously. This helps developers to focus on the content that will be displayed on each of the mediums used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cross-Platform Technology:&lt;/strong&gt; Strapi allows developers to use any programming language for their application as long as the language supports RESTFUL API. This tool is very useful because it enables different developers to work on one application using different programming languages. The have to do to get content is to make a RESTFUL API call to strap endpoint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we discussed boosting production with strapi, installing strapi as a tool for boosting productivity, the benefit of boosting productivity, and most importantly, looking at how strapi boosts productivity because of developers, tools, and content creators.&lt;/p&gt;

&lt;p&gt;Strapi is easy to learn and use. If you are looking for the best Headless CMS for your application to boost productivity and work with your team, you can get started with strapi checking their documentation page.&lt;/p&gt;

</description>
      <category>strapi</category>
      <category>cms</category>
      <category>headlesscms</category>
    </item>
    <item>
      <title>How to publish the package in npm?</title>
      <author>DhiWise</author>
      <pubDate>Mon, 06 Dec 2021 11:42:34 +0000</pubDate>
      <link>https://dev.to/dhiwise/how-to-publish-the-package-in-npm-48l2</link>
      <guid>https://dev.to/dhiwise/how-to-publish-the-package-in-npm-48l2</guid>
      <description>&lt;p&gt;In this guide, we will build a reusable module and publish it as a Node.js package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sbqU7i4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AlvGcTxZAcoy64yq-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbqU7i4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AlvGcTxZAcoy64yq-.jpeg" alt="Source: dev.[to](https://res.cloudinary.com/practicaldev/image/fetch/s--9BQakseJ--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/wnhbg07hmt77b5x94shs.jpeg)" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-npm"&gt;
  &lt;/a&gt;
  What is npm?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; (Node package manager) is the standard package manager of the &lt;a href="https://medium.com/swlh/node-js-explained-dad7b23d027d"&gt;Node.js &lt;/a&gt;ecosystem.&lt;/p&gt;

&lt;p&gt;npm is the most popular package manager for &lt;a href="https://www.stackchief.com/tutorials/JavaScript%20ES6%20Intro"&gt;JavaScript&lt;/a&gt;. It’s the most extensive online package repository, containing over one million packages. Also, it’s a command-line interface tool used by developers to manage their Node.js projects.&lt;/p&gt;

&lt;p&gt;Developers can easily share and update software. When developers find solutions to small but powerful problems, they submit their software to npm’s central registry. Here anybody can download the code as well as receive future updates on the ‘module’ or ‘package’. Some packages are widely used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-npm-is-working"&gt;
  &lt;/a&gt;
  How npm is working?
&lt;/h2&gt;

&lt;p&gt;As I mentioned, npm provides us command-line interface tool so it provides such important commands to use (add a dependency) in our project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install package.json dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install or npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;npm, install downloads a package and its dependencies. npm install can be run with or without arguments.&lt;/p&gt;

&lt;p&gt;if you run without arguments, npm install downloads dependencies defined in a &lt;a href="https://npm.github.io/how-npm-works-docs/theory-and-design/what-is-a-package.html"&gt;**package.json&lt;/a&gt;** file and generates a &lt;strong&gt;node_modules&lt;/strong&gt; folder with the installed modules.&lt;/p&gt;

&lt;p&gt;npm, install also generates a &lt;strong&gt;package-lock.json&lt;/strong&gt; file. This file describes the exact dependency tree that was installed. This makes it easier for subsequent installs to use the exact same tree.&lt;/p&gt;

&lt;p&gt;if you run with arguments, npm install downloads specific modules to the &lt;strong&gt;node_modules&lt;/strong&gt; folder. and add dependency in package.json file and package-lock.json.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i &amp;lt;packag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#options-for-installing-packages"&gt;
  &lt;/a&gt;
  Options for installing packages.
&lt;/h2&gt;

&lt;p&gt;npm install can be run with different options. Here are some of the more important ones to be aware of.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) npm install (with — global)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install -g
or
$ npm install --global
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;if you run with — global or -g, npm install installs the package globally. This means the package is installed in two places. The first is at the root directory where &lt;strong&gt;package.json&lt;/strong&gt; is defined. The second is the global &lt;strong&gt;node_modules&lt;/strong&gt; folder on the user system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) npm install (with — save)&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install &amp;lt;package&amp;gt; --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;if you run with — save, npm install modifies the &lt;strong&gt;package.json&lt;/strong&gt; file to include the specified package as a dependency. In this case, the package will be added as a dependency to package.json. The — save option is important whenever you want future installs to include the specified package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) npm install (with — save-dev)&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install &amp;lt;package&amp;gt; --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The — save-dev flag specifies that the package should be added to the devDependencies section of the &lt;strong&gt;package.json&lt;/strong&gt; rather than the dependencies section.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other few Commands which is useful when you deal with npm.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;List globally installed packages&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm list -g --depth=0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Uninstall global package&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm -g uninstall &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Update global packages&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm outdated -g --depth=0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;List available scripts to run&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Update npm&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g npm@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#types-of-npm-package"&gt;
  &lt;/a&gt;
  Types of npm package:
&lt;/h2&gt;

&lt;p&gt;There are two types of npm packages.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;private&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;public&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#private-packages"&gt;
  &lt;/a&gt;
  Private packages
&lt;/h2&gt;

&lt;p&gt;With npm private packages, you can use the npm registry to host code that is only visible to you and your chosen collaborators, allowing you to manage and use private code alongside public code in your projects. &lt;a href="https://docs.npmjs.com/about-private-packages"&gt;see more&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#public-packages"&gt;
  &lt;/a&gt;
  Public Packages
&lt;/h2&gt;

&lt;p&gt;As an npm user or organization member, you can create and publish public packages that anyone can download and use in their own projects. &lt;a href="https://docs.npmjs.com/about-public-packages"&gt;see more&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-and-publish-public-packages"&gt;
  &lt;/a&gt;
  Create and Publish Public packages
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Go to &lt;a href="https://www.npmjs.com/"&gt;https://www.npmjs.com/&lt;/a&gt; and create a new account If you don’t already have an account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Create Project if you don’t already have a project.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir publish-npm-test
$ cd publish-npm-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Open terminal and hit npm init command&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This command will help you to create a new package.json and it will ask you for the basic information which will be useful to publish the package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Now add proper detail to your project.&lt;/p&gt;

&lt;p&gt;Package name: guidelines of npm docs for the package name. ex. publish-npm-test&lt;/p&gt;

&lt;p&gt;Version: you will be advised to start your project with version 1.0.0, however, if you are just starting your project you’re probably better off starting with something like 0.0.1 and switching to 1.0.0 when the code has been tested further. Also, other developers using your library will appreciate that your versioning reflects the state of your code.&lt;/p&gt;

&lt;p&gt;Git repository: Add the link to your git repository if you have.&lt;/p&gt;

&lt;p&gt;Description: it should be straight to the point and easy to understand.&lt;/p&gt;

&lt;p&gt;Entry point: This is the entry file for your library. default index.js&lt;/p&gt;

&lt;p&gt;keywords: it can help identify a &lt;strong&gt;package&lt;/strong&gt;, related modules and software, and concepts.&lt;/p&gt;

&lt;p&gt;License (ISC): The &lt;strong&gt;ISC license&lt;/strong&gt; is a permissive free software &lt;strong&gt;license&lt;/strong&gt; published by the Internet Software Consortium, nowadays called Internet Systems Consortium (&lt;strong&gt;ISC&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Now Your Package.json file is ready.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Create an index.js file&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("my first npm package");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: Testing the created npm package using require statement.&lt;/p&gt;

&lt;p&gt;Now, you are done with creating the npm package but before publishing it to the npm repository, you need to make sure it works when you use it&lt;/p&gt;

&lt;p&gt;using require or import statement.&lt;/p&gt;

&lt;p&gt;go to the publish-npm-test directory.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm link
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Executing npm link the command creates a symbolic link for your current package inside the global npm node_modules folder (The same folder where our global npm dependencies get installed).&lt;/p&gt;

&lt;p&gt;Now, create a test directory, for testing our package.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir test-package 
$ cd test-package 
$ npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;the name property in our package’s package.json file was publish-npm-test so you need to require the package using the same name.&lt;/p&gt;

&lt;p&gt;Now, execute the following command from inside the test-package folder to use the package you created:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm link publish-npm-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Create a new file with the name index.js and add the following code inside it:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require("publish-npm-test");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, execute the index.js file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You will see the output displayed:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my first npm package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, when you publish the npm package on the npm repository, anyone can use it by installing it and using the require or import statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt;: Publish to the npm repository.&lt;/p&gt;

&lt;p&gt;Open terminal and from inside the publish-npm-test folder execute the following command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm whoami
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;if you are already login you will see your username.&lt;/p&gt;

&lt;p&gt;if you are not logged in then hit the following command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and enter your npm credentials to log in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z644X662--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2234/0%2ATwfEmR00rBy6a8Yq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z644X662--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2234/0%2ATwfEmR00rBy6a8Yq.jpg" alt="" width="880" height="71"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, to publish it to the npm repository run the following command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;you will get an error if the package name has already registered with the same name or if your account is not verified. otherwise, you’ll be able to publish the package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--91einhnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2226/0%2AQ9kKLrzdSGLY9R2h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--91einhnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2226/0%2AQ9kKLrzdSGLY9R2h.jpg" alt="" width="880" height="207"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you navigate to your profile in &lt;a href="https://www.npmjs.com/"&gt;npmjs.com&lt;/a&gt; you will see your published package in your profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CqOS837d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2732/0%2AIl1G38qs6izaKNro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CqOS837d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2732/0%2AIl1G38qs6izaKNro.png" alt="" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, anyone can install your public package and use it in their project by the following command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install publish-npm-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 8&lt;/strong&gt;: Now, adding some changes in code with the readme file. and then publish again.&lt;/p&gt;

&lt;p&gt;Go to the publish-npm-test directory and do some changes to index.js the file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("my first npm package");
function sayHello(username){
  console.log(`Hello ${username} from publish-npm-test package`);
}
module.exports = sayHello;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and add a readMe file.&lt;/p&gt;

&lt;p&gt;The importance of the readMe file is to help others find your packages on npm and have a good experience using your code in their projects, we recommend including a README file in your package directory. Your README file may include directions for installing, configuring and using the code in your package, as well as any other information a user may find helpful.&lt;/p&gt;

&lt;p&gt;readMe.md&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# This is Sample Test Package.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, Let’s try to publish it again using the npm publish command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HvSJVWSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2216/0%2AcE2cyWXBI6A5yV24.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HvSJVWSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2216/0%2AcE2cyWXBI6A5yV24.jpg" alt="" width="880" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’ll give an error. This is because you are publishing the package with the same version again.&lt;/p&gt;

&lt;p&gt;If you check our package.json file, you will see that the version mentioned in the file is 1.0.0You need to increment it every time publishing a new change. So what should you increment to? For that, you need to understand the semantic versioning concept.&lt;/p&gt;

&lt;p&gt;So you’ll have to change the version inside package.json file from 1.0.0 to 1.0.1 and run the npm publish command again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#semantic-versioning-in-npm"&gt;
  &lt;/a&gt;
  Semantic versioning in npm
&lt;/h2&gt;

&lt;p&gt;The semantic versioning spec helps other developers who depend on your code understand the extent of changes in a given version, and adjust their own code if necessary.&lt;/p&gt;

&lt;p&gt;To help developers who rely on your code, we recommend starting your package version at 1.0.0 and incrementing as follows:&lt;/p&gt;

&lt;p&gt;You can specify which update types your package can accept from dependencies in your package’s package.json file.&lt;/p&gt;

&lt;p&gt;The Semantic Versioning concept is simple: all versions have 3 digits: x.y.z.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the first digit is the major version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the second digit is the minor version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the third digit is the patch version.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you make a new release, you don’t just up a number as you please, but you have rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;you up the major version when you make incompatible API changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you up the minor version when you add functionality in a backward-compatible manner.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you up the patch version when you make backward-compatible bug fixes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://docs.npmjs.com/about-semantic-versioning"&gt;See More&lt;/a&gt; about Semantic Versioning in npm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remove-package-from-npm"&gt;
  &lt;/a&gt;
  Remove Package from npm
&lt;/h2&gt;

&lt;p&gt;To Remove Your published npm package open the terminal to your directory and hit the following command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm unpublish &amp;lt;package&amp;gt;@&amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Your public package will be removed from the npm registry.&lt;br&gt;
**References&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/myogeshchavan97/how-to-create-and-publish-an-npm-package-20ln"&gt;dev&lt;/a&gt;**&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Getting Started with Astro: Build React &amp; Svelte Islands</title>
      <author>Rodney Lab</author>
      <pubDate>Mon, 06 Dec 2021 11:21:31 +0000</pubDate>
      <link>https://dev.to/askrodney/getting-started-with-astro-build-react-svelte-islands-408i</link>
      <guid>https://dev.to/askrodney/getting-started-with-astro-build-react-svelte-islands-408i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-astro"&gt;
  &lt;/a&gt;
  🚀 What is Astro?
&lt;/h2&gt;

&lt;p&gt;Before getting started with Astro, the pertinent question is what on Earth is Astro?  To describe SvelteKit you can say it's NextJS but for Svelte and a lot of people instantly know what SvelteKit does.  Astro is a novel concept and so takes a little more explaining.  Let's talk about what Astro lets you do.  Astro lets you &lt;strong&gt;build fast apps with minimal JavaScript&lt;/strong&gt; writing your code in HTML and vanilla JavaScript, React, Svelte or any mixture of those or a number of other languages.  It is already clear Astro is quite different to NextJS, SvelteKit or Gatsby.  What is does have in common with Gatsby is &lt;strong&gt;static site generation&lt;/strong&gt;, though that is where the similarities end.  Astro has its own Go compiler and uses vite tooling under the hood.  This allows for a modern and more importantly &lt;strong&gt;fast developer experience&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As well as &lt;strong&gt;partial hydration&lt;/strong&gt;, Astro offers an &lt;strong&gt;islands architecture&lt;/strong&gt;.  Don't worry if you don't yet know exactly what those terms mean, that's what we will look into next.  In short Astro makes your app pages load faster.  You get control of how your components load.  You can instruct the browser to load a video part way down the page &lt;strong&gt;only when visible&lt;/strong&gt;. Or the browser can work on your analytics code only &lt;strong&gt;when the main thread is idle&lt;/strong&gt; (so we can optimise user experience) and you can even set certain components &lt;strong&gt;only to load on mobile or desktop&lt;/strong&gt;. Now you see how different Astro is to other tools, let's take a deeper dive into the terms we introduced and how you can start using Astro.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-partial-hydration"&gt;
  &lt;/a&gt;
  🧊 What is Partial Hydration?
&lt;/h2&gt;

&lt;p&gt;Although partial hydration sounds like the marketing hype you might find on a new gym training supplement, it is actually a smart and effective idea.  Essentially you send your page from the server to the client initially as pure HTML.  By default &lt;strong&gt;Astro ships zero JavaScript&lt;/strong&gt;.  This is the secret to Astro's speed.  From your JavaScript 101 course though, you will remember it is the JavaScript which makes you page interactive.  That's where hydration comes in; hydration is the process of loading the JavaScript on your site page.&lt;/p&gt;

&lt;p&gt;What if your site does not need to be interactive? You might have an FAQ page which just contains questions and answers with no forms, video or anything interactive which needs JavaScript.  That's fine, we serve our page as pure HTML and never need to hydrate it.  Astro is great for this kind of content.  What if you wanted to add a comments section at the bottom of the page? Now you need JavaScript, but in fact you only need it once the user scrolls down to the bottom of the page.  Astro can hydrate that comment form at the optimum time, again allowing your page to load quickly.  Astro only hydrates the parts of the page which need hydration.  This is partial hydration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seo-benefits"&gt;
  &lt;/a&gt;
  SEO Benefits
&lt;/h3&gt;

&lt;p&gt;As well as user experience benefits, Astro has Search Engine Optimisation (SEO) advantages.  With full hydration, essentially nothing is interactive until everything is interactive and the server ends up &lt;a href="https://nicholasreese.com/lessons-from-building-a-static-site-generator/"&gt;sending a larger bundle to the browser&lt;/a&gt; and &lt;a href="https://addyosmani.com/blog/rehydration/"&gt;rehydration can heavily delay time-to-interactive&lt;/a&gt;. This can impact &lt;strong&gt;first input delay&lt;/strong&gt;, one of Google's Core Web vitals statistics.  It is &lt;a href="https://yoast.com/a-primer-on-javascript-seo-for-wordpress/#h-seo-challenges"&gt;vastly more expensive to download and run JavaScript than simple HTML&lt;/a&gt;.  Limiting JavaScript to the pages or parts of pages that need it should mean search engines like Google can crawl more content from your site in the time window allotted to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%9D-what-is-an-islands-architecture"&gt;
  &lt;/a&gt;
  🏝 What is an Islands Architecture?
&lt;/h2&gt;

&lt;p&gt;Islands architecture relates to the partial hydration technique we just looked at.  Astro's philosophy is to create &lt;strong&gt;Islands of Interactivity&lt;/strong&gt; which the browser can hydrate independently.  Treating each interactive element as independent allows you to optimise how it loads.  For Core Web Vitals you will want a banner image at the top of the page to load instantly.  You could go for pure HTML, but showing a low resolution placeholder while you wait for the responsive image to load reduces cumulative layout shift. In summary typically you want your banner image to load instantly.  That is not the same for an image or video half way down the page. We can load these as they come into view.  Remember with partial hydration we ship just the JavaScript  we need.&lt;/p&gt;

&lt;p&gt;Another island of interactivity might be an image carousel.  What if you have different carousel components for mobile and desktop?  With islands architecture you can load the specific one you need and forget the other.  What about the chat bot that helps users with potential issues? Why not wait until the main thread is idle and then load it? All of these use cases result in your server shipping less code and the browser loading less code at a time, leading to increased efficiency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-astro"&gt;
  &lt;/a&gt;
  😕 Why use Astro?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;it is &lt;strong&gt;fast&lt;/strong&gt; — you get better user experience and expect a SEO boost as a bonus,&lt;/li&gt;
&lt;li&gt;you can use a language you already know, &lt;strong&gt;React, Svelte, Vue, Markdown or plain HTML&lt;/strong&gt;,&lt;/li&gt;
&lt;li&gt;you can mix components from different languages, letting you &lt;a href="https://rodneylab.com/tags/sveltekit/"&gt;&lt;strong&gt;gradually pick up Svelte&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Astro however, is not a one size fits all solution.  It excels at building static sites, though will not be ideal when you really need a server side rendered app.  As an example, let's say you were rebuilding Twitter. A static site does not fit this use case since you cannot fully customise for each user with a static model. Don't, however, interpret this to mean that you cannot have JavaScript or interactivity on a static site. You can still have a contact form or interactive feedback elements, the difference is that it becomes harder to customise them completely for a logged in user.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-create-a-minimal-astro-app"&gt;
  &lt;/a&gt;
  🧱 How do you Create a Minimal Astro App?
&lt;/h2&gt;

&lt;p&gt;Blasting off on your new Astro project is as simple as typing a few commands to fire up the CLI and selecting &lt;strong&gt;Minimal&lt;/strong&gt; when prompted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;my-new-project &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
pnpm init astro
pnpm &lt;span class="nb"&gt;install
&lt;/span&gt;pnpm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;During this setup process you can alternatively choose from a list of Generic, Blog or a few other project types for your launchpad.  By default Astro will start up on TCP port &lt;code&gt;3000&lt;/code&gt; but don't worry if you already have something running there, it should be able automatically to find another available post.  The CLI will tell you which port it settles for:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;17:25 &lt;span class="o"&gt;[&lt;/span&gt;astro] Port 3000 &lt;span class="k"&gt;in &lt;/span&gt;use. Trying a new one…
17:25 &lt;span class="o"&gt;[&lt;/span&gt;astro] Server started                               63ms
17:25 &lt;span class="o"&gt;[&lt;/span&gt;astro] Local: http://localhost:3001/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getting-started-with-astro-whats-inside"&gt;
  &lt;/a&gt;
  🧐 Getting Started with Astro: What's Inside?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
.
├── README.md
├── astro.config.mjs
├── package.json
├── pnpm-lock.yaml
├── public
│   ├── favicon.ico
│   └── robots.txt
├── sandbox.config.json
└── src
    └── pages
        └── index.astro
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;README.md&lt;/code&gt; file contains some tips on getting going, eventually you will replace it with your project's own documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;astro.config.mjs&lt;/code&gt; is the main Astro config file.  To use React or Svelte components in our project, we will need to install the React renderer (&lt;code&gt;@astrojs/renderer-react&lt;/code&gt;) or Svelte renderer (&lt;code&gt;@astrojs/renderer-svelte&lt;/code&gt;) and include whichever (or both) in the renderers array of this config file:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Full Astro Configuration API Documentation:&lt;/span&gt;
&lt;span class="c1"&gt;// https://docs.astro.build/reference/configuration-reference&lt;/span&gt;

&lt;span class="c1"&gt;// @type-check enabled!&lt;/span&gt;
&lt;span class="c1"&gt;// VSCode and other TypeScript-enabled text editors will provide auto-completion,&lt;/span&gt;
&lt;span class="c1"&gt;// helpful tooltips, and warnings if your exported object is invalid.&lt;/span&gt;
&lt;span class="c1"&gt;// You can disable this by removing "@ts-check" and `@type` comments below.&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;imagetools&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vite-imagetools&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// @ts-check&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="cm"&gt;/** @type {import('astro').AstroUserConfig} */&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// Comment out "renderers: []" to enable Astro's default component support.&lt;/span&gt;
  &lt;span class="na"&gt;renderers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@astrojs/renderer-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@astrojs/renderer-svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;vite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// for example only - adapt for your own project&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;imagetools&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;force&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;buildOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;sitemap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;site&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On top top you will add any &lt;code&gt;vite&lt;/code&gt; plugins you use in here too.  For example, you might want to &lt;a href="https://rodneylab.com/using-vanilla-extract-sveltekit/"&gt;style your app with vanilla-extract&lt;/a&gt;.  We include the &lt;code&gt;vite-imagetools&lt;/code&gt; plugin here just as an example of how to add a vite plugin to the config.  Astro switched &lt;a href="https://astro.build/blog/astro-021-release/"&gt;from snowpack tooling to vite in version 0.21&lt;/a&gt;.  So, if you find content referencing a snowpack config file ignore this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;: this is the regular file you will be familiar with from other projects.  In here you will find default &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;preview&lt;/code&gt; scripts.  It is worth building locally frequently as you develop to check things work as expected.  To do this, stop your dev server then run &lt;code&gt;pnpm run build&lt;/code&gt; and finally &lt;code&gt;pnpm run preview&lt;/code&gt; to spin up the built static site.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sandbox.config.js&lt;/code&gt;: config for &lt;a href="https://codesandbox.io/docs/importing"&gt;running a CodeSandbox&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#public-and-src-folders"&gt;
  &lt;/a&gt;
  public and src folders
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;public/&lt;/code&gt; this is like the &lt;code&gt;static&lt;/code&gt; folder in SvelteKit.  You can throw your PWA &lt;code&gt;manifest.json&lt;/code&gt; file, favicons and &lt;code&gt;robots.txt&lt;/code&gt; files in here.  In essence, the folder is for anything which does not need processing by vite or Astro.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;src/&lt;/code&gt;: this is where your app files will go.  &lt;code&gt;src/pages&lt;/code&gt; is used for file-based routing, which you might already be familiar with from NextJS or SvelteKit.  Essentially when you create a file in this folder, your app will have a page on the equivalent route.  So &lt;code&gt;src/pages/about.astro&lt;/code&gt; content will appear on the &lt;code&gt;https://example.com/about/&lt;/code&gt; page of your final app.  &lt;code&gt;.astro&lt;/code&gt; files contain markup for your pages.  You can consider the code in them to be a superset of HTML, meaning valid HTML code works in them and there are some extra features.  We will look into these in a little more detail below.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#10-quick-astro-features-gotchas"&gt;
  &lt;/a&gt;
  📝 10 Quick Astro Features / Gotchas
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Astro supports TypeScript out of the box.&lt;/li&gt;
&lt;li&gt;Astro supports Markdown input files out of the box as well as &lt;a href="https://github.com/remarkjs/remark-rehype"&gt;remark and rehype plugins&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You need to install the React renderer to use React components:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; @astrojs/renderer-react react react-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;remember also to add this to the &lt;code&gt;renderers&lt;/code&gt; array in &lt;code&gt;astro.config.mjs&lt;/code&gt; (see above).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You need to install the Svelte renderer to use Svelte components:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; @astrojs/renderer-svelte
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As with React, remember also to add this to the &lt;code&gt;rendered&lt;/code&gt; array in &lt;code&gt;astro.config.mjs&lt;/code&gt; (see above).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You can install all your dependencies as dev dependencies (e.g. &lt;code&gt;pnpm i -D my-package&lt;/code&gt;).  Like SvelteKit Astro used ES Modules and vite takes care of bundling packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We add global scripts to our Astro page header or components.  Either way, if you include the &lt;code&gt;hoist&lt;/code&gt; key term the script will be included in the page head section.  Even if you include the same script in multiple instances of a component, Astro will only add it once.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;     &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;hoist&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://js.hcaptcha.com/1/api.js?render=explicit"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;You can add SEO meta directly to &lt;code&gt;.astro&lt;/code&gt; page head sections, similarly to scripts:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;{metadescription}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt;
    &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"robots"&lt;/span&gt;
    &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com/page/"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;We need to add the autoprefixer manually by including a &lt;code&gt;postcss.config.cjs&lt;/code&gt; file in the project root folder:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and also install the package itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; autoprefixer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Astro has inbuilt ability to create an XML sitemap automatically on build.  You can also set Astro to generate RSS feeds.  For a sitemap, just update the config file thus:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="cm"&gt;/** @type {import('astro').AstroUserConfig} */&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;renderers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@astrojs/renderer-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@astrojs/renderer-svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;buildOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;sitemap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;site&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://astro.build/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;If you need access to the site build timestamp, for example in SEO components, add this snippet to the config file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="cm"&gt;/** @type {import('astro').AstroUserConfig} */&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;renderers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@astrojs/renderer-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@astrojs/renderer-svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;vite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;define&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;process.env.VITE_BUILD_TIME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then you can access this in a component via &lt;code&gt;process.env.VITE_BUILD_TIME&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%A5-what-goes-in-an-astro-file"&gt;
  &lt;/a&gt;
  🖥 What goes in an Astro File?
&lt;/h2&gt;

&lt;p&gt;We mentioned earlier that Astro is a superset of HTML.  This means you have access to the HTML head section in the &lt;code&gt;.astro&lt;/code&gt; markup files and can add stylesheets and scripts.  If you are used to React this is a little different, as there is no need to add a package like &lt;code&gt;react-helmet&lt;/code&gt; to inject SEO markup, for example, to the HTML head section.&lt;/p&gt;

&lt;p&gt;As well as the markup itself, the &lt;code&gt;.astro&lt;/code&gt; files have an initial frontmatter section.  It is demarcated like Markdown frontmatter with three dashes (&lt;code&gt;---&lt;/code&gt;) at the start and end.  However, it is more flexible than Markdown frontmatter and allows JavaScript and even top level await (no need to wrap your async function expressions as an IIFE).  You use the frontmatter section to import components. You can import React and Svelte components into the same file.  Import using the familiar JavaScript syntax, just use the filename as it appears on the disk (this is contrary to how earlier Astro version worked, which you may see in old example code).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;--------
import ExampleReactComponent from '../components/exampleReactComponent.tsx';
import ExampleSvelteComponent from '../components/exampleSvelteComponent.svelte';
import { Markdown } from 'astro/components';
import BaseLayout from '../layouts/BaseLayout.astro';
--------

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en-GB"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;RodneyLab Minimal Astro Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-dark-hue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-dark-saturation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-dark-luminance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-light-text-hue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-light-text-saturation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-light-text-luminance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--spacing-8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--spacing-0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--spacing-32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we knows the basics, let's look at some of the Astro aspects in more detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-tips-for-getting-started-with-astro"&gt;
  &lt;/a&gt;
  🌟 10 Tips for Getting Started with Astro
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-getting-started-with-astro-vscode-integration"&gt;
  &lt;/a&gt;
  1. Getting Started with Astro: VSCode Integration
&lt;/h3&gt;

&lt;p&gt;Astro have created an official VSCode plugin.  You can find it in VSCode by going to *&lt;em&gt;View / Extensions *&lt;/em&gt; then searching for Astro.  The official extension has a blue tick and the publisher is Astro.  This extension will give you syntax highlighting.  For more detail &lt;a href="https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode"&gt;see the extension in the VSCode market place&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pOHQ6H30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s8bo66ap53z24goq37y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pOHQ6H30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s8bo66ap53z24goq37y.png" alt="Getting Started with Astro: VSCode Extension: Screenshot shows V S Code extension in the extensions window of V S Code. Title is Astro, 9015 download are shown and version is v 0.8.1.  Publisher is Astro" width="880" height="727"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-learning-astro-prettier-formatting-extension"&gt;
  &lt;/a&gt;
  2. Learning Astro: Prettier Formatting Extension
&lt;/h3&gt;

&lt;p&gt;There is also an &lt;a href="https://github.com/withastro/prettier-plugin-astro"&gt;official prettier plugin for formatting .astro files&lt;/a&gt;.  You can use your usual extensions for formatting Markdown, React, Svelte.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; prettier prettier-plugin-astro
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Consider setting up a couple of &lt;code&gt;package.json&lt;/code&gt; scripts so you can format conveniently from the command line and also integrate formatting into your continuous integration process using Husky:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"getting-started-astro"&lt;/span&gt;,
  &lt;span class="s2"&gt;"version"&lt;/span&gt;: &lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;,
  &lt;span class="s2"&gt;"private"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
  &lt;span class="s2"&gt;"scripts"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"dev"&lt;/span&gt;: &lt;span class="s2"&gt;"astro dev"&lt;/span&gt;,
    &lt;span class="s2"&gt;"start"&lt;/span&gt;: &lt;span class="s2"&gt;"astro dev"&lt;/span&gt;,
    &lt;span class="s2"&gt;"build"&lt;/span&gt;: &lt;span class="s2"&gt;"astro build"&lt;/span&gt;,
    &lt;span class="s2"&gt;"preview"&lt;/span&gt;: &lt;span class="s2"&gt;"astro preview"&lt;/span&gt;,
    &lt;span class="s2"&gt;"format"&lt;/span&gt;: &lt;span class="s2"&gt;"prettier --write --plugin-search-dir=. ."&lt;/span&gt;,
    &lt;span class="s2"&gt;"prettier:check"&lt;/span&gt;: &lt;span class="s2"&gt;"prettier --check --plugin-search-dir=. ."&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So to format all files in the project you can just run &lt;code&gt;pnpm run format&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-getting-started-with-astro-favicon"&gt;
  &lt;/a&gt;
  3. Getting Started with Astro: Favicon
&lt;/h3&gt;

&lt;p&gt;The minimal starter code includes a &lt;code&gt;rel&lt;/code&gt; tag for a favicon in ico format.  If you prefer to use a PNG file you can, of course, just replace this.  Either way, place your favicon file, whether it is in PNG or ICO format in the &lt;code&gt;public&lt;/code&gt; folder of your project and it will be included in your app build.  If you are building a Progressive Web App add all the icons needed together with the &lt;code&gt;manifest.json&lt;/code&gt; file to the &lt;code&gt;public&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Instead of adding this &lt;code&gt;rel&lt;/code&gt; tag to each route file in your project, use Astro layout files.  You can use these for content which is the same on many pages.  As an example you can normally include headers and footers in a layout file.  The expected location for layouts is a &lt;code&gt;src/layouts&lt;/code&gt; folder.  Here we define &lt;code&gt;BaseLayout.astro&lt;/code&gt; and include the &lt;code&gt;rel&lt;/code&gt; tag (for the favicon) in the HTML &lt;code&gt;head&lt;/code&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en-GB"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!-- header content --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!-- header content --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then import this layout into any page files in which we want to use it.  In this example code above, we include the header and footer in the layout.  Then the &lt;code&gt;&amp;lt;slot /&amp;gt;&lt;/code&gt; tag serves as a placeholder for content from whichever pages chose to use the layout. As an example we could use this layout on our home page like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;--------
import BaseLayout from '../layouts/BaseLayout.astro';
--------

&lt;span class="nt"&gt;&amp;lt;BaseLayout&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Home Page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Home page content.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/BaseLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anything inside the &lt;code&gt;BaseLayout&lt;/code&gt; tags gets inserted into the layout in place of &lt;code&gt;&amp;lt;slot /&amp;gt;&lt;/code&gt;.  You see this cuts down on repeating boilerplate code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-getting-started-with-astro-selfhosted-fonts"&gt;
  &lt;/a&gt;
  4. Getting Started with Astro: Self-hosted Fonts
&lt;/h3&gt;

&lt;p&gt;Self hosting fonts can make your pages load faster.  The fontsource project supports many Google fonts and other open source fonts, making it easy to self-host in your project.  You can download the packages for any fonts you want to use.  For fonts which you use on every page, import in a layout file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm add @fontsource/montserrat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;--------
import '@fontsource/montserrat';
--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-getting-started-with-astro-server-or-browser"&gt;
  &lt;/a&gt;
  5. Getting Started with Astro: Server or Browser?
&lt;/h3&gt;

&lt;p&gt;At some point when working in React or Svelte, you will need to add a check to see if your code is running on the (build or dev) server or actually in the browser.  As an example you might run a media query in your React code to check if the user prefers reduced motion.  This involves accessing the &lt;code&gt;window&lt;/code&gt; object, which will not be defined on the server.  Astro has your back here. To stop your code crashing, you can include a check to make sure it only runs on the browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ssr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SSR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reduceMotion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ssr&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-reduced-motion: reduce)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;ssr&lt;/code&gt; will be false when code runs in browser.  On the server, shortcut evaluation will result in &lt;code&gt;reduceMotion&lt;/code&gt; being set to false without evaluating the second part where &lt;code&gt;window&lt;/code&gt; is used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-learning-astro-environment-variables"&gt;
  &lt;/a&gt;
  6. Learning Astro: Environment Variables
&lt;/h3&gt;

&lt;p&gt;Environment variables offer a way to use private keys in your code, without including them in the files which you commit, for example to GitHub.  Typically you will need to include some environment variables which you need exposed on the client.  As an example, if you use hCaptcha on your forms, there is a site key which you need to submit from the user's browser to hCaptcha servers for each challenge.  You will also have some secret variables which you will never want exposed on the client.  To avoid accidentally exposing these secret variables, Astro, makes you add a &lt;code&gt;PUBLIC_&lt;/code&gt; prefix to environment variables which you have to expose on the client.  You put these in the &lt;code&gt;.env&lt;/code&gt; file as usual:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PUBLIC_TWITTER_USERNAME="@askRodney"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For convenience, you might import all client environment variables into a single configuration file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;website&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;twitterUsername&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PUBLIC_TWITTER_USERNAME&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;website&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then use them in any client side code where needed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;website&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../configuration/website&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;twitterUsername&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;website&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-getting-started-with-astro-node-packages"&gt;
  &lt;/a&gt;
  7. Getting Started with Astro: Node Packages
&lt;/h3&gt;

&lt;p&gt;You can use node inbuilt packages (&lt;code&gt;fs&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, etc.) in Astro, you just need to prefix them with &lt;code&gt;node:&lt;/code&gt;.  As an example in this snippet from a &lt;code&gt;.astro&lt;/code&gt; file frontmatter, we look for blog posts in a particular directory in our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;import fs from 'node:fs';
import path from 'node:path';

const __dirname = path.resolve();
const BLOG_PATH = path.join(__dirname, 'content/blog');
const directories = fs
  .readdirSync(BLOG_PATH)
  .filter((element) =&amp;gt; fs.lstatSync(`${BLOG_PATH}/${element}`).isDirectory());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use this in your &lt;code&gt;astro.config.mjs&lt;/code&gt; file.  A great use case is to add the node path module to help you define path aliases.  Path aliases save you having to type out full relative path prefixes (like &lt;code&gt;../../&lt;/code&gt;) and make refactoring easier.  You can define them in your Astro config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node:path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// @ts-check&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="cm"&gt;/** @type {import('astro').AstroUserConfig} */&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// Comment out "renderers: []" to enable Astro's default component support.&lt;/span&gt;
  &lt;span class="na"&gt;renderers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@astrojs/renderer-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@astrojs/renderer-svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;buildOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;sitemap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;site&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://astro.build/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;vite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;$src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;$components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;$layouts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/layouts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;define&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;process.env.VITE_BUILD_TIME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in your source files you can replace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;--------
import ExampleReactComponent from '../components/exampleReactComponent.tsx';
import ExampleSvelteComponent from '../components/exampleSvelteComponent.svelte';
import { Markdown } from 'astro/components';
import BaseLayout from '../layouts/BaseLayout.astro';
--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;--------
import ExampleReactComponent from '$components/exampleReactComponent.tsx';
import ExampleSvelteComponent from '$components/exampleSvelteComponent.svelte';
import { Markdown } from 'astro/components';
import BaseLayout from '$layouts/BaseLayout.astro';
--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Props to folks in the &lt;a href="https://astro.build/chat"&gt;Astro discord&lt;/a&gt; for this tip.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-getting-started-with-astro-styling"&gt;
  &lt;/a&gt;
  8. Getting Started with Astro: Styling
&lt;/h3&gt;

&lt;p&gt;Astro supports styled components, vanilla-extract, scss and many other flavours of styling.  Since we can't get through all of those here, let's look at good old CSS!  For your Svelte components, you can include scoped CSS styles like you would in SvelteKit, for example.  For React you can include styles inline, or opt for CSS modules.  In the demo code, we went for another Astro alternative.  We define the scoped styles in the &lt;code&gt;.astro&lt;/code&gt; file which includes the React component.  For this to work, we need to use the &lt;code&gt;:global&lt;/code&gt; selector.  Here we have the styles defined in head section of the &lt;code&gt;.astro&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en-GB"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;RodneyLab Minimal Astro Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="nd"&gt;:global&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.react-container&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-secondary-hue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-secondary-saturation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-secondary-luminance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--spacing-8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--spacing-0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-light-text-hue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-light-text-saturation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-light-text-luminance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;:global&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.react-container-alt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-alternative-hue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-alternative-saturation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-alternative-luminance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;:global&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.react-button&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-alternative-hue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-alternative-saturation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-alternative-luminance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;:global&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.react-button-alt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-secondary-hue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-secondary-saturation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--colour-secondary-luminance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ExampleReactComponent&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then as you might expect, we attach the classes to the React component itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactExample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ReactExample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;altColours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAltColours&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`react-container&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;altColours&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; react-container-alt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Example React Component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"video-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="na"&gt;iframe&lt;/span&gt;
          &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"560"&lt;/span&gt;
          &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"315"&lt;/span&gt;
          &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://www.youtube-nocookie.com/embed/PJ0QSJpJn2U"&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Should you Stop Using React"&lt;/span&gt;
          &lt;span class="na"&gt;frameBorder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;
          &lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"&lt;/span&gt;
          &lt;span class="na"&gt;allowFullScreen&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`react-button&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;altColours&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; react-button-alt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setAltColours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;altColours&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"screen-reader-text"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Toggle colours&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactExample&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We only use TypeScript here to show that Astro supports TypeScript out of the box.  You can just as easily use regular JSX instead.&lt;/p&gt;

&lt;p&gt;You will notice some other classes in the code.  We defined related styles for these in a global CSS file together with global variables.  We include this from the head section of our layout file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;--------
import '@fontsource/montserrat';
--------

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en-GB"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;{Astro.resolve('../styles/styles.css')}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For scoped CSS to be applied to components within the same file, just include styles in a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; block in the page header (&lt;code&gt;:global&lt;/code&gt; selector is not necessary, in this case, as it is for child components).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-getting-started-with-astro-eslint"&gt;
  &lt;/a&gt;
  9. Getting Started with Astro: ESLint
&lt;/h3&gt;

&lt;p&gt;Because you import everything as a dev dependency (perfectly valid), if you use ESLint, you may get a warning about importing extraneous dependencies.  You can just switch this off by adding the following rule to you config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;es2021&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;plugin:react/recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;plugin:jsx-a11y/recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;airbnb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;plugin:prettier/recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@typescript-eslint/parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;parserOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;ecmaFeatures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;jsx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;ecmaVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sourceType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@typescript-eslint&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jsx-a11y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier/prettier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react/jsx-filename-extension&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;import/no-extraneous-dependencies&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;devDependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-getting-started-with-astro-responsive-nextgen-images"&gt;
  &lt;/a&gt;
  10. Getting Started with Astro: Responsive, Next-Gen Images
&lt;/h3&gt;

&lt;p&gt;A fantastic plugin for image handling in vite is &lt;code&gt;vite-imagetools&lt;/code&gt;.  There's not really time to get into it here, without the post getting too long.  I hope to be able to write a separate post on using it with Astro soon.  It will &lt;a href="https://rodneylab.com/sveltekit-image-plugin/"&gt;generate images for you in Next-Gen formats&lt;/a&gt; and creates hashes.  It also creates images in different responsive sizes to include in &lt;code&gt;srcset&lt;/code&gt; lists.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up-demo-playground"&gt;
  &lt;/a&gt;
  🙌🏽 Wrapping Up: Demo Playground
&lt;/h2&gt;

&lt;p&gt;Although this is not a tutorial as such, most of the code samples came from a demo app.  There are Svelte and React components in it as well as some Markdown. Each of these three includes an &lt;code&gt;iframe&lt;/code&gt; with a YouTube video:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;BaseLayout&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Minimal &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://astro.build/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Astro&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; Example&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This demo is not endorsed by Ben Awad, just thought the video content was fitting!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ExampleReactComponent&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ExampleSvelteComponent&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mdx-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;Markdown&amp;gt;&lt;/span&gt;
            ## Astro in 100 Seconds

            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"video-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/iframe&lt;/span&gt; 
            &lt;span class="err"&gt;title="Astro&lt;/span&gt; &lt;span class="err"&gt;in&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt; &lt;span class="err"&gt;Seconds"&lt;/span&gt;
            &lt;span class="err"&gt;width="560"&lt;/span&gt;
            &lt;span class="err"&gt;height="315"&lt;/span&gt;
            &lt;span class="err"&gt;src="https://www.youtube-nocookie.com/embed/dsTXcSeAZq8"&lt;/span&gt;
            &lt;span class="err"&gt;frameborder="0"&lt;/span&gt;
            &lt;span class="err"&gt;allow="accelerometer;&lt;/span&gt; &lt;span class="err"&gt;autoplay;&lt;/span&gt; &lt;span class="err"&gt;clipboard-write;&lt;/span&gt; &lt;span class="err"&gt;encrypted-media;&lt;/span&gt; &lt;span class="err"&gt;gyroscope;&lt;/span&gt; &lt;span class="err"&gt;picture-in-picture"&lt;/span&gt;
            &lt;span class="err"&gt;allowfullscreen&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/Markdown&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/BaseLayout&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We mentioned earlier that Astro ships no JavaScript by default.  To hydrate a component in Astro you add &lt;code&gt;client:load&lt;/code&gt; to the component's element (this is different to earlier versions of Astro where you used a &lt;code&gt;&amp;lt;Component:load&amp;gt;{content}&amp;lt;/Component:load&amp;gt;&lt;/code&gt; syntax).  Anyway, you will notice that we don't have those attributes added in our code yet.  However, the videos still play.  Interestingly this is because they are iframes and so treated as independent documents.  In a real world app, you would want to lazy load these or at least have more control over how they loaded.  As it stands the page loads a little slowly, but remember this is a playground rather than a production app.&lt;/p&gt;

&lt;p&gt;Beneath the React and Svelte videos there is a button which should toggle the background colour.  Try cloning the repo and adding &lt;code&gt;client:load&lt;/code&gt; to get a feel for how Astro works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ExampleReactComponent&lt;/span&gt; &lt;span class="na"&gt;client:load&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ExampleSvelteComponent&lt;/span&gt; &lt;span class="na"&gt;client:load&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://github.com/rodneylab/astro/tree/main/demos/getting-started-astro"&gt;code for the demo is on GitHub&lt;/a&gt;.  You can &lt;a href="https://stackblitz.com/github/rodneylab/astro/tree/main/demos/getting-started-astro"&gt;open the playground in StackBlitz&lt;/a&gt; or just play locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;getting-started-with-astro &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
pnpm init astro &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--template&lt;/span&gt; https://github.com/rodneylab/astro/tree/main/demos/getting-started-astro
pnpm &lt;span class="nb"&gt;install
&lt;/span&gt;pnpm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also experiment with the other hydration props (you will need to tinker with the code for some of these to have a perceptible effect):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;client:idle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client:visible&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client:media={QUERY}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client:only&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href="https://docs.astro.build/core-concepts/component-hydration/"&gt;Astro docs for more details on how these work&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you found this article useful and am keen to hear how you plan to use Astro.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-astro-feedback"&gt;
  &lt;/a&gt;
  🙏🏽 Getting Started with Astro: Feedback
&lt;/h2&gt;

&lt;p&gt;Have you found the post useful? Would you prefer to see posts on another topic instead? Get in touch with ideas for new posts. Also if you like my writing style, get in touch if I can write some posts for your company site on a consultancy basis. Read on to find ways to get in touch, further below. If you want to support posts similar to this one and can spare a few dollars, euros or pounds, please &lt;a href="https://rodneylab.com/giving/"&gt;consider supporting me through Buy me a Coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, feel free to share the post on your social media accounts for all your followers who will find it useful. As well as leaving a comment below, you can get in touch via &lt;a href="https://twitter.com/messages/compose?recipient_id=1323579817258831875"&gt;@askRodney&lt;/a&gt; on Twitter and also &lt;a href="https://t.me/askRodney"&gt;askRodney on Telegram&lt;/a&gt;. Also, see &lt;a href="https://rodneylab.com/contact"&gt;further ways to get in touch with Rodney Lab&lt;/a&gt;. I post regularly on &lt;a href="https://rodneylab.com/tags/astro/"&gt;Astro&lt;/a&gt; as well as &lt;a href="https://rodneylab.com/tags/sveltekit/"&gt;SvelteKit&lt;/a&gt;. Also &lt;a href="https://rodneylab.com/about/#newsletter"&gt;subscribe to the newsletter to keep up-to-date&lt;/a&gt; with our latest projects.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>astro</category>
      <category>javascript</category>
      <category>svelte</category>
    </item>
    <item>
      <title>How to build a Tailwind CSS tabs component</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Mon, 06 Dec 2021 11:08:46 +0000</pubDate>
      <link>https://dev.to/themesberg/how-to-build-a-tailwind-css-tabs-component-56o2</link>
      <guid>https://dev.to/themesberg/how-to-build-a-tailwind-css-tabs-component-56o2</guid>
      <description>&lt;p&gt;I've been using Tailwind CSS for quite a while and I'd never go back to a CSS framework that doesn't use a utility-first approach.&lt;/p&gt;

&lt;p&gt;One disadvantage of Tailwind CSS compared to other frameworks like Bootstrap or Bulma is the lack of a set of components like buttons, dropdowns, alerts, and more.&lt;/p&gt;

&lt;p&gt;That's why I decided to start a tutorial series here on the DEV community where I show you how to build one of the most commonly used components.&lt;/p&gt;

&lt;p&gt;Last time I showed you how to build a &lt;a href="https://dev.to/themesberg/how-to-build-a-tailwind-css-modal-component-31ko"&gt;modal component&lt;/a&gt; and today I'll show you how to build a Tailwind CSS tabs components.&lt;/p&gt;

&lt;p&gt;Here's how it will look in the end:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iMp5oMyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1ny6qxfajdho9prufy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iMp5oMyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1ny6qxfajdho9prufy1.png" alt="Tailwind CSS tabs component" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-tabs-component"&gt;
  &lt;/a&gt;
  Tailwind CSS tabs component
&lt;/h2&gt;

&lt;p&gt;First of all we need to code the base HTML markup which can either be a nav component with &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags inside or use a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element with list items.&lt;/p&gt;

&lt;p&gt;We'll stick with the list variant so let's use the following markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Profile&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Dashboard&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Settings&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Contacts&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a&amp;gt;Disabled&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice and simple, right? But now we need to start make it look pretty. Let's first design the whole list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;ul class="flex flex-wrap border-b border-gray-200"&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Profile&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Dashboard&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Settings&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href="#"&amp;gt;Contacts&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a&amp;gt;Disabled&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This helps order the list items horizontally. Now we need to style the list items and the links:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;ul class="flex flex-wrap border-b border-gray-200"&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" aria-current="page" class="inline-block bg-gray-100 text-blue-600 rounded-t-lg py-4 px-4 text-sm font-medium text-center active"&amp;gt;Profile&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" class="inline-block text-gray-500 hover:text-gray-600 hover:bg-gray-50 rounded-t-lg py-4 px-4 text-sm font-medium text-center"&amp;gt;Dashboard&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" class="inline-block text-gray-500 hover:text-gray-600 hover:bg-gray-50 rounded-t-lg py-4 px-4 text-sm font-medium text-center"&amp;gt;Settings&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" class="inline-block text-gray-500 hover:text-gray-600 hover:bg-gray-50 rounded-t-lg py-4 px-4 text-sm font-medium text-center"&amp;gt;Contacts&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a class="inline-block text-gray-400 rounded-t-lg py-4 px-4 text-sm font-medium text-center cursor-not-allowed"&amp;gt;Disabled&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0pI0pNwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw9qcrc39m4ovs8sc4kp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0pI0pNwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw9qcrc39m4ovs8sc4kp.png" alt="Tailwind CSS tabs light mode" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We should also create a dark mode style for this component, so let's start by adding the following classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;ul class="flex flex-wrap border-b border-gray-200 dark:border-gray-700"&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" aria-current="page" class="inline-block bg-gray-100 text-blue-600 rounded-t-lg py-4 px-4 text-sm font-medium text-center active dark:bg-gray-800 dark:text-blue-500"&amp;gt;Profile&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" class="inline-block text-gray-500 hover:text-gray-600 hover:bg-gray-50 rounded-t-lg py-4 px-4 text-sm font-medium text-center dark:text-gray-400  dark:hover:bg-gray-800 dark:hover:text-gray-300"&amp;gt;Dashboard&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" class="inline-block text-gray-500 hover:text-gray-600 hover:bg-gray-50 rounded-t-lg py-4 px-4 text-sm font-medium text-center dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-300"&amp;gt;Settings&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mr-2"&amp;gt;
        &amp;lt;a href="#" class="inline-block text-gray-500 hover:text-gray-600 hover:bg-gray-50 rounded-t-lg py-4 px-4 text-sm font-medium text-center dark:text-gray-400  dark:hover:bg-gray-800 dark:hover:text-gray-300"&amp;gt;Contacts&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a class="inline-block text-gray-400 rounded-t-lg py-4 px-4 text-sm font-medium text-center dark:text-gray-500 cursor-not-allowed"&amp;gt;Disabled&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to learn how to toggle &lt;a href="https://flowbite.com/docs/customize/dark-mode/"&gt;dark mode with Tailwind CSS&lt;/a&gt; check out the guide from Flowbite.&lt;/p&gt;

&lt;p&gt;If dark mode is actived the tabs component should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SfZaHk8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ugpi0m6f4yze1ag64wa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SfZaHk8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ugpi0m6f4yze1ag64wa.png" alt="Tailwind CSS tabs dark mode" width="880" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-components"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS components
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://flowbite.com/docs/components/tabs/"&gt;tabs component&lt;/a&gt; is part of a larger open source component library based on Tailwind CSS called Flowbite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZghNXO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q58mew8r97buzk38sfyv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZghNXO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q58mew8r97buzk38sfyv.png" alt="Flowbite - Tailwind CSS component library" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you head over to the &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Flowbite documentation&lt;/a&gt; you'll see that there are a lot more variants and options for components such as the tabs.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
