<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to make a web scraper with JavaScript</title>
      <author>The Vik</author>
      <pubDate>Wed, 04 Aug 2021 09:13:03 +0000</pubDate>
      <link>https://dev.to/heheprogrammer/how-to-make-a-web-scraper-with-javascript-18nk</link>
      <guid>https://dev.to/heheprogrammer/how-to-make-a-web-scraper-with-javascript-18nk</guid>
      <description>&lt;p&gt;In this blog I will teach how to make a web scraper with axios and cheerio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thevik/web-scraper"&gt;Source Code&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const axios = require('axios')
const cheerio = require('cheerio')
// Replace the url with your url
const url = 'https://www.premierleague.com/stats/top/players/goals?se=-1&amp;amp;cl=-1&amp;amp;iso=-1&amp;amp;po=-1?se=-1'

axios(url)
    .then(response =&amp;gt; {
        const html = response.data
        const $ = cheerio.load(html)
        const statsTable = $('.statsTableContainer &amp;gt; tr')
        const statsData = []

        statsTable.each(function() {
            const rank = $(this).find('.rank &amp;gt; strong').text()
            const playerName = $(this).find('.playerName &amp;gt; strong').text()
            const nationality = $(this).find('.playerCountry').text()
            const mainStat = $(this).find('.mainStat').text()
            statsData.push({
                rank,
                playerName,
                nationality,
                mainStat
            })
        })
        // Will print the collected data
        console.log(statsData)
    })
    // In case of any error it will print the error
    .catch(console.error)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#wosh"&gt;
  &lt;/a&gt;
  Wosh
&lt;/h4&gt;

&lt;p&gt;thats a lot of code lets get it one by one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install axios cheerio --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to install or of the required dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const axios = require('axios')
const cheerio = require('cheerio')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will import those installed dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const url = 'https://www.premierleague.com/stats/top/players/goals?se=-1&amp;amp;cl=-1&amp;amp;iso=-1&amp;amp;po=-1?se=-1'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is the url from which we will scrap the data, you can change&lt;br&gt;
it if you want but will have to change more things then&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;axios(url)
    .then(response =&amp;gt; {
        const html = response.data
        const $ = cheerio.load(html)
        const statsTable = $('.statsTableContainer &amp;gt; tr')
        const statsData = []
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;at the first line we are calling axios and url we are then adding .then function and passing response in it.&lt;br&gt;
then we are making a const named html and passing response.data&lt;br&gt;
if you now use&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;console.log(html)&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 then it will print the whole html code of the website.&lt;br&gt;
okay so now we are making a const named $ and then loading the html with cheerio.&lt;br&gt;
now making a const name statsTable and passing ( with $ = cheerio )the class of the div from which we are going to scrap the data.&lt;br&gt;
now are are making a statsData in which we will store the scraped data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
statsTable.each(function() {
            // If you replaced the url then you have to replace these too
            const rank = $(this).find('.rank &amp;gt; strong').text()
            const playerName = $(this).find('.playerName &amp;gt; strong').text()
            const nationality = $(this).find('.playerCountry').text()
            const mainStat = $(this).find('.mainStat').text()
            statsData.push({
                rank,
                playerName,
                nationality,
                mainStat
            })
        }) 

//  this code should be inside .then(responde =&amp;gt; {}) which be made above
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;okay now we are just finding the specific div to scrap the data and then converting it to text using .text()&lt;br&gt;
also then we are pushing those specific div's text to statsData which we also made above.&lt;/p&gt;

&lt;p&gt;now we have to just use&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(statsData) // inside .then(responde =&amp;gt; {})&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;and it should show all of the scraped data.&lt;/p&gt;

&lt;p&gt;and at last when everything is closed }) we will&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.catch(console.error)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;which will print the error if we have one and done.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#this-is-my-first-time-explaining-a-code-so-idk-how-i-did"&gt;
  &lt;/a&gt;
  this is my first time explaining a code so idk how I did.
&lt;/h5&gt;

&lt;p&gt;THANKS&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>node</category>
    </item>
    <item>
      <title>Effective Research Paper And Academic Essay Help</title>
      <author>lilliefishel</author>
      <pubDate>Wed, 04 Aug 2021 08:56:51 +0000</pubDate>
      <link>https://dev.to/lilliefishel/effective-research-paper-and-academic-essay-help-1fhp</link>
      <guid>https://dev.to/lilliefishel/effective-research-paper-and-academic-essay-help-1fhp</guid>
      <description>&lt;p&gt;For many students of today’s colleges and high schools, developing great and effective academic writing skills are a few things that are linked to many time, efforts, and nervous tension. It's true that learning to jot down successful research papers, term papers, or academic essays, learning the specifics and details about every each variety of academic papers, learning to cope with such things as selecting a correct topic for the tutorial paper, researching and browsing through various academic sources, using an appropriate literary genre, addressing the chosen formatting style and properly referencing the quotations or data employed in the tutorial paper, etc. takes plenty of your time and might cause stresses or more serious problems for a few students. However, there's no need in creating extra tension and exposing yourself to serious health risks, because in our times it's very easy to urge effective research papers or academic essay help from various online sources.&lt;/p&gt;

&lt;p&gt;If you are doing not want to develop excellent academic writing skills near those of an expert essay writer skills whatever it takes, &lt;a href="https://signalscv.com/2021/07/7-professional-essay-writing-services-that-reddit-users-recommend/"&gt;best essay writing service uk reddit&lt;/a&gt; must not target learning and mastering every little detail, but rather forecast some assistance regarding every particular sort of academic paper you’re visiting deal with: sort of a pros and cons essay, argumentative essay, expository essay, or any form of a research paper, etc. It's possible to use various online sources, special websites and blogs of professional academic essay writers so as to choose up some effective tips, recommendations, or suggestion to the scholars who are writing academic papers in schools or colleges. As a rule, such website offer some lists of recommended topics for various sorts of academic papers, have lots of useful links for tutorial sources, and also a good number of the most effective samples of the finished academic papers is offered, so students can take a glance and obtain inspiration about what a good academic paper should be like.&lt;/p&gt;

&lt;p&gt;Other reasonably effective essay help may be received from your fellow students who have more experience and possibly a bit better academic writing skills. If you’re having problems and don't know where to begin your research from, if you've got doubts about what formatting style to settle on, if you bought stuck and unsure of a way to locomote with the writing a part of your work, you'll be able to always elicit a hand from your classmates or your friends. Moreover, it's always possible to approach senior students together with your problems and evoke their help or their opinion. Definitely, senior students have good experience in academic writing and possess good essay writing skills, so that they can provide &lt;a href="https://www.devdiscourse.com/article/education/1674070-reddit-what-essay-writing-service-has-the-best-reputation"&gt;best essay writing service 2021&lt;/a&gt; with a valuable piece of recommendation and facilitate your relieve your academic writing stress. Don't feel shy and ask the senior students you recognize about any problem or any difficulty you're facing while acting on your research paper, term paper, academic essay, or other academic paper.&lt;/p&gt;

&lt;p&gt;Finally, any student can get prime quality essay help from professional academic writers and experts during this field by asking questions or asking their assistance on one or another issue. For instance, professional writers can recommend one or some very effective essay or research paper topics, they will assist in selecting relevant materials or data for an instructional paper, they'll help in processing the information or information relevant to the subject, help with choosing the simplest} and also the most effective style, etc. It will be a good idea to interact with an expert essay writer in proofreading or reviewing the tutorial paper you’ve written. there's an excellent number of online companies who offer this &lt;a href="https://essaywriterfree.net/cheap-essay-writing-service/"&gt;essay writing service cheap&lt;/a&gt;, additionally as other reasonable help to that student who need some assistance with their academic paper. Choose only the foremost reputable and also the most recommended online academic writing companies, and don't seek just cheap services since the standard of their work may be quite low.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>New Luos feature in the 1.3.0 release: localhost verbose management.</title>
      <author>Emanuel Allely</author>
      <pubDate>Wed, 04 Aug 2021 08:52:46 +0000</pubDate>
      <link>https://dev.to/emanuel_allely/new-luos-feature-in-the-1-3-0-release-localhost-verbose-management-1lm8</link>
      <guid>https://dev.to/emanuel_allely/new-luos-feature-in-the-1-3-0-release-localhost-verbose-management-1lm8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#new-luos-feature-in-the-130-release-localhost-verbose-management"&gt;
  &lt;/a&gt;
  🆕 New Luos feature in the 1.3.0 release: "localhost verbose management".
&lt;/h3&gt;

&lt;p&gt;Every board on your Luos &lt;strong&gt;network&lt;/strong&gt; can deal with multiple &lt;strong&gt;containers&lt;/strong&gt;, and sometimes those containers have to exchange information.&lt;/p&gt;

&lt;p&gt;To save some data bandwidth on your network and RAM on your MCU, we added a new feature allowing you to deal with localhost messaging. Localhost messages are not shared into your network and stay in the MCU.&lt;/p&gt;

&lt;p&gt;This is a huge deal to &lt;strong&gt;improve&lt;/strong&gt; your Luos system performances, and you should take care to put your applications close to the drivers they are using!&lt;/p&gt;

&lt;p&gt;If you need to get all the data into the network, for example for debugging purposes, you can use the &lt;strong&gt;VERBOSE_LOCALHOST&lt;/strong&gt; build flag that disables this feature!&lt;/p&gt;

&lt;p&gt;More details about this subject in the &lt;a href="https://docs.luos.io/pages/embedded/containers/msg-handling.html"&gt;messages handling&lt;/a&gt; section of our documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V4QZm12u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m77f1oce468fi3ybv6wx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V4QZm12u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m77f1oce468fi3ybv6wx.png" alt="Example"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>embedded</category>
      <category>opensource</category>
      <category>release</category>
      <category>luos</category>
    </item>
    <item>
      <title>How I (unintentionally) became a hacker</title>
      <author>Dennis Kopp</author>
      <pubDate>Wed, 04 Aug 2021 08:41:34 +0000</pubDate>
      <link>https://dev.to/s2engineers/how-i-unintentionally-became-a-hacker-3dkh</link>
      <guid>https://dev.to/s2engineers/how-i-unintentionally-became-a-hacker-3dkh</guid>
      <description>&lt;p&gt;When working in a digital agency, you come across a lot of different technologies to work with. Some of these were in the market for a long time already, while others are still quite new. Often, new technologies are fun to work with. They bring fresh air to a tech stack, change paradigms or are just more elegant to use. But what if this fancy new technology you came across has undiscovered security holes? What if you not only detected a big security issue within your own application, but were able to exploit it to get sensitive, personal data from other companies using this technology?&lt;/p&gt;

&lt;p&gt;In my case, I was taking over the backend of a client’s yet-to-be-released project from a coworker. This backend was a rather new open-source headless CMS. Having worked with Wordpress in the last couple of years (and not loving it), I found it quite refreshing to see other takes on the CMS topic. This headless CMS was written in JavaScript, offered the ability to add plugins and even had a GraphQL API. It ticked a lot of boxes for me, so I was quite happy with it.&lt;br&gt;
Part of working with this CMS was to define a schema for the data types we needed, like a headline, image and content for articles. A Graph API based on this schema is exposed automatically. As the project required users to be able to login, we installed an official plugin that provides a schema for users, including signup and login logic. Like the self-defined one, this schema was also exposed via the API, but parts of it were only accessible for authenticated users. Also, authenticated users only had API access to their own data… or so I thought.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#something-smells-fishy"&gt;
  &lt;/a&gt;
  Something smells fishy
&lt;/h2&gt;

&lt;p&gt;The user plugin I mentioned before brought a role and rights management with it. It enables you to treat anonymous and authenticated users differently. While playing around with the API, I noticed that I was not only able to see the role of my own user, but that I was also able to get &lt;strong&gt;all&lt;/strong&gt; users assigned to the same role. Even worse, I could see the email addresses of those users. Thankfully, the user plugin offered an option to hide fields from the API, so I did just that with the email field. As there was no other personal data exposed, the problem was solved. I briefly discussed this topic with the coworker who previously worked on the project and closed the case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-leaks-data-leaks-everywhere"&gt;
  &lt;/a&gt;
  Data leaks, data leaks everywhere
&lt;/h2&gt;

&lt;p&gt;Some time later, my coworker contacted me again. He mentioned that the CMS’ official website shows some testimonials, along with websites that use the CMS. He found out that the problem we faced with email addresses being exposed was also affecting these testimonials. &lt;br&gt;
In one example, we were able to download orders from a small online shop, including the full address of the users who made an order. &lt;br&gt;
In another, we could download applications for job offerings, including full name, cover letter and even the resume (CV). &lt;br&gt;
We were shocked. Was it really &lt;strong&gt;that&lt;/strong&gt; easy to get sensitive information from websites using this CMS?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-not-a-bug-its-a-missing-feature"&gt;
  &lt;/a&gt;
  It’s not a bug, it’s a (missing) feature
&lt;/h2&gt;

&lt;p&gt;Because of the importance of this topic, I decided to contact the company that builds the CMS immediately. I gave them all the information I had, including concrete examples of API requests. As I feared retaliation from the affected website operators, I decided against contacting them directly. After all, they could sue me for hacking their systems. Instead, I advised the CMS company to not only state the API problem on their website (and to fix it, of course), but to also contact all of their testimonials to have them review their APIs. They reacted quite quickly to my email, but called the problem a “known limitation” and gave some vague instructions on how to mitigate it. Although they mentioned forwarding this issue to the development team and contacting the affected website operators, it felt like they didn’t treat the issue with the necessary priority.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom line
&lt;/h2&gt;

&lt;p&gt;Security holes and data breaches come in all shapes and sizes. In this case, it was way too easy to get sensitive information that could be used to compromise people or businesses. Having an eye on privacy and security, for example by having an expert on board and perhaps by doing penetration tests, can help you make your website more secure.&lt;/p&gt;

&lt;p&gt;Image by &lt;a href="https://www.pexels.com/@lanophotography"&gt;lalesh aldarwish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>api</category>
      <category>webdev</category>
      <category>hacking</category>
    </item>
    <item>
      <title>Wittgenstein’s Beetle In Software Engineering</title>
      <author>Fagner Brack</author>
      <pubDate>Wed, 04 Aug 2021 08:24:18 +0000</pubDate>
      <link>https://dev.to/fagnerbrack/wittgenstein-s-beetle-in-software-engineering-6fi</link>
      <guid>https://dev.to/fagnerbrack/wittgenstein-s-beetle-in-software-engineering-6fi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#try-to-clarify-concepts-when-communicating-an-abstract-idea-be-sure-that-all-parties-understand-the-attributes-of-what-is-being-referenced"&gt;
  &lt;/a&gt;
  Try to clarify concepts when communicating an abstract idea, be sure that all parties understand the attributes of what is being referenced
&lt;/h2&gt;




&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Ludwig_Wittgenstein"&gt;Ludwig Wittgenstein&lt;/a&gt; was a philosopher from the 20th century that came up with an argument called the &lt;a href="https://en.wikipedia.org/wiki/Private_language_argument"&gt;private language argument&lt;/a&gt;. One part of this argument is called &lt;a href="https://en.wikipedia.org/wiki/Private_language_argument#The_Beetle_in_a_box"&gt;The Beetle and The Box&lt;/a&gt;.&lt;br&gt;
It goes like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[…] Suppose everyone had a box with something in it: we call it a ‘beetle’. No one can look into anyone else’s box, and everyone says he knows what a beetle is only by looking at his beetle. — Here it would be quite possible for everyone to have something different in his box. One might even imagine such a thing constantly changing. — But suppose the word ‘beetle’ had a use in these people’s language? — If so it would not be used as the name of a thing. The thing in the box has no place in the language-game at all; not even as a something: for the box might even be empty. — No, one can ‘divide through’ by the thing in the box; it cancels out, whatever it is. (1958, §293)&lt;br&gt;
Wittgenstein, L., (1953), Philosophical investigations, translated [from the German] by G. E. M. Anscombe, Oxford: Blackwell, 1968.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Due to how we express thoughts, it is possible that in a real conversation two individuals believe they are talking about the same "thing", but in reality, they are talking about things that are totally different. It all depends on the subjective interpretation of each one and the assumption that the other knows what is being talked about.&lt;/p&gt;

&lt;p&gt;A good example of this is a discussion, where each one wants to express the feelings about the beetle inside the box as if both were aware of what that is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Person A: The beetle is cute.&lt;br&gt;
Person B: The beetle is definitely not cute.&lt;br&gt;
Person A: I can ensure you it is because I know it!&lt;br&gt;
Person B: And I know it too, that is why I am saying it is not cute!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They could try to describe the beetle in more details:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Person A: The beetle has 6 legs.&lt;br&gt;
Person B: Yes, and 2 eyes too!&lt;br&gt;
Person B: Yes, and 2 eyes too!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although, even with objective descriptions, there is no guarantee they are the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oxr2oJ69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aj27e59yt7a2i9u9qxyf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oxr2oJ69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aj27e59yt7a2i9u9qxyf.png" alt="Two different beetles, both with two eyes and six legs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#wittgensteins-beetle-represents-the-individual-perception-and-experiences-that-form-a-point-of-view"&gt;
  &lt;/a&gt;
  Wittgenstein's beetle represents the individual perception and experiences that form a point of view.
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, what about software engineering?&lt;/p&gt;

&lt;p&gt;Let's say that you are talking with a person and you want to suggest how to improve a piece of code.&lt;/p&gt;

&lt;p&gt;You can start making suggestions to create maintainable code using standard development principles. The other developer will understand that create maintainable code is a good thing and that using standard development principles is useful; you both agree.&lt;/p&gt;

&lt;p&gt;But then when the work is done you realize the code is totally different from what you expected. The other developer is not using standard development principles or creating maintainable code. But wait, what exactly are "standard development principles" and the act of creating more "maintainable code"?&lt;/p&gt;

&lt;p&gt;Of course, you know what they are, right?&lt;/p&gt;

&lt;p&gt;… or not?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if you really don't know what you are talking about?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You might have been a victim of the famous &lt;a href="https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect"&gt;Dunning-Kruger Effect&lt;/a&gt;. The developer might have implemented principles that are unknown to you and you just don't see the benefits because you lack context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if the other developer don't know what they are talking about?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The other developer might have less experience than you. Or have different opinions over "good" principles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if neither of you has any idea of what good principles are&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Remember, the feeling you have when you are wrong is the same feeling as when you are right. You just feel bad when you discover you were wrong, not when you actually are. Both of you can discuss naturally, and still, both of you can be wrong.&lt;/p&gt;

&lt;p&gt;When talking about software design we are still tied to the &lt;a href="https://medium.com/@fagnerbrack/programming-subjective-discussion-9c177c31807f"&gt;subjective&lt;/a&gt; nature of the human being. You can try to be as objective as possible, but when it comes to subjects such as design patterns, principles or abstractions, we are still bound to subjectivity. Even for more objective matters, we are still bound to the level of knowledge and experience that you or the other person have, for that &lt;a href="https://medium.com/@fagnerbrack/how-to-destroy-the-myth-of-the-proper-solution-94ca958def1f"&gt;there is no such thing as the proper solution&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#sometimes-it-is-impossible-to-be-completely-objective-each-individual-will-always-have-one-box-and-you-will-only-know-the-content-of-yours"&gt;
  &lt;/a&gt;
  Sometimes it is impossible to be completely objective, each individual will always have one box, and you will only know the content of yours.
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next time you talk with someone using technical jargon, try to avoid making assumptions as much as possible. Try to go as deep as you can to make sure both understand, in detail, what is being discussed.&lt;/p&gt;

&lt;p&gt;There will always be a level of subjectivity, even in basic language. But what you can do to facilitate a conversation is try to reduce the amount of subjectivity into the smallest possible range, just enough for the task you have in hand.&lt;/p&gt;

&lt;p&gt;This way there will be a point where the subjectivity becomes irrelevant in practice.&lt;/p&gt;

&lt;p&gt;But it will never be null.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Edit Jul 26, 2016:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have recently stumbled upon a post called &lt;a href="https://eev.ee/blog/2016/07/26/the-hardest-problem-in-computer-science/"&gt;Naming Is The Hardest Problem In Computer Science&lt;/a&gt;. It shows very good examples of Wittgenstein's Beetle happening in Software when different languages use the same terminology (like "object") to represent things that are completely different.&lt;/p&gt;




&lt;p&gt;Thanks for reading. If you have some feedback, reach out to me on &lt;a href="https://twitter.com/FagnerBrack"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/fagner.brack"&gt;Facebook&lt;/a&gt; or &lt;a href="http://github.com/FagnerMartinsBrack"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>coding</category>
      <category>dev</category>
    </item>
    <item>
      <title>Rock Paper and Scissors game</title>
      <author>Tejeshwer Singh Sachdeva</author>
      <pubDate>Wed, 04 Aug 2021 07:57:45 +0000</pubDate>
      <link>https://dev.to/tejeshwer25/rock-paper-and-scissors-game-58g0</link>
      <guid>https://dev.to/tejeshwer25/rock-paper-and-scissors-game-58g0</guid>
      <description>&lt;p&gt;A rock, paper, scissor game is usually a hand game played between 2 players normally. But in this online age let's play our part in modifying this hand-based offline game and make it digital. &lt;br&gt;
To make this game we'll be using HTML, CSS, and JavaScript. The final game would look something like this:- &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJ1J6vGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628054021141/DJ05SYYLk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJ1J6vGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628054021141/DJ05SYYLk.png" alt="Capture.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To begin with let's start by creating 3 files within your newly created "rock_paper_scissors" folder. The files to be created within the folder are &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;styles.css&lt;/code&gt;, and &lt;code&gt;app.js&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-markup"&gt;
  &lt;/a&gt;
  Creating the Markup
&lt;/h2&gt;

&lt;p&gt;Once done with creating the necessary files and folders let's begin by describing the markup/HTML for our page. For this go to your &lt;code&gt;index.html&lt;/code&gt; file and layout the structure:- &lt;br&gt;
&lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Rock Paper Scissors&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll first layout the content for the header of our game, which looks like this:- &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Y2ns6PT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628055085890/cQVB1Y4XZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Y2ns6PT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628055085890/cQVB1Y4XZ.png" alt="Capture.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Within our 'index.html' inside the body tags add an &lt;code&gt;&amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;&lt;/code&gt; tag. The header in turn will contain a primary heading of "Rock Paper Scissors" within the &lt;code&gt;h1&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt; 
    ...

    &amp;lt;body&amp;gt;
        &amp;lt;header&amp;gt;
            &amp;lt;h1&amp;gt;Rock Paper Scissors&amp;lt;/h1&amp;gt;
        &amp;lt;/header&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done with our header we'll now create a &lt;code&gt;section&lt;/code&gt; to display the current scores of the user and computer. For that create a section just after our header tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;header&amp;gt; .... &amp;lt;/header&amp;gt;

&amp;lt;section class="score-board"&amp;gt;
    &amp;lt;div class="badge" id="comp-label"&amp;gt;Computer&amp;lt;/div&amp;gt;
    &amp;lt;div class="badge" id="user-label"&amp;gt;User&amp;lt;/div&amp;gt;
    &amp;lt;span id="user-score"&amp;gt;0&amp;lt;/span&amp;gt;:&amp;lt;span id="computer-score"&amp;gt;0&amp;lt;/span&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The div's with the badge class will be designed into badges to represent the user's and computer's sides. The span is used to display the score in a single line and will also help later in JavaScript to modify the scores according to the user's choice. &lt;/p&gt;

&lt;p&gt;Now we need a section where after every choice we tell the user whether he has won or lost and what was chosen by computer from "rock, paper or scissor". To do this create a div and within that a paragraph to represent the text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;header&amp;gt; ... &amp;lt;/header&amp;gt;
&amp;lt;section class="score-board"&amp;gt;&amp;lt;/section&amp;gt;

&amp;lt;div class="result"&amp;gt;
        &amp;lt;p id="round__result"&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p id="result__text"&amp;gt;To begin choose one from rock, paper or scissor&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now comes the main part of our markup where we create options from which the user can choose one and the game will progress accordingly. To create this, create another div with a class of choices and within this create 3 more divs with the class of choice.  Within each 'choice' div we will add images of rock, paper, and scissors respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;header&amp;gt; ... &amp;lt;/header&amp;gt;
&amp;lt;section class="score-board"&amp;gt; ... &amp;lt;/section&amp;gt;
&amp;lt;div class="result"&amp;gt; ... &amp;lt;/div&amp;gt;

&amp;lt;div class="choices"&amp;gt;
        &amp;lt;div class="choice" id="rock"&amp;gt;
            &amp;lt;img src="https://tejeshwer25.github.io/Rock_Paper_scissors/images/rock.png" /&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class="choice" id="paper"&amp;gt;
            &amp;lt;img src="https://tejeshwer25.github.io/Rock_Paper_scissors/images/paper.png" /&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class="choice" id="scissor"&amp;gt;
            &amp;lt;img src="https://tejeshwer25.github.io/Rock_Paper_scissors/images/scissor.png" /&amp;gt;
        &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add a little action text which tells the user what to do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;header&amp;gt; ... &amp;lt;/header&amp;gt;
&amp;lt;section class="score-board"&amp;gt; ... &amp;lt;/section&amp;gt;
&amp;lt;div class="result"&amp;gt; ... &amp;lt;/div&amp;gt;
&amp;lt;div class="choices"&amp;gt; ... &amp;lt;/div&amp;gt;

&amp;lt;div class="action_text"&amp;gt;
        &amp;lt;p&amp;gt;Make Your Choice Now!&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, we're now done with our HTML, take a look at your page. How does it look?&lt;br&gt;
For now, it might not look great but we've created the basic structure and placed the required elements on our page.&lt;br&gt;
Before applying styling and functionality let's link the CSS and JS files to our HTML file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Rock Paper Scissors&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="./styles.css"/&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

    &amp;lt;script src="./app.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-styles-to-our-page"&gt;
  &lt;/a&gt;
  Adding styles to our page
&lt;/h2&gt;

&lt;p&gt;Now let's make our game look nicer with some CSS styles. &lt;br&gt;
But before we add styles to any of our elements let's reset the default styles provided by the browser using the &lt;code&gt;*&lt;/code&gt; selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    line-height: 1.6;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above styling we give padding and margin of 0 to all our elements, along with that we give it a box-sizing of border-box which specifies that the border and padding for the element should remain in the calculated element width and height. &lt;br&gt;
&lt;code&gt;line-height&lt;/code&gt; is specified to be 1.6 which gives all our text a default height of 1.6 units.  &lt;/p&gt;

&lt;p&gt;First, let's begin with styling our header element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* { ... }

header {
    padding: 1rem 0rem;
    text-align: center;
    font-size: 1.3rem;
    font-weight: bold;
    background-color: #f3f3f3;
    color: #333;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We start with giving the header &lt;code&gt;padding&lt;/code&gt; of &lt;code&gt;1rem&lt;/code&gt; from top &amp;amp; bottom which will give our header some space rather than squishing it with the other elements, and then we align the text within it to &lt;code&gt;center&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You might have noticed that other than the header most of our text in the game is of gold color and the background is a bluish color, so rather than separately specifying it for each element we'll provide these styling for the &lt;code&gt;body&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* { ... }

body {
    background-color: rgb(28, 28, 59);
    color: gold;
}

header { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now go for the &lt;code&gt;score-board&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* { ... }
body { ... }
header { ... }

.score-board {
    border: 2px solid white;
    width: 30%;
    margin: 3rem auto;
    border-radius: 10px;
    padding: 1rem 0rem;
    font-size: 2rem;
    position: relative;
    text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To place the &lt;code&gt;section&lt;/code&gt; in the center we first reduce its width to &lt;code&gt;30%&lt;/code&gt; and then give it a margin of 3rem from top &amp;amp; bottom and auto from left-right and that will place it in the center. The positioning is done to be relative because it will help us later in positioning our badges at the required place. Relative positioning keeps our element in it's natural flow but allows us to place it anywhere in the page using top, left, bottom, and right properties. &lt;br&gt;
For now the badges 'User' and 'Computer' might look odd, so let's style them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.badge {
    font-size: 0.9rem;
    position: absolute;
    background-color: gold;
    color: rgb(28, 28, 59);
    padding: 0.3rem 1rem;
    border-radius: 5px;
}

#comp-label {
    right: -20%;
    top: 30%;
}

#user-label {
    left: -15%;
    top: 30%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The badge class is common to both user and computer labels so we specify the styles common to both of them in the badge selector, this is the major use of classes. For positioning the labels we've also specified the position as an absolute which will allow us to move our labels with respect to the &lt;code&gt;score-board&lt;/code&gt; because the score-board was positioned relative(try removing the relative position property from score-board). Next to position these labels to their respective side we specify the top, right, and left properties individually to their IDs. &lt;/p&gt;

&lt;p&gt;Now let's style the result text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.result {
    text-align: center;
    font-size: 1.5rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the result, we just align the text to the center and give it a font size of 1.5rem.&lt;/p&gt;

&lt;p&gt;Let's now style the choices the user has.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.choices {
    display: flex;
    justify-content: space-evenly;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The choices container is given a display flex property so that all the child elements of it are in one line, and to add spacing between each element we give it a justify-content property of space-evenly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.choice {
    width: 20%;
    text-align: center;
    border: 3px solid white ;
    border-radius: 50%;
    padding: 1.5rem 0rem;
    transition: all 0.5s ease-in-out;
}

.choice:hover {
    border: 3px solid grey;
    cursor: pointer;
    background: rgb(8, 8, 17);
}

.choice &amp;gt; img {
    width: 50%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then give choice(child of choices) a width of 20% so that our elements do not overflow. The transitioning is given so that when the user hovers on the element the respective hover styling appears with some effects after 0.5s. The image is given a width so that the image remains within its parent div. &lt;/p&gt;

&lt;p&gt;Now for a short task, it is now up to you to style the 'action text' at the end.&lt;br&gt;
To make our game responsive we'll now add some media-queries to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media(max-width:700px) {
    .score-board {
        padding: 2rem 0rem;
    }

    #user-label {
        left: -20%;
    }

    #comp-label {
        right: -30%;
    }
}

@media (max-width: 600px) {
    #user-label {
        transform: rotate(90deg);
    }

    #comp-label {
        right: -30%;
        top: 35%;
        transform: rotate(90deg);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first media query will work on devices with a screen width lower than 700px. And for that case, we modify the positioning of our user and computer labels. &lt;br&gt;
The next media query will work on devices with screen widths lower than 600px, and in this, we rotate our labels by 90degrees and again modify their positioning. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-functionality-using-js"&gt;
  &lt;/a&gt;
  Adding functionality using JS
&lt;/h2&gt;

&lt;p&gt;Great, we're done with our markup and we've also styled it. Our game now looks much better, you can check it yourself if you doubt 😁.&lt;br&gt;
Let's now add some functionality to it, but before doing so we'll catch/cache our DOM, which is done in following manner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const userScore_span = document.getElementById('user-score');
const computerScore_span = document.getElementById('computer-score');
const resultText_p = document.getElementById('result__text');
const roundResult_p = document.getElementById('round_result');
const rock_div = document.getElementById('rock');
const paper_div = document.getElementById('paper');
const scissors_div = document.getElementById('scissor');

let userScore = 0;
let computerScore = 0; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is how we cache the DOM, this is helpful as it prevents us from writing the long 'document.getElementById('')' text every time we want to modify the DOM and also improves the performance of our app. Other than caching the DOM we've also specified variables for the user and computer score. &lt;/p&gt;

&lt;p&gt;Now let's specify what should happen when our users click on any one choice given to them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rock_div.onclick = (e) =&amp;gt; {
    let result = startGame('rock');
    result_text();
    resultStyle(result, rock_div);
};
paper_div.onclick = (e) =&amp;gt; {
    let result = startGame('paper');
    result_text();
    resultStyle(result, paper_div);
};
scissors_div.onclick = (e) =&amp;gt; {
    let result = startGame('scissor');
    result_text();
    resultStyle(result, scissors_div);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we first call the function startGame and pass it the respective argument, and the return value from startGame is stored in result variable. We then call the result_text and resultStyle functions. &lt;br&gt;
Note that this won't work as we have not defined the required functions, so let's first start with the startGame function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function startGame(userChoice) {
    let compChoice = computerChoice(); 

    if(userChoice===compChoice) {
        resultText_p.textContent = "It's a draw!!";
        return 'draw';
    } 
    else if((userChoice==='rock' &amp;amp;&amp;amp; compChoice==='scissor') || (userChoice==='paper' &amp;amp;&amp;amp; compChoice==='rock') || (userChoice==='scissor' &amp;amp;&amp;amp; compChoice==='paper')) {
        userScore++;
        userScore_span.textContent = userScore;
        resultText_p.textContent = `Computer tried to block your ${userChoice} with ${compChoice} and failed... You Won 🔥🔥`;
        return 'win';
    }
    else if((userChoice==='rock' &amp;amp;&amp;amp; compChoice==='paper') || (userChoice==='paper' &amp;amp;&amp;amp; compChoice==='scissor') || (userChoice==='scissor' &amp;amp;&amp;amp; compChoice==='rock')) {
        computerScore++;
        computerScore_span.textContent = computerScore;
        resultText_p.textContent = `Computer blocked your ${userChoice} with ${compChoice} successfully... You Lost 😭😭` ;
        return 'loss';
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the start game we call the computerChoice function which we'll be declaring in a bit, but let's first go through what's happening here. &lt;br&gt;
In startGame we check whether the user has won or not using the if-elseif-else chain, and then according to that, we increment the user or computers score. Along with that we also modify the scores and resultant text in our DOM which will be reflected on our app. And at last, we return a value based on the user's performance which will be stored in the result variable in the onclick event handlers. &lt;br&gt;
Now let's define the computerChoice function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function computerChoice() {
    let choice = ['rock', 'paper', 'scissor']
    let computerChoice = Math.floor(Math.random() * 3);
    return choice[computerChoice];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this we define an array of choices and then we generate a random number between 0-1 using Math.random(), to keep the number in the range of 0-3 we multiply the result of Math.random() by 3. But the number would still be a decimal number so to make it an integer value we use Math.floor() which will round the number to it's lower integer(2.9 will become 2). Then the choice at that index is retured which is stored in variable compChoice in startGame(). &lt;/p&gt;

&lt;p&gt;Now let's implement the result_text function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function result_text() {
    if(userScore &amp;gt;=10) {
        roundResult_p.textContent = "You won previous round";
        userScore = 0;
        computerScore = 0;
    } else if(computerScore &amp;gt;= 10) {
        roundResult_p.textContent = "You lost previous round";
        userScore = 0;
        computerScore = 0;
    } 

    setTimeout(() =&amp;gt; {roundResult_p.textContent = ""}, 5000)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we check whether the user or computer has won the previous round and this updates our paragraph with round__result id which was empty initially. And using the setTimeout function we make sure that the text is removed after 5000ms or 5sec.&lt;/p&gt;

&lt;p&gt;Let's now make our app better with resultStyle function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function resultStyle(result, e) {
    if(result === 'win') {
        e.classList.add('win');
        setTimeout(() =&amp;gt; {e.classList.remove('win')}, 1000)
    } else if (result === 'draw') {
        e.classList.add('draw');
        setTimeout(() =&amp;gt; {e.classList.remove('draw')}, 1000)
    } else {
        e.classList.add('lost');
        setTimeout(() =&amp;gt; {e.classList.remove('lost')}, 1000)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this function, we check the result of the user's choice and then apply the class of win, lost, or draw to the choice div accordingly. Then we make sure that the class is removed after an interval of 1 sec using the setTimeout function. &lt;br&gt;
Now to make this function work we'll have to add some more styling at the end of our styles.css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
.choices &amp;gt; .win {
    border: 3px solid green;
    box-shadow: 1px 1px 15px green;
}

.choices &amp;gt; .lost {
    border: 3px solid red;
    box-shadow: 1px 1px 15px red;
}

.choices &amp;gt; .draw {
    border: 3px solid yellow;
    box-shadow: 1px 1px 15px yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can try the app, it functions pretty well and has some more styling that makes it even better.  &lt;/p&gt;

&lt;p&gt;So, here we completed our rock paper scissors game. For this project I went through FreeCodeCamp's youtube channel, you can also visit it for more of such amazing contants. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Making a Canvas-based SVG designer app that exports DXF files for manufacturing</title>
      <author>Frank Sandqvist</author>
      <pubDate>Wed, 04 Aug 2021 07:55:19 +0000</pubDate>
      <link>https://dev.to/franksandqvist/making-a-canvas-based-svg-designer-app-that-exports-dxf-files-for-manufacturing-4gjo</link>
      <guid>https://dev.to/franksandqvist/making-a-canvas-based-svg-designer-app-that-exports-dxf-files-for-manufacturing-4gjo</guid>
      <description>&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#this-is-a-guest-post-by-ibsitam-arif-check-him-out"&gt;
  &lt;/a&gt;
  This is a guest post by &lt;a href="https://github.com/ibtisamarif831"&gt;Ibsitam Arif&lt;/a&gt;. Check him out!
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vector graphics have become a standard in almost every manufacturing industry. The blueprint is usually given in vector form and the machine operates accordingly. Similarly, in the printing industry, print designs are in vector form.&lt;/p&gt;

&lt;p&gt;When we talk about the web, the most popular vector files are SVGs, and in this article, we will see how we can convert an SVG to DXF; a popular vector file for 2D and 3D models created by AutoDesk and it is popular for exporting data between different CAD programs. We have our simple frontend canvas that will allow the user to design an SVG which input will be sent to the Express.js backend where we will be making an API call to the &lt;a href="https://www.smidyo.com/vector-express"&gt;Vector Express API&lt;/a&gt;. Vector Express is an excellent API for people that are looking to convert their vectors into different forms without any hassle. In this tutorial we use it to conert the resulting SVG to a DXF. So let us get started!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ibtisamarif831"&gt;
        ibtisamarif831
      &lt;/a&gt; / &lt;a href="https://github.com/ibtisamarif831/svg-to-dxf"&gt;
        svg-to-dxf
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A simple web application that takes SVG and sends request to Vector-express for conversion to DXF
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
svg-to-dxf&lt;/h1&gt;
&lt;p&gt;A simple web application that takes SVG and sends request to Vector-express for conversion to DXF&lt;/p&gt;
&lt;h2&gt;
Project running.&lt;/h2&gt;
&lt;p&gt;run node myserver.js in terminal to start the server&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ibtisamarif831/svg-to-dxf"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#what-well-be-building"&gt;
  &lt;/a&gt;
  What we'll be building
&lt;/h2&gt;

&lt;p&gt;Let's imagine that we have a CNC machine that can cut various materials. We want to build a webshop where our customers can design various shapes, and place an order. When the order has been placed, we want to automatically generate a DXF file which we can send directly to the machine for manufacturing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project structure
&lt;/h2&gt;

&lt;p&gt;In this project, we have our client-side frontend and our backend. Let's start with the client-side first which will be served by our Express server.&lt;/p&gt;

&lt;p&gt;Create a new folder and name it as you please. Make sure you have the following files in it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ul90ieq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xio4fszjfptkzr29al8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ul90ieq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xio4fszjfptkzr29al8r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h3&gt;

&lt;p&gt;The HTML file looks as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Canvas&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"index.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"canvas"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"500"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"500"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'ellipse'&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'submit'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Ellipse&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'rectangle'&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'submit'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Rectangle&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'clear'&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'submit'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Clear Canvas&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"order"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Place Order&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script
&lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://code.jquery.com/jquery-3.6.0.min.js"&lt;/span&gt;
&lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="&lt;/span&gt;
&lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/fabric.js/451/fabric.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"canvas.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have imported jQuery and fabric.js for our canvas.&lt;/p&gt;

&lt;p&gt;Our CSS file only adds a border to canvas. I have kept things simpler but you are free to edit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#canvas&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, the main file, canvas.js, which handles all the logic for creating shapes on the canvas. We create a fabric canvas that takes the id of our HTML canvas. This gives us access to the functionality of the library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;fabric&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Canvas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clear&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rectangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rectangle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ellipse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ellipse&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;order&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isEllipse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isRectangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isDown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;origX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;origY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isEllipse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;isRectangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rectangle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ellipse&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isEllipse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;isRectangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ellipse&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getObjects&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mySvg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toSVG&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://127.0.0.1:3000/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mySvg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Order Placed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouse:down&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;origX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;origY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEllipse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;fabric&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;origX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;origY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;originX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;originY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;origX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isRectangle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;rectangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;fabric&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;origX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;origY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;transparent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouse:move&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;origY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;origX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEllipse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;origX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;originX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;right&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;originX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;origY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;originY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bottom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;originY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isRectangle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;origX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;origY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;origX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;origY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouse:up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we are done drawing on canvas, we invoke the &lt;em&gt;toSVG()&lt;/em&gt; on the fabric canvas which returns everything on the canvas as SVG. Then this is sent to the backend where the SVG is saved.&lt;/p&gt;

&lt;p&gt;This is what we will end up with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VG5-2css--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuc9cqkb0cf8zztvv429.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VG5-2css--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuc9cqkb0cf8zztvv429.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let us draw some shapes and place an "order".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wqSfjbhd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arw1f3h63kwvgbunn2hh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wqSfjbhd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arw1f3h63kwvgbunn2hh.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;After placing the order, we get an alert and our request is sent to the backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9f28EWG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y224t548jajjsoq17f2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9f28EWG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y224t548jajjsoq17f2w.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h3&gt;

&lt;p&gt;For the handling of SVG and DXF, we are using Express.js. Create a new folder and name it as a server. Let us install the following libraries to get started.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install body-parser cors express @smidyo/vectorexpress-nodejs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's now create &lt;code&gt;server.js&lt;/code&gt; to house our backend code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vectorExpress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./node_modules/@smidyo/vectorexpress-nodejs/index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svgFromFrontend.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/svgFromFrontend.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;vectorExpress&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dxf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/svgFromFrontendConverted.dxf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Converted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`App listening on &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; port!`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how the backend works. First, after the user makes a POST request, it is saved in a new SVG file. In the frontend, we created 2 rectangles and one eclipse. The SVG for it was saved as follows in the same folder with the following content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8" standalone="no" ?&amp;gt;
&amp;lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&amp;gt;
&amp;lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="500" height="500" viewBox="0 0 500 500" xml:space="preserve"&amp;gt;
&amp;lt;desc&amp;gt;Created with Fabric.js 4.5.1&amp;lt;/desc&amp;gt;
&amp;lt;defs&amp;gt;
&amp;lt;/defs&amp;gt;
&amp;lt;g transform="matrix(1 0 0 1 123.5 100.5)"  &amp;gt;
&amp;lt;rect style="stroke: rgb(255,0,0); stroke-width: 3; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(255,255,255); fill-opacity: 0; fill-rule: nonzero; opacity: 1;"  x="-65" y="-48" rx="0" ry="0" width="130" height="96" /&amp;gt;
&amp;lt;/g&amp;gt;
&amp;lt;g transform="matrix(1 0 0 1 167.5 280.5)"  &amp;gt;
&amp;lt;circle style="stroke: rgb(255,0,0); stroke-width: 3; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: none; fill-rule: nonzero; opacity: 1;"  cx="0" cy="0" r="54" /&amp;gt;
&amp;lt;/g&amp;gt;
&amp;lt;g transform="matrix(1 0 0 1 164.5 410)"  &amp;gt;
&amp;lt;rect style="stroke: rgb(255,0,0); stroke-width: 3; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(255,255,255); fill-opacity: 0; fill-rule: nonzero; opacity: 1;"  x="-77" y="-51.5" rx="0" ry="0" width="154" height="103" /&amp;gt;
&amp;lt;/g&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, this is sent to the Vector Express API using its Node.js wrapper and it returns us a DXF file that is saved in the same directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p7CD-JgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5sjyxumuocu8vw1usik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p7CD-JgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5sjyxumuocu8vw1usik.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;With this, we have a basic SVG designer app which does DXF conversion. The manufacturer can always get the DXF file from the backend while the client can place an order for his SVG vector.&lt;/p&gt;

&lt;p&gt;To develop this further, we should implement a database to store the orders, and a way for us to access our orders and the corresponding DXF file through a browser. We may even wish to build this on top of an existing e-commerce framework.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>svg</category>
      <category>dxf</category>
    </item>
    <item>
      <title>Why Hire a React JS development Company </title>
      <author>Polosoft Technologies</author>
      <pubDate>Wed, 04 Aug 2021 07:24:45 +0000</pubDate>
      <link>https://dev.to/polosofttech/why-hire-a-react-js-development-company-2806</link>
      <guid>https://dev.to/polosofttech/why-hire-a-react-js-development-company-2806</guid>
      <description>&lt;p&gt;Streamlining the process of front-end web application development was the idea behind the development of platforms such as React JS. ReactJS is much faster, simpler, adaptable and scalable as compared to other platforms.&lt;br&gt;
It proffers the feature of breaking down the website modules into smaller components. If considered it will be profusely beneficial to both the development process and the finished products.&lt;br&gt;
Considering the rich features and high-performance solutions of React JS, big businesses keep choosing &lt;a href="https://www.polosoftech.com/open-source-application/reactjs-development-company"&gt;ReactJS development&lt;/a&gt; as their foremost choice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wRpMI6ge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny2i50hv1wzxc4lulvst.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wRpMI6ge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny2i50hv1wzxc4lulvst.jpg" alt="React JS development Company "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#perks-of-js"&gt;
  &lt;/a&gt;
  Perks of JS
&lt;/h1&gt;

&lt;p&gt;● Easy to use: &lt;a href="https://www.polosoftech.com/open-source-application/reactjs-development-company"&gt;ReactJS&lt;/a&gt; is one of the JavaScript documentation which is user friendly and high yielding. Not only experienced professionals but rookie developers can easily grasp the components right away in no-time. Plain JavaScript and a component-based approach will assist techies in easy building of your website or mobile applications.&lt;/p&gt;

&lt;p&gt;● Virtual DOM: Every techie knows that a dashboard or data-visualization screen needs constant updates of components so that data can be tracked in real-time. &lt;/p&gt;

&lt;p&gt;● Build Rich UIs: Frequent updates may turn into unnecessary headaches due to the complex logic of the existing app. It’s more like a single modification can result in spreading and dramatically affect other components. ReactJS has an amplified development technology with the component usability feature. &lt;/p&gt;

&lt;p&gt;● Secured Future: Compatibility of the React JS framework is quite commendable. &lt;a href="https://www.polosoftech.com/open-source-application/reactjs-development-company"&gt;ReactJS development service&lt;/a&gt; providers are spread across the globe. Irrespective of the update, all public APIs of the framework tend to remain the same. &lt;/p&gt;

&lt;p&gt;● Easy Migration: This is a really important reason for &lt;a href="https://www.polosoftech.com/open-source-application/reactjs-development-company"&gt;React JS development company&lt;/a&gt; being in demand. Hassle free migration of data from the old server to the new.&lt;/p&gt;

&lt;p&gt;● Concurrent Mode: Facebook while developing the ReactJS came up with Concurrent Mode which was built with user and development experience in mind. Rendering is uninterrupted resulting in a huge improvement of the general UX. Functionalities which weren’t possible before can now be easily enabled by a ReactJS expert. &lt;/p&gt;

&lt;p&gt;● Faster development: Most of the &lt;a href="https://www.polosoftech.com/open-source-application/reactjs-development-company"&gt;React JS development company&lt;/a&gt; love the tech in particular. The same helps in increasing productivity, all you gotta do is make the most of its reusable components and ReactJS development tools. Increase in productivity is an increase in money. &lt;/p&gt;

&lt;p&gt;● Productivity and Maintenance: 85% of system components in &lt;a href="https://www.polosoftech.com/open-source-application/reactjs-development-company"&gt;React development technology&lt;/a&gt; that can be reused. Steadily with the due course of time it has become easy to manipulate and define objects which are already being used. Facilitating code maintenance at regular intervals but it also ensures there is some consistency in the application.  &lt;/p&gt;

&lt;p&gt;The similar being told about a lot of &lt;a href="https://www.polosoftech.com/open-source-application/reactjs-development-company"&gt;React JS Development Company&lt;/a&gt;, but Polosoft Technologies leads the way with its dedicated team of developers and a project manager to guide the same. &lt;a href="https://www.polosoftech.com/open-source-application/reactjs-development-company"&gt;React JS development&lt;/a&gt; is the key to your success and we have kept it safe for you to achieve.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>development</category>
    </item>
    <item>
      <title>How to Add a Real-time Unread Conversation Counter to a TalkJS Chat</title>
      <author>Sapnesh Naik</author>
      <pubDate>Wed, 04 Aug 2021 07:19:37 +0000</pubDate>
      <link>https://dev.to/talkjs/how-to-add-a-real-time-unread-conversation-counter-to-a-talkjs-chat-2o05</link>
      <guid>https://dev.to/talkjs/how-to-add-a-real-time-unread-conversation-counter-to-a-talkjs-chat-2o05</guid>
      <description>&lt;p&gt;In this tutorial, we’ll learn how to add a real-time unread conversations counter for TalkJS Inbox using the TalkJS Session. We will do this by registering an event handler to listen for unread conversations and render the counter accordingly on a web page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-session"&gt;
  &lt;/a&gt;
  Setting up a Session
&lt;/h2&gt;

&lt;p&gt;A &lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/Session/"&gt;TalkJS Session&lt;/a&gt; represents a user’s active browser tab. The Session is also responsible for authenticating users and your application with TalkJS.&lt;/p&gt;

&lt;p&gt;Here, we create a &lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/User.html"&gt;TalkJs user&lt;/a&gt; and bind that user to an &lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/Inbox/"&gt;Inbox &lt;/a&gt;instance using the TalkJs Session. Let’s define a TalkJS session using the &lt;em&gt;new Talk.Session(options)&lt;/em&gt; constructor and pass our appID and &lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/User/"&gt;User&lt;/a&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var user = new Talk.User({
    id: "124582", //unique ID for a new user or an existing user's ID
    name: "Chris Pratt",
    email: "chris@example.com",
    photoUrl: "https://i.picsum.photos/id/1025/4951/3301.jpg",
    welcomeMessage: "Hey there,welcome to TalkJS!",
    role: "default"
});

window.talkSession = new Talk.Session({
    appId: "APP_ID", // replace this with your real APP ID
    me: user
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After setting up the Session, it is now time to create a TalkJS inbox so that our user can chat with other TalkJS users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var inbox = talkSession.createInbox();
// Mount TalkJS Inbox to a Div with id "talkjs-container"
inbox.mount(document.getElementById("talkjs-container"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B5b2luc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Ic4oMOr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B5b2luc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Ic4oMOr.png" alt="alt_text" title="TalkJS Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Other than plain JavaScript, TalkJs SDK supports Vue, Angular, and React. And the API will be the same across these frameworks. You can check out our &lt;a href="https://talkjs.com/docs/"&gt;docs&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#listening-for-unread-conversation-changes"&gt;
  &lt;/a&gt;
  Listening for Unread Conversation Changes
&lt;/h2&gt;

&lt;p&gt;Now that our Inbox is set up, we can start listening for any unread conversations. This is made easy by the TalkJS &lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/Session/#Session__unreads"&gt;Session.unreads&lt;/a&gt; object. &lt;/p&gt;

&lt;p&gt;The “&lt;em&gt;On&lt;/em&gt;” method of the &lt;em&gt;Session.unreads&lt;/em&gt; object fires a “&lt;strong&gt;change&lt;/strong&gt;” event right after TalkJS loads, and every time the amount of unread conversations changes. The event handler gets an array of objects with information about the &lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/Session/#UnreadConversation"&gt;unread conversations&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.talkSession.unreads.on("change", function (unreadConversations) {
    console.log(unreadConversations)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The _unreadConversations_is a JSON array that looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
    {
        "lastMessage": {
            "conversation": {
                "id": "unread1",
                "custom": {
                    "category": "test123"
                },
                "topicId": null,
                "subject": "TalkJS Unread Message Counter tutorial",
                "welcomeMessages": null,
                "photoUrl": null
            },
            "isByMe": false,
            "senderId": "135487",
            "sender": {
                "id": "135487",
                "name": "Stella Admin",
                "welcomeMessage": "Hey there! How are you? :-)",
                "photoUrl": "https://picsum.photos/200",
                "role": "Admin",
                "configuration": "Admin",
                "custom": {},
                "availabilityText": null,
                "locale": null,
                "email": "&amp;lt;suppressed&amp;gt;",
                "phone": "&amp;lt;suppressed&amp;gt;"
            },
            "body": "New conversation",
            "type": "text",
            "timestamp": 1627806520159,
            "read": false,
            "origin": "web",
            "custom": {
                "textMessage": "true"
            },
            "attachment": null,
            "location": null
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rendering-the-unread-counter"&gt;
  &lt;/a&gt;
  Rendering the Unread Counter
&lt;/h2&gt;

&lt;p&gt;Now that we have figured out how to get the data on unread conversations of a user, we can use the data to display information to the user however we want!&lt;/p&gt;

&lt;p&gt;Let me show an example of this using a simple HTML span tag and JavaScript to update the unread conversations counter.&lt;/p&gt;

&lt;p&gt;Define a heading that contains the placeholder for the unread counter in a span tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;You have &amp;lt;span id="unreadCount" class="bold_blue"&amp;gt; 0 &amp;lt;/span&amp;gt; unread conversations.&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Define an &lt;em&gt;event handler&lt;/em&gt; for the &lt;em&gt;Session.unreads.on()&lt;/em&gt; method that updates the unread counter whenever the TalkJS app loads or the unread conversation data changes. We can check the length of the array provided to the &lt;em&gt;Handler&lt;/em&gt; to determine the number of unread conversations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.talkSession.unreads.on("change", function (unreadConversations) {
    var amountOfUnreads = unreadConversations.length;
    document.getElementById("unreadCount").textContent= amountOfUnreads;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVlp1FKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/J0h69zQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVlp1FKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/J0h69zQ.gif" alt="alt_text" title="TalkJS Unread Counter Demo GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s it! This was a simple example, but as you have plenty of information available for an unread conversation, you can get creative and implement better UX-friendly ways to display the counter!&lt;/p&gt;

&lt;p&gt;If you run into any issues, please get in touch via the popup on &lt;a href="https://talkjs.com/"&gt;our website&lt;/a&gt; or send an email to &lt;a href="//mailto:dev@talkjs.com"&gt;dev@talkjs.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>talkjs</category>
      <category>sessionunreads</category>
      <category>talkjsinbox</category>
      <category>unreadcounter</category>
    </item>
    <item>
      <title>Share your salary and see what everyone else is making in DevOps</title>
      <author>DEVOPS-JOBS.NET</author>
      <pubDate>Wed, 04 Aug 2021 06:54:20 +0000</pubDate>
      <link>https://dev.to/devops_jobsnet/share-your-salary-and-see-what-everyone-else-is-making-in-devops-la4</link>
      <guid>https://dev.to/devops_jobsnet/share-your-salary-and-see-what-everyone-else-is-making-in-devops-la4</guid>
      <description>&lt;p&gt;We were wondering quite recently what the global salary landscape in the DevOps / Cloud Engineering world would look like. Searching around for some data provided few results and basically all of them didn’t provide a full dataset for us to play around with and use freely.&lt;/p&gt;

&lt;p&gt;So we decided to set up our own survey, ask the global DevOps scene what they’re making anually, and then release all the data for free afterwards in the public domain under &lt;a href="https://creativecommons.org/share-your-work/public-domain/cc0/"&gt;CC0 license terms&lt;/a&gt;. Which literally means global salary data from the public, for the public.&lt;/p&gt;

&lt;p&gt;We went on quickly by defining some generalized attributes that would make a really simplistic survey everyone can fill it out in under a minute and don’t have to think too hard while doing it, but would still provide as much valuable information as possible so you can derive real insights from it. All of this in an anonymized fashion, of course. We don’t like touching PII anyways – &lt;a href="https://devops-jobs.net/about/"&gt;not really our business&lt;/a&gt; 😉&lt;/p&gt;

&lt;p&gt;It took almost two weeks of deliberations about what to ask for – yeah it gets quite difficult when you start thinking about what makes sense and trying not to mess it up completely – and in roughly a weekend our little salaries app (Django + SQLite are your friends, yay) was built and ready to launch.&lt;/p&gt;

&lt;p&gt;🎉 Released a few days ago you can check (and fill) it out here: &lt;a href="https://salaries.devops-jobs.net/"&gt;https://salaries.devops-jobs.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As soon as we have a little valid dataset and solved some open issues along the way (noticed we provide a selection of the 30 most used currencies in global trade? Probably some averaged conversion into USD for all non-USD salaries would be nice having added to the data as well 🤔) we’ll release a first dump of the data &lt;a href="https://salaries.devops-jobs.net/download"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end we think it would be great if we can manage to create a sort of rolling survey throughout the year with a constantly updated dataset that everyone can use as they wish – candidates, recruiters, hr departments, startup founders, data scientists, you name it…&lt;/p&gt;

&lt;p&gt;We made everything a select/choice field to avoid free-form input in general, except for the salary value of course. The job titles are the ones that are popular on our &lt;a href="https://devops-jobs.net/"&gt;DevOps job board&lt;/a&gt;, just to stay real and not list decades old jobs that practially don’t mean anything and aren’t even hired for anymore. We provide an open API for this too (see &lt;a href="https://devops-jobs.net/api/list-job-titles/"&gt;https://devops-jobs.net/api/list-job-titles/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you like the idea and want to help us to gather a free and open database of DevOps salary information, feel free to share this survey with anyone who likes to fill out salary surveys – just kidding – the more data the better obviously 😉&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post originally appeared under &lt;a href="https://insights.devops-jobs.net/share-your-salary-and-see-what-everyone-else-is-making-in-devops/"&gt;https://insights.devops-jobs.net/share-your-salary-and-see-what-everyone-else-is-making-in-devops/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>career</category>
      <category>insights</category>
      <category>cloud</category>
    </item>
    <item>
      <title>React in a Nutshell</title>
      <author>Kumar Prince</author>
      <pubDate>Wed, 04 Aug 2021 06:39:33 +0000</pubDate>
      <link>https://dev.to/thekrprince/react-in-a-nutshell-1kb3</link>
      <guid>https://dev.to/thekrprince/react-in-a-nutshell-1kb3</guid>
      <description>&lt;p&gt;Hello👋 Everyone,&lt;/p&gt;

&lt;p&gt;This blog is about getting started with ReactJS which is indeed a very popular library for creating UI. React is developed by Jordan Walke ex-employee of Facebook company. React allows developers to create large applications which can change the data without reloading the webpage. It is fast, scalable and simple. It's a view library and can be integrated with different applications as Angular.&lt;/p&gt;

&lt;p&gt;I started learning React last year and faced lot of difficulties. TBH, coming from a Testing background I faced so many challenges while learning development but now I love it. I've really come very far from where I began. So without wasting any more minute I'll start with how anyone should get started learning React.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#jsx-javascript-xml"&gt;
  &lt;/a&gt;
  JSX (JavaScript XML)
&lt;/h1&gt;

&lt;p&gt;Anyone who wants to learn React should be familiar with HTML as they would be spending more time creating layouts. React uses JSX which is similar to HTML but JSX is a mixture of HTML and JavaScript which forms a component. JSX gets translated into JavaScript at runtime with the help of Babel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Normal HTML
&amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;This is a React Blog&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

// JSX
&amp;lt;&amp;gt;
    &amp;lt;Hello /&amp;gt;
    &amp;lt;p&amp;gt;This is a React Blog&amp;lt;/p&amp;gt;
&amp;lt;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Hello&lt;/strong&gt; is a component, it would've been made you confused that when this type of HTML element have been created but trust me that's not the case here. This is a React Component which needs to be imported in &lt;strong&gt;&lt;em&gt;App.js&lt;/em&gt;&lt;/strong&gt; file to be rendered on UI. &lt;strong&gt;&amp;lt;&amp;gt;&amp;lt;/&amp;gt;&lt;/strong&gt; is a React Fragment which is used to wrap the components when we don't require an extra node in DOM tree. You can search more on this later.&lt;/p&gt;

&lt;p&gt;After getting transpiled with the help of Babel, JSX gets converted as-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// JSX code
&amp;lt;h1&amp;gt;This is a React Blog&amp;lt;/h1&amp;gt;

// Transpiled code into JS
React.createElement('h1', {}, 'This is a React Blog'); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;FYI, we can write the JavaScript code directly in our file rather than writing JSX but that would take enormous amount of time, that's why JSX code is there for our facility. So, use that kindly 👨‍💻.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hooks-vs-class-component"&gt;
  &lt;/a&gt;
  Hooks vs Class Component
&lt;/h1&gt;

&lt;p&gt;I would recommend everyone to learn Hooks instead of Class Component as Facebook says😜.&lt;br&gt;
But IMO, Hooks has made React easier to learn. When I started learning React I learned class component first and got messed up while learning so many lifecycle methods and few got deprecated till I finished and then I started learning Hooks. Hooks is just as amazing, you can get your work done just with &lt;strong&gt;useEffect&lt;/strong&gt; in the place of &lt;em&gt;componentDidMount()&lt;/em&gt;, &lt;em&gt;componentDidUpdate()&lt;/em&gt;, &lt;em&gt;componentWillUnmount()&lt;/em&gt; methods. &lt;strong&gt;useState&lt;/strong&gt; hook can be used for mutating state. No need of using &lt;strong&gt;this&lt;/strong&gt; keyword every time while mutating state or calling any functions unlike &lt;strong&gt;class components&lt;/strong&gt;.&lt;br&gt;
Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Hooks&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Similar to componentDidMount and componentDidUpdate:&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Update the document title using the browser API&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`You clicked &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;clicked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Class Component&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`You clicked &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`You clicked &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;clicked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h1&gt;

&lt;p&gt;Not to mention, without knowing JavaScript learning React would be a very bad idea as React is based on JavaScript only. One has to use the same way of variable declaration and method writing. But as this is a library, certain rules needs to be followed, Camel notation is used everywhere in React when calling event listener. E.g. &lt;strong&gt;&lt;em&gt;onclick&lt;/em&gt;&lt;/strong&gt; is used in vanilla JS but in React the same event would be called as &lt;strong&gt;&lt;em&gt;onClick&lt;/em&gt;&lt;/strong&gt;. Other examples are onChange, onDrag, onDrop etc.&lt;br&gt;
For more info related to React events you can visit &lt;a href="https://reactjs.org/docs/events.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#state-and-props"&gt;
  &lt;/a&gt;
  State and Props
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;State&lt;/strong&gt; plays a very vital role in UI development. In React also it's used to handle the behavior of UI. In fact, whenever any state change happens, react only updates the changed attributes rather than rebuilding the new DOM tree which increases the efficiency. This process is called &lt;strong&gt;Reconciliation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Props&lt;/strong&gt; is an object which stores the value of attributes of a tag and work similar to the HTML attributes. It gives a way to pass data from one component to other components. It is similar to function arguments. Props are passed to the component in the same way as arguments passed in a function.&lt;/p&gt;

&lt;p&gt;Eg.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Parent Component&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./child&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`You clicked &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;clicked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Child Component&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see in the code, &lt;strong&gt;Parent&lt;/strong&gt; component has state called count which mutates when &lt;strong&gt;&lt;em&gt;Click Me&lt;/em&gt;&lt;/strong&gt; button gets clicked. And the &lt;strong&gt;Child&lt;/strong&gt; component is imported inside the &lt;strong&gt;Parent&lt;/strong&gt; component, &lt;strong&gt;&lt;/strong&gt; has the counter value which is accessible in &lt;strong&gt;Child&lt;/strong&gt; component via &lt;em&gt;props&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#css-modules"&gt;
  &lt;/a&gt;
  CSS Modules
&lt;/h1&gt;

&lt;p&gt;CSS Modules let you use the same CSS class name in different files without worrying about naming clashes. Normally, CSS is imported as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './style.css';

&amp;lt;Button className="main-btn"&amp;gt;&amp;lt;/Button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but when using CSS modules then&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import styles from './style.module.css';

&amp;lt;Button className={styles.mainBtn}&amp;gt;&amp;lt;/Button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#spa"&gt;
  &lt;/a&gt;
  SPA
&lt;/h1&gt;

&lt;p&gt;SPA stands for &lt;strong&gt;Single Page Application&lt;/strong&gt;. You do know how our mobile application is fast, on a single click it navigates to different pages. The same way Web application also works nowadays and React is one of the widely used library to create SPA.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#libraries-and-framework-support"&gt;
  &lt;/a&gt;
  Libraries and Framework support
&lt;/h1&gt;

&lt;p&gt;Several libraries and frameworks are out there which can be easily integrated into React application. Few like &lt;strong&gt;&lt;em&gt;React Router, Redux, MaterialUI&lt;/em&gt;&lt;/strong&gt; you should learn. It'll make your life easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-react-router"&gt;
  &lt;/a&gt;
  1. React Router
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;React is well known for its declarative programming model. If you are creating an application with React, it will be great to have some components that you can compose declaratively in your app. React router is a collection of such components. Suppose you want to add some URLs which you can bookmark. Or, what if you want a composable way to navigate in React native? We have a React Router for the solution.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;React Router is one of the best component libraries that makes it effortless for the developer to handle navigation in a single-page app. Not only that, but the library also offers smooth screen-to-screen transition, server-side rendering and vivid support for nesting.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-redux"&gt;
  &lt;/a&gt;
  2. Redux
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;When it comes to state management libraries, the one that comes to our mind is Redux. Redux also comes under the category of best component libraries with 20.9k GitHub stars and 3k forks. Although it is meant to be used with the library components of React UI, you can also use it with Vue, Angular, Ember, and other JS frameworks.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Redux helps to connect React components to pieces of state by decreasing the need for props or callbacks. The library is often termed as a developer’s best friend. It helps you to write consistent codes and is environment-friendly. You can also edit the code while your app is live.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-material-ui"&gt;
  &lt;/a&gt;
  3. Material UI
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you are not much of a designer, no issues. Material UI gives you a collection of themes that you can choose for your site. There is extensive documentation so that you can find whatever you need whenever you feel stuck.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you're done learning these things, get ready to dirty your hands with &lt;strong&gt;Creating Custom Hooks, Unit Testing, Server Side Rendering using NextJS, etc.&lt;/strong&gt; which will help you to evolve as a great developer.&lt;/p&gt;

&lt;p&gt;Last but not least, by learning React you can develop Web Applications, Mobile Applications and Desktop Applications as well. There are hell lot of demand for React developers. So, start learning it today.&lt;/p&gt;

&lt;p&gt;So that was it from this article😇. Please share your thoughts/comments/feedback.&lt;/p&gt;

&lt;p&gt;Connect me @ &lt;a href="https://twitter.com/TheKrPrince"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/thekrprince/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>redux</category>
    </item>
    <item>
      <title>Notes of Clean Architecture</title>
      <author>Kimmo Sääskilahti</author>
      <pubDate>Wed, 04 Aug 2021 06:26:04 +0000</pubDate>
      <link>https://dev.to/ksaaskil/notes-of-clean-architecture-dnm</link>
      <guid>https://dev.to/ksaaskil/notes-of-clean-architecture-dnm</guid>
      <description>&lt;p&gt;I recently finished reading &lt;a href="https://www.goodreads.com/book/show/18043011-clean-architecture"&gt;Clean Architecture&lt;/a&gt; by Robert C. Martin. This book accompanied with &lt;a href="https://www.goodreads.com/book/show/3735293-clean-code"&gt;Clean Code&lt;/a&gt; and &lt;a href="https://www.goodreads.com/book/show/10284614-the-clean-coder"&gt;Clean Coder&lt;/a&gt; are very useful reading for any professional software developer, even though they are getting old and there are better books available out there. This post briefly summarizes Clean Architecture.&lt;/p&gt;

&lt;p&gt;The book begins by discussing the &lt;strong&gt;cost of a mess&lt;/strong&gt;.  Making a mess is always slower than staying clean. Messy software slows down the development. A simple way to avoid making a mess is to practice test-driven development.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"The only way to go fast is to go well."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Software is a competition of two values: behavior and architecture. Well-behaving program does what it's expected to do. Good architecture makes the program easy to change.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Clean architecture is more important than behavior in the sense that a non-working program that's easy to change beats a working program that's impossible to change. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Behavior is often urgent but typically not that important. Architecture is always important but typically not that urgent.&lt;/p&gt;

&lt;p&gt;The book describes three programming paradigms: structural programming, object-oriented (OO) programming, and functional programming (FP).&lt;/p&gt;

&lt;p&gt;The most important aspect of OO programming is the power of &lt;em&gt;polymorphism&lt;/em&gt;. It allows creating "plugin architectures" where a dependent module can be swapped with another one without changing anything in the depending modules. The &lt;a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle"&gt;dependency inversion&lt;/a&gt; principle is introduced here. It's probably the most important concept in the whole book and it appears again and again.&lt;/p&gt;

&lt;p&gt;I was happy to find even a short discussion on FP as Bob Martin's book are typically very OO-heavy, even to the point where you think that OO is the best way to write clean code.&lt;/p&gt;

&lt;p&gt;The book then moves on to presenting the &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID principles&lt;/a&gt; for designing clean components.&lt;/p&gt;

&lt;p&gt;The first principle is single responsibility principle (SRP). This architectural principle is closely related to the Clean Code principle "A function should only do one thing". Similarly, a software module should only have one reason to change. The book phrases the principle in the form:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"A module should be responsible to only one actor."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The point is to avoid the situation where changing the behavior for one stakeholder surprisingly breaks the behavior for another stakeholder. A module should only be used for one purpose.&lt;/p&gt;

&lt;p&gt;The second principle is the open-closed principle (OCP). It says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Software should be open for extension but closed for modification."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As far as I understand correctly, this principle is closely related to the &lt;a href="https://stackoverflow.com/questions/383947/what-does-it-mean-to-program-to-an-interface"&gt;"Program against interfaces"&lt;/a&gt; principle. If a certain part of your module is "volatile" in the sense that users may want to swap that part with another implementation, your module should provide a simple way to do so by implementing an interface. Programming against interfaces ensures that your code depends on clean abstractions (instead of hard-coded but volatile logic) and remains open for extension.&lt;/p&gt;

&lt;p&gt;The third principle is the &lt;a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle"&gt;Liskov substitution principle&lt;/a&gt;. I would condense the principle in practical terms to "avoid &lt;a href="https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/"&gt;leaky abstractions&lt;/a&gt;". Any implementation of an interface should respect the abstraction and its contract. If you're implementing an interface for saving data to a remote storage, your implementation should not delete data as a side-effect. Otherwise, you run the risk of breaking any programs depending on the interface.&lt;/p&gt;

&lt;p&gt;The fourth principle is the interface segregation principle. I understand this principle as saying that a single interface shouldn't have multiple purposes. Too big an interface should be split into smaller ones, each with a well-defined purpose.&lt;/p&gt;

&lt;p&gt;The last and probably the most important principle of the five is the &lt;a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle"&gt;dependency inversion principle&lt;/a&gt;. This principle solves the problem of depending on volatile code. You don't want to name, instantiate, or inherit from volatile classes. Dependency inversion principle solves the problem by introducing an interface that the volatile module implements and depends on, inverting the dependency. See the figures in the Wikipedia article linked above.&lt;/p&gt;

&lt;p&gt;The book next moves on to components as "JAR files" and introduces principles such as the "reuse/release equivalence principle", "common closure principle" and "common reuse principle". The chapter also introduces "stability metrics" for heuristically measuring the stability or volatility of a module. I didn't find anything in this part of the book particularly interesting or useful, with the exception of the over-arching principle&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Depend on the direction of stability."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The last part of the book talks about clean architecture.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"A good architect maximizes the number of decisions not made."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good architecture leaves as many options open as possible for as long as possible.&lt;/p&gt;

&lt;p&gt;Good architecture supports (1) use cases and operation, (2) maintenance, (3) development, and (4) deployment. Minimizing the number of hard-coded dependencies keeps the architecture easy to change.&lt;/p&gt;

&lt;p&gt;Good architecture is testable and independent of details such as frameworks, databases, UIs, and external agencies.&lt;/p&gt;

&lt;p&gt;Good architecture is centered on the use-case. When you look at the architecture, it should scream its use-case.&lt;/p&gt;

&lt;p&gt;See the &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Architecture&lt;/a&gt; in the author's blog. External details such as UI, database, or any other I/O depend on high-level policies (business rules), not the other way around. The architecture is very similar to &lt;a href="https://netflixtechblog.com/ready-for-changes-with-hexagonal-architecture-b315ec967749"&gt;hexagonal architecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the book talks about different ways to deploy components either as code-level packages, as separate processes, or as separate services (micro-services). The cons of micro-service architecture are the "independent deployment fallacy", the "independent development fallacy", and the fact that abstractions are simpler to define with code-level packages. With all the hype around micro-services, the bashing of micro-services was kind of a refreshing read.&lt;/p&gt;

&lt;p&gt;The principles in this book are best applied carefully and in small doses. Don't go blowing up your well-working Django app to decouple the business rules from the database. Don't create an interface for every dependency. Carefully consider the pros and cons of added abstraction layers. See the book &lt;a href="https://www.oreilly.com/library/view/architecture-patterns-with/9781492052197/"&gt;Architecture Patterns with Python&lt;/a&gt; how to gradually introduce hexagonal architecture into your Python code.&lt;/p&gt;

&lt;p&gt;But do write tests to ensure your architecture remains clean. &lt;/p&gt;

</description>
      <category>books</category>
      <category>architecture</category>
      <category>career</category>
    </item>
  </channel>
</rss>
