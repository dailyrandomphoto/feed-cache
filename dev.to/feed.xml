<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Everything you need to know about OpenTelemetry Java auto-instrumentation üë®üèΩ‚Äçüíª</title>
      <author>Ankit Anand ‚ú®</author>
      <pubDate>Mon, 30 Aug 2021 12:59:24 +0000</pubDate>
      <link>https://dev.to/signoz/everything-you-need-to-know-about-opentelemetry-java-auto-instrumentation-39d9</link>
      <guid>https://dev.to/signoz/everything-you-need-to-know-about-opentelemetry-java-auto-instrumentation-39d9</guid>
      <description>&lt;p&gt;OpenTelemetry auto instrumentation libraries are the best option for someone who doesn't want to modify their application code for generating telemetry data(logs, metrics, and traces). In this article, let's see what options does OpenTelemetry provides for auto-instrumenting your Java apps.&lt;/p&gt;

&lt;p&gt;OpenTelemetry is a set of tools, APIs, and SDKs which enables you to create and manage the telemetry data for your services and applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What is instrumentation?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instrumentation means the ability to measure the performance and to diagnose errors in your application code. Instrumenting a piece of software means generating relevant data like logs, metrics, and traces to gauge the software's performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-opentelemetry-java-auto-instrumentation"&gt;
  &lt;/a&gt;
  What is OpenTelemetry Java auto instrumentation?
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry provides three repositories to instrument applications. The¬†&lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;opentelemetry-java-instrumentation&lt;/b&gt;&lt;/a&gt;¬†repo contains the code for auto-instrumentation of Java applications.&lt;/p&gt;

&lt;p&gt;The other two repos are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/open-telemetry/opentelemetry-java" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;opentelemetry-java&lt;/b&gt;&lt;/a&gt;¬†- contains components for manual instrumentation as well as the API and SDK.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/open-telemetry/opentelemetry-java-contrib" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;opentelemetry-java-contrib&lt;/b&gt;&lt;/a&gt;¬†- contains libraries for standalone utilities which don't fit the scope of the other two projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The OpenTelemetry Java auto instrumentation repo provides a Java JAR agent that can be downloaded and attached to Java 8+ applications. The agent recognizes popular libraries and frameworks and injects bytecode dynamically to instrument the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-autoinstrument-your-java-application"&gt;
  &lt;/a&gt;
  Steps to auto-instrument your Java application
&lt;/h2&gt;

&lt;p&gt;The auto-instrumentation of Java applications by OpenTelemetry is achieved with the help of Java agents. The JVM provides a standard way for modifying code at runtime by using a java agent. Java agents come as part of the Java instrumentation API. It basically allows you to modify code at runtime without touching your code.&lt;/p&gt;

&lt;p&gt;You can attach the Java agent to your application through your terminal (-javaagent). Java agents are fundamentally java classes following certain conventions. When the agents are attached to the application at runtime, JVM makes sure to execute it to modify what it specifies.&lt;/p&gt;

&lt;p&gt;Now that you know how Java agent works, let's see how to use the Java agent provided by OpenTelemetry for auto-instrumentation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the¬†&lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent-all.jar"&gt;latest Java Jar agent&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Prepare environment variables needed for the Java agent. The common ones include a service name for the service being monitored, traces and metrics exporter format specifier, and an endpoint for collecting the captured data.&lt;/li&gt;
&lt;li&gt;You need to export the captured data to an endpoint. You can use a full-stack open-source observability tool like¬†&lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;¬†as a backend to capture the data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Examples of some of the environment variables to take care of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_TRACES_EXPORTER=otlp
OTEL_METRICS_EXPORTER=none
OTEL_EXPORTER_OTLP_ENDPOINT=&amp;lt;IP of SigNoz Backend&amp;gt;:4317
OTEL_RESOURCE_ATTRIBUTES="service.name=SERVICE_NAME"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Along with these environment variables, you need to attached the Java JAR agent downloaded. If you're running the app from your terminal, you can use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java -javaagent:/path/to/opentelemetry-javaagent-all.jar -jar target/*.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The path needs to be replaced with the address of the location where you have downloaded the saved the Java agent file. So the final command from terminal will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_METRICS_EXPORTER=none
OTEL_EXPORTER_OTLP_ENDPOINT="http://&amp;lt;IP of SigNoz&amp;gt;:4317"
OTEL_RESOURCE_ATTRIBUTES=service.name=javaApp
java -javaagent:/Users/Downloads/to/opentelemetry-javaagent-all.jar -jar target/*.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to read how to auto-instrument a sample Spring Boot application, and get the data reported with SigNoz, check out this article üëá &lt;br&gt;&lt;br&gt;
&lt;a href="https://signoz.io/blog/opentelemetry-spring-boot/"&gt;Monitor your Spring Boot application with OpenTelemetry and SigNoz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>monitoring</category>
      <category>java</category>
      <category>opentelemetry</category>
    </item>
    <item>
      <title>
What is Event loop in JavaScript?</title>
      <author>Shamanta Sristy</author>
      <pubDate>Mon, 30 Aug 2021 12:55:30 +0000</pubDate>
      <link>https://dev.to/shamantasristy/what-is-event-loop-in-javascript-34a5</link>
      <guid>https://dev.to/shamantasristy/what-is-event-loop-in-javascript-34a5</guid>
      <description>&lt;p&gt;Let's look into JavaScript Event loop from a different angle. Sounds interesting, right? It is! So, sit tight and let's dive into it!&lt;br&gt;
The concept of event loop is very simple. But in order to understand that,  first we need to be clear about some concepts related to event loop. &lt;/p&gt;

&lt;p&gt;Inside &lt;strong&gt;Browser&lt;/strong&gt;, there is a Javascript engine (we are considering &lt;strong&gt;V8&lt;/strong&gt; for chrome.) and an environment to run javascript properly. Javascript engine has two parts, &lt;strong&gt;Heap&lt;/strong&gt; and &lt;strong&gt;Call Stack&lt;/strong&gt;. And the engine has some assistant named &lt;strong&gt;Web APIs&lt;/strong&gt; and &lt;strong&gt;Callback Queue&lt;/strong&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#heaps"&gt;
  &lt;/a&gt;
  Heaps
&lt;/h2&gt;

&lt;p&gt;It's an unstructured memory block. Our code's memory allocation happens here. As a programmer we don't have to worry much about heaps.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#call-stack"&gt;
  &lt;/a&gt;
  Call Stack
&lt;/h2&gt;

&lt;p&gt;We can consider Call Stack as a kitchen where all our code executed or cooked. Whenever we  try to run a piece of code, it goes to call stack first and then executed. It works in &lt;strong&gt;LIFO&lt;/strong&gt; style. That is &lt;strong&gt;L&lt;/strong&gt;ast  &lt;strong&gt;I&lt;/strong&gt;n &lt;strong&gt;F&lt;/strong&gt;irst &lt;strong&gt;O&lt;/strong&gt;ut.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const lunch = () =&amp;gt; console.log("It's time for lunch!");

const dinner = () =&amp;gt; console.log("It's time for dinner!");

const breakfast = () =&amp;gt; {
  console.log("Time to breakfast!");
  setTimeout(lunch, 3000);
  dinner();
};

breakfast();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run the code above, The global execution context &lt;em&gt;main()&lt;/em&gt; runs on the browser, and JS engine will start to read the code from the first line and will search for tasks. On the last line, one function is called. So, this function will go to the Call Stack and will execute the tasks. First it will print &lt;em&gt;Time to breakfast!&lt;/em&gt; , then goes to the next line, where we have an asynchronous block of code.&lt;br&gt;
 As we know, JavaScript is synchronous and single-threaded language, this asynchronous block of code goes to the call stack and suddenly pops out. Here JS engine takes help from it's assistant, &lt;strong&gt;Web API&lt;/strong&gt;. The setTimeout() waits on the Web API and after it's timer runs out (In this case,  3 seconds), After 3 seconds the callback function goes to the &lt;strong&gt;Callback Queue&lt;/strong&gt; and waits for Call stack to be free. By this time, Call stack runs the other piece of codes. Prints&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;It's time for dinner!&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-apis"&gt;
  &lt;/a&gt;
  Web APIs
&lt;/h2&gt;

&lt;p&gt;Web API works as JS engines assistant. When JS engine have to deal with asynchronous code, it takes the help of Web API. Web API handles the blocking behavior of JavaScript code. &lt;br&gt;
In this case, from our code above, we can say Web API will take the callback function&lt;br&gt;
&lt;br&gt;
  &lt;code&gt;setTimeout(lunch, 3000);&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
  , run it's timer,  and pass it to Callback Queue after 3 seconds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#callback-queue"&gt;
  &lt;/a&gt;
  Callback Queue
&lt;/h2&gt;

&lt;p&gt;It's a guard who monitors the stack of asynchronous callback functions who just completed the task of waiting and passed the gate of Web API. Callback Queue works using &lt;strong&gt;FIFO&lt;/strong&gt; (&lt;strong&gt;F&lt;/strong&gt;irst  &lt;strong&gt;I&lt;/strong&gt;n &lt;strong&gt;F&lt;/strong&gt;irst &lt;strong&gt;O&lt;/strong&gt;ut ) method. And now, they waits here to go back to Call Stack. But how will Call Stack know that there's some callback functions waiting in Callback Queue? &lt;br&gt;
Here comes the star, &lt;strong&gt;Event Loop&lt;/strong&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#event-loop"&gt;
  &lt;/a&gt;
  Event Loop
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Event loop&lt;/em&gt; is just a guardian who keeps a good &lt;strong&gt;communication&lt;/strong&gt; with &lt;strong&gt;Call Stack&lt;/strong&gt; and &lt;strong&gt;Callback Queue&lt;/strong&gt;. It checks if the call stack is free, then lets know the callback queue. Then Callback queue passes the callback function to Call stack to be executed. When all the callback functions are executed, the call stack is out and global execution context is free. &lt;/p&gt;

&lt;p&gt;See! it was not complex at all! üòÑ&lt;br&gt;
Thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>eventloop</category>
    </item>
    <item>
      <title>MarkdownX Editor üéâ</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 30 Aug 2021 12:41:35 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/markdownx-editor-27bg</link>
      <guid>https://dev.to/bobbyiliev/markdownx-editor-27bg</guid>
      <description>&lt;p&gt;Our MarkdownX editor is officially live and available on the DevDojo. It's also available for you to use in your &lt;a href="https://tallstack.dev"&gt;TallStack&lt;/a&gt; applications üçª.&lt;/p&gt;

&lt;p&gt;If this is your first time hearing about the &lt;a href="https://devdojo.com/markdownx"&gt;MarkdownX Editor&lt;/a&gt;, continue reading to learn more about how it can make writing in Markdown easier and more fun than ever before.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MarkdownX become top 4 product of the day on &lt;a href="https://www.producthunt.com/posts/markdownx"&gt;ProductHunt&lt;/a&gt; üòª&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-markdownx"&gt;
  &lt;/a&gt;
  What is MarkdownX
&lt;/h2&gt;

&lt;p&gt;MarkdownX is like a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; element with super powers ‚ú®. It is a text editor with a beautiful interface that makes it easy for users to write in Markdown. The component has a pretty sweet dropdown that allows you to easily upload images, add lists, embed videos, and so much more!&lt;/p&gt;

&lt;p&gt;A month ago we posted a tweet about a new editor we were building and it got a pretty huge response with nearly 500 likes and 50 retweets ü§Ø&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/tnylea/status/1419059051430825986"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hzj9Pr_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/tweet-md.png" alt="tweet-md.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That set things in motion and we started working on a version that could be used with any &lt;a href="https://tallstack.dev"&gt;Tallstack&lt;/a&gt; application. üôå.&lt;/p&gt;

&lt;p&gt;I'll show you the steps below üëá on how to install this in a new Tallstack app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-a-new-laravel-app"&gt;
  &lt;/a&gt;
  1. üîß Create a new Laravel App
&lt;/h2&gt;

&lt;p&gt;The first step is creating a new Laravel application. If you already have an existing Tallstack application, you can skip ahead to step 3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;laravel new mdx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, I'll install a new laravel app in a folder named &lt;code&gt;mdx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, go into that directory &lt;code&gt;cd mdx&lt;/code&gt;, and we can move to the next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-installing-the-tallstack-preset"&gt;
  &lt;/a&gt;
  2. üî© Installing the Tallstack Pre-set
&lt;/h2&gt;

&lt;p&gt;The Tallstack preset allows us to add &lt;a href="https://tailwindcss.com"&gt;TailwindCSS&lt;/a&gt;, &lt;a href="https://alpinejs.dev"&gt;Alpine&lt;/a&gt;, and &lt;a href="https://laravel-livewire.com"&gt;Livewire&lt;/a&gt; in our new application with a few simple commands. You can find that preset here: &lt;a href="https://github.com/laravel-frontend-presets/tall"&gt;https://github.com/laravel-frontend-presets/tall&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's run those commands in our new application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require livewire/livewire laravel-frontend-presets/tall
php artisan ui tall
npm install
npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we have run those commands, we should be able to visit our new site:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewME1utI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/tallstack-preset.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewME1utI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/tallstack-preset.png" alt="tallstack-preset.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we should have a new &lt;a href="https://tallstack.dev"&gt;Tallstack&lt;/a&gt; application in front of us.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;note: if you get an application key error, you may also need to run &lt;code&gt;php artisan key:generate&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next up, we'll be moving the component files to our new application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-adding-the-markdownx-editor"&gt;
  &lt;/a&gt;
  3. üß© Adding the MarkdownX Editor
&lt;/h2&gt;

&lt;p&gt;Adding this component to your project is literally as easy as &lt;strong&gt;1&lt;/strong&gt;, &lt;strong&gt;2&lt;/strong&gt;, &lt;strong&gt;3&lt;/strong&gt;. Because that's how many files the MarkdownX editor includes. Here are those files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Controller&lt;/strong&gt; - app/Http/Livewire/MarkdownX.php&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;View&lt;/strong&gt; - resources/views/livewire/markdown-x.blade.php&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Config&lt;/strong&gt; - config/markdownx.php&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After downloading a copy of the latest MarkdownX editor, you will need to move those files üëÜ to their appropriate location in your Laravel application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: make sure to run &lt;code&gt;php artisan storage:link&lt;/code&gt;, if you want to test out image uploading. The MarkdownX storage uses the local public disk by default, but you can change this in the config üòâ.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you have done this, we are now ready to test it out in our new application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-out-the-editor"&gt;
  &lt;/a&gt;
  üß™ Test out the Editor
&lt;/h2&gt;

&lt;p&gt;To test the editor in our new app we are going to modify the welcome page located at &lt;code&gt;resources/views/welcome.blade.php&lt;/code&gt;, to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@extends('layouts.app')

@section('content')
    &amp;lt;livewire:markdown-x /&amp;gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we visit our application homepage we'll see the editor in front of us ü§ò.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VIt-owNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/markdown-x-editor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIt-owNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/markdown-x-editor.png" alt="markdown-x-editor.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now drag-and-drop images, add videos, lists, and a bunch of other cool things that make writing more fun and easier than ever before.&lt;/p&gt;

&lt;p&gt;Be sure to check out the official new landing page for &lt;a href="https://devdojo.com/markdownx"&gt;MarkdownX here&lt;/a&gt; and the &lt;a href="https://devdojo.com/markdownx"&gt;documentation here&lt;/a&gt;. I hope you find this component useful in your next project, and I hope you continue to build awesome stuff ü§ò. See you soon!&lt;/p&gt;

</description>
      <category>markdown</category>
      <category>laravel</category>
      <category>tailwindcss</category>
      <category>saas</category>
    </item>
    <item>
      <title>Upload files to the blockchain (Part 1)</title>
      <author>Allan Dorr</author>
      <pubDate>Mon, 30 Aug 2021 12:29:08 +0000</pubDate>
      <link>https://dev.to/aldorr/upload-files-to-the-blockchain-part-1-3m9h</link>
      <guid>https://dev.to/aldorr/upload-files-to-the-blockchain-part-1-3m9h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#now-lets-get-our-hands-dirty"&gt;
  &lt;/a&gt;
  Now let's get our hands dirty
&lt;/h2&gt;

&lt;p&gt;So hopefully I've &lt;em&gt;piqued&lt;/em&gt; your curiosity and you want to jump in now and join in on the fun.&lt;br&gt;
If you want to read my wee rambling on the build-up, see previous post: &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aldorr" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HIYzIAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--K4FnXGTn--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136227/423a8ef7-7e02-4d06-a6a5-52e546e7cbc7.jpeg" alt="aldorr"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aldorr/filesharing-with-web3-storage-and-vue-js-1m2c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Filesharing with web3.storage and Vue.js (Part 0)&lt;/h2&gt;
      &lt;h3&gt;Allan Dorr „Éª Aug 25 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#reconsidering"&gt;
  &lt;/a&gt;
  Reconsidering
&lt;/h3&gt;

&lt;p&gt;After fooling around and installing, then following some tutorials and attempting to build the first steps in the project, I figured I don't actually want to make a WeTransfer clone, but something any developer can take, add their own Token and fire up their own WT-Like-Thing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#identifying-more-issues"&gt;
  &lt;/a&gt;
  Identifying more issues
&lt;/h3&gt;

&lt;p&gt;I've followed the tutorials and have had to update few things to get it working with Vue 3. These, I will cover when I stumble across them again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-installing"&gt;
  &lt;/a&gt;
  Step 1: Installing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create a web3.storage &lt;a href="https://web3.storage/login"&gt;account&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get an &lt;a href="https://web3.storage/account"&gt;API Token&lt;/a&gt; (Including 1TB of storage!)&lt;/li&gt;
&lt;li&gt;If you haven't done so already, install:
Node version 14 or higher and NPM version 7 just to be sure we're on the same page. I use nvm, so it's pretty easy to switch between versions.&lt;/li&gt;
&lt;li&gt;Create your Application (I used the vue-cli to generate one: i.e. &lt;code&gt;vue create web3-storage-tutorial&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Install web3storage &lt;code&gt;npm install web3.storage&lt;/code&gt; in the app's folder&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-2-javascript"&gt;
  &lt;/a&gt;
  Step 2: Javascript
&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;web3storage.js&lt;/code&gt;&lt;br&gt;
I put this in a &lt;code&gt;/src/utils&lt;/code&gt; folder. Maybe I'll have more utils and put them in there. I don't know. It seems like a good enough place for now.&lt;/p&gt;

&lt;p&gt;Add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// web3storage.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Web3Storage&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web3.storage/dist/bundle.esm.min.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is to import web3storage for Vue 3. We have to use the pre-compiled bundle, otherwise Webpack will go all wonky and we'll get stupid errors. We don't want stupid errors. They lead us nowhere.&lt;/p&gt;

&lt;p&gt;Now we want to export our code for use in our Vue modules, so we add this under the import:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// web3storage.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Code for accessing and uploading files goes here.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now inside of this &lt;code&gt;export&lt;/code&gt; we're going to create a couple of functions that will make sense in a minute:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;getAccessToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VUE_APP_WEB3STORAGE_TOKEN&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="nx"&gt;makeStorageClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Web3Storage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAccessToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;getAccessToken&lt;/code&gt; will read our web3storage access token from the .env.local file. For Vue 3 we have to prepend it with &lt;code&gt;VUE_APP_&lt;/code&gt; in order for it to load. &lt;em&gt;We'll need this token in a minute.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;makeStorageClient&lt;/code&gt; we will need whenever we want to upload something. Again, we'll be needing this soon.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#soon-is-now-so-we-need-these-functions"&gt;
  &lt;/a&gt;
  Soon is now, so we need these functions
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm going to already let you know that I basically copied these functions from the web3.storage docs. I'm hoping we can use them as a basis, though, and make something great!&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;storeWithProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFileList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;myFileList&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;// show the root cid as soon as it's ready&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onRootCidReady&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uploading files with cid:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// when each chunk is stored,&lt;/span&gt;
        &lt;span class="c1"&gt;//update the percentage complete and display&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;uploaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onStoredChunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;uploaded&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;totalSize&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;uploaded&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Uploading... &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;% complete`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;// TODO: can we get this to show in browser &amp;amp; update?&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// makeStorageClient returns&lt;/span&gt;
        &lt;span class="c1"&gt;// an authorized Web3.Storage client instance&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeStorageClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;// client.put will invoke our callbacks during the upload&lt;/span&gt;
        &lt;span class="c1"&gt;// and return the root cid when the upload completes&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;onRootCidReady&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;onStoredChunk&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the method that uploads our files and then responds to our app with the CID. we need this to display, and make a link. Right? Yes, we want to be able to send the link to cool people...&lt;/p&gt;

&lt;p&gt;And, here's our JavaScript so far:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-feed-it-something"&gt;
  &lt;/a&gt;
  Step 3: Feed it something
&lt;/h2&gt;

&lt;p&gt;Now this beast we are creating wants to be fed. It likes files, so we want to give it some files.&lt;br&gt;
And then finally we want to tell it what to do with said files (Upload them and make them available to the world‚Ä¶ to the solar sisters, to the universal compadre-hood of file-sharing-ness. Hello aliens. See our files!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--otbbhIHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1543722530-d2c3201371e7%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1200%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--otbbhIHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1543722530-d2c3201371e7%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1200%26q%3D80" alt="Andromeda Galaxy - Photo by Guillermo Ferla"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right.&lt;/p&gt;

&lt;p&gt;We scaffolded out our project with vue-cli, so it has almost everything I need. Oh shoot. Except some CSS. I'm going to go ahead and some &lt;a href="https://duckduckgo.com/?t=ffab&amp;amp;q=css+reset"&gt;CSS reset&lt;/a&gt; and my CSS Framework I'm using.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#some-css-first"&gt;
  &lt;/a&gt;
  Some CSS first
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  npm &lt;span class="nb"&gt;install &lt;/span&gt;equal-vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And we update our main.js file to look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Regular app stuff&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Equal stuff here&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Equal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;equal-vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;equal-vue/dist/style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Notice **.use(Equal)**&lt;/span&gt;
&lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#now-some-vue"&gt;
  &lt;/a&gt;
  Now some Vue
&lt;/h3&gt;

&lt;p&gt;We want to render a button that triggers a file input. Probably we should be able to select multiple files and upload them all to the same cab.&lt;/p&gt;

&lt;p&gt;In the pre-scaffolded Vue project there is the &lt;code&gt;App.vue&lt;/code&gt; which loads &lt;code&gt;HelloWorld.vue.&lt;/code&gt;&lt;br&gt;
Let's rename this to &lt;code&gt;UploadFiles.vue&lt;/code&gt;&lt;br&gt;
Remember: in App.vue we should change &lt;code&gt;HelloWorld&lt;/code&gt; to &lt;code&gt;UploadFiles&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In UploadFiles, we basically want a button that opens a file dialog when we click it, then we want to return the file and then upload it with another button.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-html-structure"&gt;
  &lt;/a&gt;
  Basic html structure
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;preview&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"file_select"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"upload"&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The button opens the file dialog. Then when we have some files selected, the upload button appears, and some image previews show up.&lt;/p&gt;

&lt;p&gt;Let's try to get it to look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--znZEh62R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9epwvrum0jmmsc0hrloc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--znZEh62R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9epwvrum0jmmsc0hrloc.png" alt="Image of Today's Final Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following is what I turned UploadFiles.vue into:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--UploadFiles.vue--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hero"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ title }}&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;it-divider&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;it-alert&lt;/span&gt;
      &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"my_thumbs!==null"&lt;/span&gt;
      &lt;span class="na"&gt;iconbox&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;
      &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Chosen Files"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;it-avatar-group&lt;/span&gt; &lt;span class="na"&gt;square&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;it-badge&lt;/span&gt; &lt;span class="na"&gt;position=&lt;/span&gt;&lt;span class="s"&gt;"top-left"&lt;/span&gt;
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;
          &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(thumb, i) in my_thumbs"&lt;/span&gt;
          &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt;
          &lt;span class="na"&gt;:value=&lt;/span&gt;&lt;span class="s"&gt;"i+1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;it-avatar&lt;/span&gt;
            &lt;span class="na"&gt;square&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"upload_preview"&lt;/span&gt;
            &lt;span class="na"&gt;:src=&lt;/span&gt;&lt;span class="s"&gt;"thumb"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/it-badge&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/it-avatar-group&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/it-alert&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;it-divider&lt;/span&gt;  &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"my_thumbs!==null"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;it-button-group&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;it-button&lt;/span&gt;
        &lt;span class="na"&gt;:type=&lt;/span&gt;&lt;span class="s"&gt;"my_thumbs!==null?'warning':'black'"&lt;/span&gt;
        &lt;span class="na"&gt;icon=&lt;/span&gt;&lt;span class="s"&gt;"note_add"&lt;/span&gt;
        &lt;span class="na"&gt;outlined&lt;/span&gt;
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"onPickFile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Select {{my_thumbs!==null?'New ':''}}Files
      &lt;span class="nt"&gt;&amp;lt;/it-button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;it-button&lt;/span&gt;
        &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"danger"&lt;/span&gt;
        &lt;span class="na"&gt;icon=&lt;/span&gt;&lt;span class="s"&gt;"upload"&lt;/span&gt;
        &lt;span class="na"&gt;outlined&lt;/span&gt;
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"onUploadFile"&lt;/span&gt;
        &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"my_thumbs!==null"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Upload Files
      &lt;span class="nt"&gt;&amp;lt;/it-button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/it-button-group&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
      &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt;
      &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display: none"&lt;/span&gt;
      &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"fileInput"&lt;/span&gt;
      &lt;span class="na"&gt;accept=&lt;/span&gt;&lt;span class="s"&gt;"image/*"&lt;/span&gt;
      &lt;span class="na"&gt;multiple&lt;/span&gt;
      &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;change=&lt;/span&gt;&lt;span class="s"&gt;"onFilePicked"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;it-divider&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"cid!==null"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;it-badge&lt;/span&gt;
      &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Copy link"&lt;/span&gt;
      &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;
      &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"cid!==null"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;it-button&lt;/span&gt;
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"onCopyLink(cidLink(cid))"&lt;/span&gt;
        &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"cid_link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          {{cidLink(cid)}}
      &lt;span class="nt"&gt;&amp;lt;/it-button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/it-badge&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;web3storage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/web3storage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UploadFile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;RevealCID&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;filelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;my_thumbs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="na"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onPickFile&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;onFilePicked&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;File&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_thumbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;onUploadFile&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;web3storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storeWithProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filelist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_thumbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;cidLink&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.ipfs.dweb.link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;onCopyLink&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textToCopy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textToCopy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textToCopy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;copied!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hpP-pm8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1593996705986-bf25089a82c5%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D240%26h%3D240%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hpP-pm8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1593996705986-bf25089a82c5%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D240%26h%3D240%26q%3D80" alt="Explosion - Photo by Kayla Farmer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lot of code, but I think it's pretty straight forward, but I'll go through some of it, just for clarification.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#html-amp-equal-css"&gt;
  &lt;/a&gt;
  HTML &amp;amp; Equal CSS
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;it-&lt;/code&gt; tags are from the Equal CSS framework. We make an alert box with the images in it, which only shows up if we have images. The &lt;code&gt;v-if="my_thumbs!==null"&lt;/code&gt; ensures this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;my_thumbs&lt;/code&gt; is set to &lt;code&gt;null&lt;/code&gt; at first, until you've triggered the &lt;code&gt;onFilePicked&lt;/code&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We loop through the thumbnails with &lt;code&gt;v-for&lt;/code&gt;, and beneath that we have our &lt;em&gt;file select&lt;/em&gt; &lt;code&gt;button&lt;/code&gt;, and our &lt;em&gt;upload&lt;/em&gt; &lt;code&gt;button&lt;/code&gt;   (which also &lt;em&gt;only&lt;/em&gt; shows when &lt;code&gt;my_thumbs!==null&lt;/code&gt;).&lt;br&gt;
Then, our markup has an invisible input file selector, we need that to be able to display our system's file select dialog. (If there's another way to do this, I'd love to hear from you.)&lt;br&gt;
Finally, we have a place to display our &lt;em&gt;link&lt;/em&gt; to the files when we get the CID back. And it is &lt;em&gt;clickable&lt;/em&gt; to copy. Yay!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#javascript-data-amp-methods"&gt;
  &lt;/a&gt;
  Javascript Data &amp;amp; Methods
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;data&lt;/code&gt; is pretty clear... &lt;code&gt;cid&lt;/code&gt; should hold a returned cid value once our files have been queued.&lt;/p&gt;

&lt;p&gt;Then, I will run through our methods:&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#onpickfile"&gt;
  &lt;/a&gt;
  onPickFile
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;onPickFile&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This just issues a click command on our file input, to trigger a file dialog.&lt;/p&gt;


&lt;h5&gt;
  &lt;a href="#onfilepicked"&gt;
  &lt;/a&gt;
  onFilePicked
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;onFilePicked&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;File&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_thumbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This happens when the file input changes. This does two main things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Our &lt;code&gt;filelist&lt;/code&gt; is updated to contain the files we selected&lt;/li&gt;
&lt;li&gt;Our &lt;code&gt;my_thumbs&lt;/code&gt; contains a bunch of file blobs that we can then display in the upload preview.&lt;/li&gt;
&lt;/ol&gt;


&lt;h5&gt;
  &lt;a href="#onuploadfile"&gt;
  &lt;/a&gt;
  onUploadFile
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;onUploadFile&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;web3storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storeWithProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filelist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_thumbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is our simple upload method. It sets the cid to what we get returned when we call our &lt;code&gt;storeWithProgress&lt;/code&gt; method from before. That method, we send our filelist.&lt;/p&gt;

&lt;p&gt;Finally we set our &lt;code&gt;my_thumbs&lt;/code&gt; and &lt;code&gt;filelist&lt;/code&gt; to null, so our state resets.&lt;/p&gt;


&lt;h5&gt;
  &lt;a href="#our-returned-data-and-copying-links"&gt;
  &lt;/a&gt;
  Our returned data and copying links
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;cidLink&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.ipfs.dweb.link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;onCopyLink&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textToCopy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textToCopy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textToCopy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;copied!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;cidLink&lt;/code&gt; just returns the URL that a specific CID would have.&lt;br&gt;
&lt;code&gt;onCopyLink&lt;/code&gt; takes a some text (we are sending it one of these &lt;code&gt;cidLink&lt;/code&gt;s), and copies it to the clipboard... &lt;em&gt;assuming our super-modern browser supports such shenanigans&lt;/em&gt;.&lt;/p&gt;



&lt;p&gt;I didn't do much css here today, besides the components I took from Equal. Of course, we'd want to do some more awesome stuff with that. For example, I added my own &lt;code&gt;main.css&lt;/code&gt; file to add custom styles to center and pretty things up a bit.&lt;/p&gt;

&lt;p&gt;If you'd like for me to cover more CSS, please comment.&lt;/p&gt;

&lt;p&gt;For now, though, (in case you were following along and want to know how I made it look like that) here's a gist of my &lt;code&gt;main.css&lt;/code&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h3&gt;

&lt;p&gt;Tune in next time for these exciting topics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go back and return upload status and CID to interface.

&lt;ul&gt;
&lt;li&gt;Realized we didn't get this to work yet!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List already uploaded files.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TpQ1wFHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbpcaxxvtqkxwg12h4ef.png" alt="File List Drawer"&gt;
&lt;/li&gt;
&lt;li&gt;Create/save/retrieve shortened links.
___&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;File uploaded with App to web3.storage:&lt;br&gt;
&lt;a href="https://bafybeida4yahentkyih6v6k5o2hwm2agxrhm25ysjslxrm5xoqwem4lfi4.ipfs.dweb.link/Sunset@Achterwasser.jpg"&gt;Sunset@Achterwasser - File uploaded with App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TdTXkkm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2e1zdgiu0tin4jkuv4j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TdTXkkm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2e1zdgiu0tin4jkuv4j.jpg" alt="Sunset@Achterwasser - File uploaded with App"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;aldorr&lt;/p&gt;

</description>
      <category>vue</category>
      <category>database</category>
      <category>tutorial</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>üç™Cookies and Cookie Tracking Explained</title>
      <author>Hargunbeer Singh</author>
      <pubDate>Mon, 30 Aug 2021 12:28:51 +0000</pubDate>
      <link>https://dev.to/hamiecod/cookies-and-cookie-tracking-explained-11co</link>
      <guid>https://dev.to/hamiecod/cookies-and-cookie-tracking-explained-11co</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A cookie is a small piece of information stored in the client's computer by a particular website via a web browser. They are used to personalize a user's experience on the particular website. It usually contains the user's preferences and inputs. A user can customize their web browser to accept, reject or delete cookies. Cookies can be modified at the server level by using the &lt;code&gt;Set-Cookie&lt;/code&gt; HTTP header. It can be modified at the client level by using &lt;code&gt;document.cookie&lt;/code&gt; in JavaScript.&lt;br&gt;&lt;br&gt;&lt;br&gt;
Cookies are shared to the server on consequent HTTP request. When you perform a HTTP GET request, the server returns you the webpage(HTML, CSS and JavaScript) along with some cookies which would be populated with data as you surf the specific web page. When you form another HTTP request to the server, the cookies which were populated with your data(preferences) are sent to the server. Thats how cookies help in storing the user's preferences. Cookies transactions take place between the user and the server using the &lt;code&gt;Set-Cookie&lt;/code&gt; header.&lt;br&gt;&lt;br&gt;&lt;br&gt;
There are two types of cookies - First Party Cookies and Third Party Cookies. First Party cookies, as the name says, are the cookies used by the website you are surfing to improve user experience. Third Party cookies are the cookies which are used by third-party services to improve the user experience, these are mostly advert companies, which improve user experience, like Google Ads which suggests you proper websites in its search ranking.&lt;br&gt;&lt;br&gt;&lt;br&gt;
Cookies are not stored as code on the user's machine, it is rather stored as simple files, which cannot be executed. Stored cookies cannot even manipulate the elements of your screen, it can't even access your mic or webcam. The only worry about cookies is thier system of allowing data(preferences) to be sent to the server without anybody noticing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When you turn on the dark mode on YouTube, it would be stored in the cookies and would be sent back via a POST request as soon as you change the color mode. After that when you perform a consequent GET request to the YouTube server, it would return you the YouTube web page and the cookies populated with your preferences, this improves user experience as the user does not need to change the color mode on consequent visits to the particular website.&lt;/li&gt;
&lt;li&gt;When you log into a website on a device, an encrypted unique token is stored in the cookie which keeps you logged in the website everytime you open the website.&lt;/li&gt;
&lt;li&gt;Cookies are used to store the items in the shopping cart in an ecommerce website, they improve user experience as when you visit the website consequent times, you would not need to re-fill your cart with the items you had selected in the last session.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#web-security"&gt;
  &lt;/a&gt;
  Web Security
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You(as a developer) should never store sensitive information, like login information, in cookies as a hacker can perform XSS attacks or Session hijacking at1tacks to retrieve the cookies, which would cause loss of privacy of the sensitive information.&lt;/li&gt;
&lt;li&gt;If a hacker steals your cookie on a specific website via some attack(like XSS), the attacked can use your cookie to pretend to be you on that specific website and he might do harm to your privacy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cookie-tracking"&gt;
  &lt;/a&gt;
  Cookie Tracking
&lt;/h2&gt;

&lt;p&gt;Cookie tracking is performed by third-party cookies usually, tracking cookies are used by third-parties to monitor the user's Web surfing habits and use the data for marketing purposes, like Google and Facebook ads. These types of cookies are generally considered as an invasion of privacy. When third-party ads are placed on a website, the third-party ad providers are also storing the user's data in cookies and then using the data for marketing and advertising purposes. For example: Big Tech giants, like google and facebook, store your data via cookies through ads as you surf the internet and then use that data to show you related advertisments, thus increasing their profits. Because of t4e privacy invasion of the users due to cookies, the EU(European Union) introduced the cookie law. The cookie law states that the websites need to ask for the user's permission to use cookies and give them a chance to opt out, thats why most of the websites ask for the user's permission before storing cookies.&lt;br&gt;&lt;br&gt;&lt;br&gt;
In very rare cases, some ads might also access your camera if you allow to, or access it directly if you have allowed the main website to access your webcam. The advertising companies would then capture your facial expressions while watching a video add and determine whether you were happy or sad while watching it and then use the data for marketing. This can happen in very rare cases, research on this type of technology is being done at MIT Media Labs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-opinion"&gt;
  &lt;/a&gt;
  Personal Opinion
&lt;/h2&gt;

&lt;p&gt;Users should be given the right to opt in for first-party cookies and just opt out for the third-party ones, but this gets very complex(from a developer perspective) and also it is very difficult to present to the user.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>security</category>
    </item>
    <item>
      <title>Clickhouse Server - Troubleshooting</title>
      <author>Vu Dao</author>
      <pubDate>Mon, 30 Aug 2021 12:19:02 +0000</pubDate>
      <link>https://dev.to/vumdao/clickhouse-server-troubleshooting-2gb7</link>
      <guid>https://dev.to/vumdao/clickhouse-server-troubleshooting-2gb7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When we get clickhouse performance issue like high CPU usage, in order to investigate what is the real problem and how to solve or provide workaround, we need to understand Clickhouse system/user config attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#max_part_loading_threads"&gt;max_part_loading_threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#max_part_removal_threads"&gt;max_part_removal_threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#number_of_free_entries_in_pool_to_execute_mutation"&gt;number_of_free_entries_in_pool_to_execute_mutation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#background_pool_size"&gt;background_pool_size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#background_schedule_pool_size"&gt;background_schedule_pool_size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#max_threads"&gt;max_threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Get-tables-size"&gt;Get tables size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Understand-clickhouse-Compression"&gt;Understand clickhouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Enable-allow_introspection_functions-for-query-profiling"&gt;Enable allow_introspection_functions for query profiling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#maxpartloadingthreads"&gt;
  &lt;/a&gt;
  üöÄ &lt;strong&gt;max_part_loading_threads&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The maximum number of threads that read parts when ClickHouse starts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Possible values:&lt;br&gt;
Any positive integer.&lt;br&gt;
Default value: auto (number of CPU cores).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;During startup ClickHouse reads all parts of all tables (reads files with metadata of parts) to build a list of all parts in memory. In some systems with a large number of parts this process can take a long time, and this time might be shortened by increasing max_part_loading_threads (if this process is not CPU and disk I/O bound).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Query check&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM system.merge_tree_settings
WHERE name = 'max_part_loading_threads'

Query id: 5f8c7c7a-5dec-4e89-88dc-71f06d800e04

‚îå‚îÄname‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄvalue‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄchanged‚îÄ‚î¨‚îÄdescription‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄtype‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ max_part_loading_threads ‚îÇ 'auto(4)' ‚îÇ       0 ‚îÇ The number of threads to load data parts at startup. ‚îÇ MaxThreads ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

1 rows in set. Elapsed: 0.003 sec. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#maxpartremovalthreads"&gt;
  &lt;/a&gt;
  üöÄ max_part_removal_threads &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The number of threads for concurrent removal of inactive data parts. One is usually enough, but in ‚ÄòGoogle Compute Environment SSD Persistent Disks‚Äô file removal (unlink) operation is extraordinarily slow and you probably have to increase this number (recommended is up to 16).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#numberoffreeentriesinpooltoexecutemutation"&gt;
  &lt;/a&gt;
  üöÄ number_of_free_entries_in_pool_to_execute_mutation &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This attribute must be align with &lt;code&gt;background_pool_size&lt;/code&gt;, its values must be &amp;lt;= value of &lt;code&gt;background_pool_size&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM system.merge_tree_settings
WHERE name = 'number_of_free_entries_in_pool_to_execute_mutation'

‚îå‚îÄname‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄvalue‚îÄ‚î¨‚îÄchanged‚îÄ‚î¨‚îÄdescription‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ number_of_free_entries_in_pool_to_execute_mutation ‚îÇ 10    ‚îÇ       0 ‚îÇ When there is less than specified number of free entries in pool, do not execute part mutations. This is to leave free threads for regular merges and avoid "Too many parts" ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#backgroundpoolsize"&gt;
  &lt;/a&gt;
  üöÄ background_pool_size &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://clickhouse.tech/docs/en/operations/settings/settings/#background_pool_size"&gt;background_pool_size&lt;/a&gt;&lt;br&gt;
Sets the number of threads performing background operations in table engines (for example, merges in MergeTree engine tables). This setting is applied from thedefault profile at the ClickHouse server start and can‚Äôt be changed in a user session. By adjusting this setting, you manage CPU and disk load. Smaller pool sizeutilizes less CPU and disk resources, but background processes advance slower which might eventually impact query performance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before changing it, please also take a look at related MergeTree settings, such as number_of_free_entries_in_pool_to_lower_max_size_of_merge andnumber_of_free_entries_in_pool_to_execute_mutation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Possible values:&lt;br&gt;
Any positive integer.&lt;br&gt;
Default value: 16.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start log&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021.08.29 04:22:30.824446 [ 12372 ] {} &amp;lt;Information&amp;gt; BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 16 threads
2021.08.29 04:22:47.891697 [ 12363 ] {} &amp;lt;Information&amp;gt; Application: Available RAM: 15.08 GiB; physical cores: 4; logical cores: 8.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;How to update this value eg. 5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Update &lt;code&gt;config.xml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      &amp;lt;merge_tree&amp;gt;
        &amp;lt;number_of_free_entries_in_pool_to_execute_mutation&amp;gt;5&amp;lt;/number_of_free_entries_in_pool_to_execute_mutation&amp;gt;
      &amp;lt;/merge_tree&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Update &lt;code&gt;users.xml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;profiles&amp;gt;
        &amp;lt;default&amp;gt;
            &amp;lt;background_pool_size&amp;gt;5&amp;lt;/background_pool_size&amp;gt;
        &amp;lt;/default&amp;gt;
    &amp;lt;/profiles&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#backgroundschedulepoolsize"&gt;
  &lt;/a&gt;
  üöÄ background_schedule_pool_size &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://clickhouse.tech/docs/en/operations/settings/settings/#background_schedule_pool_size"&gt;background_schedule_pool_size&lt;/a&gt;&lt;br&gt;
Sets the number of threads performing background tasks for replicated tables, Kafka streaming, DNS cache updates. This setting is applied at ClickHouse server start and can‚Äôt be changed in a user session.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Possible values:&lt;br&gt;
Any positive integer.&lt;br&gt;
Default value: 128.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to update this value? - At user profile -&amp;gt; update &lt;code&gt;users.xml&lt;/code&gt; (disable &lt;code&gt;background_schedule_pool_size&lt;/code&gt; if we don't use &lt;code&gt;ReplicatedMergeTree&lt;/code&gt; engine)&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;profiles&amp;gt;
      &amp;lt;default&amp;gt;
          &amp;lt;background_schedule_pool_size&amp;gt;0&amp;lt;/background_schedule_pool_size&amp;gt;
      &amp;lt;/default&amp;gt;
    &amp;lt;/profiles&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Get pool size
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    name,
    value
FROM system.settings
WHERE name LIKE '%pool%'

‚îå‚îÄname‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄvalue‚îÄ‚îê
‚îÇ connection_pool_max_wait_ms                  ‚îÇ 0     ‚îÇ
‚îÇ distributed_connections_pool_size            ‚îÇ 1024  ‚îÇ
‚îÇ background_buffer_flush_schedule_pool_size   ‚îÇ 16    ‚îÇ
‚îÇ background_pool_size                         ‚îÇ 100   ‚îÇ
‚îÇ background_move_pool_size                    ‚îÇ 8     ‚îÇ
‚îÇ background_fetches_pool_size                 ‚îÇ 8     ‚îÇ
‚îÇ background_schedule_pool_size                ‚îÇ 0     ‚îÇ
‚îÇ background_message_broker_schedule_pool_size ‚îÇ 16    ‚îÇ
‚îÇ background_distributed_schedule_pool_size    ‚îÇ 16    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Get background pool task
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    metric,
    value
FROM system.metrics
WHERE metric LIKE 'Background%'

‚îå‚îÄmetric‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄvalue‚îÄ‚îê
‚îÇ BackgroundPoolTask                      ‚îÇ     0 ‚îÇ
‚îÇ BackgroundFetchesPoolTask               ‚îÇ     0 ‚îÇ
‚îÇ BackgroundMovePoolTask                  ‚îÇ     0 ‚îÇ
‚îÇ BackgroundSchedulePoolTask              ‚îÇ     0 ‚îÇ
‚îÇ BackgroundBufferFlushSchedulePoolTask   ‚îÇ     0 ‚îÇ
‚îÇ BackgroundDistributedSchedulePoolTask   ‚îÇ     0 ‚îÇ
‚îÇ BackgroundMessageBrokerSchedulePoolTask ‚îÇ     0 ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Get BgSchPool
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ps H -o 'tid comm' $(pidof -s clickhouse-server) |  tail -n +2 | awk '{ printf("%s\t%s\n", $1, $2) }' | grep BgSchPool
7346    BgSchPool/D
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://support.huaweicloud.com/intl/en-us/cmpntguide-mrs/mrs_01_2398.html"&gt;Viewing cluster&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT 
    cluster, 
    shard_num, 
    replica_num, 
    host_name
FROM system.clusters

‚îå‚îÄcluster‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄshard_num‚îÄ‚î¨‚îÄreplica_num‚îÄ‚î¨‚îÄhost_name‚îÄ‚îê
‚îÇ test_cluster_two_shards           ‚îÇ         1 ‚îÇ           1 ‚îÇ 127.0.0.1 ‚îÇ
‚îÇ test_cluster_two_shards           ‚îÇ         2 ‚îÇ           1 ‚îÇ 127.0.0.2 ‚îÇ
‚îÇ test_cluster_two_shards_localhost ‚îÇ         1 ‚îÇ           1 ‚îÇ localhost ‚îÇ
‚îÇ test_cluster_two_shards_localhost ‚îÇ         2 ‚îÇ           1 ‚îÇ localhost ‚îÇ
‚îÇ test_shard_localhost              ‚îÇ         1 ‚îÇ           1 ‚îÇ localhost ‚îÇ
‚îÇ test_shard_localhost_secure       ‚îÇ         1 ‚îÇ           1 ‚îÇ localhost ‚îÇ
‚îÇ test_unavailable_shard            ‚îÇ         1 ‚îÇ           1 ‚îÇ localhost ‚îÇ
‚îÇ test_unavailable_shard            ‚îÇ         2 ‚îÇ           1 ‚îÇ localhost ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#maxthreads"&gt;
  &lt;/a&gt;
  üöÄ max_threads &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://clickhouse.tech/docs/en/operations/settings/settings/#settings-max_threads"&gt;max_threads&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The maximum number of query processing threads, excluding threads for retrieving data from remote servers (see the ‚Äòmax_distributed_connections‚Äô parameter).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This parameter applies to threads that perform the same stages of the query processing pipeline in parallel.&lt;br&gt;
For example, when reading from a table, if it is possible to evaluate expressions with functions, filter with WHERE and pre-aggregate for GROUP BY in parallel using at least ‚Äòmax_threads‚Äô number of threads, then ‚Äòmax_threads‚Äô are used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Default value: the number of physical CPU cores.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For queries that are completed quickly because of a LIMIT, you can set a lower ‚Äòmax_threads‚Äô. For example, if the necessary number of entries are located in every block and max_threads = 8, then 8 blocks are retrieved, although it would have been enough to read just one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The smaller the max_threads value, the less memory is consumed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update this value at user profile&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#get-tables-size"&gt;
  &lt;/a&gt;
  üöÄ Get tables size &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/sanchezzzhak/511fd140e8809857f8f1d84ddb937015"&gt;clickhouse-get-tables-size.sql&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select concat(database, '.', table)                         as table,
       formatReadableSize(sum(bytes))                       as size,
       sum(rows)                                            as rows,
       max(modification_time)                               as latest_modification,
       sum(bytes)                                           as bytes_size,
       any(engine)                                          as engine,
       formatReadableSize(sum(primary_key_bytes_in_memory)) as primary_keys_size
from system.parts
where active
group by database, table
order by bytes_size desc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;For table detail of database
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select parts.*,
       columns.compressed_size,
       columns.uncompressed_size,
       columns.ratio
from (
         select table,
                formatReadableSize(sum(data_uncompressed_bytes))          AS uncompressed_size,
                formatReadableSize(sum(data_compressed_bytes))            AS compressed_size,
                sum(data_compressed_bytes) / sum(data_uncompressed_bytes) AS ratio
         from system.columns
         where database = currentDatabase()
         group by table
         ) columns
         right join (
    select table,
           sum(rows)                                            as rows,
           max(modification_time)                               as latest_modification,
           formatReadableSize(sum(bytes))                       as disk_size,
           formatReadableSize(sum(primary_key_bytes_in_memory)) as primary_keys_size,
           any(engine)                                          as engine,
           sum(bytes)                                           as bytes_size
    from system.parts
    where active and database = currentDatabase()
    group by database, table
    ) parts on columns.table = parts.table
order by parts.bytes_size desc;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#understand-clickhouse-compression"&gt;
  &lt;/a&gt;
  üöÄ Understand clickhouse Compression &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://altinity.com/blog/2017/11/21/compression-in-clickhouse"&gt;Compression in ClickHouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#enable-allowintrospectionfunctions-for-query-profiling"&gt;
  &lt;/a&gt;
  üöÄ Enable allow_introspection_functions for query profiling &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://clickhouse.tech/docs/en/sql-reference/functions/introspection/"&gt;Introspection Functions&lt;/a&gt;. Update at user profile
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        &amp;lt;default&amp;gt;
            &amp;lt;allow_introspection_functions&amp;gt;1&amp;lt;/allow_introspection_functions&amp;gt;
        &amp;lt;/default&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Get thread stack trace
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WITH arrayMap(x -&amp;gt; demangle(addressToSymbol(x)), trace) AS all
SELECT
    thread_id,
    query_id,
    arrayStringConcat(all, '\n') AS res
FROM system.stack_trace
WHERE res LIKE '%SchedulePool%'

‚îå‚îÄthread_id‚îÄ‚î¨‚îÄquery_id‚îÄ‚î¨‚îÄres‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ      7346 ‚îÇ          ‚îÇ pthread_cond_wait
DB::BackgroundSchedulePool::delayExecutionThreadFunction()

ThreadPoolImpl&amp;lt;std::__1::thread&amp;gt;::worker(std::__1::__list_iterator&amp;lt;std::__1::thread, void*&amp;gt;)

start_thread
clone ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#partstothrowinsert"&gt;
  &lt;/a&gt;
  üöÄ parts_to_throw_insert
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://clickhouse.tech/docs/en/operations/settings/merge-tree-settings/#parts-to-throw-insert"&gt;parts_to_throw_insert&lt;/a&gt;
If the number of active parts in a single partition exceeds the parts_to_throw_insert value, INSERT is interrupted with the Too many parts (N). Merges are processing significantly slower than inserts exception.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Possible values:&lt;br&gt;
    Any positive integer.&lt;br&gt;
    Default value: 300.&lt;/p&gt;

&lt;p&gt;To achieve maximum performance of SELECT queries, it is necessary to minimize the number of parts processed, see Merge Tree.&lt;/p&gt;

&lt;p&gt;You can set a larger value to 600 (1200), this will reduce the probability of the Too many parts error, but at the same time SELECT performance might degrade. Also in case of a merge issue (for example, due to insufficient disk space) you will notice it later than it could be with the original 300.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a&gt;Facing issue?&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021.08.30 11:30:44.526367 [ 7369 ] {} &amp;lt;Error&amp;gt; void DB::SystemLog&amp;lt;DB::MetricLogElement&amp;gt;::flushImpl(const std::vector&amp;lt;LogElement&amp;gt; &amp;amp;, uint64_t) [LogElement = DB::MetricLogElement]: Code: 252, e.displayText() = DB::Exception: Too many parts (300). Parts cleaning are processing significantly slower than inserts, Stack trace (when copying this message, always include the lines below):
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;And you decide to increase &lt;code&gt;parts_to_throw_insert&lt;/code&gt; -&amp;gt; Update &lt;code&gt;config.xml&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;merge_tree&amp;gt;
         &amp;lt;parts_to_throw_insert&amp;gt;600&amp;lt;/parts_to_throw_insert&amp;gt;
    &amp;lt;/merge_tree&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="ltag__user ltag__user__id__512906"&gt;
  
    .ltag__user__id__512906 .follow-action-button {
      background-color: #000000 !important;
      color: #62df88 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/vumdao" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGwkUMWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ugeYdWM---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/512906/2472752c-cfd5-4e02-b3d8-55b790178884.png" alt="vumdao image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/vumdao"&gt;Vu Dao&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/vumdao"&gt;Awesome Devops || AWS SA || CloudOpz&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vumdao"&gt;
        vumdao
      &lt;/a&gt; / &lt;a href="https://github.com/vumdao/vumdao"&gt;
        vumdao
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>clickhouse</category>
      <category>ec2</category>
      <category>cloudopz</category>
      <category>devops</category>
    </item>
    <item>
      <title>What is Two-factor Authentication | Verification ??</title>
      <author>Kshitij Bansod (Danny)</author>
      <pubDate>Mon, 30 Aug 2021 12:14:06 +0000</pubDate>
      <link>https://dev.to/kshitij9896/what-is-two-factor-authentication-verification-576h</link>
      <guid>https://dev.to/kshitij9896/what-is-two-factor-authentication-verification-576h</guid>
      <description>&lt;p&gt;‚úÖ With 2-Step Verification (also known as two-factor authentication), you add an extra layer of security to your account in case your password is stolen. After you set up 2-Step Verification, you'll sign in to your account in two steps using: Something you know, like your password. Something you have, like your phone.&lt;/p&gt;

&lt;p&gt;‚úÖ In Simple Terms =&amp;gt; #Adding Extra #Layer of #Security on your #data&lt;/p&gt;

&lt;p&gt;Some Examples of Two Step Verifications Provided By The following&lt;br&gt;
Organizations | Companies&lt;/p&gt;

&lt;p&gt;‚úÖ Google's 2-Step Verification &lt;br&gt;
‚úÖ Facebook's 2-Step Verification &lt;br&gt;
‚úÖ Instagram's 2-Step Verification &lt;/p&gt;

&lt;p&gt;&amp;amp; Many more services &amp;amp; companies provide the two step verification for their users...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#image-credit-gtnaked-security-by-sophos"&gt;
  &lt;/a&gt;
  image credit =&amp;gt;naked security by SOPHOS
&lt;/h1&gt;

&lt;p&gt;For More Interesting Facts...&lt;br&gt;
‚úÖ Follow &lt;a class="mentioned-user" href="https://dev.to/kshitij9896"&gt;@kshitij9896&lt;/a&gt;
 &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Automate boring files organizing using python (Python files organizer)</title>
      <author>Budy mnvenom</author>
      <pubDate>Mon, 30 Aug 2021 12:11:34 +0000</pubDate>
      <link>https://dev.to/xbudy/automate-boring-files-organizing-using-python-python-files-organizer-21f4</link>
      <guid>https://dev.to/xbudy/automate-boring-files-organizing-using-python-python-files-organizer-21f4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Hello today we are going to code a files organizer using python script it will organize the files by their types for example it will put all files with extension (.png) in a folder called Pictures let's code ... (this post is published here &lt;a href="https://blog.icodes.tech/2021/06/12/python-files-organizer-automate-boring-files-organizing-using-python.html"&gt;Python files organizer, automate boring files organizing using python&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding"&gt;
  &lt;/a&gt;
  Coding
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#importing-needed-modules"&gt;
  &lt;/a&gt;
  Importing needed modules
&lt;/h3&gt;

&lt;p&gt;those are the modules we are going to use&lt;/p&gt;

&lt;p&gt;if you have any problem you can post it on comments&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
import pathlib
import shutil
import fnmatch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#preparing-the-default-folder-for-every-type-of-files"&gt;
  &lt;/a&gt;
  Preparing the default folder for every type of files
&lt;/h3&gt;

&lt;p&gt;So now we are going to set a folder for every type for example we want to move the pictures to the folder in path '/home/rin/Downloads/'&lt;/p&gt;

&lt;p&gt;in my case i am using linux on windows the paths will look like ' C:\rin\Brink\Pictures'&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## define path for every category
file_folder={
    'Music':'/home/rin/Downloads/',
    'Pictures':'/home/rin/Pictures/',
    'Documents':'/home/rin/Documents/',
    'Archives':'/home/rin/Archives/',
    'Videos':'/home/rin/Videos/',
    'Codes':'/home/rin/Codes/'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#defining-the-type-of-file-by-the-extension"&gt;
  &lt;/a&gt;
  Defining the type of file by the extension
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#whats-extension-"&gt;
  &lt;/a&gt;
  What's extension ?
&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;file extension&lt;/strong&gt; or &lt;strong&gt;file name extension&lt;/strong&gt; is the ending of a file that helps identify the type of file in operating systems, such as Microsoft Windows. In Microsoft Windows, the file name extension is a period that is often followed by three characters but may also be one, two, or four characters long.&lt;/p&gt;

&lt;p&gt;As an example, the file name "myfile.txt" has a file extension of ".txt," which is a file name extension associated with text files.&lt;/p&gt;

&lt;p&gt;So code :&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## define the type of every extension
file_type={'Pictures':['.jpg', '.jpeg', '.jpe','.png','.jp2','.ico', '.wbmp','.j2k', '.jpf', '.jpx', '.jpm', '.mj2','.svg', '.svgz','.webp','.gif']
,'Music':['mp3']
,'Videos':['.mp4','.srt','.mkv','.3gp','.m4a']
,'Documents':['.pdf','.docx','.doc','.csv','.txt','.xls','.xlsx','.log']
,'Archives':['.zip','.tar']
,'Codes':['.py']}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#main-code"&gt;
  &lt;/a&gt;
  Main code
&lt;/h3&gt;

&lt;p&gt;Now we take the path of the folder contains the files we want organize as example for me i want clean my download folder¬†&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;path='/home/rin/Downloads/'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So now what we want to do is extracting all the files in the folder and check the type of every file then move it to the folder contains its type&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;files=os.listdir(path)# list of files in the folder
for file in files:#for for every file in the list
    extension=pathlib.Path(file).suffix #extension of file ex:(.txt)
    #Documents
    if extension in file_type['Documents']:#check if the file is a document
        move=pathlib.Path(path+file).rename(file_folder['Documents']+file)# move the file to the folder conatins documents
        #move=shutil.move(path+file,file_folder['Documents'])
        print('success #### {} to {}'.format(file,move))
    #Music    
    if extension in file_type['Music']:
        move=pathlib.Path(path+file).rename(file_folder['Music']+file)
        #move=shutil.move(path+file,file_folder['Music'])
        print('success #### {} to {}'.format(file,move))
    #Pictures
    if extension in file_type['Pictures']:
        move=pathlib.Path(path+file).rename(file_folder['Pictures']+file)
        #move=shutil.move(path+file,file_folder['Pictures'])
        print('success #### {} to {}'.format(file,move))
    #Videos
    if extension in file_type['Videos']:
        move=pathlib.Path(path+file).rename(file_folder['Videos']+file)
        #move=shutil.move(path+file,file_folder['Videos'])
        print('success #### {} to {}'.format(file,move))
    #Archives
    if extension in file_type['Archives']:
        move=pathlib.Path(path+file).rename(file_folder['Archives']+file)
        #move=shutil.move(path+file,file_folder['Archives'])
        print('success #### {} to {}'.format(file,move))
    #Codes
    if extension in file_type['Codes']:
        move=pathlib.Path(path+file).rename(file_folder['Codes']+file)
        #move=shutil.move(path+file,file_folder['Codes'])
        print('success #### {} to {}'.format(file,move))
    else:
        print('## '+file)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note : You can add more types&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-source-code%C2%A0"&gt;
  &lt;/a&gt;
  Full source code¬†
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;DON'T FORGET TO CHANGE THE PATHS ALSO YOU CAN ADD MORE CATEGORY BE SMART ..&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
import pathlib
import shutil
import fnmatch
## define path for every category
file_folder={
    'Music':'/home/rin/Downloads/',
    'Pictures':'/home/rin/Pictures/',
    'Documents':'/home/rin/Documents/',
    'Archives':'/home/rin/Archives/',
    'Videos':'/home/rin/Videos/',
    'Codes':'/home/rin/Codes/'
}
## define the type of every extension
file_type={'Pictures':['.jpg', '.jpeg', '.jpe','.png','.jp2','.ico', '.wbmp','.j2k', '.jpf', '.jpx', '.jpm', '.mj2','.svg', '.svgz','.webp','.gif']
,'Music':['mp3']
,'Videos':['.mp4','.srt','.mkv','.3gp','.m4a']
,'Documents':['.pdf','.docx','.doc','.csv','.txt','.xls','.xlsx','.log']
,'Archives':['.zip','.tar']
,'Codes':['.py']}

path='/home/rin/Downloads/'
files=os.listdir(path)# list of files in the folder
for file in files:#for for every file in the list
    extension=pathlib.Path(file).suffix #extension of file ex:(.txt)
    #Documents
    if extension in file_type['Documents']:#check if the file is a document
        move=pathlib.Path(path+file).rename(file_folder['Documents']+file)# move the file to the folder conatins documents
        #move=shutil.move(path+file,file_folder['Documents'])
        print('success #### {} to {}'.format(file,move))
    #Music    
    if extension in file_type['Music']:
        move=pathlib.Path(path+file).rename(file_folder['Music']+file)
        #move=shutil.move(path+file,file_folder['Music'])
        print('success #### {} to {}'.format(file,move))
    #Pictures
    if extension in file_type['Pictures']:
        move=pathlib.Path(path+file).rename(file_folder['Pictures']+file)
        #move=shutil.move(path+file,file_folder['Pictures'])
        print('success #### {} to {}'.format(file,move))
    #Videos
    if extension in file_type['Videos']:
        move=pathlib.Path(path+file).rename(file_folder['Videos']+file)
        #move=shutil.move(path+file,file_folder['Videos'])
        print('success #### {} to {}'.format(file,move))
    #Archives
    if extension in file_type['Archives']:
        move=pathlib.Path(path+file).rename(file_folder['Archives']+file)
        #move=shutil.move(path+file,file_folder['Archives'])
        print('success #### {} to {}'.format(file,move))
    #Codes
    if extension in file_type['Codes']:
        move=pathlib.Path(path+file).rename(file_folder['Codes']+file)
        #move=shutil.move(path+file,file_folder['Codes'])
        print('success #### {} to {}'.format(file,move))
    else:
        print('## '+file)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Feel free to develop the code and post any problem or request in the comments&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>files</category>
    </item>
    <item>
      <title>Web Component ideas: Making an if element</title>
      <author>Ben Taylor</author>
      <pubDate>Mon, 30 Aug 2021 12:07:51 +0000</pubDate>
      <link>https://dev.to/taybenlor/web-component-ideas-making-an-if-element-5g8a</link>
      <guid>https://dev.to/taybenlor/web-component-ideas-making-an-if-element-5g8a</guid>
      <description>&lt;p&gt;I'm a big fan of Web Components, they're super useful. But have you ever thought of using them as an if statement?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mWS9eILj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u02dmjaku8uqqygvwww2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mWS9eILj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u02dmjaku8uqqygvwww2.gif" alt="Screen Recording 2021-08-30 at 9.23.59 pm"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If the user selects the cat radio element, then the "Yep, cats are the best!" message will be displayed. If they select the dog radio element, then the other message will be displayed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-components-for-authoring-content"&gt;
  &lt;/a&gt;
  Web Components for authoring content
&lt;/h2&gt;

&lt;p&gt;People tend to think about web development as a way of building apps. But that misses a big category of what people do on the web: making documents! Back in the day people used to write raw HTML straight to their web servers. But now we write in a CMS or a blogging system like this one. In those sorts of systems you tend to use a rich text editor, or markdown.&lt;/p&gt;

&lt;p&gt;HTML is still really good for making documents though! If you want to make something really custom, HTML is a great tool. Using Web Components lets you do even more interesting things, things that go beyond just bold, italic and headings. You can create custom logic as well! That's the kind of stuff that &lt;em&gt;hypertext&lt;/em&gt; should be used for.&lt;/p&gt;

&lt;p&gt;If you're maintaining a website, blog, or CMS with authors who like to do interesting things you should try out Web Components. They're easy to write and they're custom just for your purpose!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-html-look-like"&gt;
  &lt;/a&gt;
  What does the HTML look like?
&lt;/h2&gt;

&lt;p&gt;In this example I wanted to create a kind of if-statement that changed which content was displayed based on which option was selected in some radio buttons. I started by writing out the HTML, so I could get a sense of how it should work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"animal"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Cat
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"animal"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Dog
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ben-if&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"animal"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Yep, cats are the best!
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://placekitten.com/200/100"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"kitten"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ben-if&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ben-if&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"animal"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Dogs are pretty good, but have you tried cats?
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ben-if&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see here I'm creating a custom element called &lt;code&gt;ben-if&lt;/code&gt; which has two attributes &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. The idea is that if the matching radio box is ticked, then the if statement will show. Otherwise it will be hidden.&lt;/p&gt;

&lt;p&gt;Because they're just HTML, I can put other HTML elements inside them without any issues. If you were using a markdown parser that allowed HTML, you could also put markdown inside the HTML. This makes it super flexible, so I could make lots of different sorts of things with just this one trick.&lt;/p&gt;

&lt;p&gt;There's a lot of other benefits here to using web components. You don't need to include any third party libraries, and you don't need to set up a rendering context. It will work across any framework, including React, Vue, Svelte etc. It's part of the way the browser works!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-template"&gt;
  &lt;/a&gt;
  Creating the template
&lt;/h2&gt;

&lt;p&gt;To write my web component, I needed a template. This template is really simple because it doesn't do much. This is the HTML for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"ben-if"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nd"&gt;:host&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the styling here the &lt;code&gt;:host&lt;/code&gt; element refers to the web component I'm building. I've made it &lt;code&gt;display: none&lt;/code&gt; so that it is hidden by default. The &lt;code&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/code&gt; element is where child content will be put inside this element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-the-javascript"&gt;
  &lt;/a&gt;
  Writing the javascript
&lt;/h2&gt;

&lt;p&gt;The logic for this is a little bit more complicated. First I've set up some boilerplate. This renders the template I created into the web component, and keeps track of the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; attributes. It also defines the custom element I've created as &lt;code&gt;ben-if&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IfElement&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;observedAttributes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ben-if&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;attributeChangedCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Define this custom element&lt;/span&gt;
&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ben-if&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IfElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that I've got the boilerplate out of the way, it's time to do the logic. I created a &lt;code&gt;checkIf&lt;/code&gt; method on my &lt;code&gt;IfElement&lt;/code&gt; to show or hide my element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;checkIf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;radio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`[name="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"][value="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"]:checked`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will query the document to find a checked element with the matching &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. If there is one, it will set the element to &lt;code&gt;display: block&lt;/code&gt;. If there isn't one it will set the element to &lt;code&gt;display: none&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we just need to wire that call up. I put it in two places:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;As an event that gets called any time a change event happens on the page&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the attributes change.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkIf&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;attributeChangedCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkIf&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's everything! Now it should all work together. Here's a codepen:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/taybenlor/embed/xxrZZpp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interested-in-web-components"&gt;
  &lt;/a&gt;
  Interested in Web Components?
&lt;/h2&gt;

&lt;p&gt;I'm speaking about &lt;a href="https://webdirections.org/code/speakers/ben-taylor.php"&gt;Practical Uses for Web Components&lt;/a&gt; at &lt;a href="https://webdirections.org/code/"&gt;Web Directions: Code&lt;/a&gt; on September 17 &amp;amp; 24 2021. If you're interested you can use the voucher &lt;code&gt;bensentme&lt;/code&gt; to get 20% off!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l9LBHIBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d19ypndwqrlp9wydz8t3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l9LBHIBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d19ypndwqrlp9wydz8t3.png" alt="DElgPan_Fq7SbJfAKW_1Q_L_U2HSzzpnKuwR1onC9M3VGLRykUod7atRXJTePP4wGCk3H995w7W7-BfXrNnw8jL52tDBrrmSASqYKUIT0i0nAWDRo59G0OPiRF_UVEP0A4tVGGxS"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 Reasons Why You Should Never, Ever Write Tests</title>
      <author>Kai</author>
      <pubDate>Mon, 30 Aug 2021 11:57:33 +0000</pubDate>
      <link>https://dev.to/kais_blog/5-reasons-why-you-should-never-ever-write-tests-3ebf</link>
      <guid>https://dev.to/kais_blog/5-reasons-why-you-should-never-ever-write-tests-3ebf</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://kais.blog/p/reasons-why-you-should-never-ever-write-tests"&gt;kais.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;As a software developer, there is one topic that always leads to controversial discussions. Should one write tests or not? While there are always questionable experts who argue FOR writing tests, I have the definitive answer. Don't.&lt;/p&gt;

&lt;p&gt;Many terrible things happen once you start testing your code. So I prepared a small, incomplete list to show you why you should never, ever, write tests:&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#you-would-start-to-question-your-code"&gt;
  &lt;/a&gt;
  You would start to question your code
&lt;/h2&gt;

&lt;p&gt;What audacity. If you wrote tests, which of course you won't, your code would be questioned. Does it work as expected? Of course it does. Besides, there's no point in catching catastrophic bugs early, after all, they only ever happen in someone else's projects.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#your-code-would-be-clearly-defined-and-well-designed"&gt;
  &lt;/a&gt;
  Your code would be clearly defined and well designed
&lt;/h2&gt;

&lt;p&gt;You're not an art student, are you? Then what do you care about design? If you ever test parts of your code, you would be forced to clearly define what the code is responsible for. So you would focus on what is essential. With that you take away the possibility to sneak in code that nobody needs and nobody uses.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#you-would-have-to-write-less-code"&gt;
  &lt;/a&gt;
  You would have to write less code
&lt;/h2&gt;

&lt;p&gt;Testing can lead you to write less code. After all, you only ever implement so far that the tests pass. And less code means fewer lines of code. Who can brag about having worked on gigantic projects when there aren't that many lines of code? Besides, we're still in the 2000s, somehow, and we're billed on the basis of lines of code (LOC). Never reduce the lines of code. Ever.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#you-would-save-countless-hours-that-you-could-normally-waste-on-debugging-or-maintenance"&gt;
  &lt;/a&gt;
  You would save countless hours that you could normally waste on debugging or maintenance
&lt;/h2&gt;

&lt;p&gt;This point is really critical. If, strangely enough, you are not paid by lines of code, then at least by the hour. With testing you would save many hours. How awful is the idea that you suddenly have time for other things and on top of that the certainty that the code behaves as expected. Scary.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#you-would-enable-others-to-understand-your-code-and-collaborate-with-you"&gt;
  &lt;/a&gt;
  You would enable others to understand your code and collaborate with you
&lt;/h2&gt;

&lt;p&gt;I don't really need to write that much about it. Why would you even want to do that? With tests, your code is suddenly documented and much easier to refactor. Not good. If you are no longer the only one who can work on a project, then you will definitely be replaced immediately.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;There you have it. My list of reasons why you should definitely not write tests. In summary, tests have only drawbacks and you should definitely &lt;a href="https://twitter.com/intent/follow?screen_name=kais_blog"&gt;follow me on Twitter&lt;/a&gt; if you want to learn even more about how to avoid being a good software developer.&lt;/p&gt;

&lt;p&gt;If you want to convince other software developers why they shouldn't write tests, feel free to share this post with them.&lt;/p&gt;

&lt;p&gt;Seriously though, write tests.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://kais.blog/p/reasons-why-you-should-never-ever-write-tests"&gt;kais.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>05 Essential Design Resources Sites For Web Designers</title>
      <author>Md Abu Taher</author>
      <pubDate>Mon, 30 Aug 2021 11:54:10 +0000</pubDate>
      <link>https://dev.to/helloabutaher/05-essential-design-resources-sites-for-web-designers-4hjk</link>
      <guid>https://dev.to/helloabutaher/05-essential-design-resources-sites-for-web-designers-4hjk</guid>
      <description>&lt;p&gt;If you are a web designer or you are developing a web project and you want to get a top-notch design, then you will need to get design inspiration from some of the best sites. Here you will find the top 5 design resource sites for web designers.&lt;/p&gt;

&lt;p&gt;Web designing is a challenging task. Web developers need to keep in mind the technical and logical issues while developing a web project. At the same time, developers need to keep the end-user in mind and design a project which is not only informative but also visually appealing.&lt;/p&gt;

&lt;p&gt;If you are always looking for the best design resources for websites, then this collection is something every developer should bookmark. It is a compilation of the best design resources and libraries that can help you in developing an eye-catching and visually appealing project.&lt;/p&gt;

&lt;p&gt;Here we are going to share with you the best resources that will take you to the next level of website designing and development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top 05 Best Resources for UI / UX Designers and Developer&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.uihut.com/"&gt;UIHUT&lt;/a&gt;- 12000 Exclusive Design Resources&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Explore 12,000+ Exclusive Design Resources Download thousands of templates, illustrations, icons, and graphic assets for web and mobile app design without paying designer prices .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Significant advantages of UIHUT&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;1000+ web Templates UI&lt;br&gt;
2500+ Illustration&lt;br&gt;
7000+ Icons&lt;br&gt;
500+ Mobile Screen UI&lt;br&gt;
100+ Web App UI&lt;/p&gt;

&lt;p&gt;&lt;a href="https://zippypixels.com/"&gt;ZippyPixels&lt;/a&gt;‚ÄìBest Mockups Template&lt;/p&gt;

&lt;p&gt;&lt;a href="https://zippypixels.com/"&gt;ZippyPixels&lt;/a&gt;is a one-stop-shop for professional pixel art and graphic design resources. The website boasts an enormous library of free and premium design assets from mockups, print designs, web graphics, icons and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Significant advantages of ZippyPixels&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;BUNDLES&lt;br&gt;
MOCKUPS &lt;br&gt;
PRINT &lt;br&gt;
GRAPHICS &lt;br&gt;
WEB &lt;br&gt;
MOBILE &lt;br&gt;
FREEBIES&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pixelbuddha.net/"&gt;PixelBuddah &lt;/a&gt;‚ÄìEXCLUSIVE DESIGN RESOURCES:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pixelbuddha.net/"&gt;PixelBuddah &lt;/a&gt;is a designer‚Äôs holy grail of graphics. Here, you‚Äôll find everything from crisp icon sets to classic design packages to modern UI templates and even full web software libraries. There‚Äôs no end to what you can do with Pixelbuddah behind you ‚Äì your hard work will be sure to pay off by making your clients (and impress the heck out of everyone else too).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Significant advantages of Pixelbuddah&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;beautiful UI templates &lt;br&gt;
web design tool-kits&lt;br&gt;
icon sets&lt;br&gt;
graphics&lt;br&gt;
Mockups&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medialoot.com/"&gt;MediaLoot&lt;/a&gt; -Graphic Design Resources for all&lt;/p&gt;

&lt;p&gt;Marvelously well-designed, ridiculously cheap and competitively priced, the graphic products at MediaLoot should be considered by any designer or photography enthusiast who intends to create a lookbook of her own. Whether you‚Äôre interested in creating mockups, presenting a photoshoot collection, or showing off your latest design work on Dribbble, the shop offers lots of free downloads for personal use. If you are planning to use this resource in a commercial project, though, it‚Äôs important that you make a purchase first because it will serve as your permission slip to let others know that we gave you permission to use these images.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Significant advantages of MediaLoot&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Thousands of fonts&lt;br&gt;
icons&lt;br&gt;
Graphics&lt;br&gt;
templates&lt;br&gt;
interfaces, and mores&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphicriver.net/"&gt;GraphicsRiver&lt;/a&gt;&lt;br&gt;
-Discover 914,427 fonts, logos &amp;amp; presentations&lt;br&gt;
Unsurprisingly, &lt;/p&gt;

&lt;p&gt;GraphicRiver is an Envato-owned market, which specializes in the distribution of digital resources. By specializing in all things raster and vector graphics, this online marketplace has successfully built a large following of designers who are frequently returning to purchase new and up-to-date products. &lt;/p&gt;

&lt;p&gt;As a leader within its industry, GraphicRiver can provide potential customers with an ample amount of options to choose from when they are out purchasing their digital designs!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Significant advantages of GraphicRiver&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;Web Themes &amp;amp; Templates&lt;br&gt;
Code&lt;br&gt;
Video&lt;br&gt;
Audio&lt;br&gt;
Graphics&lt;br&gt;
Photos&lt;br&gt;
3D Files&lt;br&gt;
Conclusion:&lt;/p&gt;

&lt;p&gt;Designers are always on the lookout for the best UI Graphics resources and resources to develop an amazing UI. That is what we have tried to provide here. To save your time, we have listed the best resources that are available on the internet. The resources are free for both commercial and personal use.&lt;/p&gt;

&lt;p&gt;We hope you found this post useful when looking for resources to makeover your project. By using this post you can makeover your project by giving it an awesome look. If you have any other questions or concerns about any resources mentioned in this post, please contact us anytime at  UIHUT.&lt;/p&gt;

&lt;p&gt;Thank you for reading, we are always excited when one of our posts is able to provide useful information on a topic like this!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Week Wise Data Structures and Algorithms Schedule for Placements. (Part-2) </title>
      <author>saksham garg</author>
      <pubDate>Mon, 30 Aug 2021 11:46:00 +0000</pubDate>
      <link>https://dev.to/sakshamceo/week-wise-data-structures-and-algorithms-schedule-for-placements-part-2-1i0d</link>
      <guid>https://dev.to/sakshamceo/week-wise-data-structures-and-algorithms-schedule-for-placements-part-2-1i0d</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the part-2.&lt;br&gt;
For Part-1- You can visit below.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/sakshamceo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MmDIdBSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yGL8TQcP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/502876/8fdf72c1-1361-4932-a42a-5b5eddf07061.jpeg" alt="sakshamceo"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sakshamceo/complete-data-structures-and-algorithms-roadmap-for-placements-part-1-551b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Complete Data Structures and Algorithms Roadmap for Placements (Part-1)&lt;/h2&gt;
      &lt;h3&gt;saksham garg „Éª Aug 29 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#dsa&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datastructure&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#interview&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#there-are-different-strategies"&gt;
  &lt;/a&gt;
  There are Different strategies
&lt;/h4&gt;

&lt;p&gt;1) Either you can Finish the entire syllabus once and then move to detailed practice questions. On &lt;a href="https://leetcode.com/"&gt;Leetcode&lt;/a&gt; and &lt;a href="https://a2oj.herokuapp.com/"&gt;A2OJ&lt;/a&gt;. Side by side sharpen your DSA skills by giving &lt;strong&gt;Short contests&lt;/strong&gt; on &lt;em&gt;Codeforces&lt;/em&gt; and &lt;strong&gt;Long Contests&lt;/strong&gt; on &lt;em&gt;Codechef&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;2) Or you can got to &lt;a href="https://www.codechef.com/LEARNDSA/?itm_medium=navmenu&amp;amp;itm_campaign=learndsa"&gt;Codechef DSA Learning Series&lt;/a&gt; and my favorite &lt;a href="https://a2oj.herokuapp.com/"&gt;A2OJ&lt;/a&gt;. Pick Questions topic wise and try solving. You will come across new concepts at every new question and then you can learn them as well.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#week-wise-study-plan"&gt;
  &lt;/a&gt;
  Week wise Study Plan
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Week 1&lt;/strong&gt;&lt;br&gt;
Basic Maths + Practise Questions&lt;br&gt;
Array Introduction and Operations&lt;br&gt;
STL (very very imp)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 2&lt;/strong&gt;&lt;br&gt;
Array Practise Questions&lt;br&gt;
Sorting Algorithms + Practise Questions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 3&lt;/strong&gt;&lt;br&gt;
Matrix/Strings + Practise Questions &lt;br&gt;
Basic Bit Manipulation + Practise Questions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 4&lt;/strong&gt;&lt;br&gt;
Hashing + Practise Questions &lt;br&gt;
Linked List Introduction and Operations&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 5&lt;/strong&gt;&lt;br&gt;
Linked List Practise Questions &lt;br&gt;
Stack Introduction and Operations&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 6&lt;/strong&gt;&lt;br&gt;
Stack Practise Questions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 7&lt;/strong&gt;&lt;br&gt;
Queue Introduction and Operations&lt;br&gt;
Queue Practise Questions &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 8&lt;/strong&gt;&lt;br&gt;
Tree Introduction and Operations&lt;br&gt;
Tree Practise Questions &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 9-10&lt;/strong&gt;&lt;br&gt;
Heap/Graph Introduction and Operations&lt;br&gt;
Heap/Graph Practise Questions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 11&lt;/strong&gt;&lt;br&gt;
REVISE TREES,GRAPHS, STACKS QUEUES&lt;br&gt;
Recursion + Practice Question&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 12-14&lt;/strong&gt;&lt;br&gt;
Greedy Algorithm Introduction and Implementation&lt;br&gt;
Greedy Algorithm Practise Questions &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 15-17&lt;/strong&gt;&lt;br&gt;
BackTracking/Dynamic Programming Introduction and Implementation, BackTracking/Dynamic Programming Practise Questions&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#for-programing-practice-question-love-babbars-dsa-450-questions-are-sufficient-do-34-easy-questions-and-1-tough-question-at-bare-minimum-per-day-from-each-topic"&gt;
  &lt;/a&gt;
  For Programing Practice Question -&lt;a href="https://drive.google.com/file/d/1FMdN_OCfOI0iAeDlqswCiC2DZzD4nPsb/view"&gt;Love Babbar's DSA 450 questions&lt;/a&gt; are sufficient. &lt;em&gt;Do 3-4 Easy Questions and 1 Tough Question&lt;/em&gt; (At bare minimum) &lt;em&gt;per day&lt;/em&gt; from &lt;em&gt;each Topic&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;‚ù§Ô∏è &lt;em&gt;Like and Follow&lt;/em&gt; &lt;/p&gt;

</description>
      <category>datastructure</category>
      <category>programming</category>
      <category>dsa</category>
      <category>python</category>
    </item>
  </channel>
</rss>
