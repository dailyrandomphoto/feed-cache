<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Free web whiteboard for interactive teaching</title>
      <author>sarmabkp</author>
      <pubDate>Mon, 31 May 2021 09:42:57 +0000</pubDate>
      <link>https://dev.to/sarmabkp/free-web-whiteboard-for-interactive-teaching-3p63</link>
      <guid>https://dev.to/sarmabkp/free-web-whiteboard-for-interactive-teaching-3p63</guid>
      <description>&lt;p&gt;Ed-tech is one of the fastest-growing industries in the world. Teachers and students are adapting to new norms of teaching online.&lt;br&gt;
The concern of teachers is: How can we provide a learning environment for students? The amalgamation of technology &amp;amp; education started with a ‚Äúdigital whiteboard‚Äù. Where schools buy touch-supported digital whiteboards. In 2021, it got upgraded with a ‚Äúweb whiteboard‚Äù with a teaching environment. Where you don‚Äôt need to spend money on buying any devices.&lt;br&gt;
How it‚Äôs possible to teach with a web whiteboard. We‚Äôll cover this in this blog&lt;br&gt;
How Online Web Whiteboard works&lt;br&gt;
What‚Äôs an Interactive whiteboard&lt;br&gt;
Interactive Teaching methods for improved online education&lt;br&gt;
Advance features in online education&lt;br&gt;
How Online Whiteboard Works&lt;/p&gt;

&lt;p&gt;An interactive whiteboard in &lt;a href="http://www.standupmeet.com"&gt;www.standupmeet.com&lt;/a&gt;&lt;br&gt;
Tools: (Text, Circle, Square, Arrow, Line)&lt;br&gt;
Teachers like me have terrible handwriting &amp;amp; drawing skills on whiteboards. We don‚Äôt need to worry about bad drawing with a web whiteboard. Cause, text, circle, square, line most common shapes are directly available.&lt;br&gt;
Pencil:&lt;br&gt;
Pencil tools let you draw at your will. It becomes handy when you‚Äôre drawing shapes of different sizes. This comes in handy in writing complex math formulas too.&lt;br&gt;
Board Download:&lt;br&gt;
Students and teachers don‚Äôt need to worry about taking and saving notes. With one click only, they both can download the board and save it in a local file.&lt;br&gt;
Upload Files:&lt;br&gt;
You can reupload boards from the previous class. For revision. You don‚Äôt need to draw complex figures every time. You can directly upload ppt, image, videos on the web whiteboard.&lt;br&gt;
Color Palette:&lt;br&gt;
Simple drag and drop color picker for each object you want to draw or write. Many whiteboards provide hex code for custom color selection tools.&lt;br&gt;
Mouse Selector &amp;amp; Hand Selector &amp;amp; Eraser:&lt;br&gt;
Mouse selector Helps you drag and move specific objects on board. While hand selector lets you move the whole board. You can delete any object with the help of an eraser.&lt;br&gt;
Laser Pointer:&lt;br&gt;
You‚Äôve uploaded a previous board, video, or image on the whiteboard. The selector will help you draw the focus of your students to a specific part of the board.&lt;br&gt;
What‚Äôs an Interactive whiteboard&lt;br&gt;
On a normal whiteboard, only the teacher/host can make changes. Other members like students or colleagues are mere viewers.&lt;br&gt;
In the interactive whiteboard, the host/teacher can share edit access with students. It opens new avenues of interactive education. It is a paid feature in most other techs. You can sign up and use it for free with standupmeet.com&lt;/p&gt;

&lt;p&gt;whiteboard in &lt;a href="http://www.standupmeet.com"&gt;www.standupmeet.com&lt;/a&gt;&lt;br&gt;
Advance Features&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Interactive questions
Online games and social media are highly destructive for attention. We‚Äôve noticed that teachers are currently using additional teachers for monitoring the classroom, calling parents for non-attention. Which is very frustrating.
Simply prepare questionnaires according to the topic you‚Äôre preparing. Call out students, one by one to solve this concern live on a whiteboard for physics &amp;amp; maths-related technical solutions. You can know in which steps students are struggling and tailor your next class accordingly.
What about language and non-technical subjects? We‚Äôve introduced a quiz feature. Simply copy-paste questions and ask directly to students as a quiz. From the right answers, you can know who is attentive in the classroom.&lt;/li&gt;
&lt;li&gt;Self Learning Groups
Cohort-based education is growing rapidly in online education. From kids to professional learning is slowly shifting towards peer learning.
With Standupmeet execution of cohort-based education is super simple. You can divide your classroom into small groups. Create new pages of the new whiteboard and assign to groups. Host competitions, doubt-solving sessions within groups.
This will create an engaging environment in the classroom. The positive point on &lt;a href="http://www.standupmeet.com"&gt;www.standupmeet.com&lt;/a&gt; is, you can create unlimited new boards for free.&lt;/li&gt;
&lt;li&gt;Rewarding Students
Rewarding students for positive actions builds good habits. Many teachers of Standupmeet provide icons like stars, unicorns for children. You can upload any customization icon downloaded from the internet.&lt;/li&gt;
&lt;li&gt;Interactive games
From memory games to quiz, to pairing up students provide an amazing opportunity to get to know classmates better, learning with fun.&lt;/li&gt;
&lt;li&gt;Visual Note Taking
Visual note-taking is a fundamental process of structured thinking. The creation of mind map, flow charts help teachers provide a structured overview of concepts they are going to teach.
visit &lt;a href="http://www.standupmeet.com"&gt;www.standupmeet.com&lt;/a&gt; for more details and schedule seamless online classes with standupmeet.com&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>Handling multiple Fetch Calls using Promise.all and Promise.allSettled methods</title>
      <author>The Nerdy Dev</author>
      <pubDate>Mon, 31 May 2021 09:05:34 +0000</pubDate>
      <link>https://dev.to/thenerdydev/handling-multiple-fetch-calls-using-promise-all-and-promise-allsettled-methods-4f7f</link>
      <guid>https://dev.to/thenerdydev/handling-multiple-fetch-calls-using-promise-all-and-promise-allsettled-methods-4f7f</guid>
      <description>&lt;p&gt;Hey everyone üëãüèª,&lt;/p&gt;

&lt;p&gt;In the previous article, we discussed about some of the very important methods that we have in the Promise API- &lt;strong&gt;Promise.all&lt;/strong&gt;,&lt;strong&gt;Promise.allSettled&lt;/strong&gt;, &lt;strong&gt;Promise.race&lt;/strong&gt;. In this article, let me show you how we can handle multiple fetch calls using &lt;strong&gt;Promise.all&lt;/strong&gt; and &lt;strong&gt;Promise.allSettled&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don't know about them, first check my previous article before continuing reading this article. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/understanding-promise-all-promise-race-and-promise-allsettled-2g1g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Understanding Promise.all, Promise.race and Promise.allSettled &lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª May 25 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#using-promiseall"&gt;
  &lt;/a&gt;
  Using Promise.all
&lt;/h2&gt;

&lt;p&gt;Here is the local JSON file that we will be working with &lt;strong&gt;mobiles.json&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vc6MM_xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ukmzmz2vk9mmds8huzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vc6MM_xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ukmzmz2vk9mmds8huzu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let us see the first implementation using &lt;strong&gt;Promise.all&lt;/strong&gt; for handling multiple fetch calls. [&lt;em&gt;Detailed explanation for this can be found in the video given at the end of the article&lt;/em&gt;]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5DrLswR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2qgffhyvtzesr10u5uj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5DrLswR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2qgffhyvtzesr10u5uj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-promiseallsettled"&gt;
  &lt;/a&gt;
  Using Promise.allSettled
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--caOgev-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1xjyql6ir4q2ui2c6ns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--caOgev-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1xjyql6ir4q2ui2c6ns.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to understand the above two ways of handling fetch calls in great detail, please check the below video where I have explained them step by step : &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-J_O4D0-syw"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;If you have spare 2 hours, then utilize them by creating these &lt;strong&gt;10 JavaScript Projects in under 2 Hours&lt;/strong&gt; &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/10-javascript-projects-in-2-hours-3p1c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 JavaScript Projects in 2 Hours&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Oct 26 '20 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;üëâüèª Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;br&gt;
üëâüèª Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Introducing Regcode - Create Regular Expressions Easily with Code</title>
      <author>Anton √ñdman</author>
      <pubDate>Mon, 31 May 2021 08:44:27 +0000</pubDate>
      <link>https://dev.to/banjoanton/introducing-regcode-create-regular-expressions-easily-with-code-2glk</link>
      <guid>https://dev.to/banjoanton/introducing-regcode-create-regular-expressions-easily-with-code-2glk</guid>
      <description>&lt;p&gt;Every programmer has most likely heard the term Regex, or Regular Expressions. It's extremely useful, but the unreadable syntax makes it hard the learn and easy to forget once you've learned it. &lt;/p&gt;

&lt;p&gt;I really wanted to make Regex easy, so therefore I created &lt;a href="https://www.regcodejs.com"&gt;&lt;strong&gt;Regcode&lt;/strong&gt;&lt;/a&gt; - a tool to create regular expressions easily with code (&lt;a href="https://github.com/banjo/regcode"&gt;Github repo&lt;/a&gt; for those interested, it's open-source).&lt;/p&gt;

&lt;p&gt;Regcode can be easily summarized in this picture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7_1XlmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c458l4sbpfyw0i0nmsqi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7_1XlmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c458l4sbpfyw0i0nmsqi.png" alt="regcode explanation"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;Regcode comes loaded with different features to make it easier for the developer to create their own regular expressions - without actually knowing Regex.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create Regular Expressions with simple code&lt;/li&gt;
&lt;li&gt;English-like syntax that is easy to read&lt;/li&gt;
&lt;li&gt;Easy to learn, easy to read&lt;/li&gt;
&lt;li&gt;Simple API&lt;/li&gt;
&lt;li&gt;Easy documentation&lt;/li&gt;
&lt;li&gt;Convert to Regex or match directly to a string in the API&lt;/li&gt;
&lt;li&gt;Web app to use it create it in the browser&lt;/li&gt;
&lt;li&gt;Get started in minutes&lt;/li&gt;
&lt;li&gt;No need to learn Regex to create an expression&lt;/li&gt;
&lt;li&gt;Free and open-source&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#regcode-the-simple-way-to-write-regex"&gt;
  &lt;/a&gt;
  Regcode - the simple way to write Regex
&lt;/h2&gt;

&lt;p&gt;As you can see on the picture above - Regcode is not at all difficult to use. The syntax is basically English, making it easy to read and learn.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;matchAll&amp;gt; hasBefore(https://) [character]{any} normal(.) [character]{any} hasAfter(.[character]{2,6});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a simple regcode to match different URLs that ends with &lt;code&gt;.com&lt;/code&gt; or &lt;code&gt;.net&lt;/code&gt; (and starts with &lt;code&gt;https://&lt;/code&gt; but does not include it). The syntax makes it easy for the developer to write, but also for other developers to read and actually understand. The regex it generates is much harder to understand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/(?&amp;lt;=https:\/\/)[A-Za-z\u00C0-\u017F]*\.[A-Za-z\u00C0-\u017F]*[A-Za-z\u00C0-\u017F]{2,6}/g
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#web-app-use-it-directly-in-the-browser"&gt;
  &lt;/a&gt;
  Web app - use it directly in the browser
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GzU6-kv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ogqxtWk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzU6-kv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ogqxtWk.png" alt="Web app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can create your own regcode directly in the browser over at the &lt;a href="https://www.regcodejs.com"&gt;main page for regcode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Generate your regex directly, and compare your code directly with your own strings to see if they match.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#api-use-it-in-your-project"&gt;
  &lt;/a&gt;
  API - use it in your project
&lt;/h2&gt;

&lt;p&gt;The API can be installed directly from &lt;a href="https://www.npmjs.com/package/regcode"&gt;NPM&lt;/a&gt; and used inside of your JavaScript/TypeScript projects.&lt;/p&gt;

&lt;p&gt;Install it as usual with NPM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;regcode&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, import it and use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RegCode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hasBefore(https://) normal(www.) [character]{any} normal(.com)[or]normal(.net)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sentenceToMatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The url is https://www.regcodejs.com, here you go!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// look for matches&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;regCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sentenceToMatch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// ["www.regcodejs.com"]&lt;/span&gt;

&lt;span class="c1"&gt;// or convert to regex and match the normal way&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;regCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sentenceToMatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;           &lt;span class="c1"&gt;// ["www.regcodejs.com"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#documentation-with-examples"&gt;
  &lt;/a&gt;
  Documentation with examples
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFSLHj86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Y19Oq6C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFSLHj86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Y19Oq6C.png" alt="Documentation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The documentation is short and hopefully easy to understand, with a lot of different examples to easily get you going. It's really easy to &lt;a href="https://docs.regcodejs.com/"&gt;get started with the basics&lt;/a&gt;. And for those eager to get going directly, you can start at the &lt;a href="https://docs.regcodejs.com/introduction/examples"&gt;examples&lt;/a&gt; page.&lt;/p&gt;




&lt;p&gt;Thank you for very much for taking your time and reading this post. I really hope Regcode comes to good use for you. Feel free to ask me if you have any questions, or create your own issues/pull request if you want to contribute to the project.&lt;/p&gt;

</description>
      <category>regex</category>
      <category>tool</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Encrypt your S3 Object</title>
      <author>Sujithra</author>
      <pubDate>Mon, 31 May 2021 08:28:00 +0000</pubDate>
      <link>https://dev.to/aws-builders/encrypt-your-s3-object-1al</link>
      <guid>https://dev.to/aws-builders/encrypt-your-s3-object-1al</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TC9yY3br--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu5noh8xw56wbz9zxcdt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TC9yY3br--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu5noh8xw56wbz9zxcdt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea behind Encrypting your S3 object is that you upload objects onto Amazon S3 and these are servers of AWS so you may want to make sure that these objects are not accessible for example, if someone gets into the Amazon servers or you wanna make sure you get adhere to some security standards set up by your company. As such, Amazon gives you four methods to encrypt objects in Amazon S3. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first one is called &lt;strong&gt;SSE S3&lt;/strong&gt;. This is to encrypt S3 objects, using keys handled and managed by AWS. &lt;/li&gt;
&lt;li&gt;The second one is &lt;strong&gt;SSE-KMS&lt;/strong&gt;. It leverages AWS key management service to manage your encryption keys. &lt;/li&gt;
&lt;li&gt;The third one is &lt;strong&gt;SSE-C&lt;/strong&gt;. It is used when you manage your own encryption keys.&lt;/li&gt;
&lt;li&gt;Finally &lt;strong&gt;Client-side encryption&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we're going to do a deep dive on all of those so don't worry. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sses3"&gt;
  &lt;/a&gt;
  SSE-S3
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FGch43D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw156sy87ii7fx509nkt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FGch43D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw156sy87ii7fx509nkt.png" alt="SSE S3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an encryption where the keys used to encrypt the data are handled and managed by Amazon S3. The object is going to be encrypted server side. SSE means server-side encryption and it's type of encryption is AES-256, which is in logarithm. So for this to upload an object and set the SSE S3 encryption you must set a header called X-amz-server-side-encryption AES-256. X-amz stands for X Amazon and its server-side encryption is AES-256. This is how you remember the name of the header. Let's have a look in detail. We have an object and it is un-encrypted. We have it written out and we want to upload it into Amazon history and perform some SSE-S3 encryption. So for this we're going to upload the objects onto Amazon S3. You can use the HTTP protocol or the HTTPS protocol and you can add the header that we said, the X-amz-server-side-encryption AES256. Because of this header, Amazon S3 knows that it should apply its own S3 managed data key and using the S3 Managed Key and the object, some encryption will happen and the object will be stored encrypted into your Amazon S3 buckets. Very simple, but here in this instance the data key is entirely owned and managed by Amazon S3.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ssekms"&gt;
  &lt;/a&gt;
  SSE-KMS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_0xAnEfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5yxfgrvu8iaqbc9tpmy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_0xAnEfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5yxfgrvu8iaqbc9tpmy.png" alt="SSE KMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;KMS is a key management service which is an encryption service. SSE-KMS is used when you have your encryption keys are handled and managed by the KMS service. Why will you use KMS over SSEs which are free? Well, it gives you control over who has access to what keys and also gives you an audit trail. Each object is going to be again encrypted server side and for this to work, we must set the header X Amazon service side encryption to be a value AWS KMS. So the idea is exactly the same because it is server-side encryption. We have the object we uploaded using HTTP and then we have the header. Amazon S3 knows to apply the KMS customer master key you have defined on top of it and using this customer master key and your object there's some encryption that will happen and the file will be stored in your S3 buckets under the SSE-KMS encryption scheme.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ssec"&gt;
  &lt;/a&gt;
  SSE-C
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s_Uq_FoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vjwfy7krtetj4qfo43k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_Uq_FoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vjwfy7krtetj4qfo43k.png" alt="SSE - C"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It stands for server-side encryption using the keys that you provide yourself outside of AWS. So in this case, Amazon S3 does not store the encryption key you provide so it will absolutely have to use it because it needs to do encryption after which that key will be discarded. Now, to transmit the data into AWS, you must use HTTPS because you're going to send a secret to AWS and so you must have encryption in transit. Encryption key must be provided in the HTTP headers for every HTTP request made because it's going to be discarded every single time. So we have the object and we want to have it encrypted in Amazon S3 but we want to provide ourselves the client side data key to perform the encryption. So we send both of these things over HTTPS so it's an encrypted connection between you, the clients and Amazon S3. The data key is in the header so therefore Amazon S3 received the exact same object and the client provided data key. And then again, it is server-side encryption so Amazon S3 will perform at the incorporeal using these two things and store the encrypted object into your S3 buckets. If you wanted to retrieve that file from Amazon S3 using SSE-C you would need to provide the clients' side data key that was used before. It requires a lot more management on your end because you manage to do the data keys and AWS in general does not know which data keys you have used. So it's a bit more involved.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clients-side-encryption"&gt;
  &lt;/a&gt;
  Clients Side Encryption.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4gFsD7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o69kvz20yx400aqohvlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4gFsD7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o69kvz20yx400aqohvlw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The encryption is performed by the clients. You as a client encrypt the object before uploading it into Amazon S3. Some client libraries can help you do this for example, the Amazon S3 encryption clients is a way to perform that Client Side Encryption and as I said, clients must encrypt data before sending it to S3. And then in case you receive data that is encrypted using client side encryption, then you are solely responsible for decrypting the data yourself as well so you need to make sure you have the right key available.&lt;/p&gt;

&lt;p&gt;So, as I said, in Client Side Encryption the customer entirely manages the keys and the encryption cycle. Let's have an example. Amazon S3 this time is just the buckets where it's not doing any encryption for us because it is Client-Side Encryption not Server Side encryption. And so in the clients we'll use Encryption SDK for example, the S3 Encryption SDK will provide the object and our client's side data key. The encryption will happen client side so the object is going to be fully encrypted on the client side and then we are going to just upload that already encrypted object into Amazon S3.&lt;/p&gt;

&lt;p&gt;Okay. So that's the four types of encryptions hopefully that makes sense.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encryption-in-transit-ssl-tls"&gt;
  &lt;/a&gt;
  Encryption in Transit - SSL TLS
&lt;/h3&gt;

&lt;p&gt;Encryption in flight is also called SSL TLS because it uses SSL and TLS certificates. It exposes HTTP endpoint that is not encrypted and it exposes HTTPS end point which is encrypted and provide what's called encryption in flight which relies on SSL and TLS certificates. So you're free to use the end points you want but if you use the console, for example you would be using HTTPS and most clients would by the way use HTTPS endpoint by default and so if you're using HTTPS, that means that there is data transfer between your clients and Amazon S3 is going to be fully encrypted and that's, what's called encryption in transit. And one thing to know is that in case you're using SSE-C so server-side encryption and the key is provided by your clients then HTTPS is mandatory.&lt;/p&gt;

</description>
      <category>security</category>
      <category>aws</category>
    </item>
    <item>
      <title>Discussion: best way add CSS to React/Next.js projects?</title>
      <author>Thomas Ledoux</author>
      <pubDate>Mon, 31 May 2021 08:26:16 +0000</pubDate>
      <link>https://dev.to/thomasledoux1/discussion-how-to-add-css-to-next-js-projects-kk9</link>
      <guid>https://dev.to/thomasledoux1/discussion-how-to-add-css-to-next-js-projects-kk9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#current-situation"&gt;
  &lt;/a&gt;
  Current situation
&lt;/h2&gt;

&lt;p&gt;At the company I work for, we currently have a lot of projects which work with Bootstrap to style the website.&lt;br&gt;
Since we don't want to include the jQuery dependency to use the out-of-the-box components (like dropdowns, accordions, ...), we then use react-bootstrap to build (parts of) our UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems-with-current-situation"&gt;
  &lt;/a&gt;
  Problems with current situation
&lt;/h2&gt;

&lt;p&gt;As we try to focus on performance/speed of our websites as much as possible, we are trying to limit the CSS that is being included on every page.&lt;br&gt;
The problem with our current setup is that we have 1 entry point (main.scss) where we import all the bootstrap SCSS we need (so we do only include the parts we need), and include all our custom SCSS.&lt;br&gt;
As you can imagine the output CSS file's size is quite big.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#possible-solutions"&gt;
  &lt;/a&gt;
  Possible solutions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We tried to use &lt;a href="https://purgecss.com/"&gt;CSS purge&lt;/a&gt; to purge all the unused CSS, but we noticed that too much CSS was being deleted from the final output file. &lt;br&gt;
This is caused by react-bootstrap which obfuscates the Bootstrap classes is uses (they are not present in the JSX we write). &lt;br&gt;
I didn't find a good solution to overcome this problem, so any suggestions here are very welcome!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We tried working with SCSS modules to include only the needed SCSS in our components. This caused some problems with missing Bootstrap variables/mixins/functions. This causes a lot of code repetition, and the "general" Bootstrap still gets included on every page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We tried working with Tailwind CSS. This caused a much smaller output CSS file because it can easily be purged. We combined this with SCSS modules where needed. The problem here is that we don't have a library with pre-built components with Tailwind like we do with react-bootstrap (unless I'm missing something?). &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-setup-are-you-using"&gt;
  &lt;/a&gt;
  What setup are you using?
&lt;/h2&gt;

&lt;p&gt;I know CSS in JS is also an option to only include the relevant CSS on your pages, but the same question here as with Tailwind CSS, do you have a library with pre-built components? &lt;/p&gt;

&lt;p&gt;Or don't you use pre-built components and have a custom component library which you re-use in every project?&lt;/p&gt;

&lt;p&gt;Happy to hear your opinion/setup!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>css</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Dependabot for Azure DevOps: Automated Vulnerability Scanning</title>
      <author>Davide Benvegn√π</author>
      <pubDate>Mon, 31 May 2021 08:08:04 +0000</pubDate>
      <link>https://dev.to/n3wt0n/dependabot-for-azure-devops-automated-vulnerability-scanning-235i</link>
      <guid>https://dev.to/n3wt0n/dependabot-for-azure-devops-automated-vulnerability-scanning-235i</guid>
      <description>&lt;p&gt;If you want to have &lt;strong&gt;automated vulnerability scanning in Azure DevOps&lt;/strong&gt;, this is for you! &lt;/p&gt;

&lt;p&gt;In this live streaming, part of the "&lt;em&gt;Build Live with Me&lt;/em&gt;" series, I will show how to &lt;strong&gt;add Dependabot to Azure DevOps&lt;/strong&gt; and how it works.&lt;/p&gt;

&lt;p&gt;Keeping track of any outdated dependencies can be a real nightmare, especially if you have lots of them. This is where Dependabot enters the ring. You can usually find it only in GitHub, but this time I'm adding it into Azure DevOps and Im gonna do it live with you.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4ELai1FivK4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/4ELai1FivK4"&gt;Link to the video: https://youtu.be/4ELai1FivK4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azuredevops</category>
      <category>devops</category>
      <category>devsecops</category>
      <category>live</category>
    </item>
    <item>
      <title>The 10 Most Important Web Developer Resources You Need to Know</title>
      <author>Rohit Singh Rana</author>
      <pubDate>Mon, 31 May 2021 08:04:16 +0000</pubDate>
      <link>https://dev.to/rohitrana/the-10-most-important-web-developer-resources-you-need-to-know-7n9</link>
      <guid>https://dev.to/rohitrana/the-10-most-important-web-developer-resources-you-need-to-know-7n9</guid>
      <description>&lt;p&gt;Did you recently start your &lt;a href="https://dev.to/rohitrana/how-the-web-works-1hd7"&gt;web development&lt;/a&gt; journey?&lt;/p&gt;

&lt;p&gt;As exciting as this may sound to create your first web application but soon things will quickly become repetitive when you have to build everything from scratch for different projects.&lt;/p&gt;

&lt;p&gt;It means that it's time for you to familiarize yourself with some tools that will help you to build projects more efficiently.&lt;/p&gt;

&lt;p&gt;In this post, we‚Äôre going to examine 10 incredibly useful web development resources and how you can get benefit from them.&lt;/p&gt;

&lt;p&gt;Every resource on this list is free for personal use and will help you to become more productive.&lt;/p&gt;

&lt;p&gt;Here are the different categories under which I am going to fit all the resources. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Wireframing&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Online editor&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design ideas&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;General tools&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deploying&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#wireframing"&gt;
  &lt;/a&gt;
  Wireframing
&lt;/h2&gt;

&lt;p&gt;Wireframing is the process of creating a layout for your website. &lt;/p&gt;

&lt;p&gt;It tells you where and how each element will get placed. &lt;/p&gt;

&lt;p&gt;Many people underestimate the power of wireframing but it's a good practice to visualize what your website will look like in the end.&lt;/p&gt;

&lt;p&gt;It gives you more clarity when making several decisions, saving you from a lot of problems. &lt;/p&gt;

&lt;p&gt;Although there are many tools for wireframing out there in the wild. But the best tool which most developers use is Figma.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#figma"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;With annual revenue of more than &lt;a href="https://growjo.com/company/Figma"&gt;130.5 million dollars&lt;/a&gt;, Figma is probably the most valued company on the list.&lt;/p&gt;

&lt;p&gt;Figma is a web-based tool and design platform that is build to help you make a blueprint for your website.&lt;/p&gt;

&lt;p&gt;Figma has a million plugins, themes, and UI kits that you can work with but its greatest strength is that it provides real-time collaboration with your project partners.&lt;/p&gt;

&lt;p&gt;It allows you to build up libraries of reusable components which your project partners can access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--czFa9NWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1s1xagawi3rgs3w5tqh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--czFa9NWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1s1xagawi3rgs3w5tqh.jpeg" alt="Figma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#online-editor"&gt;
  &lt;/a&gt;
  Online Editor
&lt;/h2&gt;

&lt;p&gt;Most developers do not use an online code editor instead they just set up the project in their local machine.&lt;/p&gt;

&lt;p&gt;But for a person who is starting out setting up a big project and installing all the dependencies may be a bit overwhelming.  &lt;/p&gt;

&lt;p&gt;When I started learning &lt;a href="https://dev.to/rohitrana/why-react-is-winning-over-angular-2n7g"&gt;React&lt;/a&gt;, I used the code sandbox as it‚Äôs fast and easy to work with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codesandbox"&gt;
  &lt;/a&gt;
  &lt;a href="https://codesandbox.io/"&gt;CodeSandbox&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;CodeSandbox is an online code editor which accelerates your process of creating web applications.&lt;/p&gt;

&lt;p&gt;But I think it's much more than just an online editor it allows you to share your code and collaborate with other partners.&lt;/p&gt;

&lt;p&gt;This is a simple and effective solution for creating small web applications quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f2AG7vMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/su7zc3x8z0zj2i8zu0i7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f2AG7vMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/su7zc3x8z0zj2i8zu0i7.jpeg" alt="CodeSandbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#30-seconds-of-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.30secondsofcode.org/"&gt;30 seconds of code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;30 seconds of code is not an online code editor instead it provides you the most popular used code snippets for your preferred language.&lt;/p&gt;

&lt;p&gt;Currently, it supports many front-end languages including JavaScript and ReactJS.&lt;/p&gt;

&lt;p&gt;You can search for any specific code snippets like shown below and it will give you an idea of how to use that snippet in your code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YASRyZvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8sga00kp2i1251y1688.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YASRyZvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8sga00kp2i1251y1688.jpeg" alt="30 seconds of code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-ideas"&gt;
  &lt;/a&gt;
  Design ideas
&lt;/h2&gt;

&lt;p&gt;If like me you also struggle with design and creativity this section will be extremely beneficial for you.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that some of these UI ideas will overwhelm you as these are created by experienced professional developers and you will get there in some time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bootstrap-studio"&gt;
  &lt;/a&gt;
  &lt;a href="https://bootstrapstudio.io/"&gt;Bootstrap Studio&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Bootstrap Studio is a desktop application intended to help designers create beautiful and appealing website experiences.&lt;/p&gt;

&lt;p&gt;It has a beautiful and powerful interface, which is built around the simplicity of drag and drop. &lt;/p&gt;

&lt;p&gt;Because it's built using the well-known Bootstrap framework, Bootstrap studio provides clean and straightforward exportation choices, allowing any developer to easily create websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H9dShFUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y163g0ghjynclva73u07.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H9dShFUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y163g0ghjynclva73u07.jpeg" alt="Bootstrap Studio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dribbble"&gt;
  &lt;/a&gt;
  &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://growjo.com/company/Dribbble#:~:text=Estimated%20Revenue%20%26%20Financials,currently%20%2461M%20per%20year."&gt;With more than 6 million active users and a revenue of 61 million dollars&lt;/a&gt;, this is the largest platform where designers flaunt their work.&lt;/p&gt;

&lt;p&gt;Dribble is an online community where designers exhibit their work and made networks with like-minded people.&lt;/p&gt;

&lt;p&gt;In short, Dribble is &lt;a href="https://www.linkedin.com/in/rohit-rana17/"&gt;LinkedIn&lt;/a&gt; for designers and  goldmine for developers looking for design ideas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9jSlxuXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7h5itn7qaakfyyvr4x42.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jSlxuXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7h5itn7qaakfyyvr4x42.jpeg" alt="Dribbble"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ui-design-daily"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.uidesigndaily.com/"&gt;UI Design Daily&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This website will soon become your daily driver once you start implementing its UI components in your projects.&lt;/p&gt;

&lt;p&gt;It provides every sort of components such as login page, donation page, and forms which you can embed smoothly and speed up your project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pc3swFa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xeg57gbw64qgygdi1re.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pc3swFa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xeg57gbw64qgygdi1re.jpeg" alt="UI Design Daily"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-tools"&gt;
  &lt;/a&gt;
  General Tools
&lt;/h2&gt;

&lt;p&gt;This section covers up almost everything a web developer needs for his project from royalty-free images to great illustrations and icons.&lt;/p&gt;

&lt;p&gt;If I will put all these things in this blog then, it‚Äôll become too obnoxious to read.&lt;/p&gt;

&lt;p&gt;Therefore, I have linked a  &lt;a href="https://github.com/bradtraversy/design-resources-for-developers#fonts"&gt;GitHub repo of Brad Traversy&lt;/a&gt; in which you‚Äôll find all those resources in an organized way.&lt;/p&gt;

&lt;p&gt;If you don‚Äôt know Brad Traversy, he makes awesome programming tutorials you can check out his &lt;a href="https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA"&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, Whenever you build your website there is a high possibility that it will throw &lt;a href="https://httpstatusdogs.com/404-not-found"&gt;error 404&lt;/a&gt; for some pages.&lt;/p&gt;

&lt;p&gt;Make sure you have a custom-designed 404 page it‚Äôll give you a good impression.&lt;/p&gt;

&lt;p&gt;Many developers are proud of how beautiful they have designed their 404 pages and therefore, it‚Äôs a good practice for you also to design your website 404 page.&lt;/p&gt;

&lt;p&gt;The tools which you can use for that are &lt;a href="https://error404.fun/"&gt;404 illustrations&lt;/a&gt; and &lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying"&gt;
  &lt;/a&gt;
  Deploying
&lt;/h2&gt;

&lt;p&gt;To present yourself more as a professional developer it is very important to deploy your project so, that everyone can see what you have made.&lt;/p&gt;

&lt;p&gt;There are many hosting services out there like &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;, &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt;, and &lt;a href="https://www.cloudflare.com/"&gt;Cloudflare pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can check them out too but the most popular ones that developers use for hosting their projects are Netlify and Heroku.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#netlify"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Netlify has hosted projects for more than &lt;a href="https://www.netlify.com/press/after-onboarding-800000-developers-netlify-raises-53m-in-series-c-funding-to-fuel-enterprise-growth/"&gt;800,000 developers&lt;/a&gt; and it‚Äôs a very reliable resource that you can trust.&lt;/p&gt;

&lt;p&gt;It‚Äôs biggest feature is that it‚Äôs simple to use and provides you a 10x faster path to host and secure your web apps.&lt;/p&gt;

&lt;p&gt;However, netlify only hosts front-end projects and not full stack projects.&lt;/p&gt;

&lt;p&gt;But don‚Äôt worry I have got you covered on everything.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heroku"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.heroku.com/what"&gt;Heroku&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Heroku is a cloud-based platform that lets you build, host, and scale your full-stack web applications without worrying about infrastructure headaches.&lt;/p&gt;

&lt;p&gt;The thing which l like most about Heroku is that it supports many languages like Node, Python, PHP, Ruby, Java, Go, Clojure and Scala.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://getlatka.com/companies/heroku#:~:text=In%202020%2C%20Heroku%20revenue%20run%20rate%20hit%20%2450.0M%20in%20revenue."&gt;Heroku will get your job done in most cases.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other than these two you can also use firebase and Vercel they also provide very credible services.&lt;/p&gt;

&lt;p&gt;Now, these are the tools that will help you to become a much more efficient web developer.&lt;/p&gt;

&lt;p&gt;Although I have told about all the useful resources, there is a strong suggestion that you should document your journey of being a developer.&lt;/p&gt;

&lt;p&gt;If, you ask me what‚Äôs the best way to do it I‚Äôd say write some &lt;a href="https://www.hostinger.in/tutorials/what-is-a-blog"&gt;blogs&lt;/a&gt;, not much just write once in a month and simply write down what you have learned in that month.&lt;/p&gt;

&lt;p&gt;For writing blogs, you can use &lt;a href="https://dev.to/"&gt;&lt;strong&gt;dev.to&lt;/strong&gt;&lt;/a&gt; it‚Äôs free and super easy to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Learning a skill requires both time and effort. You need to understand the differences between when to start a project from scratch and when to slip in the code snippets.&lt;/p&gt;

&lt;p&gt;Make sure you know that how these code snippets work before you copy them down for your projects.&lt;/p&gt;

&lt;p&gt;If you find my work interesting and enjoyed reading you can appreciate me on &lt;a href="https://www.linkedin.com/in/rohit-rana17/"&gt;&lt;strong&gt;LinkedIn&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://twitter.com/_RohitRana"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Would you like to add any other tools to this list? Do you have any experience with any of these tools? Share your thoughts with us.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>CloudFront Functions</title>
      <author>David Krohn</author>
      <pubDate>Mon, 31 May 2021 08:00:00 +0000</pubDate>
      <link>https://dev.to/aws-builders/cloudfront-functions-3ao0</link>
      <guid>https://dev.to/aws-builders/cloudfront-functions-3ao0</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P4QkNAXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7680ui4x89xk3v1gg2ak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4QkNAXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7680ui4x89xk3v1gg2ak.png" alt="CloudFront Functions"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;A few weeks ago Amazon announced a &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/05/cloudfront-functions/"&gt;new feature&lt;/a&gt; for Amazon CloudFront to run code in Edge Locations. But where is the difference between Lambda@Edge and CloudFront Functions?&lt;br&gt;
CloudFront Functions are running in Edge locations whereas Lambda@Edge functions are executed in a regional edge cache (eg.: the AWS region closest to the CloudFront edge location reached by the client). Therefore CloudFront Functions are even closer to the client and are at the same time approximately 1/6th the price of Lambda@Edge.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Authorization&lt;/strong&gt;: Implement authorization for the content delivered through CloudFront using Basic Authentication or by creating and validating user-generated tokens. &lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Redirects&lt;/strong&gt;: Redirect users to a different URL - eg.: If you change to a new website structure you can redirect the user to the new URL.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Header Manipulation&lt;/strong&gt;: Add, modify, or delete any of the request/response headers - eg.: foward the IP of the client using the Header to your origin.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#cloudfront-functions-versus-lambdaedge"&gt;
  &lt;/a&gt;
  CloudFront Functions versus Lambda@Edge
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;p&gt;Most important differences - if you need more information check this docs: &lt;a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/edge-functions.html"&gt;Choosing between CloudFront Functions and Lambda@Edge&lt;/a&gt;.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;CloudFront Functions&lt;/th&gt;
&lt;th&gt;Lambda@Edge&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Execution location&lt;/td&gt;
&lt;td&gt;CloudFront Edge Locations&lt;/td&gt;
&lt;td&gt;CloudFront Regional Edge Caches&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Programming languages&lt;/td&gt;
&lt;td&gt;JavaScript (&lt;a href="https://262.ecma-international.org/5.1/"&gt;ECMAScript 5.1&lt;/a&gt; compliant)&lt;/td&gt;
&lt;td&gt;Python, Nodejs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Event sources&lt;/td&gt;
&lt;td&gt;Viewer request  Viewer response&lt;/td&gt;
&lt;td&gt;Viewer request  Viewer response Origin request  Origin response&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Memory&lt;/td&gt;
&lt;td&gt;2 MB&lt;/td&gt;
&lt;td&gt;128 MB (viewer triggers) ‚Äì 10 GB (origin triggers)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max size of Function&lt;/td&gt;
&lt;td&gt;10 KB&lt;/td&gt;
&lt;td&gt;1 MB (viewer request / response)  50 MB (origin request / response)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max execution time&lt;/td&gt;
&lt;td&gt;1 ms&lt;/td&gt;
&lt;td&gt;5 seconds (viewer request / response)  30 seconds (origin request / response)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Access to geolocation and device data&lt;/td&gt;
&lt;td&gt;‚úÖ&lt;/td&gt;
&lt;td&gt;‚ùå (viewer request)  ‚úÖ (viewer response)  ‚úÖ (origin request)   ‚úÖ (origin response)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Access to the request body&lt;/td&gt;
&lt;td&gt;‚ùå&lt;/td&gt;
&lt;td&gt;‚úÖ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#pricing-example"&gt;
  &lt;/a&gt;
  Pricing example
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Price per Invocation&lt;/th&gt;
&lt;th&gt;Price per Duration (for every GB-second)&lt;/th&gt;
&lt;th&gt;Invocations&lt;/th&gt;
&lt;th&gt;Duration&lt;/th&gt;
&lt;th&gt;Allocated Memory&lt;/th&gt;
&lt;th&gt;Total Cost&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CloudFront Function&lt;/td&gt;
&lt;td&gt;$0.1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2 Million&lt;/td&gt;
&lt;td&gt;1ms&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;$2.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lambda@Edge&lt;/td&gt;
&lt;td&gt;$0.6&lt;/td&gt;
&lt;td&gt;$0,00005001&lt;/td&gt;
&lt;td&gt;2 Million&lt;/td&gt;
&lt;td&gt;10ms&lt;/td&gt;
&lt;td&gt;128MB&lt;/td&gt;
&lt;td&gt;$12.26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The prices were checked on 30.05.2021 from &lt;a href="https://aws.amazon.com/lambda/pricing/"&gt;Lambda@Edge pricing&lt;/a&gt; and &lt;a href="https://aws.amazon.com/cloudfront/pricing/"&gt;CloudFront Function pricing&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#example-template-for-basic-auth-with-cloudfront-functions"&gt;
  &lt;/a&gt;
  Example template for Basic Auth with CloudFront Functions
&lt;/h2&gt;

&lt;p&gt;Following you will find a CloudFront Function for Basic Auth - I am using it as a second layer of security for private CloudFront origins. For example I am generating exports of Jira content to S3 using a Lambda as a Backup. In Front of CloudFront I have a WAF to restrict to spefic IPs plus these CloudFront functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Creates a Base CloudFront Function for Authentification&lt;/span&gt;
&lt;span class="na"&gt;Metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Author&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;David Krohn&lt;/span&gt;

&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;CloudFrountUsername&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Username CloudFront&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
  &lt;span class="na"&gt;CloudFrountPassword&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Password CloudFront&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;NoEcho&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;Ressources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;CloudFrontFunctionBasicAuth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CloudFront::Function&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
      &lt;span class="na"&gt;AutoPublish&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;FunctionCode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;var USERS = {&lt;/span&gt;
            &lt;span class="s"&gt;Website: [{&lt;/span&gt;
                &lt;span class="s"&gt;username: '${CloudFrountUsername}',&lt;/span&gt;
                &lt;span class="s"&gt;password: '${CloudFrountPassword}',&lt;/span&gt;
            &lt;span class="s"&gt;}],&lt;/span&gt;
        &lt;span class="s"&gt;};&lt;/span&gt;

        &lt;span class="s"&gt;//Response when auth is not valid.&lt;/span&gt;
        &lt;span class="s"&gt;var response401 = { &lt;/span&gt;
            &lt;span class="s"&gt;statusCode: 401,&lt;/span&gt;
            &lt;span class="s"&gt;statusDescription: 'Unauthorized',&lt;/span&gt;
            &lt;span class="s"&gt;headers: {&lt;/span&gt;
                &lt;span class="s"&gt;'www-authenticate': {&lt;/span&gt;
                    &lt;span class="s"&gt;value: 'Basic'&lt;/span&gt;
                &lt;span class="s"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;};&lt;/span&gt;

        &lt;span class="s"&gt;var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";&lt;/span&gt;

        &lt;span class="s"&gt;function btoa(input) {&lt;/span&gt;
            &lt;span class="s"&gt;input = String(input);&lt;/span&gt;
            &lt;span class="s"&gt;var bitmap, a, b, c,&lt;/span&gt;
                &lt;span class="s"&gt;result = "",&lt;/span&gt;
                &lt;span class="s"&gt;i = 0,&lt;/span&gt;
                &lt;span class="s"&gt;rest = input.length % 3; // To determine the final padding&lt;/span&gt;

            &lt;span class="s"&gt;for (; i &amp;lt; input.length;) {&lt;/span&gt;
                &lt;span class="s"&gt;if ((a = input.charCodeAt(i++)) &amp;gt; 255 ||&lt;/span&gt;
                    &lt;span class="s"&gt;(b = input.charCodeAt(i++)) &amp;gt; 255 ||&lt;/span&gt;
                    &lt;span class="s"&gt;(c = input.charCodeAt(i++)) &amp;gt; 255)&lt;/span&gt;
                    &lt;span class="s"&gt;throw new TypeError("Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.");&lt;/span&gt;

                &lt;span class="s"&gt;bitmap = (a &amp;lt;&amp;lt; 16) | (b &amp;lt;&amp;lt; 8) | c;&lt;/span&gt;
                &lt;span class="s"&gt;result += b64.charAt(bitmap &amp;gt;&amp;gt; 18 &amp;amp; 63) + b64.charAt(bitmap &amp;gt;&amp;gt; 12 &amp;amp; 63) +&lt;/span&gt;
                    &lt;span class="s"&gt;b64.charAt(bitmap &amp;gt;&amp;gt; 6 &amp;amp; 63) + b64.charAt(bitmap &amp;amp; 63);&lt;/span&gt;
            &lt;span class="s"&gt;}&lt;/span&gt;

            &lt;span class="s"&gt;// If there's need of padding, replace the last 'A's with equal signs&lt;/span&gt;
            &lt;span class="s"&gt;return rest ? result.slice(0, rest - 3) + "===".substring(rest) : result;&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;

        &lt;span class="s"&gt;function handler(event) {&lt;/span&gt;
            &lt;span class="s"&gt;var request = event.request;&lt;/span&gt;
            &lt;span class="s"&gt;var headers = request.headers;&lt;/span&gt;

            &lt;span class="s"&gt;var auth = request.headers.authorization &amp;amp;&amp;amp; request.headers.authorization.value;&lt;/span&gt;


            &lt;span class="s"&gt;var users = USERS['Website'];&lt;/span&gt;

            &lt;span class="s"&gt;if (users) {&lt;/span&gt;
                &lt;span class="s"&gt;if (!auth || !auth.startsWith('Basic ')) {&lt;/span&gt;
                    &lt;span class="s"&gt;return response401;&lt;/span&gt;
                &lt;span class="s"&gt;}&lt;/span&gt;
                &lt;span class="s"&gt;if(!users.find(function(user) {&lt;/span&gt;

                        &lt;span class="s"&gt;// Construct the Basic Auth string&lt;/span&gt;
                        &lt;span class="s"&gt;var authString = 'Basic ' + btoa(user.username + ':' + user.password);&lt;/span&gt;

                        &lt;span class="s"&gt;return authString === auth;&lt;/span&gt;
                    &lt;span class="s"&gt;})) {&lt;/span&gt;
                    &lt;span class="s"&gt;return response401;&lt;/span&gt;
                &lt;span class="s"&gt;}&lt;/span&gt;
            &lt;span class="s"&gt;}&lt;/span&gt;
            &lt;span class="s"&gt;return request;&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;

      &lt;span class="na"&gt;FunctionConfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Comment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Basic&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Auth&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;S3&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Bucket&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${MyWebsiteBucket}'&lt;/span&gt;
        &lt;span class="na"&gt;Runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cloudfront-js-1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More samples can be found here: &lt;a href="https://github.com/aws-samples/amazon-cloudfront-functions"&gt;Amazon CloudFront Functions Samples&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Java for JavaScript Developer - week 2</title>
      <author>Olena Drugalya</author>
      <pubDate>Mon, 31 May 2021 07:58:33 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/java-for-javascript-developer-week-2-3dkf</link>
      <guid>https://dev.to/olenadrugalya/java-for-javascript-developer-week-2-3dkf</guid>
      <description>&lt;p&gt;This blog post continues a series "Java for JavaScript Developers", in which I write about my Java learning path after being web developer. Here I will write about basics of Java and what challenges did I have during the study.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenge-1-data-types"&gt;
  &lt;/a&gt;
  Challenge 1 - Data Types.
&lt;/h2&gt;

&lt;p&gt;Java is a static language, it means that data types are checked before the run-time, so we define a variable, we have to define its type as well. In JavaScript we don't need to define a type of variable, it is being checked during the execution of the application. So, for me it was something i had to used to, good thing that I'm using IntelliJ IDE and it has a very clever compiler. So whenever I was defining a variable without a type, the compiler was showing me an error right away.&lt;/p&gt;

&lt;p&gt;There are 2 types of data in Java:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;primitive&lt;/li&gt;
&lt;li&gt;non-primitive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Primitive&lt;/em&gt; type is a type, which size in the memory and location are defined. They are the building blocks of data manipulation and the very basic types. They can be divided into 4 categories : Boolean (boolean type), Character (character literal), Integer (integer type) and Floating-Point.&lt;/p&gt;

&lt;p&gt;There are 8 types of primitive data types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;byte&lt;/li&gt;
&lt;li&gt;char&lt;/li&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;long&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Non-primitive&lt;/em&gt; type is a type, which size in the memory and location are not defined. They include String, Classes, Interfaces and Arrays. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenge-2-semicolon"&gt;
  &lt;/a&gt;
  Challenge 2 - Semicolon.
&lt;/h2&gt;

&lt;p&gt;Yes, this is painful topic if you came from the world of JavaScript :) Now with Java you should always remember to finish your line of code with a semicolon. It shows the compiler where an instruction ends and where the next instruction begins.&lt;br&gt;
 Semicolon allows the Java program to be written in one line or multiple lines, by letting the compiler know where to end the instructions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#challenge-3-variables"&gt;
  &lt;/a&gt;
  Challenge 3 - Variables.
&lt;/h2&gt;

&lt;p&gt;In JavaScript there are 2 types of keywords to define a variable - const and let. They are almost identical with just only one difference - &lt;em&gt;const&lt;/em&gt; indicates that the value of variable cannot be re-assigned and &lt;em&gt;let&lt;/em&gt; can be re-assigned. So, of course const keyword is widely used in JS.&lt;/p&gt;

&lt;p&gt;In Java however, there are no keywords to define a variable. Instead its important to assign a data type first. Also there access modifiers you will have to take into consideration, but those are not so important with variables.&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;three&lt;/em&gt; types of variables in Java: local, instance and static.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-local-variable"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1) Local Variable&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A variable declared inside the body of the method is called local variable. You can use this variable only within that method and the other methods in the class aren't even aware that the variable exists.&lt;/p&gt;

&lt;p&gt;A local variable cannot be defined with "static" keyword.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-instance-variable"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2) Instance Variable&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A variable declared inside the class but outside the body of the method, is called instance variable. It is not declared as¬†static&lt;/p&gt;

&lt;p&gt;It is called instance variable because its value is instance specific and is not shared among instances.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-static-variable"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3) Static variable&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A variable which is declared as static is called static variable. It cannot be local. You can create a single copy of static variable and share among all the instances of the class. Memory allocation for static variable happens only once when the class is loaded in the memory. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#challenge-4-implicit-and-explicit-casting"&gt;
  &lt;/a&gt;
  Challenge 4 - Implicit and Explicit Casting.
&lt;/h2&gt;

&lt;p&gt;This is totally something you never see in JavaScript, so its Java exclusive thing. &lt;/p&gt;

&lt;p&gt;Type Casting is nothing but converting a primitive or interface or class into other type. There is a rule in Java Language that classes or interface which shares the same type hierarchy only can be typecasted. If there is no relationship between then Java will throw ClassCastException. Type casting are of two types:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Implicit Casting (Widening)&lt;/li&gt;
&lt;li&gt;Explicit Casting (Narrowing)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Implicit Casting/ Widening&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Automatic type conversion can happen, if both types are compatible and target type is larger than source type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// No casting needed for below conversion&lt;/span&gt;
&lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explicit Casting / Narrowing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you are assigning a larger type to a smaller type, then Explicit Casting is required&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;75.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Explicit casting is needed for below conversion&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#challenge-5-the-equality-operator"&gt;
  &lt;/a&gt;
  Challenge 5 - The Equality Operator.
&lt;/h2&gt;

&lt;p&gt;As you know, JavaScript has 2 equality operators - &lt;br&gt;
== (equality by value)&lt;br&gt;
=== (equality by value and type)&lt;/p&gt;

&lt;p&gt;Java offers you just one nice equality operator -  == and nothing else, because there is no need to check for equality by type. Just enjoy one operator here :)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#challenge-6-methods"&gt;
  &lt;/a&gt;
  Challenge 6 - Methods.
&lt;/h2&gt;

&lt;p&gt;Here is all the fun begins :)&lt;br&gt;
In JavaScript is all about functions, it can be called a building block of the language. &lt;br&gt;
To define the function all you need is &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;keyword Const&lt;/li&gt;
&lt;li&gt;function name (keyword &lt;em&gt;function&lt;/em&gt; is needed if we dont use arrow function)&lt;/li&gt;
&lt;li&gt;parameters&lt;/li&gt;
&lt;li&gt;function body
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(..&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;..)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In Java each method consist of:&lt;/p&gt;

&lt;p&gt;1.) Access specifier (it is the access type of the method. It specifies the visibility of the method ). Java provides &lt;strong&gt;four&lt;/strong&gt; types of access specifier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Public:&lt;/strong&gt; The method is accessible by all classes when we use public specifier in our application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Private:&lt;/strong&gt; When we use a private access specifier, the method is accessible only in the classes in which it is defined.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Protected:&lt;/strong&gt; When we use protected access specifier, the method is accessible within the same package or subclasses in a different package.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Default:&lt;/strong&gt; When we do not use any access specifier in the method declaration, Java uses default access specifier by default.
It is visible only from the same package only.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.) Return Type: Return type is a data type that the method returns. It may have a primitive data type, object, collection, void, etc. If the method does not return anything, we use void keyword.&lt;/p&gt;

&lt;p&gt;3.) Method Name: It is a unique name that is used to define the name of a method. It must be corresponding to the functionality of the method. Suppose, if we are creating a method for subtraction of two numbers, the method name must be subtraction(). A method is invoked by its name.&lt;/p&gt;

&lt;p&gt;4.) Parameter List: It is the list of parameters separated by a comma and enclosed in the pair of parentheses. It contains the data type and variable name. If the method has no parameter, left the parentheses blank.&lt;/p&gt;

&lt;p&gt;5.) Method Body: It is a part of the method declaration. It contains all the actions to be performed. It is enclosed within the pair of curly braces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt; &lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="err"&gt;¬†&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="err"&gt;¬†&lt;/span&gt;&lt;span class="n"&gt;myFunction&lt;/span&gt;&lt;span class="o"&gt;(...&lt;/span&gt;&lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="o"&gt;...)&lt;/span&gt; &lt;span class="o"&gt;{...&lt;/span&gt;&lt;span class="na"&gt;function&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;...};&lt;/span&gt;&lt;span class="err"&gt;¬†&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So as you might see, there are may different things a developer has to do differently if he/she switches from JavaScript to Java. Although for me personally only the basic syntax was a bit difficult to grasp. The main concepts though like OOP or collections were easy to understand and use. &lt;/p&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/olenadrugalya/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/OlenaDrugalya"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/J3J42JOOA"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7c42cU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>20 - Chain of Responsibility</title>
      <author>Mangirdas Kazlauskas üöÄ</author>
      <pubDate>Mon, 31 May 2021 07:32:38 +0000</pubDate>
      <link>https://dev.to/mkobuolys/20-chain-of-responsibility-37</link>
      <guid>https://dev.to/mkobuolys/20-chain-of-responsibility-37</guid>
      <description>&lt;p&gt;Previously in the series, I have analysed a structural design pattern that introduced a concept of a ‚Äúshared object‚Äù which could be used in multiple contexts simultaneously, hence reducing the memory usage of your code ‚Äî Flyweight. This time I would like to represent a behavioural design pattern, which enables loose coupling between the sender of a request and its receiver, also adding a possibility for the same request to be handled by multiple handlers ‚Äî it is the Chain of Responsibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is the Chain of Responsibility design pattern?&lt;/li&gt;
&lt;li&gt;Analysis&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Your Contribution&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-chain-of-responsibility-design-pattern"&gt;
  &lt;/a&gt;
  What is the Chain of Responsibility design pattern?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDo0qb_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tbc8kg1ewpoirgstk9k.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDo0qb_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tbc8kg1ewpoirgstk9k.jpeg" alt="A Chain Of People Responsible For Freedom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chain of Responsibility (CoR)&lt;/strong&gt;, also known as &lt;strong&gt;Chain of Command&lt;/strong&gt;, is a behavioural design pattern, which intention in the &lt;a href="https://en.wikipedia.org/wiki/Design_Patterns"&gt;GoF book&lt;/a&gt; is described like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;TL;DR: the Chain of Responsibility design pattern is an ordered list of message handlers that know how to do two things ‚Äî process a specific type of message or pass the message along to the next message handler.&lt;/p&gt;

&lt;p&gt;First of all, the Chain of Responsibility design pattern is behavioural which means that its primary purpose is to rework the basic workflow (behaviour) and split it into several separate parts or stand-alone objects (recall Command or State design patterns as examples). Let‚Äôs say you have some kind of workflow defined in your code where each step should be executed sequentially. It works and everything is fine until‚Ä¶&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some additional steps should be introduced. &lt;em&gt;Ok, not a big deal, just add them&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Some of these steps are optional based on the request. &lt;em&gt;Well, let‚Äôs add some conditional blocks, nothing extraordinary&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Oops, we forgot validation‚Ä¶ &lt;em&gt;Hmm, the code starts bloating somehow&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;A wild feature request appears: the order of the steps is different based on the request. &lt;em&gt;Please, stahp‚Ä¶&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, I hope you get the idea that this code could easily become a mess (not to mention the violation of the Open-Closed Principle ‚Äî the letter &lt;strong&gt;O&lt;/strong&gt; in &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt; principles). What the CoR pattern suggests is to split each step into a separate component ‚Äî &lt;em&gt;handler&lt;/em&gt; ‚Äî and later link these handlers into a chain. Each handler contains a reference to the next one, hence once the request is received it is processed by the handler and passed to the next one along the chain until the workflow is finished. As a result, we still have the same sequential code execution, but now each step is separated, additional steps could be added without changing the existing code. But wait, there is more!&lt;/p&gt;

&lt;p&gt;The Chain of Responsibility pattern allows reordering, adding or removing handlers in the chain at run-time ‚Äî how cool is that, right? Also, each handler could be implemented in a way that it could decide whether to pass the request further down the chain or not.&lt;/p&gt;

&lt;p&gt;Lots of great ideas already mentioned here, so let‚Äôs just jump right in by analysing the CoR design pattern and its implementation in more detail!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analysis"&gt;
  &lt;/a&gt;
  Analysis
&lt;/h2&gt;

&lt;p&gt;The general structure of the Chain of Responsibility design pattern looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYqJuyQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfjtboulon6uid8e8uav.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYqJuyQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfjtboulon6uid8e8uav.png" alt="Chain of Responsibility Class Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Handler&lt;/em&gt; ‚Äî defines an interface for handling requests. This interface is optional when all the handlers extend the &lt;em&gt;BaseHandler&lt;/em&gt; class ‚Äî then having a single abstract method for handling requests should be enough;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;BaseHandler&lt;/em&gt; ‚Äî an abstract class that contains the boilerplate code that‚Äôs common to all the handler classes and maintains a reference to the next handler object on the chain. Also, the class may implement the default handling behaviour e.g. it can pass the request to the next handler if there is one;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;ConcreteHandlers&lt;/em&gt; ‚Äî contain the actual code for processing the request. Upon receiving a request, the handler could either handle it or pass it along the chain. Usually, handlers are immutable once they are initialised;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Client&lt;/em&gt; ‚Äî composes the chain(s) of handlers and later initiates the request to a &lt;em&gt;ConcreteHandler&lt;/em&gt; object on the chain.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#applicability"&gt;
  &lt;/a&gt;
  Applicability
&lt;/h3&gt;

&lt;p&gt;The Chain of Responsibility design pattern should be used when the system is expected to process different kinds of requests in various ways, but neither the request types nor the handling sequence is defined at compile-time. The pattern enables linking several handlers into one chain and allowing the client to pass requests along that chain. As a result, each handler will receive the request and process it and/or pass it further. Also, to resolve the unknown handling sequence problem, handlers could provide setters for a reference field of the successor inside the handler classes ‚Äî you will be able to add, delete or reorder handlers at run-time, hence changing the handling sequence of a request.&lt;/p&gt;

&lt;p&gt;Furthermore, the CoR pattern should be used when a single request must be handled by multiple handlers, usually in a particular order. In this case, the chain could be defined at compile-time and all requests will get through the chain exactly as planned. If the execution order is irrelevant, just roll the dice and build the chain in random order ‚Äî all handlers would still receive the request and handle it.&lt;/p&gt;

&lt;p&gt;Finally, one thing to remember ‚Äî &lt;strong&gt;the receipt isn‚Äôt guaranteed&lt;/strong&gt;. Since CoR introduces the loose coupling between sender and receiver, and the request could be handled by any handler in the chain, there is no guarantee that it will be actually handled. In cases when the request must be processed by at least one handler, you must ensure that the chain is configured properly, for instance, by adding some kind of a monitor handler at the end of the chain that notifies about unhandled requests and/or executes some specific logic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zUHWf4r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0b08zvsn1qzed8ibavn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zUHWf4r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0b08zvsn1qzed8ibavn.gif" alt="Let's Get The Party Started"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use the Chain of Responsibility design pattern to implement a custom logging workflow in the application.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say that we want 3 different log levels based on their importance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Debug ‚Äî only needed in the local environment for development purposes;&lt;/li&gt;
&lt;li&gt;Info ‚Äî we want to see those logs locally, but also they should be stored and visible in the external logging service when the application is deployed;&lt;/li&gt;
&lt;li&gt;Error ‚Äî those logs must be visible locally and external logging service, but also we want to notify our development team by sending an e-mail when such log appears.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case, our request is a log message with its content and log level. Our handlers ‚Äî debug, info and error loggers with their custom logic. To implement the wanted workflow, we could link the loggers in the following order: Debug -&amp;gt; Info -&amp;gt; Error. If the logger‚Äôs log level is lower or equal to the one defined in the message, the message should be logged. And that‚Äôs basically it, really, it‚Äôs that simple!&lt;/p&gt;

&lt;p&gt;A picture is worth a thousand words, so let‚Äôs check the class diagram first and then implement the pattern.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#class-diagram"&gt;
  &lt;/a&gt;
  Class diagram
&lt;/h2&gt;

&lt;p&gt;The class diagram below shows the implementation of the Chain of Responsibility design pattern:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e_By0pBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/niirr29l0hgyn64c1o8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e_By0pBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/niirr29l0hgyn64c1o8g.png" alt="Chain of Responsibility Implementation Class Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;LogLevel&lt;/em&gt; is an enumerator class defining possible log levels ‚Äî Debug, Info and Error.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;LogMessage&lt;/em&gt; class is used to store information about the log message: its log level and the message text. It also provides a public &lt;em&gt;getFormattedMessage()&lt;/em&gt; method to format the log entry as a Widget object (for that, a private helper method &lt;em&gt;getLogEntryColor()&lt;/em&gt; and a getter &lt;em&gt;logLevelString&lt;/em&gt; are used).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;LoggerBase&lt;/em&gt; is an abstract class that is used as a base class for all the specific loggers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;logMessage()&lt;/em&gt; ‚Äî logs message using the &lt;em&gt;log()&lt;/em&gt; method and passes the request along the chain;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;logDebug()&lt;/em&gt; ‚Äî logs the message with a log level of Debug;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;logInfo()&lt;/em&gt; ‚Äî logs the message with a log level of Info;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;logError()&lt;/em&gt; ‚Äî logs the message with a log level of Error;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;log()&lt;/em&gt; ‚Äî an abstract method to log the message (must be implemented by a specific logger).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, the &lt;em&gt;LoggerBase&lt;/em&gt; contains a reference to the next logger (&lt;em&gt;nextLogger&lt;/em&gt;) and logger‚Äôs log level (&lt;em&gt;logLevel&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DebugLogger&lt;/em&gt;, &lt;em&gt;InfoLogger&lt;/em&gt; and &lt;em&gt;ErrorLogger&lt;/em&gt; are concrete logger classes that extend the &lt;em&gt;LoggerBase&lt;/em&gt; class and implement the abstract &lt;em&gt;log()&lt;/em&gt; method. &lt;em&gt;InfoLogger&lt;/em&gt; uses the &lt;em&gt;ExternalLoggingService&lt;/em&gt; to log messages, &lt;em&gt;ErrorLogger&lt;/em&gt; ‚Äî the &lt;em&gt;MailService&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;All the specific loggers use or inject the &lt;em&gt;LogBloc&lt;/em&gt; class to mock the actual logging and provide log entries to the UI.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;LogBloc&lt;/em&gt; stores a list of logs and exposes them through the stream ‚Äî &lt;em&gt;outLogStream&lt;/em&gt;. Also, it defines the &lt;em&gt;log()&lt;/em&gt; method to add a new log to the list and notify &lt;em&gt;outLogStream&lt;/em&gt; subscribers with an updated log entries list.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ChainOfResponsibilityExample&lt;/em&gt; creates a chain of loggers and uses public methods defined in &lt;em&gt;LoggerBase&lt;/em&gt; to log messages. It also initialises and contains the &lt;em&gt;LogBloc&lt;/em&gt; instance to store log entries and later show them in the UI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loglevel"&gt;
  &lt;/a&gt;
  LogLevel
&lt;/h3&gt;

&lt;p&gt;A special kind of class ‚Äî &lt;em&gt;enumeration&lt;/em&gt; ‚Äî to define different log levels. Also, there is a &lt;em&gt;LogLevelExtensions&lt;/em&gt; defined where the operator &amp;lt;= is overridden to compare whether one log level is lower or equal to the other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6zmPoMlc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jesprd26m6hdytvled1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6zmPoMlc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jesprd26m6hdytvled1.png" alt="log_level.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logmessage"&gt;
  &lt;/a&gt;
  LogMessage
&lt;/h3&gt;

&lt;p&gt;A simple class to store information about the log entry: log level and message. Also, this class defines a private getter &lt;em&gt;logLevelString&lt;/em&gt; to return the text representation of a specific log level and a private method &lt;em&gt;getLogEntryColor()&lt;/em&gt; to return the log entry colour based on the log level. The &lt;em&gt;getFormattedMessage()&lt;/em&gt; method returns the formatted log entry as a &lt;em&gt;Text&lt;/em&gt; widget which is used in the UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ug-N70s9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us0biwt4jbl3s1tekfwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ug-N70s9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us0biwt4jbl3s1tekfwa.png" alt="log_message.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logbloc"&gt;
  &lt;/a&gt;
  LogBloc
&lt;/h3&gt;

&lt;p&gt;A Business Logic component (BLoC) class to store log messages and provide them to the UI through a public stream. New log entries are added to the logs list via the &lt;em&gt;log()&lt;/em&gt; method while all the logs could be accessed through the public &lt;em&gt;outLogStream&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L_aeWKgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkmu50b6ruum8h2l0q38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_aeWKgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkmu50b6ruum8h2l0q38.png" alt="log_bloc.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#externalloggingservice"&gt;
  &lt;/a&gt;
  ExternalLoggingService
&lt;/h3&gt;

&lt;p&gt;A simple class that represents the actual external logging service. Instead of sending the log message to some kind of 3rd party logging service (which, in fact, could be called in the &lt;em&gt;logMessage()&lt;/em&gt; method), it just logs the message to UI through the &lt;em&gt;LogBloc&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FbUU8meG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj5dzgpbelb9c42pp0vn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FbUU8meG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj5dzgpbelb9c42pp0vn.png" alt="external_logging_service.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mailservice"&gt;
  &lt;/a&gt;
  MailService
&lt;/h3&gt;

&lt;p&gt;A simple class that represents the actual mail logging service. Instead of sending the log message as an email to the user, it just logs the message to UI through the &lt;em&gt;LogBloc&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TFNIH9qP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gevlr106k3yzn4g716fp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TFNIH9qP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gevlr106k3yzn4g716fp.png" alt="mail_service.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loggerbase"&gt;
  &lt;/a&gt;
  LoggerBase
&lt;/h3&gt;

&lt;p&gt;An abstract class for the base logger implementation. It stores the log level and a reference (successor) to the next logger in the chain. Also, the class implements a common &lt;em&gt;logMessage()&lt;/em&gt; method that logs the message if its log level is lower than the current logger‚Äôs and then forwards the message to the successor (if there is one). The abstract &lt;em&gt;log()&lt;/em&gt; method must be implemented by specific loggers extending the &lt;em&gt;LoggerBase&lt;/em&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hZ8idz9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pruohe8p7jv7iz75ey3g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZ8idz9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pruohe8p7jv7iz75ey3g.png" alt="logger_base.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concrete-loggers"&gt;
  &lt;/a&gt;
  Concrete loggers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;DebugLogger&lt;/em&gt; ‚Äî a specific implementation of the logger that sets the log level to &lt;em&gt;Debug&lt;/em&gt; and simply logs the message to UI through the &lt;em&gt;LogBloc&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1-L8upzk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k40w4dh4tn7gx2x4jeqz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-L8upzk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k40w4dh4tn7gx2x4jeqz.png" alt="debug_logger.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;InfoLogger&lt;/em&gt; ‚Äî a specific implementation of the logger that sets the log level to &lt;em&gt;Info&lt;/em&gt; and uses the &lt;em&gt;ExternalLoggingService&lt;/em&gt; to log the message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dkTXEAR---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i016diqwbyi9v46fntvp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dkTXEAR---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i016diqwbyi9v46fntvp.png" alt="info_logger.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;ErrorLogger&lt;/em&gt; ‚Äî a specific implementation of the logger that sets the log level to &lt;em&gt;Error&lt;/em&gt; and uses the &lt;em&gt;MailService&lt;/em&gt; to log the message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XOQWPqim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jt7fj2kxhnugahfzi1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XOQWPqim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jt7fj2kxhnugahfzi1c.png" alt="error_logger.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;First of all, a markdown file is prepared and provided as a pattern‚Äôs description:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZViZDTXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk67o11vuuwoezgy3vf6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZViZDTXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk67o11vuuwoezgy3vf6.gif" alt="Chain of Responsibility Markdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;ChainOfResponsibilityExample&lt;/em&gt; widget initialises and contains the loggers‚Äô chain object (see the &lt;em&gt;initState()&lt;/em&gt; method). Also, for demonstration purposes, the &lt;em&gt;LogBloc&lt;/em&gt; object is initialised there, too, and used to send logs and retrieve a list of them through the stream ‚Äî &lt;em&gt;outLogStream&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urfxM6Iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv61n2d484topkm6tuse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urfxM6Iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv61n2d484topkm6tuse.png" alt="chain_of_responsibility_example.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By creating a chain of loggers, the client ‚Äî &lt;em&gt;ChainOfResponsibilityExample&lt;/em&gt; widget ‚Äî does not care about the details on which specific logger should handle the log entry, it just passes (logs) the message to a chain of loggers. This way, the sender (client) and receiver (logger) are decoupled, the loggers‚Äô chain itself could be built at run-time in any order or structure e.g. you can skip the Debug logger for non-local environments and only use the Info -&amp;gt; Error chain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59pDM0-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40l8rt6rjv3q4cajxyhf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59pDM0-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40l8rt6rjv3q4cajxyhf.gif" alt="Chain of Responsibility Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the example, &lt;em&gt;debug&lt;/em&gt; level logs are only handled by the debug logger, &lt;em&gt;info&lt;/em&gt; ‚Äî by debug and info level handlers and &lt;em&gt;error&lt;/em&gt; logs are handled by all three loggers.&lt;/p&gt;

&lt;p&gt;All of the code changes for the Chain of Responsibility design pattern and its example implementation could be found &lt;a href="https://github.com/mkobuolys/flutter-design-patterns/pull/21"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-contribution"&gt;
  &lt;/a&gt;
  Your Contribution
&lt;/h2&gt;

&lt;p&gt;üíñ or ü¶Ñ this article to show your support and motivate me to write better!&lt;br&gt;
üí¨ Leave a response to this article by providing your insights, comments or wishes for the next topic.&lt;br&gt;
üì¢ Share this article with your friends, colleagues on social media.&lt;br&gt;
‚ûï Follow me on dev.to or any other social media platform.&lt;br&gt;
‚≠ê Star the &lt;a href="https://github.com/mkobuolys/flutter-design-patterns"&gt;Github&lt;/a&gt; repository.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>oop</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build A Web Crawler To Find Any Broken Links on Your Site with Python &amp; BeautifulSoup</title>
      <author>Pratap Sharma</author>
      <pubDate>Mon, 31 May 2021 06:47:22 +0000</pubDate>
      <link>https://dev.to/pratap2210/build-a-web-crawler-to-find-any-broken-links-on-your-site-with-python-beautifulsoup-2kd7</link>
      <guid>https://dev.to/pratap2210/build-a-web-crawler-to-find-any-broken-links-on-your-site-with-python-beautifulsoup-2kd7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As we all know, almost every other click on the internet may end up in an&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Error 404: Page Not Found` page or error. `Whoops, the page you're looking for does not exist` `Sorry, the requested URL was not found on this server`, `Oops, something went wrong. Page not found.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;95% of internet user has probably seen pages like these.&lt;/p&gt;

&lt;p&gt;I think it's important that web developers consider paying less attention to building clever 404 pages and start eliminating broken links.&lt;/p&gt;

&lt;p&gt;Web developers these days build clever 404 pages and started eliminating broken links. Therefore, it is very important to look for broken links in your site and fix those links before your readers are affected by them.&lt;/p&gt;

&lt;p&gt;I've developed an automated script that will find broken links from the website.&lt;/p&gt;

&lt;p&gt;The script is written in Python 3, and it recursively follows links on any given site and checks each one for 404 errors. Once the script finished searching the entire site, it will open an HTML file in your browser and display all the broken links. Based on the output of the HTML file, you can ask your developer/yourself to fix the issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-beautifulsoup"&gt;
  &lt;/a&gt;
  What is BeautifulSoup?
&lt;/h2&gt;

&lt;p&gt;First of all, let us understand what Beautiful Soup is: It is a library written in Python. It is used to extracts data out of HTML and XML files. Beautiful Soup works well if a company or website owner wants to get data quickly and saves programmers a lot of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Make sure you have python installed.&lt;br&gt;
Follow &lt;a href="https://www.python.org/downloads/"&gt;Python download &lt;/a&gt; link to get python installed in your system.&lt;br&gt;
Also, set up a virtual environment using &lt;code&gt;python3&lt;/code&gt; for the app. To set up a virtual environment, you may run the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After creating a virtual environment, we need to activate the environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-script"&gt;
  &lt;/a&gt;
  The Script
&lt;/h2&gt;

&lt;p&gt;As Python Beautiful Soup is an external module, to start working on it, we need to install it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;bs4
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;requests
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let us create a file called &lt;code&gt;url-checker.py&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let us first import the required modules
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urljoin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Define our baseURL and FilePath where we want to save the html file
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;"https://pratapsharma.in"&lt;/span&gt;
&lt;span class="n"&gt;FILE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/Users/pratap/personal/utils/"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now let us save the searched links and broken links in a list of their own.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;searched_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;broken_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;A function that will return a list of urls from an &lt;strong&gt;HTML file&lt;/strong&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getLinksFromHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getLink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a[href]"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Finally, let us write a function which will run recursively.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_broken_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domainToSearch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parentURL&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;is_searchable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;searched_links&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mailto:"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"javascript:"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;".png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;".jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;".jpeg"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_searchable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;resetObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;searched_links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resetObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;broken_links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"parent_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;parentURL&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;'Home'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;resetObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reason&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;netloc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;domainToSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;getLinksFromHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resetObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                        &lt;span class="n"&gt;find_broken_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="n"&gt;domainToSearch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ERROR: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;searched_links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domainToSearch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Once the function is defined its time to call the function.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;find_broken_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;netloc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The script makes many internal HTTP &lt;strong&gt;requests&lt;/strong&gt;. So be aware of time taken the Internet usage rate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Now let us create a &lt;strong&gt;HTML file&lt;/strong&gt; and form the data using the &lt;code&gt;broken_links&lt;/code&gt; lists.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'broken-links.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;html&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'''
        &amp;lt;head&amp;gt;
            &amp;lt;style&amp;gt;
            table {{
                font-family: arial, sans-serif;
                border-collapse: collapse;
                width: 100%;
            }}

            td, th {{
                border: 1px solid #dddddd;
                text-align: left;
                padding: 8px;
            }}

            tr:nth-child(even) {{
                background-color: #dddddd;
            }}
            h2 {{
                text-align: center;
            }}
            &amp;lt;/style&amp;gt;
        &amp;lt;/head&amp;gt;
    '''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;body&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;h2&amp;gt;Broken links for site: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/h2&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;table&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;tbody&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;SN&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;URL&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Parent URL&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Message&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;broken_links&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;'&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;{0}&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; &amp;lt;a href="{1}" style="color:red;" target="_blank"&amp;gt;{1}&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; &amp;lt;a href="{2}" target="_blank"&amp;gt;{2}&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;{3}&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'parent_url'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;/tbody&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;/table&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;/body&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;/html&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Upon completition of the script we want to open the html file in the browser. To do so add the following lines in the code.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'chrome'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'file://&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FILE_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;broken-links.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script should open the &lt;strong&gt;HTML file&lt;/strong&gt; in the browser directly.&lt;/p&gt;

&lt;p&gt;It would look something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Gpkz2W3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijp7h7crwm0q0ysjuaw4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Gpkz2W3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijp7h7crwm0q0ysjuaw4.png" alt="Broken links Python"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-all-together"&gt;
  &lt;/a&gt;
  Adding all together
&lt;/h2&gt;

&lt;p&gt;The content of the file at the end should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urljoin&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webbrowser&lt;/span&gt;

&lt;span class="n"&gt;searched_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;broken_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;"https://pratapsharma.in"&lt;/span&gt;
&lt;span class="n"&gt;FILE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/Users/pratap/personal/utils/"&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Running script for &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; and saving the file to: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FILE_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;broken-links.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getLinksFromHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getLink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a[href]"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_broken_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domainToSearch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parentURL&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;is_searchable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;searched_links&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mailto:"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"javascript:"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".png"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".jpg"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".jpeg"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_searchable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;resetObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;searched_links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resetObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;broken_links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"parent_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;parentURL&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;'Home'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;resetObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reason&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;netloc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;domainToSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;getLinksFromHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resetObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                        &lt;span class="n"&gt;find_broken_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="n"&gt;domainToSearch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ERROR: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;searched_links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domainToSearch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;find_broken_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;netloc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Converting above errors to html file
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'broken-links.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;html&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'''
        &amp;lt;head&amp;gt;
            &amp;lt;style&amp;gt;
            table {{
                font-family: arial, sans-serif;
                border-collapse: collapse;
                width: 100%;
            }}

            td, th {{
                border: 1px solid #dddddd;
                text-align: left;
                padding: 8px;
            }}

            tr:nth-child(even) {{
                background-color: #dddddd;
            }}
            h2 {{
                text-align: center;
            }}
            &amp;lt;/style&amp;gt;
        &amp;lt;/head&amp;gt;
    '''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;body&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;h2&amp;gt;Broken links for site: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/h2&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;table&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;tbody&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;SN&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;URL&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Parent URL&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Message&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;broken_links&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;'&amp;lt;td&amp;gt;{0}&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; &amp;lt;a href="{1}" style="color:red;" target="_blank"&amp;gt;{1}&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; &amp;lt;a href="{2}" target="_blank"&amp;gt;{2}&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;{3}&amp;lt;/td&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'parent_url'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;/tbody&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;/table&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;/body&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;/html&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Selecting chrome as a browser and opening th html file in the browser
&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'chrome'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'file://&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FILE_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;broken-links.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Run-on command line with a website of your choice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python url-checker.py https://your_site.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you found the article helpful, as it certainly helped me find a few broken links on my site. Our small web crawler is done. I hope this article was good for you.&lt;/p&gt;

&lt;p&gt;üíå If you'd like to receive more tutorials in your inbox, you can sign up for the newsletter &lt;a href="https://pratap.substack.com"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please don't hesitate to drop a comment here if I miss anything. Also, let me know if I can make the post better.&lt;/p&gt;

</description>
      <category>python</category>
      <category>web</category>
      <category>crawler</category>
      <category>brokenlink</category>
    </item>
    <item>
      <title>Soft UI Dashboard - Bootstrap 5 FREE Django Template</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 31 May 2021 06:23:33 +0000</pubDate>
      <link>https://dev.to/sm0ke/soft-ui-dashboard-bootstrap-5-free-django-template-29dj</link>
      <guid>https://dev.to/sm0ke/soft-ui-dashboard-bootstrap-5-free-django-template-29dj</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This article presents a simple &lt;strong&gt;Django Template&lt;/strong&gt; that might help beginners to &lt;em&gt;learn by coding&lt;/em&gt; new features on top of an existing codebase enhanced with authentication, deployment script and a modern Bootstrap 5 design: &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt;. Product can be downloaded from Github and used for hobby &amp;amp; commercial project without restrictions (footer link, registration lock).  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://django-soft-ui-dashboard.appseed-srv1.com/"&gt;Soft UI Dashboard Django&lt;/a&gt; - LIVE demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/django-soft-ui-dashboard"&gt;Soft UI Dashboard Django&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/content/tutorials/minimal-programming-kit"&gt;Minimal Programming Kit&lt;/a&gt; - a short list with tools for beginners&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--prGoE__J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc21c449jmdtx366n49c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--prGoE__J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc21c449jmdtx366n49c.png" alt="Soft UI Dashboard - Open-source Django Starter."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Design Information - Designed for those who like bold elements and beautiful websites, &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; is made of hundred of elements, designed blocks and fully coded pages. This Bootstrap 5 design is built with over 70 frontend individual elements, like buttons, inputs, navbars, navtabs, cards or alerts, giving you the freedom of choosing and combing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://bit.ly/2Q1uIfK"&gt;Soft UI Dashboard&lt;/a&gt; - HTML Version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; developers and designers will save a lot of time going from prototyping to full-functional code, because all elements are implemented. This Free Bootstrap 5 Dashboard is coming with prebuilt design blocks, so the development process is seamless, switching from our pages to the real website is very easy to be done.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#django-codebase"&gt;
  &lt;/a&gt;
  Django Codebase
&lt;/h2&gt;

&lt;p&gt;The "app" version comes with database, authentication, ORM and deployment scripts for Docker. To compile the project locally, a &lt;a href="https://docs.appseed.us/content/tutorials/minimal-programming-kit"&gt;minimal programming kit&lt;/a&gt; is required with a few tools and libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A modern editor - &lt;strong&gt;VSCode&lt;/strong&gt; or &lt;strong&gt;Atom&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nodejs&lt;/strong&gt; - used in Javascript-based products and tools&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Python&lt;/strong&gt; - a modern script language used for many types of projects&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GIT&lt;/strong&gt; - a command-line tool used to download sources from Github&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once all the tools are installed, we can start the build and follow the instructions provided in the official &lt;a href="https://docs.appseed.us/products/django-dashboards/soft-ui-dashboard"&gt;docs&lt;/a&gt;:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the source code&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/django-soft-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-soft-ui-dashboard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install modules and dependencies&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Set up database and tables&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py makemigrations
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start the app&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il all goes well we should see this simple Django starter running in the browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7XXnFx9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqcw3iu6boejr7ig4u0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7XXnFx9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqcw3iu6boejr7ig4u0s.png" alt="Soft UI Dashboard - Django Template."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Soft UI Dashboard - User Profile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_BDuOOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4c40e2caimsindpkqv3x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_BDuOOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4c40e2caimsindpkqv3x.png" alt="Soft UI Dashboard - Profile Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources and support, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/admin-dashboards/django"&gt;Django Dashboards&lt;/a&gt; provided with same features&lt;/li&gt;
&lt;li&gt;For support join &lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>django</category>
      <category>python</category>
    </item>
  </channel>
</rss>
