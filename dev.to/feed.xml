<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My Experience with Frontendmentor.io Challenges - Part 1</title>
      <author>MidouWebDev</author>
      <pubDate>Wed, 21 Jul 2021 19:34:09 +0000</pubDate>
      <link>https://dev.to/midouwebdev/my-experience-with-frontendmentor-io-challenges-part-1-5fi5</link>
      <guid>https://dev.to/midouwebdev/my-experience-with-frontendmentor-io-challenges-part-1-5fi5</guid>
      <description>&lt;p&gt;Hey, i am MidouWebDev !&lt;/p&gt;

&lt;p&gt;Welcome to this serie where i share my experience with cloning &lt;a href="https://frontendmentor.io"&gt;Frontendmentor.io&lt;/a&gt; designs using HTML, CSS, JAVASCRIPT.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TMilbRxl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsjicc6err2rvxy4q5vl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TMilbRxl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsjicc6err2rvxy4q5vl.png" alt="Frontendmentor.io Home Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After i watched full HTML, CSS and JS courses on YouTube and after i heard that practicing is the key to perfectly learn and master web development. I started doing research about that and once i found this amazing platform, i logged in and started my first free and newbie challenge which was the &lt;a href="https://www.frontendmentor.io/challenges/ping-single-column-coming-soon-page-5cadd051fec04111f7b848da"&gt;Ping Coming Soon Page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2uhBQqHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ssa4g17dxbm2serhrwy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2uhBQqHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ssa4g17dxbm2serhrwy.jpg" alt="The Ping Coming Soon Page Challenge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was so easy to reproduce but i learned too much things that i will be talking about in the next post.&lt;/p&gt;

&lt;p&gt;You can find my Frontend Mentor Challenges Repository where i push my solutions &lt;a href="//https;//github.com/MidouWebDev/Frontend-Mentor-Challenges"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't forget to star it if you liked it üòâüôè&lt;/p&gt;

&lt;p&gt;Follow me on GitHub &lt;a href="https://github.com/MidouWebDev"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until now, i have worked on three challenges and i got the idea to start posting on DEV.TO about that. I will be sharing my experience with each challenge so stay tuned ! üòâüëã&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are your burning questions about all things AWS? Answer to be featured on our podcast üéß  </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Wed, 21 Jul 2021 19:15:19 +0000</pubDate>
      <link>https://dev.to/devteam/what-are-your-burning-questions-about-all-things-aws-answer-to-be-featured-on-our-podcast-52kc</link>
      <guid>https://dev.to/devteam/what-are-your-burning-questions-about-all-things-aws-answer-to-be-featured-on-our-podcast-52kc</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners ‚Äî and we like to feature the &lt;em&gt;actual&lt;/em&gt; voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-are-your-burning-questions-about-amazon-web-services-aws"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are your burning questions about Amazon Web Services (AWS)?&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message üìû&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; üéô&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) üó£&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Thursday, July 22nd at 1 PM, ET (5 PM UTC, 10 AM PT)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement üòâ
&lt;/h4&gt;

&lt;p&gt;Catch up on recent episodes of the show &lt;a href="https://dev.to/devdiscuss"&gt;here&lt;/a&gt;. The new season premieres soon üëÄ  &lt;/p&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
      <category>aws</category>
    </item>
    <item>
      <title>Sieve of Eratosthenes, What is it?</title>
      <author>Vishwa.R</author>
      <pubDate>Wed, 21 Jul 2021 18:52:40 +0000</pubDate>
      <link>https://dev.to/codereaper08/sieve-of-eratosthenes-what-is-it-2o3g</link>
      <guid>https://dev.to/codereaper08/sieve-of-eratosthenes-what-is-it-2o3g</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6z7NRcji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.famousmathematicians.net/photos/eratosthenes.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6z7NRcji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.famousmathematicians.net/photos/eratosthenes.jpg" alt="Eratosthenes"&gt;&lt;/a&gt;&lt;/p&gt;
Image source : famousmathematicians.net



&lt;h2&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Sieve of Eratosthenes&lt;/strong&gt; is an algorithm devised by the &lt;strong&gt;Eratosthenes of Cyrene&lt;/strong&gt;. It does the job of finding all the prime numbers within a given upper limit. This ancient algorithm is efficient and smart till the upper limit is a few billions. So we'll discuss the process and JavaScript code for the same, below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;p&gt;The algorithm starts with generating a list of all numbers starting from &lt;em&gt;2 to n&lt;/em&gt; (where &lt;strong&gt;n&lt;/strong&gt; is the upper limit), with the assumption of all the numbers in the list are prime. It starts from 2 and removes all the multiples of 2 in the list by traversing the list in the interval of 2.&lt;/p&gt;

&lt;p&gt;So, now we consider &lt;strong&gt;n&lt;/strong&gt; as 10&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sample_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Starting from 2, it removes the multiples of 2 by traversing the above list in a step count of 2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: '*' below means removed from list.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sample_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After removing all the multiples of 2, we move to the next non-removed number (that is 3), now from 3, we traverse the list with the step count of 3 and remove its multiples.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sample_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We then proceed to the next non-removed number, which is 5. But here's the thing, the multiples of 5 are already removed from the list. We just make sure when to end this cycle of traversal and removal by calculating the square of 5, that is 5*5 = 25, which is obviously greater than &lt;strong&gt;n&lt;/strong&gt; that is 10. So we stop the process and get the remaining elements, which are prime.&lt;/p&gt;

&lt;p&gt;Here's the final list we get,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sample_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Hurray!, we've done with the theory part, let's get our hands dirty with some JS to actually code it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5A2YaTVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2247gqevr4odteacp7gz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5A2YaTVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2247gqevr4odteacp7gz.png" alt="Hurray"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#execution-in-js"&gt;
  &lt;/a&gt;
  Execution in JS üíª
&lt;/h2&gt;

&lt;p&gt;Let's start by creating an empty array called &lt;code&gt;Boolarray&lt;/code&gt;, why naming 'Bool', because we are going for a Boolean array. We also initialize the value of &lt;strong&gt;n&lt;/strong&gt; as 20.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Boolarray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Remember, we first made an assumption that all the numbers in the list (here array) are prime. So we use &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;is prime&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; for &lt;code&gt;not a prime&lt;/code&gt;, with this in mind we first fill the empty array with boolean values of all &lt;code&gt;True&lt;/code&gt; (based on our assumption). We use a &lt;code&gt;for&lt;/code&gt; loop with iterator &lt;code&gt;i&lt;/code&gt; to iterate from 1 to n and fill the array with &lt;code&gt;True&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Boolarray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;Boolarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, we have an array of length 20 with &lt;code&gt;true&lt;/code&gt; on all indexes. We now follow the procedure of &lt;strong&gt;Sieve of Eratosthenes&lt;/strong&gt; by starting the &lt;code&gt;for&lt;/code&gt; with iterator &lt;code&gt;j&lt;/code&gt; from &lt;em&gt;2 to j*j&amp;lt;=n&lt;/em&gt; (j*j&amp;lt;=n checks when to end the looping). If the current element in the array is &lt;code&gt;true&lt;/code&gt;, we then loop over its multiples with iterator &lt;code&gt;k&lt;/code&gt;and a step count, (according to the current element) and mark them &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Boolarray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;Boolarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Boolarray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;Boolarray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After this execution, we are left with a Boolean array, which contains &lt;code&gt;true&lt;/code&gt; in places of prime (remember &lt;code&gt;true&lt;/code&gt; ‚Üí is prime) and &lt;code&gt;false&lt;/code&gt; in places of non-prime numbers in the array.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#now-its-all-logging-it-onto-the-console"&gt;
  &lt;/a&gt;
  Now it's all logging it onto the console üéâ
&lt;/h3&gt;

&lt;p&gt;We use another &lt;code&gt;for&lt;/code&gt; loop to iterate on &lt;code&gt;Boolarray&lt;/code&gt; with iterator &lt;code&gt;num&lt;/code&gt;, starting from &lt;em&gt;2 to num&amp;lt;=n&lt;/em&gt;. We console log only the &lt;code&gt;num&lt;/code&gt;'s which contains &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;Boolarray&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Boolarray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So, we end with this final code,&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;You can also use the JSFiddle, to change the hard-coded input &lt;code&gt;n&lt;/code&gt; to your wish.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#jsfiddle-link"&gt;
  &lt;/a&gt;
  &lt;a href="https://jsfiddle.net/Vishwa_R/t20acbsj/"&gt;JSFiddle link&lt;/a&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#attributions"&gt;
  &lt;/a&gt;
  Attributions:
&lt;/h3&gt;

&lt;p&gt;Cover-image : Photo by &lt;a href="https://unsplash.com/@jaanam9?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jaanam Haleem&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/mesh?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading ‚ú®
&lt;/h3&gt;

&lt;p&gt;Feel free to correct and give feedbacks. Like it?, then üíñ it.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>todayilearned</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Regex 101</title>
      <author>Shreyas Pahune</author>
      <pubDate>Wed, 21 Jul 2021 18:01:56 +0000</pubDate>
      <link>https://dev.to/shreyazz/regex-101-2m7m</link>
      <guid>https://dev.to/shreyazz/regex-101-2m7m</guid>
      <description>&lt;p&gt;Hey readers üëãüèª, in this blog we are going to talk about &lt;code&gt;Regular Expressions&lt;/code&gt; or we can also call it &lt;code&gt;REGEX&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;code&gt;REGEX&lt;/code&gt; is sequence of characters which are in a certain patter, and these patterns help us &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;find and replace&lt;/code&gt; or &lt;code&gt;validate&lt;/code&gt; things like  &lt;code&gt;email, passwords and usernames&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-learning-%E2%80%8D%F0%9F%8F%8D"&gt;
  &lt;/a&gt;
  Let's start learning üê±‚Äçüèç:
&lt;/h2&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basics-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Basics :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The most easy way to explain &lt;code&gt;regex&lt;/code&gt; with an example is if:&lt;/p&gt;

&lt;p&gt;we want to search the word &lt;code&gt;JavaScript&lt;/code&gt; in a string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xi39cAGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm1pbxe8mptm9v1uj2z5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xi39cAGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm1pbxe8mptm9v1uj2z5.png" alt="first"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now this example is very basic but believe me &lt;code&gt;REGEX&lt;/code&gt; has lots and lots of use-cases.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-possible-characters-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Multiple Possible Characters :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Let's see an example where you want to see if the string contains many possibilities for example if you want to search for &lt;code&gt;dog&lt;/code&gt; or &lt;code&gt;cat&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;We can do this by using  &lt;code&gt;|&lt;/code&gt; the &lt;code&gt;OR&lt;/code&gt; sign.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3K-mzszf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdqipdsne87yr860ejim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3K-mzszf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdqipdsne87yr860ejim.png" alt="second"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here if the &lt;code&gt;petString&lt;/code&gt; would contain &lt;code&gt;Shreyas loves JavaScript&lt;/code&gt; then the output would have been &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To be clear, the REGEX patterns are case sensitive, so if a string would contain &lt;code&gt;shreyas&lt;/code&gt; and I search for &lt;code&gt;ShreyaS&lt;/code&gt; then the output would be &lt;code&gt;false&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-sensitiveness-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Case Sensitiveness :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;What should we do when we are not sure about the case... No worries! We can make our REGEX Pattern ignore the case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrXu2hQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c93agu0yjurjyxupkafn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrXu2hQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c93agu0yjurjyxupkafn.png" alt="three"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see we have used &lt;code&gt;i&lt;/code&gt; in &lt;code&gt;regex1&lt;/code&gt;, and there are many such flags which gives us a lot of control over the pattern.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;i&lt;/code&gt; stands for &lt;code&gt;irrespective of the case&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here we are using &lt;code&gt;.test()&lt;/code&gt; method, which is an inbuilt method in JavaScript, which returns true or false according to the pattern entered.&lt;/p&gt;

&lt;p&gt;The Syntax is &lt;code&gt;pattern.test(String-which-has-to-be-tested)&lt;/code&gt; . &lt;br&gt;
¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-searching-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Global Searching :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.test()&lt;/code&gt; has a draw back, which is that it only returns true or false, and if true it does not tell us how many times the pattern was matched, so to back this drawback, JS has another inbuilt method called as &lt;code&gt;.match()&lt;/code&gt; which let's us know how many times the pattern is matched in the string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.match()&lt;/code&gt; return an array of results which have successfully matched the pattern, and the array's length is the time the pattern was recognized.&lt;/p&gt;

&lt;p&gt;Let me show an example üëáüèª:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_-5lzlGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j1ti5rxlxxjh458ylaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_-5lzlGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j1ti5rxlxxjh458ylaj.png" alt="four"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see the syntax of &lt;code&gt;.match()&lt;/code&gt; is a little bit different when compared to &lt;code&gt;.test()&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;.match()&lt;/code&gt; 's syntax is :  &lt;code&gt;string.match(regex-pattern);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Also you can see that I have used another flag, which is &lt;code&gt;g&lt;/code&gt; and it stands for &lt;code&gt;global&lt;/code&gt;, which helps us find the perfect match globally in the string.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find-group-of-letters-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Find Group of Letters :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We can group many letters together to find them inside a string. REGEX gives us flexibility with &lt;code&gt;Character Classes&lt;/code&gt;, these allow us to define a group of characters and they have to be enclosed in &lt;code&gt;[  ]&lt;/code&gt; (Square Brackets) .&lt;/p&gt;

&lt;p&gt;It will be more clear when you see an example.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;We have to find every vowel inside a string.&lt;/code&gt; üëáüèª&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cDwp7w5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rxcqgdgavjuu5cgqjr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cDwp7w5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rxcqgdgavjuu5cgqjr1.png" alt="five"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The pattern has 2 flags, which are non case sensitive and to check globally in the string. &lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;[aeiou]&lt;/code&gt; vowels are grouped together and are individually searched in the string.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match-anything-using-wildcard-period-dot-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Match anything using Wildcard  period / dot :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Some times we just have to search for words which end with some certain letters or which start from some certain letters. To do so, we have wildcard period which is basically a &lt;code&gt;.&lt;/code&gt; period/dot. &lt;/p&gt;

&lt;p&gt;If we have to match words which end with the letters &lt;code&gt;un&lt;/code&gt; . For example &lt;code&gt;fun&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;sun&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;For that we have üëáüèª&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3PrivZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfb5az0vfcc9u2z1ygkk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x3PrivZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfb5az0vfcc9u2z1ygkk.png" alt="six"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pattern will check for any word ending with un and it will do it irrespective of the case(&lt;code&gt;i&lt;/code&gt; flag) and would search in the whole string (&lt;code&gt;g&lt;/code&gt; flag).&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#range-of-characters-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Range of Characters :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We can also provide a range of characters to check from.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hfj8hYEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cuap54wk9u9bf1jasg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hfj8hYEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cuap54wk9u9bf1jasg9.png" alt="seven"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Example: If you are sure that there are possibilities that the word may start with any character but the ending will be with the letters &lt;code&gt;at&lt;/code&gt; , then we can give a range of characters which will check the string and if matched then return an array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;If no value is found, NULL would be returned!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match-numbers-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Match Numbers :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;What if, you wanna match numbers?? Don't worry REGEX has got you covered!&lt;/p&gt;

&lt;p&gt;Just like characters we can write &lt;code&gt;/[0-9]/g&lt;/code&gt;, that's it, all the numbers are covered.&lt;/p&gt;

&lt;p&gt;But as we all know, us developers...we are lazy üí§! So why to write &lt;code&gt;/[0-9]/&lt;/code&gt; when you can also write &lt;code&gt;/[\d]/g&lt;/code&gt; and this &lt;code&gt;d&lt;/code&gt; stands for digits!&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match-number-and-characters-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Match Number and Characters :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To match number and characters, we can write üëáüèª&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RchBgMUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69f62zyfg14i9chdwnyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RchBgMUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69f62zyfg14i9chdwnyy.png" alt="eight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But isn't this REGEX Pattern too long?? We have a shorthand for this, which is &lt;code&gt;/\w/g&lt;/code&gt; and instead of the whole REGEX pattern you can just write the shorthand.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-for-minimum-and-maximum-characters-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Check for Minimum and Maximum Characters   :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We  can set a min and a max amount of characters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--toP-SoYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za8lmn75jgca1evfa5qx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--toP-SoYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za8lmn75jgca1evfa5qx.png" alt="nine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This REGEX pattern allows only those strings which have equal or greater length then 5 and are under or equal to 10.&lt;/p&gt;

&lt;p&gt;The syntax for that is &lt;code&gt;/[regex here]{min-number, max-number}/g&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#challenge-"&gt;
  &lt;/a&gt;
  Challenge üéØ:
&lt;/h2&gt;

&lt;p&gt;I wanna give a quick challenge to all the readers, why don't you make a REGEX which verifies usernames, and the conditions are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Username should have numbers.&lt;/li&gt;
&lt;li&gt;Username can have an underscore.&lt;/li&gt;
&lt;li&gt;Username should not have any special characters. &lt;/li&gt;
&lt;li&gt;Username should have minimum 5 characters and maximum 15 characters. &lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Thank you so much for reading the whole blog üéâ, if you liked it do share it with your friends and implement REGEX in your upcoming projects! It has saved me from writing lots of line of code and a lot of time too, I am sure it will be very effective for you too!&lt;/p&gt;

&lt;p&gt;Till the next blog... Goodbye üëãüèª !!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Digger.dev: A new kind of PaaS</title>
      <author>Igor Zalutski</author>
      <pubDate>Wed, 21 Jul 2021 17:57:36 +0000</pubDate>
      <link>https://dev.to/zij/digger-dev-a-new-kind-of-paas-2dk</link>
      <guid>https://dev.to/zij/digger-dev-a-new-kind-of-paas-2dk</guid>
      <description>&lt;p&gt;&lt;a href="https://news.ycombinator.com/show"&gt;We've just launched on HackerNews&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Say you want to deploy a Node app. Or a Python app. Or a Rails app. And maybe one or two React or Vue frontends as well. Oh and a database too.&lt;/p&gt;

&lt;p&gt;You have 2 options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Traditional PaaS like Heroku. Going to be quick and easy. But also expensive and you can't build much beyond the very basics.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS or GCP or Azure. That's going to be hard and slow, unless you have DevOps expertise. But with over 200 services you can build pretty much anything.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Why isn't there an easy way to start on AWS without spending days figuring it out? We thought so as well, and built Digger.dev&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digger-makes-aws-simple"&gt;
  &lt;/a&gt;
  Digger makes AWS simple
&lt;/h2&gt;

&lt;p&gt;It automatically generates infrastructure for your code in your AWS account. So you can build on AWS without having to deal with its complexity. See How it works&lt;/p&gt;

&lt;p&gt;You can launch in minutes ‚Äì no need to build from scratch, or even think of infrastructure at all&lt;/p&gt;

&lt;p&gt;‚úÖ Easy to use Web UI + powerful CLI&lt;br&gt;
‚úÖ Deploy webapps, serverless functions and databases: just connect GitHub repositories&lt;br&gt;
‚úÖ Multiple environments: replicate your entire stack in a few clicks. Dev / staging / production; short-lived for testing; per-customer&lt;br&gt;
‚úÖ Zero-configuration CI with GitOps: pick a branch for each environment and your services will be deployed on every git push&lt;br&gt;
‚úÖ Logs, environment variables, secrets, domains: never touch AWS again!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-paas-that-generates-terraform"&gt;
  &lt;/a&gt;
  A PaaS that generates Terraform
&lt;/h2&gt;

&lt;p&gt;... So that you keep the full power of AWS&lt;/p&gt;

&lt;p&gt;Traditional platforms-as-a-service (PaaS) like Heroku or Vercel run your code on their servers. Digger takes a different approach: it generates infrastructure-as-code (Terraform) that manages your AWS account. See Digger vs Ohter&lt;/p&gt;

&lt;p&gt;This removes the main limitation of traditional PaaS. With Digger you can have great modern developer experience and get a future-proof stack at the same time. Terraform is industry standard for all things DevOps; with Digger you can customise every bit. You can even use your own bespoke templates with Digger. So unlike traditional PaaS, you never outgrow Digger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-think"&gt;
  &lt;/a&gt;
  What do you think?
&lt;/h2&gt;

&lt;p&gt;We've just launched and super hungry for feedback. &lt;a href="https://digger.dev"&gt;Try it out&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>aws</category>
      <category>devops</category>
    </item>
    <item>
      <title>tmux select-layout</title>
      <author>Waylon Walker</author>
      <pubDate>Wed, 21 Jul 2021 17:48:24 +0000</pubDate>
      <link>https://dev.to/waylonwalker/tmux-select-layout-2m3m</link>
      <guid>https://dev.to/waylonwalker/tmux-select-layout-2m3m</guid>
      <description>&lt;p&gt;When you get many splits going in tmux sometimes its time for a new layout.&lt;br&gt;
There are four layout strategies that I use, main-vertical, main-horizontal,&lt;br&gt;
even-vertical, even-horizontal. Almost always I am useing the main ones with&lt;br&gt;
mod plus a or mod plus shift a keybindings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Select Layouts&lt;/span&gt;
&lt;span class="c"&gt;#‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-a &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="nt"&gt;-layout&lt;/span&gt; main-vertical
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-A &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="nt"&gt;-layout&lt;/span&gt; main-horizontal 
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-E &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="nt"&gt;-layout&lt;/span&gt; even-vertical
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-V &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="nt"&gt;-layout&lt;/span&gt; even-horizontal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;Be sure to check out the full youtube playlist and subscribe if you like it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6Bkr"&gt;https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6Bkr&lt;/a&gt;&lt;/p&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/waylonwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ukb2PhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Izxe95PY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/271838/95e313ca-39fc-4ee6-bf57-ad52b4dcf0d2.png" alt="waylonwalker"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/waylonwalker/how-i-navigate-tmux-in-2021-2ina" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I navigate tmux in 2021&lt;/h2&gt;
      &lt;h3&gt;Waylon Walker „Éª May 12 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bash&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Also check out this long form post for more about how I use tmux.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>cli</category>
      <category>linux</category>
      <category>tmux</category>
    </item>
    <item>
      <title>I created 8 free dashboard templates built with Tailwind for React, Next, Vue and Nuxt.</title>
      <author>enoch ndika</author>
      <pubDate>Wed, 21 Jul 2021 17:48:17 +0000</pubDate>
      <link>https://dev.to/enochndika/i-created-8-free-dashboard-templates-built-with-tailwind-for-react-next-vue-and-nuxt-3d69</link>
      <guid>https://dev.to/enochndika/i-created-8-free-dashboard-templates-built-with-tailwind-for-react-next-vue-and-nuxt-3d69</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xHIvOQBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajn6mcas324qyhlszyrc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHIvOQBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajn6mcas324qyhlszyrc.jpg" alt="Salvia-kit dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;By creating several dashboards for my professional use, I ended up with several dashboard templates. So I decided to make it open source because it would motivate me to create even more dashboards.&lt;/p&gt;

&lt;p&gt;At the beginning I wanted to make them only for React but with time I was motivated to make them for &lt;strong&gt;Next.js&lt;/strong&gt;, &lt;strong&gt;Vue.js&lt;/strong&gt; and &lt;strong&gt;Nuxt&lt;/strong&gt; to reach more developers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presentation"&gt;
  &lt;/a&gt;
  Presentation
&lt;/h2&gt;

&lt;p&gt;I made a total of 8 dashboards and each dashboard has 4 templates.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;React&lt;/strong&gt; template&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Next.js&lt;/strong&gt; template&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Vue&lt;/strong&gt; template&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nuxt.js&lt;/strong&gt; template&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;i took advantage of Tailwind's flexibility to create free premium dashboard templates.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support of the active route (styled by default).&lt;/li&gt;
&lt;li&gt;Fully customizable and without external dependencies.&lt;/li&gt;
&lt;li&gt;No vendor lock-in, you can export it and integrate it in your project.&lt;/li&gt;
&lt;li&gt;Sidenav aligned left or right according to your preferences (on mobile).&lt;/li&gt;
&lt;li&gt;A detailled documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#no-vendor-lockin"&gt;
  &lt;/a&gt;
  No vendor lock-in
&lt;/h2&gt;

&lt;p&gt;Salvia-kit is created to solve a problem I often encountered when using dashboards owned by third party developers or companies. that is vendor lock-in.&lt;/p&gt;

&lt;p&gt;These dashboards often contained many configurations with several scripts, which still did not allow to export them and integrate them easily into an existing project. Therefore, it was always necessary to use the repository provided by the owner of the dashboard.&lt;/p&gt;

&lt;p&gt;This is what motivated me to create dashboards that can be easily integrated into existing projects with simple, readable code and documentation designed for developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h2&gt;

&lt;p&gt;As English is not my native language, I can make some grammatical mistakes while writing all the 33 repositories. You can fix that by contributing to improve content.&lt;/p&gt;

&lt;p&gt;If You'd like to add a new dashboard, please check out the &lt;strong&gt;&lt;a href="https://github.com/salvia-kit/salvia-kit-website/blob/main/contributing.md"&gt;Contribution Guide&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  Acknowledgements
&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href="https://vercel.com/?utm_source=salvia-kit&amp;amp;utm_campaign=oss"&gt;&lt;strong&gt;Vercel&lt;/strong&gt;&lt;/a&gt; for sponsoring this project by allowing it to be deployed for free for the entire Salvia-kit Team.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tailwindcss</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to easily add particles, confetti or fireworks effects to a Solid.js application</title>
      <author>Matteo Bruni</author>
      <pubDate>Wed, 21 Jul 2021 17:43:52 +0000</pubDate>
      <link>https://dev.to/matteobruni/how-to-easily-add-particles-confetti-or-fireworks-effects-to-a-solid-js-application-32l2</link>
      <guid>https://dev.to/matteobruni/how-to-easily-add-particles-confetti-or-fireworks-effects-to-a-solid-js-application-32l2</guid>
      <description>&lt;p&gt;&lt;a href="https://particles.js.org"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OiGBTPsp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://particles.js.org/images/banner2.png" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#solidjs-particles-raw-solidparticles-endraw-"&gt;
  &lt;/a&gt;
  Solid.js Particles (&lt;code&gt;solid-particles&lt;/code&gt;)
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/solid-particles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxAJeqYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/solid-particles" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/solid-particles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Th4BjnqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/solid-particles" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official &lt;a href="https://github.com/matteobruni/tsparticles"&gt;tsParticles&lt;/a&gt; Solid.js component&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-just-want-code-sample"&gt;
  &lt;/a&gt;
  I just want code sample
&lt;/h2&gt;

&lt;p&gt;Here the working sample, without any additional text, if someone wants just to see it working and experiment with the code&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/condescending-dan-7e0r9"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now let's see how to achieve this&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;solid-particles solid-js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add solid-particles solid-js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Remote url&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;solid-particles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Particles&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;fullScreen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Options object&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;solid-particles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;particlesInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;particlesInit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;particlesLoaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;particlesLoaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;particlesInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// you can initialize the tsParticles instance (main) here, adding custom shapes or presets&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;particlesLoaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Particles&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;particlesInit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;loaded&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;particlesLoaded&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#0d47a1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;fpsLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;interactivity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;detectsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;push&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="na"&gt;onHover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;repulse&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="na"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;modes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;bubble&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="na"&gt;repulse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;particles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffffff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffffff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;collisions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;move&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;outMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bounce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;random&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;straight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;density&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;value_area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;random&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;detectRetina&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#props"&gt;
  &lt;/a&gt;
  Props
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Prop&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;width&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The width of the canvas.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;height&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The height of the canvas.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;options&lt;/td&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;The options of the particles instance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;url&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The remote options url, called using an AJAX request&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;style&lt;/td&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;The style of the canvas element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;className&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The class name of the canvas wrapper.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;canvasClassName&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;the class name of the canvas.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container&lt;/td&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;The instance of the &lt;a href="https://particles.js.org/docs/modules/_core_container_.html"&gt;particles container&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;init&lt;/td&gt;
&lt;td&gt;function&lt;/td&gt;
&lt;td&gt;This function is called after the tsParticles instance initialization, the instance is the parameter and you can load custom presets or shapes here&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;loaded&lt;/td&gt;
&lt;td&gt;function&lt;/td&gt;
&lt;td&gt;This function is called when particles are correctly loaded in canvas, the current container is the parameter and you can customize it here&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Find your parameters configuration &lt;a href="https://particles.js.org"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demos"&gt;
  &lt;/a&gt;
  Demos
&lt;/h2&gt;

&lt;p&gt;You can see the official sample created using CodeSandbox &lt;a href="https://codesandbox.io/s/condescending-dan-7e0r9"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The demo website is &lt;a href="https://particles.js.org"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://particles.js.org"&gt;https://particles.js.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's also a CodePen collection actively maintained and updated &lt;a href="https://codepen.io/collection/DPOage"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/collection/DPOage"&gt;https://codepen.io/collection/DPOage&lt;/a&gt;&lt;/p&gt;

</description>
      <category>solidjs</category>
      <category>tutorial</category>
      <category>showdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>From developer to (solutions) architect.  A simple guide.</title>
      <author>Natalia Venditto</author>
      <pubDate>Wed, 21 Jul 2021 17:36:54 +0000</pubDate>
      <link>https://dev.to/this-is-learning/from-developer-to-solutions-architect-a-simple-guide-2b91</link>
      <guid>https://dev.to/this-is-learning/from-developer-to-solutions-architect-a-simple-guide-2b91</guid>
      <description>&lt;p&gt;So you don't have formal CS education and have been doing development for some years, or you are a junior but your manager has already asked you where do you see yourself in tech in a few years. You want to become an Architect, but you are not sure of what it takes and you want to have a better idea of what you should focus on. You want to understand where are your technical gaps and what soft skills are required. This article is for you!&lt;/p&gt;

&lt;p&gt;Architect is an umbrella term to designate a role that is focused on either designing or refining software solutions for the benefit of the customer. But it has different accountabilities, depending on the organization you work for. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presales-solutions-architects"&gt;
  &lt;/a&gt;
  Pre-Sales Solutions Architects
&lt;/h2&gt;

&lt;p&gt;Pre-Sales Solutions Architects can also be called Customer Engineers or Sales Engineers, and are usually focused in making sure a technology they represent fits a customer's use case and their required capabilities, while they help them design a system to integrate it, or give pointers about the best application of it. They'll work on high-level diagrams, do discovery, work in scoping, and give support to Sales reps during technical alignments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#postsales-solutions-architects"&gt;
  &lt;/a&gt;
  Post-Sales Solutions Architects
&lt;/h2&gt;

&lt;p&gt;Some of the pre-sales Architects, also do post sales, meaning that after you're done with the sales process, and a deal is closed, you focus in helping with the actual implementation. They may just design the systems at a high level and overview the implementation, or be very hands on, and execute it together with the technical implementation team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#software-architects"&gt;
  &lt;/a&gt;
  Software Architects
&lt;/h2&gt;

&lt;p&gt;Software Architect is a very hands on role, architecting anf oftentimes implementing a software solution. Software Architects are an equivalent of the Post-Sales, usually for a product or specific technology. Software Architects are not necessarily customer facing.&lt;/p&gt;

&lt;p&gt;Again, it's important to clarify that the designation and accountabilities for each role, may vary across the industry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-technical-common-ground"&gt;
  &lt;/a&gt;
  The technical common ground
&lt;/h2&gt;

&lt;p&gt;No matter what type of architect, the common ground is the technical one. Architects are technical by nature, from a perspective that allows them to connect tech specifications to complex security requirements, governance nuances and privacy compliance and sovereignty, and legal liabilities. They are not concerned with the nitty-gritty details of the implementation, rather the big picture. Deployment pipelines, layers of the stack, performance at a system level, user management, locality, infrastructure components...those are the things that really interest and occupy an architect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process-phases-a-solutions-architect-participates-of"&gt;
  &lt;/a&gt;
  Process phases a Solutions Architect participates of
&lt;/h2&gt;

&lt;p&gt;I work now in the role of Solutions Architect, and will focus on this particular dimension, since Software Architects are involved in processes pertaining the software development cycle, which is much more complex to describe.&lt;/p&gt;

&lt;p&gt;Solutions Architects are usually a customer facing role and participate of and are instrumental to a lot of conversations with them. Their main goal is to discover and scope a system's requirements and/or current technical state as much as drafting the desired state and deciding or advising on the most ideal solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#discovery"&gt;
  &lt;/a&gt;
  Discovery
&lt;/h3&gt;

&lt;p&gt;SA's (acronym for Solutions Architect) participate of discovery. These are the early stages of conversation with a client, where many questions are asked. An SA needs to understand everything about their client, their product or project, their goals, their problems, so they can map those to tangible solution suggestions.&lt;/p&gt;

&lt;p&gt;The most important skills at a discovery meeting are not technical: Solutions Architects need to be able to &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;listen more than talk&lt;/li&gt;
&lt;li&gt;make good assumptions and validate them with the client&lt;/li&gt;
&lt;li&gt;do not propose a solution ahead of understanding well all the problems and requirements&lt;/li&gt;
&lt;li&gt;be very objective&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contrary to what many people think, even those architects that represent a brand, are unlikely to push for a biased solution if they assess that's not what the client needs. Not only your reputation is at stake, most architects pride themselves in promoting the foundations of a solid system&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#foundations-of-a-solid-system"&gt;
  &lt;/a&gt;
  Foundations of a solid system
&lt;/h4&gt;

&lt;p&gt;Solid, well designed systems share certain identical features. They all aim to be scalable, robust, resilient, recoverable and secure, among other important characteristics. Architects also want their systems to be highly available and sometimes they have requirements for them to be globally distributed, which is less of a problem today when global provisioning is guaranteed in the cloud. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scoping"&gt;
  &lt;/a&gt;
  Scoping
&lt;/h3&gt;

&lt;p&gt;Requirements are the documented capabilities used to measure a systems success, according to whether or not they're satisfied. They usually map to those foundational concepts. Like for example, it may be a requirement for the system to have an uptime of a certain percentage (usually 99.995% for mission critical applications, which is about 4s downtime daily - you can calculate that SLA here &lt;a href="https://uptime.is/"&gt;https://uptime.is/&lt;/a&gt;). That requirement maps to &lt;code&gt;High Availability&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The process of putting requirements and capabilities in scope, is also done by the architect, and usually (technically) validated by the customer with business objectives in mind, at some point. Backlogs are oftentimes the result of generating user stories and functional requirements directly from the scoping exercise, together with the validation and priorization of capabilities, towards a release. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-technologies-should-i-focus-on"&gt;
  &lt;/a&gt;
  What technologies should I focus on?
&lt;/h2&gt;

&lt;p&gt;That is a difficult question to answer, since it will very much depend on the type of system a software or solutions architect is designing or assessing, the technologies may vary greatly. I will focus on describing a list of technologies and areas of expertise you may want to check out, if your goal is to become an architect working in web oriented solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-cloud-landscape"&gt;
  &lt;/a&gt;
  The cloud landscape
&lt;/h3&gt;

&lt;p&gt;This is not to say there aren't architects still working on premise in self managed environments, but if you're planning to join the forces, you probably want to have an idea of who are the 3 public cloud providers (&lt;a href="https://aws.amazon.com/"&gt;AWS&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-gb/"&gt;Azure&lt;/a&gt; and &lt;a href="https://console.cloud.google.com/"&gt;GCP&lt;/a&gt;), and their offering and topology. &lt;/p&gt;

&lt;p&gt;You may also want to learn about cloud-native technologies, and explore what's hot and trending.&lt;/p&gt;

&lt;p&gt;Additionally it's very useful to know certain jargon and how some mechanisms work in the cloud. Concepts like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what is a &lt;a href="https://www.capitalone.com/tech/cloud/what-is-a-cluster/"&gt;cluster&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.delltechnologies.com/en-us/blog/the-difference-between-scale-up-and-scale-out/"&gt;scaling out vs. scaling up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;what are &lt;a href="https://www.confluent.io/learn/distributed-systems/"&gt;distributed systems&lt;/a&gt; and how they work&lt;/li&gt;
&lt;li&gt;what are the &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/caching"&gt;caching mechanisms&lt;/a&gt; and the best practices in the cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#infrastructure-and-infrastructure-provisioning"&gt;
  &lt;/a&gt;
  Infrastructure and infrastructure provisioning
&lt;/h3&gt;

&lt;p&gt;Provisioning infrastructure is not really the architect domain and it is usually done by the system engineers, Ops or other roles (the name may vary, depending on the organization). However, architects may have to validate or analyse the deployment pipelines and infrastructure setup before it is executed or afterward, for several reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;costs assessment&lt;/li&gt;
&lt;li&gt;compliance with architecture definitions (security, performance, technology definitions, etc)&lt;/li&gt;
&lt;li&gt;risk evaluation&lt;/li&gt;
&lt;li&gt;reconfiguration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although infrastructure provisioning, especially in the cloud, is provider dependent, there are some concepts you need to know and understand.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#networking"&gt;
  &lt;/a&gt;
  Networking
&lt;/h4&gt;

&lt;p&gt;You will need to understand well how the internet works and all the layers involved. Some important concepts and focus areas would be&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the Networking Layer Model per type (TCP/IP, vLab, ISO/OSI)&lt;/li&gt;
&lt;li&gt;TCP/UDP/HTTP Protocols&lt;/li&gt;
&lt;li&gt;SSL and other Networking Security concepts (Firewalls, Keys, VPN's, VPC, Private Link, Network Peering, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A book I definitely recommend to read to catchup with a lot of these concepts, is &lt;a href="https://www.pearson.com/us/higher-education/program/Kurose-Computer-Networking-A-Top-Down-Approach-7th-Edition/PGM1101673.html"&gt;Computer Networking, a Top-Down Approach&lt;/a&gt; I had to read it when I was taking credits in Software Engineering, and it's one of the best books on the subject.&lt;/p&gt;

&lt;p&gt;I also recommend you download and install &lt;a href="https://www.wireshark.org/"&gt;Wireshark&lt;/a&gt; for packet sniffing or TCP analysis, to learn more about segments, headers, and other networking concepts. There are more sophisticated tools, but this one is great to get going. It's open source, free and a consolidated tool.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hardware"&gt;
  &lt;/a&gt;
  Hardware
&lt;/h4&gt;

&lt;p&gt;Yes, you need to know about hardware. This is particularly important at the time of deciding on infrastructure configuration and if you detect performance issues and must scale up or down/out or in and system, to decide on the specifications. Concepts like &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CPU, (disk) SDD and HDD, (memory) RAM(√∏)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quostar.com/blog/iops-explained/"&gt;IOPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.zdnet.com/article/commonly-used-raid-architectures/"&gt;RAID&lt;/a&gt; architecture&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.cloudflare.com/en-gb/learning/network-layer/what-is-a-computer-port/"&gt;ports&lt;/a&gt; -very important for hexagonal architectures-&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and concepts like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;big and little &lt;a href="https://www.freecodecamp.org/news/what-is-endianness-big-endian-vs-little-endian/"&gt;endianness&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unless you actually work at a data center and walk in between racks, you probably don't need to know about other components like power supplies. Just the necessary specifications to match a software requirement. Although I always advise that the more you know, the better! But you also need to know about: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;operating systems(√∏)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://azure.microsoft.com/en-us/overview/what-is-virtualization/"&gt;virtualization&lt;/a&gt; (most servers are actually virtual machines on top of physical servers)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ibm.com/cloud/learn/containerization"&gt;containerization&lt;/a&gt; and containerization and orchestration software (like &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; and &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(√∏)I am not going to provide links to content about physical components of computers because there are way too many sources, and you only need to run a quick google search and pick the one that interests you the most.&lt;/p&gt;

&lt;p&gt;One important piece of advise I can give you, is that whatever operating system you love the most, you probably need to be familiar with Unix and Unix-like systems and architectures, and be proficient in the use of the &lt;a href="https://www.unixtutorial.org/basic-unix-commands"&gt;shell&lt;/a&gt; since it's the preferred means of executing code remotely, deploying packages and code and accessing systems. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#databases"&gt;
  &lt;/a&gt;
  Databases
&lt;/h4&gt;

&lt;p&gt;The task of storing and manipulating data becomes more and more important, as applications are more and more user-centric. Storing data is not only about the software used for it. It's a key part of the success of an application. And architects need to be well aware of the&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;different &lt;a href="https://ecomputernotes.com/fundamental/what-is-a-database/type-of-data-models"&gt;data models&lt;/a&gt; and database architecture&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/nosql-explained/nosql-vs-sql"&gt;tabular vs document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/nosql/graph/"&gt;graph databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;physical requirements of the database software&lt;/li&gt;
&lt;li&gt;limitations of certain models in relation to scalability&lt;/li&gt;
&lt;li&gt;security implications of data flows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You probably want to investigate what product corresponds to what provider, and want to learn concepts like &lt;a href="https://www.techopedia.com/definition/16455/transaction-databases"&gt;transactions and ACID compliance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may think I'm biased, but I recommend you head to the MongoDB free learning platform aka &lt;a href="https://university.mongodb.com/"&gt;MonogDB University&lt;/a&gt;, where there are tons of information on all those subjects, and a lot of it is -contrary to what many may think- very objective.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#architecture-models"&gt;
  &lt;/a&gt;
  Architecture models
&lt;/h4&gt;

&lt;p&gt;Well obviously, an architect needs to know about architecture! And architecture is an evolving and dynamic ground! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://microservices.io/"&gt;microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dzone.com/articles/hexagonal-architecture-what-is-it-and-how-does-it"&gt;hexagonal architectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;monoliths&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/event-driven"&gt;event-driven&lt;/a&gt; architecture&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.martinfowler.com/articles/serverless.html"&gt;serverless&lt;/a&gt; architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You need to know those concepts by heart and when they're the approach to follow. I am inclined to think that a good architect, just like a good developer, is never biased, and will try to find the right solution to a problem, instead of finding a problem to implement a preferred solution.&lt;/p&gt;

&lt;p&gt;All those paradigms have software and technologies associated, that you may want to explore and experiment with. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;docker (containerization/virtualization)&lt;/li&gt;
&lt;li&gt;kubernetes (orchestration/management of containers)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kafka.apache.org/"&gt;kafka&lt;/a&gt; (event-streaming platform)&lt;/li&gt;
&lt;li&gt;serverless functions (very much provider dependent, are a way to execute functions on triggers and avoid large backend implemetations)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Needless to say that the many providers will have tools and connectors, modules and best practices or guidelines, to implement each different type of pattern according to their infrastructure architecture and offering.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deployment-pipelines-and-release-models"&gt;
  &lt;/a&gt;
  Deployment pipelines and release models
&lt;/h4&gt;

&lt;p&gt;Architects are usually in charge of designing deployment pipelines, that tend to depend on the application release model. If you are working with a continuous integration pattern, you'll probably have to support it with CI/CD automation tools. And the following concepts should be familiar to you&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Actions&lt;/li&gt;
&lt;li&gt;Triggers/Events&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/cloud-native/infrastructure-as-code"&gt;Infra as code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;together with relevant software (again, options may be conditioned by the cloud provider choice)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://circleci.com/docker/?utm_medium=sem&amp;amp;utm_source=microsoft&amp;amp;utm_campaign=sem-microsoft-dg--emea-en-circleciBuildDeployEnviron-eCPC-auth-nb&amp;amp;utm_content=keyword-text_rsa-exact_docker-&amp;amp;msclkid=a0fbd75708d018c80cceb7af26c0bf57"&gt;Circle CI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/teamcity/?msclkid=415bd95bc1411e73c559b9a3f07fc2ff&amp;amp;utm_source=bing&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=EMEA_en_ES_TeamCity_Search_Competitors&amp;amp;utm_term=circle%20ci&amp;amp;utm_content=circle%20ci"&gt;TeamCity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the realms of automation you may also have to design means of performing test-automation for different areas, ranging from code sanity to performance, and have to know about the implementation and configuration of tools like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.sonarqube.org/"&gt;SonarQube&lt;/a&gt; (code quality)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://customerportal.solarwinds.com/"&gt;SolarWinds&lt;/a&gt; (performance monitorization or observability)
and the likes&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#access-control-and-governance"&gt;
  &lt;/a&gt;
  Access control and governance
&lt;/h4&gt;

&lt;p&gt;Architects are for sure in many cases responsible for software/platform security, if not for its implementation, for its design or assessment.&lt;/p&gt;

&lt;p&gt;It is important for architects to understand the many means of controlling access to software code bases and data, and the services provided by the applications they architect.&lt;/p&gt;

&lt;p&gt;Architects know well the meaning of &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;authorization&lt;/li&gt;
&lt;li&gt;authentication
&lt;a href="http://www.bu.edu/tech/about/security-resources/bestpractice/auth/"&gt;http://www.bu.edu/tech/about/security-resources/bestpractice/auth/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and have to understand the different ways to implement them, at an application level and low level, too.&lt;/p&gt;

&lt;p&gt;It is desirable for architects to understand what vectors of vulnerability their apps or platforms, or the software they work with may be exposed to, in order to mitigate risks.&lt;/p&gt;

&lt;p&gt;Governance has many meanings and implications and it's so intersectional I can only map it to the different dimensions it may connect to. &lt;/p&gt;

&lt;p&gt;For example, designing role based access depending on authorization granularity is part of governance policies for access, while software capabilities providing the ability to set those rules, guarantee legal compliance with standards like &lt;a href="https://www.iso.org/isoiec-27001-information-security.html"&gt;ISO27001&lt;/a&gt; or GDPR. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-api-and-application-layers"&gt;
  &lt;/a&gt;
  The API and application layers
&lt;/h4&gt;

&lt;p&gt;Most modern architecture patterns for web development are very heavily API dependent. It is very likely that the software or platform an architect is responsible for, does not only consume from dozens of API's but also exposes some of them.&lt;/p&gt;

&lt;p&gt;Needless to say, 100% of the tools I mentioned through the article, are API based, and so are most of the services exposed by cloud providers.&lt;/p&gt;

&lt;p&gt;For this reason, architects need to be skilled on API design and maintenance, and very familiar with concepts and patterns like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://restfulapi.net/"&gt;REST APIs&lt;/a&gt; and &lt;a href="https://www.json.org/json-en.html"&gt;JSON&lt;/a&gt; standards&lt;/li&gt;
&lt;li&gt;&lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stoplight.io/api-types/soap-api/"&gt;SOAP&lt;/a&gt; (although less used now, many legacy systems still consume or expose SOAP services)&lt;/li&gt;
&lt;li&gt;And other API alternatives like &lt;a href="https://www.geeksforgeeks.org/introduction-java-servlets/"&gt;Java Servlets&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And before you complain about the age of some of the mentioned API architectures, remember that a lot of times Solutions Architects assist in migrating &lt;a href="https://www.techopedia.com/definition/635/legacy-system"&gt;Legacy Systems&lt;/a&gt;, and for that, they need to know what they're facing!&lt;/p&gt;

&lt;p&gt;In order to effectively design and maintain, or even assess in-place solutions, it is very useful for architects to be aware of and implement the &lt;a href="https://www.openapis.org/"&gt;Open API specification&lt;/a&gt; and &lt;a href="https://swagger.io/"&gt;Swagger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Architects need to design the connection and sometimes aggregation of data coming from all those API's. For that reason, they also need to understand well how to consume them and distribute them, and need to know concepts like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://apifriends.com/api-management/api-gateway-to-the-cloud/"&gt;north-south bound&lt;/a&gt; (API gateway)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://apifriends.com/api-management/service-mesh/"&gt;east-west bound&lt;/a&gt;(service-to-service or service mesh)&lt;/li&gt;
&lt;li&gt;proxy and &lt;a href="https://www.cloudflare.com/en-gb/learning/cdn/glossary/reverse-proxy/"&gt;reverse proxy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In terms of app development, it may not be necessary for architects to know or understand implementation details of high level languages, but most architects do anyway, since at a great percentage architects used to be developers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highlevel-diagrams-uml-and-other-types-of-diagrams"&gt;
  &lt;/a&gt;
  High-level diagrams, UML and other types of diagrams
&lt;/h2&gt;

&lt;p&gt;Architects speak in diagrams. Believe me. Oftentimes they need to represent very complex systems and relationships, and the only way to do it is being proficient at representing entities with shapes and arrows.&lt;/p&gt;

&lt;p&gt;This is why architects learn &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.edrawsoft.com/what-is-uml-diagram.html"&gt;UML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.vertabelo.com/blog/crow-s-foot-notation/"&gt;Crow's Foot Notation&lt;/a&gt;
and other representation schemas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Architects usually conduct and lead calls with customers, and they need to have great public speaking and presentation skills: from putting together impressive slide decks, to expressing complex technical ideas in a language everyone can understand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sales"&gt;
  &lt;/a&gt;
  Sales
&lt;/h2&gt;

&lt;p&gt;Some organizations hire architects to be part of their sales processes, and advise sales reps and clients from a technical perspective.&lt;/p&gt;

&lt;p&gt;Those organizations are very likely to offer training in their sales process and methodologies used, as well as ramping up the architects in a particular technology or software.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#will-all-my-coding-skills-go-to-waste"&gt;
  &lt;/a&gt;
  Will all my coding skills go to waste?
&lt;/h2&gt;

&lt;p&gt;Absolutely NOT! I can speak from personal experience that all I have learned as a software developer, helps me quickly understand systems and decisions, analyse existing code bases and configurations, and build rapport with other architects and developers. Some solutions architects are required to build PoC's on a regular basis, and your coding skills are not only helpful but necessary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Well, I know this is already very long, and this is only the tip of the ice-berg! Software and Solutions Architecture is a very rewarding career path and one that many developers follow when they don't want to move to more administrative, project or account management positions, and want to continue to be part of the technical scene. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: I added links to resources from pretty reputable sites, but if you want to contribute with better ones, add them in the comments!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you have more questions, hit me on &lt;a href="https://www.twitter.com/anfibiacreativa"&gt;twitter&lt;/a&gt;, share and like!&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>cloudskills</category>
      <category>infrastructure</category>
      <category>systems</category>
    </item>
    <item>
      <title>Relaciones de Aspecto Perfectas en CSS</title>
      <author>Lucas G. Terracino</author>
      <pubDate>Wed, 21 Jul 2021 17:28:13 +0000</pubDate>
      <link>https://dev.to/nomade55/relaciones-de-aspecto-perfectas-en-css-5c96</link>
      <guid>https://dev.to/nomade55/relaciones-de-aspecto-perfectas-en-css-5c96</guid>
      <description>&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#o-c%C3%B3mo-aprend%C3%AD-a-dejar-de-preocuparme-y-amar-el-padding"&gt;
  &lt;/a&gt;
  O, c√≥mo aprend√≠ a dejar de preocuparme y amar el padding
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ya sea que estemos desarrollando una web o la interfaz de una aplicaci√≥n, las relaciones de aspecto son algo por lo que no tenemos que preocuparnos mucho. Hasta que el cliente nos pasa un video que quiere que sea vea sin &lt;strong&gt;&lt;em&gt;bandas negras,&lt;/em&gt;&lt;/strong&gt; o nos explican que la imagen tiene que estar s√≠ o s√≠ en &lt;strong&gt;una relaci√≥n de 1:1.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qu%C3%A9-es-la-relaci%C3%B3n-de-aspecto"&gt;
  &lt;/a&gt;
  ¬øQu√© es la relaci√≥n de aspecto?
&lt;/h3&gt;

&lt;p&gt;La relaci√≥n de aspecto es la relaci√≥n que hay, proporcionalmente, entre el alto y el ancho de un elemento. Esta relaci√≥n se suele expresar como la fracci√≥n de ancho sobre alto. Por ejemplo, para un elemento que tiene &lt;strong&gt;1:1 su ancho es igual a su altura.&lt;/strong&gt; Sin embargo un elemento que tiene &lt;strong&gt;4:3&lt;/strong&gt; como relaci√≥n de aspecto*&lt;em&gt;, el ancho es 1.33 veces mas grande (porque 4 sobre 3, es 1.33).&lt;/em&gt;*&lt;/p&gt;

&lt;p&gt;Algunas de las &lt;strong&gt;m√°s conocidas y populares siendo:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;4:3&lt;/strong&gt; Televisores &lt;em&gt;de tubo&lt;/em&gt; viejos üì∫, y la relaci√≥n nativa de los VHS üìº&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;16:9&lt;/strong&gt; Monitores, celulares en horizontal, laptops, y televisores smart en promedio (cualquiera que no sea widescreen).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;9:16&lt;/strong&gt; Los celulares en vertical üì± y con ellos, todas los videos filmados verticalmente como el contenido de TikTok&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;1:1&lt;/strong&gt; Las im√°genes del feed de Instagram y las fotos Polaroid.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jP5J4oSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626195446528/U9bSXIu4k.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jP5J4oSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626195446528/U9bSXIu4k.jpeg" alt="Relaciones de aspecto populares, 1:1, 9:16, 16:9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#relaciones-de-aspecto-en-css"&gt;
  &lt;/a&gt;
  üé® Relaciones de Aspecto en CSS
&lt;/h3&gt;

&lt;p&gt;Excelente, ahora que sabemos que es una relaci√≥n de aspecto &lt;strong&gt;1:1,&lt;/strong&gt; podemos forzar un alto que corresponda al ancho y listo ¬øno? &lt;br&gt;
Si un elemento tiene 1100px de ancho (&lt;code&gt;width: 1100px&lt;/code&gt;) le agregamos 1100px de alto (&lt;code&gt;height: 1100px&lt;/code&gt;), tiene la relaci√≥n de aspecto que quer√≠amos, 1:1 pero si el tama√±o de la pantalla cambia, tambi√©n deber√≠amos cambiar el alto para preservar la relaci√≥n de aspecto. &lt;em&gt;Esta soluci√≥n es v√°lida pero **no es responsiva&lt;/em&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Necesitamos alguna regla de CSS que autom√°ticamente mute en base al ancho, pero que tenga influencia en el alto.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#el-padding-porcentual-de-un-elemento-es-relativo-al-ancho-de-su-padre"&gt;
  &lt;/a&gt;
  ü§Ø El padding porcentual de un elemento es relativo al ancho  de su padre
&lt;/h3&gt;

&lt;p&gt;Una propiedad bastante interesante y poco intuitiva &lt;strong&gt;es que el tama√±o del padding &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/padding#values"&gt;cuando las unidades son porcentuales&lt;/a&gt; corresponde al ancho del elemento ü§Ø.&lt;/strong&gt; Esto que a simple lectura parece algo muy chico ¬°nos permite calcular un alto, en base a un ancho ü§Ø!&lt;/p&gt;

&lt;p&gt;Si pueden ver a donde vamos con esto, si a un elemento de 100px de ancho, le agregamos un hijo con alto autom√°tico (&lt;code&gt;height: auto&lt;/code&gt;) y le damos 100% de &lt;code&gt;padding-top&lt;/code&gt;, el alto de este elemento va a ser 100px (1:1). &lt;strong&gt;¬°Tad√°!&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#relaciones-de-aspecto-m%C3%A1s-complejas"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª Relaciones de aspecto m√°s complejas
&lt;/h4&gt;

&lt;p&gt;En caso de tener por ejemplo el pantallazo de una pel√≠cula, filmada en 16:9, mi elemento tiene que tener la misma relaci√≥n de aspecto si quiero que se vea sin &lt;em&gt;bandas negras.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Para calcularlo dividimos el alto, por el ancho: 9/16 = 0.5625 (&lt;code&gt;padding-top: 56.25%&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Tambien podemos usar la funci√≥n &lt;code&gt;calc()&lt;/code&gt; para automatizar el proceso de c√°lculo del padding.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.aspect-ratio-16-9&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;56.25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.aspect-ratio-1-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* O haciendo uso de calc() */&lt;/span&gt;
&lt;span class="nc"&gt;.aspect-ratio-4-3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.aspect-ratio-9-16&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#pero-el-padding-empujar%C3%ADa-todo-el-contenido-hacia-abajo-no"&gt;
  &lt;/a&gt;
  ü§î Pero el padding empujar√≠a todo el contenido hacia abajo ¬øno?
&lt;/h4&gt;

&lt;p&gt;Exacto, vamos a tener que volver a acomodar a los hijos de este elemento usando la ayuda de üåà &lt;strong&gt;posicionamiento absoluto&lt;/strong&gt; ü¶Ñ.&lt;/p&gt;

&lt;p&gt;Supongamos que dentro de nuestro elemento con la relaci√≥n de aspecto 16:9 tenemos que agregar una imagen, lo √∫nico que tenemos que hacer es darle un posicionamiento relativo al padre, y acomodar la imagen para que ocupe todo el tama√±o provisto por √©l.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"aspect-ratio-parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"aspect-ratio-16-9"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://placehold.it/1920x1080?text=16:9"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;    
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.aspect-ratio-16-9&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;56.25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.aspect-ratio-16-9&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hay-alguna-manera-de-evitarme-hacer-yo-el-c%C3%A1lculo"&gt;
  &lt;/a&gt;
  üëÄ ¬øHay alguna manera de evitarme hacer yo el c√°lculo?
&lt;/h3&gt;

&lt;p&gt;S√≠, &lt;code&gt;calc()&lt;/code&gt;, pero si necesitas un &lt;em&gt;amigo&lt;/em&gt; que te ayude con los &lt;em&gt;ratios&lt;/em&gt;, &lt;strong&gt;&lt;a href="https://ratiobuddy.com"&gt;RatioBuddy&lt;/a&gt;&lt;/strong&gt; recibe el tama√±o del elemento del que quieras calcular su relaci√≥n de aspecto, y realiza los c√°lculos por nosotros. Al final, nos deja el SCSS listo para copiar y pegar ‚ú®. &lt;br&gt;
üôè En caso de que no sepas como usar SCSS (Sass), pega el resultado de RatioBuddy en &lt;strong&gt;&lt;a href="https://www.sassmeister.com"&gt;Sassmeister&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K91OL2rG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626195753320/FG5a7g3_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K91OL2rG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626195753320/FG5a7g3_1.png" alt="Screenshot of the RatioBuddy Website"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#level-up"&gt;
  &lt;/a&gt;
  üÜô Level Up!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NOMADE/embed/MWmeqaO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Usando &lt;strong&gt;pseudo elementos y variables de CSS,&lt;/strong&gt; podemos agregarle a nuestros elementos una relaci√≥n de aspecto, usando solo una clase.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explicaci%C3%B3n"&gt;
  &lt;/a&gt;
  Explicaci√≥n
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Al crear un &lt;code&gt;::before&lt;/code&gt; din√°micamente, nos ahorramos el tener que crear otro el elemento desde el HTML.&lt;/li&gt;
&lt;li&gt;En vez de crear una clase para cada uno de los casos de relaci√≥n de aspecto que tengamos que cubrir, hacemos uso de las variables de CSS ponemos &lt;code&gt;--aspect-ratio&lt;/code&gt; en el &lt;code&gt;padding-top&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Calculamos el &lt;code&gt;padding-top&lt;/code&gt; con &lt;code&gt;calc()&lt;/code&gt; dividiendo el total, lo que venga en la variable &lt;code&gt;--aspect-ratio&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Como estamos dentro de un &lt;code&gt;calc()&lt;/code&gt;, CSS va a dividir al 100% calculando la relaci√≥n de aspecto que est√© en la variable.&lt;/li&gt;
&lt;li&gt;Desde nuestro HTML, vamos a darle valor a esa variable para elemento usando &lt;code&gt;style="--aspect-ratio: n/n"&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üí° &lt;strong&gt;Pst,&lt;/strong&gt; tambi√©n podemos pasarle relaci√≥n de aspecto, ya dividida, como por ejemplo &lt;strong&gt;1.778 (16/9).&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usando-relaciones-de-aspecto-en-frameworks"&gt;
  &lt;/a&gt;
  ‚ö° Usando relaciones de aspecto en Frameworks
&lt;/h3&gt;

&lt;p&gt;Si est√°s usando un framework es probable que ya exista una clase o componente para aprovechar estas relaciones de aspecto responsivas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Boostrap:&lt;/strong&gt; &lt;a href="https://getbootstrap.com/docs/4.1/utilities/embed/"&gt;https://getbootstrap.com/docs/4.1/utilities/embed/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bulma:&lt;/strong&gt; &lt;a href="https://bulma.io/documentation/elements/image/#responsive-images-with-ratios"&gt;https://bulma.io/documentation/elements/image/#responsive-images-with-ratios&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tailwind:&lt;/strong&gt; &lt;a href="https://github.com/tailwindlabs/tailwindcss-aspect-ratio"&gt;https://github.com/tailwindlabs/tailwindcss-aspect-ratio&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusiones-y-el-futuro"&gt;
  &lt;/a&gt;
  üëã Conclusiones y el futuro
&lt;/h3&gt;

&lt;p&gt;Un verdadero truco de CSS, que al aprenderlo vamos a ser los primeros en proponer una soluci√≥n a problemas que parecen tener soluci√≥n solo con Javascript. &lt;br&gt;
Sin embargo, existe un &lt;strong&gt;&lt;a href="https://caniuse.com/mdn-css_properties_aspect-ratio"&gt;futuro&lt;/a&gt;&lt;/strong&gt; donde no tenemos que depender de trucos y enga√±os. La regla de CSS &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio"&gt;aspect-ratio&lt;/a&gt;&lt;/strong&gt; ya tiene un s√≥lido soporte en la mayor√≠a de los exploradores conocidos y con el tiempo ese n√∫mero solo va a crecer. Mientras tanto, el &lt;strong&gt;Truco del Padding&lt;/strong&gt; ‚ú®, es responsive y v√°lido para todos los exploradores que existen.&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Announcement: CodeNewbie to feature short videos from the community at CodeLand</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 21 Jul 2021 17:27:27 +0000</pubDate>
      <link>https://dev.to/devteam/announcement-codenewbie-to-feature-short-videos-from-the-community-at-codeland-4mod</link>
      <guid>https://dev.to/devteam/announcement-codenewbie-to-feature-short-videos-from-the-community-at-codeland-4mod</guid>
      <description>&lt;p&gt;While the &lt;a href="https://codelandconf.com"&gt;CodeLand&lt;/a&gt; CFP might officially be closed as of yesterday, there‚Äôs an exciting new way to participate in CodeLand this year. &lt;/p&gt;

&lt;p&gt;In addition to featuring keynotes, talks, and workshops, our friends over at CodeNewbie Community just announced a new community-generated video track to be featured at the conference called &lt;strong&gt;&lt;a href="https://community.codenewbie.org/codenewbie/a-new-codeland-opportunity-for-creative-codenewbies-5e82"&gt;CodeLand Recess&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-details"&gt;
  &lt;/a&gt;
  Quick details:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;From now through August 20th, community members can submit 30 second-1 minute videos across four categories&lt;/li&gt;
&lt;li&gt;A handful of videos will be selected to be featured throughout the day at CodeLand 2021 &lt;/li&gt;
&lt;li&gt;This TikTok-style community track will be a great chance for the audience to see your perspective on learning to code and being a software developer today. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#take-a-look-at-this-post-on-codenewbie-community-for-all-the-details-on-codeland-recess-this-is-going-to-be-fun"&gt;
  &lt;/a&gt;
  Take a look at &lt;a href="https://community.codenewbie.org/codenewbie/a-new-codeland-opportunity-for-creative-codenewbies-5e82"&gt;this post&lt;/a&gt; on CodeNewbie Community for all the details on CodeLand Recess. This is going to be fun üì∫
&lt;/h3&gt;

</description>
      <category>codeland</category>
      <category>meta</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Rate limiting using the Fixed Window algorithm</title>
      <author>Amir Keshavarz</author>
      <pubDate>Wed, 21 Jul 2021 17:21:33 +0000</pubDate>
      <link>https://dev.to/satrobit/rate-limiting-using-the-fixed-window-algorithm-2hgm</link>
      <guid>https://dev.to/satrobit/rate-limiting-using-the-fixed-window-algorithm-2hgm</guid>
      <description>&lt;p&gt;In the previous post, we went through rate-limiting and what it is. Then, we introduced an algorithm called Token Bucket and implemented it in Python.&lt;/p&gt;

&lt;p&gt;I've decided to turn this into a series and dedicate each post to an algorithm.&lt;/p&gt;

&lt;p&gt;And in this post, we will learn about Fixed Window and its implementation in Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixed-window"&gt;
  &lt;/a&gt;
  Fixed Window
&lt;/h2&gt;

&lt;p&gt;As the name suggests, It's all about windows. In this algorithm, we divide the time into fixed windows and then map the incoming events into these windows.&lt;/p&gt;

&lt;p&gt;The algorithm itself is pretty simple without any analogy but let's start with one anyway.&lt;/p&gt;

&lt;p&gt;Imagine a moving train. There's a gateway and at any moment, people only can board one wagon (Yep, people are boarding a moving train, nothing weird).&lt;/p&gt;

&lt;p&gt;Assume that the window of boarding for each wagon is 1 minute. So if a wagon gets full you need to wait for up to a minute for the next wagon.&lt;/p&gt;

&lt;p&gt;In this analogy, the train is the time! The time is always moving forward and in each time frame, we have a fixed window of passing through.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DnnLwiI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i45cox7md3dt9h7t2syf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DnnLwiI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i45cox7md3dt9h7t2syf.png" alt="Fixed Window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h1&gt;

&lt;p&gt;In this very simple implementation, We will build a rate-limiter that uses Fixed Window to limit packets in 1-second time frames.&lt;/p&gt;

&lt;p&gt;We start by defining a class with 3 arguments when It's being instantiated.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;capacity:&lt;/strong&gt; number of the allowed packets that can pass through in a second.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;forward_callback:&lt;/strong&gt; this function is called when the packet is being forwarded.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;drop_callback:&lt;/strong&gt; this function is called when the packet should be dropped.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We prefill a property named &lt;code&gt;allowance&lt;/code&gt; to allow the packet to pass through in the first second.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;current_time&lt;/code&gt; is the current time frame that the rate-limiter is using.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;fixed_window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forward_callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;drop_callback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allowance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward_callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forward_callback&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drop_callback&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we define &lt;code&gt;handle()&lt;/code&gt; where the magic happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#1
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#2
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;#3
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allowance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt; &lt;span class="c1"&gt;#3
&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allowance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#4
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#5
&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allowance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#6
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#6
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;handle&lt;/code&gt; accepts only 1 parameter: the packet.&lt;/li&gt;
&lt;li&gt;check if we're in the current time frame or not.&lt;/li&gt;
&lt;li&gt;if we're not in the current time frame, update the &lt;code&gt;current_time&lt;/code&gt; and reset the &lt;code&gt;allowance&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;check if we have any allowance left.&lt;/li&gt;
&lt;li&gt;drop the packet if we don't have any allowance left.&lt;/li&gt;
&lt;li&gt;in this part, we already know that there is allowance left, so we remove one from the allowance and forward the packet.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, Fixed Window is extremely simple. This is the final code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;fixed_window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forward_callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;drop_callback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allowance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward_callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forward_callback&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drop_callback&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allowance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allowance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allowance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Packet Forwarded: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Packet Dropped: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;throttle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fixed_window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;packet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;packet&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be getting something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Packet Forwarded: 0
Packet Dropped: 1
Packet Dropped: 2
Packet Forwarded: 3
Packet Dropped: 4
Packet Dropped: 5
Packet Dropped: 6
Packet Dropped: 7
Packet Forwarded: 8
Packet Dropped: 9
Packet Dropped: 10
Packet Dropped: 11
Packet Dropped: 12
Packet Forwarded: 13
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we built a rate-limiter with a rate of one packet per second. Then, we send a packet every 0.2 seconds to see the rate-limiter do its thing.&lt;/p&gt;

&lt;p&gt;This algorithm is pretty useful to learn about rate-limiting but we rarely see it in the wild since it allows a burst of events at the beginning of the time frame but it really depends on your application.&lt;/p&gt;

&lt;p&gt;Thank you for your time.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>computerscience</category>
      <category>python</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
