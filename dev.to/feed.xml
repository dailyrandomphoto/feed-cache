<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Python's Collections Module: OrderdDict</title>
      <author>Kathan Vakharia</author>
      <pubDate>Thu, 17 Jun 2021 04:54:12 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-s-collections-module-orderddict-30ia</link>
      <guid>https://dev.to/kathanvakharia/python-s-collections-module-orderddict-30ia</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-do-we-need-ordereddict-anway"&gt;
  &lt;/a&gt;
  Why do we need OrderedDict anway?
&lt;/h2&gt;

&lt;p&gt;Since dictionaries in python maintain their insertion order completely after &lt;strong&gt;python 3.7+&lt;/strong&gt;, use case of &lt;code&gt;OrderedDict&lt;/code&gt; is fading away slowly. But still there are some helper methods and functions that we can leverage while using OrderedDicts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5G6kC4bE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t806u5fbdsoy6mk0e8i4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5G6kC4bE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t806u5fbdsoy6mk0e8i4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-raw-ordereddict-endraw-"&gt;
  &lt;/a&gt;
  Creating &lt;code&gt;OrderedDict&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Since, it is a &lt;code&gt;dict&lt;/code&gt; sub-class. It can leverage all the functionalities of dictionary.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9MRWkyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x5t0qs1ym5tfk5myekm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9MRWkyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x5t0qs1ym5tfk5myekm.png" alt="image"&gt;&lt;/a&gt;Let's discuss some important methods pertaining to &lt;code&gt;OrderedDict&lt;/code&gt; only.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-popitem-endraw-method"&gt;
  &lt;/a&gt;
  &lt;code&gt;popitem&lt;/code&gt; method
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;popitem(last = True)&lt;/code&gt; method for ordered dictionaries returns and removes a &lt;strong&gt;(key, value)&lt;/strong&gt; pair. &lt;/p&gt;

&lt;p&gt;The pairs are returned in ,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;LastInFirstOut(LIFO)&lt;/em&gt; order if last is &lt;strong&gt;true&lt;/strong&gt;. That is to say, &lt;strong&gt;last&lt;/strong&gt; pair is popped.(default)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;FirstInFirstOut(FIFO)&lt;/em&gt; order if &lt;strong&gt;false&lt;/strong&gt;. That is to say, &lt;strong&gt;first&lt;/strong&gt; pair is popped.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;

&lt;span class="n"&gt;ord_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"The"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"lname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"CodeBlooded"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"founder"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"A Geek"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"Ran by"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Geeks"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;last_pair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ord_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popitem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# last=True by default
&lt;/span&gt;&lt;span class="n"&gt;first_pair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ord_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popitem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'last pair: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;last_pair&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'first pair: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;first_pair&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;"""OUTPUT 
last pair: ('Ran by', 'Geeks')
first pair: ('fname', 'The')
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#-raw-movetoend-endraw-method"&gt;
  &lt;/a&gt;
  &lt;code&gt;move_to_end&lt;/code&gt; method
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;move_to_end(key, last=True)&lt;/code&gt; moves an existing key to either end of an ordered dictionary. &lt;/p&gt;

&lt;p&gt;The item is moved to the right end if last is true (default) or to the beginning if last is false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;

&lt;span class="n"&gt;ord_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"The"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"lname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"CodeBlooded"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"founder"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"A Geek"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"Ran by"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Geeks"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Before =&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ord_dict&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# move to right-most end
&lt;/span&gt;&lt;span class="n"&gt;ord_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'founder'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# move to left-most end
&lt;/span&gt;&lt;span class="n"&gt;ord_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Ran by'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'After =&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ord_dict&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;"""OUTPUT 
Before =&amp;gt;
OrderedDict([('fname', 'The'), ('lname', 'CodeBlooded'), 
            ('founder', 'A Geek'), ('Ran by', 'Geeks')])
After =&amp;gt;
OrderedDict([('Ran by', 'Geeks'), ('fname', 'The'), 
            ('lname', 'CodeBlooded'), ('founder', 'A Geek')])

"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💡 &lt;strong&gt;KeyError&lt;/strong&gt; is raised if given key is not present in the dictionary.&lt;/p&gt;

&lt;p&gt;And that wraps our discussion on &lt;code&gt;OrderedDict&lt;/code&gt;! If you notice all of Collections classes we discussed till now are &lt;code&gt;dict&lt;/code&gt; subclass, isn't it interesting ? It's testament to how much powerful dictionaries in python are 😎&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>collections</category>
    </item>
    <item>
      <title>🎥 Kubernetes Services, Ingress, Jobs and CronJobs</title>
      <author>Peter Jausovec</author>
      <pubDate>Thu, 17 Jun 2021 03:37:22 +0000</pubDate>
      <link>https://dev.to/peterj/kubernetes-services-ingress-jobs-and-cronjobs-3p1c</link>
      <guid>https://dev.to/peterj/kubernetes-services-ingress-jobs-and-cronjobs-3p1c</guid>
      <description>&lt;p&gt;How can you access workloads inside the Kubernetes cluster? Should you use a NodePort or LoadBalancer service type? How about if you want to expose multiple applications through a single load balancer? In this session, you'll learn how to do all that. We'll deploy an Ambassador ingress controller and show how to expose multiple applications through the load balancer. Finally, we'll look into Jobs and CronJobs and show how to use them to run tasks on schedule. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ef6UJ5Pa3Dw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-covered-in-the-video"&gt;
  &lt;/a&gt;
  What's covered in the video?
&lt;/h3&gt;

&lt;p&gt;00:00 - Introduction&lt;br&gt;
01:00 - Agenda&lt;br&gt;
02:54 - Kubernetes Services&lt;br&gt;
10:24 - Talking to Pods using services (demo/lab)&lt;br&gt;
23:37 - Service types&lt;br&gt;
24:45 - ClusterIP service type&lt;br&gt;
25:56 - NodePort service type&lt;br&gt;
28:00 - LoadBalancer service type&lt;br&gt;
29:00 - ExternalName service type&lt;br&gt;
30:03 - Service types (demo/lab)&lt;br&gt;
40:40 - Ingress introduction (exposing multiple services)&lt;br&gt;
50:50 - Ingress (demo)&lt;br&gt;
54:33 - Deploying Ambassador ingress controller (demo)&lt;br&gt;
01:00:50 - Single service ingress (demo)&lt;br&gt;
01:02:59 - Path-based routing with Ingress (demo)&lt;br&gt;
01:08:13 - Using a hostname instead of an IP address (demo)&lt;br&gt;
01:15:31 - Name-based ingress(multiple hosts) (demo)&lt;br&gt;
01:19:00 - Kubernetes Jobs&lt;br&gt;
01:26:39 - Kubernetes CronJobs&lt;br&gt;
01:32:40 - Jobs and CronJobs (demo) &lt;/p&gt;

&lt;p&gt;You can find all the information on how to join the next live Kubernetes session at &lt;a href="//live.startkubernetes.com"&gt;live.startkubernetes.com&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>EC2 instance types</title>
      <author>Ajit Singh</author>
      <pubDate>Thu, 17 Jun 2021 03:15:24 +0000</pubDate>
      <link>https://dev.to/this-is-learning/ec2-instance-types-4okj</link>
      <guid>https://dev.to/this-is-learning/ec2-instance-types-4okj</guid>
      <description>&lt;p&gt;When we were creating EC2 instances we saw that there are many types of EC2 instances available from which we selected t2.micro .Now we will study some of them so that we can make an educated guess on what type of instance we need.&lt;/p&gt;

&lt;p&gt;EC2 has the following type of instances available: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;General Purpose&lt;/li&gt;
&lt;li&gt;Compute Optimized&lt;/li&gt;
&lt;li&gt;Memory Optimized&lt;/li&gt;
&lt;li&gt;Accelerated Computing &lt;/li&gt;
&lt;li&gt;Storage optimized&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us look each of these:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-purpose"&gt;
  &lt;/a&gt;
  General Purpose
&lt;/h2&gt;

&lt;p&gt;These instances provide a balance of compute power, memory network. These are general purpose and can be used for a variety of workloads these are good for using as web servers, you can use them as your virtual environments to build, deploy, test and so on. These instances contain the &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;T series&lt;/li&gt;
&lt;li&gt;M series&lt;/li&gt;
&lt;li&gt;MACos 
family of servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#compute-optimizedcpu-optimized"&gt;
  &lt;/a&gt;
  Compute Optimized(CPU optimized)
&lt;/h2&gt;

&lt;p&gt;Compute optimized instances are ideal for compute bound applications that need high performance computations for running correctly. These types of instances are used for scientific modelling, gaming servers, media trans coding machine learning etc. These instances contain the &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C series
family of servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#memory-optimizedram-optimized"&gt;
  &lt;/a&gt;
  Memory Optimized(RAM optimized)
&lt;/h2&gt;

&lt;p&gt;Memory optimized instances are used to deliver fast performance on large datasets in memory. These types of servers are best used to setup real time database analytics, caches etc. These instances contain the &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;R series&lt;/li&gt;
&lt;li&gt;x series&lt;/li&gt;
&lt;li&gt;U series&lt;/li&gt;
&lt;li&gt;Z series
family of servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#storage-optimizedrom-optimized"&gt;
  &lt;/a&gt;
  Storage Optimized(ROM optimized)
&lt;/h2&gt;

&lt;p&gt;These instances are used when we need to perform many read and writes simultaneously. these provide low latency to IO operations to applications. These are used for setting up databases, data warehousing etc. These instances contain the &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I series&lt;/li&gt;
&lt;li&gt;D series&lt;/li&gt;
&lt;li&gt;H series
family of servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#accelerated-computing"&gt;
  &lt;/a&gt;
  Accelerated Computing
&lt;/h2&gt;

&lt;p&gt;Accelerated computing instances use hardware accelerators, or co-processors, to perform functions, such as floating point number calculations, graphics processing, or data pattern matching, more efficiently than is possible in software running on CPUs. These are used for machine learning, speech recognition, seismic analysis etc. These instances contain the &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;P series&lt;/li&gt;
&lt;li&gt;G series&lt;/li&gt;
&lt;li&gt;F series
family of servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These were about all the servers available on EC2 for details visit &lt;a href="https://aws.amazon.com/ec2/instance-types/"&gt;EC2&lt;/a&gt; documentation. Next we will study how we can save money if we know how long we will these EC2 instances for.&lt;/p&gt;

</description>
      <category>cloudskills</category>
      <category>cloud</category>
      <category>aws</category>
    </item>
    <item>
      <title>Day 1 of #100DaysOfCode!
</title>
      <author>Christian Falucho</author>
      <pubDate>Thu, 17 Jun 2021 02:55:50 +0000</pubDate>
      <link>https://dev.to/cfalucho/day-1-of-100daysofcode-4h3k</link>
      <guid>https://dev.to/cfalucho/day-1-of-100daysofcode-4h3k</guid>
      <description>&lt;h2&gt;Today's progress🤓&lt;/h2&gt;

&lt;p&gt;I worked on several &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/convert-celsius-to-fahrenheit"&gt;Basic Algorithm Scripting&lt;/a&gt;
problems. They were a bit challenging but it's okay because that is part of the process. I understand they will be difficult at first. So I just have to practice on them and find ways that helps me solve them.
&lt;/p&gt;

&lt;p&gt;What helped me was to visually see how the code would run. I wrote pseudocode and step by step wrote down the output. Instead of me just telling you, let me show you some examples of.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/repeat-a-string-repeat-a-string"&gt;&lt;em&gt;Repeat a String Repeat a String&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ApviYq6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6e68mti4rskrrhzyk0yr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ApviYq6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6e68mti4rskrrhzyk0yr.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below, by writing pseudocode I was able to logically organize my thoughts and come up with a solution that works. When it comes to repeating anything. &lt;code&gt;For loops&lt;/code&gt; are the way to go as it controls flow statements and specifies iteration. &lt;/p&gt;

&lt;p&gt;Here's another example.&lt;br&gt;
&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/return-largest-numbers-in-arrays"&gt;&lt;em&gt;Return Largest Numbers in Arrays Passed&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yv2MHFGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mxa74r3km260o4gvcf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yv2MHFGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mxa74r3km260o4gvcf1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This algorithm problem dealt with a multi-dimensional array and I have to be honest, multi-anything can be difficult because then you're having to deal with a multitude of data and it can be easy to get lost in it but what worked for me was to visually see what was happening in my code. So running &lt;code&gt;console.log&lt;/code&gt; helped me visualize the output. When I did my &lt;code&gt;if-else&lt;/code&gt; I wrote down what would be happening in within the &lt;code&gt;for loop&lt;/code&gt;. This way I knew that the logic was correct.&lt;/p&gt;

&lt;p&gt;Lastly,&lt;br&gt;
&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/confirm-the-ending"&gt;&lt;em&gt;Confirm Ending&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--svIj2Q3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqja07pkqq9zdibsjljc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svIj2Q3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqja07pkqq9zdibsjljc.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This problem has to do with using JavaScript's string methods and extracting a letter from the string that matches its target. I used the &lt;code&gt;slice()&lt;/code&gt; method to extract and return a new string. Within the method, I subtracted &lt;code&gt;target&lt;/code&gt; length with &lt;code&gt;str&lt;/code&gt; length to get end of the string. Then used an equality operator to check if the end of string matches the target.&lt;/p&gt;

&lt;h2&gt;What I learned&lt;/h2&gt;

&lt;p&gt;It is good to write pseudocode and organize your thoughts before doing any actual coding. This helps to structure how your algorithm will be. &lt;/p&gt;

&lt;p&gt;It also helps to visualize what is happening. Whether it's doing a &lt;code&gt;console.log&lt;/code&gt; or manually writing out what the output will be. &lt;/p&gt;

&lt;p&gt;When it comes to repeating something or doing iteration, &lt;code&gt;for loops&lt;/code&gt; are the way to go. They helped when dealing with arrays and especially with multi-arrays by checking and iterating through their indexes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Slice()&lt;/code&gt; method as the name implies, slices (or extracts) a section of the string and returns a new string. This helps to specify what sections of the string you want to remove and return the ones that are left without modifying the original string.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 ways to make money as a programmer in 2021</title>
      <author>ABDERRAHIM TIJANI</author>
      <pubDate>Thu, 17 Jun 2021 01:36:24 +0000</pubDate>
      <link>https://dev.to/abderrahimtija1/5-ways-to-make-money-as-a-programmer-in-2021-pnl</link>
      <guid>https://dev.to/abderrahimtija1/5-ways-to-make-money-as-a-programmer-in-2021-pnl</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Yr5DVtfO1kI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>programming</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Try React 18 with Vite, Typescript and Vercel</title>
      <author>Duc Ng</author>
      <pubDate>Thu, 17 Jun 2021 00:45:00 +0000</pubDate>
      <link>https://dev.to/ngduc/try-react-18-with-vite-typescript-and-vercel-okg</link>
      <guid>https://dev.to/ngduc/try-react-18-with-vite-typescript-and-vercel-okg</guid>
      <description>&lt;h3&gt;
  &lt;a href="#whats-new-in-react-18"&gt;
  &lt;/a&gt;
  What's New In React 18?
&lt;/h3&gt;

&lt;p&gt;Please visit &lt;a href="https://nnote.io/s/x4od5/react-18-with-vite-and-vercel"&gt;https://nnote.io/s/x4od5/react-18-with-vite-and-vercel&lt;/a&gt; for the latest updates for this article.&lt;/p&gt;

&lt;p&gt;The new version of React - React 18 alpha has just come out. From ReactJS.org:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are no significant out-of-the-box breaking changes to component behavior. You can upgrade to React 18 with minimal or no changes to your application code, with a level of effort comparable to a typical major React release"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;New Improvements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React.lazy - new streaming server renderer support.&lt;/li&gt;
&lt;li&gt;Automatic batching.&lt;/li&gt;
&lt;li&gt;New APIs (like startTransition).&lt;/li&gt;
&lt;li&gt;Article: What’s coming in React 18 - &lt;a href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html"&gt;https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial will demonstrate a step-by-step guide to create your project using React 18 alpha, Typescript, Vite and deploy it to Vercel (freemium).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-vite-project"&gt;
  &lt;/a&gt;
  Create a Vite project
&lt;/h3&gt;

&lt;p&gt;Required tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;Yarn (npm install yarn -g)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run this command to create your new project:&lt;br&gt;
(Vite is a code generator similar to CRA but it takes &amp;lt; 1s to launch dev mode versus &amp;gt; 45s using CRA)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create @vitejs/app my-project --template react-ts
cd my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the latest React 18 alpha version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add react@alpha react-dom@alpha
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As &lt;code&gt;@types/react&lt;/code&gt; doesn't understand the new React 18's APIs or types yet, we need to update "tsconfig.json" file: after &lt;code&gt;"jsx": "react"&lt;/code&gt; add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"types": ["react/next", "react-dom/next"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the new project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn dev

vite v2.3.7 dev server running at:
  &amp;gt; Local: http://localhost:3000/
  &amp;gt; Network: use `--host` to expose
  ready in 174ms.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! We have React 18 up and running with Typescript! Ready to rock.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6fWXv6R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bzcHGj2/image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6fWXv6R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bzcHGj2/image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploy-to-vercel"&gt;
  &lt;/a&gt;
  Deploy to Vercel
&lt;/h3&gt;

&lt;p&gt;First, we need to build this project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then deploy the build (dist) directory to Vercel:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd dist
npx vercel .

...
✅  Deployed to: https://react-18-ts-vite-app.vercel.app [copied to clipboard] [11s]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, visit the link &lt;a href="https://react-18-ts-vite-app.vercel.app"&gt;https://react-18-ts-vite-app.vercel.app&lt;/a&gt;, we should have the app up and running there:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q3ZI7SYx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/yV7s6WM/image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q3ZI7SYx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/yV7s6WM/image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What’s coming in React 18 - &lt;a href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html"&gt;https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github repository &lt;a href="https://github.com/ngduc/react-18-ts-vite-app"&gt;https://github.com/ngduc/react-18-ts-vite-app&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Please visit &lt;a href="https://nnote.io/s/x4od5/react-18-with-vite-and-vercel"&gt;https://nnote.io/s/x4od5/react-18-with-vite-and-vercel&lt;/a&gt; for the latest updates for this article.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Microagressões em empresas de tecnologia</title>
      <author>Fabrícia Diniz</author>
      <pubDate>Thu, 17 Jun 2021 00:38:55 +0000</pubDate>
      <link>https://dev.to/fabriciadiniz/microagressoes-em-empresas-de-tecnologia-89j</link>
      <guid>https://dev.to/fabriciadiniz/microagressoes-em-empresas-de-tecnologia-89j</guid>
      <description>&lt;p&gt;É cada vez mais comum ver empresas de tecnologia querendo contratar mais mulheres e se esforçando (às vezes não tanto) para criar ambientes inclusivos. A realidade é que &lt;em&gt;essa não é uma construção fácil&lt;/em&gt; e várias atitudes danosas podem passar despercebidas. Hoje eu quero falar especificamente sobre microagressões.&lt;/p&gt;

&lt;p&gt;Antigamente era mais fácil identificar agressões no ambiente de trabalho: eram gritos, um tapa na bunda, diminuição das capacidades das mulheres, etc. Hoje em dia as agressões estão cada vez mais sutis à medida que as mais graves vão sendo combatidas &lt;em&gt;mas o sentimento que as motiva ainda permanece&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As &lt;strong&gt;microagressões&lt;/strong&gt; podem se passar por erros honestos, pois é perfeitamente possível, por exemplo, que uma pessoa não leia uma mensagem e acabe passando por cima do trabalho de uma colega (especialmente nesses tempos remotos que vivemos). Porém, essa ação pode ser motivada por essa pessoa inconscientemente perceber a colega como tendo "menos valor". Se você questioná-la, ela provavelmente vai dizer que não viu a mensagem mesmo, não foi intencional. Para a pessoa que é passada por cima fica aquele sentimento de &lt;em&gt;"será que isso aconteceu mesmo? Será que eu tô enxergando coisa onde não tem?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O grande ponto de observação é se a pessoa tem as mesmas atitudes com colegas homens e mulheres. Apesar de importante critério de "desempate" isso pode não ser fácil de perceber, as diferenças de comunicação podem acontecer em ambientes privados, por exemplo. Além disso, para as pessoas que realizam as microagressões a sua própria culpa não é tão clara. O &lt;em&gt;"me desculpe se você se sentiu ofendida"&lt;/em&gt; é um sinal de que a pessoa não percebe o problema em suas ações e padrão de pensamento e dificilmente tomará alguma ação para melhorar (ou ela nunca aprendeu a se desculpar).&lt;/p&gt;

&lt;p&gt;Agora, o mais importante é: como se lida com uma pessoa que está cometendo uma microagressão se ela não percebe o seu próprio viés mental? Do meu ponto de vista, é preciso que a empresa tome uma ação e não a pessoa que foi vítima. A pessoa na maioria das vezes já não enxerga o seu viés, de forma que é muito fácil apenas descartar as reclamações recebidas. Cobrar que a pessoa que já está se sentindo mal resolva a situação apenas a submete a mais uma agressão.&lt;/p&gt;

&lt;p&gt;Sinceramente, enquanto eu escrevo isso eu consigo visualizar as desculpas sendo dadas e o sentimento de "eu preciso pisar em cascas de ovos perto dessas mulheres mimimizentas". Eu tenho ciência de que essa é uma mudança que raramente pode ser imposta se a pessoa não enxergar valor nela. &lt;strong&gt;E passar o valor dessa mudança talvez seja o grande X da questão.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Normalmente, pessoas do lado mais privilegiado do espectro &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;não percebem seus privilégios;&lt;/li&gt;
&lt;li&gt;nunca precisaram se preocupar com as suas ações estarem sendo danosas a outras pessoas.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vamos de exemplo, inspirado no livro &lt;a href="https://amzn.to/3gHgCKn"&gt;Rápido e Devagar&lt;/a&gt; do Daniel Kahneman: em uma reunião de tomada de decisão, inconscientemente as pessoas tendem a concordar com quem deu a sua opinião primeiro e quem fala mais "alto", com mais convicção. Essa pessoa normalmente não se preocupa que as pessoas estarem acatando o que ela fala o tempo todo representa um silenciamento da colega mulher que fala de forma mais tímida e nunca tem as ideias acatadas. Pessoas assim costumam refletir pouco sobre si mesmas e sobre seus atos, tendendo a depositar a culpa na ação de outras pessoas, não conseguindo ter empatia pela colega que não é ouvida.&lt;/p&gt;

&lt;p&gt;Se esse último parágrafo te incomodou pela generalização, faça um exercício: veja se você consegue anotar pelo menos 3 privilégios que você usufrua no seu dia a dia. Você consegue identificar momentos em que você está sendo privilegiado em detrimento de alguma outra pessoa e você combate isso na vida real e não só na sua cabeça? &lt;strong&gt;Viver usufruindo de privilégios é bem mais fácil do que ter a consciência dos momentos em que eles existem.&lt;/strong&gt; Apenas ter consciência é muito mais fácil do que realmente tomar alguma atitude para equalizar a situação.&lt;/p&gt;

&lt;p&gt;Eu, Fabrícia, ainda enxergo uma barreira a mais. Atualmente as mulheres constituem cerca de 25% dos profissionais de TI no Brasil. Uma porcentagem menor ainda ocupa cargos de liderança. Ou seja, uma mulher tem uma chance enorme de ter um líder homem e esse líder precisa estar ciente de &lt;strong&gt;privilégios&lt;/strong&gt;, &lt;strong&gt;vieses inconscientes&lt;/strong&gt; e &lt;strong&gt;microagressões&lt;/strong&gt; para evitar que o discurso de inclusão seja um discurso vazio só para a empresa sair bem na mídia.&lt;/p&gt;

&lt;p&gt;Considerando o baixo percentual de pessoas de minorias em geral nesses cargos, eu vejo as lideranças tendo um grande trabalho de aprendizagem e reflexão sobre seus próprios privilégios e a maneira como as suas atitudes podem agravar uma microagressão sofrida, mesmo que de forma não intencional, por falta de empatia com aqueles historicamente menos privilegiados.&lt;/p&gt;

&lt;p&gt;A conclusão que eu posso tirar é: se a empresa possui o valor de inclusão de diversidade, &lt;strong&gt;todas as pessoas que trabalham nela precisam ser bastiãs desse valor&lt;/strong&gt;, reconhecendo inclusive ações sutis que o contrariam. Uma boa saída seria promover periodicamente cursos obrigatórios de inclusão que saíssem do básico e entrassem nesses temas mais "espinhosos" e sutis. Para as lideranças, reforço extra no trabalho de empatia. Se a pessoa não enxerga nenhuma vantagem nesse tipo de ação de combate, já começou errado, volte 5 casas.&lt;/p&gt;

&lt;p&gt;Eu espero que esse texto possa trazer alguma reflexão sobre a temática e como sempre estou aberta à continuar a discussão nos comentários.&lt;/p&gt;

</description>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Algorithm Tutorial: Intro to Heaps and Priority Queue Implementation</title>
      <author>Daniel Sasse</author>
      <pubDate>Thu, 17 Jun 2021 00:37:07 +0000</pubDate>
      <link>https://dev.to/dsasse07/what-the-heap-utilizing-a-priority-queue-25j9</link>
      <guid>https://dev.to/dsasse07/what-the-heap-utilizing-a-priority-queue-25j9</guid>
      <description>&lt;p&gt;In this edition of the Algorithm Tutorial series, we're going to break down the &lt;a href="https://en.wikipedia.org/wiki/Heap_%28data_structure%29"&gt;Heap data structure&lt;/a&gt; and and its utilization to implement a priority queue. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-structure"&gt;Heap Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#implementation"&gt;Implementation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#initialization"&gt;Initialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inserting-values"&gt;Inserting Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extracting-values"&gt;Extracting Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#as-a-priority-queue"&gt;As a Priority Queue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-code"&gt;Full Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;Imagine you had a list of values that you had to operate on, and needed to use the values from greatest to least or vice versa. A simple approach, would be to sort the list, and then proceed in the desired order. However, this can become more complicated if new values are continually added to the list, requiring the list to be reordered before you can proceed. Since re-sorting the listed could potentially require comparing the new value to every other entry element in the list, this can become a slow process as the list grows.&lt;/p&gt;

&lt;p&gt;Secondly, imagine the waiting area of an emergency room. As new patients come in, they could simply be added to a queue to wait and see a doctor, however this wouldn't account for the patient's severity of symptoms. A patient suffering from a heart attack, should clearly be a higher &lt;strong&gt;priority&lt;/strong&gt; than someone with a broken toe and should be helped first, even if they joined the queue last. How to we adjust our list/queue to account for priority, despite when it was added?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heap-structure"&gt;
  &lt;/a&gt;
  Heap Structure
&lt;/h3&gt;

&lt;p&gt;What makes a heap faster and more efficient than simply resorting a list over and over is its tree based structure according to is heap property (&lt;em&gt;max&lt;/em&gt; or &lt;em&gt;min&lt;/em&gt;). In a max heap, the root of the tree, will always be the element with the maximum value being used to compare, and for each node of the tree the children of a node must be less than or equal to the value of the node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xvrB7rKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trp21m9bqyee86o351xh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xvrB7rKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trp21m9bqyee86o351xh.png" alt="Tree Representation of a Heap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above, we see a model of a a common heap implementation called a &lt;strong&gt;binary heap&lt;/strong&gt;, specifically a &lt;em&gt;max&lt;/em&gt; heap. If we imagine a new value of 200 being added to the end of the queue (bottom of the tree), instead of comparing it to every other value as you would when sorting an array, you would only need to compare it to its parent to determine if it should be higher in the queue or remain where it is. Utilizing this, it becomes significantly more efficient to insert new values into our heap at the correct position. In terms of Big O notation, this insertion process would be modeled as O(log n) since we have to make &lt;em&gt;at most&lt;/em&gt; one comparison per tier of the tree, whereas comparing potentially every item, O(n), if we were inserting into an already sorted list.&lt;/p&gt;

&lt;p&gt;In terms of working with a heap, the process will vary depending on the language. Python, for example, has the &lt;a href="https://docs.python.org/3/library/heapq.html"&gt;heapq library&lt;/a&gt; which can be imported and worked with immediately, however in Javascript there is no native Heap data structure and it must be implemented manually. Let's walk through how this could be done in Javascript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#initialization"&gt;
  &lt;/a&gt;
  Initialization
&lt;/h4&gt;

&lt;p&gt;To implement a binary max heap in Javascript, we'll start by defining a new class &lt;code&gt;MaxHeap&lt;/code&gt; with a value property of an empty array. We can optionally initialize a &lt;code&gt;size&lt;/code&gt; property to keep count of the number of values in our heap to improve the readability of future code instead of having to write &lt;code&gt;this.values.length&lt;/code&gt; each time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MaxHeap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If a heap is a tree structure, why are we initializing the heap with an empty array?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Any binary tree structure can be stored as an array (as opposed to creating a Tree class) due to the relationship between the index of any single node and both of its child nodes as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3HzR-AK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj55btwp6nbg8gbl96xw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3HzR-AK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj55btwp6nbg8gbl96xw.png" alt="Binary Heap Tree vs Array Structures Comparison"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For any node &lt;code&gt;n&lt;/code&gt;, we can calculate the index of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Its left child = &lt;code&gt;2 * n + 1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Its right child = &lt;code&gt;2 * n + 2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Its parent = &lt;code&gt;Math.floor( (n - 1) / 2 )&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, the root node has an index of 0, with its left child being &lt;code&gt;1&lt;/code&gt; and its right child being &lt;code&gt;2&lt;/code&gt;. Node &lt;code&gt;2&lt;/code&gt;s children would be at indices &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#inserting-values"&gt;
  &lt;/a&gt;
  Inserting Values
&lt;/h4&gt;

&lt;p&gt;To add values to the heap, we will add then to the next empty position in the heap. In the tree structure, this means the value will be in the bottom tier of the tree, in the left-most empty child spot. Comparing this to the array structure, we will be adding it to the end of the array( think &lt;code&gt;.push()&lt;/code&gt; ). Once the value is in the heap, we need to compare it to its parent node(s) and we will swap this new node with its parent if the heap property is currently being violated. &lt;/p&gt;

&lt;p&gt;For instance, in the previous example of inserting 200 into the max heap we would need continue swapping 200 with each parent value until it reached the root since 200 would be the largest value in the entire heap. In the case of a &lt;strong&gt;priority queue&lt;/strong&gt; we would use a similar swap pattern, but we would compare whatever property we define for the priority. This process of swapping the node upwards through the heap goes by a number of names, but I will refer to it as "bubbling up".&lt;/p&gt;

&lt;p&gt;Here is an implementation of how we can insert a new value into the heap. If more than one value is in the heap, we will &lt;code&gt;bubbleUp()&lt;/code&gt;, moving the newest value to its correct position:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MaxHeap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// If no value, do nothing&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="c1"&gt;// Insert the value, and increment the size of the heap&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="c1"&gt;// Check to see if there is not more than 1 item in the heap&lt;/span&gt;
    &lt;span class="c1"&gt;// If there is only 1 item, there is no need to bubble up&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_bubbleUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;_bubbleUp&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// Grab the most recently added value and its parent&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;parentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Swap the new node with its parent until the new node either&lt;/span&gt;
    &lt;span class="c1"&gt;// becomes the root, or is no longer greater than its parent&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;parentIndex&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parentIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parentIndex&lt;/span&gt;
      &lt;span class="nx"&gt;parentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Helper function using object destructuring to swap the elements at two indices&lt;/span&gt;
  &lt;span class="nx"&gt;_swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MaxHeap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="c1"&gt;// Resulting Heap: [100, 36, 19, 25, 7, 1, 17, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#extracting-values"&gt;
  &lt;/a&gt;
  Extracting Values
&lt;/h4&gt;

&lt;p&gt;The purpose of using a heap in this fashion, is to quickly access the max/min value (or the value with the max/mix priority) depending on whether you are using a max or min heap. Because of how it is structure and the "bubbling" mechanism, this value will always be the first item in the heap array we have created, and this is the value we want to extract.&lt;/p&gt;

&lt;p&gt;The problem we have, is that if we simply removed the first item in an array with &lt;code&gt;unshift()&lt;/code&gt;, the entire array would need to be reindexed, as each index would need to be reassigned a new value. The only way to avoid this re-indexing, is if we removed the last item in a list, which is what we will do here by swapping the first and last items in the heap and then extracting.&lt;/p&gt;

&lt;p&gt;Initially after the swap, the rule governing the heap (max/min) will be violated, and we must restore it similar to how we "bubbled up" before. In this case, we will need to compare this new out-of-place value with each of its children, and cause it to "trickle down" until it the heap rule is restored. This process is also sometimes referred to as "sifting down". As we compare the node with each of its children, we will swap with whichever child is greater (in max heap) or lesser (in min heap).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MaxHeap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="cm"&gt;/**
 *
 */&lt;/span&gt;

  &lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="c1"&gt;// Swap the value to be extracted (root) with the last item in the heap&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Remove the value to be extracted &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extractValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
    &lt;span class="c1"&gt;// If there is more than one remaining value, we must restore the heap rule&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_trickleDown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;extractValue&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;_trickleDown&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="cm"&gt;/** 
    * These will be the indexes corresponding to the left and right 
    * child of the node at currentIndex
    * swapIdx will be which of the children the currentIndex will
    * actually switch with, if any
    */&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;leftIdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;swapIdx&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;leftIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="nx"&gt;rightIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="nx"&gt;swapIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="cm"&gt;/**
        * If there is a valid left child and it is greater than the current value,
        * prepare to swap it
        */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;leftIdx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;leftIdx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;swapIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;leftIdx&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="cm"&gt;/**
        * If there is a valid right child and it is greater than the current value,
        * prepare to swap it if we haven't already prepared to swap with left child.
        * If we have prepared to swap with left child, we should only choose to swapIdx
        * with the right child instead if it is greater than the left child, meaning
        * it better fits the heap rule
        */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;rightIdx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;swapIdx&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIdx&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;swapIdx&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIdx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;leftIdx&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;swapIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rightIdx&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;swapIdx&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="c1"&gt;// If no possible swap was ID'd, we're done&lt;/span&gt;
        &lt;span class="c1"&gt;// Swap the parent with the identified child, update the currentIndex, and repeat&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;swapIdx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;swapIdx&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Example Extraction using previously created heap:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="c1"&gt;// [36, 25, 19, 3, 7, 1, 17, 2]&lt;/span&gt;
&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 36&lt;/span&gt;
&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="c1"&gt;// [25, 7, 19, 3, 2, 1, 17]&lt;/span&gt;
&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 25&lt;/span&gt;
&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="c1"&gt;// [19, 7, 17, 3, 2, 1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#as-a-priority-queue"&gt;
  &lt;/a&gt;
  As a Priority Queue
&lt;/h4&gt;

&lt;p&gt;In the emergency room example discussed in the introduction, it would be impractical to keep track of the order to see patients just by the order that they arrived. It makes sense then, to use a priority queue, where the next patient to be seen is the one with the most urgent needs, regardless of when they entered the queue. This is a perfect use case for a heap, but instead of each element in the heap being just a number, there will likely be other information such as a patient name or id#. In this case, when we insert the value into the heap, we could insert it as an object with a key:value pairs for the patient and the priority level. We would then need to adjust the &lt;code&gt;bubbleUp()&lt;/code&gt; and &lt;code&gt;trickleDown()&lt;/code&gt; methods to compare the value of the priority key for each element.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full Code
&lt;/h3&gt;

&lt;p&gt;Combining the code above, below you will find two full samples of heap implementation. The first is for a maxHeap based on the value of the element. The second would be a possible implementation for a _&lt;em&gt;maxHeap priority queue&lt;/em&gt; where the values will be placed according with the highest priority numbers being the first to extract.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Demo Day!</title>
      <author>Gabrielle Easton</author>
      <pubDate>Wed, 16 Jun 2021 23:55:19 +0000</pubDate>
      <link>https://dev.to/ourtimefortech/demo-day-dpa</link>
      <guid>https://dev.to/ourtimefortech/demo-day-dpa</guid>
      <description>&lt;p&gt;Last month my fellowship with CodeCollab came to an end. It was a great opportunity to grow as a developer. The fellowship was full of learning.&lt;/p&gt;

&lt;p&gt;I collaborated with a diverse team. We all gained experience not only working remotely – quite useful nowadays – but also working in different timezones (9 hours apart).  We used GitHub as our collaboration tool. We used GH to keep track of the code and as a task manager. We had all the tasks, features, and bugs we needed to take care of and we held most of the discussions about them there. &lt;/p&gt;

&lt;p&gt;I learned how to prioritize tasks and manage workloads.&lt;br&gt;
I also learned how to be confident working with the tech stack that I wasn’t familiar with. It was intimidating at first, but then I realized that all the frameworks have something in common. &lt;/p&gt;

&lt;p&gt;I also got to experience the power of testing. It became one of my favorite parts of the development process. I learned how to give empathetic feedback and receive feedback with grace. It was difficult to review someone else’s work at first, but it became easier with more experience. I learned how to take ownership of the App as well. &lt;/p&gt;

&lt;p&gt;We finished our fellowship with Demo Day. It was a great way to show a tech community what we had developed and how much we had learned and grown from the experience. I most appreciated how much you can learn from a team with many different backgrounds and experiences.&lt;/p&gt;

&lt;p&gt;Now is to the next adventure!&lt;/p&gt;

&lt;p&gt;Cheers! &lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@ninjason?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jason Leung&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/celebration?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>womenintech</category>
    </item>
    <item>
      <title>tsParticles Fireworks Effect 2.0</title>
      <author>Matteo Bruni</author>
      <pubDate>Wed, 16 Jun 2021 22:39:50 +0000</pubDate>
      <link>https://dev.to/matteobruni/tsparticles-fireworks-effect-2-0-10p9</link>
      <guid>https://dev.to/matteobruni/tsparticles-fireworks-effect-2-0-10p9</guid>
      <description>&lt;p&gt;Here's a CodePen sample for &lt;a href="https://particles.js.org"&gt;tsParticles&lt;/a&gt; for creating a fireworks effect, soon available in a NPM preset package.&lt;/p&gt;

&lt;p&gt;This configuration will work in any component and not only in Vanilla JavaScript, you can use this config also in React, Vue (2.x and 3.x), Angular, Svelte, Riot, Solid, jQuery, Web Components, Inferno and Preact.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/matteobruni/embed/abJQrbK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React, Vue, Angular, Svelte, jQuery, Preact, Inferno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. 🤩&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from the old particles.js library.&lt;/p&gt;
&lt;h2&gt;
&lt;strong&gt;&lt;em&gt;Library installation&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;Hosting / CDN&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please use this hosts or your own to&lt;/em&gt;&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>codepen</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Low-Code Tradeoffs</title>
      <author>Anton Goncharov</author>
      <pubDate>Wed, 16 Jun 2021 22:01:27 +0000</pubDate>
      <link>https://dev.to/antongoncharov/low-code-tradeoffs-3nmo</link>
      <guid>https://dev.to/antongoncharov/low-code-tradeoffs-3nmo</guid>
      <description>&lt;p&gt;I’ve been a low-code developer and architect for few years consulting clients worldwide. Even though “low-code” is a buzzword these days, the concept and its applications have been around for many years. &lt;/p&gt;

&lt;p&gt;As it’s rather trendy today, I see that many companies great and small are tend to fit in low-code platforms for their needs. I have extensive experience working with such backend solutions in different environments and subjects areas. In addition, I participated in designing and building a new visual development platform. It all gave me an idea of sharing my best experience on this topic, and advise decision makers considering low-code could ultimately optimize software development processes in their organizations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-lowcode"&gt;
  &lt;/a&gt;
  What is Low-code?
&lt;/h2&gt;

&lt;p&gt;Low-code, as the name states, is about building applications using abstractions over code to hide its complexity. This usually implies visual programming tools that make it possible to create something by combining ready blocks and configuring their interactions without traditional coding.&lt;/p&gt;

&lt;p&gt;Such a tool rely on code generation, there’s always a powerful translator under the hood. It maps visual “low-code” representation into actual executable code, then wraps it into an deployable framework. Some of the low-code platforms have cloud integrations so they provide an option to publish the built application into a public domain.&lt;/p&gt;

&lt;p&gt;Low-code embrace many use cases, in my post I’d like to focus on the most powerful tools that enable users to build APIs and microservices to automate complex processes from ground up.&lt;/p&gt;

&lt;p&gt;I don’t want to highlight particular vendor platforms. Out of my experience, different solutions in this area have many features in common. All I’ll note below could be applied to a generic low-code visual tool allowing users to build pipelines and services by chaining pre-built blocks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U0xL5yWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10iouks4mild8jaw6rv1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U0xL5yWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10iouks4mild8jaw6rv1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-does-it-shine"&gt;
  &lt;/a&gt;
  Where Does It Shine?
&lt;/h2&gt;

&lt;p&gt;Firstly, I’d want to highlight the low-code usages where it really makes difference without significant tradeoffs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s great for personal use, especially if one has a little or no experience in programming. Today we’ve got a great lot of services and smart devices. Even with a moderate interest in whole variety of applications, there’re scenarios that could make life easier: from IoT shortcuts to convenient data sync between web apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Example: write a pipeline that parses commands from a telegram bot to append new entries to a budget spreadsheet.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For solo developers to automate routine in their pet-projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Example: create a service handling orders from a single-page web shop, integrated with Mailgun API to send and track emails.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For startups to implement a throwaway MVP in order to test a hypothesis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Example: a travel agency has decided to start an affiliate program and now they need to implement a dashboard for affiliates to use. While requirements haven’t yet been gathered and a development team hasn’t been packed up, business analysts may scrap a simple solution using a low-code platform.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lowcode-in-enterprise"&gt;
  &lt;/a&gt;
  Low-Code In Enterprise
&lt;/h2&gt;

&lt;p&gt;There’s always a lot of development going on in big companies. They’re constantly seeking for ways to optimize costs and speed up delivery of new features.&lt;/p&gt;

&lt;p&gt;Low-code may seem to be a silver bullet as it enables more people to write code and accelerates development by reusing ready-to—use blocks. This usually translates to top managers being fascinated by potential benefits of putting development on low-code track.&lt;/p&gt;

&lt;p&gt;My opinion that it’s a popular delusion, and I saw many companies chosen this way but eventually switched back to traditional coding. Below I’ll reason it by listing the frequent issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-challenges"&gt;
  &lt;/a&gt;
  Common Challenges
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;As I noted above, what low-code provides us is a convenient level of abstraction above the code. It’s great for rapid prototyping or in case we’re building something that simple so we don’t need to bother about its internals. As long as we start thinking about how underlying code works, and try to adjust the visual design accordingly, we actually no longer need the low-code layer. It’s a red flag when low-code platform users explain how an application works by using terms of the underlying code. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It generates code from the graphical representation. A platform version upgrade may change implementation details which affect how the visual language is translated to code. It may have implications on your application behavior, and such bugs are very difficult to trace down since the platform internals are hidden.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Typically a low-code IDE lacks tooling for editing and teamwork because for vendors it’s hard to implement and maintain such logic when it comes to visual programming.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git support is at primitive level. It goes smoothly only when there’s fast-forward merging. Other cases are tedious to resolve as even when visual graphs are merged correctly, the conflicts in components’ properties make it a mess.&lt;/li&gt;
&lt;li&gt;Most of low-code IDEs don’t have “find and replace” for strings across blocks inputs. A developer should click through all the components and manually rename target value.&lt;/li&gt;
&lt;li&gt;Some tools may partially provide it, but often there’s no functionality to navigate throughout the project, e.g. “Find Usages”, “Find Duplicates” or “Browse Hierarchy”. And as a consequence, it’s difficult to decouple logic as one can’t quickly jump between dependencies.&lt;/li&gt;
&lt;li&gt;As opposed to no-code platforms, a low-code IDE usually provides a very rudimentary code editor to include snippets of custom code where it’s needed. The editor’s functionality is limited so traditionally developers use another IDE to write code and copy it from there. It increases effort and leads to nasty bugs caused by minor discrepancies between contents of the editors.&lt;/li&gt;
&lt;li&gt;Lack of CI/CD integration in such tools is a common issue, as low-code platforms are by and large designed to be self-reliant having no perspective to participate in broader infrastructure.
&lt;/li&gt;
&lt;li&gt;It’s possible to continue the list since there’re a lot of rough edges when it comes to low-code development tooling. I was occasionally upset not finding any automated testing features or hot reload of a running project. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I watched an interview with Anders Hejlsberg, a creator of Delphi, a visual development tool that was incredibly popular along with Visual Basic at the time when I was a student. He said that “when it comes to visual programming, a line of code is worth a thousand pictures because you just die a slow death in wires going from everywhere to everywhere”. &lt;a href="https://youtu.be/nCVNpwXijVQ"&gt;https://youtu.be/nCVNpwXijVQ&lt;/a&gt; (21:20)&lt;br&gt;&lt;br&gt;
His main point was that visual programming doesn’t scale. I can’t agree more as what I’ve seen in long-living enterprise low-code projects was utter “blocks’n’wires” chaos. The use of off-the-shelf components is designed to greatly template development. But when we need a lot of different blocks with small adjustments, and we can't change their internals, we create new custom blocks, therefore generating more duplicated code.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#everything-has-its-time-and-place"&gt;
  &lt;/a&gt;
  Everything Has Its Time And Place
&lt;/h2&gt;

&lt;p&gt;I love no-code and low-code platforms as they enable lots of creative people to put new ideas into practice. They start new ventures and automate everyday routine by manipulating data in a smart way. &lt;/p&gt;

&lt;p&gt;The visual developments tools emerged a long time ago and will remain with us for a long time to come. New and more elegant products with better UX will appear. As many companies have tried to adapt low-code to their business, I consulted them along this way. After avoiding pitfalls on a few projects, I’ve gained enough experience and insight into the process.&lt;/p&gt;

&lt;p&gt;To summarize, a low-code platform isn’t a good fit for a company where software development is a teamwork and when it has to scale. As of today, none of the tools on the market is suitable for building a full-blown service layer. Most prominent challenges include lack of professional tooling, scalability and infrastructure limitations. There’re great examples of handy low-code tools for enterprises but their main feature is that they effectively address one particular challenge (e.g., monitoring scenarios) not being platforms for building any kind of software.&lt;/p&gt;

</description>
      <category>lowcode</category>
      <category>architecture</category>
      <category>programming</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Why I should care about Mutation Testing?</title>
      <author>Horacio Herrera</author>
      <pubDate>Wed, 16 Jun 2021 21:37:37 +0000</pubDate>
      <link>https://dev.to/horacioh/why-i-should-care-about-mutation-testing-4i92</link>
      <guid>https://dev.to/horacioh/why-i-should-care-about-mutation-testing-4i92</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TLDR: checkout &lt;a href="https://www.youtube.com/watch?v=41ywot_Z_Ts"&gt;this video&lt;/a&gt; made by &lt;a href="https://twitter.com/ThomasChaplin_"&gt;Thomas Chaplin&lt;/a&gt; with a great introduction too! (Spanish video coming soon!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having as much confidence as possible in the code we ship to production is crucial to make sure our customers and users are happy and we can sleep well at nights.&lt;/p&gt;

&lt;p&gt;One way we gain confidence is by testing our code. The reality is that testing is hard, and sometimes we are not sure if our tests are well written. What if I told you that you can avoid this by testing your tests? 😱🤯.&lt;br&gt;
&lt;strong&gt;Here comes Mutation Testing 👹&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RlFk5ads--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwegit5fr1erc24t6ji5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlFk5ads--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwegit5fr1erc24t6ji5.png" alt="Stryker Mutator Man"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mutation testing is a technique that helps you test for multiple outcomes of your code. It analyses the code and make "changes" (mutates/creates a copy of your source code) to see if your tests catch all the mutations added.&lt;/p&gt;

&lt;p&gt;It uses the "mutant" analogy. The idea is to kill all the mutants to make sure your tests are covering all (well, almost all) the possible edge cases and avoid pushing bugs to production. Let's see it with an example:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An Example
&lt;/h2&gt;

&lt;p&gt;Let me explain it with the example from the &lt;a href="https://stryker-mutator.io/docs/#an-example"&gt;stryker mutator&lt;/a&gt; framework (we'll talk about that later).&lt;/p&gt;

&lt;p&gt;Imagine you are building a casino app, and you rely on the above function to not sell anything to minors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isUserOldEnough&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the mutation testing tool will find the return statement and decided to "change it" in several ways:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* 1 */&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/* 2 */&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/* 3 */&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/* 4 */&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ☝️ this are mutants!! ☝️&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after hte mutants are created, your tests will be executed one by one againts all your mutants. If the test at least fails once, we say the mutant is &lt;em&gt;killed&lt;/em&gt;. and that's good!&lt;/p&gt;

&lt;p&gt;If after running our tests the mutant is still alive, then that's an indication that we are not covering some cases that might endup being bugs in production. &lt;strong&gt;The better your tests, the fewer mutants alive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;isn't it cool?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-mutation-testing-and-not-test-coverage"&gt;
  &lt;/a&gt;
  Why Mutation Testing and not Test coverage?
&lt;/h2&gt;

&lt;p&gt;The difference between test coverage and mutation testing is that test coverage checks &lt;strong&gt;How much&lt;/strong&gt; code was executed while Mutation testing check How you &lt;strong&gt;Interact&lt;/strong&gt; with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-start-using-mutation-testing"&gt;
  &lt;/a&gt;
  How Can you start using Mutation Testing?
&lt;/h2&gt;

&lt;p&gt;there are a couple of tools you can use depending on your codebase language. the ne I'm using and learning from is &lt;a href="https://stryker-mutator.io"&gt;Stryker mutator&lt;/a&gt; which is good for JavaScript, Typescript, Scala and C#. You can go and checkout the &lt;a href="https://stryker-mutator.io/docs/stryker-js/getting-started"&gt;Getting Started with StrykerJS&lt;/a&gt; and give it a try!&lt;/p&gt;

&lt;p&gt;I also have some notes about my learning process &lt;a href="https://horacioh.github.io/braindump/mutation-testing"&gt;here&lt;/a&gt; where I have a list of resources and videos about it along with all my &lt;em&gt;cool&lt;/em&gt; findings!&lt;/p&gt;

&lt;p&gt;I'm working on a couple of examples and videos about it so make sure you follow me on &lt;a href="https://hhg.link/twitter"&gt;twitter&lt;/a&gt; for more updates!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gimme-some-feedback"&gt;
  &lt;/a&gt;
  Gimme some feedback!!
&lt;/h2&gt;

&lt;p&gt;Did you like Mutation testing? are you willing to implement it in your codebase? are there any doubts I can help you solve? Please &lt;strong&gt;Add some comments! 👇🏼&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>mutation</category>
      <category>stryker</category>
      <category>coverage</category>
    </item>
  </channel>
</rss>
