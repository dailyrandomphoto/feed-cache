<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>15 Developer Tools to Make You Super Productive</title>
      <author>Tous</author>
      <pubDate>Wed, 29 Sep 2021 09:06:16 +0000</pubDate>
      <link>https://dev.to/hyshah/15-developer-tools-to-make-you-super-productive-405o</link>
      <guid>https://dev.to/hyshah/15-developer-tools-to-make-you-super-productive-405o</guid>
      <description>&lt;p&gt;&lt;span&gt;The best software developers arm themselves with superior knowledge of specific tools that get the job done.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Pairing with experienced developers leaves you with many tips, tricks, shortcuts, and tools that they have access to and mastered to help them focus on a product’s business logic.&lt;/p&gt;
&lt;p&gt;Today, I’ll show you 15 developer tools that’ll improve your productivity immensely.&lt;/p&gt;
&lt;p&gt;Let’s go! &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/top-20-javascript-tips-and-tricks/&amp;amp;ved=2ahUKEwj2rdjc6aPzAhWZyzgGHZ1eCK8QFnoECAcQAQ&amp;amp;usg=AOvVaw1awQy5HljCwnBYNzCuNPb1"&gt;15 Developer Tools to Make You Super Productive&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>devops</category>
    </item>
    <item>
      <title>Understanding TypeScript decorators.</title>
      <author>Siddharth</author>
      <pubDate>Wed, 29 Sep 2021 08:57:44 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/understanding-typescript-decorators-3ifc</link>
      <guid>https://dev.to/siddharthshyniben/understanding-typescript-decorators-3ifc</guid>
      <description>&lt;p&gt;JavaScript is an awesome programming language. And TypeScript has done a great job at filling in the gaps of JavaScript. Not only does it add types, it also implements a few extra features which aren't there in JavaScript &lt;em&gt;yet&lt;/em&gt;. One of them are decorators.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-decorator"&gt;
  &lt;/a&gt;
  What is a decorator?
&lt;/h2&gt;

&lt;p&gt;Decorators have been there in programming languages for a long time. Definitions vary, but in short a decorator is a pattern in JavaScript which is used to wrap something to change it's behavior.&lt;/p&gt;

&lt;p&gt;In both JavaScript and TypeScript this is an experimental feature. In JavaScript, it's still a Stage 2 proposal and you can only use it via transpilers like Babel.&lt;/p&gt;

&lt;p&gt;I've decided to explain TypeScript decorators because in TypeScript it has been standardized, and both are basically the same anyways.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-decorators"&gt;
  &lt;/a&gt;
  Using Decorators
&lt;/h2&gt;

&lt;p&gt;This is a very simple example of how to use a decorator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myDecorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// return something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;myDecorator&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Thing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we define a function &lt;code&gt;myDecorator&lt;/code&gt;, and then we "decorate" a variable (our class &lt;code&gt;Thing&lt;/code&gt; in this case) with the decorator. The decorator can return pretty much anything, but most of the time it used to set properties on the class, etc. Here's a real life sample:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultGun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gun&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ammo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;defaultGun&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, &lt;code&gt;Gun&lt;/code&gt; will have a &lt;code&gt;ammo&lt;/code&gt; property by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ammo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#decorating-functions"&gt;
  &lt;/a&gt;
  Decorating functions
&lt;/h3&gt;

&lt;p&gt;Another place we can use decorators is in class methods. This time, the decorator gets three arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myDecorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyDescriptor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// return something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;myDecorator&lt;/span&gt;
    &lt;span class="nx"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firing in 3... 2... 1... 🔫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first param contains the class where the decorated thing exists (in our case &lt;code&gt;Gun&lt;/code&gt;). The second param is the name of the property decorated (in our case &lt;code&gt;fire&lt;/code&gt;). The last is the property descriptor, which is the output of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor"&gt;&lt;code&gt;Object.getOwnPropertyDescriptor(parent[prop])&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#properties"&gt;
  &lt;/a&gt;
  Properties
&lt;/h3&gt;

&lt;p&gt;You can also decorate properties. It is pretty much the same as function decorators, except there is no third parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myDecorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// return something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#more-places-to-decorate"&gt;
  &lt;/a&gt;
  More places to decorate
&lt;/h3&gt;

&lt;p&gt;You can also decorate in more places. Check out the &lt;a href="https://www.typescriptlang.org/docs/handbook/decorators.html"&gt;documentation&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h2&gt;

&lt;p&gt;There are many uses for decorators. We'll go over some here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calculate-performance"&gt;
  &lt;/a&gt;
  Calculate performance
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;time&lt;/span&gt;
    &lt;span class="nx"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firing in 3... 2... 1... 🔫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;time&lt;/code&gt; could be a function which calculates the execution time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decorator-factory"&gt;
  &lt;/a&gt;
  Decorator factory
&lt;/h3&gt;

&lt;p&gt;Decorators can also be factories, which returns a function which is the actual decorator. This can be useful when you want your decorators need any arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The decorator factory&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The factory will return a new handler&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// We replace the old value with a new one&lt;/span&gt;
        &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then when "decorating" we just need to decorate like a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;ammo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ammo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-practical-example-error-handling"&gt;
  &lt;/a&gt;
  A practical example: error handling
&lt;/h2&gt;

&lt;p&gt;Let's use what we have learned to solve a real world problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ammo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="nx"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firing in 3... 2... 1... 🔫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's assume that to fire, we need at least 1 ammo. We can make a check for that using a decorator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minAmmo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ammo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyDescriptor&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ammo&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;ammo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not enough ammo!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;minAmmo&lt;/code&gt; is a factory decorator which takes a parameter &lt;code&gt;ammo&lt;/code&gt; which is the minimum ammo needed.&lt;/p&gt;

&lt;p&gt;We can use implement it in our &lt;code&gt;Gun&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ammo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;minAmmo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;fireTwice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firing in 3... 2... 1... 🔫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you run &lt;code&gt;fire()&lt;/code&gt;, it won't fire because we don't have enough ammo.&lt;/p&gt;

&lt;p&gt;The nice thing is that we can just reuse this without rewriting an if statement. Suppose we need a &lt;code&gt;fireOnce&lt;/code&gt; method. We can easily implement that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Gun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ammo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;minAmmo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;fireTwice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firing twice in 3... 2... 1... 🔫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;minAmmo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;fireOnce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firing once in 3... 2... 1... 🔫&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This kind of decorator can be really useful authentication. authorization, and all the other good stuff.&lt;/p&gt;




&lt;p&gt;Liked the post? ❤️ it. Loved it? 🦄 it.&lt;/p&gt;

&lt;p&gt;If you want more people to learn about this, &lt;a href="https://twitter.com/intent/tweet?text=Decorators%20are%20one%20confusing%20part%20of%20TypeScript%2C%20since%20it%20is%20something%20which%20doesn't%20exist%20yet%20in%20JavaScript.%20Sound%20Familiar%3F%20Read%20this%20post%20by%20%40SiddharthShyniben%20to%20learn%20more%20about%20Decorators&amp;amp;url=https%3A%2F%2Fdev.to%2Fsiddharthshyniben%2Funderstanding-typescript-decorators-3ifc"&gt;share this on Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Detect active links in Next.js</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 29 Sep 2021 08:22:21 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/detect-active-links-in-next-js-38gj</link>
      <guid>https://dev.to/dailydevtips1/detect-active-links-in-next-js-38gj</guid>
      <description>&lt;p&gt;Now that we have an almost complete Next.js website driven by WordPress let's see how we can detect the active links.&lt;/p&gt;

&lt;p&gt;Feel free to follow along by using this &lt;a href="https://github.com/rebelchris/next-tailwind/tree/layout"&gt;GitHub repo&lt;/a&gt; as your starting point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#migrating-to-nextjs-links"&gt;
  &lt;/a&gt;
  Migrating to Next.js Links
&lt;/h2&gt;

&lt;p&gt;Before we can add our active link check we need to migrate our existing hrefs to the Next.js Link component.&lt;/p&gt;

&lt;p&gt;To do so, open up the &lt;code&gt;Header.js&lt;/code&gt; component and include the Link component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to wrap our href into this Link component like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connectedNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cursor-pointer p-4 ml-2 text-white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This doesn't change the effect we see on the frontend; however, it's the best way to navigate Next.js applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-active-route-check"&gt;
  &lt;/a&gt;
  Adding the active route check
&lt;/h2&gt;

&lt;p&gt;Ok, so now how do we check which is the active link?&lt;/p&gt;

&lt;p&gt;First of all, we need to introduce the &lt;code&gt;useRouter&lt;/code&gt; from the Next router.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And inside our Header function define it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can use a dynamic className on our &lt;code&gt;a&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;
  &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`cursor-pointer p-4 ml-2 text-white &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connectedNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;underline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; hover:underline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the router &lt;code&gt;asPath&lt;/code&gt;, which returns something like &lt;code&gt;/sample-page&lt;/code&gt; to check against the slug we are setting.&lt;/p&gt;

&lt;p&gt;In my case, I have to include the &lt;code&gt;/&lt;/code&gt; in the beginning because it's not set on my slug object.&lt;/p&gt;

&lt;p&gt;And that's it. We now have styled our active pages with an underline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NxYv9VJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632325332369/7kZk7SdxT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NxYv9VJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632325332369/7kZk7SdxT.png" alt="Active link in Next.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And as usual, you can find the complete code on this &lt;a href="https://github.com/rebelchris/next-tailwind/tree/active-link"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Using Doppler In a React-Firebase Application</title>
      <author>Melvin Kosisochukwu</author>
      <pubDate>Wed, 29 Sep 2021 08:20:18 +0000</pubDate>
      <link>https://dev.to/melvinmanni/using-doppler-in-a-react-firebase-application-4co6</link>
      <guid>https://dev.to/melvinmanni/using-doppler-in-a-react-firebase-application-4co6</guid>
      <description>&lt;p&gt;&lt;em&gt;Handling secrets/environment variables on a team/personal codebase can be very stressful. Doppler helps you scale through this problem by providing an environment to store your secrets that you and your team can use. You will like to keep most of these environment variables within the team; hence, it’s not best to push it to a GitHub repository to avoid vulnerability. In this article, we will look through how to implement Doppler with a React-firebase app.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://doppler.com/"&gt;Doppler&lt;/a&gt; is a universal secret manager; this means that you can use doppler to manage secrets across applications within groups with less risk of vulnerability and ease of work. Doppler makes it easy for you to share environment secrets for application and development with your team. It also eases integration with most of your cloud platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why use Doppler ?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scalability: It makes it easy to scale and make changes to environment variables in your application&lt;/li&gt;
&lt;li&gt;Ease of Work: Doppler allows you to focus on the core functionality of your application, removing the complications of sharing environment secrets across team members.&lt;/li&gt;
&lt;li&gt;Doppler supports integration with multiple cloud/hosting platforms for your application.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-doppler"&gt;
  &lt;/a&gt;
  Setting up Doppler
&lt;/h2&gt;

&lt;p&gt;For this tutorial, we will be setting up doppler for a simple react-firebase application; we will look at how to fetch and read the secrets in our application. Before we get started, we need to set up the doppler CLI; I will be walking you through how to do this on a mac.&lt;br&gt;
Run the command below in your terminal to install doppler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;dopplerhq/cli/doppler
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have the doppler CLI installed you can run the &lt;code&gt;doppler&lt;/code&gt; command with the &lt;code&gt;--help&lt;/code&gt; flag to see a list of commands that are supported.&lt;br&gt;
To verify the doppler CLI version we run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;doppler &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am currently working with v3.32.0. Next, I will need to login from my terminal; to do this you run the doppler login command below and select y&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;doppler login
? Open the authorization page &lt;span class="k"&gt;in &lt;/span&gt;your browser? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command will open a browser window and prompt you to enter an auth code that will be made available on the terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GgyZlMX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fut19qwce657zf29yt4a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GgyZlMX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fut19qwce657zf29yt4a.png" alt="Doppler Auth page"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Open the authorization page &lt;span class="k"&gt;in &lt;/span&gt;your browser? Yes
Your auth code is:
kansas_loganberry_jewelry_lime_walnut

Waiting...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you enter the auth command, click next to navigate to the next screen and enter the token name. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a5UZ4gsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5ee6wvrd8pfi6nsn4ww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a5UZ4gsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5ee6wvrd8pfi6nsn4ww.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on finish login, and &lt;em&gt;voila!&lt;/em&gt; CLI authentication to your Doppler account completed. &lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt;:  You will need to log in to your doppler account if you have not previously done this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-reactfirebase-application"&gt;
  &lt;/a&gt;
  Setting Up React-Firebase Application
&lt;/h2&gt;

&lt;p&gt;It's time to set up our application; we will have a simple React application that writes messages and reads all messages written to the firestore. We will also build a rest api with the firebase cloud functions, this will be hosted on firebase. While setting up a firebase application on the console, enable hosting. Once we have everything set up, it's now time to handle integrating the secrets to doppler. I will be setting up the API key for an ip details API on Doppler, thus&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fca3LFg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl97wuezkm1g83m40k9n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fca3LFg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl97wuezkm1g83m40k9n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will be using this API key later in the application. Next, we need to create the firebase functions;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;firebase init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then select functions, the language you want to write your functions in(I will be choosing JavaScript)  and the project to use. Select yes for the rest of the option to successfully create your cloud functions. Once you are done this will create a folder “functions”. Next up is to cd into the folder and install express.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;functions &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install &lt;/span&gt;express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-doppler-in-your-application"&gt;
  &lt;/a&gt;
  Using Doppler in your application
&lt;/h2&gt;

&lt;p&gt;In the root of the folder, create a file called environment.js, this will hold all the env configuration for firebase. In the environment.js file copy and paste in this code;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase-functions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// use firebase config when deployed to firebase&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deployedToFirebase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deployedToFirebase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code block above will check if the app is in production and set the value of config to &lt;code&gt;functions.config().env&lt;/code&gt;. Go into the package.json and update the scripts to use the doppler environments on deploy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"doppler run -- firebase emulators:start --only functions"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"shell"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"doppler run -- firebase functions:shell"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run shell"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"deploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run update_config &amp;amp;&amp;amp; firebase deploy --only functions"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"update_config"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"firebase functions:config:unset env &amp;amp;&amp;amp; firebase functions:config:set env=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;$(doppler secrets download --config prd --no-file --silent)&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"logs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"firebase functions:log"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will set up our firebase api to use doppler environments locally and in production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-secrets-in-firebase-application"&gt;
  &lt;/a&gt;
  Using secrets in firebase application
&lt;/h2&gt;

&lt;p&gt;To use the environment variable, we will need to bring in the config created in the environment.js file, and just like accessing key values pairs in object literals, we will access the API_KEY variable stored on doppler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;environments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./environment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://ipgeolocation.abstractapi.com/v1/?api_key=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;environments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code block above, we import the environment file and use it to access the API_KEY variable, &lt;code&gt;environments.API_KEY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once done with building the API we can deploy it on firebase by running the deploy script;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our react application we will be consuming the api deployed to firebase to write new messages and read all messages written to firestore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we looked at how to integrate doppler in managing secrets in our firebase application. We also looked at consuming the firebase API in our react application.To review full firebase functions and doppler configuration, you can find the source code in this &lt;a href="https://github.com/MelvinManni/doppler-firebase"&gt;GitHub repository&lt;/a&gt;. You can also find the complete frontend source code &lt;a href="https://github.com/MelvinManni/doppler_firebase-fe"&gt;here&lt;/a&gt;. For additional information on integrating Doppler with other applications/platforms, you can refer to the &lt;a href="https://docs.doppler.com/docs"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>firebase</category>
      <category>security</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to Reduce your Android release App size, up to 47% or even more — React Native</title>
      <author>Kyle Buntin</author>
      <pubDate>Wed, 29 Sep 2021 08:11:15 +0000</pubDate>
      <link>https://dev.to/kyle_buntin/how-to-reduce-your-android-release-app-size-up-to-47-or-even-more-react-native-h95</link>
      <guid>https://dev.to/kyle_buntin/how-to-reduce-your-android-release-app-size-up-to-47-or-even-more-react-native-h95</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a3cMTRm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8siwjkp9eh7fqfobx74s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a3cMTRm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8siwjkp9eh7fqfobx74s.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;After finished developing and building your app, you then realise that it is somewhat bigger than what you prefer. &lt;br&gt;
The first thought that comes to your mind is "how can this be reduced?"&lt;br&gt;
Consider using Hermes to achieve this.&lt;/p&gt;

&lt;p&gt;In one of our apps at &lt;a href="https://www.quickcomponent.com/"&gt;Quick Component&lt;/a&gt;, we experienced about 19.2 percent decrease in app size when building release with Hermes. See the image below.&lt;/p&gt;

&lt;p&gt;Without Hermes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KRXHaUeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcbdsytzfloomhvigqtl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KRXHaUeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcbdsytzfloomhvigqtl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Hermes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZdwheTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q3df0l55fglxgh07jsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZdwheTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q3df0l55fglxgh07jsv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also checkout another app where about 47% decrease in app size was experienced using Hermes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQrYGeRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvu8a5j5awtqldzjtz6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQrYGeRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvu8a5j5awtqldzjtz6z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How do we build with Hermes?&lt;br&gt;
You only need to edit one or two files.&lt;/p&gt;

&lt;p&gt;In android/app/build.gradle enable Hermes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; project.ext.react = [     
    entryFile: "index.js",          
    enableHermes: true  // clean and rebuild if changing 
 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, if you're using ProGuard, you will need to add this rule in proguard-rules.pro :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-keep class com.facebook.hermes.unicode.** { *; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, if you've already built your app at least once, clean the build:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd android &amp;amp;&amp;amp; ./gradlew clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now you can build ur release as you would normally do  with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./gradlew bundleRelease
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also note that There are other benefits to using hermes like stated here: &lt;br&gt;
Hermes is an open-source JavaScript engine optimized for running React Native apps on Android. &lt;br&gt;
For many apps, enabling Hermes will result in improved start-up time, decreased memory usage, and smaller app size.&lt;/p&gt;

&lt;p&gt;Also, ensure you're using at least version 0.60.4 of React Native.&lt;/p&gt;

&lt;p&gt;Checkout a fully functioning templates with backend like the &lt;a href="https://www.quickcomponent.com/online-store/React-Native-Dating-App-p394398675"&gt;Dating app&lt;/a&gt;, &lt;a href="https://www.quickcomponent.com/online-store/React-Native-WhatsApp-clone-p262393451"&gt;Whatsapp clone&lt;/a&gt;, &lt;a href="https://www.quickcomponent.com/online-store/UberEats-Clone-p382990645"&gt;UberEats clone&lt;/a&gt; and more built with React Native.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Senior means... ego?</title>
      <author>Keff</author>
      <pubDate>Wed, 29 Sep 2021 08:08:23 +0000</pubDate>
      <link>https://dev.to/nombrekeff/senior-means-ego-4j8f</link>
      <guid>https://dev.to/nombrekeff/senior-means-ego-4j8f</guid>
      <description>&lt;h4&gt;
  &lt;a href="#what-up-everyone"&gt;
  &lt;/a&gt;
  What up everyone! 👋
&lt;/h4&gt;

&lt;p&gt;2 months ago I became a senior in my company (I don't give a crap), and this got me thinking about what these "roles" and "levels" represent. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do they mean anything at all? &lt;/li&gt;
&lt;li&gt;Are they just a reflection of your salary and an ego booster? &lt;/li&gt;
&lt;li&gt;How do they affect junior devs? &lt;/li&gt;
&lt;li&gt;Is it the best way to break down experience levels?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#my-take"&gt;
  &lt;/a&gt;
  My take
&lt;/h3&gt;

&lt;p&gt;In my humble opinion, these labels just indicate the salary and help inflate the devs ego. While making juniors feel less capable just because a label says so, also making them feel like they all should be seniors at some point (&lt;em&gt;which they don't&lt;/em&gt;). If everyone was a senior, the software would be as expensive as Adobe's subscription. &lt;/p&gt;

&lt;p&gt;I think there should be some way of separating experience levels, but they should be split and defined better, now they are too broad and nobody knows where the line is. &lt;/p&gt;

&lt;p&gt;I've seen "juniors" with 2-3 years of experience be more productive and have a better understanding of the job than some "seniors", that were stuck in the past and did not move forwards (making them obsolete). &lt;/p&gt;

&lt;p&gt;What I want to say is, don't give a crap about titles, just do your job right. And don't let titles make you feel better than the rest.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-whats-your-take-on-this"&gt;
  &lt;/a&gt;
  Now, what's your take on this?
&lt;/h3&gt;

</description>
      <category>watercooler</category>
      <category>programming</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>10 DataEngBytes talks you won't want to miss</title>
      <author>Helen Anderson</author>
      <pubDate>Wed, 29 Sep 2021 07:54:12 +0000</pubDate>
      <link>https://dev.to/helenanders26/10-dataengbytes-talks-you-won-t-want-to-miss-33ob</link>
      <guid>https://dev.to/helenanders26/10-dataengbytes-talks-you-won-t-want-to-miss-33ob</guid>
      <description>&lt;p&gt;There are just a few days left until Australia's ultimate data engineering conference. &lt;/p&gt;

&lt;p&gt;It's going to be another big year with &lt;a href="https://dataengconf.com.au/sessions"&gt;more talks than ever&lt;/a&gt;. There is something for everyone, whether you work in a start-up, an established company, or you are just learning the art and science of data engineering.&lt;/p&gt;

&lt;p&gt;Talks are aligned to our four themes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Data at rest&lt;/strong&gt; - data warehousing, data lakes, and data storage.&lt;br&gt;
&lt;strong&gt;- Data in motion&lt;/strong&gt; - event driven architecture, data pipelines, and streaming.&lt;br&gt;
&lt;strong&gt;- Data for machine learning&lt;/strong&gt; - data pipelines for machine learning, productionising models, and managing data artefacts.&lt;br&gt;
&lt;strong&gt;- Data you trust&lt;/strong&gt; - data management, lineage, testing, and security. &lt;/p&gt;

&lt;p&gt;Here are just some of the talks I can't wait to check out during the three-day online conference.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#data-quality-with-great-expectations-and-airflow-in-a-reverseetl-world"&gt;
  &lt;/a&gt;
  Data Quality with Great Expectations and Airflow in a Reverse-ETL World
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fgXfnb-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivmil9vgfu29n1kni0i7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fgXfnb-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivmil9vgfu29n1kni0i7.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Data-driven companies are asking their analytics teams to expose information in the data warehouse to third-party applications. As analytics workflows become increasingly dependent on downstream processes, data quality testing becomes more critical. In this talk, we will see how to leverage the Great Expectations library within an Airflow workflow.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#trust-knowledge-and-your-data-our-approach-at-kada-to-building-a-great-data-product"&gt;
  &lt;/a&gt;
  Trust, Knowledge and your Data: Our approach at KADA to building a great data product
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2T_GqGB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0dul4unuddtzsnryjma.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2T_GqGB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0dul4unuddtzsnryjma.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have spent hours building great data products that failed to gain traction? Did you find users using legacy reports when a better report was available? You're not alone. &lt;/p&gt;

&lt;p&gt;KADA has identified five factors that make a great, trusted data product. This talk will provide examples of how you can improve your data products to make trust and knowledge part of the modern data stack.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#from-experiment-to-production-a-journey-of-a-machine-learning-model"&gt;
  &lt;/a&gt;
  From experiment to production - a journey of a machine learning model
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DszkxGuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/519sfd5rtr856wvfjxcm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DszkxGuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/519sfd5rtr856wvfjxcm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This presentation discusses how to put a machine learning model into production, as well as the infrastructure to support it. &lt;/p&gt;

&lt;p&gt;A natural language processing model will be used as an example of how a model travels through experiment tracking, data artifacts management, data / machine learning pipelines, and into production.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#data-engineers-privacy-is-our-problem"&gt;
  &lt;/a&gt;
  Data Engineers: Privacy is our problem
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WbXueeyg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y1fntd8easdhesqk4je.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WbXueeyg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y1fntd8easdhesqk4je.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Protecting personally identifiable information and ensuring it is used in an ethical manner go hand in hand when collecting data. &lt;/p&gt;

&lt;p&gt;Immuta's director of data and analytics, Stephen Bailey PhD, will discuss the need for data engineers to take on the responsibility of data privacy.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#gone-streaming-dbtmaterialize-in-10-minutes"&gt;
  &lt;/a&gt;
  Gone Streaming: dbt+Materialize in 10 minutes
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lv5apHnr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bmhkh6jpwaaw9wk0ec4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lv5apHnr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bmhkh6jpwaaw9wk0ec4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While dbt excels at batch processing, it can only approximate real-time data transformations. &lt;/p&gt;

&lt;p&gt;Once you run a dbt model on top of Materialize, you never have to run it again! Regardless of how often or how much data arrives, your model will always be updated. No matter when you query your view, it will always return a fresh answer. Excited? Skeptical? Cautiously optimistic? Join us to see it for yourself as we walk you through a demo!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#data-quality-the-key-to-long-term-happiness"&gt;
  &lt;/a&gt;
  Data quality: the key to long term happiness
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QJaWgFks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0s4oqa3hajjgbfmeguuy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QJaWgFks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0s4oqa3hajjgbfmeguuy.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The advent of modern data warehousing has leveled the playing field and turned the focus from data volume to data quality. &lt;/p&gt;

&lt;p&gt;The focus of this presentation will be to review approaches to quantifying data quality at various stages of the collection and processing lifecycle and present tools that can be implemented to help reduce the incidence of erroneous data.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#logging-apache-spark-how-we-made-it-easy"&gt;
  &lt;/a&gt;
  Logging Apache Spark - How we made it easy
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DXuO-6vK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7byl4kh2kwebjmcgz4h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXuO-6vK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7byl4kh2kwebjmcgz4h.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you are running Spark on EMR, how can you improve your log visibility? Rather than ssh and search log files in your servers, this architecture is the perfect solution for you.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#a-single-data-platform-for-all-of-your-workloads"&gt;
  &lt;/a&gt;
  A Single Data Platform for All of Your Workloads
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2yXgMtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23dcottrws0t166sh8ji.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2yXgMtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23dcottrws0t166sh8ji.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many organisations struggle to balance the competing needs of the business, data scientists, data engineers, data analysts, risk and security experts, and the finance department. &lt;/p&gt;

&lt;p&gt;It can be difficult to keep everyone happy by maintaining multiple platforms. Discover how Snowflake simplifies data at rest, data in motion, and data science workloads on a single, secure data platform.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#shiftleft-testing-building-reliable-data-pipelines"&gt;
  &lt;/a&gt;
  Shift-left testing : Building reliable Data Pipelines
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3CZUxzzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91qpvetplme34428rpn9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3CZUxzzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91qpvetplme34428rpn9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unreliable data pipelines can lead to data downtime. During "data downtime," your data may be partial, erroneous, or otherwise incorrect. &lt;/p&gt;

&lt;p&gt;Organisations that rely on data may have to pay a heavy price for low trust data. During this presentation, we'll explore ways to ensure that our system catches unexpected data and easily recovers from it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#intelligent-serverless-and-scalable-realtime-data-pipeline-using-kinesis-fargate-and-cfn"&gt;
  &lt;/a&gt;
  Intelligent Serverless and Scalable Real-Time Data Pipeline using Kinesis, Fargate and CFN
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2-l3skn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrmoiy6inj8lgosxa5vz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2-l3skn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrmoiy6inj8lgosxa5vz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this session, we will discuss a real-world case study of a real-time data pipeline which generates intelligent data in real-time. This pipeline was developed for a large-scale digital media company. Based on the AWS serverless approach, the solution is highly scalable while following best practices in architecture.&lt;/p&gt;




&lt;p&gt;Don't miss out on hearing from these speakers and many more at this years conference. We'll be coming to you online from the 5th - 7th of October so check out the &lt;a href="https://dataengconf.com.au/sessions"&gt;full schedule of sessions&lt;/a&gt; and &lt;a href="https://www.tickettailor.com/events/dataengbytes/505988#"&gt;get your free ticket&lt;/a&gt;. See you soon!&lt;/p&gt;




</description>
      <category>techtalks</category>
      <category>dataengineering</category>
      <category>database</category>
    </item>
    <item>
      <title>EpyNN: Educational python for Neural Networks</title>
      <author>Synthaze</author>
      <pubDate>Wed, 29 Sep 2021 07:51:09 +0000</pubDate>
      <link>https://dev.to/synthaze/epynn-educational-python-for-neural-networks-375p</link>
      <guid>https://dev.to/synthaze/epynn-educational-python-for-neural-networks-375p</guid>
      <description>&lt;p&gt;For those wishing to understand and build from basic implementations of Neural Network architectures, in Python.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Synthaze/EpyNN"&gt;EpyNN - Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://epynn.net"&gt;EpyNN - Documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Why should you build a portfolio?</title>
      <author>abhishekAthreya</author>
      <pubDate>Wed, 29 Sep 2021 07:32:04 +0000</pubDate>
      <link>https://dev.to/abhishekathreya/why-should-you-build-a-portfolio-58e9</link>
      <guid>https://dev.to/abhishekathreya/why-should-you-build-a-portfolio-58e9</guid>
      <description>&lt;p&gt;If you are a web developer and you don't have a portfolio... join the club! Many of us don't have portfolio websites. In this post I will try to convince you on why you should build a (kickass) portfolio -&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#street-cred"&gt;
  &lt;/a&gt;
  Street cred
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DjdCVG8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5soq12h4s7xtmsvjm5p9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DjdCVG8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5soq12h4s7xtmsvjm5p9.gif" alt="Street cred"&gt;&lt;/a&gt;&lt;br&gt;
There is nothing that gives you more street cred that the fact that you can walk to talk. Knowing web development is not enough! You should be willing to do (web development)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creativity"&gt;
  &lt;/a&gt;
  Creativity
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RnMndfgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgx279uxqf6yeed5yz2o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RnMndfgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgx279uxqf6yeed5yz2o.gif" alt="Creativity"&gt;&lt;/a&gt;&lt;br&gt;
When are we building something on our own (especially something like a portfolio) we can open are creative wings fully! The sky is the limit for what we want to have on the site. You want a purple background with blue text? You can do it! You want an image without alternative text? Be my guest! &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enhanced-learning"&gt;
  &lt;/a&gt;
  Enhanced learning
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwVk2ARo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyxlta31zydvk2wxrzzt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwVk2ARo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyxlta31zydvk2wxrzzt.gif" alt="Enhanced learning"&gt;&lt;/a&gt;&lt;br&gt;
I personally believe that the best way to learn development is to actually get going with a project. Hands on experience is irreplaceable for us developers. So, the portfolio can be a nice way for you to pick up new technologies. If you want to learn next.js, try building a portfolio website with it! I promise you that the learnings will be immaculate.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#exposure"&gt;
  &lt;/a&gt;
  Exposure
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---elF06tG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2dtrj5mb5p2aild90uc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---elF06tG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2dtrj5mb5p2aild90uc.gif" alt="Exposure"&gt;&lt;/a&gt;&lt;br&gt;
Personal projects such as portfolios are viewed in brighter light when it comes to hiring and contracting. Building a portfolio may open doors to more business or better job offers!&lt;/p&gt;

&lt;p&gt;Beyond all these reasons, I think that building a portfolio is a nice way for us full-time developers to rekindle our love for building things from scratch.&lt;/p&gt;

&lt;p&gt;Here is something to help you get started - &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WLDGIw6g39c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/thecodestudio"&gt;Buy me coffee&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>typeorm -  nestjs  #migrations #-</title>
      <author>Miguel Ramirez</author>
      <pubDate>Wed, 29 Sep 2021 07:30:32 +0000</pubDate>
      <link>https://dev.to/migueldesa/typeorm-nestjs-migrations-54ag</link>
      <guid>https://dev.to/migueldesa/typeorm-nestjs-migrations-54ag</guid>
      <description>&lt;p&gt;Teniendo en "package.json" la configuración para typeorm con nestjs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXHyVsr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6kgtxma6k1mcau13q2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXHyVsr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6kgtxma6k1mcau13q2r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usamos en consola donde init(es nombre de migración generada):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ceHEfOOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gt9c8bz038xnowimbgnw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ceHEfOOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gt9c8bz038xnowimbgnw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Que a partir de nuestro ormconfig&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f44mfmsL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgxcv99r25qjfep2mzbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f44mfmsL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgxcv99r25qjfep2mzbf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Busca todas las entidades para generar las migraciones correspondientes, Resultado&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e_bxwHyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14pfqlq3lgrcedixcq8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e_bxwHyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14pfqlq3lgrcedixcq8g.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora simplemente ejecutamos la migración inicial creada.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hM2xWvZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rslil3er8o7vchbt5bdo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hM2xWvZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rslil3er8o7vchbt5bdo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;y si las conexiones están bien en la base de datos se crea o generan las tablas o querys correspondientes a la migración inicial.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gc3lyqOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azpxesa7mf4j0zfpo1v9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gc3lyqOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azpxesa7mf4j0zfpo1v9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;listo!.&lt;/p&gt;

</description>
      <category>node</category>
      <category>typescript</category>
      <category>nestjs</category>
      <category>typeorm</category>
    </item>
    <item>
      <title>The End of Dawn - “Let's Encrypt” certificate expiration.</title>
      <author>pramit_marattha</author>
      <pubDate>Wed, 29 Sep 2021 07:17:33 +0000</pubDate>
      <link>https://dev.to/aviyel/the-end-of-dawn-let-s-encrypt-certificate-expiration-4587</link>
      <guid>https://dev.to/aviyel/the-end-of-dawn-let-s-encrypt-certificate-expiration-4587</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3y_f4Ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/xhqGCGhqELUfm1cTT9/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3y_f4Ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/xhqGCGhqELUfm1cTT9/giphy.gif" alt="Lets Encrypt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTTPS is the Web's cryptographic backbone, offering an encrypted and authorized version of HTTP over TLS. The primary use cases for HTTPS when it was first introduced by Netscape twenty-seven years ago were to protect financial transactions and login credentials, but users today face a growing range of threats from hostile networks, including government mass surveillance and censorship, ISP customer profiling, and ad injection, and network device insertion of malicious code, all of which make HTTPS increasingly important. A huge chunk of cryptographic problems in Transport Layer Security have been uncovered and fixed, but low HTTPS adoption posed an even greater threat: recently in 2015, 55–70 percent of browser page loads were still using unencrypted HTTP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZDi9w9l6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1632896647965-untitledletencrypt-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZDi9w9l6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1632896647965-untitledletencrypt-resized.png" alt="Http vs Https"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The deployment of HTTPS was complicated, expensive, and error-prone for server operators, which was a key hurdle to wider adoption. Interactions with Certificate Authorities, which are trusted by Web browsers to confirm a server's identification and provide a digitally signed certificate that binds the identity to the server's public key, were the most difficult part. A server operator had to employ esoteric key generating software and configuration directives, follow laborious processes to show possession of the domain name, and complete a payment transaction to a CA to receive and install a certificate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-lets-encrypt-"&gt;
  &lt;/a&gt;
  Why "Let’s Encrypt" ?.
&lt;/h2&gt;

&lt;p&gt;Let's Encrypt was established to remove these hurdles, encourage widespread adoption of HTTPS, and improve security for all Web users. Let's Encrypt is a free, open, and automated HTTPS certificate authority that was developed to help the entire Web embrace HTTPS it provides domain-validated certificates to server operators using a standard protocol at no cost. Let's Encrypt has grown to become the world's largest HTTPS Certificate Authority since its inception in late 2015, with more presently valid certificates than all other browser-trusted CAs combined altogether. It is the first browser-trusted Certificate Authority built for complete automation: identity validation and certificate issuance are fully automated, with no manual steps required by Web server operators or CA staff. Let's Encrypt uses automation to achieve a number of objectives. It considerably decreases the amount of human effort necessary for HTTPS deployment on the Web server, as well as the possibility of configuration errors that can lead to security issues.&lt;/p&gt;

&lt;p&gt;Let's Encrypt support has been automated in Web server software, Internet of Things devices, big hosting platforms, and Content Delivery Networks. In the Certificate Authority sector, automation improves security by lowering the chances of human mistakes, which has been a common cause of misuse in the past. Let's Encrypt can only validate a domain and issue a certificate using the standard API; there is no manual override. Furthermore, by minimizing human interference, Let's Encrypt is able to keep the cost-per-certificate low and offer certificates for free. This removes two major roadblocks to HTTPS adoption: budgetary constraints and payment friction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-implication-of-lets-encrypt"&gt;
  &lt;/a&gt;
  The implication of Let’s Encrypt.
&lt;/h2&gt;

&lt;p&gt;Let’s Encrypt has issued billions of certificates covering millions of domain names in barely over six years of existence. Let's Encrypt has issued more valid browser-trusted certificates than all other Certificate Authorities combined altogether. It is governed and run by the Internet Security Research Group, a non-profit organization (ISRG). Operating a CA necessitates a 24-hour operations personnel, physically secure server infrastructure, and frequent security and compliance audits, all of which are overseen by ISRG. ACME, a protocol for handling CA–server interactions such as certificate requests, domain validation, issuance, renewal, and revocation, is at the heart of Let's Encrypt's automation. Boulder, an open-source ACME-based Certificate Authority implementation designed for security, scalability, and high dependability, is at the core of Let's Encrypt.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aviyel.com/post/997/the-end-of-dawn-let-s-encrypt-certificate-expiration"&gt;Click Here for full article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="https://twitter.com/AviyelHq"&gt;@aviyelHQ&lt;/a&gt; or &lt;a href="https://aviyel.com/discussions"&gt;sign-up&lt;/a&gt; on Aviyel for early access if you are a project maintainer, contributor, or just an Open Source enthusiast.&lt;/p&gt;

&lt;p&gt;Twitter =&amp;gt;&lt;a href="https://twitter.com/AviyelHq"&gt;https://twitter.com/AviyelHq&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official Site =&amp;gt; &lt;a href="https://aviyel.com/discussions"&gt;https://aviyel.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>certificates</category>
      <category>security</category>
      <category>letsencrypt</category>
      <category>dstrootca3</category>
    </item>
    <item>
      <title>How to land a programming job when your resume sucks</title>
      <author>Tomasz Smykowski</author>
      <pubDate>Wed, 29 Sep 2021 06:40:22 +0000</pubDate>
      <link>https://dev.to/tomaszs2/how-to-land-a-programming-job-when-your-resume-sucks-1f5p</link>
      <guid>https://dev.to/tomaszs2/how-to-land-a-programming-job-when-your-resume-sucks-1f5p</guid>
      <description>&lt;p&gt;For a while now I am trying young developers and designers to land a job with successes. Just s notice: i am not a recruiter. I am working as a software engineer and designer for sixteen years. I have been in hundreds of job interviews. I was also recruiting as a company owner and supporting interviews for software houses. Have seen hundreds of CVs. I have seen who was hired and who not. Based on my experience I will tell you some bulletproof tips how to help yourself to land a job if your CV sucks. Let’s start.&lt;/p&gt;

&lt;p&gt;Prove you know stuff&lt;/p&gt;

&lt;p&gt;Usually you don’t have to have a higher degree of education to land a job. But you have to prove you have knowledge in the area you are applying to. But how to do it if you don’t have money or time to finish higher education? There are methods to accomplish it.&lt;/p&gt;

&lt;p&gt;Look for state funds for courses, etc. If you don’t have such possibilities just find online free courses. Especially with a certificate at the end. Finish those courses according to the job you want to apply to. Add them all to your CV. Recruiters love courses and certificates. These prove you are committed to excel in the profession and self improve.&lt;/p&gt;

&lt;p&gt;Remove unimportant stuff&lt;br&gt;
Now, when your CV is filled with courses and certificates, remove stuff that is not connected with the job you apply to. Important stuff should be on top. So if your formal education is not helpful put it at the bottom. Limit the space to describe it.&lt;/p&gt;

&lt;p&gt;Also remove short job things and positions from your CV if they are not important for the job.&lt;/p&gt;

&lt;p&gt;Expand what is connected&lt;/p&gt;

&lt;p&gt;On the other hand, if you had any job position or did anything connected with the job position, write several sentences to describe what you was doing in a way that indicates what you have learned (soft skills are also important because these are transferrable).&lt;/p&gt;

&lt;p&gt;Remove unimportant stuff for the job&lt;br&gt;
You may think your CV should describe your whole life. Not, it should not. Keep one CV with everything. But prepare separate for specific job position and remove unimportant stuff. I know you spend a lot of time for something totally different. But recruiter won’t think: “ah, we needed a developer, but he is perfect at pottery. I will ask around, maybe someone needs a pottery expert.”. No one thought that way. Remember that your CV sucks already, and you want to become a developer or designer, not a pottery expert!&lt;/p&gt;

&lt;p&gt;Add contact info&lt;br&gt;
Your phone number and email are enough.&lt;/p&gt;

&lt;p&gt;Use a template&lt;br&gt;
Find a free template and use it. Make sure it looks clear. Your best bet is minimalism. It will make it easier to edit it, and read. Don’t aim for fully blown CV design because design trends change quickly. Your best bet is minimalism.&lt;/p&gt;

&lt;p&gt;Build a portfolio&lt;br&gt;
People think building a portfolio is difficult. It is not. You don’t apply for a Picasso role. Your portfolio should show (show!) you do some nice stuff similar to what company does. So scoop through company website, make some designs following the design company likes, check what trends are popular. Focus on the visuals. Not about creating full product. No one expects that.&lt;/p&gt;

&lt;p&gt;Learn new stuff&lt;br&gt;
There are always new things that companies use. These fresh new things that employees of companies learn very slow because the have work to do... Your best bet is to check job descriptions and learn these things. For example for web design Tailwind is a hot potato. For design — Figma (2021). Your best bet is to learn it, and put info about how you have learned it in your CV.&lt;/p&gt;

&lt;p&gt;Be fast&lt;br&gt;
You should monitor job offers and once you find a job that fits your expectations you should immediately adjust CV, portfolio to this job. Don’t focus on a general CV for hundreds of companies if your CV sucks. Put a directed effort to win that one job. Prepare and send your application ASAP. Tomorrow is too late.&lt;/p&gt;

&lt;p&gt;Be available&lt;br&gt;
Once you have sent your application you should be available 24/7 on your email and phone. You put a lot of effort and at this point your best bet is to be the first. Usually recruiters don’t have too much time, and they want to hire ASAP.&lt;/p&gt;

&lt;p&gt;Don’t give up&lt;br&gt;
I wrote you should aim for one job offer. However it does not mean you should send only one application. Send as much as you can, while sticking to the process described above. Improve your proofs, CV and portfolio during the process.&lt;/p&gt;

&lt;p&gt;— -&lt;/p&gt;

&lt;p&gt;When you will follow the process, your CV and portfolio will become better and better with every day. To the point, when hiring you will likely become a unevitable consequence of what you offer.&lt;/p&gt;

&lt;p&gt;Imagine you are a recruiter and someone sends you a CV that proves a person took all measures available to prepare for the job while being limited by mundane life reality.&lt;/p&gt;

&lt;p&gt;If you can’t imagine this, I will tell you how it looks like from a perspective of person who looked at hundreds of CVs: it looks like ultimate gold. Because I’ve been there and know how hard it is to figure out what to do to get yourself a job when your CV sucks.&lt;/p&gt;

&lt;p&gt;That is why I am sharing these tips with you. I am sure only one of hundred of readers will try it out. Because you have to put some effort into it. And it is fine, as long, as that one person is you.&lt;/p&gt;

&lt;p&gt;When it will work for you don’t forget to let me know via comments or social media. I love to hear from people who succeeded.&lt;/p&gt;

</description>
      <category>career</category>
      <category>react</category>
      <category>vue</category>
      <category>design</category>
    </item>
  </channel>
</rss>
