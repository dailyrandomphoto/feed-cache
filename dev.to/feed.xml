<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Amazing Image Slider Using Flickity &amp; JS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Tue, 11 May 2021 14:17:04 +0000</pubDate>
      <link>https://dev.to/nikhil27b/image-slider-using-flickity-js-4g8h</link>
      <guid>https://dev.to/nikhil27b/image-slider-using-flickity-js-4g8h</guid>
      <description>&lt;p&gt;Today I created a simple Image Slider Using Flickity &amp;amp; JS. In this image slider, I use flickity and some jquery also to animate the slider. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/oNZjdmg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Project Ideas</title>
      <author>Danish Saleem</author>
      <pubDate>Tue, 11 May 2021 14:04:19 +0000</pubDate>
      <link>https://dev.to/mrdanishsaleem/javascript-project-ideas-3og8</link>
      <guid>https://dev.to/mrdanishsaleem/javascript-project-ideas-3og8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#1-quiz-application"&gt;
  &lt;/a&gt;
  1. Quiz Application&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKy3YeXX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yitwpqb1b8ho6rdq1bu0.jpg" alt="Quiz Application"&gt;
&lt;/h3&gt;

&lt;p&gt;Choose a topic that interests you and create a dynamic quiz using JavaScript. Keep track of the users score and notify them which answers are correct. As an added challenge add a timer to each question.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-form-validation"&gt;
  &lt;/a&gt;
  2. Form Validation&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmhApPGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkl03kc9fwz2njo6sreg.jpg" alt="Form Validation"&gt;
&lt;/h3&gt;

&lt;p&gt;Create a user input form that ensures that users are correctly filling in inputs with correct types and restraints. Form validation is common in front-end development and necessary to mitigate security risks. Add CSS classes that turn the input red on incorrect submission.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-tetris-game"&gt;
  &lt;/a&gt;
  3. Tetris Game&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z3txQup6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e97pz9ysfazbt1s4wk27.png" alt="Tetris Game"&gt;
&lt;/h3&gt;

&lt;p&gt;Using &lt;a href="https://www.w3schools.com/html/html5_canvas.asp"&gt;HTML5 canvas&lt;/a&gt; and JavaScript you can create a fun interactive game. JavaScript can be used to create fully-fledged games in the browser or an external game engine platforms. Be sure to check out external 2D and 3D libraries to integrate with your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-javascript-clock"&gt;
  &lt;/a&gt;
  4. JavaScript Clock&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EyX6w1eV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a55gzbq5de6ygqlzy40d.gif" alt="JavaScript Clock"&gt;
&lt;/h3&gt;

&lt;p&gt;Learning how to work with time in JavaScript is important. First, display the current time in your current location. Then, allow the user to change time zones. Checkout &lt;a href="https://momentjs.com/"&gt;MomentJS library&lt;/a&gt; when working with displaying dates and times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-chat-application"&gt;
  &lt;/a&gt;
  5. Chat Application&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9naP4V66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irty1gya3x7fniyhcbbl.png" alt="Chat Application"&gt;
&lt;/h3&gt;

&lt;p&gt;This project gives you the opportunity to work on both front-end and back-end skills. This project also requires you learn about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket"&gt;websockets&lt;/a&gt; for real-time connection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-mp3-player"&gt;
  &lt;/a&gt;
  6. MP3 Player&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FkEdEHmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc2grdxrcvrspvuarmyw.jpg" alt="MP3 Player"&gt;
&lt;/h3&gt;

&lt;p&gt;Learn to interact with audio files using JavaScript. Build out the UI to play, pause, stop and restart and audio recording. Once you've learn to create your own MP3 player, look into libraries such as &lt;a href="https://www.npmjs.com/package/amplitude-js"&gt;AmplitudeJs&lt;/a&gt; and &lt;a href="https://aplayer.js.org/#/"&gt;APlayer&lt;/a&gt; to avoid rolling your own.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-javascript-animation"&gt;
  &lt;/a&gt;
  7. JavaScript Animation&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fykw5qpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8iw1ef3j1agz2cam6ni.gif" alt="JavaScript Animation"&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript has a variety of animation libraries that are definitely worth exploring. In fact, all of the previous projects can incorporate some animations.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>DB max connection limits for Rails app and Postgres, Redis, Puma settings</title>
      <author>Artur Trzop</author>
      <pubDate>Tue, 11 May 2021 14:04:15 +0000</pubDate>
      <link>https://dev.to/arturt/db-max-connection-limits-for-rails-app-and-postgres-redis-puma-settings-427h</link>
      <guid>https://dev.to/arturt/db-max-connection-limits-for-rails-app-and-postgres-redis-puma-settings-427h</guid>
      <description>&lt;p&gt;Configuring the database connections pool for the Rails app might not be a straightforward task for many programmers. There is a constraint of max opened connections on a database level. Your server environment configuration can change in time and affect the number of connections to the database required. For instance number of servers you use can change when you autoscale it based on the web traffic. It means that the number of web processes/threads running for Puma or Unicorn servers could change. All this adds additional complexity. When you use two databases (e.g. Postgres + Redis), everything gets more complex. In this article, we will address that. You will learn how to estimate needed database connections for your Ruby on Rails production application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-available-database-connections-matter"&gt;
  &lt;/a&gt;
  Why do available database connections matter?
&lt;/h2&gt;

&lt;p&gt;The first question is, why do you need to care about available database connections? The answer is simple. Suppose you configured your Ruby application to open too many DB connections. In that case, it could happen that you will get &lt;code&gt;ActiveRecord::ConnectionTimeoutError&lt;/code&gt; exceptions from the application when the database cannot handle more new connections from your Rails app. It can result in 500 errors visible for your web app users.&lt;/p&gt;

&lt;p&gt;This problem might not be apparent immediately. Often you will find out about it in production. Your application might work just fine until specific circumstances cause the Rails app to need more DB connections, which can trigger exception flood. Let's see how to avoid it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ror-application-configuration-step-by-step"&gt;
  &lt;/a&gt;
  RoR application configuration step by step
&lt;/h2&gt;

&lt;p&gt;Let's break a typical Ruby on Rails application down into smaller components that use databases.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have a Rails application that uses the Postgres database for ActiveRecord usage.&lt;/li&gt;
&lt;li&gt;We also use the Redis database for background workers like Sidekiq.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It looks simple, isn't it? Let's start with that, and later on, we will add more complexity to the mix :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#postgres-database-connections-how-to-check-the-limit"&gt;
  &lt;/a&gt;
  Postgres database connections - how to check the limit?
&lt;/h2&gt;

&lt;p&gt;How to check how many available connections do you have for Postgres?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you use a dedicated server with Postgres installed, then most likely you have a default &lt;code&gt;max_connections&lt;/code&gt; which is typically 100 connections.&lt;/li&gt;
&lt;li&gt;If you use a Postgres instance on the AWS, then you need to check the AWS documentation to find out what's the max allowed connections to your database instance (it depends on if you use Amazon RDS or Aurora and what is server instance class)&lt;/li&gt;
&lt;li&gt;If you use Heroku, you can check the &lt;code&gt;Connection Limit&lt;/code&gt; for the &lt;a href="https://elements.heroku.com/addons/heroku-postgresql#pricing"&gt;Postgres Heroku add-on&lt;/a&gt; to check max acceptable connections.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#activerecord-connection-pool"&gt;
  &lt;/a&gt;
  ActiveRecord connection pool
&lt;/h2&gt;

&lt;p&gt;In your Rails application, the &lt;code&gt;config/database.yml&lt;/code&gt; file contains the &lt;code&gt;pool&lt;/code&gt; option. As explained in the &lt;a href="https://edgeguides.rubyonrails.org/configuring.html#database-pooling"&gt;Rails docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Active Record database connections are managed by &lt;code&gt;ActiveRecord::ConnectionAdapters::ConnectionPool&lt;/code&gt;, which ensures that a connection pool synchronizes the amount of thread access to a limited number of database connections.&lt;/p&gt;

&lt;p&gt;Since the connection pooling is handled inside of Active Record by default, all application servers (Thin, Puma, Unicorn, etc.) should behave the same. The database connection pool is initially empty. As demand for connections increases, it will create them until it reaches the connection pool limit.&lt;/p&gt;

&lt;p&gt;Any one request will check out a connection the first time it requires access to the database. At the end of the request, it will check the connection back in. This means that the additional connection slot will be available again for the next request in the queue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;pool&lt;/code&gt; can be defined this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgresql&lt;/span&gt;
  &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;blog_production&lt;/span&gt;
  &lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or as a part of a URL to the database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;development&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgresql://localhost/blog_production?pool=5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The URL option is popular when you host a database on an external server like Amazon RDS. Then you could define the URL this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres://blog_production:PASSWORD@blog-production.abcdefgh.eu-west-1.rds.amazonaws.com/blog_production?sslca=config/rds-combined-ca-bundle.pem&amp;amp;pool=5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that for the production, you should not commit credentials in the &lt;code&gt;config/database.yml&lt;/code&gt; file. Instead, store it in environment variables and then read the value at your Rails app's runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV['DB_URL'] %&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-does-activerecord-connection-pool-affects-postgres-max-connections"&gt;
  &lt;/a&gt;
  How does ActiveRecord connection pool affects Postgres max connections?
&lt;/h2&gt;

&lt;p&gt;Let's start with a simple example. Your application may use one of the application servers like Puma or Unicorn. Let's focus on Puma because it's more complex as it has a separate configuration for several processes (known as workers in Puma terms) and threads. Unicorn runs in a single thread only. It works exactly like Puma with a single thread setting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9t46W4Nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anyygqvyacwzatn3tfhb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9t46W4Nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anyygqvyacwzatn3tfhb.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#puma-config-1-process-and-1-thread"&gt;
  &lt;/a&gt;
  Puma config: 1 process and 1 thread
&lt;/h3&gt;

&lt;p&gt;Let's say you use the Puma server to run the Rails application. The Puma is configured to run 1 process (worker) and it has only 1 thread.&lt;/p&gt;

&lt;p&gt;The puma process can open up to 5 connections to the database because the &lt;code&gt;pool&lt;/code&gt; option is defined as 5 in &lt;code&gt;config/database.yml&lt;/code&gt;. Typically, there are fewer connections than that because when you run 1 process and only 1 thread, only 1 connection to the Postgres database will be needed to make a database query.&lt;/p&gt;

&lt;p&gt;Sometimes the database connection might be dead. In such a case, ActiveRecord can open a new connection, and then you may end up with 2 active connections. In the worst-case scenario when 4 connections would be dead, then Rails can open 5 connections max.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#puma-config-1-process-and-2-threads"&gt;
  &lt;/a&gt;
  Puma config: 1 process and 2 threads
&lt;/h3&gt;

&lt;p&gt;If you use 2 threads in a single Puma process (worker) then it means those 2 threads can use the same pool of DB connections within the Puma process.&lt;/p&gt;

&lt;p&gt;It means that 2 DB connections will be open out of 5 possible. If any connection is dead, then more connections can be opened until the 5 connection pool limit is reached.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#puma-config-2-processes-and-2-threads-per-process"&gt;
  &lt;/a&gt;
  Puma config: 2 processes and 2 threads per process
&lt;/h3&gt;

&lt;p&gt;If you run 2 Puma processes (workers) and each process has 2 threads then it means that each single process will open 2 DB connections because you have 2 threads per process. You have 2 processes so it means at the start of your application, there might be 4 DB connections open. Each process has its pool, so you have 2 pools. Each pool can open up to 5 DB connections. It means that in the worst-case scenario, there can be even 10 connections created to the database.&lt;/p&gt;

&lt;p&gt;Assuming you use 2 threads per Puma process, it's good to have the &lt;code&gt;pool&lt;/code&gt; option set to 2 + some spare connections. It allows ActiveRecord to open a new connection if one of the DB connections is dead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#puma-config-2-processes-and-2-threads-and-2-web-dynos-on-heroku"&gt;
  &lt;/a&gt;
  Puma config: 2 processes and 2 threads, and 2 web dynos on Heroku
&lt;/h3&gt;

&lt;p&gt;If you use Heroku to host your application, it allows scaling your web application horizontally by adding more servers (dynos). Assume you run your application on 2 servers (2 Heroku dynos), each dyno is running 2 Puma processes, and each process has 2 threads. It means at the start, your application may open 6 connections to the database. Here is why:&lt;/p&gt;

&lt;p&gt;2 dynos X 2 Puma processes X 2 Puma threads = 6 DB connections&lt;/p&gt;

&lt;p&gt;2 dynos X 2 Puma process X Pool size (5) = Total pool size 20&lt;/p&gt;

&lt;p&gt;It means that in the worst-case your application may open 20 DB connections.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#autoscaling-web-application"&gt;
  &lt;/a&gt;
  Autoscaling web application
&lt;/h4&gt;

&lt;p&gt;If you autoscale your web servers by adding more servers during the peak web traffic, you need to be careful. Ensure your application stays within the Postgres max connections limit. The above example shows you how to calculate expected opened DB connections and the worst-case scenario.  Please adjust your pool size to ensure that you will be below the max connections limit for your database engine in the worst-case scenario.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-else-can-open-db-connections"&gt;
  &lt;/a&gt;
  What else can open DB connections?
&lt;/h2&gt;

&lt;p&gt;We just talked about a webserver like Puma that can open connections and consume your max DB connections limit. But other non-web processes can do it as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You run Rails console on production in a Heroku dyno &lt;code&gt;heroku run bin/rails console --app=my-app-name&lt;/code&gt;. It runs an instance of your Rails app, and 1 DB connection will be open. In the worst-case scenario, the number of connections defined in the &lt;code&gt;pool&lt;/code&gt; can be opened. But it's unlikely that your DB connections would go dead. So the whole pool limit shouldn't be used.&lt;/li&gt;
&lt;li&gt;You run scheduled rake tasks via Heroku Scheduler (cron-like tool). If the rake tasks are performed periodically, they need to open a connection to the DB so that at least 1 DB connection is used from the pool per rake task. Imagine you have 10 rake tasks that are started every hour. It means you need 10 available DB connections every hour. It can be easy to miss this if you base your estimation on just the web connections.&lt;/li&gt;
&lt;li&gt;You use background workers like Sidekiq to perform async jobs. Your jobs may open DB connections. We will talk about it later.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#background-worker-sidekiq-and-activerecord-pool"&gt;
  &lt;/a&gt;
  Background worker - Sidekiq and ActiveRecord pool
&lt;/h2&gt;

&lt;p&gt;Sidekiq process will use the pool defined in &lt;code&gt;config/database.yml&lt;/code&gt; similarly as Puma. All Sidekiq threads in a Sidekiq process can use a common pool of connections.&lt;/p&gt;

&lt;p&gt;If you run multiple servers (Heroku dynos), then it works similarly to the Puma example.&lt;/p&gt;

&lt;p&gt;2 servers (dynos) X 1 Sidekiq process X 10 Sidekiq threads = 20 DB connections will be open.&lt;/p&gt;

&lt;p&gt;You need to have a pool size of at least 10 in &lt;code&gt;config/database.yml&lt;/code&gt; because Sidekiq by default, uses 10 threads.&lt;/p&gt;

&lt;p&gt;If you use a pool size lower than 10 then Sidekiq threads will be fighting for access to limited connections in the pool. It could be fine for some time, but you should be aware that this can increase your job's processing time because not all Sidekiq threads will use DB connections in parallel. It can also lead to &lt;a href="https://github.com/mperham/sidekiq/wiki/Problems-and-Troubleshooting#cannot-get-database-connection-within-500-seconds"&gt;a problem described here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sidekiq-and-redis-database-connections"&gt;
  &lt;/a&gt;
  Sidekiq and Redis database connections
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nY4vai6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ft3c0g5s4g2cljxkryr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nY4vai6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ft3c0g5s4g2cljxkryr.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sidekiq uses the Redis database to store async jobs. It would be best if you calculate DB connections to Redis as well as Postgres connections. A Sidekiq server process requires at least (concurrency + 5) connections. The &lt;code&gt;concurrency&lt;/code&gt; option is the number of Sidekiq threads per Sidekiq process.&lt;/p&gt;

&lt;p&gt;Using the previous example:&lt;/p&gt;

&lt;p&gt;2 servers (dynos) X 1 Sidekiq process X 10 Sidekiq threads = 2 servers (dynos) X 1 Sidekiq process X (10 + 5) = 30 Redis connections required.&lt;/p&gt;

&lt;p&gt;More in &lt;a href="https://github.com/mperham/sidekiq/wiki/Using-Redis#complete-control"&gt;Sidekiq docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redis-database-connections"&gt;
  &lt;/a&gt;
  Redis database connections
&lt;/h2&gt;

&lt;p&gt;If you use Redis for processing background jobs, then it's not just the Sidekiq process that is using Redis connections. Your Puma process and threads can use Redis to add new jobs to the Sidekiq queue as well. Typically you will have 1 Redis connection per 1 Puma thread.&lt;/p&gt;

&lt;p&gt;If you explicitly open a new Redis connection with &lt;code&gt;Redis.new&lt;/code&gt;, this can create a new connection per the Puma thread as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;We covered a few examples of Postgres and Redis on calculating DB connections needed by your Rails application. I hope this will give you a better understanding of how to estimate how many DB connections you need on your database level to serve your application's demands properly.&lt;/p&gt;

&lt;p&gt;If you are looking to improve your Rails application workflow please consider checking how to &lt;a href="https://docs.knapsackpro.com/2020/how-to-speed-up-ruby-and-javascript-tests-with-ci-parallelisation"&gt;run automated tests in parallel on your CI server&lt;/a&gt; with &lt;a href="https://knapsackpro.com/?utm_source=devto&amp;amp;utm_medium=blog_post&amp;amp;utm_campaign=devto-estimate-database-connections-pool-size-for-rails-application"&gt;Knapsack Pro&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>database</category>
      <category>redis</category>
      <category>postgres</category>
      <category>rails</category>
    </item>
    <item>
      <title>How we choose programming languages at Typeable</title>
      <author>Catherine Galkina</author>
      <pubDate>Tue, 11 May 2021 14:03:40 +0000</pubDate>
      <link>https://dev.to/typeable/how-we-choose-programming-languages-at-typeable-3mnc</link>
      <guid>https://dev.to/typeable/how-we-choose-programming-languages-at-typeable-3mnc</guid>
      <description>&lt;p&gt;Author: Denis Redozubov&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGHT372L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/pls.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGHT372L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/pls.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was asked several times, why I prefer using such programming languages as Haskell and Rust since they are not the most widely used and popular tools. I’ve written this post to demystify what is going on in my head when I think about the technology selection.&lt;/p&gt;

&lt;p&gt;Developing software that must meet the requirements for long-term operation and defined reliability level is in a sense similar to a chess play. In both cases, it’s rather difficult for the human brain to comprehend scenarios. Experience is of great importance, and every move/choice can be critical. Further resemblance implies that, just like in chess, development is very much positional, i.e. a whole set of moves can be focused on preparation for a maneuver which results in winning a single pawn. It might appear that it’s merely one pawn but in a serious game it may become a considerable advantage. Similarly to a positional game over the chess board, the development and evolution of large-scale projects involve constant decision-making focused on solving major tasks or implementing the project requirements. The effect of all, even minor, solutions tends to accumulate by the endgame or by the moment the software product is in operation. However, the difference complicating the situation is that, unlike chess, software development is not solved using a computer. You can’t find the best moves just by running a computer engine. That is why it is necessary to make many decisions incrementally leading us to this goal, and all means of improving our position are worth using.&lt;/p&gt;

&lt;p&gt;In the nutshell, solutions can be divided into several categories: architectural, procedural, and instrumental. Architectural solutions show the way we structure the project. Procedures define how we organize the work process and assure the implementation quality and correctness. Instruments, in their turn, determine what the development team should use to achieve the goal. Today, the end-to-end software development is carried out using a large number of tools: you need to formalize the requirements and the development process, write the software code and test it, assemble the release etc. Despite this flow of tasks, selection of programming language can be of the greatest importance because this choice determines the following set of parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Performance baseline.&lt;/li&gt;
&lt;li&gt;Peculiarities of the software distribution and operation, for example, the interpreter’s requirement or the static linking ability.&lt;/li&gt;
&lt;li&gt;Ecosystem of reusable libraries and components. I’d like to note that it is not only the number of libraries that matters but also the quality of those relevant for you.&lt;/li&gt;
&lt;li&gt;Possibilities of parallel/concurrent/asynchronous operation of the programs, which may be important for many systems.&lt;/li&gt;
&lt;li&gt;The difficulty people face when learning the technology, which influences significantly both the language community and the developer retraining.&lt;/li&gt;
&lt;li&gt;Language expressiveness which is somewhat subjective, but still being felt by developers.
Additionally, the selection of programming language can have a strong influence on the structure of development. For instance, the language ecosystem tools may determine the way unit tests are written and the tests scope. A good infrastructure for property tests can give a boost to move in this direction, while the lack of good infrastructure for unit tests can make their development and support more challenging.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The tools also influence architecture-related issues – reuse of the system modules is linked to how easy it is from the conceptual viewpoint to divide the units and structure the code. For instance, explicit work with the effect systems enables better code generalization and allows making sure that the software code unit doesn’t perform any input/output operations, such as network and disk operations. This allows talking about the safety and architecture.&lt;/p&gt;

&lt;p&gt;Considering this, you should be aware that the correct selection of programming language for your project and team may have far-reaching implications. Keeping in mind the chess analogy, we remember that every minor advantage contributes a point in favor of the language and can play a significant role in a large-scale development. It should also be noted that I’m talking about selecting the development tools in situations which set no strict constraints on technology selection relating, for instance, to a large ecosystems already written in a certain language. At Typeable, we are guided by the following reasons for general-purpose languages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The programming language should support static typing. This allows the developer to reduce the duration of each iteration of the code modification and validation. This also allows reducing the number of bugs significantly, both in terms of functional requirements and software safety.&lt;/li&gt;
&lt;li&gt;Algebraic data types – it’s difficult to overestimate the influence of this feature as soon as you start using it. This is a simple feature, absolutely necessary for invariant modeling. Sum types are also so indispensable that selecting a language where you need to simulate them using other constructs means creating obstacles at the first step.&lt;/li&gt;
&lt;li&gt;Flexibility of support and execution of multithreaded programs. Languages with GIL (Global Interpreter Lock) fail to meet this requirement from the very beginning. It’s desirable to be able to maximize the hardware utilization and work with sufficiently high-level abstractions.&lt;/li&gt;
&lt;li&gt;A sufficient ecosystem of libraries. We also subjectively assess their quality. We don’t think it necessary to connect everything in the form of libraries, but such basic things as bindings to popular databases should be available.&lt;/li&gt;
&lt;li&gt;Clear minds in the community of developers who work with this language. A developer we would like to see in our team should be interested in CS and development. This is opposed by “easy-to-learn” technologies tempting people to join IT for the sake of easy money, which greatly dilutes the workforce.&lt;/li&gt;
&lt;li&gt;We should have programming languages in our toolbox that allow creating the software meeting strict time and memory requirements.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Considering all of the above, our toolbox should allow us to hold a steady position in any project going our way. Going back to the chess analogy, these are our principles that let us play a highly positional game. Positional game is a game aimed at creating a long-term position that opens up possibilities for the player and minimizes the weaknesses. It is opposed to an attack-oriented game, i.e. “sharp game” associated with higher risks. The attacking player strives to end the game before the opponent is able to take up a strong defense. Sharp development includes programming contests, MVP for marketing experiments, many data science tasks and, in many cases, software development for Computer Science publications. They are similar in that they usually don’t require any long-term support as they just have to work for a definite period of time. On the other hand, positional game means a long-term play where maintainability and updateability are the key characteristics. This is exactly what we do, and we need a solid foundation to be sure that the software we write and update can operate for a long time. Though such projects can also start as MVP, they are based on quite different assumptions.&lt;/p&gt;

&lt;p&gt;So why do we select the technology based on exactly these considerations? Multiple reasons can be given. First of all, it’s a good idea to exclude the issues of technology fashion and trendiness to improve predictability over a large timespan. Even though a time-proven compiler with an active community is a conservative option, this choice is reliable in contrast to new flashing options popping up every year. Surely, some of them will move from the last category to the first one but we will know this only later, probably in a number of years. Instead of the fashion trends, we strive to use the fundamental Computer Science and the great number of research works devoted to this topic which have been applied in the programming languages we use. For example, the type theory is a discipline close to both mathematics and CS, dealing with the fundamental issues of requirements formalization. This is exactly what we need to write software. Besides, this is the combined experience of other people engaged in "exact" sciences, and I believe, it's absurd to ignore this experience. It makes more sense to take such discipline as a basis rather than use nothing or use a subjective opinion based on the personal experience of a particular individual.&lt;/p&gt;

&lt;p&gt;Secondly, we are looking for the programming languages and compilers embracing the largest possible number of our principles. This is why, in addition to our favorite Haskell, we’ve put Rust in our toolbox. For real-time requirements and strict constraints on memory utilization, we need something rather low-level. The typing strictness in C is still far from perfect, so if we can use Rust for such tasks, we’d prefer doing this.&lt;/p&gt;

&lt;p&gt;The third reason is that we create software primarily for our clients and we’d like to protect them from our biases. That’s why can’t exceed a certain risk level agreed with the client when we select a tool. But even under these conditions we’ve got rather marginal technologies such as GHCJS, because the complex analysis of pros and cons still produced an attractive picture for us and our clients. We wrote already about how we arrived at this decision: &lt;a href="https://dev.to/typeable/comparing-elm-with-reflex-2mme"&gt;Elm vs. Reflex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All means and theoretical justifications are worth using when you work with large code bases and complex software as you have to keep this complexity in check somehow. Our idea of a correct approach is to protect every pawn, improve our position gradually and carefully, so that the project could exist in a good and stable state until the moment it’ll play pivotal role for our clients’ businesses.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>programming</category>
      <category>haskell</category>
      <category>rust</category>
    </item>
    <item>
      <title>MovingPoint-Lightweight-Java-2D-Game-Engine</title>
      <author>Marco Steinke</author>
      <pubDate>Tue, 11 May 2021 14:02:39 +0000</pubDate>
      <link>https://dev.to/marcosteinke/movingpoint-lightweight-java-2d-game-engine-2m7l</link>
      <guid>https://dev.to/marcosteinke/movingpoint-lightweight-java-2d-game-engine-2m7l</guid>
      <description>&lt;p&gt;Find repo here: &lt;a href="https://github.com/MarcoSteinke/MovingPoint-Lightweight-Java-2D-Game-Engine"&gt;https://github.com/MarcoSteinke/MovingPoint-Lightweight-Java-2D-Game-Engine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1 Beginner Friendly / Educational&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I love programming and I also love teaching it to other persons, so the main goal of MovingPoint is to bring new motivated talents into programming. + A lot of people dream of creating their own games, MovingPoint gives them a first impression of Game Design + Even childs with basic Java skills could use this to create simple games like TicTacToe or Snake!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2 Operating System Independence&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;since MovingPoint is written in pure Java, you can run it on any Operating System&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3 Hardware Independence&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MovingPoint is lightweight, you do not need the latest hardware to build your games. + You also do not need to import all modules, only use the code which you need to build your project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4 Use all Java libraries!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yes it is true. You can run any libraries and connect them to MovingPoint + You are able to create Browsergames by running a Java Webapplication and importing MovingPoint. + Also usable to create Android Apps by using Android Studio!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5 Open source&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since I am coding for around 5 years and I tried out many different things, this is my first try on writing a Game Engine, so I want everybody to help me with the development. + You are able to use the Engine as you want to. Modify it, give me tips and together we can create a new experience of Game Design.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>POINTERS IN C-LANGUAGE</title>
      <author>Yarakaraju Jahnavi</author>
      <pubDate>Tue, 11 May 2021 14:02:29 +0000</pubDate>
      <link>https://dev.to/jahnavi1351/pointers-in-c-language-4oie</link>
      <guid>https://dev.to/jahnavi1351/pointers-in-c-language-4oie</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                       POINTERS IN C
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;•Every variable is a memory location and every memory location has its address defined which can be accessed using ampersand (&amp;amp;) operator, which denotes an address in memory.&lt;/p&gt;

&lt;p&gt;•A pointer is a variable whose value is the address of another variable, i.e., direct address of the memory location. Like any variable or constant, you must declare a pointer before using it to store any variable address.&lt;/p&gt;

&lt;p&gt;•The general form of a pointer variable declaration is:&lt;br&gt;
    type *var-name;&lt;/p&gt;

&lt;p&gt;Here,&lt;br&gt;
   -- type is the pointer's base type (it must be a valid C &lt;br&gt;
      datatype).&lt;br&gt;
   -- var-name is the name of the pointer variable.&lt;br&gt;
   -- * used to declare a pointer.&lt;/p&gt;

&lt;p&gt;•Some of the valid pointer declarations are as follows −&lt;br&gt;
    int    &lt;em&gt;ip;          /&lt;/em&gt; pointer to an integer &lt;em&gt;/&lt;br&gt;
    double *dp;    /&lt;/em&gt; pointer to a double &lt;em&gt;/&lt;br&gt;
    float  *fp;        /&lt;/em&gt; pointer to a float &lt;em&gt;/&lt;br&gt;
    char   *ch        /&lt;/em&gt; pointer to a character */&lt;/p&gt;

&lt;p&gt;•The actual data type of the value of all pointers, whether integer, float, character, or otherwise, is the same, a long hexadecimal number that represents a memory address. The only difference between pointers of different data types is the data type of the variable or constant that the pointer points to.&lt;/p&gt;

&lt;p&gt;USAGE OF POINTERS:&lt;/p&gt;

&lt;p&gt;(a) We define a pointer variable.&lt;br&gt;
(b) Assign the address of a variable to a pointer.&lt;br&gt;
(c) Finally access the value at the address available in the pointer variable.&lt;br&gt;
•This is done by using unary operator * that returns the value of the variable located at the address specified by its operand.&lt;br&gt;
•Example:&lt;br&gt;
   #include &lt;br&gt;
   int main () &lt;br&gt;
   {&lt;br&gt;
     int  var = 20;   /* actual variable declaration &lt;em&gt;/&lt;br&gt;
     int  *ip;        /&lt;/em&gt; pointer variable declaration &lt;em&gt;/&lt;br&gt;
     ip = &amp;amp;var;  /&lt;/em&gt; store address of var in pointer variable*/&lt;br&gt;
     printf("Address of var variable: %x\n", &amp;amp;var  );&lt;br&gt;
        /* address stored in pointer variable &lt;em&gt;/&lt;br&gt;
     printf("Address stored in ip variable: %x\n", ip );&lt;br&gt;
     /&lt;/em&gt; access the value using the pointer */&lt;br&gt;
     printf("Value of *ip variable: %d\n", *ip );&lt;br&gt;
     return 0;&lt;br&gt;
   }&lt;/p&gt;

&lt;p&gt;•When the above code is compiled and executed, it produces the following result −&lt;br&gt;
   --  Address of var variable: bffd8b3c&lt;br&gt;
   -- Address stored in ip variable: bffd8b3c&lt;br&gt;
   -- Value of *ip variable: 20&lt;/p&gt;

&lt;p&gt;NULL POINTERS&lt;/p&gt;

&lt;p&gt;•It is always a good practice to assign a NULL value to a pointer variable in case you do not have an exact address to be assigned. This is done at the time of variable declaration. A pointer that is assigned NULL is called a null pointer.&lt;/p&gt;

&lt;p&gt;•The NULL pointer is a constant with a value of zero defined in several standard libraries. Consider the following program −&lt;/p&gt;

&lt;p&gt;•EXAMPLE&lt;br&gt;
    #include &lt;br&gt;
    int main () &lt;br&gt;
    {&lt;br&gt;
      int  *ptr = NULL;&lt;br&gt;
      printf("The value of ptr is : %x\n", ptr  );&lt;br&gt;
      return 0;&lt;br&gt;
    }&lt;/p&gt;

&lt;p&gt;•When the above code is compiled and executed, it produces the following result −&lt;/p&gt;

&lt;p&gt;--The value of ptr is 0&lt;/p&gt;

&lt;p&gt;--In most of the operating systems, programs are not permitted &lt;br&gt;
    to access memory at address 0 because that memory is reserved &lt;br&gt;
    by the operating system. &lt;br&gt;
  --However, the memory address 0 has special significance; it &lt;br&gt;
    signals that the pointer is not intended to point to an &lt;br&gt;
    accessible memory location. But by convention, if a pointer &lt;br&gt;
    contains the null (zero) value, it is assumed to point to &lt;br&gt;
    nothing.&lt;br&gt;
  --To check for a null pointer, you can use an 'if' statement as &lt;br&gt;
    follows −&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    if(ptr)     /* succeeds if p is not null */
    if(!ptr)    /* succeeds if p is null */
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>coding</category>
      <category>clanguage</category>
      <category>pointers</category>
      <category>learn</category>
    </item>
    <item>
      <title>📷 survAPI Surveillance Camera Analysis</title>
      <author>Marco Steinke</author>
      <pubDate>Tue, 11 May 2021 14:01:29 +0000</pubDate>
      <link>https://dev.to/marcosteinke/survapi-surveillance-camera-analysis-3ago</link>
      <guid>https://dev.to/marcosteinke/survapi-surveillance-camera-analysis-3ago</guid>
      <description>&lt;p&gt;❓ Need surveillance, but low on server capacity?&lt;br&gt;
💡 Train the camera to know when to record.&lt;/p&gt;

&lt;p&gt;find my Repository here: &lt;a href="https://github.com/MarcoSteinke/survAPI-Surveillance-Camera-Analysis"&gt;https://github.com/MarcoSteinke/survAPI-Surveillance-Camera-Analysis&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  ⚡ Introduction:
&lt;/h2&gt;

&lt;p&gt;This implementation demonstrates a Security-Camera Software which was written in javascript and uses cocossd offered by ml5 to detect objects.&lt;/p&gt;

&lt;p&gt;The application is secured using express-session and bcrypt. This way only authenticated users can access your surveillance and you are able to allow registrations and create new roles to control this system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  ❓ Problem:
&lt;/h3&gt;

&lt;p&gt;A business needs a security camera, but is low on server capacity. Thatswhy the business can not store videos 24/7.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  💡 Solution:
&lt;/h3&gt;

&lt;p&gt;Using Machine Learning, we can tell the camera when it has objects in view and use a lightweight backend to store the timestamps and also the type of objects which where detected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#classification"&gt;
  &lt;/a&gt;
  Classification:
&lt;/h3&gt;

&lt;p&gt;After detection, the software later classifies them as certain targets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#persistence"&gt;
  &lt;/a&gt;
  Persistence
&lt;/h3&gt;

&lt;p&gt;If the classified object is one of the targets, it will be persisted in the database by giving information on its type and also adding a timestamp and date. Now we know when to start recording and stop after a predefined amount of time passed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improvements-over-conventional-security-cameras"&gt;
  &lt;/a&gt;
  💪 Improvements over conventional Security Cameras:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;installation is very easy and very customizable due to Open Source Technology&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a clean webinterface makes your cameras accessible and configurable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;detection of persons is a standard problem of Machine Learning and already has a very high precision&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;destroy video material in which nothing happens, you will only store critical/important moments&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⭐ advance your security by getting additional information from your camera.&lt;/p&gt;

&lt;p&gt;⭐ super simple setup.&lt;/p&gt;

&lt;p&gt;⭐ modern dashboard and webpages to access the cameras.&lt;/p&gt;

&lt;p&gt;⭐ combine any hardware with this software.&lt;/p&gt;

&lt;p&gt;⭐ SurvAPI: The included surveillance API also offers all of the analysis tool to be called from other frameworks.&lt;/p&gt;

&lt;p&gt;⭐ lightweight and fast.&lt;/p&gt;

&lt;p&gt;⭐ optimized amount of video data.&lt;/p&gt;

&lt;p&gt;⭐ Machine Learning used to detect certain targets.&lt;/p&gt;

&lt;p&gt;⭐ predefine intervals to control data produced by the camera.&lt;/p&gt;

&lt;p&gt;⭐ very simple database structure&lt;/p&gt;

&lt;p&gt;⭐high security level by using bcrypt&lt;/p&gt;

&lt;p&gt;🏛️ Architecture:&lt;br&gt;
The project will be separated into the subsystems Camera, Surveillance, Database, Webviews where each subsystem exactly solves one of the given business problems.&lt;/p&gt;

&lt;p&gt;To guarantee clean code, this project will profit from Domain Driven Design and from Self Contained System’s.&lt;/p&gt;

&lt;p&gt;Camera:&lt;br&gt;
The subsystem will fulfill the HARDWARE-part in this project. All types of cameras (which you find right below under Compatibility) will be connected via this subsystem. It defines a domain model which projects the real world properties of cameras into code and offers its configured cameras to all of the other subsystems. All of the input will run through this subsystem.&lt;/p&gt;

&lt;p&gt;Surveillance:&lt;br&gt;
The surveillance will process video material received from any video source, configured in the Camera subsystem. It makes use of ML5 and analyses the material based on the admins preferences. The analysis results will be persisted in the Database subsystem. It usually is not a separate subsystem, but for this project it will do best if the database can completely be substituted behind an interface which connects the Webviews and the Surveillance to it.&lt;/p&gt;

&lt;p&gt;Database:&lt;br&gt;
Use any type of database you want and store all of the analysis results. You can access the persisted data by using the Webviews or build your own UI to access it.&lt;/p&gt;

&lt;p&gt;Webviews:&lt;br&gt;
Basically a frontend which can be accessed from any webbrowser. You can configure the cameras, inspect detections in a nice way and get watch live material from your surveillance cameras.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>How To Create A Simple Alert For An onbeforeunload Event (Closing Browser or Navigating Away From Page)</title>
      <author>Tia Eastwood</author>
      <pubDate>Tue, 11 May 2021 14:01:23 +0000</pubDate>
      <link>https://dev.to/tiaeastwood/how-to-create-a-simple-alert-for-an-onbeforeunload-event-closing-browser-or-navigating-away-from-page-6ph</link>
      <guid>https://dev.to/tiaeastwood/how-to-create-a-simple-alert-for-an-onbeforeunload-event-closing-browser-or-navigating-away-from-page-6ph</guid>
      <description>&lt;p&gt;Sorry I couldn't think of a shorter title!&lt;/p&gt;

&lt;p&gt;Here is a useful little snippet for if you have a page like a checkout or a survey and you want to warn people about leaving the page before they've completed it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  window.onbeforeunload = (event) =&amp;gt; {
    if (whatever your condition is here) {
      return true;
    }
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The alert gives the user the option to confirm or cancel their navigation. Alerts should never stop someone from leaving a page or closing their browser though; that's a big no-no.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--otWwI7ZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eotwcxupmnjioicharbi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--otWwI7ZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eotwcxupmnjioicharbi.PNG" alt="An example of a browser alert"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An onbeforeunload event occurs when the document (the current page of your site/application) is about to be unloaded (closed/exited). A example of this would be someone closing the browser window or clicking a link to a different page.&lt;/p&gt;

&lt;p&gt;Most browsers will show a default message like "changes you've made will not be saved". You can't edit this message, but it does the job as a warning. Due to this, you don't need to return any specific content or message in the function, just return true in order for it to work. &lt;/p&gt;

&lt;p&gt;This function will be called when an onbeforeunload event occurs. If the condition inside is met, then the function will return true and the alert will be shown. So all you need to do is apply a condition to decide when the alert will be shown. For example, if using this in a React application, then the condition could be based on a certain state. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [isSurveyCompleted, setIsSurveyCompleted] = useState(false)

  window.onbeforeunload = (event) =&amp;gt; {
    if (!isSurveyCompleted) {
      return true;
    }
  };

// the alert will appear if the user tries to close the browser window because they haven't completed the survey.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are other ways of achieving this sort of behaviour, such as using Prompt in react-router, but if you're just looking for a simple solution then I hope this helps! If you have anything to add, please leave a comment.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>🎉🎉7000 subscribers on my Dev YouTube Channel. </title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 11 May 2021 13:28:12 +0000</pubDate>
      <link>https://dev.to/thenerdydev/7000-subscribers-on-my-dev-youtube-channel-2172</link>
      <guid>https://dev.to/thenerdydev/7000-subscribers-on-my-dev-youtube-channel-2172</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0fIbvz1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2d85mrqniuv74f54j0m.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0fIbvz1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2d85mrqniuv74f54j0m.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I just completed &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7000-i-have-worked-very-hard-to-reach-this-small-number-nothing-big-but-enough-to-carry-the-momentum-forward-"&gt;
  &lt;/a&gt;
  7000 (I have worked very hard to reach this small number. Nothing big but enough to carry the momentum forward 😉)
&lt;/h2&gt;

&lt;p&gt;subscribers on my YouTube Channel. If you are looking to learn programming, make sure to check out my YouTube Channel. I have loads of tutorials on &lt;strong&gt;JavaScript&lt;/strong&gt;, &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;Machine Learning&lt;/strong&gt; (&lt;em&gt;to name a few&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In case you haven't checked out the channel yet&lt;/em&gt;, &lt;/p&gt;

&lt;p&gt;👉🏻 Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Lastly I would like to thank 🙏🏻 creators like &lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__412316"&gt;
  
    .ltag__user__id__412316 .follow-action-button {
      background-color: #212121 !important;
      color: #ffffff !important;
      border-color: #212121 !important;
    }
  
    &lt;a href="/thenetninja" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzXxYhGh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--NtwgwZi---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/412316/ef33827e-3f6a-4ed3-bd30-bcba089fa66a.jpeg" alt="thenetninja image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/thenetninja"&gt;Shaun&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/thenetninja"&gt;Shaun, aka the Net Ninja on YouTube. Enjoy coding, travelling, coffee, gaming &amp;amp; astronomy.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
, &lt;div class="ltag__user ltag__user__id__137487"&gt;
  
    .ltag__user__id__137487 .follow-action-button {
      background-color: #0030b3 !important;
      color: #ffffff !important;
      border-color: #0030b3 !important;
    }
  
    &lt;a href="/traversymedia" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AhIoWcIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--A_-VNNFb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/137487/f8c1607f-f10b-4bf2-b719-0bac0e29068c.jpg" alt="traversymedia image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/traversymedia"&gt;Brad Traversy&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/traversymedia"&gt;/traversymedia&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
 for inspiring me to start my own Dev Channel. I have myself learnt a lot from them. 

&lt;p&gt;👉🏻 &lt;strong&gt;UPDATE&lt;/strong&gt; : I am working on a &lt;strong&gt;BRAND&lt;/strong&gt; new &lt;strong&gt;FREE&lt;/strong&gt;- &lt;strong&gt;Web Developer Full Course&lt;/strong&gt; on YouTube , check the below article to know more about the topics that we cover in this course:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Also if you have a few spare hours then utilize them by creating these &lt;strong&gt;10 JavaScript Projects in under 2 Hours&lt;/strong&gt; &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/10-javascript-projects-in-2-hours-3p1c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 JavaScript Projects in 2 Hours&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Oct 26 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Why use a css framework when you can use vanilla css?</title>
      <author>Akshat Singhania</author>
      <pubDate>Tue, 11 May 2021 13:08:49 +0000</pubDate>
      <link>https://dev.to/akshatsinghania/why-use-a-css-framework-when-you-can-use-vanilla-css-3n81</link>
      <guid>https://dev.to/akshatsinghania/why-use-a-css-framework-when-you-can-use-vanilla-css-3n81</guid>
      <description>&lt;h3&gt;
  &lt;a href="#using-a-css-framework-for-projects-is-quite-common-these-days-whether-it-be-big-projects-or-small-side-projects-but-why-do-devs-use-a-css-framework-anyway"&gt;
  &lt;/a&gt;
  Using a CSS framework for projects is quite common these days whether it be big projects or small side projects but why do dev's use a CSS framework anyway
&lt;/h3&gt;

&lt;p&gt;While making a website, it is a tough job to make headers/navbars with minor feature like disappearing it on mobiles and making a menu instead, handle pads and tablets screen sizes, dropdowns so talking about these we come to our first point&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Premade features for easy use and faster development times&lt;br&gt;
though implementing a normal feature like a login page might be easy and quick, adding elements like errors and dialog boxes might be a long and time-consuming task especially dealing with edge cases like overlapping on different screen sizes, messed up animations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Huge community/organization support for bug fixes, and implementation for many browsers, screen sizes over the years the framework has existed, that means you can get relieved for common problems in older browsers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Help to learn CSS , just getting started with CSS and styling , well it takes a lot of time to learn CSS and proper styling of webpages, you might not know about flex boxes and the new grid layout, well the CSS framework already the easier way to implement it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They come with documentation. If you need help getting started, the framework generally comes with some support files. This can be particularly nice if you are designing a site you will be handing off to a client. You can just let them know what framework you used and refer them to that documentation for support requests.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>bootstrap</category>
      <category>libary</category>
      <category>readthis</category>
    </item>
    <item>
      <title>Project: Basic Authentication System</title>
      <author>Ulzahk</author>
      <pubDate>Tue, 11 May 2021 13:05:22 +0000</pubDate>
      <link>https://dev.to/ulzahk/project-basic-authentication-system-2mjp</link>
      <guid>https://dev.to/ulzahk/project-basic-authentication-system-2mjp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#project-structure"&gt;Project Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#authentication-level-zero"&gt;Authentication Level Zero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#authentication-level-one"&gt;Authentication Level One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#authentication-level-one-advantages-disadvantages"&gt;Authentication Level One Advantages and Disadvantages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you hear or see the word authentication you relate it to identification and that is a correct approach to this term. We just need to add permissions to perform a specific action in an app and we will have a more complete definition for the technology area.&lt;/p&gt;

&lt;p&gt;In this project we are going to have a series of authentication systems in order to better understand what they need, how they are built and how they work. &lt;/p&gt;

&lt;p&gt;Of course being these kind of security systems, they need something to protect, in this occasion we established a list of Pokémon cards with which the user will get the permission to see them and interact with the search engine to sort them in order of pokemon type or by the name of the pokemon.&lt;/p&gt;

&lt;p&gt;For this post we will cover the first authentication structure. So let's get started&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We will use two repositories, one to manage the visual part, user interface and forms with technologies such as React for the development of interfaces, Sass to style those interfaces and Webpack to compile the application in a lighter and more adaptable format for browsers.&lt;/p&gt;

&lt;p&gt;The second repository will be used to handle requests, database queries and information transformation. We will use technologies such as Node to be able to handle JavaScript from the Backend side, Express to create endpoints faster and PostgreSQL to handle the connection to this type of database and queries.&lt;/p&gt;

&lt;p&gt;Finally we have the servers these would be the platforms, Vercel to host both parts working and ElephantSQL that offers PostgreSQL databases ideal for projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication-level-zero"&gt;
  &lt;/a&gt;
  Authentication Level Zero &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBkM5le4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk2q90lr7vafsz3gq92j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBkM5le4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk2q90lr7vafsz3gq92j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to understand how the project would be if it did not have authentications, this section is created where it is simulated that the data is exposed and any user can manipulate it without having permissions to do so.&lt;/p&gt;

&lt;p&gt;It is also a quick way to know what we are protecting, a list of cards of the first generation Pokémons. By fetching the information from PokéAPI, we get pokémons with their name, types, an image that represents them and their identifier as a label.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication-level-one"&gt;
  &lt;/a&gt;
  Authentication Level One &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0WOh7q2Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g32y7d0lsj2wwk728kv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0WOh7q2Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g32y7d0lsj2wwk728kv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this first level we are going to build a simple login with username and password without email verification. In order to understand how it would be useful to us and what disadvantages it presents.&lt;/p&gt;

&lt;p&gt;This will start to work the moment the user fills the form for the creation of an account correctly and presses the create account button. This will send a request to the Backend, to confirm if the data is correct, mainly that all the data is complete. &lt;/p&gt;

&lt;p&gt;If so, the password is encrypted first, then the new user's information is written into the database, and then a correct response is sent to the Frontend to redirect the user to the login form.&lt;/p&gt;

&lt;p&gt;This can be seen in the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nocYMQXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqcxavew58uw064o6irx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nocYMQXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqcxavew58uw064o6irx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here I share the function that handles the endpoint (file UsersController.js):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class UsersController{
  async createUser(req, res){
    const {body: user} = req;
    try {
      const createdUser = await usersService.createUser({ user });
      res.status(201).json({
        message: 'User created',
        user: createdUser
      });
    } catch (err) {
      console.log(err);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is the function in the Backend, where we verify the table fields, add a unique identifier and encrypt the password before writing the information (file UsersService.js):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { client } = require('../../config/database');
const { v4: uuid }  = require('uuid');
const bcrypt = require('bcrypt');

class UsersService {
  constructor(){
    this.table = 'users',
    this.fields = 'id, username, password, email'
  }

  async createUser({ user }){
    const { username, password, email, fullName } = user
    try {
      const id = uuid();
      const encriptedPassword = await bcrypt.hash(password, 10);
      const lowerCaseEmail = email.toLowerCase();
      const userCreated = await client.query(
        `INSERT INTO ${this.table}(${this.fields}) VALUES (
          '${id}',
          '${username}',
          '${encriptedPassword}',
          '${lowerCaseEmail}',
        )`
      )
      return userCreated.rowCount;
    } catch (err) {
      console.error(err);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Vab2gdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06iv64pprgvs9d5nud5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Vab2gdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06iv64pprgvs9d5nud5g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the login a very similar process is done, what varies is the Backend processing where the existence of that user is confirmed, the password is verified to be correct and if everything is OK a response is sent with a JSON Web Token.&lt;/p&gt;

&lt;p&gt;This token will be stored locally in Frontend with the browser's window.localStorage.setItem() function so that it can be used in requests that require it as a value in a header.&lt;/p&gt;

&lt;p&gt;Diagram of the login process:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wL8_8jcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7tduehn5gch1fq8su83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wL8_8jcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7tduehn5gch1fq8su83.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Function that handles the login endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  async loginUser (req, res){
    const { user, password } = req.body;
    try {
      if(!user || !password) res.status(401).send('Invalid information');

      let userData;

      const userDataByUsername = await usersService.getUserByUsername({user});
      if(userDataByUsername.length === 0) {
        const userDataByEmail = await usersService.getUserByEmail({user});
        if(userDataByEmail.length === 0) res.status(401).send('Invalid information');
        userData = userDataByEmail;
      } else {
        userData = userDataByUsername;
      };

      const comparedPassword = await bcrypt.compare(password, userData.password);
      if(!comparedPassword) res.status(401).send('Invalid information');
      const token = jwtAuthenticationService.JWTIssuer({user: userData.id}, '15 min');
      res.status(200).json({ token: token })
    } catch (err) {
      console.log(err)
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function to consult users by username:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  async getUserByUsername({ user }){
    try {
      const userData = await client.query(`SELECT * FROM ${this.table} WHERE username='${user}'`)
      return userData.rows[0] || [];
    } catch (err) {
      console.error(err)
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function to consult users by email:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  async getUserByEmail({ user }){
    try {
      const lowerCaseEmail = user.toLowerCase()
      const userData = await client.query(`SELECT * FROM ${this.table} WHERE email='${lowerCaseEmail}'`)
      return userData.rows[0] || [];
    } catch (err) {
      console.error(err)
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, the last thing that happens is that Frontend performs a query using the token to bring the user information and display the username.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KM4FgUDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkuqin9jggf5pjevojtl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KM4FgUDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkuqin9jggf5pjevojtl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the function that takes care of this endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  async listUserById(req, res){
    const { bearertoken } = req.headers;
    if(!bearertoken) res.status(401).json({message: 'Request without token'})

    const tokenData = await jwtAuthenticationService.JWTVerify(bearertoken)
    if(tokenData === undefined) res.status(401).json({message: 'Invalid token'})

    const userId = tokenData.user;

    try {
      const userData = await usersService.getUserById({ userId });
      res.status(200).json({
        message: 'User listed',
        user: {
          id: userData.id,
          username: userData.username,
          email: userData.email,
        }
      })
    } catch (err) {
      console.log('listUserById error: ', err);
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#authentication-level-one-advantages-and-disadvantages"&gt;
  &lt;/a&gt;
  Authentication Level One Advantages and Disadvantages &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Easy to implement in any application&lt;/li&gt;
&lt;li&gt;Quick way to create users and be able to relate them to the other services of the application.&lt;/li&gt;
&lt;li&gt;Gradually more verifications and safety elements can be added.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;It has a low level of security compared to other authentication structures.&lt;/li&gt;
&lt;li&gt;In case of password loss, it is necessary to contact support directly to change the password.&lt;/li&gt;
&lt;li&gt;If maintained in this manner without implementing further security measures, there is a risk of being breached.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you noticed the account creation endpoint has no user verification so someone can create an account with the same email and username without any restriction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did we prevent this situation from happening? Share your answer in the comments&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lastly, now that you know the functionality of this application I invite you to review it, try it and leave me your suggestions to improve it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Demo: &lt;a href="https://frontend-bas-ulzahk.vercel.app/"&gt;https://frontend-bas-ulzahk.vercel.app/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;﻿If you want to review the application documentation, here I share the repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Repository: &lt;a href="https://github.com/Ulzahk/Frontend-BAS"&gt;https://github.com/Ulzahk/Frontend-BAS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;API Repository: &lt;a href="https://github.com/Ulzahk/Backend-BAS"&gt;https://github.com/Ulzahk/Backend-BAS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;PokéAPI: &lt;a href="https://pokeapi.co/"&gt;https://pokeapi.co/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ElephantSQL: &lt;a href="https://www.elephantsql.com/"&gt;https://www.elephantsql.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;JSON Web Token: &lt;a href="https://jwt.io/"&gt;https://jwt.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;bcrypt for NodeJs: &lt;a href="https://www.npmjs.com/package/bcrypt"&gt;https://www.npmjs.com/package/bcrypt&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>node</category>
      <category>react</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Crossposting to dev.to Made Easy</title>
      <author>Atibhi Agrawal</author>
      <pubDate>Tue, 11 May 2021 12:59:16 +0000</pubDate>
      <link>https://dev.to/asquare14/crossposting-to-dev-to-made-easy-58f6</link>
      <guid>https://dev.to/asquare14/crossposting-to-dev-to-made-easy-58f6</guid>
      <description>&lt;p&gt;Do you often write your articles on Google Docs, Notion or Medium and then have to manually convert it to markdown to post on dev.to?&lt;/p&gt;

&lt;p&gt;If yes, then checkout &lt;a href="https://euangoddard.github.io/clipboard2markdown/"&gt;Paste to Markdown&lt;/a&gt;. Simply paste any text and it will be converted to markdown along with proper formatting!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>markdown</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
