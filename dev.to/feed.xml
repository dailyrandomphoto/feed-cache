<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React Project Folder Structure</title>
      <author>Kumar Nitesh</author>
      <pubDate>Sun, 18 Jul 2021 01:55:56 +0000</pubDate>
      <link>https://dev.to/knitesh/react-project-folder-structure-30cm</link>
      <guid>https://dev.to/knitesh/react-project-folder-structure-30cm</guid>
      <description>&lt;p&gt;Just throwing out the my current preference for a React project folder structure. I think this gives a good view and segregation of files for my react based projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1w8U5VGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh6xsqkofptez9fbxl5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1w8U5VGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh6xsqkofptez9fbxl5g.png" alt="image"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Let's go through each folder inside the src folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. api-config&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;api-config&lt;/code&gt; consist of file containing the api endpoints. This folder doesn't have any logic. This helps having a single place for all api url end points and not to be scattered around in components, mostly inside useEffects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. assest&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;assets&lt;/code&gt; folder mostly consist of images(&lt;em&gt;.png,&lt;/em&gt;.svg..) and any other static files that might be needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. common&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;common&lt;/code&gt; folder is divided into more react specific folders.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Plb0PIpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue9tjurqqpmy01h1tu8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Plb0PIpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue9tjurqqpmy01h1tu8q.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;components&lt;/code&gt; folder consists of individual components, which are atomic in nature and doesn't compose any other components.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hooks&lt;/code&gt; as the name suggest consists of custom hooks, that you might develop for your project &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. constants&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;constants&lt;/code&gt; as the name suggest consist of constants used across project&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. modules&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;modules&lt;/code&gt; folder contains react components which are composed of smaller components defined under &lt;code&gt;common/components&lt;/code&gt;. For e.g. a &lt;code&gt;&amp;lt;Header /&amp;gt;&lt;/code&gt; component which may look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;Title&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;Image&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;Menu&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6. pages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pages&lt;/code&gt; are one to one map of the router routes. This is similar to the concept that &lt;code&gt;NextJS&lt;/code&gt; or &lt;code&gt;GatsbyJs&lt;/code&gt; takes.&lt;br&gt;
This is the bigger react component which presents a whole page. It might contains additional routing, so more nested pages. An example of this page will be dashboard page which might look like (in it's simples form)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;PageHeader&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;PageTopMenu&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;PageLeftNavigation&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;VisitorBlockChart&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;VistorLineChart&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;SomeOtherAwesomeComponent&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;PageFooter&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;7. store or Global context&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;store&lt;/code&gt; folder contains global store or global context that are getting used across product.&lt;/p&gt;

&lt;p&gt;On side note, if you have not used &lt;code&gt;Zustand&lt;/code&gt; as react-redux replacement, give it a try. Very simple and easy to use state management system and you don't have to wrap your component inside a &lt;code&gt;Provider&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://github.com/pmndrs/zustand"&gt;Zustand&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;strong&gt;test&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Test&lt;/code&gt; folder. And please don't give it just a lip service. It's fun to write and really helps you out during refactoring(more than TypeScript.. :P)&lt;br&gt;
&lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React-testing-library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. utils&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Everything else to dump into(..not really, please don't do this). &lt;br&gt;
Store common utility functions inside this folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10.routes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A folder to contains all root level routes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;End Note&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This folder structure has evolved in last one year and really helping me out in couple of my current big project.It doesn't mean that It will not change again, but at least for my next project, I will continue to use this structure. &lt;/p&gt;

&lt;p&gt;Let me know what your preferences are these days?&lt;/p&gt;

&lt;p&gt;Till Next Time&lt;br&gt;
Kumar Nitesh&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/knitesh"&gt;@knitesh&lt;/a&gt;
 &lt;br&gt;
Twitter: @imknitesh&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>AWS Managed Airflow for your complex workflows</title>
      <author>Mohamed Fayaz</author>
      <pubDate>Sun, 18 Jul 2021 01:43:38 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-managed-airflow-for-your-complex-workflows-16d</link>
      <guid>https://dev.to/aws-builders/aws-managed-airflow-for-your-complex-workflows-16d</guid>
      <description>&lt;p&gt;&lt;strong&gt;Airflow&lt;/strong&gt; is a tool to orchestrate complex workflow which was created at Airbnb in 2014. Airflow gained significant traction across several organizations in recent days due to the ability to create complex data pipelines with ease. The Airflow user interface (UI) serves as an operational dashboard to schedule, monitor and control any scripts or applications. &lt;/p&gt;

&lt;p&gt;Despite Airflow has been adopted by several organizations, deploying and managing the infrastructure has always been challenging and introduces operational overhead. To combat this problem many companies came up with the idea of introducing managed Airflow Infrastructure such as MWAA from Amazon Web Services (AWS). AWS takes the responsibility for keeping your infrastructure with almost no downtime and up-to-date security patches in place along with the latest version readily available to use. &lt;/p&gt;

&lt;p&gt;Besides, the other key benefits of using AWS MWAA is its elasticity, the ability to scale up and down based on the workload, and the easiness of building and deploying production-grade secure infrastructure with seamless integration with other AWS Services. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#airflow-basics"&gt;
  &lt;/a&gt;
  Airflow Basics
&lt;/h2&gt;

&lt;p&gt;Let's dive into some key concepts of Airflow :)&lt;/p&gt;

&lt;p&gt;In Airflow, workflows are defined in a Python file which is also referred to as DAG. You can imagine a DAG as a single job that can have multiple tasks in general. There are three common parts in every DAG those are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DAG Initialization &lt;/li&gt;
&lt;li&gt;Tasks &lt;/li&gt;
&lt;li&gt;Tasks Dependencies &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#dag-directed-acyclic-graphs"&gt;
  &lt;/a&gt;
  DAG (Directed Acyclic Graphs)
&lt;/h3&gt;

&lt;p&gt;DAGs are written in Python and are often identified by their unique &lt;code&gt;dag_id&lt;/code&gt;. During the initialization, we specify when to start, scheduled time and so forth. Here is a simple DAG below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DAG&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.utils.dates&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;days_ago&lt;/span&gt;

&lt;span class="n"&gt;dag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DAG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;dag_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"sample_dag"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;days_ago&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Sample DAG"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;schedule_interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'@daily'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Tasks perform different actions from executing a piece of Shell script to triggering EMR jobs. It is necessary to have a DAG before we create any task. Also, every task in a DAG is defined by an operator and similar to &lt;code&gt;dag_id&lt;/code&gt;, the &lt;code&gt;task_id&lt;/code&gt; would need to be unique within the DAG.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def function_a (**kwargs):
        name = kwargs['name']
        return f'hello {name} !!'

first_task = PythonOperator(
        task_id="first_task", 
        python_callable= function_a,
        op_kwargs= {'name': 'Fayaz'}, 
        dag= dag)

second_task = DummyOperator(task_id="second_task", dag=dag)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#task-dependencies"&gt;
  &lt;/a&gt;
  Task Dependencies
&lt;/h3&gt;

&lt;p&gt;Now the last part of the DAG is to create dependencies among the tasks. In this case, we are going to trigger the &lt;code&gt;first_task&lt;/code&gt; first and then trigger the &lt;code&gt;second_task&lt;/code&gt; as soon as the first_task completes. So it will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first_task &amp;gt;&amp;gt; second_task
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we understood what is Airflow and how to create a simple DAG so let's spin up the AWS MWAA to run this DAG. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;You need to use your AWS Account to perform the next few steps which may incur some charges.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-managed-airflow-instance-in-aws"&gt;
  &lt;/a&gt;
  Setting up the Managed Airflow Instance in AWS
&lt;/h2&gt;

&lt;p&gt;Before we create a new MWAA environment, we would need to create an &lt;code&gt;S3 bucket&lt;/code&gt; which must have versions enabled. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Go to &lt;a href="https://console.aws.amazon.com/mwaa/home?#create/environment"&gt;Managed Airflow Console&lt;/a&gt; and click Create Environment&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMFwYB_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fbj7j107m94ou85l42c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMFwYB_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fbj7j107m94ou85l42c.PNG" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Enter a &lt;strong&gt;name&lt;/strong&gt; and choose the Airflow version as &lt;strong&gt;2.0.2(Latest)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zExn4Jyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4pu7o86x8vpu1v8pv7j.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zExn4Jyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4pu7o86x8vpu1v8pv7j.PNG" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; Choose the S3 bucket - the one you have created &lt;br&gt;
&lt;strong&gt;Step 4.&lt;/strong&gt; For Dags folder type &lt;strong&gt;s3://{your-bucket-name}/dags&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Step 5.&lt;/strong&gt; Click &lt;strong&gt;Next&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5vvheDJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76re3ydkbtxsudtf2a64.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5vvheDJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76re3ydkbtxsudtf2a64.PNG" alt="5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6.&lt;/strong&gt; Click on &lt;strong&gt;Create MWAA VPC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vk3Q4iJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykk0gfszywk1h6ff5k1k.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vk3Q4iJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykk0gfszywk1h6ff5k1k.PNG" alt="6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7.&lt;/strong&gt; It will take you to a page with a bunch of VPC, Subnets details. Click &lt;strong&gt;Create Stack&lt;/strong&gt; which may take a few mins to complete&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rMwds58D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzmx0kyzz6vtuk3uadrn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rMwds58D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzmx0kyzz6vtuk3uadrn.PNG" alt="7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 8.&lt;/strong&gt; Choose the VPC you just created and scroll down to enter environment class and other configurations&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DAKokPCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dkbp4p132qou378blun.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DAKokPCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dkbp4p132qou378blun.PNG" alt="8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 9.&lt;/strong&gt;  Choose &lt;strong&gt;Create a new role&lt;/strong&gt; and click Next&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3UIGmy7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n7owa5xiwjdx17n45gm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3UIGmy7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n7owa5xiwjdx17n45gm.PNG" alt="9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 10.&lt;/strong&gt; Verify all the details and click &lt;strong&gt;Create environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DkBJSKtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me0syi4hg0zj5oq7ki0n.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DkBJSKtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me0syi4hg0zj5oq7ki0n.PNG" alt="10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generally, it takes 10-20 mins to spin up the Airflow Infrastructure so this is the time to get your coffee ☕ before we deploy our very first DAG 🤣😂 &lt;/p&gt;

&lt;p&gt;🎉🎉🎉 When you refresh in a few minutes, you will see the environment status as &lt;code&gt;Available&lt;/code&gt; so click &lt;strong&gt;Open Airflow UI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3PbVWHtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz8gcisbyxxd99qqtlkg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3PbVWHtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz8gcisbyxxd99qqtlkg.PNG" alt="11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gBs9xyZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kuual4eq4zd8h990kwm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBs9xyZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kuual4eq4zd8h990kwm.PNG" alt="12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yay!! Now we got our environment up and ready to go. So let's deploy our first DAG. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deploying-dags-in-the-aws-mwaa"&gt;
  &lt;/a&gt;
  Deploying DAGs in the AWS MWAA
&lt;/h2&gt;

&lt;p&gt;Step 1: To deploy the DAG, we would need to copy the &lt;code&gt;.py&lt;/code&gt; file to our &lt;code&gt;s3/dags&lt;/code&gt; location. Copy the below code and put that in a &lt;code&gt;.py&lt;/code&gt; file and save it as demo_dag.py in your local.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"""
Importing necessary modules
"""
from airflow.models import DAG
from airflow.utils.dates import days_ago
from airflow.operators.dummy_operator import DummyOperator
from airflow.operators.python_operator import PythonOperator


"""
Initializing DAGs
"""
dag = DAG(
          dag_id="grepy_sample_dag",
          start_date=days_ago(2), 
          description="DAG which orchestrates a simple ML workflow",
          schedule_interval='@daily')

"""
Creating Tasks
"""
def function_a (**kwargs):
        name = kwargs['name']
        return f'hello {name} !!'

first_task = PythonOperator(
        task_id="first_task", 
        python_callable= function_a,
        op_kwargs= {'name': 'Fayaz'}, 
        dag= dag)

second_task = DummyOperator(task_id="second_task", dag=dag)

"""
Dependencies
"""
first_task &amp;gt;&amp;gt; second_task

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2: Upload the &lt;code&gt;demo_dag.py&lt;/code&gt; file to your s3/dags folder. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3F7Lnp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crq0xbza1gw42khorhk0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3F7Lnp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crq0xbza1gw42khorhk0.PNG" alt="13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 3: That's it!! Now again it may take a few minutes when you deploy a DAG for the first time, but it will look like this &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g15ZVb5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1w73kw017364fr44n2e.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g15ZVb5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1w73kw017364fr44n2e.PNG" alt="14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you toggle on for the first time, the DAG will automatically be triggered so click on the DAG name which will take you to the tree view where you see the job status and task dependencies. &lt;/p&gt;

&lt;p&gt;One of the best parts is you can see all the logs when you go to the Graph view which is also available in CloudWatch so you can ingest that to your Splunk or ELK for further analysis. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--smxCLv2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuw34qgavjfd1rcfwl4g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--smxCLv2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuw34qgavjfd1rcfwl4g.PNG" alt="15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post, we took a high-level look at Airflow basics and we dived into AWS Managed Airflow along with a sample DAG deployment which runs a simple Python function. Similarly, you can orchestrate any type of task using various operators which is available on any Airflow infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-further-reading"&gt;
  &lt;/a&gt;
  For further reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://aws.amazon.com/managed-workflows-for-apache-airflow/getting-started/"&gt;https://aws.amazon.com/managed-workflows-for-apache-airflow/getting-started/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for your time and happy learning !! 😊 &lt;/p&gt;

</description>
      <category>aws</category>
      <category>airflow</category>
      <category>python</category>
      <category>mlops</category>
    </item>
    <item>
      <title>Resources to master 5 popular react libraries</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sun, 18 Jul 2021 00:26:31 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/resources-to-master-5-popular-react-libraries-2n81</link>
      <guid>https://dev.to/ayabouchiha/resources-to-master-5-popular-react-libraries-2n81</guid>
      <description>&lt;p&gt;Hello everybody, I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt; today, I'm going to share with you useful resources to learn 5 libraries that you will use at least one of them in your next react project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactrouter"&gt;
  &lt;/a&gt;
  react-router
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;React Router&lt;/strong&gt; is used for developing Single Page Web Applications. It is used to define multiple routes in the application. When a user types a specific URL into the browser, and if this URL path matches any 'route' inside the router file, the user will be redirected to that particular route.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.javatpoint.com/react-router"&gt;more details&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-learn-reactrouter"&gt;
  &lt;/a&gt;
  Resources to learn react-router
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/react-router-cheatsheet/"&gt;react-router-cheatsheet&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Law7wfdg_ls"&gt;react-router by Dev Ed (30 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Jppuj6M1sJ4"&gt;react router crash course (40 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#material-ui"&gt;
  &lt;/a&gt;
  Material UI
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Material UI&lt;/strong&gt; is the world's most popular  UI framework, additionally, it is based on Google Material Design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-learn-material-ui"&gt;
  &lt;/a&gt;
  Resources to learn material UI
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://material-ui.com/t"&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=vyJU9efvUtQ"&gt;Material UI React tutorial (40 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xoz31I1FuiY"&gt;Material UI React crash course (50min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=0KEpWHtG10M&amp;amp;list=PL4cUxeGkcC9gjxLvV4VEkZ6H6H4yWuS58"&gt;Material UI Tutorials By The Net Ninja (playlist: 18 videos)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#redux"&gt;
  &lt;/a&gt;
  Redux
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Redux&lt;/strong&gt; is a predictable state container designed to help you write JavaScript apps that behave consistently across client, server, and native environments and are easy to test. &lt;a href="https://blog.logrocket.com/why-use-redux-reasons-with-clear-examples-d21bffd5835/"&gt;more details&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-lean-redux"&gt;
  &lt;/a&gt;
  Resources to lean Redux
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://redux.js.org/"&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=CVpUuw9XSjY"&gt;Redux for begginers by Dev Ed (40 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=93p3LxR9xfM"&gt;Redux crash course by Travesy Media (1h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=9boMnm5X9ak&amp;amp;list=PLC3y8-rFHvwheJHvseC3I0HuYI2f46oAK"&gt;Redux tutorial by Codevolution (playlist: 30 vidoes)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-icons"&gt;
  &lt;/a&gt;
  React Icons
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;React Icons&lt;/strong&gt; is a library that provides popular icons as React components for your React applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-lean-react-icons"&gt;
  &lt;/a&gt;
  Resources to lean React Icons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://react-icons.github.io/react-icons/"&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=aor9hlcODUE"&gt;Tutorial by Eric (7 min) &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=4l0nsK4ezNc"&gt;React icons by Codevolution  (7 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#styled-components"&gt;
  &lt;/a&gt;
  Styled Components
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;styled-components&lt;/strong&gt; is a library that lets you write CSS code in your Javascript &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-learn-styled-components"&gt;
  &lt;/a&gt;
  Resources to learn Styled components
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://styled-components.com/"&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/eQkkoUEVY-Q"&gt;Styled Components React Tutorial by Adrian (10 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=syqw5UJrfoc"&gt;React styled-components tutorial by Ben Awad (15 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=-FZzPHSLauc"&gt;styled component tutorial by Pedrotech (25 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;React router&lt;/strong&gt; is used to define multiple routes in a single page application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Material UI&lt;/strong&gt; is a UI framework based on Google Material Design.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Redux&lt;/strong&gt; is a predictable state container &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;React Icons&lt;/strong&gt; provides you popular icons as React components&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Styled-components&lt;/strong&gt; lets you write CSS in your Javascript.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is House Of Iot?</title>
      <author>Ronald Colyar</author>
      <pubDate>Sun, 18 Jul 2021 00:22:44 +0000</pubDate>
      <link>https://dev.to/ronaldthenerdsuperuser/what-is-house-of-iot-4jm4</link>
      <guid>https://dev.to/ronaldthenerdsuperuser/what-is-house-of-iot-4jm4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#general"&gt;
  &lt;/a&gt;
  General
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/House-of-IoT"&gt;"House of Iot"&lt;/a&gt; is a community and software collection that I started to encourage/assist autodidacts with home/property automation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-house-of-iot-provide-other-than-a-community-of-people"&gt;
  &lt;/a&gt;
  What does House Of Iot provide other than a community of people?
&lt;/h2&gt;

&lt;p&gt;House Of Iot provides a tutorials for common/non-common smart devices that aims to be extremely simplified , along with the matching sustainable software. &lt;/p&gt;

&lt;p&gt;The simple tutorials adds a nice layer of abstraction for those who don't consider themselves "tech savvy" to come and learn how to build home automation/security. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation-for-starting-this-project"&gt;
  &lt;/a&gt;
  Motivation for starting this project?
&lt;/h2&gt;

&lt;p&gt;Not too long ago I began trying to build small smart devices for my home that will make things easier to accomplish and more accessible.While doing the research regarding circuitry, I found that there was a large barrier to entry to learn about safe micro-electronics/embedded systems. This motivated me to make an attempt to make things easier for new comers in the I.O.T(Internet Of Things) realm.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech stack?
&lt;/h1&gt;

&lt;p&gt;House of Iot will use what ever is best for the job and will continue to evolve. Currently for software that is performance dependent(CPU Bound) we choose to use Rust due to the safe nature and speed, for things that aren't performance dependent(IO Bound) we like using python for simplicity.The web client is written currently using React(typescript).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#software-costs"&gt;
  &lt;/a&gt;
  Software costs?
&lt;/h2&gt;

&lt;p&gt;House of Iot is 100% free and will always be free!! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visibility"&gt;
  &lt;/a&gt;
  Visibility?
&lt;/h2&gt;

&lt;p&gt;House of Iot is open-source and will always be open source!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-take-a-look-at-the-software"&gt;
  &lt;/a&gt;
  Want to take a look at the software?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/House-of-IoT"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>iot</category>
      <category>rust</category>
      <category>python</category>
      <category>embeddedsystems</category>
    </item>
    <item>
      <title>Getting Started with Lodash in JavaScript</title>
      <author>Rahul Banerjee</author>
      <pubDate>Sat, 17 Jul 2021 23:52:12 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/getting-started-with-lodash-in-javascript-2ghl</link>
      <guid>https://dev.to/rahulbanerjee99/getting-started-with-lodash-in-javascript-2ghl</guid>
      <description>&lt;h3&gt;
  &lt;a href="#why-use-lodash"&gt;
  &lt;/a&gt;
  Why use lodash
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It reduces the lines of code significantly &lt;/li&gt;
&lt;li&gt;Supports common operations done on Objects and Arrays&lt;/li&gt;
&lt;li&gt;Supports common operations on strings&lt;/li&gt;
&lt;li&gt;Supports generic functions&lt;/li&gt;
&lt;li&gt;Trusted by other developers. It has &lt;a href="https://github.com/lodash/lodash"&gt;50k+ ⭐️&lt;/a&gt; on GitHub&lt;/li&gt;
&lt;li&gt;Well Documented&lt;/li&gt;
&lt;li&gt;You don't need to learn any new syntax or concepts or anything. It uses plain old JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#install-lodash"&gt;
  &lt;/a&gt;
  Install lodash
&lt;/h3&gt;



&lt;p&gt;&lt;code&gt;npm install lodash&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-values-in-deeply-nested-objects"&gt;
  &lt;/a&gt;
  Accessing values in deeply nested objects
&lt;/h3&gt;

&lt;p&gt;When dealing with API responses, more often than not, the data you'd like to access will be deeply nested.&lt;/p&gt;

&lt;p&gt;Consider the following example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zig1tYbP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5h0iu0kfn082es9pdca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zig1tYbP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5h0iu0kfn082es9pdca.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a sample response from the &lt;a href="https://jsonapi.org/examples/"&gt;JSON API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to access the title, we could do something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u-REXw4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlnieteziumsvbk2mjs0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u-REXw4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlnieteziumsvbk2mjs0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works fine but we made a big assumption: &lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;'deepObject' , 'data' , 'attributes' ,'title' are all defined&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;p&gt;However, it is possible that any of them might be undefined. This would throw an error. If &lt;strong&gt;'attributes'&lt;/strong&gt; is empty or undefined, then &lt;strong&gt;'attributes.title'&lt;/strong&gt; would not exist.&lt;/p&gt;

&lt;p&gt;Lodash's get function can be used to handle the error gracefully. Below is the syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIQS4i_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfl7rqwj1h7i4ubst2dj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIQS4i_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfl7rqwj1h7i4ubst2dj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the second console statement, we try to access the element at index 3 in data but this doesn't exist. Therefore 'Value doesn't exist' is printed in the console.&lt;/p&gt;

&lt;p&gt;In the third console statement, we try to print the value for &lt;strong&gt;'title'&lt;/strong&gt; in &lt;strong&gt;'data[0]'&lt;/strong&gt; but &lt;strong&gt;'data[0]'&lt;/strong&gt; doesn't have any attribute called &lt;strong&gt;'title'&lt;/strong&gt;. Similar to the above case, 'Value doesn't exist' is printed in the console. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-attributes-to-deeply-nested-objects"&gt;
  &lt;/a&gt;
  Adding attributes to deeply nested Objects
&lt;/h3&gt;

&lt;p&gt;We will work with the same object we were working with earlier.&lt;/p&gt;

&lt;p&gt;If we want to add a new key-value pair for subtitle inside 'attributes', we could do something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ddR8GrZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zeyvzigs5kwci1qhf2gy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ddR8GrZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zeyvzigs5kwci1qhf2gy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, we made a similar assumption that the entire path is defined. However, if any part of the path is undefined, it will throw an error. &lt;/p&gt;

&lt;p&gt;We can use Lodash's set function to handle this error gracefully. Below is the syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the path doesn't exist, it will create the path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xiHu5abk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jklalchrdnpac2szwyjg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xiHu5abk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jklalchrdnpac2szwyjg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;set is an in-place function, i.e it updates the input object. Our new object is below &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zuHt-LG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4dvny9ipbtzqptizadr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zuHt-LG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4dvny9ipbtzqptizadr.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The second set operation added 3 elements (2 empty elements) to the &lt;strong&gt;'data'&lt;/strong&gt; array while the third set operation added an attribute &lt;strong&gt;'subtitle'&lt;/strong&gt; to &lt;strong&gt;'data[0]'&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-if-a-path-exists"&gt;
  &lt;/a&gt;
  Check if a path exists
&lt;/h3&gt;

&lt;p&gt;We can use the has function to check if a path exists in an object. Below is the syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5QUOMDFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xjox667vk9mi35r9nfi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5QUOMDFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xjox667vk9mi35r9nfi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#invert-keys-an-values-of-an-object"&gt;
  &lt;/a&gt;
  Invert Keys an Values of an object
&lt;/h3&gt;

&lt;p&gt;Lodash's invert function will invert the keys and values. Below is the syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tWD0drNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd63fm6zazlk9is0bi4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tWD0drNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd63fm6zazlk9is0bi4r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-object-from-another-object"&gt;
  &lt;/a&gt;
  Create an object from another object
&lt;/h3&gt;

&lt;p&gt;If you have a object and want to create an object with some of the keys from the original object, you can use Lodash's pick function. It doesn't add the key and value directly, if the path provided is nested, it will recreate the path as well. If you are confused, refer to the example below&lt;/p&gt;

&lt;p&gt;Below is the syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's work with the &lt;a href="https://jsonapi.org/examples/"&gt;JSON API&lt;/a&gt; response again. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kBeie9x3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cbhbcrxnlocvva7ogaa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kBeie9x3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cbhbcrxnlocvva7ogaa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of directly adding title directly, it recreate the path 'data[0].attributes.title'. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deep-copy-of-an-object"&gt;
  &lt;/a&gt;
  Deep Copy of an Object
&lt;/h3&gt;

&lt;p&gt;The cloneDeep function creates a deep copy of an object&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QvLoDD8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7897r48pq10vwc8ktfcp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QvLoDD8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7897r48pq10vwc8ktfcp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the original object remains unchanged.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compare-object-irrespective-of-the-order-of-the-keys"&gt;
  &lt;/a&gt;
  Compare Object irrespective of the order of the keys
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2NSoA2Aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51vgjpwt4rr8b96d58x3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2NSoA2Aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51vgjpwt4rr8b96d58x3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-set-operations-on-arrays"&gt;
  &lt;/a&gt;
  Some Set operations on Arrays
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#find-the-elements-in-array1-but-not-in-array2"&gt;
  &lt;/a&gt;
  Find the elements in array1 but not in array2
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ke_6oRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jcdba8yzawt89dkdphy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ke_6oRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jcdba8yzawt89dkdphy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#find-common-elements-in-two-arrays"&gt;
  &lt;/a&gt;
  Find Common elements in two arrays
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej6AvhxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mauomlp8uk4b377oorai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej6AvhxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mauomlp8uk4b377oorai.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#find-the-difference-between-two-arrays"&gt;
  &lt;/a&gt;
  Find the difference between two arrays
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aHVeeLAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoislpnfyj879hlznccu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aHVeeLAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoislpnfyj879hlznccu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zip"&gt;
  &lt;/a&gt;
  Zip
&lt;/h3&gt;

&lt;p&gt;This is similar to the zip function in Python.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0y8E9JdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4b3yzqesg4vmnvt4uny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0y8E9JdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4b3yzqesg4vmnvt4uny.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-unique-elements-of-an-array"&gt;
  &lt;/a&gt;
  Get unique elements of an array
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5xO9-nwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgs3a1zeozf007iq2kx4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5xO9-nwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgs3a1zeozf007iq2kx4.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Lodash has a bunch of other useful functions, refer to their &lt;a href="https://lodash.com/docs/4.17.15"&gt;documentation&lt;/a&gt; for more &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>JavaScript Inside Story : More about Prototypes and Inheritance</title>
      <author>mayankav</author>
      <pubDate>Sat, 17 Jul 2021 23:39:10 +0000</pubDate>
      <link>https://dev.to/mayankav/javascript-inside-story-more-about-prototypes-and-inheritance-3a9l</link>
      <guid>https://dev.to/mayankav/javascript-inside-story-more-about-prototypes-and-inheritance-3a9l</guid>
      <description>&lt;p&gt;I almost picked the title "&lt;strong&gt;&lt;em&gt;JavaScript's Factory for Everything&lt;/em&gt;&lt;/strong&gt;", but then I changed my mind after reading my older post. Just trying to push my &lt;a href="https://dev.to/mayankav/is-everything-in-javascript-an-object-1alg"&gt;last post&lt;/a&gt; here. I don't feel very comfortable writing this, not because I don't understand the stuff but because its something that pretends to be something it really is not. Protesting that prototypal inheritance is not inheritance at all does not change anything. Perhaps if it were not for the comfort of OOPers, it could have been better called &lt;strong&gt;&lt;em&gt;prototypal wiring&lt;/em&gt;&lt;/strong&gt; or maybe &lt;strong&gt;&lt;em&gt;prototypal delegation&lt;/em&gt;&lt;/strong&gt;. If you're coming from Java, how would you answer the question, "&lt;strong&gt;&lt;em&gt;Why does Java not suppport multiple class inheritance?&lt;/em&gt;&lt;/strong&gt;". Well, you'd point out &lt;a href="https://www.cs.cornell.edu/courses/JavaAndDS/abstractInterface/05diamond.pdf"&gt;the Diamond Problem&lt;/a&gt;, won't you? Given that JavaScript doesn't know this problem how would you explain it not being able to support such a thing? PS: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model#no_multiple_inheritance"&gt;It can be done but it has its own issues&lt;/a&gt;. Despite its appearance resembling to that of classical inheritance, JavaScript has its own reasons for (not) being able to do certain things. Not asking you to unlearn the classical inheritance take but then to understand JavaScript's way of handling prototypal inheritance you need to drop those intuitive assumptions atleast for the time being. ‍‍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3BHn5ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka1pqwg2tobrjion2enk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3BHn5ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka1pqwg2tobrjion2enk.png" alt="Just forget it"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
I dont want to recall the time when I started logging objects in the console only to check what's really inside of them. I mean I knew objects had their properties but I also found stuff like __proto__, constructor, prototype, __proto__ again. It would not stop. I kept on digging and it kept on throwing more and then I realized I was willingly stuck in a loop of references. Let me take help of an analogy to explain this to you. Lets assume that any function you create in JavaScript is a House to be put on rent. The House then comes with a bunch of keys ( &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; ). The bunch of keys has another bunch of small master keys ( &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; ) inside it and has a label ( &lt;strong&gt;&lt;em&gt;constructor&lt;/em&gt;&lt;/strong&gt; ) with the name of the house on it. This bunch of keys is given to the tenants ( &lt;strong&gt;&lt;em&gt;objects created from the function&lt;/em&gt;&lt;/strong&gt; ) and the tenants then keep it with them and they like to call it guess what ? &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt;. Heck! confusing. Its not that easy to build analogies here. Just take a look at the diagram I came up with.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TzRw9Srf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b8b48mhm1v6ap0qa21u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TzRw9Srf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b8b48mhm1v6ap0qa21u.gif" alt="Prototypes in JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;h6&gt;&lt;a href="https://www.slideshare.net/Mayankav1/javascript-function-prototype"&gt;Check out the Ppt&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;What you see is what I am going to pen down now. Consider a class &lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt; or simply a function &lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt;. The function when created, gets two properties by default namely &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; is a property that is available on everything in JS be it a primitive or an object. Go ahead! try that in your console. It contains some information from the function that was responsible for creating the primitive/object in the first place. Since a function is nothing more than a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function#:~:text=Every%20JavaScript%20function%20is%20actually%20a%20Function%20object.%20This%20can%20be%20seen%20with%20the%20code%20(function()%7B%7D).constructor%20%3D%3D%3D%20Function%2C%20which%20returns%20true."&gt;Function object&lt;/a&gt;, the &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; property on each and every function takes its value from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function#instance_methods"&gt;Function.prototype&lt;/a&gt;. What about the &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; property? In contrast with &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; which is available on anything and everything in JS, &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; is only available on JavaScript functions. The &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; property is an object ( only exception being Function.prototype which is a native function ) with two default properties namely &lt;strong&gt;&lt;em&gt;constructor&lt;/em&gt;&lt;/strong&gt; ( refers to the Function/Class itself to which prototype belongs ) and &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; . The purpose of &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; on &lt;strong&gt;&lt;em&gt;A.prototype&lt;/em&gt;&lt;/strong&gt; is nothing different from that on the function &lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt; itself. &lt;strong&gt;&lt;em&gt;A.prototype.__proto__&lt;/em&gt;&lt;/strong&gt; contains information about the function that was responsible for the creation of &lt;strong&gt;&lt;em&gt;A.prototype&lt;/em&gt;&lt;/strong&gt;. Since this object (A.prototype) was automatically created, the function/class responsible for its creation was &lt;strong&gt;&lt;em&gt;Object&lt;/em&gt;&lt;/strong&gt;. No wonder why every &lt;strong&gt;&lt;em&gt;SomeFunction.prototype.__proto__&lt;/em&gt;&lt;/strong&gt; gets a default value of &lt;strong&gt;&lt;em&gt;Object.prototype&lt;/em&gt;&lt;/strong&gt;. To verify this, try creating an object using the object lietral syntax like so. ‍&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;randomObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randomObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt;&lt;h6&gt;&lt;a href="https://codepen.io/mayankav/pen/VwbpMVY"&gt;Try on Codepen&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;&lt;br&gt;

&lt;br&gt;
Moving on to instantiating the constructor function, lets do &lt;strong&gt;&lt;em&gt;let objA = new A();&lt;/em&gt;&lt;/strong&gt; to create an object from the function &lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;em&gt;objA&lt;/em&gt;&lt;/strong&gt; gets a &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; . We just discussed how everything in JS gets this default property with a value of &lt;strong&gt;&lt;em&gt;SomeFunction.prototype&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;SomeFunction&lt;/em&gt;&lt;/strong&gt; being the function/class responsible for its creation. No points for guessing its value in this case. Its &lt;strong&gt;&lt;em&gt;A.prototype&lt;/em&gt;&lt;/strong&gt;. ‍&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;center&gt;&lt;h6&gt;.prototype only exists on functions. &lt;a href="https://codepen.io/mayankav/pen/VwbpMVY"&gt;Try on Codepen&lt;/a&gt;.&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;



&lt;h2&gt;
  &lt;a href="#prototypal-inheritance%E2%80%8D"&gt;
  &lt;/a&gt;
  Prototypal Inheritance‍
&lt;/h2&gt;

&lt;p&gt;All this while what I've been trying to tell you is that &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; is just the pen name of &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt;. A &lt;strong&gt;&lt;em&gt;constructor's prototype&lt;/em&gt;&lt;/strong&gt; becomes it's &lt;strong&gt;&lt;em&gt;object's __proto__&lt;/em&gt;&lt;/strong&gt; . How does this help? Well since its not the copy but the reference to a function's &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; which is shared amongst objects created using the function, any new function/property on the &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; of a function is readily available on the object's &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; as well. Though its not a good practice to monkey patch properties on the &lt;strong&gt;&lt;em&gt;protoype&lt;/em&gt;&lt;/strong&gt; of a constructor function. &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes#:~:text=You%20will%20rarely%20see%20properties%20defined%20on%20the%20prototype%20property%2C%20because%20they%20are%20not%20very%20flexible%20when%20defined%20like%20this.%20For%20example%20you%20could%20add%20a%20property%20like%20so%3A"&gt;Read more about that here&lt;/a&gt;. Interestingly you dont even need to access the patched property via &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; . You just access it on the object like &lt;strong&gt;&lt;em&gt;objA.somePatchedFunction()&lt;/em&gt;&lt;/strong&gt; and it gets resolved from &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; in the chain. This sounds fun but can very quickly get on the nerves when some object starts patching functions/properties on its &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; property causing a &lt;strong&gt;&lt;em&gt;prototype namespace pollution&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Anyway, did you think of this? What happens when you manually alter the &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; property on &lt;strong&gt;&lt;em&gt;objA&lt;/em&gt;&lt;/strong&gt; like &lt;strong&gt;&lt;em&gt;objA.__proto__ = { random : 10 }&lt;/em&gt;&lt;/strong&gt; ? Apparently, the link from the function &lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt; breaks and you can no more access the functions patched on &lt;strong&gt;&lt;em&gt;A.prototype&lt;/em&gt;&lt;/strong&gt; and then you get access to properties of the newly set object (&lt;strong&gt;&lt;em&gt;{ random : 10 }&lt;/em&gt;&lt;/strong&gt;) like &lt;strong&gt;&lt;em&gt;objA.random&lt;/em&gt;&lt;/strong&gt;. Apart of assigning a value directly to &lt;strong&gt;&lt;em&gt;objA.__proto__&lt;/em&gt;&lt;/strong&gt; there exist lawful functions (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf"&gt;Object.setPrototypeOf&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create"&gt;Object.create&lt;/a&gt;) in JavaScript to help you do this some of which are &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#:~:text=Ill-performing.%20Should%20be%20deprecated."&gt;on the verge of being deprecated&lt;/a&gt; but that's not my concern for this blog post. This does not even seem very helpful. Why don't we try altering the &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; property on &lt;strong&gt;&lt;em&gt;A.prototype&lt;/em&gt;&lt;/strong&gt;? Well, that sounds like a plan.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patchedP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//  Object.create sets (Child.prototype).__proto__ = Parent.prototype&lt;/span&gt;
&lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Resetting the child constructor may/may not be needed&lt;/span&gt;
&lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patchedC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 50  //undefined if no Parent.call(this)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;patchedP&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt;&lt;h6&gt;&lt;a href="https://codepen.io/mayankav/pen/qBmRzzj"&gt;Try on Codepen&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;For the ease of understanding lets try to alter &lt;strong&gt;&lt;em&gt;Child.prototype&lt;/em&gt;&lt;/strong&gt;. Let me tell you what am I trying to do. When I create a new object using the Child constructor function, I can say something like &lt;strong&gt;&lt;em&gt;new Child().c&lt;/em&gt;&lt;/strong&gt; and get the expected value i.e. &lt;strong&gt;&lt;em&gt;200&lt;/em&gt;&lt;/strong&gt;. What I want is to get a valid value on doing so &lt;strong&gt;&lt;em&gt;new Child().patchedP&lt;/em&gt;&lt;/strong&gt; ie. &lt;strong&gt;&lt;em&gt;100&lt;/em&gt;&lt;/strong&gt;. Do you think I should simply make an assignment like so &lt;strong&gt;&lt;em&gt;Child.prototype = Parent.prototype&lt;/em&gt;&lt;/strong&gt; ? Well , no because then when you want to patch some functions on &lt;strong&gt;&lt;em&gt;Child.prototype&lt;/em&gt;&lt;/strong&gt;, you will end up patching the orignal &lt;strong&gt;&lt;em&gt;Parent.prototype&lt;/em&gt;&lt;/strong&gt;. Changes on Child should not impact Parent or you can't call it inheritance. I better use an &lt;strong&gt;&lt;em&gt;intermediary object&lt;/em&gt;&lt;/strong&gt; to set the &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; of child. That's why we do this &lt;strong&gt;&lt;em&gt;Child.prototype = Object.create(Parent.prototype)&lt;/em&gt;&lt;/strong&gt;. Now when you patch the Child's &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt;, it won't impact the Parent (you only patch the intermediary object). &lt;/p&gt;

&lt;p&gt;Did you notice the call to Parent function within the Child function (kind of super if you're coming from Java) ? Try commenting it out in the &lt;a href="https://codepen.io/mayankav/pen/qBmRzzj"&gt;pen&lt;/a&gt;. That shall leave you with no access to Parent's instance properties i.e. &lt;strong&gt;&lt;em&gt;p&lt;/em&gt;&lt;/strong&gt; here. When you call the Parent with '&lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;' (&lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt; refers to the newly created object when you say &lt;strong&gt;&lt;em&gt;new Child()&lt;/em&gt;&lt;/strong&gt;), the Parent function executes to add the property &lt;strong&gt;&lt;em&gt;p&lt;/em&gt;&lt;/strong&gt; on &lt;strong&gt;&lt;em&gt;new Child()&lt;/em&gt;&lt;/strong&gt;. Now in every new instance you create from the Child function, you get access to instance properties of Parent &amp;amp; Child both along with patched properties of both &lt;strong&gt;&lt;em&gt;Parent.prototype&lt;/em&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;em&gt;Child.prototype&lt;/em&gt;&lt;/strong&gt;. Additionally, now patching &lt;strong&gt;&lt;em&gt;Child.prototype&lt;/em&gt;&lt;/strong&gt; will not impact Parent. Now that's something we can kind of call inheritance. Just to touch upon the concept of &lt;strong&gt;&lt;em&gt;prototype chaining&lt;/em&gt;&lt;/strong&gt;, it goes without saying that if you try to access &lt;strong&gt;&lt;em&gt;aChild.randomProperty&lt;/em&gt;&lt;/strong&gt; given &lt;strong&gt;&lt;em&gt;aChild = new Child();&lt;/em&gt;&lt;/strong&gt; , it shall be first looked up in the property list of &lt;strong&gt;&lt;em&gt;aChild&lt;/em&gt;&lt;/strong&gt; itself, if not found it should be searched for in &lt;strong&gt;&lt;em&gt;aChild.__proto__&lt;/em&gt;&lt;/strong&gt; (the intermediary object we discussed earlier), next in &lt;strong&gt;&lt;em&gt;aChild.__proto__.__proto__&lt;/em&gt;&lt;/strong&gt; until the search reaches &lt;strong&gt;&lt;em&gt;Object.prototype&lt;/em&gt;&lt;/strong&gt; which is the last man standing in the prototype chain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3bt6sZHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qmf4qp1wssxc3iu5jjc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3bt6sZHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qmf4qp1wssxc3iu5jjc.PNG" alt="A look at new Child()‍"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;h6&gt;A look at new Child()‍&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;



&lt;h2&gt;
  &lt;a href="#take-away"&gt;
  &lt;/a&gt;
  Take Away
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Every function's &lt;strong&gt;&lt;em&gt;.prototype&lt;/em&gt;&lt;/strong&gt; property is of type - object except function Function. (It's &lt;strong&gt;&lt;em&gt;.prototype&lt;/em&gt;&lt;/strong&gt; property is of type - function)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every function's &lt;strong&gt;&lt;em&gt;.__proto__&lt;/em&gt;&lt;/strong&gt; property is always equal to &lt;strong&gt;&lt;em&gt;Function.prototype&lt;/em&gt;&lt;/strong&gt; and hence of the type - Function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Objects don't have &lt;strong&gt;&lt;em&gt;.prototype&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every object's &lt;strong&gt;&lt;em&gt;.__proto__&lt;/em&gt;&lt;/strong&gt; property is of type object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An object's &lt;strong&gt;&lt;em&gt;.__proto__&lt;/em&gt;&lt;/strong&gt; property takes its value from the &lt;strong&gt;&lt;em&gt;.prototype&lt;/em&gt;&lt;/strong&gt; property of the Function from which it was created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If an object was not created using any particular function (created using object literal or using Object.create(Object.prototype)), the value of it's &lt;strong&gt;&lt;em&gt;.__proto__&lt;/em&gt;&lt;/strong&gt; property will be &lt;strong&gt;&lt;em&gt;Object.prototype&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an object from a class &lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt; or a function &lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt; : let &lt;strong&gt;&lt;em&gt;objA = Object.create(A.prototype);&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;let objA = new A();&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In ES5, inheritance looks like so : &lt;strong&gt;&lt;em&gt;let anObjectFromParent = Object.create(Parent.prototype);&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;Child.prototype = anObjectFromParent;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In ES6, the &lt;strong&gt;&lt;em&gt;extends&lt;/em&gt;&lt;/strong&gt; keyword plays the role of &lt;strong&gt;&lt;em&gt;Object.create(Parent.prototype)&lt;/em&gt;&lt;/strong&gt; and the &lt;strong&gt;&lt;em&gt;super&lt;/em&gt;&lt;/strong&gt; keyword invokes the constructor of the parent.‍‍&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accessing &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; directly on an object is not as optimal as using the &lt;strong&gt;&lt;em&gt;new&lt;/em&gt;&lt;/strong&gt; keyword, &lt;strong&gt;&lt;em&gt;Object.create&lt;/em&gt;&lt;/strong&gt; (to set) and &lt;strong&gt;&lt;em&gt;Object.getPrototypeOf&lt;/em&gt;&lt;/strong&gt; (to get).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; is just a way to programmatically access an object's &lt;strong&gt;&lt;em&gt;[[Prototype]]&lt;/em&gt;&lt;/strong&gt; internal slot which is otherwise not accessible in code.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#originally-posted-here-"&gt;
  &lt;/a&gt;
  Originally Posted Here -
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mayankav.webflow.io/blog/javascript-prototypal-inheritance"&gt;https://mayankav.webflow.io/blog/javascript-prototypal-inheritance&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>Run React Native Android App On Mac M1</title>
      <author>RAVI SHARMA</author>
      <pubDate>Sat, 17 Jul 2021 22:27:47 +0000</pubDate>
      <link>https://dev.to/ravics09/run-react-native-android-app-on-mac-m1-2goh</link>
      <guid>https://dev.to/ravics09/run-react-native-android-app-on-mac-m1-2goh</guid>
      <description>&lt;p&gt;Hi Guys Ravi here...&lt;br&gt;
So many people asking about running the android app on mac m1 system and about its performance on mac m1. So In this post I am sharing all steps to run the react-native android app on mac m1. &lt;/p&gt;

&lt;p&gt;Android Emulator for M1 is not available on stable releases yet and I am also waiting for Android Studio to fully support M1 macs so that I can use it for developing my React Native project. &lt;/p&gt;

&lt;p&gt;But!&lt;br&gt;&lt;br&gt;
Android Studio Preview has supported M1 chips pretty well so I am using that one to test my android app.&lt;/p&gt;

&lt;p&gt;You can download Android Emulator for M1 from the below link:&lt;br&gt;
&lt;a href="https://github.com/google/android-emulator-m1-preview/releases/tag/0.3"&gt;https://github.com/google/android-emulator-m1-preview/releases/tag/0.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.Setup M1 Android Emulator:&lt;br&gt;
You can watch my video on Android Studio Setup on Mac M1:&lt;br&gt;
&lt;a href="https://youtu.be/3clEUFzXPjA"&gt;https://youtu.be/3clEUFzXPjA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvAo3baE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e6qnx6p2gltosns8kax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvAo3baE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e6qnx6p2gltosns8kax.png" alt="Running Android Emulator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.After Setting Android Emulator On Mac M1 edit your bash_profile. To edit it open your terminal and run below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;open ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this line to your bash_profile, and replace the user-name with your username&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export PATH="$PATH:/Users/user-name/Library/Android/sdk/platform-tools"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0h_a9Ai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl771auwiv511z0xnrli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0h_a9Ai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl771auwiv511z0xnrli.png" alt="Android Studio Environment Variable Setup"&gt;&lt;/a&gt;&lt;br&gt;
save and close. Run this command to reload your bash_profile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Then In Terminal check available adb devices by running below command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will show your Android Emulator&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UhE_u0AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yas55fp80rak32hsc683.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UhE_u0AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yas55fp80rak32hsc683.png" alt="Listed Android Emulator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.Now Create React Native Project by running below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx react-native init AndroidApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5.Once the project is created, Go to your react-native Project then go to android directory Create a file with following name "local.properties".&lt;/p&gt;

&lt;p&gt;Open the file and paste your Android SDK path like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sdk.dir = /Users/USERNAME/Library/Android/sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--psC-a0Na--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6k1req8jutat9bv7g84g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psC-a0Na--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6k1req8jutat9bv7g84g.png" alt="local.properties"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.Now run your react native project by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx react-native run-android
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;7.Now Your app will run in Android Emulator&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EYcE4zVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21dj8ojuspj0rg3fumre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYcE4zVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21dj8ojuspj0rg3fumre.png" alt="Running RN Android App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any question or facing any issue you can ask me.&lt;br&gt;
If you like this post hit like button.&lt;br&gt;
Thanks for reading this post.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>macbookm1</category>
      <category>android</category>
      <category>macm1</category>
    </item>
    <item>
      <title>a first look at postgraphile with railway</title>
      <author>anthony-campolo</author>
      <pubDate>Sat, 17 Jul 2021 22:04:09 +0000</pubDate>
      <link>https://dev.to/ajcwebdev/a-first-look-at-postgraphile-with-railway-1k9d</link>
      <guid>https://dev.to/ajcwebdev/a-first-look-at-postgraphile-with-railway-1k9d</guid>
      <description>&lt;p&gt;PostGraphile builds a GraphQL API from a PostgreSQL schema in seconds that automatically detects tables, columns, indexes, relationships, views, types, functions, and comments.&lt;/p&gt;

&lt;p&gt;By combining features such as PostgreSQL's &lt;a href="https://www.postgresql.org/docs/current/static/user-manag.html"&gt;role-based grant system&lt;/a&gt; and &lt;a href="https://www.postgresql.org/docs/current/static/ddl-rowsecurity.html"&gt;row-level security policies&lt;/a&gt; with Graphile Engine's &lt;a href="https://www.graphile.org/graphile-build/look-ahead/"&gt;GraphQL look-ahead&lt;/a&gt; and &lt;a href="https://www.graphile.org/graphile-build/plugins/"&gt;plugin expansion&lt;/a&gt; technologies, PostGraphile ensures your generated schema is secure, performant and extensible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-provision-a-postgresql-database-with-railway"&gt;
  &lt;/a&gt;
  1. Provision a PostgreSQL database with Railway
&lt;/h2&gt;

&lt;p&gt;There are two ways to setup a PostgreSQL database with Railway, through the dashboard or through the CLI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#railway-dashboard"&gt;
  &lt;/a&gt;
  Railway Dashboard
&lt;/h3&gt;

&lt;p&gt;Click &lt;a href="https://dev.new"&gt;dev.new&lt;/a&gt; and choose "Provision PostgreSQL" After the database is setup click "PostgreSQL" on the left and then choose "Connect". Copy and paste the PostgreSQL client command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#railway-cli"&gt;
  &lt;/a&gt;
  Railway CLI
&lt;/h3&gt;

&lt;p&gt;First you need to &lt;a href="http://railway.app/"&gt;create a Railway account&lt;/a&gt; and install the &lt;a href="https://docs.railway.app/cli/installation"&gt;Railway CLI&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-railway-cli-version"&gt;
  &lt;/a&gt;
  Check Railway CLI version
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;railway version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;railway version 0.2.40
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#login-with-raw-railway-login-endraw-"&gt;
  &lt;/a&gt;
  Login with &lt;code&gt;railway login&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;railway login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#initialize-project-with-raw-railway-init-endraw-"&gt;
  &lt;/a&gt;
  Initialize project with &lt;code&gt;railway init&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Run the following command, select “Empty Project,” and give your project a name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;railway init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#provision-postgresql-with-raw-railway-add-endraw-"&gt;
  &lt;/a&gt;
  Provision PostgreSQL with &lt;code&gt;railway add&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Run the following command and select PostgreSQL to add a plugin to your Railway project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;railway add
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#connect-to-database-with-raw-psql-endraw-"&gt;
  &lt;/a&gt;
  Connect to database with &lt;code&gt;psql&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Replace &lt;code&gt;xxxx&lt;/code&gt; with your database password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;PGPASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xxxx psql &lt;span class="nt"&gt;--host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;containers-us-west-2.railway.app &lt;span class="nt"&gt;--username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgres &lt;span class="nt"&gt;--port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5675 &lt;span class="nt"&gt;--dbname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;railway
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;psql (13.3, server 13.2)
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type "help" for help.

railway=# 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#seed-database"&gt;
  &lt;/a&gt;
  Seed database
&lt;/h3&gt;

&lt;p&gt;Run the following SQL commands to create a test table with seed data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'This is a blog post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Wooooooo'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Another blog post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Even better than the other!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OxxAk42Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93pzypyfryw1oqx5rjt7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxxAk42Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93pzypyfryw1oqx5rjt7.png" alt="01-railway-seed-data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-tables-in-database"&gt;
  &lt;/a&gt;
  List tables in database
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="se"&gt;\d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        List of relations
 Schema | Name | Type  |  Owner   
-------------+------+-------+----------
 public | post | table | postgres
(1 row)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#describe-table"&gt;
  &lt;/a&gt;
  Describe table
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="se"&gt;\d&lt;/span&gt; post
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;              Table "public.post"
 Column | Type | Collation | Nullable | Default 
-------------+------+-----------+----------+---------
 title  | text |           |          | 
 body   | text |           |          | 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#quit-psql"&gt;
  &lt;/a&gt;
  Quit psql
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="se"&gt;\q&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#copy-database-connection-string-to-clipboard"&gt;
  &lt;/a&gt;
  Copy database connection string to clipboard
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;railway variables get DATABASE_URL&lt;span class="sb"&gt;`&lt;/span&gt; | pbcopy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-introspect-database-with-postgraphile"&gt;
  &lt;/a&gt;
  2. Introspect Database with PostGraphile
&lt;/h2&gt;

&lt;p&gt;It is easy to install PostGraphile with &lt;a href="https://docs.npmjs.com/getting-started/installing-node"&gt;npm&lt;/a&gt;, although the PostGraphile documentation does not recommend installing PostGraphile globally if you want to use plugins.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; postgraphile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do not globally install you will need to add &lt;code&gt;npx&lt;/code&gt; the beginning of all &lt;code&gt;postgraphile&lt;/code&gt; commands in this tutorial.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introspect-railway-database"&gt;
  &lt;/a&gt;
  Introspect Railway Database
&lt;/h3&gt;

&lt;p&gt;Enter the following command to connect to your Railway database including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Username - &lt;code&gt;postgres&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Password - &lt;code&gt;xxxxxxxx&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Host - &lt;code&gt;containers-us-west-10.railway.app&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Port - &lt;code&gt;7215&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Database name - &lt;code&gt;railway&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;postgraphile &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'postgresql://postgres:xxxxxxxx@containers-us-west-10.railway.app:7215/railway'&lt;/span&gt; &lt;span class="nt"&gt;--watch&lt;/span&gt; &lt;span class="nt"&gt;--enhance-graphiql&lt;/span&gt; &lt;span class="nt"&gt;--dynamic-json&lt;/span&gt; &lt;span class="nt"&gt;--port&lt;/span&gt; 5001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;code&gt;localhost:5001/graphiql&lt;/code&gt; and send the following query.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gui29kjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k67m0nstevn58dh85liy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gui29kjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k67m0nstevn58dh85liy.png" alt="02-postgraphile-graphiql"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#send-raw-post-endraw-request-to-the-endpoint-with-raw-curl-endraw-"&gt;
  &lt;/a&gt;
  Send &lt;code&gt;POST&lt;/code&gt; request to the endpoint with &lt;code&gt;curl&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--request&lt;/span&gt; POST &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--url&lt;/span&gt; &lt;span class="s2"&gt;"http://localhost:5001/graphql"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--header&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;'{"query":"{ query { allPosts { totalCount nodes { body title } } } }"}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"query"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"allPosts"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"totalCount"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"nodes"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Wooooooo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"This is a blog post"&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Even better than the other!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Another blog post"&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#connect-to-endpoint-with-ngrok"&gt;
  &lt;/a&gt;
  Connect to endpoint with ngrok
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt; provides an instant, secure URL to your localhost server through any NAT or firewall where you can introspect all HTTP traffic running over your tunnels.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./ngrok http 5001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Session Status                online
Account                       Anthony Campolo (Plan: Free)
Version                       2.3.40
Region                        United States (us)
Web Interface                 http://127.0.0.1:4040
Forwarding                    http://363ef1ef5cf3.ngrok.io -&amp;gt; http://localhost:5001
Forwarding                    https://363ef1ef5cf3.ngrok.io -&amp;gt; http://localhost:5001

Connections                   ttl     opn     rt1     rt5     p50     p90
                              2       0       0.00    0.00    5.11    5.21
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Send the same query with your API tool of choice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nNPK2jx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmdadlx9uykt31ie8k4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nNPK2jx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmdadlx9uykt31ie8k4x.png" alt="03-all-posts-query"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>postgraphile</category>
      <category>postgres</category>
      <category>graphql</category>
      <category>railway</category>
    </item>
    <item>
      <title>Javascript Modules
</title>
      <author>Chandelier Axel</author>
      <pubDate>Sat, 17 Jul 2021 21:42:06 +0000</pubDate>
      <link>https://dev.to/spartakyste/javascript-modules-hhf</link>
      <guid>https://dev.to/spartakyste/javascript-modules-hhf</guid>
      <description>&lt;p&gt;Whats is a &lt;strong&gt;module&lt;/strong&gt; ?&lt;/p&gt;

&lt;p&gt;Basically modules are pieces of code that can be imported anywhere in your application. A module is really easily recognizable, as soon as you see the &lt;strong&gt;import&lt;/strong&gt; or &lt;strong&gt;export&lt;/strong&gt; keyword, you're dealing with a module.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So... pretty much everything is a module ?&lt;/li&gt;
&lt;li&gt;What about the &lt;em&gt;require&lt;/em&gt; keyword I've seen here and here ?&lt;/li&gt;
&lt;li&gt;How do I use them ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll cover everything from this point onward.&lt;/p&gt;

&lt;p&gt;Grab a coffee, and let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bit-of-history"&gt;
  &lt;/a&gt;
  A bit of history
&lt;/h2&gt;

&lt;p&gt;As we can't really understand something without the knowledge of &lt;em&gt;why&lt;/em&gt; it exist, we'll take a quick historical detour.&lt;/p&gt;

&lt;p&gt;Waaaaay back in the days, nothing known as modules existed. But also, Javascript wasn't as widely used as it is today, it's only purpose was pretty much to add interactivity on your website.&lt;br&gt;
Time goes on, and the use-cases grown as well. Javascript is more and more used, up to a point where JS was well-know for his monstruous single page codebase.&lt;/p&gt;

&lt;p&gt;And nobody like 2000 lines long of code within a single file, right ?&lt;/p&gt;

&lt;p&gt;So we needed a way to be able to split our code for obvious reasons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt; were born.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#amd-commonjs-umd"&gt;
  &lt;/a&gt;
  AMD, CommonJS, UMD
&lt;/h3&gt;

&lt;p&gt;Unfortunaly, no specifications managed to solve this problem, so the community started to build tools that would solve the problem. &lt;/p&gt;

&lt;p&gt;This is what &lt;em&gt;AMD&lt;/em&gt;, &lt;em&gt;Common JS&lt;/em&gt; and &lt;em&gt;UMD&lt;/em&gt; are, tools to &lt;strong&gt;enable modularization&lt;/strong&gt; within our projects.&lt;/p&gt;

&lt;p&gt;From this point onward, we were able to do this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// multiply.js&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./multiply.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Relative path to the file&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're now able to get the multiply function from any file by adding the correct require at the top level of your file.&lt;/p&gt;

&lt;p&gt;2000 lines long files era is over !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#es6-export-and-import"&gt;
  &lt;/a&gt;
  ES6, export and import
&lt;/h3&gt;

&lt;p&gt;Up to the ES6 release in 2015, we had to use such tools to split our codes and using modules. Now we got a &lt;strong&gt;standardized&lt;/strong&gt; syntax and now work without such tools !&lt;/p&gt;

&lt;p&gt;If we take back our previous example, this how it look like now :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// multiply.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./multiply.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// Relative path to the file&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ES6 is here, we can now use const keyword 😉&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Welcome to the present, let's dive straight into the &lt;em&gt;ES6 modules&lt;/em&gt; !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I'll take functions as exemples because they are, in my opinion, the easiest way to understand modules. But you can do the exacte same behavior with all JS data types such as objects, arrays, etc.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#named-exportsimports"&gt;
  &lt;/a&gt;
  Named exports/imports
&lt;/h3&gt;

&lt;p&gt;You can either export this way :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR this way :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both are actually working and complety valid, they actually are doing the exact same thing. So what's the difference ? Well, let's say we have multiples things that we want to export, we can either add export in front of every functions ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR we could group all the export in one place :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now use our functions in a different file :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./multiply.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be very careful, the names of the values within the brackets &lt;strong&gt;must be the same as the exported ones&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./multiply.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//&amp;lt;--- Will fail because there's nothing named 'foo' exported from the file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;IMPORTANT NOTES&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Exporting this way will give you &lt;em&gt;references&lt;/em&gt; to the exported things, meaning that every modification on the value, will have an impact on all your imports.&lt;/p&gt;

&lt;p&gt;Quick example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// After 10 ms, we change the value of bar&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./foo.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;--- { bar: false }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if the modification was caused by a function into a specific workflow ? You now have a global mutation, and lost track of the value of your object within your application. It may cause crashes and such terrible headaches debugging.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#default-exportsimports"&gt;
  &lt;/a&gt;
  Default exports/imports
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding the &lt;strong&gt;as default&lt;/strong&gt; allow you to do the following :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./multiply.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- You're now free to remove the brackets&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oh, wait, before we move on, let's use the shortcut synthax for the export :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using a default exports has multiples consequences : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It no longer export a &lt;em&gt;reference&lt;/em&gt; but a value, it may be changed witout impacts on other imports&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You are free to name your imports variable however you want, it's no longer binded to the exported names&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./multiply.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- You're still getting the multiply function, but it's renamed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can only do ONE default export per module&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;IMPORTANT NOTES&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There's actually a difference between&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But this is way past the goal of this article. Besides, Jake Archibald did an amazing blog post that you can found &lt;a href="https://jakearchibald.com/2021/export-default-thing-vs-thing-as-default/"&gt;here&lt;/a&gt; that fully cover the subject.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#fancy-but-useful-features"&gt;
  &lt;/a&gt;
  Fancy but useful features
&lt;/h2&gt;

&lt;p&gt;We covered the basics to get you started with the modules in JS, but there's some more syntax to know about imports/exports !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mixing-named-and-default-exportsimports"&gt;
  &lt;/a&gt;
  Mixing named and default exports/imports
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//multiply.js&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./multiply.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- Work like a charm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#renaming"&gt;
  &lt;/a&gt;
  Renaming
&lt;/h3&gt;

&lt;p&gt;You're free to rename you imports/exports within the declaration :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// multiply.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./multiply.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- Will give you the multiply function&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// multiply.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./multiply.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This came become handy in case you have name conflicts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#import-everything-at-once"&gt;
  &lt;/a&gt;
  Import everything at once
&lt;/h3&gt;

&lt;p&gt;Let's say you have a pretty big list of exported things :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of importing them all one by one  :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./foo.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You're allowed to do this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;whateverYouLike&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./foo.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;whateverYouLike&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;whateverYouLike&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll wrap up here, I hope you enjoyed and learnt has much as I did writing this, feel free to reach me to discuss about it or if any mistakes were made.&lt;/p&gt;

&lt;p&gt;You can find the original article on the &lt;a href="https://othrys.dev/author/axel/"&gt;Othrys website&lt;/a&gt; and you can follow my &lt;a href="https://twitter.com/ChandelierAxel"&gt;Tweeter&lt;/a&gt; or tag me here to discuss about this article. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introduction to the Document Makeup Library (DML) </title>
      <author>Eckehard</author>
      <pubDate>Sat, 17 Jul 2021 21:32:46 +0000</pubDate>
      <link>https://dev.to/efpage/introduction-to-the-document-makeup-library-dml-1aak</link>
      <guid>https://dev.to/efpage/introduction-to-the-document-makeup-library-dml-1aak</guid>
      <description>&lt;p&gt;The web has evolved a lot since the days of Tim Berners-Lee, but we are still using some of the initial concepts. From a &lt;strong&gt;technical&lt;/strong&gt; view, HTML is superfuous: We can access the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API"&gt;HTML-DOM-API&lt;/a&gt; directly to build the DOM. From a &lt;strong&gt;programmers&lt;/strong&gt; view, there are good reasons to &lt;a href="https://dev.to/efpage/what-s-wrong-with-webdesign-9dh"&gt;rethink the whole concept.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Maybe it´s time for a new approach.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/efpage/DML"&gt;Document Makeup Library&lt;/a&gt; &lt;strong&gt;(DML)&lt;/strong&gt; is a new Javascript library that has just been released as &lt;strong&gt;&lt;em&gt;Open Source&lt;/em&gt;&lt;/strong&gt;. DML makes it increadibly easy to build complex web applications using just vanilla javascript &lt;em&gt;(one language to rule them all...)&lt;/em&gt;. It let´s you create DOM elements using the tags you are used to - not in html, but from within Javascript. h1() creates an &amp;lt;h1&amp;gt;-element, p() a &amp;lt;p&amp;gt; and so on. This makes it possible to "bypass" the traditional HTML-approach completely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What´s the advantage?&lt;/em&gt;&lt;/strong&gt; Much more than you would think: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Element creation gains some programmatical "intelligence": You can create new elements on the fly using conditions If -&amp;gt; create element A, else -&amp;gt; create element B.&lt;/li&gt;
&lt;li&gt;Most Elements have been "pimped" a bit to be more accessible: Simply apply an array to a list using ul(["Milk","Butter","Tea"]) to create a populated list.&lt;/li&gt;
&lt;li&gt;DML functions return references to DOM elements, so there is no need to use "getElementById" anymore. It is even not neccessary to use ID´s and Classes at all (though you can still use them if you want). Because elements are created from within Javascript, DOM elements become part of Javascript objects giving direct access to the object state. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;No need to use a virtual DOM&lt;/em&gt;, direct access is blazing fast on current browswers. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;No need to use a Shadow DOM&lt;/em&gt;, as CSS properties can be fully encapsulated to prevent side effects.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You will find more useful aspects using the DML-approach. After a few days you will ask yourself how you did it before? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scope-of-use"&gt;
  &lt;/a&gt;
  Scope of use
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Build complete web applications with DML from sratch (Which is prooved by the DML homepage and other applications). This is easier if you have some experience to use object oriented design patterns. &lt;/li&gt;
&lt;li&gt;Use Javascript functions and classes instead of templates and components. It is easy to create your own module libraries that provide reusable components&lt;/li&gt;
&lt;li&gt;DML also integrates seamlessly with other frameworks, as it does not presuppose a certain workflow.&lt;/li&gt;
&lt;li&gt;If you like them: DML is ideal to create webcomponents&lt;/li&gt;
&lt;li&gt;DML can also integrate existing webcomponent libraries into your workflow. Just write some short wrappers. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The core of the DML-libary is free (Open Source under the  CC0-1.0 License), a complete introduction and reference can be found &lt;a href="https://efpage.de/DML/DML_homepage/index.html"&gt;here&lt;/a&gt;. There are some more advanced modules available for professional use (e.g a charting library with an unlimited number of axis on each side of a diagram). &lt;/p&gt;

&lt;p&gt;The homepage itself was created using DML too. It provides lot´s of "living" examples that can be changed to immediately see the effects. Please try out yourself! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-seo"&gt;
  &lt;/a&gt;
  What about SEO?
&lt;/h3&gt;

&lt;p&gt;It is true: DML creates dynamic websites, bypassing the traditional HTML-part (though you can still use HTML). Some search engines will not be able to read the content of your site then (beside Google, that can render and index dynamic pages too). But this is not different from React or Vue, that have a similar approach. DML is still a very young project, so server side rendering is not yet implemented.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>framework</category>
    </item>
    <item>
      <title>How to position items within a container using Flex Box ?</title>
      <author>Danyson</author>
      <pubDate>Sat, 17 Jul 2021 21:22:20 +0000</pubDate>
      <link>https://dev.to/danyson/how-to-position-items-within-a-container-using-flex-box-153o</link>
      <guid>https://dev.to/danyson/how-to-position-items-within-a-container-using-flex-box-153o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-create-a-container-with-items"&gt;
  &lt;/a&gt;
  1. Create a Container with items
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  Html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container"&amp;gt;
    &amp;lt;div class="item"&amp;gt;A&amp;lt;/div&amp;gt;
    &amp;lt;div class="item"&amp;gt;B&amp;lt;/div&amp;gt;
    &amp;lt;div class="item"&amp;gt;C&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container{
    width: 720px;
    height: 480px;
    background-color: blue;
}

.item{
    font-size: 18px;
    text-align: center;
    padding: 5px 10px;
    border: 1px solid green;
    background-color: orange;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-apply-flex-box-to-the-container"&gt;
  &lt;/a&gt;
  2. Apply Flex Box to the container
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container{
    display: flex; /* flex box applied here */
    width: 720px;
    height: 480px;
    background-color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-add-flexdirection"&gt;
  &lt;/a&gt;
  3. Add Flex-Direction
&lt;/h1&gt;

&lt;p&gt;We can now add a ‘flex-direction’ property to the container and assign one of the following values:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-direction: row;&lt;/code&gt; - Aligns items horizontally, left to right. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T758478y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yombmv9yuxazn217wrx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T758478y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yombmv9yuxazn217wrx.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-direction: column;&lt;/code&gt; - Aligns items vertically, top to bottom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iDCqnrGh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp7oc3dbpdsmyor155yj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iDCqnrGh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp7oc3dbpdsmyor155yj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-direction: row-reverse;&lt;/code&gt;- Aligns items horizontally, right to left.;`&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtHvaYdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzwjh5tyn3dz2k3wj1bk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtHvaYdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzwjh5tyn3dz2k3wj1bk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-direction: column-reverse;&lt;/code&gt;- Aligns items vertically, bottom to top.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HBb_dW84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaq2dero888y1848c9k9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HBb_dW84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaq2dero888y1848c9k9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-add-justifycontent"&gt;
  &lt;/a&gt;
  4. Add Justify-Content
&lt;/h1&gt;

&lt;p&gt;We can place the items at different positions along the container’s main axis by using the ‘justify-content’ property coupled with one of the following values:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: flex-start;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpsJD5bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6kieh5yz0wu5tkpcsnv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpsJD5bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6kieh5yz0wu5tkpcsnv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: flex-end;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--afMg7oEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5hqruc0kytqhjmctkik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--afMg7oEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5hqruc0kytqhjmctkik.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: center;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tgn-Xl6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2ro2n75uj6env036jyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tgn-Xl6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2ro2n75uj6env036jyg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: space-between;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ui9JI4PB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82s0kmiig43k07oao0aw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ui9JI4PB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82s0kmiig43k07oao0aw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: space-around;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRMa2Gis--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/231vsqzhjoa2pc204isc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRMa2Gis--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/231vsqzhjoa2pc204isc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: space-evenly;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DzS7cIXa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pawdeo9kjmginde5s0z2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzS7cIXa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pawdeo9kjmginde5s0z2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-add-alignitems"&gt;
  &lt;/a&gt;
  5. Add Align-Items
&lt;/h1&gt;

&lt;p&gt;We can place the items at different along the container’s cross axis by using the ‘align-items’ property coupled with one of the following values:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-items: flex-start;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3LqzNZSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxbf1k66k5w34z2m1yq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3LqzNZSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxbf1k66k5w34z2m1yq9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-items: flex-end;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8FQ2kwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsprtcdux0dvvb61631z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8FQ2kwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsprtcdux0dvvb61631z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-items: center;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l0nJme8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzkqlwxw8v5bw8ngqeaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0nJme8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzkqlwxw8v5bw8ngqeaj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-items: strech;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gh3zwZf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99gv7qus4j96pgdyu61i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gh3zwZf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99gv7qus4j96pgdyu61i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our Tech works @ &lt;a href="https://matrixautomata.netlify.app/"&gt;Matrix Automata&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>🕒Another yet TimeTracker</title>
      <author>Yadro</author>
      <pubDate>Sat, 17 Jul 2021 21:20:39 +0000</pubDate>
      <link>https://dev.to/yadro/another-yet-timetracker-2bp1</link>
      <guid>https://dev.to/yadro/another-yet-timetracker-2bp1</guid>
      <description>&lt;p&gt;Hello, I would like to introduce my app - &lt;a href="https://github.com/Yadro/time-tracker/releases"&gt;TimeTracker&lt;/a&gt;. This app would be helpful for people who want to know how much time was spent on their tasks. It was written on Electron using TypeScript. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-part"&gt;
  &lt;/a&gt;
  Technical part
&lt;/h2&gt;

&lt;p&gt;The app is based on &lt;a href="https://github.com/electron-react-boilerplate/electron-react-boilerplate"&gt;electron-react-boilerplate&lt;/a&gt;. It uses React for rendering, Mobx for storing the state, and &lt;a href="https://ant.design/"&gt;Ant&lt;/a&gt; for CSS. Also, I've attached jss to declare styles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#app-description"&gt;
  &lt;/a&gt;
  App description
&lt;/h2&gt;

&lt;p&gt;You can track time, add notes, view reports of the tracked time, and more.&lt;br&gt;&lt;br&gt;
Start and stop time, jump between tasks, and add details on how the time was spent.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  💎Features:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;create projects (choose project color)&lt;/li&gt;
&lt;li&gt;create tasks with subtasks (drag&amp;amp;drop supported)&lt;/li&gt;
&lt;li&gt;track time in tasks&lt;/li&gt;
&lt;li&gt;change start time and end time of tasks&lt;/li&gt;
&lt;li&gt;add details on how time was spent&lt;/li&gt;
&lt;li&gt;receive notifications when task is in progress or when you idle&lt;/li&gt;
&lt;li&gt;switch between profiles&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  Screenshots
&lt;/h3&gt;

&lt;p&gt;
  Press me
  &lt;br&gt;
Tasks:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XH0HbWgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aj50tcn8y451iptyrt80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XH0HbWgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aj50tcn8y451iptyrt80.png" alt="Screenshot 2021-07-17 224420"&gt;&lt;/a&gt; 

&lt;p&gt;Task description:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RAMN88-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pqishav9tg9siqjt352.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RAMN88-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pqishav9tg9siqjt352.png" alt="Screenshot 2021-07-17 224508"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hours tab:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXiQvqRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odkovi7xq62cduyponuc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXiQvqRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odkovi7xq62cduyponuc.png" alt="Screenshot 2021-07-17 224520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Edit time range description:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tSMTaVxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0msjselnittddyaco68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tSMTaVxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0msjselnittddyaco68.png" alt="Screenshot 2021-07-17 224535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Settings modal:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qrztAgM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e8d7oirc6ljom4e1x4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qrztAgM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e8d7oirc6ljom4e1x4s.png" alt="Screenshot 2021-07-17 224430"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://github.com/Yadro/time-tracker/releases"&gt;Download link&lt;/a&gt; (Windows only yet)&lt;br&gt;
Glad if the app would be helpful 😊&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>showdev</category>
      <category>electron</category>
      <category>react</category>
    </item>
  </channel>
</rss>
