<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>PCI Devices in Linux</title>
      <author>Gaurav Maheshwari</author>
      <pubDate>Sat, 31 Jul 2021 18:11:07 +0000</pubDate>
      <link>https://dev.to/gaurav24072002/pci-devices-in-linux-36fi</link>
      <guid>https://dev.to/gaurav24072002/pci-devices-in-linux-36fi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-pci-devices-"&gt;
  &lt;/a&gt;
  What are PCI Devices ?
&lt;/h2&gt;

&lt;p&gt;A PCI device is any piece of computer hardware that plugs directly into a PCI slot on a computer's motherboard. PCI, which stands for Peripheral Component Interconnect, was introduced to personal computers by the Intel Corporation in 1993. The technology to operate PCI is integrated into the motherboard of nearly every personal computer manufactured since 1995. A PCI connection on a motherboard can be identified as a long strip of raised copper connectors encased in plastic. This long strip of connectors is usually called a bus.&lt;/p&gt;

&lt;p&gt;The PCI bus is not as fast as the system bus. Its primary purpose is to facilitate communication of hardware devices of all types such as audio, video, network or graphics with the microprocessor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#command-to-list-down-all-pci-devices-in-linux-system"&gt;
  &lt;/a&gt;
  Command to list down all PCI devices in linux system.
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;lspci&lt;/code&gt; command is used to display detailed information about all PCI buses and devices in the server or desktop or laptop powered by Linux operating system.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ifIiBb7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20r1irc930neerpzaybe.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ifIiBb7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20r1irc930neerpzaybe.PNG" alt="lspci"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;lspci –tv&lt;/code&gt; command will list down all the PCI as tree structure because of &lt;code&gt;–t&lt;/code&gt; and due to &lt;code&gt;-v&lt;/code&gt; shows the device vendors and names.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PNKTdSM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pp08jkt5o3ouyy5f2c31.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PNKTdSM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pp08jkt5o3ouyy5f2c31.PNG" alt="tree pci"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;lspci -k&lt;/code&gt; shows the kernel driver that is being used to handle the respective PCI device&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xLGDrbTQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcrtc6654m72n87r1q5r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xLGDrbTQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcrtc6654m72n87r1q5r.PNG" alt="kernel pci"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;lspci -m&lt;/code&gt; is used If you want to pass the output of the lspci command to a shell script, you may want to use &lt;code&gt;-m&lt;/code&gt; option (or &lt;code&gt;-mm&lt;/code&gt; option) as shown below.&lt;br&gt;
This option is also helpful when you want to view the subsystem information.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SA6z-K0C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mja1qwajdnlpbhh9fys2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SA6z-K0C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mja1qwajdnlpbhh9fys2.PNG" alt="-m"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;lspci -n&lt;/code&gt; If you want to display the PCI vendor code, and the device code only as the numbers, use &lt;code&gt;-n&lt;/code&gt; option. This will not lookup the PCI file to get the corresponding values for the numbers.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gRTzY4yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwmlh2igtarli8q1czs4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRTzY4yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwmlh2igtarli8q1czs4.PNG" alt="-n"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are not able to apply the switches(&lt;code&gt;lspci [&amp;lt;switches&amp;gt;]&lt;/code&gt;) install pciutils.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt install pciutils
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here In the system I have 10 PCI powered by the Linux operating system. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ifIiBb7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20r1irc930neerpzaybe.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ifIiBb7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20r1irc930neerpzaybe.PNG" alt="lspci"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Host Bridge&lt;/strong&gt; - The "Host Bridge" is what connects the tree of PCI busses (which are
internally connected with PCI-to-PCI Bridges) to the rest of the
system. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kEE2A2Ra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7s5j3zh7234v79nh4s7h.gif" alt="host bridge"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ISA Bridge&lt;/strong&gt; – ISA Stands for Industry Standard Architecture. PCI to ISA bridge is the most common method of interfacing ISA devices to modern chipsets. In most respects, these devices perform like a standard PCI device.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IDE interface&lt;/strong&gt; - Integrated Drive Electronics is for connection of storages devices such as Hard Disk Drives (HDD), Solid State Drives (SSD) and CD/DVD drives to the computer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;VGA compatible controller&lt;/strong&gt; - VGA stands for Video Graphics Array. VGA Controller is the digital circuit designed to drive VGA displays.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ethernet controller&lt;/strong&gt; - Ethernet controller allows you to make a wired connection to a computer network. This provides access to the network programs and resources, including a high-speed Internet connection.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;System peripheral&lt;/strong&gt; - It is any external device that provides input and output for the computer. For example, a keyboard and mouse&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multimedia audio controller&lt;/strong&gt; - Multimedia audio controller drivers allow your operating system to communicate with the sound hardware such as your speakers, headphones, etc. Thus, if there is a problem with these drivers, your connected audio devices won't work properly.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;USB controller&lt;/strong&gt; - USB controller is an interface that allows an enabled piece of hardware to interact and communicate with a particular piece of software.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bridge&lt;/strong&gt; - Bridge is a device that connects a PCI bus to either another PCI bus or a bus of a different standard&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SATA controller&lt;/strong&gt; - SATA controller is a hardware interface that connects a hard drive to a computer's motherboard and manages or directs the flow of data&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>linux</category>
      <category>pci</category>
      <category>ubuntu</category>
      <category>bash</category>
    </item>
    <item>
      <title>I made 50+ COLOR PALETTES for you to use in your next projects and designs 🎨</title>
      <author>_CODE</author>
      <pubDate>Sat, 31 Jul 2021 17:18:27 +0000</pubDate>
      <link>https://dev.to/underscorecode/i-made-50-color-palettes-for-you-to-use-in-your-next-projects-and-designs-33f7</link>
      <guid>https://dev.to/underscorecode/i-made-50-color-palettes-for-you-to-use-in-your-next-projects-and-designs-33f7</guid>
      <description>&lt;p&gt;Hi, everybody! 👋&lt;/p&gt;

&lt;p&gt;Today, I bring you &lt;strong&gt;50+ color palettes&lt;/strong&gt; to use in your upcoming projects or to just get some inspiration out of them.&lt;/p&gt;

&lt;p&gt;I've given every palette a name to make it easier to identify them (I've tried my best, promise 😅).&lt;/p&gt;

&lt;p&gt;Let me know if you like this kind of content and if you'd like to see more articles like this in the future (about colors, gradients, fonts, design resources, etc). I'd be glad to hear from you in comments! &lt;/p&gt;

&lt;p&gt;And now, let's have a look at those color schemes 👇&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#package-1"&gt;
  &lt;/a&gt;
  Package 1
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Sunset in Arizona
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Slvxfq8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mss1kgc88a4co5dm9ar.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Pink Fall Vibes
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEK0Fgcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68ktbji1dsmzihj58ezu.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Desert Adventures
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zaPVhd47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6aa67y4gjdxkfacjdyj.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Chic Garden
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mQRJZ-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypqk17ba1cqj64bxzgqa.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Neon Lights
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rp8s4_O9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kil3v8tbh23t7o1sc587.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Pastel Cake
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZU10A_yo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skm8ce3kzrzi6g96wxce.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Acid Tangerine
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---24oHxOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvwe7u5bh0houhxy8org.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Frozen Winter
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QOnMxij---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u5fkvkekaihr5ut1z5y.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Vibing Summer
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-G489h9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s1hys7wzszugy3podlx.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Drops of Summer
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLnnUyMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pjw4urrqxwjy9sm64g9.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#package-2"&gt;
  &lt;/a&gt;
  Package 2
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt; Pink Mandarin
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n01H_9Ej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2djprisez1l9rc29irgu.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Nomadic Dreams
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jodYQK27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26uooxhg8cmuw151r0i2.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Circus Acrobat
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WrpJDiN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/di4d00yxtnkxgmchd345.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Coffee By The Sea
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LI_NV-c---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54v9hvq3wtx440wng2hh.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Strawberry Nights
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmnxWW_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biutwpnl4j3te1nqcy0w.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Dans La Fôret
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wIh-p_aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/te2wgybwbow7s1uk291j.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Easter Vibes
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ELM_bYCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smkmadp9v1ic999rxroc.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Salty Waters
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ssZrjlJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwtb32gpcib4dswzihde.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Fresh Berries
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H0MTs2r6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gw45h9aw3i0t23hfjzjf.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Skeptical Minds
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOoykqrP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjgufokwb8jko0kz1cty.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#package-3"&gt;
  &lt;/a&gt;
  Package 3
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Dry Landscape
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mv_RG3Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si03oijh0ni1abcm4yub.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Dark Sunset
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AAY3piFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v55z8atbid4e10cn7rg3.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Antartic Sun
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9mDY2GWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvjt11svzxdy44t6tn2a.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Velvet Fall
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m-JCTswH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hv5wehj9bchohug6xgi2.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Water Park
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpPjMYxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whbgycbtq19zk7ymui7p.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Origami
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---0Shuu6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvz3jubkdynpp7zwo2z3.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Nights In The City
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CJw4nmEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo4q59faa2ieog9yr7u7.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Vintage Vineyards
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7KNycnRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjne94c9pu7wmoas7aqj.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Fun &amp;amp; Games
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f7lvTHP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwgy7vakxhyo6dzq8kts.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Aquamarina
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgXvn0-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxvbqmxs6kp27vm7k652.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#package-4"&gt;
  &lt;/a&gt;
  Package 4
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Cold Pastels
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sEQRhwCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mk5ughr0m60rb7wb5bpg.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Sober Twilight
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--utVPWSdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyklze9q9ywn52118fwj.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Sandy Cocoa
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VouZSQ5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3d9t1xr6q38ty5deknv.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Tokyo Streets
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Js65BTVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bkeoy2pconjds7d5awh.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Tireless Traveler 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7RoYpeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i9kmab68etkw119jwa8.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Candy Dreams
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B32J7F2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4jiy6zn1lza7qka9b6k.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Roses &amp;amp; Wood
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2Nq7-OS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9igsye7tir515k3xh0a.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Downtown LA
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MNox-pCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0c84s9qv9ken61suauxp.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Pumpkin Spice Latte
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7iPUmAXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5m1nkt8vpttzw1wt3nl.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Honey Hearts
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aKbgP-Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2013mpyd71umuh0uwwfh.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#package-5"&gt;
  &lt;/a&gt;
  Package 5
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Orange Muffin
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RX1QJrn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21fvo7sierr55v9lot76.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Self-love
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hSM0z_16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gjbmeeco645f2c7yunh.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Trip to Paris
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDy_J5xI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc2f80enqhe6gtrld89e.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Perfect Getaway
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0omnhTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idjbf2pcgu8f418x764k.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Eclipse Solstice
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0PBL8K8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7aj6dk0tgom222zcno2b.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Muddy Feelings
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1kP4b_c1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oltrsrzp9imodojvtwzr.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Watermelon Party
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BedZ2fu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gejnodd9pz8swzlui6fn.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Golden Hour
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0Ew_8eY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um91ixfwl1wmzqpjo37u.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Sun, Sand &amp;amp; Tan
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NdY35-0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nf7gvgbmwet1com7gjgx.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Soft Skies
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0IOJxIZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zo0kpx6mxemj2no6eu2.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Vibrant Neon
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dn-tj_HT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvim0skks1gpbu0dmbc3.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Sweet Surrender
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xLVWgGKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qghjp3npsfyj1qvcvjo4.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;90s Child
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4UkItNNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y0quualy5yzwiccwrzw.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Pomegranate Paradise
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZa9q5Bn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fidhd5wkgvpkgxkj4kd2.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Brown Eyed Soul
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MTNu8YPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/povee5n8owd7tyfy97s8.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;And this is all for today! &lt;/p&gt;

&lt;p&gt;I hope you liked the article and see you all in the next 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/hFtVHPDcrVubS/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hFtVHPDcrVubS/source.gif" alt="Woman saying bye"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;🎉 Don't forget to follow &lt;a class="mentioned-user" href="https://dev.to/underscorecode"&gt;@underscorecode&lt;/a&gt;
 on &lt;a href="https://instagram.com/underscorecode"&gt;Instagram&lt;/a&gt; and &lt;a href="https://twitter.com/underscorecode"&gt;Twitter&lt;/a&gt; for more daily webdev content 🖥🖤&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>css</category>
      <category>design</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>My 2020-2021 swags collection👕</title>
      <author>Mayank Choudhary</author>
      <pubDate>Sat, 31 Jul 2021 16:39:43 +0000</pubDate>
      <link>https://dev.to/rado_mayank/my-2020-2021-swags-collection-2o4g</link>
      <guid>https://dev.to/rado_mayank/my-2020-2021-swags-collection-2o4g</guid>
      <description>&lt;p&gt;I was able to participate in different virtual events, hackathons and was able to collect some amazing swags. May it be cool stickers or t-shirts.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1SFAOjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r50f8oamu0x0z817zj3s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1SFAOjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r50f8oamu0x0z817zj3s.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
These events includes:&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;1. Hacktoberfest&lt;/strong&gt; (every year in October)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BxKUigdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4vi0onvol67ym27pmt6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BxKUigdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4vi0onvol67ym27pmt6.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;2. {FUTURE}STACK LEVELUP&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gyrC4ay9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9klnvn5zdav29sdtrapo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gyrC4ay9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9klnvn5zdav29sdtrapo.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;3. Github Remote Graduation 2021&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a_No5i8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x438thbqfmxfovcq93kp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a_No5i8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x438thbqfmxfovcq93kp.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;4. Veeam AWS Summit EMEA 2021&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--meopRQVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rauvft0l4oby3fenxusg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--meopRQVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rauvft0l4oby3fenxusg.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iKfo5-jq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tlp1k66o7ef7ht6bm1d9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iKfo5-jq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tlp1k66o7ef7ht6bm1d9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;5. Jfrog Challenge&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3O75O7Ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dksfqj0vx7aa8b0q6bec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3O75O7Ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dksfqj0vx7aa8b0q6bec.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mRM22oZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56tvgvqnb4xna6idya3z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mRM22oZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56tvgvqnb4xna6idya3z.jpg" alt="ifrog"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;6. Vonage (Hactoberfest challenge)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HOEtzFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vec9fi7oe18f42time81.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HOEtzFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vec9fi7oe18f42time81.jpg" alt="vonage"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt; &lt;strong&gt;7. New relic tshirt and mask(Kubecon NA 2021)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KqCAQQ-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17ceb98tj3ch8bwu7d5j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KqCAQQ-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17ceb98tj3ch8bwu7d5j.jpg" alt="Alt Text"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
I have finally updated my workplace corner with some cool stickers too.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hOaRFM9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09eqt8rs3z3dudhh1t7d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hOaRFM9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09eqt8rs3z3dudhh1t7d.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>swags</category>
      <category>opensource</category>
      <category>eventsinyourcity</category>
      <category>stickers</category>
    </item>
    <item>
      <title>Best Web Development Roadmap-2021</title>
      <author>Coders Helper</author>
      <pubDate>Sat, 31 Jul 2021 16:34:24 +0000</pubDate>
      <link>https://dev.to/coderzway/best-web-development-roadmap-2021-5d66</link>
      <guid>https://dev.to/coderzway/best-web-development-roadmap-2021-5d66</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;p&gt;There has never been a better time to learn to code or make a career change to software engineering. The demand for web developers is at an all-time high, and it’s only increasing. There are both free and premium tutorials online that teach you the skills to get a job as a developer — no CS degree required 🤓.&lt;/p&gt;
&lt;p id="561d"&gt;This article details the needed skills and the corresponding tutorials to learn them effectively. The illustrated guide is provided by &lt;b&gt;&lt;a href="http://www.codelivly.com"&gt;Codelivly&lt;/a&gt;&lt;/b&gt; and can be found on codelivly  — Codelivly work is excellent so be sure to star the repo and subscribe to his newsletter to support his efforts. Don’t be intimidated by the map. It may seem like a lot, but I’ll break it down so you can learn each part step-by-step.&lt;/p&gt;
&lt;p id="dda0"&gt;This article will be divided into the following sections:&lt;/p&gt;
&lt;p id="dda0"&gt;1. &lt;b&gt;&lt;a href="https://www.codelivly.com/web-developer-roadmap-2021/"&gt;Full Stack Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p id="dda0"&gt;2. &lt;b&gt;&lt;a href="https://www.codelivly.com/frontend-web-developer-roadmap/"&gt;Frontend Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p id="dda0"&gt;3. &lt;b&gt;&lt;a href="https://www.codelivly.com/backend-web-developer-roadmap/"&gt;Backend Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p id="dda0"&gt;4. &lt;b&gt;&lt;a href="https://www.codelivly.com/the-best-python-frameworks-for-web-development-in-2021/"&gt;Best Python Framework For Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;







</description>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>debug.gem blog: initial commit</title>
      <author>Koichi Sasada</author>
      <pubDate>Sat, 31 Jul 2021 16:34:03 +0000</pubDate>
      <link>https://dev.to/ko1/debug-gem-blog-initial-commit-3ip</link>
      <guid>https://dev.to/ko1/debug-gem-blog-initial-commit-3ip</guid>
      <description>&lt;h2&gt;
  &lt;a href="#about-this-series-of-articles"&gt;
  &lt;/a&gt;
  About this series of articles
&lt;/h2&gt;

&lt;p&gt;This series introduce features of &lt;a href="https://github.com/ruby/debug"&gt;ruby/debug: Debugging functionality for Ruby&lt;/a&gt; now I'm working on. debug.gem will be introduced into Ruby 3.1 which will be released Dec/2021.&lt;/p&gt;

&lt;p&gt;This article introduce about debug.gem, the background and the motivation.&lt;/p&gt;

&lt;p&gt;BTW see the recent article &lt;a href="https://dev.to/st0012/a-sneak-peek-of-ruby-s-new-debugger-5caa"&gt;A Sneak Peek of Ruby's New Debugger!&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/st0012"&gt;@st0012&lt;/a&gt;
. His great article introduces debug.gem from Ruby on Rails developer perspective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background-and-motivation"&gt;
  &lt;/a&gt;
  Background and motivation
&lt;/h2&gt;

&lt;p&gt;debug.gem is a debugger for Ruby. It is new replacement of &lt;a href="https://docs.ruby-lang.org/en/3.0.0/DEBUGGER__.html"&gt;lib/debug.rb&lt;/a&gt; which is installed from ancient Ruby 1.3.1 (!!). However, lib/debug.rb is not maintained well long time and nobody uses it. Surprisingly, most of features works on recent Ruby versions. However, it introduce performance penalties to the application and it lacks important features like flexible breakpoint setting or remote debugging or IDE integration (it can integrate with emacs, though) and so on. Also it doesn't have cosmetic features like coloring.&lt;/p&gt;

&lt;p&gt;Maybe byebug (&lt;a href="https://github.com/deivid-rodriguez/byebug"&gt;deivid-rodriguez/byebug: Debugging in Ruby 2&lt;/a&gt;) is most famous Ruby's debugger in recent years. byebug has enough features, however it doesn't utilize recent added &lt;code&gt;TracePoint&lt;/code&gt; features for debuggers, so it is slow when some breakpoint is set.&lt;/p&gt;

&lt;p&gt;byebug supports threading. However Ruby 3.0 introduced Ractor (&lt;a href="https://github.com/ruby/ruby/blob/master/doc/ractor.md"&gt;ruby/ractor.md at master · ruby/ruby&lt;/a&gt;). Ractor enables to make parallel program in Ruby, but the parallel programming is difficult and it needs support for debugging. However, it is hard to support ractors by existing debuggers.&lt;/p&gt;

&lt;p&gt;Hidden but the most important motivation is I (Koichi) likes to make a developer support tools. I feel that using debugger is difficult for the programmers. It is challenging topic to provide useful features for many Rubyists.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-new-gem"&gt;
  &lt;/a&gt;
  Making a new gem
&lt;/h2&gt;

&lt;p&gt;We talked about replacement plan of lib/debug.rb. Fortunately we can reserve "debug" gem name in rubygem.org so we decided to make a new gem and replace with lib/debug.rb&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This article introduces the background and the motivation of debug.gem.&lt;/p&gt;

&lt;p&gt;There is no debugger implementation to utilize MRI's new features for debuggers and no debugger supports Ractors. This is why we decided to make a new debugger.&lt;/p&gt;

&lt;p&gt;I really appreciate any feedback about debug.gem. Next I will introduce basic features of debug.gem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  Acknowledgements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This work is supported by &lt;a href="https://www.cookpadteam.com/careers"&gt;Cookpad&lt;/a&gt;, an employer of me (Koichi). In recent months Cookpad allowed me to focus on the debugger development.&lt;/li&gt;
&lt;li&gt;Naoto Ono helps us to prepare testing framework on Google summer of code project (&lt;a href="https://summerofcode.withgoogle.com/organizations/4697800446574592/#5080690120458240"&gt;Ruby | Google Summer of Code&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/st0012"&gt;Stan Lo&lt;/a&gt; contributes appealing features like text coloring and tells us the debugger experience on his projects.&lt;/li&gt;
&lt;li&gt;And all contributors!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>debugger</category>
    </item>
    <item>
      <title>Introduction to Python Functions!!</title>
      <author>Priscillah Nalubega</author>
      <pubDate>Sat, 31 Jul 2021 16:07:11 +0000</pubDate>
      <link>https://dev.to/priscillahnalubega/introduction-to-python-functions-2nbb</link>
      <guid>https://dev.to/priscillahnalubega/introduction-to-python-functions-2nbb</guid>
      <description>&lt;p&gt;
Functions are named blocks of code that are designed to do one specific code. Functions facilitate reusability of code. When you want to do something repeatedly you define a function and call it whenever you need it.
&lt;/p&gt;

&lt;h2&gt;Built-In Functions&lt;/h2&gt;

&lt;p&gt; 
Python comes with several built-in functions that you can use to create wonderful programs. Here are a few but not limited to built-functions.
&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
 &lt;tr&gt;
    &lt;td&gt;print()&lt;/td&gt;
    &lt;td&gt;range()&lt;/td&gt;
    &lt;td&gt;input()&lt;/td&gt;
    &lt;td&gt;list()&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;next()&lt;/td&gt;
    &lt;td&gt;round()&lt;/td&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;tuple()&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;str()&lt;/td&gt;
    &lt;td&gt;dic()&lt;/td&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;type()&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;object()&lt;/td&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;set()&lt;/td&gt;
    &lt;td&gt;eval()&lt;/td&gt;
  &lt;/tr&gt;

&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt; Creating a function&lt;/h2&gt;

&lt;p&gt; In python a function is defined using the &lt;b&gt;def&lt;/b&gt; keyword
for example:
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt; Calling a function&lt;/h3&gt;

&lt;p&gt;The above function definition is inert until the the function is triggered or called. when you call the function:
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello World
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Arguments&lt;/h2&gt;

&lt;p&gt;
Arguments refer to the information that is passed into the function
Arguments are specified after the function name, inside the parenthesis. You can add as many arguments as you want but you have to separate them with a comma. for example:
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"Hello"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Hello John
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Positional Arguments&lt;/h3&gt;

&lt;p&gt;
Because a function can have multiple parameters, a function call may need multiple arguments.You can use positional arguments which need the same order the parameters were written. This is how it works:
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;" Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; from &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Uganda&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Hello John from Uganda
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now imagine a situation when then name and the place are swapped  when the function is called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Uganda&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Hello Uganda from John
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
And this quite doesn't make sense.
This means that the first argument in the function call is used as the value of the first parameter and the second argument in the function call is used as the value of the second parameter.
To avoid such such situations from happening when can specify both the arguments and parameters together with the values that they take. These are called &lt;b&gt;Keyword arguments&lt;/b&gt;. Here the order of the arguments in the function call doesn't matter as long as the names of the parameters are correct.
&lt;/p&gt;

&lt;p&gt;Now we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Uganda"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Hello John from Uganda
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Arguments and Parameters&lt;/h3&gt;

&lt;p&gt;
A parameter is the variable listed inside the parentheses in the function definition.
An argument is the value that is sent to the function when it is called.
&lt;/p&gt;

&lt;h3&gt; Number of Arguments&lt;/h3&gt;

&lt;p&gt;By default, a function should be called with correct number of arguments. Should call a function with more or less arguments than it expects it will bring an error.
&lt;/p&gt;

&lt;p&gt;for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Jack"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Ghana"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Hello Jack from Ghana
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you try to call this function with 1 or 3 arguments&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Jack"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You get this error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "demo_function_args_error.py", line 4, in &amp;lt;module&amp;gt;
    greet("Jack")
TypeError: greet() missing 1 required positional argument: 'place'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Default Value Parameter&lt;/h3&gt;

&lt;p&gt;
When writing a function, you can define a default value for each parameter. If an argument for a parameter is provided in the function call, Python uses the argument value. If not, it uses the parameter’s default value. So when you define a default value for a parameter, you can exclude the corresponding argument you’d usually write in the function call. 
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;people&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Kenya"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I am from "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sweden"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Burundi"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Ghana"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Nigeria"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;h2&gt;Return Values&lt;br&gt;
To let a function return a value, use the &lt;b&gt;return&lt;/b&gt; statement:&lt;br&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 5
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 7
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/h2&gt;



&lt;p&gt;In conclusion, we have covered:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;ul&gt;

&lt;li&gt;what are functions&lt;/li&gt;

&lt;li&gt;Built-in functions&lt;/li&gt;

&lt;li&gt;how to define functions&lt;/li&gt;

&lt;li&gt;calling functions&lt;/li&gt;

&lt;li&gt;Arguments&lt;/li&gt;

&lt;li&gt;the difference between arguments and parameters&lt;/li&gt;

&lt;li&gt;Return values&lt;/li&gt;

Hope you enjoyed reading this article. Thank you for reading. 
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>machinelearning</category>
      <category>datascience</category>
    </item>
    <item>
      <title>The History Behind Git</title>
      <author>Ahmed Gouda</author>
      <pubDate>Sat, 31 Jul 2021 15:54:06 +0000</pubDate>
      <link>https://dev.to/ahmedgouda/the-history-behind-git-53ag</link>
      <guid>https://dev.to/ahmedgouda/the-history-behind-git-53ag</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-git"&gt;
  &lt;/a&gt;
  What is Git
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; is software that keeps track of changes that you make to files and directories. And it's especially good at keeping track of text changes. Let's imagine that you have a document. You start with version 1 of that document. You make some changes to it, now you have version 2. And you make some more changes and you now have version 3. Git keeps track of those three different versions for you. It allows you to move back and forth between the versions. And to compare the different versions to see what changed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; is referred to as a version control system or &lt;strong&gt;VCS&lt;/strong&gt; for short. Git is not the first version control system ever created, there have been others. And almost all of them had one primary purpose, to manage source code.&lt;/p&gt;

&lt;p&gt;Programmers wanted a way to be able to track the changes that they made to computer code over time, as they added features and as they fixed bugs. So they created version control. Because of this they ae also called source code management tools or SCM for short. The two terms are used pretty interchangeably.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-history-behind-git"&gt;
  &lt;/a&gt;
  The History Behind Git
&lt;/h3&gt;

&lt;p&gt;There were Versions Control Systems that predate Git. We will talk about some of the most popular and the most influential of them, and that can help us to better understand Git.&lt;/p&gt;

&lt;p&gt;The first of these is called &lt;strong&gt;SCCS&lt;/strong&gt;, for Source Code Control System. It was released in 1972 and was developed by AT&amp;amp;T and it was bundled free with the Unix operating system.&lt;br&gt;&lt;br&gt;
In primitive version control you might have a file, like a budget, and you would save version one of that file, version two, and version three, giving them different file names each time. Now when you do that, you're saving the full document three different times. That's not a very efficient way to do it. What SCCS does, is it keeps the original document but then instead of saving the whole document a second time, it just saves a snapshot of what the changes were. So if you want version five of a document, you just take version one and apply four sets of changes to it to get to version five. That's a much more efficient way to store the changes over time.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;So SCCS stayed dominant until the early 80s, when &lt;strong&gt;RCS&lt;/strong&gt; was developed, Revision Control System. And it just made lots of improvements over SCCS. For one thing, it was cross-platform, whereas SCCS was Unix only. With the rise of the personal computer it was important to have a version control system that would also work on PCs. It was also more intuitive, had a cleaner syntax with fewer commands, and more features. Most importantly, it was faster and a lot of the speed increase came from the fact that it used a smarter storage strategy than SCCS. Remember SCCs stored the original file and them kept track of all the changes to that file that went after it. RCS flipped that around, so it kept the most recent file in its whole form and if you wanted to go backwards in time, you wanted previous versions, then you applied the change snapshots to go in reverse.&lt;br&gt;&lt;br&gt;
If you think about, that's a lot faster because most of the time what we want to work with is the current document. With SCCS if we wanted the current document and there were 20 sets of changes, you had to pull up the original and then wait while 20 sets of changes were applied. With RCS you can just bring up the current file and it's already stored in its full state.&lt;br&gt;&lt;br&gt;
One of the problems with both SCCS and RCS was that they only allowed you to work with an individual file, one at a time. So you could track changes in a single file but not in sets of files or in a whole project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CVS&lt;/strong&gt; or Concurrent Versions System allowed you do to that. Now the real innovation in CVS is not just the fact that you can work with multiple files. It's the concurrent part. The fact that we can have a place where we can store our code, called the code repository, and you can put that on a remote server and more than one user can work on the same file at the same time. They can work concurrently.&lt;br&gt;&lt;br&gt;
With previous versions, only one person could work with a file at a single time. So CVS adds a lot of features for users to be able to share their work and be able to update their file with changes that other people have made and placed in the remote repository.&lt;/p&gt;

&lt;p&gt;The idea of working with remote repositories was further improved upon with Apache Subversion or &lt;strong&gt;SVN&lt;/strong&gt; for short. SVN was faster than CVS and allowed saving of non-text files, like images, where CVS couldn't do that. Most importantly, the big innovation of SVN was that it was tracking, not just changes to single files or to groups of files, but actually watching what happened in a directory as a whole. Watching files and directories collectively and actually taking a snapshot of the directory, CVS would also update files one at a time as it went to either apply or read back changes. SVN would instead do that transactional commit and apply all of the changes that happened to the directory or to none of them at all. The snapshot was bigger that just the individual files, it was an entire directory or an entire set of changes that were happening to that directory at one time. It's a subtle but important difference.&lt;/p&gt;

&lt;p&gt;Now SVN stayed the most popular version control system for a very long time. In fact until &lt;strong&gt;Git&lt;/strong&gt; came out. But there is one other Version Control System that comes in between and that was BitKeeper &lt;strong&gt;SCM&lt;/strong&gt;. It was a closed source, proprietary source code management tool. One of the important features that BitKeeper had, and it was not the first to have it, but that is &lt;em&gt;distributed version control&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Before we get to that, let's talk a little bit more about this idea of being closed source, where all the other ones that we've been looking at for a little while have been open source. The community version of BitKeeper was free and had a few less features and some usage restrictions. There was the paid version of BitKeeper but there was also a community version that they gave away for free. And that version was used for source code management of the Linux kernel from 2002 to 2005. It was controversial to use a proprietary SCM for the Linux kernel because the Linux kernel is an open source project. No one owns it, where the SCM is owned and controlled by a company. So many people objected saying, well what if they change the rules in the future? We're going to be stuck using this company's software.&lt;br&gt;&lt;br&gt;
Well guess what? In April 2005, the community version stopped being free and all those predictions came true. So BitKeeper was never as popular as CVS or SVN but it was important with the creation of &lt;strong&gt;Git&lt;/strong&gt;. Because in April 2005, when the community version stopped being free, that is the same point at which Git was born.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; was created by Linus Torvalds the person who created Linux. When BitKeeper stopped being free, they needed an alternative for managing their source code. Linus looked around and he didn't like the other VSCs that were out there, like CVS and SVN. He did like some of the concepts of BitKeeper but he thought he could do even better. So he wrote a new version control system from scratch and that was Git.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; is distributed version control, like BitKeeper. We will talk more about distributed version control. It's also open source and free, which is great for us because it means that people like you and me can download it for free, use it for free, and there's no license fees or anything like that. It also means because it's open source, the community can see the source code and contribute to it. They can submit bug fixes, add new features, all those benefits we get because it is an open source project.&lt;/p&gt;

&lt;p&gt;It is also compatible with most platforms, like Linux, macOS, and Windows. And it is faster than most other source code management tools. A hundred times faster in some cases for some operations. It also has better safe guards built into it to guard against data corruption. Now these improvements all worked. Git became a big hit. As people discovered the power of distributed version control, as they got used to all of Git's nice features, Git experienced an explosion in popularity.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>PASS GENNY - Design/dev challenge #1</title>
      <author>Keff</author>
      <pubDate>Sat, 31 Jul 2021 15:41:40 +0000</pubDate>
      <link>https://dev.to/nombrekeff/design-dev-challenge-1-7dp</link>
      <guid>https://dev.to/nombrekeff/design-dev-challenge-1-7dp</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hey-there"&gt;
  &lt;/a&gt;
  Hey there!!
&lt;/h3&gt;

&lt;p&gt;I'm starting to learn a bit more about design, and wanted to do some challenges to put into practice what I'm learning.&lt;/p&gt;

&lt;p&gt;In the first challenge I had to design and code a password generator.&lt;/p&gt;

&lt;p&gt;You can check it &lt;a href="https://pass-genny.vercel.app/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Or take a look on github:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nombrekeff"&gt;
        nombrekeff
      &lt;/a&gt; / &lt;a href="https://github.com/nombrekeff/pass-genny"&gt;
        pass-genny
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Password generator made for my DESIGN/DEV challenges
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
PASS GENNY&lt;/h1&gt;
&lt;p&gt;Challenge #1&lt;/p&gt;
&lt;p&gt;Password generator made for my DESIGN/DEV challenges.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pass-genny.vercel.app/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a505d130b318874724d6ac5a8c960f6f14d20c7d5ab8e2e2d30550e8602d9811/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d44454d4f2048455245212d3630364545433f7374796c653d666f722d7468652d6261646765"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/nombrekeff/pass-genny/main/./media/website-mock.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr6Z5gxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/nombrekeff/pass-genny/main/./media/website-mock.png" height="450"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Generate Passwords&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Choice of options
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Uppercase&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Lowercase&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Symbols&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Numbers&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Readable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Variable Length&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Copy to clipboard&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Responsive (&lt;em&gt;had no time, will do it in the future, maybe&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Challenge description&lt;/h2&gt;
&lt;p&gt;Make a password generator &lt;strong&gt;Design + Code&lt;/strong&gt; in 2 days or less.&lt;/p&gt;
&lt;h3&gt;
Design&lt;/h3&gt;
&lt;p&gt;Design was made in 4-6h in Figma, did not track the time very well.&lt;/p&gt;
&lt;p&gt;You can check the Figma file &lt;a href="https://www.figma.com/file/UqKfdepVu3H9cD9EYRuNNJ/pass-genny?node-id=0%3A1" rel="nofollow"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Code&lt;/h3&gt;
&lt;p&gt;Code related stuff was done in around 4h, code + setting up repo, deploying to vercel.&lt;/p&gt;
&lt;h3&gt;
Tech&lt;/h3&gt;
&lt;p&gt;For the website I used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://svelte.dev/" rel="nofollow"&gt;Svelte&lt;/a&gt;, + &lt;a href="https://github.com/EmilTholin/svelte-routing"&gt;svelte-routing&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gijsroge/tilt.js"&gt;Tilt.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Otherwise everyting else is done by me :)&lt;/p&gt;
&lt;h4&gt;
Help me get RICHHHH, give the repo some love! ❤️
&lt;/h4&gt;
&lt;p&gt;JK, but feel free to give the repo a star or share the word if you enjoyed the project. I sure did!&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm run dev&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nombrekeff/pass-genny"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#challenge-description"&gt;
  &lt;/a&gt;
  Challenge description
&lt;/h2&gt;

&lt;p&gt;Make a password generator &lt;strong&gt;Design + Code&lt;/strong&gt; in 2 days or less.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h3&gt;

&lt;p&gt;Design was made in 4-6h in Figma, did not track the time very well.&lt;/p&gt;

&lt;p&gt;You can check the Figma file &lt;a href="https://www.figma.com/file/UqKfdepVu3H9cD9EYRuNNJ/pass-genny?node-id=0%3A1"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;Code related stuff was done in around 4h, code + setting up repo, deploying to vercel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tech"&gt;
  &lt;/a&gt;
  Tech
&lt;/h3&gt;

&lt;p&gt;For the website I used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;, + &lt;a href="https://github.com/EmilTholin/svelte-routing"&gt;svelte-routing&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gijsroge/tilt.js"&gt;Tilt.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Otherwise everything else is done by me :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0i-will-be-glad-if-you-critique-it-give-me-advice-or-overwall-feedback-smile"&gt;
  &lt;/a&gt;
   I will be glad if you critique it, give me advice or overwall feedback! 😄
&lt;/h3&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Redux — React state management techniques with chocolate milk</title>
      <author>Pathetic Geek</author>
      <pubDate>Sat, 31 Jul 2021 15:31:57 +0000</pubDate>
      <link>https://dev.to/patheticgeek/redux-react-state-management-techniques-with-chocolate-milk-1p7e</link>
      <guid>https://dev.to/patheticgeek/redux-react-state-management-techniques-with-chocolate-milk-1p7e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#redux"&gt;
  &lt;/a&gt;
  Redux
&lt;/h2&gt;

&lt;p&gt;Now, hearing the word &lt;code&gt;redux&lt;/code&gt; may or may not scare you, or it may give you some flashbacks and PTSD starts coming in. But if you do it right, none of that's going to happen to you.&lt;br&gt;
This is &lt;em&gt;the&lt;/em&gt; library I always reach out to anytime I want to add state management to any website.&lt;/p&gt;

&lt;p&gt;Also, using this might seem like a lot of work in a small project or like in an example, but it really shines when you're on a medium-sized project and have a big state to manage. If you have a small project, I'd recommend you to use React context, you can see the previous article to learn about it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#terminologies-of-redux"&gt;
  &lt;/a&gt;
  Terminologies of redux
&lt;/h2&gt;

&lt;p&gt;🧙‍♂️ &lt;strong&gt;Action:&lt;/strong&gt;&lt;br&gt;
An action is an object having a type property for what type of action should happen and a payload for sending extra data about that action. The payload can be present or cannot be, it depends on if the reducer needs any extra data to process this action. This action is what we &lt;em&gt;dispatch&lt;/em&gt; and is sent to the reducer to process state change. Some action objects/functions are,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// A simple object with type as it doesn't need any payload&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGOUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// We call this function with the user object and&lt;/span&gt;
&lt;span class="c1"&gt;// it returns an action with user object as payload&lt;/span&gt;
&lt;span class="c1"&gt;// and we can dispatch this to the store&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGIN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;📨 &lt;strong&gt;Dispatch:&lt;/strong&gt;&lt;br&gt;
Dispatching means sending an action to the store to be processed. We pass our action to a dispatch function, and it goes to the reducer to be so that reducer modifies the state accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// We create our store using redux's create store function&lt;/span&gt;
&lt;span class="c1"&gt;// it needs a root reducer which will be shown later how to do&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;span class="c1"&gt;// here we have a dispatch property we can call with action&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGOUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🚜 &lt;strong&gt;Reducer:&lt;/strong&gt;&lt;br&gt;
A reducer is a pure function that takes in the current state, modifies it based on the action, and then returns the modified state. Being a pure function means it only modifies the state and does not trigger anything else like DOM manipulations or anything. The main reducer of our store has a special name and is often referred to as the &lt;code&gt;rootReducer&lt;/code&gt;.&lt;br&gt;
An example of user reducer we have seen in the last post, for others here's a basic reducer,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Our starting state&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// The first time reducer is called is to make &lt;/span&gt;
&lt;span class="c1"&gt;// the state as the state is undefined in starting&lt;/span&gt;
&lt;span class="c1"&gt;// so we give it a default value &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// we perform actions based on the type&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGOUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// we return a new state to be set&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGIN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// when we create the login action we also pass in&lt;/span&gt;
            &lt;span class="c1"&gt;// the user as payload so that we can set it here&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// If any other action was done&lt;/span&gt;
            &lt;span class="c1"&gt;// we don't need to change our state&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🏬 &lt;strong&gt;Store:&lt;/strong&gt;&lt;br&gt;
Store is what stores all of our state. It has a function &lt;code&gt;getState&lt;/code&gt; to get its state and a function &lt;code&gt;dispatch&lt;/code&gt; to send updates. We can have multiple reducers working in our state, so if we have posts we can have a post reducer to so all posts actions, if we have login we can have a login reducer for it etc. How we create a state is,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;combineReducers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Dummy reducers for example which return existing&lt;/span&gt;
&lt;span class="c1"&gt;// state on any action&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;

&lt;span class="c1"&gt;// How we set reducers in this object will be the shape of our state&lt;/span&gt;
&lt;span class="c1"&gt;// So here we will have a state that looks like&lt;/span&gt;
&lt;span class="c1"&gt;// { login: { user: null }, posts: {} }&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;combineReducers&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;login&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;loginReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postReducer&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// here we create our store using the rootReducer&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootReducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// we can also create store with just one reducer as follows&lt;/span&gt;
&lt;span class="c1"&gt;// const store = createStore(loginReducer)&lt;/span&gt;
&lt;span class="c1"&gt;// and our state will look like&lt;/span&gt;
&lt;span class="c1"&gt;// { user: null }&lt;/span&gt;

&lt;span class="c1"&gt;// How to get our current state&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// How to dispatch actions to change state&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disapatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGOUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-started-with-it-in-react"&gt;
  &lt;/a&gt;
  Getting started with it in react
&lt;/h2&gt;

&lt;p&gt;So redux is something that was made for use in vanilla JavaScript. So there is the &lt;code&gt;react-redux&lt;/code&gt; package that will provide you with what you need for react stuff.&lt;/p&gt;

&lt;p&gt;So react specific things are,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#provider-component"&gt;
  &lt;/a&gt;
  Provider component
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Provider&lt;/code&gt; component will be wrapping our &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; component, and we pass in our store to it, so our store becomes accessible to every component. We do this in &lt;code&gt;src/index.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Assuming we have our store created in redux/store.js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./redux/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;store&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;rootElement&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#useselector-and-usedispatch-hooks"&gt;
  &lt;/a&gt;
  useSelector and useDispatch hooks
&lt;/h3&gt;

&lt;p&gt;How we get state in our React app is using the &lt;code&gt;useSelector&lt;/code&gt; hook, and to dispatch actions we use the &lt;code&gt;useDispatch&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ExamplePage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// useSelector hook takes in a function and that is&lt;/span&gt;
    &lt;span class="c1"&gt;// where we say what part of state we want.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// We get a state param in the function which is the state&lt;/span&gt;
    &lt;span class="c1"&gt;// of the app and we return the part we care about&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// This hook gives us the store.dispatch dispatch function&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// So here we call the dispatch function with our action&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGOUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-the-data-flows"&gt;
  &lt;/a&gt;
  How the data flows
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NMpFgtXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f4c17e37-815b-4758-a2cc-ff2dabfba485/Untitled.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NMpFgtXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f4c17e37-815b-4758-a2cc-ff2dabfba485/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f4c17e37-815b-4758-a2cc-ff2dabfba485/Untitled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is basically all you need to know!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-full-redux-store"&gt;
  &lt;/a&gt;
  Creating a full redux store
&lt;/h2&gt;

&lt;p&gt;Now that you know all this cool stuff, creating the store is pretty straightforward. We will now create a simple login state here.&lt;/p&gt;

&lt;p&gt;Here is the list of things we need to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ]  Create a login reducer in and root reducer&lt;/li&gt;
&lt;li&gt;[ ]  Create the store with root reducer&lt;/li&gt;
&lt;li&gt;[ ]  Wrap our App in the Provider component&lt;/li&gt;
&lt;li&gt;[ ]  Create some actions&lt;/li&gt;
&lt;li&gt;[ ]  Finally, use the useSelector and useDispatch hooks 🎉&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The folder structure we will be making will be something like following,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;learning-redux &lt;span class="o"&gt;(&lt;/span&gt;project folder&lt;span class="o"&gt;)&lt;/span&gt;
└── src
    ├── App.js
    ├── index.js
    └── redux
        ├── actions
        │   └── login.js
        ├── reducers
        │   ├── loginReducer.js
        │   └── index.js
        └── store.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So let's start with our login reducer,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/redux/reducers/loginReducer.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGIN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// When user is logged in we set the user data and logged in to true&lt;/span&gt;
            &lt;span class="c1"&gt;// The user data comes from the action payload&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGOUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// when user signs out we need to clear the state&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UPDATE_USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// we create a new state that we will modify and return&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="c1"&gt;// when a user is updated we get the new user in payload&lt;/span&gt;
            &lt;span class="c1"&gt;// so we merge the user in state and the payload&lt;/span&gt;
            &lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="c1"&gt;// and now we return the state&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// by default we just return the state unchanged&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// and we export this by default&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;loginReducer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's create our root reducer that uses this login reducer,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/redux/reducers/index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;combineReducers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;loginReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./loginReducer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// this will create our state and the state will have shape like this object&lt;/span&gt;
&lt;span class="c1"&gt;// So here our state will be like&lt;/span&gt;
&lt;span class="c1"&gt;// state: { login, { isLoggedIn: false, user: null } }&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;combineReducers&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;login&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;loginReducer&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// and we export this by default&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;rootReducer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moving on to creating the store,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/redux/store.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;rootReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./reducers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// we use the createStore function from redux&lt;/span&gt;
&lt;span class="c1"&gt;// and pass in our root reducer&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootReducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// we export this too by default&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Time to wrap our App inside redux provider,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StrictMode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./redux/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;store&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;rootElement&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Time to create some action (not the South Indian movie kind),&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/redux/actions/login.js&lt;/span&gt;

&lt;span class="c1"&gt;// when user signs in we will dispatch the action returned&lt;/span&gt;
&lt;span class="c1"&gt;// by this function, we will need to pass this our user object&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGIN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// we can call this function without passing anything&lt;/span&gt;
&lt;span class="c1"&gt;// and dispatch the returned action to sign out the user&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGOUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// we export these both as named exports&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, after all the hard work we've done. Let's use all this in our App file,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./redux/actions/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use the component state for getting user's name input&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Getting the login state by using the useSelector hook&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Getting the store's dispatch function to dispatch actions&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* When user is logged in we show their username */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loginState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* When user is logged in we will have the user object with username in it */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    You are: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loginState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* When user is not logged in we show them the form */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
            &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Who are you?"&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
            &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="c1"&gt;// To get the login action we pass in the user object&lt;/span&gt;
              &lt;span class="c1"&gt;// For now the user object just has username&lt;/span&gt;
              &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
              &lt;span class="c1"&gt;// And now we dispatch our action&lt;/span&gt;
              &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loginAction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Let me In!!!
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is how we use redux to manage our app state.&lt;/p&gt;

&lt;p&gt;Here's a code sandbox, so you can try yourself:&lt;br&gt;
&lt;iframe src="https://codesandbox.io/embed/react-redux-boilerplate-cn6pz?module=/src/App.js"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;Redux comes with a lot of boilerplate for it to make even the slightest of sense for a small project. So choose it wisely. Now, if you just want a few things like a login state a theme state you are better off using react context than dealing with this. And for anything which needs more than that you should be using redux because it provides such a nice way to manage the global state even if you have hundreds of components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next Steps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Try taking a look at the redux toolkit. It makes all this boilerplate go away, and you just need to create the reducer and store it, everything else is done like magic. But only dive into that if you understand how traditional redux works. &lt;/p&gt;

&lt;p&gt;If I missed anything or if something isn't clear, please comment, and I'll try to either answer myself or give you someplace where you can read about it in more detail. This will also help anyone else who didn't understand it. Thanks :)&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>state</category>
      <category>global</category>
    </item>
    <item>
      <title>Context — React state management techniques with chocolate milk</title>
      <author>Pathetic Geek</author>
      <pubDate>Sat, 31 Jul 2021 15:31:47 +0000</pubDate>
      <link>https://dev.to/patheticgeek/context-react-state-management-techniques-with-chocolate-milk-13c</link>
      <guid>https://dev.to/patheticgeek/context-react-state-management-techniques-with-chocolate-milk-13c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#react-context"&gt;
  &lt;/a&gt;
  React Context
&lt;/h2&gt;

&lt;p&gt;It's fun games till now, we can store the state in our component and then update it and pass it down to a few components. But what if more components need access to it? That's where it gets complicated, like my non-existent relationship.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-most-basic-form"&gt;
  &lt;/a&gt;
  The most basic form
&lt;/h2&gt;

&lt;p&gt;What react context does is it gives you a Provider component, and its value can be access by any component inside it, no matter how deep it is. Note that it does not have a way to update its value, so we need to do that for it. For that, we can use &lt;code&gt;useState&lt;/code&gt; and pass in an update function as the value of context so when that state gets updated the context's value gets updated.&lt;/p&gt;

&lt;p&gt;Now let's see how we can move our user state to context,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INITIAL_STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pathetic_geek&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.secretrickroll.com/assets/opt2.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// ...other stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Our context's value will be an array with first item as state&lt;/span&gt;
&lt;span class="c1"&gt;// and second as a function to set the state which we will add later&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;INITIAL_STATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}])&lt;/span&gt;

&lt;span class="c1"&gt;// Our App component in index.js will be &lt;/span&gt;
&lt;span class="c1"&gt;// wrapped inside this like,&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;UserProvider&amp;gt;   &amp;lt;App /&amp;gt;   &amp;lt;/UserContext&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;INITIAL_STATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Update function from before in useCallback&lt;/span&gt;
    &lt;span class="c1"&gt;// this function remains same on each render and&lt;/span&gt;
    &lt;span class="c1"&gt;// doesn't trigger re-renders everytime.&lt;/span&gt;
  &lt;span class="c1"&gt;// This is a fancy way of saying it is optimized&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Pass a function to merge old value and new value&lt;/span&gt;
        &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="c1"&gt;// We memoize the value so that it is only updated&lt;/span&gt;
    &lt;span class="c1"&gt;// when user updates and doesn't trigger re-renders&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c1"&gt;// we pass in the value of context as a prop to provider&lt;/span&gt;
    &lt;span class="c1"&gt;// and all it's children will have access to that value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This hook will provide you the&lt;/span&gt;
&lt;span class="c1"&gt;// value of user and can be used like&lt;/span&gt;
&lt;span class="c1"&gt;// const [user, updateUser] = useUser()&lt;/span&gt;
&lt;span class="c1"&gt;// and to update the user we just do&lt;/span&gt;
&lt;span class="c1"&gt;// updateUser({ username: 'noobslayer69' })&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// and we export default our context&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what a basic context state looks like. But it is very primitive, like it's a &lt;code&gt;useState&lt;/code&gt; object. So we can instead add a &lt;code&gt;useReducer&lt;/code&gt; here to give us a better predictive state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-usereducer-endraw-hook"&gt;
  &lt;/a&gt;
  The &lt;code&gt;useReducer&lt;/code&gt; hook
&lt;/h2&gt;

&lt;p&gt;🏭 &lt;strong&gt;Reducer:&lt;/strong&gt;&lt;br&gt;
A reducer function is something that takes in the old state and an action. Then it modifies the state based on the action provided. So this way our state will always be modified predictably.&lt;br&gt;
👨‍🏭 &lt;strong&gt;Action:&lt;/strong&gt;&lt;br&gt;
The most common form to pass actions is an object which has a type and a payload. We check the action type and then modify the state based on it. We can also pass in a payload that can be used to pass data to our reducer like the new input value, so we can set it inside the reducer.&lt;/p&gt;

&lt;p&gt;Let's see a basic &lt;code&gt;useReducer&lt;/code&gt; usage,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;// Our reducer gets the state and the action we pass&lt;/span&gt;
&lt;span class="c1"&gt;// in dispatch and returns the new state after modfying it&lt;/span&gt;
&lt;span class="c1"&gt;// It is first called when setting up the state so we set &lt;/span&gt;
&lt;span class="c1"&gt;// a default state for when the state is not there or is null&lt;/span&gt;
&lt;span class="c1"&gt;// Whatever this returns will become the new state&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The action will be an object like { type: 'INC' }&lt;/span&gt;
    &lt;span class="c1"&gt;// So we modify the state based on the action type&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// When action type is INC we add increment the state&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// When action type is SET we also pass in payload&lt;/span&gt;
            &lt;span class="c1"&gt;// which is the value we want to set state to.&lt;/span&gt;
            &lt;span class="c1"&gt;// So we just return that&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;
        &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// When the state is first being created&lt;/span&gt;
            &lt;span class="c1"&gt;// or when the action type is wrong&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We pass the useReducer our reducer and initial state&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// We can call this function to dispatch the increment action&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="c1"&gt;// We call this to set the value of state and pass in payload&lt;/span&gt;
    &lt;span class="c1"&gt;// to let reducer know what value we want to set it to&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#combining-forces-with-reducer"&gt;
  &lt;/a&gt;
  Combining forces (with reducer)
&lt;/h2&gt;

&lt;p&gt;So now that we know how to use &lt;code&gt;useReducer&lt;/code&gt; and context, let's combine them both,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pathetic_geek&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.secretrickroll.com/assets/opt2.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Same as before we create context wih initial value&lt;/span&gt;
&lt;span class="c1"&gt;// as an array where first item is the state and second&lt;/span&gt;
&lt;span class="c1"&gt;// is a function to update the state which we will add later&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}])&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UPDATE_USERNAME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// We create a new object and add properties of&lt;/span&gt;
            &lt;span class="c1"&gt;// state in it then override the username property&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UPDATE_AVATAR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// This time we override the avatar key&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Same provider from before but with useReducer&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Same useUser hook from before&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We get the value of context here&lt;/span&gt;
    &lt;span class="c1"&gt;// which is an array with user and dispatch&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// we can call this function to dispatch the username change&lt;/span&gt;
    &lt;span class="c1"&gt;// this can be called like `updateUsername('noobslayer69')`&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateUsername&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// we pass the action type and new value as payload&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UPDATE_USERNAME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// we call this function to dispatch the username change&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatAvatar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UPDATE_AVATAR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;avatar&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is how we manage our state using context and reducer. Here's a code sandbox, so you can see this in action,&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/react-context-boilerplate-fzv7d?module=/src/App.js"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;This is great for getting a global store quickly. Let's say you want to store the user's preferred theme or current user's data or some theme data like font size spacing etc.&lt;br&gt;
One caveat of this is that it re-renders all the children of it, even ones that are not dependent on its value, so it can slow down things quite a bit if you have a big application. And also, context is meant for its value to be read very often and updated very less, so you shouldn't use it for high-frequency updates.&lt;/p&gt;

&lt;p&gt;To mitigate all of these problems, there is redux. And traditionally, redux doesn't have a good reputation because of all the boilerplate that comes with it, but I think even with that initial setup that takes a bit to do, redux can be very useful and efficient.&lt;/p&gt;

&lt;p&gt;So in the next part, we will be looking at how we can manage our state with this shiny new thing called the redux toolkit.&lt;/p&gt;

</description>
      <category>react</category>
      <category>context</category>
      <category>reducer</category>
      <category>state</category>
    </item>
    <item>
      <title>Component State — React state management techniques with chocolate milk</title>
      <author>Pathetic Geek</author>
      <pubDate>Sat, 31 Jul 2021 15:31:38 +0000</pubDate>
      <link>https://dev.to/patheticgeek/component-state-react-state-management-techniques-with-chocolate-milk-50en</link>
      <guid>https://dev.to/patheticgeek/component-state-react-state-management-techniques-with-chocolate-milk-50en</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;The basic idea of this is to provide you a guide on how to create a basic project with all these state management techniques like you're a baby. That will help you choose which one will be best and when you should probably move to something better.&lt;/p&gt;

&lt;p&gt;If you're struggling with any concept, search it on YouTube and come back and continue. I have tried my best to boil things down, but I could be missing something. And do leave feedback at the end. :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#component-state"&gt;
  &lt;/a&gt;
  Component State
&lt;/h2&gt;

&lt;p&gt;So you've just learned the shiny new thing called &lt;code&gt;react&lt;/code&gt; and in there you've seen that there are these things called hooks and the first one is &lt;code&gt;useState&lt;/code&gt;. Now, what does it do? You might judge by its name, it looks like it might be related to doing something with some state, and you'll be right!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-usage"&gt;
  &lt;/a&gt;
  Basic usage
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; hook used to store some state for that particular component. And is used like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Your name is: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;, as if you didn't know already.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we use this hook we get 2 things, one is the value stored and the other is a function to set its value. Here we have &lt;code&gt;name&lt;/code&gt; as a value and &lt;code&gt;setName&lt;/code&gt; a function to set its value.&lt;br&gt;
Now, the &lt;code&gt;setName&lt;/code&gt; function can also be used as below,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addPronouns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; (lmao/ded)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can pass the &lt;code&gt;setName&lt;/code&gt; a function and the function gets the old value of it, and then we can return a new value based on that old value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage-with-arrays-and-objects"&gt;
  &lt;/a&gt;
  Usage with arrays and objects
&lt;/h2&gt;

&lt;p&gt;This has been pretty simple, right? We can update the string, numbers and booleans easily. Now, with array and objects, we might need a few helpers. Here are a few functions I always create if I am going to any of these operations in more than two places because it's easy to make mistakes, and it will save a lot of headache.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h3&gt;

&lt;p&gt;Let's see how we can handle an array of, umm, people I hate&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PeopleIHate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPeople&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;everyone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c1"&gt;// used to add to the array&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// we create a new array and spread people in it&lt;/span&gt;
        &lt;span class="c1"&gt;// then add the new name to the end&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;// and now we set the new value&lt;/span&gt;
        &lt;span class="nx"&gt;setPeople&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// used to delete from the array&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// We use array.filter method to remove the value at that index&lt;/span&gt;
        &lt;span class="c1"&gt;// It is important to use index or some kind of id because&lt;/span&gt;
        &lt;span class="c1"&gt;// we can have people with same name&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// and now we set the new value&lt;/span&gt;
        &lt;span class="nx"&gt;setPeople&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// update a value in the array&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// We check if this is the index we need to update&lt;/span&gt;
            &lt;span class="c1"&gt;// if it is return newVal or else return existing value&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;newVal&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="c1"&gt;// and now we set the new value&lt;/span&gt;
        &lt;span class="nx"&gt;setPeople&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="c1"&gt;// An exercise for the reader&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we can use these functions whenever we need to do one of these operations.&lt;br&gt;
Don't get all scared by the size of this, if you remove comments and do some fancy syntax, this will be at most ~8 lines.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h3&gt;

&lt;p&gt;Objects are pretty simple to do, we only have one update function.&lt;br&gt;
Let's say we want to store the user object,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SettingsPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pathetic_geek&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.secretrickroll.com/assets/opt2.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// ...other stuff&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;// used to update the user object, should be called like&lt;/span&gt;
    &lt;span class="c1"&gt;// update({ username: 'noobslayer69' })&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// We create an object then put the value of users object in it&lt;/span&gt;
        &lt;span class="c1"&gt;// and then we override it with whatever is in the newValue object&lt;/span&gt;
        &lt;span class="c1"&gt;// The ... used here are called spread operators&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// and now we set the new value&lt;/span&gt;
        &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is how we can manage the state inside one component using the &lt;code&gt;useState&lt;/code&gt; hook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;This is used only when the value you are storing is needed in just one component or just the component and one or two of its children. So the examples can be when you are making a form and need to store the input values.&lt;br&gt;
If you need to access to the value or update it from even more places, you probably should start using context or redux.&lt;/p&gt;

&lt;p&gt;In the next part, we'll see how we can create a user state using react context and reducer.&lt;/p&gt;

</description>
      <category>react</category>
      <category>usestate</category>
      <category>component</category>
      <category>basic</category>
    </item>
    <item>
      <title>Boyd: The Fighter Pilot Who Changed the Art of War by Robert Coram</title>
      <author>Sandor Dargo</author>
      <pubDate>Sat, 31 Jul 2021 15:27:14 +0000</pubDate>
      <link>https://dev.to/sandordargo/boyd-the-fighter-pilot-who-changed-the-art-of-war-by-robert-coram-269h</link>
      <guid>https://dev.to/sandordargo/boyd-the-fighter-pilot-who-changed-the-art-of-war-by-robert-coram-269h</guid>
      <description>&lt;p&gt;I found &lt;a href="https://www.amazon.com/gp/product/B000FA5UEG/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;amp;tag=sandordargo-20&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=B000FA5UEG&amp;amp;linkId=daed4d37e8c6b25dcf494239369ec82a"&gt;this book&lt;/a&gt; in the monthly reading list I receive from &lt;a href="https://ryanholiday.net/reading-newsletter/"&gt;Ryan Holiday&lt;/a&gt;. I was not sure what the biography of a fighter pilot would offer to me, but the subtitle of the book is &lt;em&gt;The Fighter Pilot Who Changed the Art of War&lt;/em&gt;. A fighter pilot, who made a difference way beyond his field. That must be interesting. I cannot express with words how fascinating his story is. If I just think about this book, I feel thrilled deep in my bones.&lt;/p&gt;

&lt;p&gt;I have read many good books, but I feel that this one have a deep impact on my life, on my work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tragical-family-life"&gt;
  &lt;/a&gt;
  Tragical family life
&lt;/h2&gt;

&lt;p&gt;There is some tragedy in this book, in Boyd's life. He came from a family of 5 children. They were not poor when he was born in 1927, in Erie, Pennsylvania. Sadly, Boyd's father passed away early and that left them in serious trouble.&lt;/p&gt;

&lt;p&gt;I don't want to list all the ill conditions that he encountered among his siblings or later his children, I only want to mention one dreadful illness, polio.&lt;/p&gt;

&lt;p&gt;We are so lucky.&lt;/p&gt;

&lt;p&gt;We are so lucky to have modern medicine, to have vaccines and we don't have to worry about such terrible illnesses as polio. Of course, there are still many terrible conditions, but there are so many which are either curable or preventable with a damn vaccine.&lt;/p&gt;

&lt;p&gt;Boyd's life also cannot be put into context without the effects of polio. Obviously, having a sister with polio affected him deeply. But having his first-born son catching polio changed his life even more as he based some of his career moves based the vicinity of treatment for his son.&lt;/p&gt;

&lt;p&gt;Now you might think that Colonel John Boyd must have been a great father, but that's the complete opposite of the truth.&lt;/p&gt;

&lt;p&gt;He achieved so much in his life, he was probably the best fighter pilot at least of his era, but arguably the one with the biggest effects of all time. He fought the bureaucracy of the Air Force, of the Pentagon, changed the science of aviation, he contributed so much to the F15 and even more to the F16 and even to the F18. Oh and he even contributed to how to fight a war in general. The Marines can also thank him a lot, and we haven't mentioned that the extremely effective strategy of Operation Desert Storm was coming from him as Dick Cheney relied on him, the retired strategist. The Desert Storm had one failure, right at the point where a certain general didn't dare to do what was requested. Anyways.&lt;/p&gt;

&lt;p&gt;At the same time, Boyd was a terrible father who didn't care enough. The Washington DC apartment where they spent more than 2 decades was close to the Pentagon, but it was small and the neighbourhood was degrading. Once, Boyd was promoted to colonel, they would have had the money, but he didn't care to move his family to a better place. He was called the Ghetto Colonel.&lt;/p&gt;

&lt;p&gt;Once he retired from the Air Force, they didn't have much money, but that's only because Boyd worked for free, he gave lectures all around the states only for the travel costs, but he often forgot to cash in the checks.&lt;/p&gt;

&lt;p&gt;On his deathbed, he was barely talking about his family, but mostly about his colleagues. &lt;/p&gt;

&lt;p&gt;No big surprise that when his time was approaching his family couldn't get prepared for the 15-minute drive to the hospital. He spent his last hours with her favourite daughter Mary Ellen. Of course, he said on his deathbed that he loved her, he loved his children. It was not that much welcome.&lt;/p&gt;

&lt;p&gt;Use it as a memento. &lt;/p&gt;

&lt;p&gt;If you express your feelings only on your deathbed, it is way too late.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#boyd-and-his-heritage"&gt;
  &lt;/a&gt;
  Boyd and his heritage
&lt;/h2&gt;

&lt;p&gt;Many people with great effects on history were such bad parents. Boyd is one of them. Now let's talk about how he changed the world.&lt;/p&gt;

&lt;p&gt;After the Korean War, he was invited to attend the Fighter Weapon School in Nellis and then he stayed there as an instructor. He got the nickname "40 second Boyd". He said that anyone could start a dogfight from his six and in 40 seconds they would be hosed. Many tried, nobody succeeded.&lt;/p&gt;

&lt;p&gt;There he wrote the first air fighter tactics manual which became The Bible of the fighters. Later he developed some new theories called the &lt;a href="https://en.wikipedia.org/wiki/Energy%E2%80%93maneuverability_theory"&gt;Energy–maneuverability theory&lt;/a&gt; which first helped to work out tactics against - superior - enemy aircrafts and later to design new ones. Boyd had great influence over the design of F15, F16 and F18 aircrafts. &lt;/p&gt;

&lt;p&gt;He never stopped researching, there was always something on his mind. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rubber-ducks"&gt;
  &lt;/a&gt;
  Rubber ducks
&lt;/h3&gt;

&lt;p&gt;What never changed was his late-night or even early-morning (for him, very late night) phone calls. He had an idea, a "breakthrough" and he called his "Acolytes", his faithful followers - no matter when. Probably he didn't even realize it was 1 AM or even 4 AM. Or he just didn't care.&lt;/p&gt;

&lt;p&gt;These late-night phone calls were often not discussions, but monologues. He shared his thoughts, he listened to himself and then he found the missing points and went on working. Essentially he used the others as his &lt;a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging"&gt;rubber ducks&lt;/a&gt;. Is that familiar to you?&lt;/p&gt;

&lt;p&gt;We explain to our peers our coding problems, concerns, possible solutions and one in the middle, or maybe right after, we have the "aha!" moment. While we might think we seek help, but in reality, we just want to synthesize our thoughts.&lt;/p&gt;

&lt;p&gt;Probably that's what Boyd was looking for as well.&lt;/p&gt;

&lt;p&gt;The difference is that his thoughts were more revolutionary than those of an average software developer.&lt;/p&gt;

&lt;p&gt;Apropos, software development...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boyd-and-scrum"&gt;
  &lt;/a&gt;
  Boyd and Scrum
&lt;/h3&gt;

&lt;p&gt;Recently I wrote a &lt;a href="https://devreads.sandordargo.com/scrum-by-jeff-sutherland/"&gt;book review about Jeff Sutherland's Scrum: The Art of Doing Twice the Work in Half the Time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He wrote about the OODA loop, a principle of 4 elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Observe&lt;/li&gt;
&lt;li&gt;Orient&lt;/li&gt;
&lt;li&gt;Decide&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So no, it's not about Object-Oriented Design Applications.&lt;/p&gt;

&lt;p&gt;Sutherland learned about the loop in the army as a fighter pilot and he considers it saved his life. It's basically the blueprint of our decision-making process. It was taught for making time-sensitive decisions when both time and information are scarce. The idea is that you try to get inside the decision loop of your opponents and you became the one who leads the events so that you disrupt their decision cycle.&lt;/p&gt;

&lt;p&gt;The technique is now also widely used in the business world.&lt;/p&gt;

&lt;p&gt;In Scrum.&lt;/p&gt;

&lt;p&gt;And guess what. The OODA loop was developed by Colonel John Boyd. We'll learn more about it in the coming weeks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schwerpunkt"&gt;
  &lt;/a&gt;
  Schwerpunkt
&lt;/h3&gt;

&lt;p&gt;A little detour, before I explain the above German word. &lt;/p&gt;

&lt;p&gt;As I mentioned, after his retirement he also worked with the marines and with the army so that they can rebuild their doctrines. During the first half of the 80s, he frequently met a certain general from the Army, Brigadier General Huba Wass de Czege. &lt;/p&gt;

&lt;p&gt;When I read his name, I was astonished. &lt;/p&gt;

&lt;p&gt;I was staring at the name and said, it cannot be a coincidence. And it is not. He is considered a highly innovative thinker, a military strategist. When the US Army tried to redefine its goals and strategies, at the beginning of the 80s, he was working on the new doctrines. And he is indeed the son of the important 20th-century Hungarian author, &lt;a href="https://en.wikipedia.org/wiki/Albert_Wass"&gt;Albert Wass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;His story confirms that having the right upbringing is more important than being rich. While this general was born into a rich family, they clearly lost everything. Their wealth, their home, their country, their mountains, yet with grit and the right education the family survived and has served their new home with pride.&lt;/p&gt;

&lt;p&gt;So, the last item, the last concept, I wanted to mention from [the book] is &lt;em&gt;schwerpunkt&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Schwerpunkt&lt;/em&gt; is something known and used in the German army since the 19th century in order to make the right decisions regarding priorities. It's an expression that is difficult to translate, one might call it the centre of gravity, the focal point, or the point of main effort.&lt;/p&gt;

&lt;p&gt;It's about knowing what is the most important for an organization, an army, at a given point in time and why that is the most important. Each and every unit must keep that in their mind and support that point of main effort.&lt;/p&gt;

&lt;p&gt;If you think about the overwhelming efficiency of blitzkrieg, the schwerpunkt was to concentrate on one point of the enemy frontline, instead of battling the whole enemy. All the units knew what their goal was, where they had to break through the lines and then surround the enemy.&lt;/p&gt;

&lt;p&gt;If an organization has a &lt;em&gt;schwerpunkt&lt;/em&gt;, it can make a huge difference. Instead of taking one step into a hundred directions and reaching nowhere, the organization can make those hundred steps into one direction and attain great success.&lt;/p&gt;

&lt;p&gt;This is not only true for organizations, but also for individuals. Furthermore, it's not only valid for big strategic goals, but also for tactical ones.&lt;/p&gt;

&lt;p&gt;Knowing your most important goal at a time and concentrate your resources on that can make the difference between average and success.&lt;/p&gt;

&lt;p&gt;It's not a coincidence that Peter Drucker said that if you have more than 5 goals at a time, you have none. &lt;/p&gt;

&lt;p&gt;It's not a coincidence that Benjamin P Hardy doesn't suggest having long to-do lists, but to set no more than 3 goals for a day, for a week or a quarter.&lt;/p&gt;

&lt;p&gt;You have to know where you want to go and you cannot go everywhere.&lt;/p&gt;

&lt;p&gt;Know your &lt;em&gt;schwerpunkt&lt;/em&gt; and become unstoppable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Boyd kept telling his associates that one has to choose between being someone and doing something. It was his famous "to be or to do" speech. He never became a general, but his results, his legacy are still with us, not even in the military but in the business world too.&lt;/p&gt;

&lt;p&gt;He clearly decided &lt;em&gt;to do&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;He could have been court-martialed at least a dozen times, he was threatened to be fired, to be relocated, yet he had ever-lasting effects fighter tactics, aeroplane design, military and even business strategy.&lt;/p&gt;

&lt;p&gt;I got highly interested in some of his concepts, so you'll read about his name in the future on this blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/gp/product/B000FA5UEG/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;amp;tag=sandordargo-20&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=B000FA5UEG&amp;amp;linkId=daed4d37e8c6b25dcf494239369ec82a"&gt;A highly recommended read!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>books</category>
      <category>watercooler</category>
      <category>management</category>
      <category>biography</category>
    </item>
  </channel>
</rss>
