<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Chrome Extensions For Developers You Don't Wanna Miss</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Mon, 24 May 2021 19:32:17 +0000</pubDate>
      <link>https://dev.to/line/chrome-extensions-for-developers-you-don-t-wanna-miss-5fl9</link>
      <guid>https://dev.to/line/chrome-extensions-for-developers-you-don-t-wanna-miss-5fl9</guid>
      <description>&lt;p&gt;If you’re a developer, you will likely already have a collection of Chrome extensions you use on a daily basis. Extensions make your work more productive, easier as well as can make your working fast. &lt;/p&gt;

&lt;p&gt;As most of us uses Chrome, or browsers that uses chrome infrastructure like brave. We are going to take about its extensions here. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fact:-  ( about 63% of internet users uses chrome )&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Githunt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you spend a lot of time on GitHub looking for new projects to work on, Githunt is useful for you.&lt;/p&gt;

&lt;p&gt;Why Githunt?&lt;/p&gt;

&lt;p&gt;Rather than depending on GitHub’s trending projects feed, this Chrome developer extension brings it to the fore by highlighting all trending projects in a new tab area in your browser. You can search projects in different languages, read a brief project description and the number of current open issues.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visit-&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/githunt/khpcnaokfebphakjgdgpinmglconplhp"&gt;https://chrome.google.com/webstore/detail/githunt/khpcnaokfebphakjgdgpinmglconplhp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Momentum&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is one of the most productive tool for me because it changes boring new tabs into interesting tabs including amazing pictures, motivational quotes or simply better looking. &lt;/p&gt;

&lt;p&gt;You can set a main focus for each day that acts as a reminder of what’s most important for my day each time I open a new Chrome browser window.&lt;/p&gt;

&lt;p&gt;*Visit- *&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca?hl=en"&gt;https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca?hl=en&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Window Resizer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Window Resizer is an incredibly useful Chrome extension for web developers. If you are working on a responsive projects, you can resize the windows of your browsers in the size of your requirement. &lt;/p&gt;

&lt;p&gt;It installs into Chrome and will resize any screen you’re working on to a range of popular screen sizes. It works better than the inspect feature of chrome because unlike chrome most common sizes are covered, mobile, tablet, desktop and the emulation seems very accurate.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visit-&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/window-resizer/kkelicaakdanhinjdeammmilcgefonfh/"&gt;https://chrome.google.com/webstore/detail/window-resizer/kkelicaakdanhinjdeammmilcgefonfh/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;Lorem Ipsum Generator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lorem Ipsum Generator is one of the best Chrome extensions, it does what it is meant for. It generates random text for demo websites and side projects in which you don't want to waste your time in written text that you are going to delete in future.&lt;/p&gt;

&lt;p&gt;Simply install the extension, select it within a page, tell it how much Lorem Ipsum copy you want to generate and copy it from the window. Paste it into your page and you’re done. Enjoy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visit-&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/lorem-ipsum-generator-def/mcdcbjjoakogbcopinefncmkcamnfkdb"&gt;https://chrome.google.com/webstore/detail/lorem-ipsum-generator-def/mcdcbjjoakogbcopinefncmkcamnfkdb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;Wappalyzer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to know the secrets behind a page, Wappalyzer is one way to find out. It is a very effective tool for identifying the underlying technologies behind web pages. It quickly identifies web services, CMS type, analytics tools, plugins, JavaScript libraries and a whole host of other apps And it is very accurate in it.&lt;/p&gt;

&lt;p&gt;A page will pop-up when you install this extension and then you can get all information that you want from this extension.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visit-&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg"&gt;https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I Started A Newsletter, &lt;a href="https://linenewsletter.substack.com/subscribe?utm_source=menu&amp;amp;simple=true&amp;amp;next=https%3A%2F%2Flinenewsletter.substack.com%2Fp%2Fcoming-soon"&gt;Click Here To Subscribe&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;More information Down At The Last&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;strong&gt;Toggl&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Toggl helps you track in which websites you spend your time on.  This information generally helps you in maintaining and improving your routine.&lt;/p&gt;

&lt;p&gt;After installing the Toggl extension, sign into the Todoist web app. A Toggl button will now appear next to any task you hover over. Click on the button to start the timer, and the time entry will automatically be populated with the task name. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visit-&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/toggl-button-productivity/oejgccbfbmkkpaidnkphaiaecficdnfn"&gt;https://chrome.google.com/webstore/detail/toggl-button-productivity/oejgccbfbmkkpaidnkphaiaecficdnfn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;strong&gt;Grammarly&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This does need any introduction now. Not only does the Grammarly extension check for the usual grammar and spelling mistakes, it will also give you suggestions on style, tone, and word choice to make all your writing inside Chrome “bold, clear, and mistake-free”.&lt;/p&gt;

&lt;p&gt;You can have a paid subscription of this extension, although the free version is sufficient for most of us.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visit-&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/grammarly-for-chrome/kbfnbcaeplbcioakkpcpgfkobkghlhen"&gt;https://chrome.google.com/webstore/detail/grammarly-for-chrome/kbfnbcaeplbcioakkpcpgfkobkghlhen&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;LastPass-&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Save and autofill your logins. As the native password tool for chrome is fine for autofill, lastpass gives you wings in doing this. This powerful tool can be used in all your devices together.&lt;/p&gt;

&lt;p&gt;LastPass is an awesome (and free!) password manager that saves your login credentials across your devices. With one master password, you’ll be able to manage all your passwords from a “password vault,” generate strong passwords.&lt;/p&gt;

&lt;p&gt;*Visit- *&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd"&gt;https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9.&lt;strong&gt;JSON Viewer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JSON Viewer helps you to manage JSON data into a quickly recognizable hierarchy view in a browser window. Working with raw JSON data is fine when you have the time, but using this addon makes the code easier to quickly absorb and use.&lt;/p&gt;

&lt;p&gt;With over 800,000 users and glowing reviews, this is definitely an extension to try.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visit-&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh"&gt;https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10.&lt;strong&gt;Page Ruler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Page Ruler is a dynamic measurement extension. It is more useful for measuring between your selected areas. Page Rule measures those elements very accurately.&lt;/p&gt;

&lt;p&gt;When you need to measure something, select the ruler icon so it turns orange. The page fades, allowing you to draw the element you want to measure. The extension will then present the exact measurements of the element in a small popup box beside it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visit-&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/page-ruler/idhjfgkakeliobkfbijghiaklmiaheag?hl=en"&gt;https://chrome.google.com/webstore/detail/page-ruler/idhjfgkakeliobkfbijghiaklmiaheag?hl=en&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The End&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Information-&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I have started a newsletter in which you will get Email twice&lt;/em&gt; &lt;em&gt;a week directly from me. I will send you latest tech, coding &amp;amp;&lt;/em&gt; &lt;em&gt;Other useful information. I will also be spending a one riddle&lt;/em&gt; &lt;em&gt;each time and the first to complete the riddle will get a small&lt;/em&gt; &lt;em&gt;gift from me&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linenewsletter.substack.com/subscribe?utm_source=menu&amp;amp;simple=true&amp;amp;next=https%3A%2F%2Flinenewsletter.substack.com%2Fp%2Fcoming-soon"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4PKSsD75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljj0lt0zq1dhca0h09yz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow Me On &lt;a href="https://twitter.com/chetanistaken"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Facebook launches Dynaboard an evaluation-as-a-service for NLP</title>
      <author>amananandrai</author>
      <pubDate>Mon, 24 May 2021 19:16:40 +0000</pubDate>
      <link>https://dev.to/amananandrai/facebook-launches-dynaboard-an-evaluation-as-a-service-for-nlp-3kah</link>
      <guid>https://dev.to/amananandrai/facebook-launches-dynaboard-an-evaluation-as-a-service-for-nlp-3kah</guid>
      <description>&lt;p&gt;In Natural Language Processing it is very difficult to gauge the performance of a model. Facebook has launched &lt;strong&gt;Dynaboard&lt;/strong&gt; which ranks state-of-the-art language models like &lt;strong&gt;BERT&lt;/strong&gt;, &lt;strong&gt;RoBERTa&lt;/strong&gt;, &lt;strong&gt;ALBERT&lt;/strong&gt;, &lt;strong&gt;T5&lt;/strong&gt;, and &lt;strong&gt;DeBERTa&lt;/strong&gt; on four common NLP tasks. The tasks are- &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Natural Language Inference&lt;/li&gt;
&lt;li&gt;Question Answering&lt;/li&gt;
&lt;li&gt;Sentiment Analysis&lt;/li&gt;
&lt;li&gt;Hate Speech&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For evaluating the models for these tasks first a new performance evaluation parameter was created that is known as &lt;strong&gt;Dynascore&lt;/strong&gt;.&lt;br&gt;
It takes into consideration different metrics which include &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Accuracy&lt;/strong&gt; -  how many examples did the model get right as a percentage&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Compute&lt;/strong&gt; - To account for computation, we measure the number of examples that a model can process per second on its instance in our evaluation cloud&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Memory&lt;/strong&gt; - We average the memory usage over the duration that the model is running, with measurements taken each N seconds&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Robustness&lt;/strong&gt; - We evaluate robustness of a model's prediction by measuring changes after adding perturbations to the examples&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fairness&lt;/strong&gt; - we perform perturbations of original datasets by changing, for instance, noun phrase gender (e.g., replacing “sister” with “brother”, or “he” with “they”) and by substituting names with others that are statistically predicative of another race or ethnicity. For the purposes of Dynaboard scoring, a model is considered more “fair” if its predictions don’t change after such a perturbation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dynascore is calculated by giving different weightage to these metrics and combining them depending on the type of task. First the tasks mentioned above which form the Dynabench were solved statically. Dynaboard has helped to make this process more dynamic.&lt;/p&gt;

&lt;p&gt;The objectives achieved by Dynaboard are-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reproducibility&lt;/li&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;li&gt;Backwards Compatibility&lt;/li&gt;
&lt;li&gt;Forward Compatibility&lt;/li&gt;
&lt;li&gt;Prediction Costs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To know more about Dynaboard read the official &lt;a href="https://ai.facebook.com/blog/dynaboard-moving-beyond-accuracy-to-holistic-model-evaluation-in-nlp/"&gt;FB blog&lt;/a&gt; and to know about further details of implementation read the &lt;a href="https://dynabench.org/dynaboard.pdf"&gt;paper&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>nlp</category>
      <category>news</category>
    </item>
    <item>
      <title>We teach "design" (the whole process) - and of course / the programming too! </title>
      <author>perpetual . education</author>
      <pubDate>Mon, 24 May 2021 19:05:59 +0000</pubDate>
      <link>https://dev.to/perpetual_edu/we-teach-design-the-whole-process-and-of-course-the-programming-too-54m8</link>
      <guid>https://dev.to/perpetual_edu/we-teach-design-the-whole-process-and-of-course-the-programming-too-54m8</guid>
      <description>&lt;p&gt;Haven't heard of us? We're &lt;strong&gt;Perpetual&lt;/strong&gt; "Dot" &lt;strong&gt;Education&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That makes sense! We're not a giant corporation. We're keeping thing small and effective.&lt;/p&gt;

&lt;p&gt;We're a small design school dedicated to educating a new era of aware, confident, and &lt;em&gt;responsible&lt;/em&gt; designers in the web space. There are a million "coders" out there - but we need something &lt;em&gt;more&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ooF9DZ-WD1w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The classes are small and personal. Serious personal attention. It's a 6-month program - and it's only goal is to focus full time on getting you trained up and out there designing a better world. You can talk to us every single day (the real humans who designed the course).&lt;/p&gt;

&lt;p&gt;Learn more deeply - and &lt;em&gt;faster&lt;/em&gt; - by focusing on just the right things at the right times.&lt;/p&gt;

&lt;p&gt;Sound &lt;em&gt;interesting?&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;We still have some openings for June.&lt;/p&gt;

&lt;p&gt;Next session won't start until August.&lt;/p&gt;

&lt;p&gt;If you want a 100% chill / no pressure - meeting (to meet us/the actual humans who teach the course) - with real-world advice...  and no "Salesman" stuff: Do it. Meet us. It's easy.&lt;/p&gt;

&lt;p&gt;Here's what some of our students are writing during the course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apinchofcode.substack.com/p/a-month-studying-how-to-code"&gt;a-month-studying-how-to-code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexvong.substack.com/p/working-with-my-first-client-an-intro"&gt;working-with-my-first-client-an-intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://zinthya.substack.com/p/i-am-here"&gt;i-am-here&lt;/a&gt;
&lt;a href="https://jessehunter.substack.com/p/a-dreamer-commits"&gt;a-dreamer-commits&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://annalenajohnson.substack.com/p/a-rising-web-designer-and-her-frequent"&gt;a-rising-web-designer-and-her-frequent-emotional-outbusts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://perpetualphilomath.substack.com/p/a-philomath-and-perpetual-learning"&gt;a-philomath-and-perpetual-learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://johnxm.substack.com/p/1"&gt;part-one&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you've been trying to "learn code" - for a week or a month - or 6 months - or years... &lt;em&gt;consider&lt;/em&gt; a new path.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perpetual-education"&gt;
  &lt;/a&gt;
  &lt;a href="https://perpetual.education"&gt;Perpetual Education&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Firebase Authentication with React and Guarded Routes</title>
      <author>Justin Brooks</author>
      <pubDate>Mon, 24 May 2021 19:01:36 +0000</pubDate>
      <link>https://dev.to/jsbroks/firebase-authentication-with-react-and-guarded-routes-41nm</link>
      <guid>https://dev.to/jsbroks/firebase-authentication-with-react-and-guarded-routes-41nm</guid>
      <description>&lt;p&gt;Authentication is one of those things that just always seems to take a lot more effort than we want it to, yet it's always a feature every website needs.&lt;/p&gt;

&lt;p&gt;Firebase makes this process super easy. So today lets create a React application where we use firebase authentication and router guards.&lt;/p&gt;

&lt;p&gt;It will have a total of 3 pages. One for signing up, another for logging, and a home page that is only accessible if the user is authenticated.&lt;/p&gt;




&lt;p&gt;You can find the full write up at &lt;a href="http://codingwithjustin.com"&gt;codingwithjustin.com&lt;/a&gt; and source code on &lt;a href="https://github.com/codingwithjustin/firebase-v9-auth-react"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MEAjrlQ35HQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#firebase"&gt;
  &lt;/a&gt;
  Firebase
&lt;/h1&gt;

&lt;p&gt;We'll need to set up a firebase project to get started.&lt;/p&gt;

&lt;p&gt;Head over to Firebase and create a new application. The process should be straightforward and only take a few seconds. We'll also need to enable the auth options before we start building anything. First, make sure you enable email/password in the Authentication tab,  by clicking on Sign-methods.&lt;/p&gt;

&lt;p&gt;I'll also be using &lt;strong&gt;version 9&lt;/strong&gt; of firebase which is currently in beta. It makes the firebase tree shakeable as well as provides some other improvements.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h1&gt;

&lt;p&gt;We'll need to create a new project using the create react app CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app firebase-auth-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once completed we'll also install &lt;code&gt;react-router-dom&lt;/code&gt; and &lt;code&gt;firebase@beta&lt;/code&gt; for version 9.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add react-router-dom firebase@beta
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next I'll create a firebase helper file called &lt;code&gt;firebase.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAuth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@firebase/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;initializeApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebaseApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="cm"&gt;/* config */&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AuthContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AuthContextProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getAuth&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we'll initialize our configuration using the values we got from creating a project. We'll also create an auth context for holding the state of the current user signed in.&lt;/p&gt;

&lt;p&gt;Context in react is a tool that allows you to share state throughout the whole react component without having to pass it down by props. Instead, we can initialize a &lt;code&gt;Context Provider&lt;/code&gt;, pass in our state as value, and then we can access it anywhere by calling &lt;code&gt;useContext&lt;/code&gt; with our context object. In our case will want to pass in the user's state which we get from the &lt;code&gt;onAuthStateChanged&lt;/code&gt; listener. We'll also want to make sure we unsubscribe from this event when the component is unmounted.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h1&gt;

&lt;p&gt;In our &lt;code&gt;App.js&lt;/code&gt; we'll need to add our routing option and link these to each of our pages. However, doing this won't protect our routes from unauthenticated users. To protect our routes we'll create a custom component which Ill call &lt;code&gt;AuthenticatedRoute&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AuthenticatedRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`AuthenticatedRoute: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;
      &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routeProps&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;routeProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; : &amp;lt;Redirect to="/&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; /&amp;gt;
      }
    /&amp;gt;
  )
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll call the &lt;code&gt;useAuthState&lt;/code&gt; hook we created earlier to check if the user is authenticated. If they are authenticated we'll render the page, otherwise, we'll redirect them to the login page.&lt;/p&gt;

&lt;p&gt;Let's also create a simple UnauthenticatedRoute that will use for the login page. This component is similar to the logic above expect we will only want to render the component if the user is not authenticated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UnauthenticatedRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`UnauthenticatedRoute: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;
      &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routeProps&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;routeProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; : &amp;lt;Redirect to="/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; /&amp;gt;
      }
    /&amp;gt;
  )
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's also worth mentioning, you might want to add a loading sign-on in your app while the auth check is being run. This way you don't flash a page every time you refresh.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pages"&gt;
  &lt;/a&gt;
  Pages
&lt;/h1&gt;

&lt;p&gt;Now, let's go through each page and those up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#login"&gt;
  &lt;/a&gt;
  Login
&lt;/h2&gt;

&lt;p&gt;For the login page, we'll create a form that asks the user for an email address and password. When the user clicks the submit button, we'll grab those two values from the form element and pass them into the &lt;code&gt;signInWithEmailAndPassword&lt;/code&gt; function. Once it's successful the user will be considered logged in and will automatically be redirected to the home page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAuth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signInWithEmailAndPassword&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAuth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;signInWithEmailAndPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I recommend you add better error handling here but I'm going to wrap this in a try-catch statement and alert the user with any error messages.&lt;/p&gt;

&lt;p&gt;If we wanted to redirect to a specific URL we could call the &lt;code&gt;useLocation&lt;/code&gt; hook from the react router and push a path onto it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signup"&gt;
  &lt;/a&gt;
  Signup
&lt;/h2&gt;

&lt;p&gt;The signup page is also going to be very similar, we'll create another form that asks for their email and password. On submit we'll grab those values and call the &lt;code&gt;createUserWithEmailAndPassword&lt;/code&gt; function. If the user signs in is successfully they will automatically get redirect to the home page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAuth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createUserWithEmailAndPassword&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SignUp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAuth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createUserWithEmailAndPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;Up&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;Up&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#home-page"&gt;
  &lt;/a&gt;
  Home Page
&lt;/h2&gt;

&lt;p&gt;For the Home page, We'll put a nice welcome message and show the user's email. We'll also create a button that will call the auth signout function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAuth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signOut&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./firebase&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getAuth&lt;/span&gt;&lt;span class="p"&gt;())}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Adding authentication and access control to your application doesn't have to be a hassle. Both the setup step and, more importantly, the maintenance over time, are handled with modern platforms like Firebase.&lt;/p&gt;

&lt;p&gt;I have a community over on &lt;a href="https://codingwithjustin.com/discord"&gt;discord&lt;/a&gt; if you'd like to learn more. You should also check out my website &lt;a href="http://codingwithjustin.com"&gt;codingwithjustin.com&lt;/a&gt; where I post more content similar to this one.&lt;/p&gt;

</description>
      <category>react</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Hide NavBar as Scroll down, in less than 10 lines of javascript;</title>
      <author>Areeb ur Rub</author>
      <pubDate>Mon, 24 May 2021 18:21:30 +0000</pubDate>
      <link>https://dev.to/areeburrub/hide-navbar-as-scroll-down-in-less-than-10-lines-of-javascript-1i00</link>
      <guid>https://dev.to/areeburrub/hide-navbar-as-scroll-down-in-less-than-10-lines-of-javascript-1i00</guid>
      <description>&lt;p&gt;You must have seen this effect on several website, where you scroll down and navigation bar automatically hides and reappears when scroll up.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/areeburrub/embed/Vwpbxjw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So here's basic page in which I have implemented this,in just 10 lines of javascript.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var lastScrollTop;&lt;br&gt;
navbar = document.getElementById('navbar');&lt;br&gt;
window.addEventListener('scroll',function(){&lt;br&gt;
  var scrollTop = window.pageYOffset || document.documentElement.scrollTop;&lt;br&gt;
  if(scrollTop &amp;gt; lastScrollTop){&lt;br&gt;
    navbar.style.top='-80px';&lt;br&gt;
  }&lt;br&gt;
  else{&lt;br&gt;
    navbar.style.top='0';&lt;br&gt;
  }&lt;br&gt;
  lastScrollTop = scrollTop;&lt;br&gt;
});&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-its-working"&gt;
  &lt;/a&gt;
  How it's working
&lt;/h3&gt;

&lt;p&gt;Here, the position of the navbar is being altered using javascript.&lt;/p&gt;

&lt;p&gt;First we create a variable which stores position of Page;&lt;/p&gt;

&lt;p&gt;Then we get the scroll position using: &lt;code&gt;window.pageYOffset&lt;/code&gt; or for some browser 'document.documentElement.scrollTop';&lt;/p&gt;

&lt;p&gt;Then check that weather the page is scrolled up or down;&lt;/p&gt;

&lt;p&gt;Then save the scroll vale to the variable;&lt;/p&gt;

&lt;p&gt;This is done every time whenever the page is scrolled, as all this lies under a &lt;code&gt;EventListener&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-the-js-in-codepen-it-will-make-it-more-clear"&gt;
  &lt;/a&gt;
  Check the JS in codepen it will make it more clear
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Deployer on GitHub Actions</title>
      <author>Stefan Zweifel</author>
      <pubDate>Mon, 24 May 2021 17:43:04 +0000</pubDate>
      <link>https://dev.to/_stefanzweifel/deployer-on-github-actions-3ie5</link>
      <guid>https://dev.to/_stefanzweifel/deployer-on-github-actions-3ie5</guid>
      <description>&lt;p&gt;Today I would like to share with you my approach on how I deploy my PHP applications with &lt;a href="https://deployer.org"&gt;deployer&lt;/a&gt; through GitHub Actions. This might sound counterintuitive, as deploying with deployer is already easy: Running a CLI command and youre done.&lt;/p&gt;

&lt;p&gt;However, running deployer on GitHub Actions allows you to make the deployment process available to more people and/or to more situations. For example you could trigger the deployment automatically whenever a new commit is made to a particular branch, when a new release has been tagged, a new Pull Request is opened or when a user runs a Slack Command in a certain channel.&lt;/p&gt;

&lt;p&gt;This article will go into detail how to write the GitHub Actions workflows and gives you examples on how to trigger these workflows. I will not cover how to configure deployer itself.&lt;br&gt;&lt;br&gt;
Accompanying this article is an example Laravel application with example workflows for different deployment scenarios. If you like to read code first you can have a look at the repository &lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example"&gt;on GitHub&lt;/a&gt; (I will reference this example project throughout the article).&lt;/p&gt;

&lt;p&gt;Before we dive deep into the workflow examples, I would like to give you a short introduction to what deployer and GitHub Actions are.&lt;/p&gt;

&lt;p&gt;You can skip the intros and jump right &lt;a href="#the-deployer-github-action"&gt;to the requirements and the first example&lt;/a&gt;. There is a &lt;a href="#faq"&gt;FAQ&lt;/a&gt; section at the end to answer common questions that might come up.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-deployer"&gt;
  &lt;/a&gt;
  What is deployer?&lt;a href="#what-is-deployer"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://deployer.org"&gt;deployer&lt;/a&gt; is a deployment tool written in PHP. It comes with "Zero Downtime Deployments" out of the box and can be extended by writing simple PHP code. (&lt;a href="https://github.com/capistrano/capistrano"&gt;capistrano&lt;/a&gt; would be the equivalent in the Ruby world).&lt;/p&gt;

&lt;p&gt;But what does "Zero Downtime Deployment" mean? Here is how I would describe it:&lt;/p&gt;

&lt;p&gt;When your app is being deployed, &lt;code&gt;deployer&lt;/code&gt; creates a fresh copy of your app in a folder, prepares the artefacts that are needed to run your app (compiles your CSS and JavaScript files, installs your Composer dependencies) and then symlinks the newly created folder to be picked up by the webserver.&lt;/p&gt;

&lt;p&gt;Using this approach your app is still accessible and useable, while deployer installs your dependencies and builds your frontend assets in the newly created folder.&lt;br&gt;&lt;br&gt;
In contrast, if you install composer dependencies without zero downtime deployments, your app might break for for a couple of seconds an your visitors will see error messages. Not nice.&lt;/p&gt;

&lt;p&gt;Another benefit of deployer is that each deployment is atomic: If the deployed code breaks your app you can rollback to a previous deployment by running &lt;code&gt;dep rollback&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;p&gt;If you want to learn more about &lt;code&gt;deployer&lt;/code&gt;, I can recommend Loris Leiva's article series &lt;a href="https://lorisleiva.com/deploy-your-laravel-app-from-scratch"&gt;Deploy your Laravel App from Scratch&lt;/a&gt;. Reading the series I've learned to better organize my deployer-file though I've been using &lt;code&gt;deployer&lt;/code&gt; for years now.&lt;/p&gt;

&lt;p&gt;The main focus of &lt;strong&gt;this&lt;/strong&gt; article however is how to trigger a deployment through GitHub Actions. To keep things simple we will be using a basic deployer-file to deploy our demo application. You can find the GitHub repository &lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example"&gt;here&lt;/a&gt; and the used deployer file &lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example/blob/main/deploy.yaml"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next a short introduction to GitHub Actions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-github-actions"&gt;
  &lt;/a&gt;
  What is GitHub Actions?&lt;a href="#what-is-github-actions"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; is the continous integration and delivery feature baked into GitHub. With Actions you can run any type of software in reaction to an event that happens in GitHub. An event can be a "git-push", when a pull request is opened, a new issue is created and much more.&lt;/p&gt;

&lt;p&gt;Workflows are at the core of GitHub Actions and they are written in YAML. The most common workflows for programming projects are running tests, running code linters or optimizing image sizes.&lt;br&gt;&lt;br&gt;
On my site I've covered some of these common workflows (see &lt;a href="https://stefanzweifel.io/posts/run-laravel-test-suite-on-github-actions-with-laravel-docker/"&gt;"Run Laravel test suite on GitHub Actions with laravel-docker"&lt;/a&gt; or &lt;a href="https://stefanzweifel.io/posts/run-prettier-or-php-cs-fixer-with-github-actions/"&gt;"Run prettier or php-cs-fixer with GitHub Actions"&lt;/a&gt;) and special ones – like &lt;a href="https://stefanzweifel.io/posts/2021/04/28/auto-merge-dependabot-pull-requests/"&gt;Auto Merging Dependabot Pull Requests&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-deploy-your-app-through-github-actions"&gt;
  &lt;/a&gt;
  Why deploy your app through GitHub Actions?&lt;a href="#why-deploy-your-app-through-github-actions"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As mentioned in the beginning, running &lt;code&gt;deployer&lt;/code&gt; on Actions can give more people in your team or your organisation the power to deploy your applications. In simple terms, by moving to GitHub Actions, the execution of the &lt;code&gt;deployer&lt;/code&gt; command is moved from a local terminal to an environment which is accessible through an API.&lt;/p&gt;

&lt;p&gt;If your team works with Slack, you might write a Slack integration to &lt;code&gt;/deploy app prod&lt;/code&gt; from a channel. Or write an Alfred workflow to deploy your side project without starting your terminal. Or write an iOS Shortcut to deploy your app from the go.&lt;/p&gt;

&lt;p&gt;And than there is &lt;a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows"&gt;the enormous list of events&lt;/a&gt; that can trigger a workflow in GitHub Actions. The &lt;code&gt;schedule&lt;/code&gt;-trigger allows you to create a nightly deployment of your app. Or listening to the &lt;code&gt;release&lt;/code&gt; event allows you deploy your app when a new release has been tagged. Perfect for when your team is working in sprints.&lt;/p&gt;

&lt;p&gt;I think you get the idea. Moving the deployment process away from your terminal to GitHub itself gives you endless posibilites to trigger a deployment from anywhere.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#when-to-trigger-the-deployment"&gt;
  &lt;/a&gt;
  When to trigger the deployment?&lt;a href="#when-to-trigger-the-deployment"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before we go any further, we need to answer an important question: &lt;strong&gt;When&lt;/strong&gt; should the deployment for an environment for your application be triggered?&lt;/p&gt;

&lt;p&gt;Should the default branch always be deployed to your &lt;em&gt;staging&lt;/em&gt; environment when a new commit is pushed? Should the &lt;em&gt;production&lt;/em&gt; environment be deployed when a new release is tagged? Is each deployment triggered manually?&lt;/p&gt;

&lt;p&gt;The answer to this question is different from organisation to organisation. For example in my team we deploy manually – meaning we invoked &lt;code&gt;dep deploy&lt;/code&gt; manually from our terminals when we wanted (4-5 times a day). But that's what works for us.&lt;br&gt;&lt;br&gt;
Your team might work in sprints and deploy a new version every other week.&lt;/p&gt;

&lt;p&gt;As hinted in the previous section, GitHub gives us a vast list of events through which a deployment can be triggered. To keep things simple, I've decided to cover the following deploy scenarios in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploying manually through the GitHub UI and through the GitHub API.&lt;/li&gt;
&lt;li&gt;Deploy an app to production when a new version is tagged and released.&lt;/li&gt;
&lt;li&gt;Deploy an app to staging when a new commit is pushed to GitHub.&lt;/li&gt;
&lt;li&gt;Deploy a nightly build to a test environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those example will cover the basics and are a good starting point to built upon.&lt;/p&gt;

&lt;p&gt;Now – finally – let's dive into the workflows and code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-deployer-github-action"&gt;
  &lt;/a&gt;
  The Deployer GitHub Action&lt;a href="#the-deployer-github-action"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;All example workflows will use the &lt;a href="https://github.com/deployphp/action"&gt;deployphp/action&lt;/a&gt; GitHub Action. The Action is maintained by the same people who make deployer.&lt;/p&gt;

&lt;p&gt;But before you scroll down and copy and paste the workflows, we need to make preparations. First you need a SSH key, which you need to pass to the deployphp/action. Otherwhise deployer &lt;strong&gt;on GitHub Actions&lt;/strong&gt; will not be able to connect to your server.&lt;/p&gt;

&lt;p&gt;If you have an SSH key: great! If not, follow &lt;a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key"&gt;this tutorial&lt;/a&gt; on how to create a new SSH key. Make sure to update your server so that we can authenticate and connect to the server using the generated SSH key. You can learn more about how to do this in &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server"&gt;this DigitalOcean tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Later, we will use a &lt;code&gt;PRIVATE_KEY&lt;/code&gt; secret in our deployment workflows. This secret holds the SSH private key which will connect GitHub Actions to your server.&lt;br&gt;&lt;br&gt;
To add the secret go to your repository or organisation settings and click on "Secrets" in the sidebar.&lt;br&gt;&lt;br&gt;
Click on "New repository secret", give it the name &lt;code&gt;PRIVATE_KEY&lt;/code&gt; and store the SSH private key as its value (The part with "&lt;code&gt;-----BEGIN RSA PRIVATE KEY-----&lt;/code&gt;").&lt;/p&gt;

&lt;p&gt;Next, we need the &lt;code&gt;KNOWN_HOSTS&lt;/code&gt; value. This will later prevent GitHub Actions from asking you, if you want to connect to your own server. (Without the known_hosts value, the workflow will timeout, as you can't manually interact with the workflow run.&lt;br&gt;&lt;br&gt;
To get this value, execute the following command from your local CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-keyscan &amp;lt;name_of_your_host (eg. example.com)&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;name_of_your_host&amp;gt; ssh-rsa AAAABBBCCCDD...

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The name of the server, where your app should be deployed, followed by the &lt;strong&gt;public key&lt;/strong&gt; value. Copy the line to your clipboard which corresponds to the private SSH key you used for &lt;code&gt;PRIVATE_KEY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now add a &lt;code&gt;KNOWN_HOSTS&lt;/code&gt; secret to your repository or organisation like you did before for &lt;code&gt;PRIVATE_KEY&lt;/code&gt;. The value is the copied value from &lt;code&gt;ssh-keyscan&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we're ready do dive into workflow code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow-example-1-deploy-manually"&gt;
  &lt;/a&gt;
  Workflow Example 1: Deploy Manually&lt;a href="#workflow-example-1-deploy-manually"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This first workflow is the simplest of all examples. It can be triggered manually – either through the GitHub web UI or through a HTTP request to the GitHub API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example/blob/main/.github/workflows/deploy_manual.yml"&gt;Here is the workflow file&lt;/a&gt;. I will go into detail, what each step does below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .github/workflows/deploy_manual.yaml
name: Deploy (Manual)

on:
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deploy Environment'
        required: true
        default: 'stag'

jobs:
  deploy:
    name: Deployment
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Deploy
        uses: deployphp/action@master
        with:
          private-key: ${{ secrets.PRIVATE_KEY }}
          known-hosts: ${{ secrets.KNOWN_HOSTS }}
          dep: deploy ${{ github.event.inputs.deploy_env }} -v

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does this workflow do?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# …
on:
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deploy Environment'
        required: true
        default: 'stag'
# …

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First the &lt;code&gt;on&lt;/code&gt;-keyword. Here we tell GitHub to listen to the &lt;a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows#workflow_dispatch"&gt;&lt;code&gt;workflow_dispatch&lt;/code&gt;&lt;/a&gt; event which is triggered through a manual process. We set a &lt;code&gt;deploy_env&lt;/code&gt; input variable to target different deploy environments. (The ones you will have &lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example/blob/main/deploy.yaml#L15-L22"&gt;set up in your &lt;code&gt;deploy.php&lt;/code&gt; or &lt;code&gt;deploy.yml&lt;/code&gt; file&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# …
jobs:
  deploy:
    name: Deployment
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Deploy
        uses: deployphp/action@master
        with:
          private-key: ${{ secrets.PRIVATE_KEY }}
          known-hosts: ${{ secrets.KNOWN_HOSTS }}
          dep: deploy ${{ github.event.inputs.deploy_env }} -v

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next the job code. What does this?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We tell GitHub Actions to run the job on a machine running the latest Ubuntu version.&lt;/li&gt;
&lt;li&gt;Our project is cloned to the Linux machine.&lt;/li&gt;
&lt;li&gt;We instruct the &lt;code&gt;shivammathur/setup-php&lt;/code&gt; Action to install PHP 7.4.&lt;/li&gt;
&lt;li&gt;We install the composer dependencies for our project.&lt;/li&gt;
&lt;li&gt;Finally. We tell &lt;code&gt;deployphp/action&lt;/code&gt; to deploy our application to the environment we passed to the workflow in the &lt;code&gt;deploy_env&lt;/code&gt; input variable.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The local CLI equivalent of the code executed by the deployer Action would be &lt;code&gt;dep deploy stag -v&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a basic version of a deploy workflow. The composer dependencies are currently not cached and we don't do anything fancy after the deployment has been successful.&lt;/p&gt;

&lt;p&gt;Before we jump to the next few examples, I want to cover how you can now trigger the deployment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trigger-through-github-ui"&gt;
  &lt;/a&gt;
  Trigger through GitHub UI&lt;a href="#trigger-through-github-ui"&gt;#&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The most straightforward approach to trigger deployment is through github.com.&lt;/p&gt;

&lt;p&gt;Go to the &lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example/actions"&gt;"Actions" tab&lt;/a&gt; in your repository and click on &lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example/actions/workflows/deploy_manual.yml"&gt;"Deploy (Manual)"&lt;/a&gt; in the workflows list on the left hand side. A "Run workflow" button should appear.&lt;/p&gt;

&lt;p&gt;Clicking the button gives you the option to change the branch and the "Deploy Environment" value for the workflow run. The default value for the environment is "stag". Change it to &lt;code&gt;prod&lt;/code&gt; if you want to deploy your app to production.&lt;/p&gt;

&lt;p&gt;Click "Run workflow" to start the deployment process.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
        &lt;br&gt;
    The video shows how to trigger the deployment process manually through the GitHub UI.&lt;/p&gt;

&lt;p&gt;After a couple of seconds the deployment run appears on the page.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#trigger-through-api-request"&gt;
  &lt;/a&gt;
  Trigger through API request&lt;a href="#trigger-through-api-request"&gt;#&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A more versatile option is to trigger the deployment by making an API request to the GitHub API. By using the API, you bypass the tedious work of clicking through the github.com and you can integrate the deployment process in more tools (Slack Bot, iOS Shortcut, Alfred Workflow).&lt;br&gt;&lt;br&gt;
You will have even more ideas where the API request could be made. I won't go further here. &lt;sup id="fnref:1: while writing the article, i realized that this is a big topic and i didn't want to blow up the article even further. in a future article i want to share how you can trigger the deployment process through slack/telegram/discord commands."&gt;&lt;a href="#fn:1:%20while%20writing%20the%20article,%20i%20realized%20that%20this%20is%20a%20big%20topic%20and%20i%20didn't%20want%20to%20blow%20up%20the%20article%20even%20further.%20in%20a%20future%20article%20i%20want%20to%20share%20how%20you%20can%20trigger%20the%20deployment%20process%20through%20slack/telegram/discord%20commands."&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;As there are many ways on how to make the HTTP request, I share the CURL version here. Adjust it to your liking if you use Guzzle or any other HTTP library.&lt;/p&gt;

&lt;p&gt;To make the command work, replace the following values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;PRIVATE_ACCESS_TOKEN&lt;/code&gt; with a personal access token with the &lt;code&gt;repo&lt;/code&gt; scope&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;YOUR_ORG&lt;/code&gt; with the organisation name or username of your repository.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;YOUR_REPOSITORY&lt;/code&gt; with the name of the projects repository
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl \
  -X POST \
  -H "Authorization: token PRIVATE_ACCESS_TOKEN" \
  -H "Accept: application/vnd.github.v3+json" \
  https://api.github.com/repos/YOUR_ORG/YOUR_REPOSITORY/actions/workflows/deploy_manual.yaml/dispatches \
  -d '{"ref":"main", "inputs": {"deploy_env": "prod"}}'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you want to deploy to staging, update the &lt;code&gt;deploy_env&lt;/code&gt; value to &lt;code&gt;"stag"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tipp:&lt;/strong&gt; If you want to learn more on how to dispatch workflow evens check out &lt;a href="https://docs.github.com/en/rest/reference/actions#create-a-workflow-dispatch-event"&gt;"Create a worfklow dispatch event"&lt;/a&gt; in the GitHub documentation.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#trigger-with-raw-gh-endraw-cli"&gt;
  &lt;/a&gt;
  Trigger with &lt;code&gt;gh&lt;/code&gt;-CLI&lt;a href="#trigger-with-gh-cli"&gt;#&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In addition to the web UI and the GitHub API, the workflow can be triggered by using the &lt;a href="https://cli.github.com/"&gt;GitHub CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Execute the following command inside your project folder in your terminal. (You need to be logged-in in &lt;code&gt;gh&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gh workflow run "Deploy (Manual)" -f deploy_env=prod

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;
        &lt;br&gt;
    In this video, I'm triggering the deployment process by calling a composer script which in turns runs the GitHub CLI. After a couple of seconds the deployment run appears in the GitHub UI.&lt;/p&gt;

&lt;p&gt;To make triggering the workflow through the terminal easier, I suggest adding a composer script to your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# composer.json
…
"scripts": {
    "deploy:prod": ["gh workflow run \"Deploy (Manual)\" -f deploy_env=prod"],
    "deploy:stag": ["gh workflow run \"Deploy (Manual)\" -f deploy_env=stag"],
    …
},
…

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then run &lt;code&gt;composer run deploy:prod&lt;/code&gt; or &lt;code&gt;composer run deploy:stag&lt;/code&gt; to trigger the deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow-example-2-deploy-to-production-on-new-release"&gt;
  &lt;/a&gt;
  Workflow Example 2: Deploy to Production on new Release&lt;a href="#workflow-example-2-deploy-to-production-on-new-release"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This next workflow example is based on our previous example and uses the same "core" steps to deploy our application (clone, install dependencies, deploy).&lt;/p&gt;

&lt;p&gt;The difference: this workflow will deploy your application to production when a new release has been created in GitHub.&lt;/p&gt;

&lt;p&gt;As before, first &lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example/blob/main/.github/workflows/deploy_release.yml"&gt;the workflow file&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .github/workflows/deploy_release.yml
name: Deploy (Release)

on:
  release:
    types: [released]

jobs:
  deploy:
      name: Deploy Tag to Production
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v2

        - name: Setup PHP
          uses: shivammathur/setup-php@v2
          with:
            php-version: 7.4

        - name: Install Dependencies
          run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

        - name: Deploy
          uses: deployphp/action@master
          with:
            private-key: ${{ secrets.PRIVATE_KEY }}
            known-hosts: ${{ secrets.KNOWN_HOSTS }}
            dep: deploy prod -v

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The workflow looks almost identical to our basic example. Here is what has changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;on:
  release:
    types: [released]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of listening to the &lt;code&gt;workflow_dispatch&lt;/code&gt;-event we are listening to the &lt;code&gt;release&lt;/code&gt; event. In particual to the &lt;code&gt;released&lt;/code&gt; activity type.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows#release"&gt;the documentation&lt;/a&gt;, listening to the &lt;code&gt;released&lt;/code&gt; activity type will trigger this workflow &lt;strong&gt;only&lt;/strong&gt; when a &lt;strong&gt;stable&lt;/strong&gt; release has been published.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Deploy
  uses: deployphp/action@master
  with:
    private-key: ${{ secrets.PRIVATE_KEY }}
    known-hosts: ${{ secrets.KNOWN_HOSTS }}
    dep: deploy prod -v

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the "Deploy" step the only difference to our previous example is that we explicitly set the environment to &lt;code&gt;prod&lt;/code&gt;. There is no variable available to make this dynamic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow-example-3-deploy-to-staging-on-push"&gt;
  &lt;/a&gt;
  Workflow Example 3: Deploy to Staging on Push&lt;a href="#workflow-example-3-deploy-to-staging-on-push"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example/blob/main/.github/workflows/deploy_push.yml"&gt;The following example&lt;/a&gt; is great if you want to have a &lt;em&gt;continous&lt;/em&gt; deployment system.&lt;br&gt;&lt;br&gt;
It will deploy your application to your staging environment when a new commit is made to the default branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .github/workflows/deploy_push.yml
name: Deploy (Push to Branch)

on:
  push:
    branches:
      # You can also change the branch name to `develop`
      - main

jobs:
  deploy:
      name: Deploy staging
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v2

        - name: Setup PHP
          uses: shivammathur/setup-php@v2
          with:
            php-version: 7.4

        - name: Install Dependencies
          run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

        - name: Deploy
          uses: deployphp/action@master
          with:
            private-key: ${{ secrets.PRIVATE_KEY }}
            known-hosts: ${{ secrets.KNOWN_HOSTS }}
            dep: deploy stag -v

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you might have guessed, not much has changed to the previous examples. The only difference is the event we're listening to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;on:
  push:
    branches:
      - main

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The workflow listens to the &lt;a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows#push"&gt;&lt;code&gt;push&lt;/code&gt;&lt;/a&gt; event. To be exact, it listens to all pushes to the &lt;code&gt;main&lt;/code&gt; branch. (Feel free to replace "main" with the branch name that you want to deploy)&lt;/p&gt;

&lt;p&gt;If we wouldn't specify the &lt;code&gt;branches&lt;/code&gt;-modifier, the workflow would not only be triggered when you push to the &lt;code&gt;main&lt;/code&gt;-branch, but when you push and update other branches too. That's not what you want. This will lead to chaos, as GitHub will constantly deploy different versions to &lt;em&gt;staging&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;_ &lt;strong&gt;Note&lt;/strong&gt; _: I do not recommend using this workflow in a repository with a lot of "commit-traffic". If your deployment script takes more than 3-4 minutes to run, and every 5-10 minutes a new commit lands on your default branch, you will quickly run through your GitHub Actions CI minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow-example-4-deploy-on-schedule"&gt;
  &lt;/a&gt;
  Workflow Example 4: Deploy on Schedule&lt;a href="#workflow-example-4-deploy-on-schedule"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example/blob/main/.github/workflows/deploy_schedule.yml"&gt;The next workflow&lt;/a&gt; is not triggered by a manual process or in recation to an event on GitHub, but on schedule.&lt;/p&gt;

&lt;p&gt;Imagine your team has a nightly server, where the latest version of your project is being deployed every night.&lt;br&gt;&lt;br&gt;
Or you provide a demo application to your users, which is being redeployed every 2 to 3 hours to reset the state of the app.&lt;/p&gt;

&lt;p&gt;The schedule feature of GitHub Actions could be helpful here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Deploy (Schedule)

on:
  schedule:
    - cron: "0 0 * * *"

jobs:
  deploy:
      name: Deploy
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v2

        - name: Setup PHP
          uses: shivammathur/setup-php@v2
          with:
            php-version: 7.4

        - name: Install Dependencies
          run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

        - name: Deploy
          uses: deployphp/action@master
          with:
            private-key: ${{ secrets.PRIVATE_KEY }}
            known-hosts: ${{ secrets.KNOWN_HOSTS }}
            dep: deploy nightly --branch=main -v

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you know by now, the workflow looks almost identical to the other examples. Let's have a closer look.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;on:
  schedule:
    - cron: "0 0 * * *"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows#schedule"&gt;&lt;code&gt;schedule&lt;/code&gt;&lt;/a&gt; listener accepts a cron expression as input. The example above runs every day on midnight UTC.&lt;br&gt;&lt;br&gt;
If you need help figuring out the right cron syntax for your project I can recommend &lt;a href="https://crontab.guru/"&gt;crontab guru&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Deploy
  uses: deployphp/action@master
  with:
    private-key: ${{ secrets.PRIVATE_KEY }}
    known-hosts: ${{ secrets.KNOWN_HOSTS }}
    dep: deploy nightly --branch=main -v

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our "Deploy" step I use a different deploy environment: &lt;code&gt;nightly&lt;/code&gt;. I explicitly tell deployer to deploy the &lt;code&gt;main&lt;/code&gt; branch. This isn't strictly necessary, as workflow runs triggered by the scheduler will check out the default branch by default.&lt;br&gt;&lt;br&gt;
Setting the &lt;code&gt;branch&lt;/code&gt; option explicitly gives me more confidence that the right code will be deployed though.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus&lt;a href="#bonus"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now I would like to show you a few bonus features you could add to your workflows. We start with GitHub environments.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#use-github-environments"&gt;
  &lt;/a&gt;
  Use GitHub Environments&lt;a href="#use-github-environments"&gt;#&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.github.com/en/actions/reference/environments"&gt;Environments&lt;/a&gt; are shown in the repository sidebar on github.com and can indicate the deploy status of a project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9dXKjh1D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stefanzweifel.io/assets/images/posts/20210524-deployer-on-github-actions/screenshot-github-environments.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9dXKjh1D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stefanzweifel.io/assets/images/posts/20210524-deployer-on-github-actions/screenshot-github-environments.jpg" alt="Screenshot of the example repository on GitHub. Highlighted is the location of the Environments in the sidebar."&gt;&lt;/a&gt;GitHub Environments can help you to keep track of when a deployment happend.&lt;/p&gt;

&lt;p&gt;The feature isn't new, but got a major overhaul with a recent Actions update. New are environment specific secrets and protection rules. These protection rules allows you to setup a review system, so that another team member has to review the deployment before it goes to production. Or that a certain amount of time has to pass, before a change can be deployed.&lt;/p&gt;

&lt;p&gt;These features (protection rules and secrets) are currently in beta and available to public repositories or for GitHub enterprise organisations.&lt;br&gt;&lt;br&gt;
Environments themselfs however, can be referenced in your workflows and can give you a visual indicator if a deployment has been successful or can give you a list when a specific commit has been deployed. (See &lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example/deployments"&gt;this list&lt;/a&gt; in the example repository)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example/blob/main/.github/workflows/deploy_manual_with_environments.yml"&gt;The following workflow&lt;/a&gt; expands on our "manual deployment" workflow and adds 2 environments: "staging" and "production".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .github/workflows/deploy_manual_with_environments.yml
name: Deploy (Manual + GitHub Environments)

on:
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deploy Environment'
        required: true
        default: 'stag'

jobs:
  deploy-stag:
    if: github.event.inputs.deploy_env == 'stag'
    name: Deploy staging
    runs-on: ubuntu-latest

    environment:
      name: staging
      url: https://stag.example.com

    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Deploy
        uses: deployphp/action@master
        with:
          private-key: ${{ secrets.PRIVATE_KEY }}
          known-hosts: ${{ secrets.KNOWN_HOSTS }}
          dep: deploy ${{ github.event.inputs.deploy_env }} -v

  deploy-prod:
      if: github.event.inputs.deploy_env == 'prod'
      name: Deploy production
      runs-on: ubuntu-latest

      environment:
        name: production
        url: https://example.com

      steps:
        - uses: actions/checkout@v2

        - name: Setup PHP
          uses: shivammathur/setup-php@v2
          with:
            php-version: 7.4

        - name: Install Dependencies
          run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

        - name: Deploy
          uses: deployphp/action@master
          with:
            private-key: ${{ secrets.PRIVATE_KEY }}
            known-hosts: ${{ secrets.KNOWN_HOSTS }}
            dep: deploy ${{ github.event.inputs.deploy_env }} -v

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, let's dissect the workflow code.&lt;/p&gt;

&lt;p&gt;The main difference to all previous examples is that the code above contains 2 jobs: "deploy-stag" and "deploy-prod". These jobs are very similar. The only change between them is an if-statement and the environment declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deploy-prod:
  if: github.event.inputs.deploy_env == 'prod'
  name: Deploy Production
  runs-on: ubuntu-latest

  environment:
    name: production
    url: https://example.com

  steps:
    - uses: actions/checkout@v2

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line of each job is the &lt;code&gt;if&lt;/code&gt;-statement. We check if the &lt;code&gt;deploy_env&lt;/code&gt; input value equals to &lt;code&gt;'prod'&lt;/code&gt;. This protects us from running both the staging and production deployment at the same time – as you usually deploy one environment at the time.&lt;/p&gt;

&lt;p&gt;Next comes the important part: the &lt;code&gt;environment&lt;/code&gt; declaration. Here we give the environment its name and a URL. The URL will later be used in the GitHub UI and allows you to quickly jump to your deployed application.&lt;/p&gt;

&lt;p&gt;And that's it. For staging, we check if the &lt;code&gt;deploy_env&lt;/code&gt; value is &lt;code&gt;'stag'&lt;/code&gt; and set the GitHub environment to "staging". For production we change the values accordingly.&lt;/p&gt;

&lt;p&gt;You might ask yourself, why can't we combine these 2 jobs into a single job and make the environment values dynamic? Unfortunately GitHub Actions isn't that flexible and the &lt;code&gt;if&lt;/code&gt;-key word is only available on the job or steps level. (If you find a way to make this more dynamic, let me know!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tipp:&lt;/strong&gt; If you've been experimenting with environments in your GitHub repository and want to get rid of all the past deployments and environments you can use &lt;a href="https://stackblitz.com/edit/github-deployment-clearer?file=index.js"&gt;github-deployment-clearer&lt;/a&gt;. Enter a personal access token, your organisation name and repository name in the code and after a few seconds all deployments and environments will be removed from the repository. (Unfortunately GitHub doesn't have a UI to delete the environments, that's why you have to resort to their API or third-party tools.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-cache-composer-dependencies"&gt;
  &lt;/a&gt;
  Bonus: Cache Composer Dependencies&lt;a href="#bonus-cache-composer-dependencies"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The workflows shown install your projects composer dependencies on every workflow run. To speed things up, I suggest adding the &lt;code&gt;actions/cache&lt;/code&gt;-Action to your workflows.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/actions/cache/blob/main/examples.md#php---composer"&gt;&lt;code&gt;cache&lt;/code&gt;-documentation&lt;/a&gt; has an example on how to use it with composer. Let's apply it to our default workflow. Here is &lt;a href="https://github.com/stefanzweifel/deployer-on-github-actions-example/blob/main/.github/workflows/deploy_manual_with_cache.yml"&gt;our adjusted workflow&lt;/a&gt; to cache composer dependencies when a deployment is manually triggered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .github/workflows/deploy_manual_with_cache.yml
name: Deploy (Manual; Cache Composer)

on:
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deploy Environment'
        required: true
        default: 'stag'

jobs:
  deploy:
    name: Deployment
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Deploy
        uses: deployphp/action@master
        with:
          private-key: ${{ secrets.PRIVATE_KEY }}
          known-hosts: ${{ secrets.KNOWN_HOSTS }}
          dep: deploy ${{ github.event.inputs.deploy_env }} -v

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What has changed? Before the step that installs our composer dependencies, we added the following 2 steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Get Composer Cache Directory
  id: composer-cache
  run: |
    echo "::set-output name=dir::$(composer config cache-files-dir)"

- uses: actions/cache@v2
  with:
    path: ${{ steps.composer-cache.outputs.dir }}
    key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
    restore-keys: |
      ${{ runner.os }}-composer-

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "Get Composer Cache Directory" step runs a shell command to extract the path to the composer cache directory (duh). On your local machine the value would be &lt;code&gt;~/.composer/cache/files&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
The next step uses the &lt;code&gt;cache&lt;/code&gt;-Action to either restore or cache the files and folders in &lt;code&gt;~/.composer/cache/files&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the workflow runs for the first time, composer will download the dependencies from packagist.org. When the run finshes successfully, the &lt;code&gt;actions/cache&lt;/code&gt; will kick in and cache the composer dependencies.&lt;/p&gt;

&lt;p&gt;On subsequent workflow runs, where the composer.lock file doesn't change, GitHub Actions will restore the cache and the dependencies will be installed instantly.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-sentry-release-tracking"&gt;
  &lt;/a&gt;
  Bonus: Sentry Release Tracking&lt;a href="#bonus-sentry-release-tracking"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before I let you go, one last bonus section (I promise).&lt;br&gt;&lt;br&gt;
Another benefit of having the deploy process running on GitHub Actions is the access to repo or organisation wide secrets.&lt;/p&gt;

&lt;p&gt;My team and I use these org wide secrets to track our deployments with &lt;a href="https://sentry.io/features/releases/"&gt;Sentry's release feature&lt;/a&gt;. Sentry will send a neat email to all developers who contributed and lets them know that their code made it to production. (In addition, the error tracking is a bit more detailled.)&lt;/p&gt;

&lt;p&gt;The Sentry team published their &lt;a href="https://github.com/getsentry/action-release"&gt;own GitHub Action&lt;/a&gt; to make this super easy. Add the following block at the end of your workflow, replace the values for &lt;code&gt;SENTRY_ORG&lt;/code&gt; and &lt;code&gt;SENTRY_PROJECT&lt;/code&gt; and add your Sentry auth token to your repository or organisation secrets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Create Sentry Release
  uses: getsentry/action-release@v1
  env:
    SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    SENTRY_ORG: sentry_org_name
    SENTRY_PROJECT: sentry_project_name
  with:
    environment: ${{ github.event.inputs.deploy_host }}
    set_commits: auto

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next time your app is being deployed, you will receive an email notification with a list of the commits that went live.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-use-this-approach-in-my-projects"&gt;
  &lt;/a&gt;
  How I use this approach in my projects&lt;a href="#how-i-use-this-approach-in-my-projects"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Not all my personal projects use deployer or the GitHub Actions deploy method … yet. For a few projects it doesn't make sense to add all this complexity. Many of my side projects are fine to go down for a couple of seconds or minutes when the app is deployed, through &lt;a href="https://forge.laravel.com"&gt;Laravel Forge&lt;/a&gt; for example, as I am the sole user.&lt;/p&gt;

&lt;p&gt;On the projects that do use the GitHub Actions approach, I've settled on using the &lt;code&gt;gh&lt;/code&gt;-CLI to trigger the deployment. (A shell alias or composer script like the mentioned &lt;code&gt;composer run deploy:prod&lt;/code&gt; makes using it more convenient).&lt;br&gt;&lt;br&gt;
To deploy &lt;a href="https://3.screeenly.com"&gt;3.screeenly.com&lt;/a&gt;, I've written an iOS Shortcut and Alfred Workflow that interacts with the GitHub API. (Let me know if you're interested in those scripts)&lt;/p&gt;

&lt;p&gt;At work, my team and I are deciding what the best approach is. For now, we've settled on using the &lt;code&gt;gh&lt;/code&gt;-CLI to deploy our apps. We're currently exploring the idea of adding a deploy command to our Slack channels though. This would allow developers to deploy an application with a simple &lt;code&gt;/deploy prod&lt;/code&gt; in an &lt;code&gt;#ops&lt;/code&gt; channel. (I have no idea how to tackle this problem yet. You know how? Let me now!).&lt;/p&gt;

&lt;p&gt;I think the most important part is, to keep in mind that all this (*gestures at the text above*) adds a lot of complexity to your infrastructure. GitHub Actions could go down or introduce a breaking change that forces you to update the workflows.&lt;/p&gt;

&lt;p&gt;As a final note on this, I would suggest you make sure that you are still able to deploy your application from your local terminal by using the deployer CLI and by running &lt;code&gt;dep deploy prod&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outro-and-personal-opinion"&gt;
  &lt;/a&gt;
  Outro and Personal Opinion&lt;a href="#outro-and-personal-opinion"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Phew! Thanks for reading so far. I hope you learned a thing or two about GitHub Actions or deployments while reading this article.&lt;br&gt;&lt;br&gt;
While researching and testing the workflows in this article I sure did learn a couple of new things.&lt;/p&gt;

&lt;p&gt;If you have any questions, let me know via &lt;a href="https://twitter.com/_stefanzweifel"&gt;Twitter&lt;/a&gt;, through email or by joining the discussion in &lt;a href="https://github.com/stefanzweifel/ama/discussions/categories/articles"&gt;my AMA repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If I could spark your interest in GitHub Actions and you would like to automate common tasks in your GitHub repositories I've written on &lt;a href="https://stefanzweifel.io/posts/2021/04/28/auto-merge-dependabot-pull-requests/"&gt;how to auto merge Dependabot PRs&lt;/a&gt; or &lt;a href="https://stefanzweifel.io/posts/run-prettier-or-php-cs-fixer-with-github-actions/"&gt;how to lint and fix your code with php-cs-fixer and prettier&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, if you would like to read more about this topic from me in the future, consider sponsoring me on &lt;a href="https://github.com/sponsors/stefanzweifel?frequency=one-time&amp;amp;sponsor=stefanzweifel"&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outlook"&gt;
  &lt;/a&gt;
  Outlook&lt;a href="#outlook"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I had a lot of fun writing this article. As mentioned, I would like to explore how to properly incorporate the deployment process in tools like Slack, Microsoft Teams, Telegram or whatever chat platform a team is using (eg. "ChatOps").&lt;/p&gt;

&lt;p&gt;As this article is quite long, I decided that I will pack my findings in an accompanianing article … when I'm ready to share more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ&lt;a href="#faq"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-security-implications-of-deploy-apps-in-this-way"&gt;
  &lt;/a&gt;
  What are the security implications of deploy apps in this way?&lt;a href="#what-are-the-security-implications-of-deploy-apps-in-this-way"&gt;#&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For one, you have to trust GitHub that they keep their Actions infrastructure secure and that no other party can spy on a workflow run.&lt;/p&gt;

&lt;p&gt;Another attack vector could be the way on how you decide to trigger the deployment. If you stick to GitHubs native events like &lt;code&gt;push&lt;/code&gt; or &lt;code&gt;release&lt;/code&gt; you should be safe.&lt;/p&gt;

&lt;p&gt;If you decide to use a deploy workflow that listens to the &lt;code&gt;workflow_dispatch&lt;/code&gt;-event, the risk increases.&lt;br&gt;&lt;br&gt;
If you then decide to trigger the event through API requests through another app (Slack, Alfred, iOS Shortcuts, *insert app name here*), then you have trust these apps that they are not compromised.&lt;/p&gt;

&lt;p&gt;In the end, you and your team have to decide if the switch to deploy your apps through a third-party is better than running a CLI command locally on your machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-you-not-use-a-single-workflow-to-cover-all-scenarios"&gt;
  &lt;/a&gt;
  Why do you not use a single Workflow to cover all scenarios?&lt;a href="#why-do-you-not-use-a-single-workflow-to-cover-all-scenarios"&gt;#&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I currently like to have workflows that do one thing and are small. This makes debugging or explaining a workflow to others easier.&lt;/p&gt;

&lt;p&gt;Technically you could combine the mentioned example workflows above into one "super" workflow, but you would then have to riddle it with &lt;code&gt;if&lt;/code&gt;-statements to check, wether the step or job in that workflow should be run for a triggered event.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-you-not-have-a-single-workflow-which-runs-your-tests-and-then-deploys-your-app"&gt;
  &lt;/a&gt;
  Why do you not have a single Workflow which runs your tests and then deploys your app?&lt;a href="#why-do-you-not-have-a-single-workflow-which-runs-your-tests-and-then-deploys-your-app"&gt;#&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As mentioned above, I personally prefer to have dedicated workflows for each task. Even if this means, that I waste precious CI minutes.&lt;/p&gt;

&lt;p&gt;However, in the repository which holds this blog, I've started to experiment with creating a single huge workflow, that tests that the site can be built and then triggers the deployment and other subsequent jobs.&lt;/p&gt;

&lt;p&gt;If you think you found &lt;em&gt;the right way&lt;/em&gt; to write workflows or are interested in combining multiple workflows into one: Let me know!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-didnt-you-cover-github-environments-protection-rules-and-required-reviewers-in-depth"&gt;
  &lt;/a&gt;
  Why didn't you cover GitHub Environments protection rules and required reviewers in depth?&lt;a href="#why-didnt-you-cover-github-environments-protection-rules-and-required-reviewers-in-depth"&gt;#&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As of time of writing this article (May 2021) GitHub Environment and protection rules are in beta and available to public repositories or GitHub Enterprise plans.&lt;br&gt;&lt;br&gt;
As I assume not all repositories of my readers are either public or using GitHub Enterprise, I've kept these features out of this article.&lt;/p&gt;

&lt;p&gt;In addition, "Required reviewers", "wait timer" and "deployment branches" are features that do not need to be configured in a workflow file but rather in the UI on github.com.&lt;/p&gt;

&lt;p&gt;I assume once the features are out of beta and available to more users, it will be really easy to – for example – add required reviewers to your application. If you use a workflow that references environments, I assume you have to create/select that environment in the repository settings and add the required reviewers.&lt;/p&gt;

&lt;p&gt;I will update this article accordingly once the feature is made generally available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-github-deploy-keys"&gt;
  &lt;/a&gt;
  What about GitHub Deploy Keys?&lt;a href="#what-about-github-deploy-keys"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The GitHub &lt;a href="https://docs.github.com/en/developers/overview/managing-deploy-keys#deploy-keys"&gt;documentation&lt;/a&gt; mentions "Deploy Keys" as a way to give a server access to repository through a read-only SSH key.&lt;/p&gt;

&lt;p&gt;I haven't used or suggested deploy keys in the article above for the &lt;code&gt;PRIVATE_KEY&lt;/code&gt; secret, as they solve a different problem. Deploy keys are here to allow your servers to download/clone a GitHub repository; but not to allow GitHub Actions to connect to your server through SSH.&lt;/p&gt;

&lt;p&gt;You could technically use the SSH keys you've designated as deploy keys in the &lt;code&gt;PRIVATE_KEY&lt;/code&gt; secret, but I would advise against mixing those keys.&lt;/p&gt;

</description>
      <category>github</category>
      <category>deployer</category>
      <category>deployment</category>
    </item>
    <item>
      <title>New Pattern Matching Feature in Python</title>
      <author>James Briggs</author>
      <pubDate>Mon, 24 May 2021 17:13:01 +0000</pubDate>
      <link>https://dev.to/jamescalam/new-pattern-matching-feature-in-python-1jn8</link>
      <guid>https://dev.to/jamescalam/new-pattern-matching-feature-in-python-1jn8</guid>
      <description>&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2qJavL-VX9Y"&gt;https://www.youtube.com/watch?v=2qJavL-VX9Y&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The new structural pattern matching feature arriving to Python 3.10!&lt;/p&gt;

&lt;p&gt;Python 3.10 is beginning to fill-out with plenty of fascinating new features. One of those, in particular, caught my attention - structural pattern matching - or as most of us will know it, switch/case statements.&lt;/p&gt;

&lt;p&gt;Switch-statements have been absent from Python despite being a common feature of most languages. Python is leapfrogging ahead of those languages by introducing the match-case statement as a switch-case v2.0.&lt;/p&gt;

&lt;p&gt;Back in 2006, PEP 3103 was raised, recommending the implementation of a switch-case statement. However, after a poll at PyCon 2007 received no support for the feature, the Python devs dropped it.&lt;/p&gt;

&lt;p&gt;Fast-forward to 2020, and Guido van Rossum, the creator of Python, committed the first documentation showing the new match-statements, which have been named Structural Pattern Matching, as found in PEP 634.&lt;/p&gt;

&lt;p&gt;Let's take a look at how this new logic works.&lt;/p&gt;

&lt;p&gt;Medium Article:&lt;br&gt;
&lt;a href="https://towardsdatascience.com/switch-case-statements-are-coming-to-python-d0caf7b2bfd3"&gt;https://towardsdatascience.com/switch-case-statements-are-coming-to-python-d0caf7b2bfd3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Friend Link (free access):&lt;br&gt;
&lt;a href="https://towardsdatascience.com/switch-case-statements-are-coming-to-python-d0caf7b2bfd3?sk=363e0f7696502647e007f91910b4c817"&gt;https://towardsdatascience.com/switch-case-statements-are-coming-to-python-d0caf7b2bfd3?sk=363e0f7696502647e007f91910b4c817&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>datascience</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 5 Web Development Trends of 2021</title>
      <author>Vikram Aditya</author>
      <pubDate>Mon, 24 May 2021 17:10:34 +0000</pubDate>
      <link>https://dev.to/circle/top-5-web-development-trends-of-2021-4m3k</link>
      <guid>https://dev.to/circle/top-5-web-development-trends-of-2021-4m3k</guid>
      <description>&lt;ol&gt;
&lt;li&gt;AI or Bots&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Progressive Web App&lt;/li&gt;
&lt;li&gt;Mobile-Friendly Website&lt;/li&gt;
&lt;li&gt;Blockchain Technology&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;AI or Bots&lt;br&gt;
Artificial intelligence (AI) is the intelligence displayed by machines to mimic human intelligence and perform cognitive functions like the ability to learn, collect data, analyze information, understand emotions or solve challenging problems. The need for AI-enabled communication, multi-task automation, and analytics solutions will become more prevalent this year.&lt;br&gt;
As early as now we can see how AI’s chatbots, virtual assistants (like Amazon’s Alexa, Apple’s Siri and Microsoft’s Cortana) and voice bots helped businesses engagement and transformed social interaction. Their evolutions empowered the omnichannel for digital customer experience and guaranteed consistency across voice, chat, messaging and websites.&lt;br&gt;
With the help of Machine Learning (ML) development and Artificial Neural Network (ANN) researches and studies, AI might achieve its coveted goals – to successfully simulate genuine human empathy and demonstrate commonsense knowledge.&lt;/p&gt;

&lt;p&gt;JavaScript&lt;br&gt;
JavaScript is still the most popular language for the last six years, and it continues to develop according to Stack Overflow 2018 report. The evolution of its frameworks, libraries, and designs for the past years proved that it has lots to offer in the market. No wonder it’s developer’s top pick language for it provides a whole new experience of flexibility, challenge, and power.&lt;br&gt;
In Coding Dojo bootcamp, we teach not only Javascript, but we offer five of the Most In-Demand Programming Languages of 2019 ranked in TIOBE Index. Our learning platform equips developers with the most sought-after tech skills and helps them stand out on the job market.&lt;/p&gt;

&lt;p&gt;Progressive Web App&lt;br&gt;
Progressive Web Apps (or PWAs) are still part of 2019 hottest web trends. These modern web applications load like regular web pages or websites but have a high level of functionality. They can load instantly, regardless of the network state and browser choice because they’re built with progressive enhancement, a strategy for web design that emphasizes core webpage content first.&lt;br&gt;
PWA ensures an instant, independence and reliable experience of users without cache issues. It’s safe because it served via HTTP to avert content snooping and data tampering.&lt;br&gt;
On top of that, PWA is user-friendly, installable and hassle-free which enhances the existing web technologies—thanks to its service workers and other built-in features. It can be shared via a URL and can re-engage users with web push notifications.&lt;/p&gt;

&lt;p&gt;Mobile-Friendly Website&lt;br&gt;
Mobile-friendly websites are websites that work well on smartphones. They use touch controls and can fit on small screens for quick navigation. Furthermore, they load fast due to their fantastic features which reduce data entry.&lt;br&gt;
In 2016, Google’s A-Team created its own first mobile-optimized search index. It’s one of Google’s best approaches to give their smartphone visitors the same quality of user experience when delivering search results regardless of the device they’re using.&lt;br&gt;
Although hardware and user-interface are different between desktops and mobile devices, many companies adopted the strategy to start digital traffic and increase their website marketability. It’s a wise move for the number of mobile phone users in the world. And it is expected to pass the five billion mark by 2019 according to Statistica.com.&lt;/p&gt;

&lt;p&gt;Blockchain Technology&lt;br&gt;
Thanks to Satoshi Nakamoto, the unknown person who [claimed to be a Japanese] created and developed the bitcoin, we’ve entered the Bitcoin Era. And from it, the Blockchain Technology emerges which heyday is still evident nowadays.&lt;br&gt;
Blockchain is an open and distributed ledger, notorious for its secured design, decentralized consensus, and modified-resistance blocks. It’s designed to lower the financial business cost, reduce the frequency of transaction settlement and improve cash flow backed up by transparent records/data.&lt;br&gt;
As a peer-to-peer network manages it, it has a strict protocol for inter-node communication and new block validation process that earned it the title as the “First and Most Trusted Global Cryptocurrency Company.”&lt;br&gt;
One of the best practices of Coding Dojo workshops is to teach our students on how to create digital certificates using blockchain. This BlockCerts project is made possible with our partnership with MIT. Now, we issue verifiable graduation certificates on the BitCoin blockchain that ensures valid status.&lt;/p&gt;

&lt;p&gt;Technologies keep on growing day by day like LaMDA recently launched, also Blockchain technology like bitcoin, Ethereum, dogecoin ( to the mooooooon ) and many more...&lt;/p&gt;

&lt;p&gt;JOIN THEVIKCODE NEWLETTER ( GET DAILY WHICH WILL NOT BE AVAIBLE HERE ) - &lt;a href="https://thevikcode.substack.com/"&gt;https://thevikcode.substack.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>A historical introduction to the Compose reactive state model</title>
      <author>Zach Klippenstein</author>
      <pubDate>Mon, 24 May 2021 17:07:18 +0000</pubDate>
      <link>https://dev.to/zachklipp/a-historical-introduction-to-the-compose-reactive-state-model-19j8</link>
      <guid>https://dev.to/zachklipp/a-historical-introduction-to-the-compose-reactive-state-model-19j8</guid>
      <description>&lt;p&gt;Jetpack Compose offers a completely new way to write, and to think about, UI code. One of its key features is that Compose code is reactive, which is to say it automatically updates in response to state changes. What really makes this feature magic, however, is that there is no explicit “reactive API”. &lt;/p&gt;

&lt;p&gt;This post is part of a series that attempts to explain how Compose does this via its snapshot state system. Stay tuned for the sequel!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h1&gt;

&lt;p&gt;Some time in the 10 years before this post was written in 2021, RxJava became the de facto standard way to write reactive UI code. You would design your APIs around streams (&lt;code&gt;Observable&lt;/code&gt;s) and some infrastructure code would glue streams together and provide other wiring like &lt;a href="https://uber.github.io/AutoDispose/"&gt;automatic subscription management&lt;/a&gt;. Streams could signal events or hold state and notify listeners about changes to that state. Business logic tended to be written as functional transforms on streams (shoutout to &lt;code&gt;flatMap&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;RxJava was a major step up from manually implementing the &lt;a href="https://en.wikipedia.org/wiki/Observer_pattern"&gt;observer pattern&lt;/a&gt; by creating your own &lt;code&gt;Listener&lt;/code&gt; interfaces and all the related boilerplate. Observables support sophisticated error handling and handle all the messy thread-safety details for you. But not &lt;em&gt;all&lt;/em&gt; the grass was greener on the Rx side of the fence. Large apps with many streams can quickly become hard to reason about. APIs were tightly coupled to the reactive libraries, since the only way to express reactivity was to expose stream types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does this stream emit immediately or do I need to provide an initial value?&lt;/li&gt;
&lt;li&gt;How do I combine multiple streams in the right way – &lt;code&gt;combineLatest&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;switchMap&lt;/code&gt;, oh my.&lt;/li&gt;
&lt;li&gt;How do I make a mutable property? I can’t use a Kotlin property because the getter needs to return a stream, but the setter needs to take a single, non-stream value.&lt;/li&gt;
&lt;li&gt;If I need to expose multiple state values, do I combine them into a single stream that emits all values at once or expose multiple streams?&lt;/li&gt;
&lt;li&gt;Do I need to &lt;code&gt;observeOn&lt;/code&gt; or am I already on the right thread?&lt;/li&gt;
&lt;li&gt;How do I integrate all these nice async streams with this one legacy synchronous API?&lt;/li&gt;
&lt;li&gt;How do I provide both async and sync, or push-based streams and pull-based getter APIs, without almost-duplicating methods (&lt;code&gt;val currentTime: Date&lt;/code&gt; vs &lt;code&gt;val times: Observable&amp;lt;Date&amp;gt;&lt;/code&gt;)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Roughly ten years after introducing RxJava into the codebase I work in, &lt;a class="mentioned-user" href="https://dev.to/pyricau"&gt;@pyricau&lt;/a&gt;
 is still &lt;a href="https://dev.to/pyricau/leak-investigation-rx-disposal-race-in-sqldelight-3n06"&gt;finding code&lt;/a&gt; that leaks because it’s not handling subscriptions just right.&lt;/p&gt;

&lt;p&gt;As the industry adopted Kotlin, a lot of codebases started to migrate from RxJava to Flow – a similar stream library built around coroutines. Flows solved some of the problems of RxJava – structured concurrency is a much safer way to manage subscription logic – but a stream is still a stream. While it’s possible to get into the habit of thinking of everything in terms of streams, it’s one more layer of conceptual overhead to learn. It’s not intuitive to a lot of new developers, and even experienced developers get tripped up regularly. If only there were a better way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Consider the following hypothetical implementation of a special button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
    &lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;initialize()&lt;/code&gt; function used in the &lt;code&gt;CounterButton&lt;/code&gt; is not from either classic Android Views &lt;em&gt;or&lt;/em&gt; Compose – for the sake of these examples, it is meant to be called by some glue code elsewhere in the app. If that’s unsatisfyingly vague, you can imagine it could be called from an &lt;code&gt;init&lt;/code&gt; block or &lt;code&gt;onAttachedToWindow&lt;/code&gt;. There is another reason for defining a separate function, which I’ll explain once we get to the Compose content later in the post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Can you tell what the programmer’s intent was? They wanted to make a button that shows the current value of a counter, and when you click the button, the counter is incremented. But this code is very broken. The text is only set once, when the button is initialized, and is never updated. Let’s fix that bug:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
    &lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the text will be updated when the counter is incremented! But let’s say we want to &lt;em&gt;decrement&lt;/em&gt; the value when the user long-presses on the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// …&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value--&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
    &lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;setOnLongClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works, but there’s some duplication. Following, the &lt;a href="https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)"&gt;Rule of Three&lt;/a&gt;, let’s factor the text update out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;updateText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nf"&gt;updateText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;setOnLongClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nf"&gt;updateText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;updateText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, any time this button gets another feature, the developer still has to remember to call updateText. Ideally we’d like to express that the text should be updated whenever the counter value changes. Let’s try using RxJava:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;_value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="err"&gt;—&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscribe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;setOnLongClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks like it works in testing, but turns out we’re leaking that subscription to &lt;code&gt;counter.value&lt;/code&gt; (which we might only realize after shipping this code). There are many ways to solve this, but since this blog post is supposed to be about Compose and not RxJava, I’ll leave that as an exercise for the reader. We’ve managed to keep the intent fairly clear, but the &lt;code&gt;Counter&lt;/code&gt; class has gained some boilerplate and leaves some open questions: What if we want to add another state value to the counter? Do we combine all the state values into a single stream, or expose multiple streams? Let’s try the latter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;_value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="err"&gt;—&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;_label&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_label&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;combineLatest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscribe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; 
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“$&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;setOnLongClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now there’s more boilerplate in &lt;code&gt;CounterButton&lt;/code&gt; – we had to start using RxJava APIs to combine streams, but this can get messy if there are more than a few streams. And although I’ve been specifically referencing RxJava, this problem isn’t unique to that particular library – any library that implements reactive programming via a stream or subscription-based API has the same issues (Project Reactor, Kotlin Flows, etc.). It looks like Android developers are doomed to spend the rest of their days tying streams in knots.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-better-way"&gt;
  &lt;/a&gt;
  A better way
&lt;/h1&gt;

&lt;p&gt;Compose introduces a mechanism for managing state that eliminates the vast majority of boilerplate. Let’s update the above sample to take advantage of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="err"&gt;—&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
    &lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;setOnLongClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks a lot more like the code we started with! The only difference is the introduction of &lt;code&gt;mutableStateOf&lt;/code&gt;, which effectively makes the counter’s properties observable. State values that are managed by things like &lt;code&gt;mutableStateOf&lt;/code&gt; are generally referred to as “snapshot state”, for reasons that I will get into later. There are various types of state that all behave similarly, including &lt;code&gt;mutableStateListOf&lt;/code&gt; and friends, so I will use the term “snapshot state” to refer to this set of concepts.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You may have heard that Compose makes use of a compiler plugin. That is true, however none of the snapshot state infrastructure described here relies on that plugin. It’s all done with regular, vanilla Kotlin. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#snapshot-state-observation"&gt;
  &lt;/a&gt;
  Snapshot state: Observation
&lt;/h2&gt;

&lt;p&gt;Readers familiar with Compose might point out that widgets in Compose aren’t classes, they’re functions, and none of this looks very Compose-y at all. They would be right, but this highlights a great design feature of Compose: the state management infrastructure is completely decoupled from the rest of the “composable” concepts. For example, you could, theoretically, use snapshot state with classic Android &lt;code&gt;View&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;It’s important to note that this isn’t &lt;em&gt;actually&lt;/em&gt; magic, and this code change wouldn’t actually work automatically: it assumes that whatever glue code calls &lt;code&gt;initialize&lt;/code&gt; supports Compose’s state management. Adding the wiring to make &lt;code&gt;initialize&lt;/code&gt; reactive could be as simple as this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;snapshotFlow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launchIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;snapshotFlow&lt;/code&gt; creates a &lt;code&gt;Flow&lt;/code&gt; that executes a lambda, tracks all the snapshot state values that are read inside the lambda, and then re-executes it any time any of those values are changed. The Compose documentation explains in more detail &lt;a href="https://developer.android.com/jetpack/compose/side-effects#snapshotFlow"&gt;here&lt;/a&gt;. It might not be immediately obvious in such a simple example, but this is a huge improvement over the RxJava approach because the code to wire up &lt;code&gt;initialize&lt;/code&gt; only needs to be written once (e.g. in a base class or factory function) and it will automatically work for all code using that infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The logic for “observing” changes to state only needs to exist in shared infrastructure code, not everywhere that wants to read observable values.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The UI code (or whatever other business-specific code you’re writing) doesn’t need to think about how to observe multiple state values, how to manage subscription lifecycles, or any of that other messy stream stuff. We could factor an interface out of &lt;code&gt;Counter&lt;/code&gt; that would declare regular properties, and they would still be observable when backed by snapshot state. &lt;/p&gt;

&lt;p&gt;Composable functions already have this implicit observation logic wired up, which is why code like this would just work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Composable&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;CounterButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Compose compiler wraps the body of this &lt;code&gt;CounterButton&lt;/code&gt; function with code that effectively observes &lt;em&gt;any and all&lt;/em&gt; &lt;code&gt;MutableState&lt;/code&gt;s that happen to be read inside the function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#snapshot-state-thread-safety"&gt;
  &lt;/a&gt;
  Snapshot state: Thread safety
&lt;/h2&gt;

&lt;p&gt;Another advantage of using snapshot state is that it makes it much easier and safer to reason about mutable state across threads. If seeing “mutable state” and “thread” in the same sentence sets off alarm bells, you’ve got good instincts. Mutating state across threads is so hard to do well, and the cause of so many hard-to-reproduce bugs, that many programming languages forbid it. Swift’s new actor library includes thread isolation, following in the footsteps of actor-based languages like Erlang. Dart (the language used by Flutter) uses separate memory spaces for “isolates”, its version of threads. Functional languages like Haskell often brag that they are safe for writing parallel code because all data is deeply immutable. Even in Kotlin, the initial memory model for Kotlin Native requires all objects shared between threads to be “frozen” (i.e. made deeply immutable).&lt;/p&gt;

&lt;p&gt;Compose’s snapshot state mechanism is revolutionary for UI programming in a way because it allows you to work with mutable state in a safe way, across multiple threads, without race conditions. It does this by allowing glue code to control when changes made by one thread are seen by other threads. While not as clear a win as implicit observation, this feature will allow Compose to add parallelism to its execution in the future, without affecting the correctness of code (as long as that code follows the documented best practices, at least).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Jetpack Compose is an incredibly ambitious project that changes many of the ways we think about and write UI code in Kotlin. It allows us to write fully reactive apps with less boilerplate and hopefully less cognitive overhead than we’ve been able to do in the past. Simple, clear code that is easy to read and understand will (usually) just work as intended. In particular, Compose makes mutable state not be scary anymore. I expect this will have a very positive impact on the general quality of Android apps since there are fewer opportunities for hard-to-troubleshoot classes of bugs, and complex behavior is easy to get right. &lt;/p&gt;

&lt;p&gt;Please let me know what you thought in the comments! I know there are questions I haven’t answered.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#digging-deeper"&gt;
  &lt;/a&gt;
  Digging deeper
&lt;/h1&gt;

&lt;p&gt;This post hopefully demonstrated the practical and ergonomic advantages to Compose’s state model, and maybe even sparked some new questions: &lt;em&gt;How&lt;/em&gt; the heck does all this stuff actually work? The answer to that question deserves its own blog post, so stay tuned for a follow-up!&lt;/p&gt;

&lt;p&gt;On the other hand, if you’re just trying to figure out how to use these APIs in your UI code, you might find my &lt;a href="https://dev.to/zachklipp/remember-mutablestateof-a-cheat-sheet-10ma"&gt;cheat sheet on &lt;code&gt;remember { mutableStateOf() }&lt;/code&gt;&lt;/a&gt; useful.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Huge thanks to &lt;a href="https://twitter.com/commonsguy"&gt;Mark Murphy&lt;/a&gt; and &lt;a class="mentioned-user" href="https://dev.to/jossiwolf"&gt;@jossiwolf&lt;/a&gt;
 for helping review and edit this post!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
      <category>compose</category>
    </item>
    <item>
      <title>Sending images and more with Telegram bot</title>
      <author>Rajitha Gunathilake</author>
      <pubDate>Mon, 24 May 2021 17:05:45 +0000</pubDate>
      <link>https://dev.to/rizkyrajitha/sending-images-and-more-with-telegram-bot-4c0h</link>
      <guid>https://dev.to/rizkyrajitha/sending-images-and-more-with-telegram-bot-4c0h</guid>
      <description>&lt;p&gt;Hi everyone,&lt;/p&gt;

&lt;p&gt;This is a follow-up tutorial on my previous tutorial about Sending messages with Telegram bot. make sure you check that before following this tutorial. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rizkyrajitha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MkH1vT_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jnnWRKA1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/247664/bb29688b-6d69-444c-b5fb-d5b4365bb671.jpeg" alt="rizkyrajitha image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rizkyrajitha/get-notifications-with-telegram-bot-537l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Sending messages with Telegram bot&lt;/h2&gt;
      &lt;h3&gt;Rajitha Gunathilake ・ Nov 10 '19 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bots&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#telegram&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#http&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;in the last tutorial, we talked about sending messages, but telegram has a powerful API that allows us to send more than just text messages.&lt;br&gt;
so in this tutorial, we will get to know how to send images with a telegram bot.This procedure is really simple. we need to send a post request to telegram API with our photo as &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is similar to what we used previously, the change is now we are using a different route, and sending form-data with our image attached&lt;/p&gt;

&lt;p&gt;Using the follwoing API endpoint &lt;code&gt;https://api.telegram.org/bot&amp;lt;token&amp;gt;/sendPhoto?chat_id=&amp;lt;group chat id &amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;in &lt;code&gt;multipart form data&lt;/code&gt; attach an image file with the name &lt;code&gt;photo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SCEK2PGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtw5sy35i7i98lhw1dxt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SCEK2PGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtw5sy35i7i98lhw1dxt.png" alt="insomnia send request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and after sending this we can get a response with &lt;code&gt;"ok": true,&lt;/code&gt; and if we look at the chat, we can see that the photo is received. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--arUL9yKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thn7keewwmeigwowwp77.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--arUL9yKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thn7keewwmeigwowwp77.jpeg" alt="chat image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This can also be done programmatically, I will use nodejs to demonstrate in this example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form-data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;readStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createReadStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./image.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;photo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;readStream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`https://api.telegram.org/bot&amp;lt;token&amp;gt;/sendPhoto?chat_id=-&amp;lt;chat id&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we have used &lt;code&gt;node-fetch&lt;/code&gt; package to send the HTTP request from nodejs and &lt;code&gt;form-data&lt;/code&gt; package to append formdata to the request. &lt;/p&gt;

&lt;p&gt;and after running the script we can see that we get &lt;code&gt;"ok": true,&lt;/code&gt; just like before. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t8kulsWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwy5si27likv8ngpi4ut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t8kulsWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwy5si27likv8ngpi4ut.png" alt="bash output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p6DuAaXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn77i05fpfti78fk6ds8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p6DuAaXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn77i05fpfti78fk6ds8.jpeg" alt="chat image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;there are some limits provided by the telegram when using sendPhoto API &lt;br&gt;
"The photo must be at most &lt;strong&gt;10 MB&lt;/strong&gt; in size. The photo's width and height must not exceed &lt;strong&gt;10000&lt;/strong&gt; in total. Width and height ratio must be at most 20".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://core.telegram.org/bots/api#sendphoto"&gt;Telegram API reference sendphoto method&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;we can use &lt;code&gt;sendAudio&lt;/code&gt; just like the last example to send audio files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form-data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;readStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createReadStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./audio.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;audio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;readStream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;audio dev test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// to show as the title in chat&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`https://api.telegram.org/bot&amp;lt;token&amp;gt;/sendAudio?chat_id=-&amp;lt;chat id&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;limits provided by the telegram when using &lt;code&gt;sendAudio&lt;/code&gt; API &lt;/p&gt;

&lt;p&gt;"Your audio must be in the &lt;strong&gt;.MP3&lt;/strong&gt; or &lt;strong&gt;.M4A&lt;/strong&gt; format. On success, the sent Message is returned. Bots can currently send audio files of up to &lt;strong&gt;50 MB&lt;/strong&gt; in size, this limit may be changed in the future."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://core.telegram.org/bots/api#sendaudio"&gt;Telegram API reference sendaudio method&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HFOohtLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7hwg4fanslwnmw2j7yg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HFOohtLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7hwg4fanslwnmw2j7yg.jpeg" alt="audio chat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the list goes on and on for documents, voice messages,animations , videos  etc. you can find all the provided methods in the &lt;a href="https://core.telegram.org/bots/api"&gt;Telegram reference&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading-till-the-end"&gt;
  &lt;/a&gt;
  Thanks for reading till the end 🙌
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#share-your-thoughts-in-the-comments-section"&gt;
  &lt;/a&gt;
  share your thoughts in the comments section.
&lt;/h2&gt;

</description>
      <category>bots</category>
      <category>telegram</category>
      <category>http</category>
    </item>
    <item>
      <title>How to Manage a Winning Tech Team for Your Startup</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 24 May 2021 16:46:51 +0000</pubDate>
      <link>https://dev.to/codesphere/how-to-manage-a-winning-tech-team-for-your-startup-41o0</link>
      <guid>https://dev.to/codesphere/how-to-manage-a-winning-tech-team-for-your-startup-41o0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Regardless of how innovative your idea may be, building and managing a cohesive tech team for your startup lays down the stepping stone to success.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In fact, 23% of failed startups name a poorly constituted team as the main reason why they did not take off.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZqnAr41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvz33swglyve88z4t969.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZqnAr41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvz33swglyve88z4t969.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;At Codesphere, we're trying to provide a much simpler experience compared to today's cloud providers and Kubernetes, while giving the opportunity to ad-hoc code directly in the browser.&lt;br&gt;
In doing so, we have learned a lot about team building and its strategies that can benefit your company in the years to come. &lt;/p&gt;




&lt;p&gt;Here are our five tips for managing your development team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-responsibility-is-a-twoway%C2%A0street"&gt;
  &lt;/a&gt;
  1. Responsibility is a two-way street
&lt;/h3&gt;

&lt;p&gt;Part of the reason many developers choose to work at Startups in the first place is the ability to feel a sense of ownership over the software they are building; They don't want to be micromanaged. Just as importantly, you, as a founder, do not have the time to micromanage them. A strong founder is therefore an expert at delegating responsibility and instilling a sense of ownership in their development team.&lt;/p&gt;

&lt;p&gt;While giving developers this kind of discretion might be scary at first, it ultimately serves to improve the development process. When a developer is given true responsibility, not just for their immediate tasks, but also for the outcome of a particular feature, they have a direct stake in what they create. If done correctly, a developer will not just be building the software for someone else, they will build it with genuine passion and care. The more responsibility you give to a developer, the more responsibility will be returned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-user-is-the-boss-not%C2%A0you"&gt;
  &lt;/a&gt;
  2. The user is the boss, not you
&lt;/h3&gt;

&lt;p&gt;For almost every software project, there is a surplus of work to be done and only a set amount of time and resources to spend on this work. &lt;/p&gt;

&lt;p&gt;A strong founder, therefore, is an expert at prioritizing development tasks. While you should always try to allow developers to work on features that they are passionate about, the work that your team spends time on should always be dictated by the user.&lt;/p&gt;

&lt;p&gt;Are users asking for a particular feature? Is there a bug ruining your user experience? These sorts of questions should guide what development tasks are being prioritized. In addition, creating avenues for your tech team to be in the user's shoes will allow them to create an end-product that truly provides value to the users. &lt;/p&gt;

&lt;p&gt;This can be done in many ways, such as designating time for the team to use the product or bringing user feedback directly to developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-maintain-both-a-shortterm-and-longterm-roadmap-for-the-product%E2%80%8A%E2%80%8Aand-dont-be-afraid-to-adjust%C2%A0it"&gt;
  &lt;/a&gt;
  3. Maintain both a short-term and long-term roadmap for the product - and don't be afraid to adjust it
&lt;/h3&gt;

&lt;p&gt;When your team can see firsthand how their work fits into important product milestones, not only will they be more motivated to reach those milestones, but they will be able to develop their code in a way that is compatible with current and future features. &lt;/p&gt;

&lt;p&gt;In addition, tracking what is being worked on, both in the short and long term, is essential in order for your entire startup's team to work as a cohesive unit.&lt;/p&gt;

&lt;p&gt;Just because you are planning ahead, however, does not mean that you should feel locked in to this roadmap. &lt;/p&gt;

&lt;p&gt;A strong founder is constantly thinking about what their development team should be prioritizing, and that means that sometimes a founder is going to have to adjust this roadmap. When deadlines, markets, and users shift, so too should your roadmap for the product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-implement-workflows-and-frameworks-that-minimize-mistakes-and-allow-you-to%C2%A0scale"&gt;
  &lt;/a&gt;
  4. Implement workflows and frameworks that minimize mistakes and allow you to scale
&lt;/h3&gt;

&lt;p&gt;It is no secret that many developers hate bureaucracy. While your startup may not have the time and resources for project managers and excessive meetings about code standards, a development free for all is going to make you unable to scale and cause you to create software that is prone to bugs. You should implement a workflow from day one to prevent this. Some ways in which we recommend doing this include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pick a tech-stack that minimizes mistakes (We love Typescript at Codesphere!)&lt;/li&gt;
&lt;li&gt;Implement automatic code testing&lt;/li&gt;
&lt;li&gt;Enforce Coding Standards&lt;/li&gt;
&lt;li&gt;Code Reviews&lt;/li&gt;
&lt;li&gt;Require Developers to document their code&lt;/li&gt;
&lt;li&gt;Use Design Documents for features, before, during, and after developing them&lt;/li&gt;
&lt;li&gt;Use project management frameworks and software&lt;/li&gt;
&lt;li&gt;Don't hire people who are not willing to align with your work standards&lt;/li&gt;
&lt;li&gt;Allow the above processes to evolve and improve when needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following these steps allows many bugs to be caught long before they occur, and makes it much easier for your team to go back and work through old code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-promote-collaboration"&gt;
  &lt;/a&gt;
  5. Promote Collaboration
&lt;/h3&gt;

&lt;p&gt;Finally, programming does not have to be a solo endeavor. Collaboration is an essential part of any startup's development team. &lt;/p&gt;

&lt;p&gt;An extra pair of eyes on any codebase can prevent errors, unreadable code, and inefficiencies. No single developer is going to have all the answers, so creating a culture of collaboration is incredibly important to ensure the success of your team.&lt;/p&gt;

&lt;p&gt;Collaboration isn't just important for the health of your software, it's important for the health of your team. Having developers work alone on their tasks only exacerbates the stress of working on a startup. Collaboration can provide the much-needed human connection that writing code too often lacks.&lt;br&gt;
In fact, this collaboration is so important that it shouldn't even be restricted to working on the software itself. &lt;/p&gt;

&lt;p&gt;At Codesphere, we pair all of our new developers with mentors within the company to help them grow professionally, improve their coding skills, and make sure that they are happy and healthy at the company.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>leadership</category>
      <category>ama</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Is there any difference between struct embedding and defining a field with the struct you want to embed?</title>
      <author>Calin Baenen</author>
      <pubDate>Mon, 24 May 2021 16:09:35 +0000</pubDate>
      <link>https://dev.to/baenencalin/is-there-any-difference-between-struct-embedding-and-defining-a-field-with-the-struct-you-want-to-embed-112</link>
      <guid>https://dev.to/baenencalin/is-there-any-difference-between-struct-embedding-and-defining-a-field-with-the-struct-you-want-to-embed-112</guid>
      <description>&lt;p&gt;So I'm looking at &lt;a href="https://eli.thegreenplace.net/2020/embedding-in-go-part-1-structs-in-structs/"&gt;this article on Structure Embedding in GoLang&lt;/a&gt;.&lt;br&gt;
When reading, I came upon this: "Note that the access &lt;code&gt;co.b&lt;/code&gt; is a syntactic convenience; we can also do it more explicitly with &lt;code&gt;co.Base.b&lt;/code&gt;.".&lt;/p&gt;

&lt;p&gt;So if that's just a "syntactic convenience", is structure embedding equal to just adding a field?&lt;br&gt;
E.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Msg&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;==&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Msg&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
Putting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;



&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Msg&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;into &lt;a href="https://code.sololearn.com/go"&gt;SoloLearn's Go playground&lt;/a&gt; that seems to be the case.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
So is there any difference, or am I right about them being the exact same thing?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>beginners</category>
      <category>help</category>
      <category>go</category>
    </item>
  </channel>
</rss>
