<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Easy Conversion Tracking with PropelAuth</title>
      <author>propelauthblog</author>
      <pubDate>Sat, 13 Nov 2021 02:44:41 +0000</pubDate>
      <link>https://dev.to/propelauth/easy-conversion-tracking-with-propelauth-1e83</link>
      <guid>https://dev.to/propelauth/easy-conversion-tracking-with-propelauth-1e83</guid>
      <description>&lt;p&gt;Almost every advertising platform has a concept of "conversion tracking." When someone clicks on your ad, conversion tracking is a way to determine how valuable that click was. Did the user leave after 5 seconds? Did they sign up? Did they buy something?&lt;/p&gt;

&lt;p&gt;By providing answers to those questions to your advertiser, they can tune the ads to get the outcomes you want. Usually this is done by copying some javascript onto your site and triggering events on the actions you want to encourage.&lt;/p&gt;

&lt;p&gt;At &lt;a href="https://www.propelauth.com"&gt;PropelAuth&lt;/a&gt;, we strongly believe that your auth tool should take on as much as possible in order to get you back to building your product. PropelAuth does this by providing a fully configurable, hosted authentication service - complete with a UI, straightforward documentation, and easy to use libraries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9RIW3rwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro5l12p678xioahy1bge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9RIW3rwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro5l12p678xioahy1bge.png" alt="Screenshot of setting up conversion" width="880" height="704"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To further our mission of taking on as much of the work surrounding auth as possible, we're releasing support for signup conversion tracking. If you want your ads to optimize for user signups, just enter the ID supplied by your advertiser, and we handle the rest. From email/password to social signups, we'll automatically trigger the correct event for your advertiser.&lt;/p&gt;

&lt;p&gt;We currently support Google, Reddit, Facebook, and Twitter. Looking for a different advertiser? Let us know at &lt;a href="//mailto:support@propelauth.com"&gt;support@propelauth.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>marketing</category>
      <category>tooling</category>
      <category>startup</category>
      <category>advertising</category>
    </item>
    <item>
      <title>Data Access in F#</title>
      <author>Angel D. Munoz</author>
      <pubDate>Sat, 13 Nov 2021 02:27:40 +0000</pubDate>
      <link>https://dev.to/tunaxor/data-access-in-fsharp-3o6n</link>
      <guid>https://dev.to/tunaxor/data-access-in-fsharp-3o6n</guid>
      <description>&lt;p&gt;Hello there, this is the next entry in Simple Things F#.&lt;/p&gt;

&lt;p&gt;Today we'll talk about Database access. Databases are something we have to use very often after all it is where we store our data most common databases we use are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL Databases&lt;/li&gt;
&lt;li&gt;NoSQL Databases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won't dive deep into the differences between them, rather than that I will focus on how you can access these databases from F# code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As in previous entries I'll be using F# scripts which can be executed with the .NET CLI that comes in the .NET SDK which you can get from here: &lt;a href="https://get.dot.net"&gt;https://get.dot.net&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's review our options for today&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt; - Dapper Wrapper (i.e. anything that MSSQL, PostgreSQL, MySQL supports)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt; - ADO.NET wapper (i.e MSSQL, PostgreSQL, SQLite, MySQL, and others)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AngelMunoz/Mondocks"&gt;Mondocks&lt;/a&gt; - MongoDB DSL for the MongoDB .NET Driver&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will not complicate things and work with simple DB Schemas, and we will be using PostgreSQL since it's a pretty common database used around the world, but please keep in mind these solutions (and others that I will share at the end) work with MSSQL and MySQL as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have docker installed, spin up a postgresql instance&lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d \
 --name my-instance-name \
 -e POSTGRES_PASSWORD=Admin123 \
 -e POSTGRES_USER=admin
 -p 5432:5432 \
 postgres:alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;This will be our little schema, nothing fancy something just to get started with some F# code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;authorId&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;references&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can create the PostgreSQL database using any DB manager you already know. In case you don't have anything available you can use &lt;a href="https://dbeaver.io/"&gt;dbeaver&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you have your database cretated and have the schema in place let's begin with the cool stuff&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dapperfsharp"&gt;
  &lt;/a&gt;
  Dapper.FSharp
&lt;/h2&gt;

&lt;p&gt;If you like ORMs this is going to be a library for you, given that you can map records to tables so using them is seamless, also Dapper.FSharp adds a couple of F# types to make your life easier.&lt;/p&gt;

&lt;p&gt;Let's check what are our F# records going to be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we just did a 1-1 record translation, more complex schemas may differ from what your application is using you can use DTO's or anonymous records to work with these differences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// From F# 5.0 + you can "require" NuGet packages in F# scripts&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Dapper.FSharp"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="c1"&gt;// register our optional F# types&lt;/span&gt;
&lt;span class="nn"&gt;OptionTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// register our tables&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// we can use this function to match tables&lt;/span&gt;
    &lt;span class="c1"&gt;// with different names to our record definitions&lt;/span&gt;
    &lt;span class="n"&gt;table'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inSchema&lt;/span&gt; &lt;span class="s2"&gt;"public"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;
&lt;span class="c1"&gt;/// In normal circunstances you would write&lt;/span&gt;
&lt;span class="c1"&gt;/// `use! conn = new NpgsqlConnection(connString)`&lt;/span&gt;
&lt;span class="c1"&gt;/// but inside F# scripts we're not allowed for top declarations like this,&lt;/span&gt;
&lt;span class="c1"&gt;/// so we use let instead&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Generate two different authors&lt;/span&gt;
&lt;span class="c1"&gt;// one with an optional handle to see how we can deal with null values&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Angel D. Munoz"&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"some@email.com"&lt;/span&gt;
        &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="s2"&gt;"angel_d_munoz"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Misterious Person"&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mistery@email.com"&lt;/span&gt;
        &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// If you were to use ASP.NET core&lt;/span&gt;
&lt;span class="c1"&gt;// you would be running on a task or async method&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// the `!` here indicates that we will wait&lt;/span&gt;
    &lt;span class="c1"&gt;/// for the `InsertAsync` operation to finish&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="c1"&gt;// here's the Dapper.FSharp magical DSL&lt;/span&gt;
        &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt;
            &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;InsertAsync&lt;/span&gt;

    &lt;span class="c1"&gt;/// If all goes well you shoul'd see&lt;/span&gt;
    &lt;span class="c1"&gt;/// `Rows Affected: 2` in tour console&lt;/span&gt;
    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Rows Affected: %i{result}"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we're inside a script hence why we need run it synchronously&lt;/span&gt;
&lt;span class="c1"&gt;// most of the time you don't need this&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you get a message like "warning FS3511: This state machine is not statically compilable." don't worry it is being tracked in &lt;a href="https://github.com/dotnet/fsharp/issues/12038"&gt;https://github.com/dotnet/fsharp/issues/12038&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cool! so far we have inserted two authors to our database from our mapping, now let's bring those folks back&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Dapper.FSharp"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="c1"&gt;// register our optional F# types&lt;/span&gt;
&lt;span class="nn"&gt;OptionTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;table'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inSchema&lt;/span&gt; &lt;span class="s2"&gt;"public"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;allUsers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;selectAll&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SelectAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"Names: "&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;allUsers&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;%s{user.name}"&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;usersWithTwitterHandle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SelectAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"Twitter Handles:"&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;usersWithTwitterHandle&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="c1"&gt;// we use .Value because filter users whose handle is None&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;%s{user.twitter_handle.Value}"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we're inside a script hence why we need run it synchronously&lt;/span&gt;
&lt;span class="c1"&gt;// most of the time you don't need this&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;you should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Names:
  Angel D. Munoz
  Misterious Person
Twitter Handles:
  angel_d_munoz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check the update code, which to be honest is pretty similar, what do we update though? Our Mysterious user doesn't have a twitter handle, so let's add one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Dapper.FSharp"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="c1"&gt;// register our optional F# types&lt;/span&gt;
&lt;span class="nn"&gt;OptionTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// register our tables&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;table'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inSchema&lt;/span&gt; &lt;span class="s2"&gt;"public"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;noHandleUsers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SelectAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// let's try to get the first result from the result set&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;noHandleUsers&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryHead&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="c1"&gt;// if there is one, let's update it&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// partially update the record of the user with&lt;/span&gt;
            &lt;span class="c1"&gt;// the F# record update syntax&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="s2"&gt;"mysterious_fsharper"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                    &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
                    &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;UpdateAsync&lt;/span&gt;

        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Users updated: %i{result}"&lt;/span&gt;
    &lt;span class="c1"&gt;// if we have run this script, our result set will be empty&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"No Users Without handle were Found"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we're inside a script hence why we need run it synchronously&lt;/span&gt;
&lt;span class="c1"&gt;// most of the time you don't need this&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the script is run, we should see&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Users updated: 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And if we run it for a second time we'll see&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No Users Without handle were Found&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And if we run the "select" script we'll should see the &lt;code&gt;mysterious_fsharper&lt;/code&gt; handle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Twitter Handles:
  angel_d_munoz
  mysterious_fsharper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, things have been quite straight forward, but what if you don't like the ORM style? If you like to write SQL like a real programmer (&lt;em&gt;&lt;strong&gt;Which of course, it's sarcasm&lt;/strong&gt;&lt;/em&gt;.) or you simply like to write your SQL queries, let's then take a look at &lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#donald"&gt;
  &lt;/a&gt;
  Donald
&lt;/h2&gt;

&lt;p&gt;Donald can help us to have a 1-1 mapping with our models just like &lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt; but it needs help from our side, it is quite flexible in some aspects and tedious in others let's see how can we add these helpers.&lt;/p&gt;

&lt;p&gt;For the Donald scripts we will modify our &lt;code&gt;Author&lt;/code&gt; and &lt;code&gt;Post&lt;/code&gt; records a little bit, we will add a static function called &lt;code&gt;DataReader&lt;/code&gt; which will take an &lt;code&gt;IDataReader&lt;/code&gt; and return the corresponding record&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Donald"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Data&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Donald&lt;/span&gt;

&lt;span class="c1"&gt;// Same Author model from before&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Add the DataReader&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="c1"&gt;// the reader has some functions that help us map&lt;/span&gt;
        &lt;span class="c1"&gt;// existing columns from the database and their&lt;/span&gt;
        &lt;span class="c1"&gt;// data type to our record, this can be really great&lt;/span&gt;
        &lt;span class="c1"&gt;// when you need to work on a schema you don't own&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;
          &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"email"&lt;/span&gt;
          &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadStringOption&lt;/span&gt; &lt;span class="s2"&gt;"twitter_handle"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// We do the same with the Post record&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"title"&lt;/span&gt;
          &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"content"&lt;/span&gt;
          &lt;span class="n"&gt;authorId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"authorId"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are more patterns you can follow rather than attaching the static function directly to the Record, you could have a &lt;code&gt;module Author = ...&lt;/code&gt; which contains helper functions (like the data reader) but for simplicity we will attach it right there in the record.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt; offers two syntax styles when it comes to creating and manipulating queries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fluent Style&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fluent style is an approach based on piping functions (i.e. using &lt;code&gt;|&amp;gt;&lt;/code&gt;), this is similar to other fluent APIs in other languages like &lt;code&gt;db.newCommand(cmd).setParams(params).execute()&lt;/code&gt; these are common in C#, in the case of F# we do something like that but using individual functions and partial application in some cases&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorsFluent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;conn&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newCommand&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM authors WHERE twitter_handle &amp;lt;&amp;gt; @handle"&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setParams&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"handle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Null&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="nn"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DataReader&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Expression Style&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Expression style, uses what in F# we call &lt;code&gt;Computation Expressions&lt;/code&gt; which you already used with &lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt;! Here's the same previous query with the expression style&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorsExpression&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;dbCommand&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;cmdText&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM authors WHERE twitter_handle &amp;lt;&amp;gt; @handle"&lt;/span&gt;
          &lt;span class="n"&gt;cmdParam&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"handle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Null&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="nn"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DataReader&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They are slightly different and depending on your background one might feel more comfortable than the other Feel free to choose the one you like the best, in my case I will continue the rest of the post with the Expression based one given that we already have some expression based code from &lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt;. Previously we added some authors, let's try to add Posts to those authors with &lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Donald"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Donald&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Data&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;
          &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"email"&lt;/span&gt;
          &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadStringOption&lt;/span&gt; &lt;span class="s2"&gt;"twitter_handle"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"title"&lt;/span&gt;
          &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"content"&lt;/span&gt;
          &lt;span class="n"&gt;authorId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"authorId"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorsResult&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// let's query all of the authors&lt;/span&gt;
    &lt;span class="n"&gt;dbCommand&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;cmdText&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM authors"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="nn"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DataReader&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// authorsResult is a DbResult&amp;lt;Author list&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// that is a helper type&lt;/span&gt;
    &lt;span class="c1"&gt;// which help us successful and failed database operations&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;authorsResult&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="c1"&gt;// if the operation was successful return the authors&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;
    &lt;span class="c1"&gt;// otherwise print to the console what failed&lt;/span&gt;
    &lt;span class="c1"&gt;// and return an empty list&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"%O"&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
        &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;insertCommand&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="s2"&gt;"""INSERT INTO posts(id, title, content, authorId)
     VALUES(@id, @title, @content, @authorId)"""&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;postId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;dbCommand&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cmdText&lt;/span&gt; &lt;span class="n"&gt;insertCommand&lt;/span&gt;

            &lt;span class="n"&gt;cmdParam&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;postId&lt;/span&gt;
                       &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"RandomPost: {postId}"&lt;/span&gt;
                       &lt;span class="s2"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="s2"&gt;"This is an extremely Long Post!..."&lt;/span&gt;
                       &lt;span class="s2"&gt;"authorId"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Inserted post with id: {postId}"&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Failed to insert post with id: {postId}... {err}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point we should have one post for each user in our database you can run it a couple times more to insert other posts if you wish, but I think these scripts show how you can do Database operations with these libraries&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-libraries"&gt;
  &lt;/a&gt;
  Other Libraries
&lt;/h2&gt;

&lt;p&gt;The F# ecosystem has several options that can appeal to developers of all kinds here are a few more that are worth looking at if you're looking for more alternatives&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RepoDB - &lt;a href="https://github.com/mikependon/RepoDB"&gt;https://github.com/mikependon/RepoDB&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RepoDB is a .NET micro ORM Database library that focuses on performance and has compatibility with many adapters&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dusty Tables - &lt;a href="https://github.com/Zaid-Ajaj/DustyTables"&gt;https://github.com/Zaid-Ajaj/DustyTables&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zaid is an F# OSS Beast, Dusty tables is a simple functional wrapper on top of the SqlClient ADO.NET adapter&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Npgsql.FSharp - &lt;a href="https://github.com/Zaid-Ajaj/Npgsql.FSharp"&gt;https://github.com/Zaid-Ajaj/Npgsql.FSharp&lt;/a&gt; , &lt;a href="https://github.com/Zaid-Ajaj/Npgsql.FSharp.Analyzer"&gt;https://github.com/Zaid-Ajaj/Npgsql.FSharp.Analyzer&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zaid once again showing us the F# OSS spirit, this time with Npgsql.FSharp which is a PostgreSQL focused wrapper which has a SQL analyzer that can type verify your queries against your database at compile time!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQLHydra - &lt;a href="https://github.com/JordanMarr/SqlHydra"&gt;https://github.com/JordanMarr/SqlHydra&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SQLHydra provides a CLI experience for record generation from an existing database Schema plus a SQL query builder similar to Dapper.FSharp, this is a more complete solution that works for Postgres, MSSQL and SQLite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-elephant-in-the-room"&gt;
  &lt;/a&gt;
  The elephant in the Room...
&lt;/h3&gt;

&lt;p&gt;EntityFramework has always been unfriendly to F# given how it relies on inheritance and mutability which isn't bad, it is the most used ORM in C# after all but it provides some heavy friction with F#, recently C# added records to the language and even if they are not like F# ones, they can be immutable just like F# ones, so with these Records it might be on a better place but I haven't been able to try it nor have the excitement to test it to be honest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-mondocks"&gt;
  &lt;/a&gt;
  Bonus! Mondocks
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Time for some shameless plug (with some shame)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I know, I Know... .NET is not the most friendly towards mongodb databases given how schemaless it is, and with F# it is even worse! there's a lot of cases where you can have missing properties (which is the same as having a null or even worse some times) but if you control the Database or for some reason you need to interact with Mongo Databases (perhaps because you're migrating from Node.js or similar) I took some time to work out on a DSL that is quite similar to Node's MongoDB query language.&lt;/p&gt;

&lt;p&gt;The approach with Mondocks is somewhat different, with Mondocks ideally you want to work with anonymous records to shape your data and then once you have the information do the mapping to the corresponding Record or DTO&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Mondocks.Net"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: MongoDB.Driver"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;MongoDB&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Driver&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Queries&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Types&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;insertCmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;documents&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
                      &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Angel D. Munoz"&lt;/span&gt;
                      &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"some@email.com"&lt;/span&gt;
                      &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="s2"&gt;"angel_d_munoz"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
                      &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Misterious Person"&lt;/span&gt;
                      &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mistery@email.com"&lt;/span&gt;
                      &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mongodb://192.168.100.5/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"simple_fsharp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InsertResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonCommand&lt;/span&gt; &lt;span class="n"&gt;insertCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Inserted: %i{result.n}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;To do an update it's a similar case, we will fetch the author first then we will update it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Mondocks.Net"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: MongoDB.Driver"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Bson&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Driver&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Queries&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Types&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mongodb://192.168.100.5/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"simple_fsharp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;findCmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;|}&lt;/span&gt;
        &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FindResult&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonCommand&lt;/span&gt; &lt;span class="n"&gt;findCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// check on the database result set if we have an author&lt;/span&gt;
&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstBatch&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryHead&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;updateCmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// query by author _id&lt;/span&gt;
            &lt;span class="n"&gt;updates&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;._&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|}&lt;/span&gt;
                        &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
                          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
                              &lt;span class="c1"&gt;// set the updated handle&lt;/span&gt;
                              &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mysterious_fsharper"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="n"&gt;multi&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt;
                        &lt;span class="n"&gt;upsert&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt;
                        &lt;span class="n"&gt;collation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
                        &lt;span class="n"&gt;arrayFilters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
                        &lt;span class="n"&gt;hint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UpdateResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonCommand&lt;/span&gt; &lt;span class="n"&gt;updateCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Updated: %i{result.n}"&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"No Author was found"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will also see that you lost a lot of safety doing these kinds of queries, given the nature of MongoDB it's hard to keep safety around it overall, however if you come from a dynamic runtime this DSL might feel a little bit more to what you're used to, there are some rough corners but I invite you to try it and log issues, if you're looking for an F# OSS project to dip your toes, it might be a great one :)&lt;/p&gt;

&lt;p&gt;Also, you can use the usual MongoDB Driver as well you can use both side by side to be honest I made it in a way that doesn't require you to jump out from a standard .NET Driver experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts...
&lt;/h2&gt;

&lt;p&gt;When it comes to SQL F# is a safe bet be it on the server, scripts and other environments F# can help you keep type safety between your database and your application, there are plenty of alternatives for you to try and I'm pretty sure you'll find what fits best for you.&lt;/p&gt;

&lt;p&gt;We'll catch ourselves on the next time!&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>sql</category>
      <category>mongodb</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>100 días de código: 10, repasando HTML, creando mas repositorios y comenzando con la hoja de estilos de mi pagina personal.</title>
      <author>Daro</author>
      <pubDate>Sat, 13 Nov 2021 00:43:07 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-10-repasando-html-creando-mas-repositorios-y-comenzando-con-la-hoja-de-estilos-de-mi-pagina-personal-4ij9</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-10-repasando-html-creando-mas-repositorios-y-comenzando-con-la-hoja-de-estilos-de-mi-pagina-personal-4ij9</guid>
      <description>&lt;p&gt;¡Hey, hey, hey!&lt;/p&gt;

&lt;p&gt;Bienvenidos a este nuevo día del reto, hoy es el día en el que comienzo a mejorar mis habilidades de escritura probando touch typing que, de forma muy resumida, consiste en escribir en el teclado lo mas rápido posible.&lt;/p&gt;

&lt;p&gt;Lo hice con ayuda de esta &lt;a href="https://www.typingstudy.com"&gt;guia&lt;/a&gt; y se los recomiendo ya que te permite codificar mas rápido. &lt;br&gt;
Te recomiendo intentarlo aunque tengas una velocidad muy buena.&lt;/p&gt;

&lt;p&gt;También he avanzado en algunas otras cosas que me gustaría contarles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ayer"&gt;
  &lt;/a&gt;
  Ayer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avance hasta la sección de Fundamentos de HTML en &lt;a href="https://www.theodinproject.com/"&gt;The odin Project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Aprendí a agregar una clave ssh a mi cuenta de github.&lt;/li&gt;
&lt;li&gt;Realice una instalación y configuracion de git en linux.&lt;/li&gt;
&lt;li&gt;Cree un proyecto de ejemplo en github y realice cambios.&lt;/li&gt;
&lt;li&gt;Aprendí que la mejor forma de hacer una explicación de los cambios en una confirmación (commit) es escribirlo de forma imperativa.&lt;/li&gt;
&lt;li&gt;Volví a aprender los comandos basicos de linux como &lt;code&gt;pwd&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt; entre otros.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avance hasta la sección &lt;code&gt;Project recipes&lt;/code&gt; del capitulo &lt;strong&gt;HTML foundations&lt;/strong&gt; de la guia &lt;a href="https://www.theodinproject.com/"&gt;The odin Project&lt;/a&gt; con lo cual ya realice mi objetivo de spring semanal.&lt;/li&gt;
&lt;li&gt;Cree unos cuantos repositorios para los proyectos que voy realizando en la guia.&lt;/li&gt;
&lt;li&gt;Comencé a codificar los estilos principales de mi pagina web.&lt;/li&gt;
&lt;li&gt;Repase las etiquetas de html. (se los recomiendo porque yo ya no recordaba algunas)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ademas encontré &lt;a href="https://www.befunky.com/es/crear/editor-de-fotos/"&gt;este&lt;/a&gt; editor de fotos online que es bastante interesante y &lt;a href="https://comprimir-video.convertir-pdf.com/"&gt;este&lt;/a&gt; compresor de vídeo. &lt;/p&gt;

&lt;p&gt;¿Debería de hacer una guia de todas las herramientas que utilizo en el día a día? Quizás...&lt;/p&gt;

&lt;p&gt;¡Y eso es todo por hoy! Espero que les vaya super bien con sus proyectos y animo.&lt;br&gt;
Adiós mundo!&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>html</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Day 7 of #100daysofcode: General Progress and Competitive Programming</title>
      <author>Ryan Whelchel</author>
      <pubDate>Sat, 13 Nov 2021 00:09:35 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-7-of-100daysofcode-general-progress-and-competitive-programming-fo9</link>
      <guid>https://dev.to/rydwhelchel/day-7-of-100daysofcode-general-progress-and-competitive-programming-fo9</guid>
      <description>&lt;p&gt;Between Competitive Programming, talking with my professors, planning my next semester, working on my resume and working on my project I had a very full day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#competitive-programming"&gt;
  &lt;/a&gt;
  Competitive Programming
&lt;/h2&gt;

&lt;p&gt;I participated in my first competitive programming event today and had a lot of fun. I was the senior in my team, so I took the lead and helped coach my team through some of the problems. One of the members of my team had very little coding experience, so it was cool to show him the ropes on how to approach some of these problems and to show him some of the common problem patterns you'd run into. He was pretty excited about using Dictionaries to count duplicates so that was fun.&lt;/p&gt;

&lt;p&gt;Everybody in the team were familiar with different languages, so I thought it would be best to use Python as it is fairly simple to understand. That seemed to work very well, and I was able to bust out some of the Python-tech that I've learned over the years, namely list comprehension and f-strings. &lt;/p&gt;

&lt;p&gt;We placed a little above middle of the pack, but we were happy with how we did and I feel like everyone walked away today better programmers.&lt;/p&gt;

&lt;p&gt;In the future, I would like to participate in an even more competitive scenario where you compete for a prize with randomly selected teams. I think that would be really fun.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;I made a lot of progress today. I spent more time with React-bootstrap and decided on which components I am going to use in my page. In addition, I modified the CSS layout and fixed some code modularity problems I had with my Flask server. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;I'm going to continue working on my project. I hope I will have some what of a final product to show off tomorrow. Don't be too harsh on the design; I never claimed to be a good designer!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm Struggling on
&lt;/h2&gt;

&lt;p&gt;I'm still finding some trouble on how to use Flexbox in conjunction with Grid. As I understand it, they're both made much more powerful when you use them in conjunction, so I'm trying to force myself to use them together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=RhUuMl3R1PE"&gt;CSS Grid Tutorial - Dev Dreamer&lt;/a&gt; &lt;br&gt;
&lt;a href="https://react-bootstrap.github.io/components/"&gt;React-Bootstrap Components&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Betterer v5.0.0</title>
      <author>Craig ☠️💀👻</author>
      <pubDate>Sat, 13 Nov 2021 00:06:54 +0000</pubDate>
      <link>https://dev.to/phenomnominal/betterer-v500-5-4518</link>
      <guid>https://dev.to/phenomnominal/betterer-v500-5-4518</guid>
      <description>&lt;p&gt;Oof, this one feels like it's been a while coming, but after a whole bunch of work, and a whole bunch of breaking changes &lt;strong&gt;I've just released&lt;/strong&gt; &lt;a href="https://www.npmjs.com/package/@betterer/cli"&gt;&lt;strong&gt;v5.0.0&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;of&lt;/strong&gt; &lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;&lt;strong&gt;Betterer!&lt;/strong&gt;&lt;/a&gt; 🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-betterer"&gt;
  &lt;/a&gt;
  What is &lt;strong&gt;Betterer&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;&lt;strong&gt;Betterer&lt;/strong&gt;&lt;/a&gt; is a test runner that helps make incremental improvements to your code!&lt;/p&gt;

&lt;p&gt;The first time &lt;strong&gt;Betterer&lt;/strong&gt; it runs a test, it will take a snapshot of the current state. From that point on, whenever it runs it will compare against that snapshot. It will either throw an error (if the test got worse ❌), or update the snapshot (if the test got better ✅). That's pretty much it!&lt;/p&gt;

&lt;p&gt;You can check out the (newly updated!) documentation at &lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;https://phenomnomnominal.github.io/betterer/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happened-to-v2-v3-v4"&gt;
  &lt;/a&gt;
  What happened to v2, v3, v4...?
&lt;/h2&gt;

&lt;p&gt;"But Craig", I hear you say, "The &lt;a href="https://dev.to/phenomnominal/betterer-v1-0-0-301b"&gt;last time you posted about &lt;strong&gt;Betterer&lt;/strong&gt;&lt;/a&gt;, it was at v1.0.0!? What's been going on?!". 🔥🔥🔥&lt;/p&gt;

&lt;p&gt;That's very astute of you dear reader, and let's just put it this way - I sure do love breaking APIs! One of the interesting things about &lt;strong&gt;Betterer&lt;/strong&gt; is that it is a tool designed for problems that emerge in large and old codebases. That means it has to be able to handle large and old codebases from the get go! So I've had a lot of fun as I've tried to figure out the best workflows and APIs for using &lt;strong&gt;Betterer&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Between v1.0.0 and now, I've released a bunch of features, consolidated and simplified APIs, and just generally made &lt;strong&gt;Betterer&lt;/strong&gt; more usable and flexible. I'm pretty happy with where it is at now, so I figured it was about time for an update. I've even been talking about it at a few conferences now that they're coming back! What a world 🌍!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-v500"&gt;
  &lt;/a&gt;
  What's in v5.0.0?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#parallel-tests"&gt;
  &lt;/a&gt;
  Parallel tests:
&lt;/h3&gt;

&lt;p&gt;Performance is hard. Prior to v5, the default &lt;strong&gt;Betterer&lt;/strong&gt; reporter would struggle pretty badly, especially when lots of tests were running and producing lots of issues. That was because the main thread was responsible for updating the reporter output &lt;em&gt;and&lt;/em&gt; running all the tests.&lt;/p&gt;

&lt;p&gt;To fix this, &lt;strong&gt;Betterer&lt;/strong&gt; will now execute all your tests using &lt;a href="https://nodejs.org/api/worker_threads.html"&gt;Node.js Worker Threads&lt;/a&gt;! That frees up the main thread to focus on rendering and also means that multiple tests can run at the same time. Getting this to work required breaking some APIs, so your &lt;a href="https://phenomnomnominal.github.io/betterer/docs/test-definition-file"&gt;test definition file&lt;/a&gt; needs to change:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .betterer.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/betterer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// ... test config&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my other test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// ... test config&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .betterer.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/betterer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="c1"&gt;// ... test config&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my other test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="c1"&gt;// ... test config&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But never fear, you can use the &lt;code&gt;betterer upgrade&lt;/code&gt; command to do this migration for you! Just running &lt;code&gt;betterer upgrade&lt;/code&gt; will show you what the migration will look like, and &lt;code&gt;betterer upgrade --save&lt;/code&gt; will actually update your files. Easy ✨. The &lt;code&gt;betterer upgrade&lt;/code&gt; command will be used in the future when I (most probably) break more stuff.&lt;/p&gt;

&lt;p&gt;Check out the &lt;strong&gt;beast&lt;/strong&gt; of a PR &lt;a href="https://github.com/phenomnomnominal/betterer/pull/815"&gt;here&lt;/a&gt; (and yes, it took me three branches to get it right 😅)&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#betterer-angular"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Betterer&lt;/strong&gt; ❤️ &lt;strong&gt;Angular&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I've published a new &lt;strong&gt;Betterer&lt;/strong&gt; test for incrementally adding &lt;a href="https://angular.io/guide/angular-compiler-options"&gt;&lt;strong&gt;Angular&lt;/strong&gt; compiler configuration&lt;/a&gt; to a project! I'm pretty excited by this, as there are a lot of &lt;em&gt;big&lt;/em&gt; Angular codebases out there that don't utilise the full power of the Angular compiler. In particular, I think &lt;strong&gt;Betterer&lt;/strong&gt; could be a good way to introduce the &lt;a href="https://angular.io/guide/template-typecheck#strict-mode"&gt;&lt;code&gt;strictTemplates&lt;/code&gt;&lt;/a&gt; option. You can now do that with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//.betterer.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/angular&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;strict templates&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./tsconfig.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;strictTemplates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/**/*.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/**/*.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Expect to see a full post detailing this in the near future!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#simpler-raw-bettererfiletest-endraw-"&gt;
  &lt;/a&gt;
  Simpler &lt;code&gt;BettererFileTest&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;The old &lt;code&gt;BettererFileTest&lt;/code&gt; API was a bit clunky and confusing due to the &lt;code&gt;BettererFileResolver&lt;/code&gt; thing. I've hidden that away in the internals, so now the public API is less clunky and confusing:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BettererFileResolver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BettererFileTest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/betterer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFileTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererFileResolver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererFileTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filePaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileTestResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// test implementation...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BettererFileTest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/betterer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFileTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererFileTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filePaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileTestResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// test implementation...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Smaller public API, less magic, and you only have to use it if you know why, choice! 👍&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#improved-workflow"&gt;
  &lt;/a&gt;
  Improved workflow:
&lt;/h3&gt;

&lt;p&gt;I'm still working on figuring out the ideal &lt;strong&gt;Betterer&lt;/strong&gt; workflow. For now, I recommend running &lt;strong&gt;Betterer&lt;/strong&gt; in &lt;a href="https://phenomnomnominal.github.io/betterer/docs/running-betterer#pre-commit-mode"&gt;Pre-commit mode&lt;/a&gt; as a pre-commit hook (perhaps using &lt;a href="https://typicode.github.io/husky"&gt;husky&lt;/a&gt; and &lt;a href="https://github.com/okonet/lint-staged"&gt;lint-staged&lt;/a&gt;) and in &lt;a href="https://phenomnomnominal.github.io/betterer/docs/running-betterer#ci-mode"&gt;CI mode&lt;/a&gt; on your build server.&lt;/p&gt;

&lt;p&gt;But one thing about &lt;strong&gt;chonky&lt;/strong&gt; codebases is that they often have &lt;em&gt;lots&lt;/em&gt; of contributors! Lots of contributors making changes (and making things better) means that 👻 &lt;em&gt;merge&lt;/em&gt; &lt;em&gt;conflicts&lt;/em&gt; 👻 in the &lt;a href="https://phenomnomnominal.github.io/betterer/docs/results-file"&gt;results file&lt;/a&gt; are quite common!&lt;/p&gt;

&lt;p&gt;To try to help with resolving merge conflicts, I've introduced the &lt;code&gt;betterer merge&lt;/code&gt; command. You can still fix merge conflicts manually, but &lt;code&gt;betterer merge&lt;/code&gt; will do it for you! If you're as lazy as me, you can even enable &lt;code&gt;automerge&lt;/code&gt; and you'll never have to think about merging the results file ever again (I hope, this could still be buggy 🐛😅.&lt;/p&gt;

&lt;p&gt;To enable automerge run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;betterer init &lt;span class="nt"&gt;--automerge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#improved-caching"&gt;
  &lt;/a&gt;
  Improved caching:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Betterer&lt;/strong&gt; got some cool (ish) &lt;a href="https://phenomnomnominal.github.io/betterer/docs/cache"&gt;caching&lt;/a&gt; implemented in v4, but turns out caching is a hard problem (😅), so it's &lt;a href="https://github.com/phenomnomnominal/betterer/pull/712"&gt;taken&lt;/a&gt; &lt;a href="https://github.com/phenomnomnominal/betterer/pull/746/files"&gt;a&lt;/a&gt; &lt;a href="https://github.com/phenomnomnominal/betterer/pull/819/files"&gt;little&lt;/a&gt; bit to get right. &lt;/p&gt;

&lt;p&gt;It works by passing the &lt;code&gt;--cache&lt;/code&gt; flag when running &lt;strong&gt;Betterer&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;betterer &lt;span class="nt"&gt;--cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will create a file something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"testCache"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"no hack comments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"packages/angular/src/angular.ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"b66de728222febdecb3cf11d3aa510b3a8a6ae0e37c0539e37787964573a56ad1b7eb6ee378a9087"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"packages/angular/src/index.ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"b66de728222febdecb3cf11d3aa510b3a8a6ae0eb9494122f82a750085fc20d2c3b0f14b34897431"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"packages/betterer/src/betterer.ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"b66de728222febdecb3cf11d3aa510b3a8a6ae0e94efcd2f99a4cf14222c400693335ac1b94696bb"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Betterer&lt;/strong&gt; will use this cache to only re-test files that have actually changes, so it can be &lt;em&gt;much&lt;/em&gt; faster (useful for running on &lt;a href="https://phenomnomnominal.github.io/betterer/docs/running-betterer#pre-commit-mode"&gt;pre-commit&lt;/a&gt;!) I suspect there are still issues here, so please try it out and create issues. 🙌&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#bug-fixes-and-improvements"&gt;
  &lt;/a&gt;
  Bug fixes and improvements:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/phenomnomnominal/betterer/pull/828/files"&gt;&lt;code&gt;betterer results&lt;/code&gt;&lt;/a&gt; command to get a quick summary:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kj2DFq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvzavtxwithpzxge39ut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kj2DFq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvzavtxwithpzxge39ut.png" alt="An example of Betterer's results summary output" width="880" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/phenomnomnominal/betterer/issues/831"&gt;Negative filters&lt;/a&gt;. I already suspect I'll regret this, but you can now use &lt;code&gt;"!"&lt;/code&gt; at the start of a filter to negate it. Now &lt;code&gt;--filter myTest&lt;/code&gt; will just run &lt;code&gt;"myTest"&lt;/code&gt;, and &lt;code&gt;--filter !myTest&lt;/code&gt; will run every other test.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rewrote most of the &lt;a href="https://phenomnomnominal.github.io/betterer/docs/index"&gt;public API docs&lt;/a&gt;. These are now generated from the code, so should &lt;em&gt;hopefully&lt;/em&gt; be easier to keep up to date. 🤞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed a bunch of stuff from the public API. This means more consistency, and I'll be less likely to accidentally break stuff in the future. 😇&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks ❤️
&lt;/h2&gt;

&lt;p&gt;Huge thanks to everyone who has helped me with this stuff, if you've read my &lt;a href="https://twitter.com/phenomnominal/status/1453511720098541569"&gt;rambling, cryptic tweets&lt;/a&gt;, opened &lt;a href="https://github.com/phenomnomnominal/betterer"&gt;issues on Github&lt;/a&gt;, chatted to me about &lt;strong&gt;Betterer&lt;/strong&gt; at conferences, it's all meant a lot! Maybe I'll print some stickers or something? ☀️&lt;/p&gt;

&lt;p&gt;Love 🥰 this? Hate 🤬 this? Go off in the comments, DM me on Twitter, or be the &lt;strong&gt;third&lt;/strong&gt; person to join the &lt;a href="https://discord.com/invite/YNgtXt6QVX"&gt;&lt;strong&gt;Betterer&lt;/strong&gt; Discord&lt;/a&gt;. Catch you on the line 💻!&lt;/p&gt;

</description>
      <category>incremental</category>
      <category>improvement</category>
      <category>betterer</category>
      <category>release</category>
    </item>
    <item>
      <title>Resources to help you practice web development</title>
      <author>Cess</author>
      <pubDate>Sat, 13 Nov 2021 00:05:00 +0000</pubDate>
      <link>https://dev.to/cesscode/resources-to-help-you-practice-web-development-e35</link>
      <guid>https://dev.to/cesscode/resources-to-help-you-practice-web-development-e35</guid>
      <description>&lt;p&gt;Hello everyone! 💙&lt;/p&gt;

&lt;p&gt;I remember once reading somewhere that the best way to be good at web development is to practice consistently. In order to practice, you need challenges and ideas for side projects.&lt;/p&gt;

&lt;p&gt;In this blog post, I have compiled a list of websites that provides more challenges and ideas for us to practice web development.&lt;/p&gt;

&lt;p&gt;let's get started 💃&lt;/p&gt;

&lt;p&gt;1.&lt;br&gt;
&lt;strong&gt;FrontendMentor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Solve real-world HTML, CSS, and JavaScript challenges whilst working on professional designs. Build projects, review code, and help each other get better.&lt;/p&gt;

&lt;p&gt;Once you've completed your project, you can submit it for review and criticism.  You can also review the works of other developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3jhnCrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636675054152/qkmNANTXi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3jhnCrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636675054152/qkmNANTXi.png" alt="frame_chrome_mac_dark (4).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Frontendmentor website [&lt;a href="https://www.frontendmentor.io/"&gt;https://www.frontendmentor.io/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
&lt;strong&gt;Codewel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Improve your HTML and CSS skills by practicing on real design templates.&lt;/p&gt;

&lt;p&gt;Once you've completed your project, submit it to receive feedback on your solutions. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wu-3Vs_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636673454403/Z3S9y8apJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wu-3Vs_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636673454403/Z3S9y8apJ.png" alt="frame_chrome_mac_dark.png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Codewell website [&lt;a href="https://www.codewell.cc/"&gt;https://www.codewell.cc/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;3.&lt;br&gt;
&lt;strong&gt;Coderbyte&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Helps you improve your coding with  Algorithm, front-end, back-end, and database challenges. it also provides real-world interview kits to help you prepare &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EYE49TV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636674186844/fcgJGKteB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EYE49TV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636674186844/fcgJGKteB.png" alt="frame_chrome_mac_dark (2).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Coderbyte website [&lt;a href="https://coderbyte.com/"&gt;https://coderbyte.com/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;4.&lt;br&gt;
&lt;strong&gt;Freecodecamp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FreeCodeCamp is an online learning platform that helps you learn and build projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hZ8-tEsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636673840895/_bxMCBLTBf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZ8-tEsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636673840895/_bxMCBLTBf.png" alt="frame_chrome_mac_dark (1).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Freecodecamp website [&lt;a href="https://www.freecodecamp.org/"&gt;https://www.freecodecamp.org/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;5.&lt;br&gt;
&lt;strong&gt;Codepen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Weekly challenges for building things to level up your talents.  Enroll in them and get picked and featured on the homepage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ud6JE2xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636674807264/VFHK2EMd5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ud6JE2xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636674807264/VFHK2EMd5.png" alt="frame_chrome_mac_dark (3).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to codepen website [&lt;a href="https://codepen.io/challenges"&gt;https://codepen.io/challenges&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;6.&lt;br&gt;
&lt;strong&gt;JavaScript30&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;30 Day Vanilla JS Coding Challenge. Build 30 things in 30 days with 30 tutorials. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sRsHBlgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636675225633/S6qygaO8X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sRsHBlgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636675225633/S6qygaO8X.png" alt="frame_chrome_mac_dark (5).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Javascript30 website [&lt;a href="https://codepen.io/challenges"&gt;https://codepen.io/challenges&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;7.&lt;br&gt;
&lt;strong&gt;JavaScript Quiz&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check your knowledge by having fun with javascript questions. Detailed explanations included.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DCvyVzTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636675696753/CpHfwenkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DCvyVzTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636675696753/CpHfwenkd.png" alt="frame_chrome_mac_dark (6).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Javascript quiz website [&lt;a href="https://javascriptquiz.com/"&gt;https://javascriptquiz.com/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;8.&lt;br&gt;
&lt;strong&gt;Devchallenges&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Enroll in awesome challenges and boost your skills by solving and building websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QSFZfw9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676129090/UsQPzsx_b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QSFZfw9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676129090/UsQPzsx_b.png" alt="frame_chrome_mac_dark (7).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Devchallenges website [&lt;a href="https://devchallenges.io/"&gt;https://devchallenges.io/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;9.&lt;br&gt;
&lt;strong&gt;Codewars&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Improve your development skills by training with your peers using coding challenges&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dP3ngnt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676381060/Jg7NeEI4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dP3ngnt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676381060/Jg7NeEI4h.png" alt="frame_chrome_mac_dark (8).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Codewars website [&lt;a href="https://www.codewars.com/"&gt;https://www.codewars.com/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;10.&lt;br&gt;
&lt;strong&gt;frontendpractice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Take your frontend skills to the next level by recreating real websites&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5SaPTo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676663049/TZzrnOxW9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5SaPTo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676663049/TZzrnOxW9.png" alt="frame_chrome_mac_dark (9).png" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to frontend practice website [&lt;a href="https://www.frontendpractice.com/"&gt;https://www.frontendpractice.com/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;11.&lt;br&gt;
&lt;strong&gt;Cssbattle&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Challenge yourself in building different shapes with CSS and level your skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u_-dOCVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676903295/DxklY1kot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_-dOCVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676903295/DxklY1kot.png" alt="frame_chrome_mac_dark (10).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to CSS battle website [&lt;a href="https://cssbattle.dev/"&gt;https://cssbattle.dev/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;12.&lt;br&gt;
&lt;strong&gt;100dayscss&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Build something great for 100 days and take your CSS skills to next level. New challenges every day.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjJv1__5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636677079007/_iF0EiXqd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjJv1__5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636677079007/_iF0EiXqd.png" alt="frame_chrome_mac_dark (11).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to 100daysCSS  website [&lt;a href="https://100dayscss.com/"&gt;https://100dayscss.com/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;13.&lt;br&gt;
&lt;strong&gt;Codementor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Improve your programming skills by working on real-world projects. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJ83_cVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636756188730/wNJ7ZElL3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJ83_cVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636756188730/wNJ7ZElL3.png" alt="frame_chrome_mac_dark.png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Codementor  website [ &lt;a href="https://www.codementor.io/projects"&gt;https://www.codementor.io/projects&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;14.&lt;br&gt;
&lt;strong&gt;Daily UI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Daily UI helps you Become a Better Designer in 100 Days by working on different challenges&lt;/p&gt;

&lt;p&gt;Once you've completed your project, you can post it on dribble or Behance for review and criticism. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d0l4o2Fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636756683612/xWO1pAmkD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d0l4o2Fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636756683612/xWO1pAmkD.png" alt="frame_chrome_mac_dark (1).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Daily UI  website [&lt;a href="https://www.dailyui.co/"&gt;https://www.dailyui.co/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;15.&lt;br&gt;
&lt;strong&gt;Codier&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Explore and attempt front-end coding challenges. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J9tylPse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636756942231/-zI8cqNp4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J9tylPse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636756942231/-zI8cqNp4.png" alt="frame_chrome_mac_dark (2).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to codier  website [ &lt;a href="https://codier.io/"&gt;https://codier.io/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;16.&lt;br&gt;
&lt;strong&gt;Ace Frontend&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ace Front End has complete and practical coding challenges, with a detailed walk-through of a perfect interview solution. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F0oqF_c5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636757293057/pqpD5NXKd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0oqF_c5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636757293057/pqpD5NXKd.png" alt="frame_chrome_mac_dark (3).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Ace Frontend  website [&lt;a href="https://www.acefrontend.com/"&gt;https://www.acefrontend.com/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;17.&lt;br&gt;
&lt;strong&gt;Exercism&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercism&lt;/strong&gt; helps you develop fluency in 55 programming languages. It also provides fun coding exercises that build your understanding of concepts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4S9CDrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636757708063/TdquWWSyv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4S9CDrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636757708063/TdquWWSyv.png" alt="frame_chrome_mac_dark (4).png" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to  Exercism website [&lt;a href="https://exercism.org/"&gt;https://exercism.org/&lt;/a&gt;]  &lt;/p&gt;

&lt;p&gt;18.&lt;br&gt;
&lt;strong&gt;Fun Javascript&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;A FREE series of fun Javascript, HTML &amp;amp; CSS projects. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dzdwt0kd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636757976987/r0Sdj80WW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dzdwt0kd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636757976987/r0Sdj80WW.png" alt="frame_chrome_mac_dark (5).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to fun Javascript  website [&lt;a href="https://fun-javascriptprojects.com/"&gt;https://fun-javascriptprojects.com/&lt;/a&gt;] &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CONCLUSION&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As a rookie web developer, the websites listed above will make your life easier. If you have any questions or know of any other websites that you use for project practice,  Post about it in the comment below and I'll be pleased to respond to each and every one.&lt;/p&gt;

&lt;p&gt;If you found this article helpful, please like and share it 💙.&lt;/p&gt;

&lt;p&gt;That's all for today! 😁 You reached the end of the article 😍.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>SOLID</title>
      <author>Mauro de Carvalho</author>
      <pubDate>Sat, 13 Nov 2021 00:03:15 +0000</pubDate>
      <link>https://dev.to/mdcg/solid-2de</link>
      <guid>https://dev.to/mdcg/solid-2de</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução
&lt;/h2&gt;

&lt;p&gt;Recentemente estava buscando ampliar um pouco o meu conhecimento no desenvolvimento back-end, e me deparei com um projeto super legal chamado &lt;strong&gt;Web Developer Roadmap 2021&lt;/strong&gt;, criado por Kamran Ahmed. Basicamente, este estipula alguns “caminhos” a se seguir para você iniciar/melhorar o seu conhecimento acerca do desenvolvimento front-end, back-end e devOps. Vale a pena dar uma conferida se você, assim como eu, tem uma certa dificuldade, dada a grande variedade de tecnologias existentes, de saber onde focar seus estudos.&lt;/p&gt;

&lt;p&gt;Na introdução deste roadmap, existe uma lista de noções/tecnologias/metodologias a serem entendidas independente do caminho que você for seguir. Alguns deles eu já domino, como Git, uso básico do terminal, estruturas de dados e licenças. Porém, ainda não me sinto confortável com os demais “requisitos” listados nesta introdução, por isso, irei documentar aqui no Dev.to um pouco dos meus estudos acerca deles.&lt;/p&gt;

&lt;p&gt;Vale ressaltar que talvez essa publicação não seja o suficiente para você se aprofundar no tema-chave (indicado pelo título). Porém, ainda assim vale a leitura, já que talvez a minha visão possa agregar um pouco nos seus conhecimentos em relação ao assunto. Então sem mais delongas, vamos iniciar o nosso assunto sobre SOLID!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9"&gt;
  &lt;/a&gt;
  O que é?
&lt;/h2&gt;

&lt;p&gt;Basicamente, &lt;strong&gt;SOLID&lt;/strong&gt; é um acrônimo criado por Michael Feathers para &lt;strong&gt;cinco princípios&lt;/strong&gt; de design na programação orientada a objetos, com o intuito de criar projetos de software mais compreensíveis, flexíveis e manuteníveis. São eles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Single Responsibility Principle - SRP&lt;/em&gt;&lt;/strong&gt; (Princípio da responsabilidade única)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Open Closed Principle - OCP&lt;/em&gt;&lt;/strong&gt; (Princípio do aberto/fechado)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Liskov Substitution Principle - LSP&lt;/em&gt;&lt;/strong&gt; (Princípio da substituição de Liskov)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Interface Segregation Principle - ISP&lt;/em&gt;&lt;/strong&gt; (Princípio da segregação de interfaces)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Dependency Inversion Principle - DIP&lt;/em&gt;&lt;/strong&gt; (Princípio da inversão de dependência)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#o-primeiro-princ%C3%ADpio-srp"&gt;
  &lt;/a&gt;
  O primeiro princípio: SRP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“uma classe deve ter apenas uma única responsabilidade.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A descrição mais clara e formal deste princípio diz que &lt;strong&gt;a classe deve ter uma, e apenas uma, razão para mudar&lt;/strong&gt;. Em outras palavras, poderíamos dizer que uma classe deve ser especializada em um único objetivo dentro do software, ou seja, ela deve executar/desempenhar uma única tarefa/ação. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-segundo-princ%C3%ADpio-ocp"&gt;
  &lt;/a&gt;
  O segundo princípio: OCP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;"entidades de software devem ser abertas para extensão, mas fechadas para modificação."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Em resumo, para termos classes ainda mais coesas e de fácil evolução, elas devem ser modeladas de modo que quando houver mudanças nas regras de negócios, que não haja a necessidade de alteração no código original, mas sim que o comportamento deste possa ser estendido com facilidade.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-terceiro-princ%C3%ADpio-lsp"&gt;
  &lt;/a&gt;
  O terceiro princípio: LSP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“objetos em um programa devem ser substituíveis por instâncias de seus subtipos, sem alterar a funcionalidade do programa.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O princípio de substituição de Liskov leva esse nome por ter sido criado por &lt;strong&gt;Barbara Liskov&lt;/strong&gt; que introduziu este conceito em uma conferência em 1987 e, posteriormente, em 1994 no artigo &lt;strong&gt;&lt;em&gt;Family Values: A behavioral Notion of Subtyping&lt;/em&gt;&lt;/strong&gt; juntamente com Jeannette Wing. A definição original desse princípio, de forma resumida, é a seguinte:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Se q(x) é uma propriedade demonstrável dos objetos x de tipo T. Então q(y) deve ser verdadeiro para objetos y de tipo S onde S é um subtipo de T.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Em outras palavras, toda e qualquer classe derivada deve poder ser usada como se fosse a classe base. Este princípio tem algo bem parecido com a &lt;em&gt;metodologia do projeto por contrato&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Precondições não podem ser reforçadas em uma sub-classe. Isto significa que não é permitida uma sub-classe com precondições mais fortes que a sua super-classe;&lt;/li&gt;
&lt;li&gt;Pós-condições não podem ser enfraquecidas em uma sub-classe. Isto significa que não é permitida uma sub-classe que contém condições posteriores mais fracas que a super-classe.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#o-quarto-princ%C3%ADpio-isp"&gt;
  &lt;/a&gt;
  O quarto princípio: ISP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“muitas interfaces de clientes específicas, são melhores do que uma para todos propósitos.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Esse é um princípio um pouco mais simples que os anteriores. Em resumo, basicamente ele diz que é melhor criar interfaces mais específicas ao invés de uma única interface genérica. Uma classe não deve ser forçada a implementar interfaces e métodos que não irão utilizar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-quinto-princ%C3%ADpio-dip"&gt;
  &lt;/a&gt;
  O quinto princípio: DIP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“deve-se depender de abstrações, não de objetos concretos.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;De acordo com &lt;strong&gt;Robert Martin&lt;/strong&gt; (Uncle Bob), este princípio pode ser definido da seguinte forma:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Módulos de alto nível não devem depender de módulos de baixo nível. Ambos devem depender da abstração;&lt;/li&gt;
&lt;li&gt;Abstrações não devem depender de detalhes. Detalhes devem depender de abstrações.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Abstrações tendem a ser estáveis, já as implementações, instáveis. Caso uma classe qualquer precise depender de outro módulo, seria interessante que esta seja uma abstração. Tente ao máximo não depender de outras implementações.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; Não confunda &lt;strong&gt;Inversão de dependência&lt;/strong&gt; com &lt;strong&gt;Injeção de dependência&lt;/strong&gt;. São duas coisas diferentes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Como dito anteriormente, esse é um resumo bem superficial e talvez não seja o suficiente para você se aprofundar no assunto. Contudo, deixo aqui a recomendação de um livro muito bom que abriu muito a minha mente sobre SOLID:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Orientação a Objetos e SOLID para Ninjas&lt;/strong&gt; - &lt;em&gt;Projetando classes flexíveis&lt;/em&gt;, de Mauricio Aniche. Você pode adquirir esse livro clicando &lt;a href="https://www.casadocodigo.com.br/products/livro-oo-solid"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Obrigado pela leitura e até a próxima! ;)&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>resume</category>
      <category>oop</category>
      <category>programming</category>
    </item>
    <item>
      <title>Javascript Superpower - Higher Order Function</title>
      <author>Fadhil Radhian</author>
      <pubDate>Fri, 12 Nov 2021 23:47:50 +0000</pubDate>
      <link>https://dev.to/fadhilradh/javascript-superpower-higher-order-function-4inn</link>
      <guid>https://dev.to/fadhilradh/javascript-superpower-higher-order-function-4inn</guid>
      <description>&lt;p&gt;Yes I know, Higher Order Function seems a little bit daunting at first. &lt;/p&gt;

&lt;p&gt;Higher order? What does order even mean ?&lt;/p&gt;

&lt;p&gt;Don't worry, I will explain it to you with human language 😎&lt;/p&gt;

&lt;p&gt;Actually its concept is very simple.&lt;/p&gt;

&lt;p&gt;It is just a function that takes a parameter (like normal function!) but its parameter is not a value.&lt;/p&gt;

&lt;p&gt;So what it is then ?&lt;/p&gt;

&lt;p&gt;Its parameter is some part of its functionality.&lt;/p&gt;

&lt;p&gt;But why ?&lt;/p&gt;

&lt;p&gt;Let's step back a little bit.&lt;/p&gt;

&lt;p&gt;In your journey as a programmer, you must have seen two functions that do stuff similarly, with only minor difference.&lt;/p&gt;

&lt;p&gt;Sometimes you feel like "Hmm.. why I need to write this again? It is very similar to that one". 😑&lt;/p&gt;

&lt;p&gt;You feel like they should have be a one reusable function, and that minor difference is passed through the function's parameter.&lt;/p&gt;

&lt;p&gt;Just like normal functions with different values as their parameter.&lt;/p&gt;

&lt;p&gt;But how we do it ?&lt;/p&gt;

&lt;p&gt;We do it with, yes, &lt;strong&gt;Higher Order Function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Basically, Higher Order function is a &lt;em&gt;reusable function that takes a part of its functionality from its parameter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Its purpose is one : Generalizing our function. To make it reusable in many places in our code with similar but slightly different use case.&lt;/p&gt;

&lt;p&gt;Cool, isn't it ?&lt;/p&gt;

&lt;p&gt;It is in accordance to key programming principle :&lt;br&gt;
Don't Repeat Yourself (DRY).&lt;/p&gt;

&lt;p&gt;And if you're like me, I like to write something that can be used in different places.&lt;/p&gt;

&lt;p&gt;It feels like I invent something, and it feels satisfying.&lt;/p&gt;

&lt;p&gt;Now let's start with a little bit of example.&lt;/p&gt;

&lt;p&gt;Let's suppose we have a function that takes and array and return array with elements divided by 2 :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IYekFWUd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds3hf7rw83wv6q4gassn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IYekFWUd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds3hf7rw83wv6q4gassn.png" alt="Image description" width="663" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Yes, I know this example use that 'cruel' for loop. It is on purpose, to make a function that somewhat long but simple to understand)&lt;/p&gt;

&lt;p&gt;Now, in other place in our code, we have that 'similar but little different' function with the previous one :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDrGIcqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amow3o3zos1z5gorlt1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDrGIcqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amow3o3zos1z5gorlt1z.png" alt="Image description" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we have 'that' type of function, again, somewhere else in our code :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vCeeeh4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv8r0hj1udcm3q1w6spb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vCeeeh4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv8r0hj1udcm3q1w6spb.png" alt="Image description" width="880" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it feels repetitive and our code get unnecessarily big. 😞&lt;/p&gt;

&lt;p&gt;I know how you feel.&lt;/p&gt;

&lt;p&gt;And yes, we break DRY principle.&lt;/p&gt;

&lt;p&gt;So, how we simplify these functions then ?&lt;/p&gt;

&lt;p&gt;Simple : &lt;strong&gt;by passing that different part in the function, as parameter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But can we pass string like " + 3 " and put it in our function ?&lt;/p&gt;

&lt;p&gt;No, we can't do that in Javascript.&lt;/p&gt;

&lt;p&gt;Then, how we do it ?&lt;br&gt;
&lt;em&gt;We make it a function and then, pass it as parameter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, this is our "Use It Anywhere Function" :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aPXfgK-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g8l80rhqvihxqgedmyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aPXfgK-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g8l80rhqvihxqgedmyi.png" alt="Image description" width="838" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We gave it a general name too, copyArrayAndManipulate()&lt;/p&gt;

&lt;p&gt;We just have to call it with different parameter each time we need slightly different functionality (see the last line).&lt;/p&gt;

&lt;p&gt;Now we have a reusable function, and our code get smaller and abstracted.&lt;/p&gt;

&lt;p&gt;That's it folks!&lt;/p&gt;

&lt;p&gt;Hopefully, now you understand Higher Order Function in Javascript. Congrats! 🎉 &lt;/p&gt;

&lt;p&gt;See you next time !&lt;/p&gt;

&lt;p&gt;Reach me at : &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/fadhil-radhian/"&gt;https://www.linkedin.com/in/fadhil-radhian/&lt;/a&gt;&lt;br&gt;
Github : fadhilradh&lt;/p&gt;

&lt;p&gt;Screenshots credit: &lt;br&gt;
Twitter: @willsentance&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>functional</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Remote Development with AWS Cloud9 IDE using a Docker and Docker-Compose application</title>
      <author>Cindy Le</author>
      <pubDate>Fri, 12 Nov 2021 23:41:47 +0000</pubDate>
      <link>https://dev.to/cindyledev/getting-started-with-aws-cloud9-ide-using-a-docker-and-docker-compose-application-35hj</link>
      <guid>https://dev.to/cindyledev/getting-started-with-aws-cloud9-ide-using-a-docker-and-docker-compose-application-35hj</guid>
      <description>&lt;p&gt;In this tutorial, we will be setting up Telescope in AWS Cloud9 IDE. &lt;a href="https://telescope.cdot.systems/"&gt;Telescope&lt;/a&gt; is a tool for tracking blogs around Seneca's open source develop. The application itself has many microservices that use Docker containers and are composed together using Docker-Compose. You can find the GitHub repo &lt;a href="https://github.com/Seneca-CDOT/telescope"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#telescope-tech-stack"&gt;
  &lt;/a&gt;
  Telescope Tech Stack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;Material UI&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Elasticsearch&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Traefik&lt;/li&gt;
&lt;li&gt;Firebase&lt;/li&gt;
&lt;li&gt;Jest&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#telescope-microservices"&gt;
  &lt;/a&gt;
  Telescope Microservices
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Auth&lt;/li&gt;
&lt;li&gt;Feed-Discovery&lt;/li&gt;
&lt;li&gt;Image&lt;/li&gt;
&lt;li&gt;Parser&lt;/li&gt;
&lt;li&gt;Planet&lt;/li&gt;
&lt;li&gt;Posts&lt;/li&gt;
&lt;li&gt;Search&lt;/li&gt;
&lt;li&gt;Status&lt;/li&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/cloud9/"&gt;AWS Cloud9&lt;/a&gt; is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: The EC2 instance used in this guide is not within AWS's Free-Tier so please see &lt;a href="https://aws.amazon.com/ec2/pricing/on-demand/"&gt;EC2 Pricing&lt;/a&gt; to see if you're comfortable with these costs. Cloud9 has a cost-saving setting to help reduce costs by automatically hibernating after 30 minutes of inactivity. Running Docker in development is CPU intensive so these are the EC2 instances I recommend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minimum: &lt;code&gt;t2.medium (4 GiB RAM + 2 vCPU)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Recommended: &lt;code&gt;t2.large (8 GiB RAM + 2 vCPU)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Summary of Pricing&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;t2.medium costs \$0.0464 per hour&lt;/li&gt;
&lt;li&gt;t2.large costs \$0.0928 per hour&lt;/li&gt;
&lt;li&gt;30GB Amazon Elastic Block Storage (EBS) costs \$3 per month&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cost Estimate Per Month&lt;/strong&gt;:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;t2.medium&lt;/th&gt;
&lt;th&gt;t2.large&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cost per hour&lt;/td&gt;
&lt;td&gt;\$0.0464&lt;/td&gt;
&lt;td&gt;\$0.0928&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hours per day&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Days per month&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sub-total&lt;/td&gt;
&lt;td&gt;\$11.14&lt;/td&gt;
&lt;td&gt;\$22.27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30GB EBS Volume&lt;/td&gt;
&lt;td&gt;\$3&lt;/td&gt;
&lt;td&gt;\$3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;\$14.14&lt;/td&gt;
&lt;td&gt;\$25.27&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create an &lt;a href="https://aws.amazon.com/"&gt;AWS Account&lt;/a&gt;. You can watch this &lt;a href="https://www.youtube.com/watch?v=3hLmDS179YE&amp;amp;t=10552s"&gt;part&lt;/a&gt; of the AWS Certified Cloud Practitioner course on creating an account if you need help.&lt;/li&gt;
&lt;li&gt;Sign into your AWS Account&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-your-cloud9-environment"&gt;
  &lt;/a&gt;
  Creating your Cloud9 Environment:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In the upper-right hand corner of your AWS Management Console, select &lt;code&gt;US East (Ohio) us-east-2&lt;/code&gt; as your &lt;code&gt;Region&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gb0iQlu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_08_11-.png" alt="Select us-east-2 region" width="450" height="287"&gt;
&lt;/li&gt;
&lt;li&gt;In the upper-left hand corner of your AWS Management Console, click on &lt;code&gt;Services&lt;/code&gt;. This is bring up a list of AWS Services, search for &lt;code&gt;Cloud9&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Create Environment&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7rZ4MgK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_14_54-Welcome%2Bto%2BAWS%2BCloud9%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Create environment" width="880" height="374"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Step 1 - Name environment:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Name: &lt;code&gt;Telescope-Dev&lt;/code&gt; (whatever you want)&lt;/p&gt;

&lt;p&gt;Description (optional): &lt;code&gt;AWS Cloud9 development environment for Telescope&lt;/code&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lBDCJknR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_15_58-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lBDCJknR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_15_58-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Step 1" width="880" height="599"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 2 - Configure settings:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Environment type: &lt;code&gt;Create a new EC2 instance for environment (direct access)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instance type: &lt;code&gt;Other instance type: t2.medium (4 GiB RAM + 2 vCPU)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Platform: &lt;code&gt;Ubuntu Server 18.04 LTS&lt;/code&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1JQQ0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_17_57-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1JQQ0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_17_57-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Step 2a" width="880" height="712"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9R5r9j17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_19_55-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9R5r9j17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_19_55-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Step 2b" width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 3 - Review and click &lt;code&gt;Create Environment&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will take a few minutes for AWS to create your new C9 environment&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#opening-the-ports-on-our-ec2-instance"&gt;
  &lt;/a&gt;
  Opening the ports on our EC2 instance:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Firstly, we'll need the MAC address of our EC2 instance
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -s http://169.254.169.254/latest/meta-data/mac

06:c5:aa:63:ee:f4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vPDsrRnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_30_02-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPDsrRnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_30_02-.png" alt="Getting MAC address" width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using your EC2 instance's MAC address, we can get a list of Security Groups
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/&amp;lt;your_mac&amp;gt;/security-group-ids

sg-0c63c6f026a2b9288
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Find out what your IP address is using &lt;a href="http://checkip.amazonaws.com/"&gt;http://checkip.amazonaws.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;You will need to authorize your IP address access to ports 3000, 8000, and 8443
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ec2 authorize-security-group-ingress --group-id &amp;lt;sg-id&amp;gt; \
--port 3000 \
--protocol tcp \
--cidr &amp;lt;my-ip&amp;gt;/32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ec2 authorize-security-group-ingress --group-id &amp;lt;sg-id&amp;gt; \
--port 8000 \
--protocol tcp \
--cidr &amp;lt;my-ip&amp;gt;/32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ec2 authorize-security-group-ingress --group-id &amp;lt;sg-id&amp;gt; \
--port 8443 \
--protocol tcp \
--cidr &amp;lt;my-ip&amp;gt;/32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eEQ_wymV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_34_11-Telescope-Dev%2B-%2BAWS%2BCloud9%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eEQ_wymV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_34_11-Telescope-Dev%2B-%2BAWS%2BCloud9%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Opening the ports" width="880" height="595"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#resize-your-amazon-ebs-volume"&gt;
  &lt;/a&gt;
  Resize your Amazon EBS volume
&lt;/h2&gt;

&lt;p&gt;Check first using &lt;code&gt;df -h&lt;/code&gt; in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1      9.7G  9.3G  371M  97% /
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you first create an EC2 instance, it has an EBS Volume of 10GB. To increase it to 20GB, create a new file called &lt;code&gt;resize.sh&lt;/code&gt; in &lt;code&gt;~/environment&lt;/code&gt; directory and copy the following script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

# Specify the desired volume size in GiB as a command-line argument. If not specified, default to 20 GiB.
SIZE=${1:-20}

# Get the ID of the environment host Amazon EC2 instance.
INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)

# Get the ID of the Amazon EBS volume associated with the instance.
VOLUMEID=$(aws ec2 describe-instances \
  --instance-id $INSTANCEID \
  --query "Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId" \
  --output text)

# Resize the EBS volume.
aws ec2 modify-volume --volume-id $VOLUMEID --size $SIZE

# Wait for the resize to finish.
while [ \
  "$(aws ec2 describe-volumes-modifications \
    --volume-id $VOLUMEID \
    --filters Name=modification-state,Values="optimizing","completed" \
    --query "length(VolumesModifications)"\
    --output text)" != "1" ]; do
sleep 1
done

# Check if we're on an NVMe filesystem
if [ $(readlink -f /dev/xvda) = "/dev/xvda" ]
then
  # Rewrite the partition table so that the partition takes up all the space that it can.
  sudo growpart /dev/xvda 1

  # Expand the size of the file system.
  # Check if we are on AL2
  STR=$(cat /etc/os-release)
  SUB="VERSION_ID=\"2\""
  if [[ "$STR" == *"$SUB"* ]]
  then
    sudo xfs_growfs -d /
  else
    sudo resize2fs /dev/xvda1
  fi

else
  # Rewrite the partition table so that the partition takes up all the space that it can.
  sudo growpart /dev/nvme0n1 1

  # Expand the size of the file system.
  # Check if we're on AL2
  STR=$(cat /etc/os-release)
  SUB="VERSION_ID=\"2\""
  if [[ "$STR" == *"$SUB"* ]]
  then
    sudo xfs_growfs -d /
  else
    sudo resize2fs /dev/nvme0n1p1
  fi
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: AWS Free-Tier includes 30GB of Storage, 2 million I/Os, and 1GB of snapshot storage with &lt;a href="https://aws.amazon.com/ebs/pricing/"&gt;Amazon Elastic Block Store (EBS)&lt;/a&gt; free for 12 months.&lt;/p&gt;

&lt;p&gt;In the terminal, execute the script by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sh resize.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify size change with &lt;code&gt;df -h&lt;/code&gt; again&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1       20G  9.3G   11G  48% /
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-dockercompose"&gt;
  &lt;/a&gt;
  Install Docker-Compose
&lt;/h2&gt;

&lt;p&gt;By default, Docker is installed on AWS EC2's Ubuntu but Docker-Compose is not, so we have to install it ourselves.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run to download the current stable version of Docker-Compose:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Apply executable permissions to the downloaded file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Check installation using:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker-compose --version

docker-compose version 1.29.2, build 5becea4c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-telescope-repository-in-cloud9"&gt;
  &lt;/a&gt;
  Setting up the Telescope repository in Cloud9:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In the terminal, clone the Telescope repository and name the remote &lt;code&gt;upstream&lt;/code&gt; by entering
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone -o upstream https://github.com/Seneca-CDOT/telescope.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Change to the telescope directory
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd telescope
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Set all the necessary environment variables in your env.remote file to contain your EC2 instance's public IPv4 address by executing the &lt;code&gt;aws-ip.sh&lt;/code&gt; script
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sh ./tools/aws-ip.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#if-you-did-everything-correctly-youve-completed-the-environment-setup-using-aws-cloud9-yay"&gt;
  &lt;/a&gt;
  If you did everything correctly, you've completed the environment setup using AWS Cloud9! Yay!
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#now-to-get-started-with-development"&gt;
  &lt;/a&gt;
  Now to get started with development...
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install all depenencies
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Start all Telescope services. This will take some time to complete
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose --env-file .env up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Start the Telescope development server on Port 3000
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PORT=3000 npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Find your EC2 instance's public IPv4
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -s http://169.254.169.254/latest/meta-data/public-ipv4

35.174.16.133
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;&amp;lt;public-ip&amp;gt;:8000&lt;/code&gt; browser tab to see Telescope running on a AWS Cloud9 environment!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;&amp;lt;public-ip&amp;gt;:3000/feeds&lt;/code&gt; in another browser tab to see all the feeds in the backend&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;&amp;lt;public-ip&amp;gt;:8443/v1/&amp;lt;microservice-port&amp;gt;&lt;/code&gt; in another browser tab to see the microservices. For example &lt;code&gt;35.174.16.133:8443/v1/posts&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfIyuz_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_54_59-Mozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfIyuz_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_54_59-Mozilla%2BFirefox.png" alt="Ports 3000 and 8000 opened in browser" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frequently-asked-questions-faq"&gt;
  &lt;/a&gt;
  Frequently Asked Questions (FAQ)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#whats-in-raw-awsipsh-endraw-"&gt;
  &lt;/a&gt;
  What's in &lt;code&gt;aws-ip.sh&lt;/code&gt;?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ipv4=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)

sed -r \
  -e  "s@(.+=)http://localhost:8000(/[^ ]*)*@\1http://$ipv4:3000\2@g" \
  -e  "s@(.+=)http://localhost:3000(/[^ ]*)*@\1http://$ipv4:8000\2@g" \
  -e  "s@(.+=)http://localhost([^:]*)@\1http://$ipv4:8443\2@g" \
  -e  "s@development\.yml@gitpod\.yml@" \
  config/env.development &amp;gt; .env

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-do-i-stop-my-docker-containers"&gt;
  &lt;/a&gt;
  How do I stop my docker containers?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run services:stop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-do-i-delete-my-docker-containers"&gt;
  &lt;/a&gt;
  How do I delete my docker containers?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker system prune -af --volumes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i-think-i-have-multiple-services-using-the-same-port-how-i-can-check"&gt;
  &lt;/a&gt;
  I think I have multiple services using the same port, how I can check?
&lt;/h3&gt;

&lt;p&gt;To see a list of all running services and what ports they're binding to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo lsof -i -P -n | grep LIST
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i-cant-open-8000-running-what-could-i-be-doing-wrong"&gt;
  &lt;/a&gt;
  I can't open :8000 running, what could I be doing wrong?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you have a VPN on, turn it off and get your IP address by visiting &lt;a href="http://checkip.amazonaws.com/"&gt;http://checkip.amazonaws.com/&lt;/a&gt; then allow your IP address to access the ports 3000 and 8000.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS may change your EC2 instance IP address when you stop or restart your EC2 instance. One solution is to purchase an &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#eip-basics"&gt;Elastic IP address&lt;/a&gt; to reserve the particular public IP address. However, you can just clean out the &lt;code&gt;env.remote&lt;/code&gt; and &lt;code&gt;.env&lt;/code&gt; files and run the &lt;code&gt;./tools/aws-ip.sh&lt;/code&gt; script again to set your new EC2 IP address in the appropriate environment variables. Just remember to use the new EC2 IP address in the browser as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=RrKRN9zRBWs"&gt;AWS Certified Developer - Associate 2020&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>Learn Scheme by Example: Tk GUI with Chicken Scheme</title>
      <author>Matthew D. Miller</author>
      <pubDate>Fri, 12 Nov 2021 21:51:55 +0000</pubDate>
      <link>https://dev.to/goober99/learn-scheme-by-example-tk-gui-with-chicken-scheme-3cn9</link>
      <guid>https://dev.to/goober99/learn-scheme-by-example-tk-gui-with-chicken-scheme-3cn9</guid>
      <description>&lt;p&gt;PS/Tk stands for a portable Scheme interface to the Tk GUI toolkit. It has a rich history going all the way back to Scheme_wish by Sven Hartrumpf in 1997. Wolf-Dieter Busch created a Chicken port called Chicken/Tk in 2004. It took on its current name when Nils M Holm stripped it of Chicken-isms to make it portable amongst Scheme implementations in 2006.&lt;/p&gt;

&lt;p&gt;If you've ever tried to write portable Scheme, you know that, except for the most trivial of programs, it is much easier said than done. Holm's &lt;code&gt;pstk.scm&lt;/code&gt; had a configurable section titled &lt;code&gt;NON-PORTABLE&lt;/code&gt; that you had to configure for your chosen implementation. It came full circle and was repackaged as a Chicken egg.&lt;/p&gt;

&lt;p&gt;Chicken is a popular Scheme implementation that compiles Scheme to C. Eggs are Chicken-specific extenstion libraries that are stored in a centralized repository (like CPAN but for Chicken Scheme). Instead of building yet another calculator, let's build a GUI for generating a tone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1wZ6z-7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goober99/lisp-gui-examples/master/screenshots/pstk.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1wZ6z-7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goober99/lisp-gui-examples/master/screenshots/pstk.png%3Fraw%3Dtrue" alt="Screenshot" title="Example screenshot" width="489" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll need Chicken installed. It's available in the repositories of most Linux distros. PS/Tk interfaces with Tk, not with C library bindings, but with a named pipe to &lt;code&gt;tclsh8.6&lt;/code&gt;. The TCL package in most Linux distros will provide this. For Debian, I did &lt;code&gt;sudo apt install chicken-bin tcl tk&lt;/code&gt;. Once Chicken is installed, you can use the &lt;code&gt;chicken-install&lt;/code&gt; utility that comes with it to install the PS/Tk egg.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;chicken-install &lt;span class="nt"&gt;-sudo&lt;/span&gt; pstk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you think of Tk, you may think of something that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZb0FlVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goober99/lisp-gui-examples/master/screenshots/tk-old.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZb0FlVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goober99/lisp-gui-examples/master/screenshots/tk-old.png%3Fraw%3Dtrue" alt="Screenshot" title="Legacy Tk open dialog" width="426" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tk has come a long way in recent years. Tcl/Tk 8.5 and later comes with a new set of widgets built in called Tile or Ttk that can be themed. These widgets are available alongside the classic widgets, so you have to explicitly tell your app to use Ttk or else it will end up looking like it was designed for a 1980s Unix workstation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="nv"&gt;pstk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk-start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ttk-map-widgets&lt;/span&gt; &lt;span class="ss"&gt;'all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; Use the Ttk widget set&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/wm&lt;/span&gt; &lt;span class="ss"&gt;'title&lt;/span&gt; &lt;span class="nv"&gt;tk&lt;/span&gt; &lt;span class="s"&gt;"Bleep"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk-event-loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All PS/Tk function names begin with &lt;code&gt;tk/&lt;/code&gt; or &lt;code&gt;tk-&lt;/code&gt; (or &lt;code&gt;ttk/&lt;/code&gt; and &lt;code&gt;ttk-&lt;/code&gt; for the few Ttk-specific functions). The &lt;a href="https://github.com/utz82/pstk/tree/master/doc"&gt;doc directory&lt;/a&gt; in the PS/Tk GitHub repo unfortunately has not been updated since this convention was adopted. One example from the docs is &lt;code&gt;start-tk&lt;/code&gt; which is now &lt;code&gt;tk-start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ttk-map-widgets&lt;/code&gt; function is what tells Tk to use the Ttk widgets instead of the classic widgets. Tk comes with a few built-in themes. The default themes on Windows and macOS supposedly do a decent job of approximating the look of native widgets on those platforms. I don't use either of those platforms, so I can't verify this first hand. For some reason, the default theme on Linux is vaguely Windows 95ish. It comes with a built-in theme called &lt;a href="https://wiki.tcl-lang.org/page/ttk%3A%3Atheme%3A%3Aclam"&gt;clam&lt;/a&gt; that is supposed to provide "a look somewhat like a Linux application". You can set this theme with &lt;code&gt;(ttk/set-theme "clam")&lt;/code&gt;, but it's really not that much of an improvement.&lt;/p&gt;

&lt;p&gt;Ideally, something like &lt;a href="https://github.com/Geballin/gtkTtk"&gt;gtkTtk&lt;/a&gt; that has GTK do the actual drawing would be integrated into Tcl/Tk and become the default on Linux. In the meantime, there are &lt;a href="https://ttkthemes.readthedocs.io/en/latest/themes.html"&gt;third party themes&lt;/a&gt; that imitate the look and feel of the most popular GTK and Qt themes. I use MATE with the Arc GTK theme, so I went with the Arc theme. There was even a Debian package for it (&lt;code&gt;sudo apt install tcl-ttkthemes&lt;/code&gt;). We can then &lt;a href="https://blog.serindu.com/2019/03/07/applying-tk-themes-to-git-gui/"&gt;apply the theme system wide&lt;/a&gt; (&lt;code&gt;echo '*TkTheme: arc' | xrdb -merge -&lt;/code&gt;), so that all Tk apps such as git-gui also inherit the theme. It is probably better to give your Linux users instructions on how to install their own theme instead of hard coding one with &lt;code&gt;ttk/set-theme&lt;/code&gt;, so they can choose one that matches their system theme (KDE users might pick Breeze while Ubuntu users might opt for Yaru). The screenshots in this tutorial use the Arc theme.&lt;/p&gt;

&lt;p&gt;We set the window title with &lt;code&gt;tk/wm&lt;/code&gt; and start the event loop with &lt;code&gt;tk-event-loop&lt;/code&gt;. We now have an empty window. Now let's add some widgets to this window.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;slider&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'scale&lt;/span&gt; &lt;span class="ss"&gt;'from:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'to:&lt;/span&gt; &lt;span class="mi"&gt;20000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;slider&lt;/span&gt; &lt;span class="ss"&gt;'set&lt;/span&gt; &lt;span class="mi"&gt;440&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;slider&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ss"&gt;'columnspan:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ss"&gt;'sticky:&lt;/span&gt; &lt;span class="ss"&gt;'ew&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Widgets are organized hierarchically. This is done by invoking a parent widget with the sub-command &lt;code&gt;create-widget&lt;/code&gt;. PS/Tk associates a widget named &lt;code&gt;tk&lt;/code&gt; with the top-level window, so most widgets will start as a call to &lt;code&gt;tk&lt;/code&gt; (e.g. &lt;code&gt;(tk 'create-widget 'label 'text: "Hello, World!")&lt;/code&gt;). Options are quoted and get a trailing colon (e.g. &lt;code&gt;'text: "Hello, World!"&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Creating a widget returns a Scheme function. If you give this function a name, you can call it with sub-commands such as &lt;code&gt;configure&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, and &lt;code&gt;set&lt;/code&gt;. Just creating a widget doesn't make it appear on screen. For that you need a geometry manager, of which Tk has three: the packer, the gridder, and the placer (&lt;code&gt;tk/pack&lt;/code&gt;, &lt;code&gt;tk/grid&lt;/code&gt;, and &lt;code&gt;tk/place&lt;/code&gt; in Scheme, respectively).&lt;/p&gt;

&lt;p&gt;The range of frequencies audible by humans is typically between 20 Hz and 20 KHz (we lose the ability to hear some of those higher frequencies as we age). The &lt;a href="https://en.wikipedia.org/wiki/A440_(pitch_standard)"&gt;musical note A above middle C&lt;/a&gt; is 440 Hz. Since A4 serves as a general tuning standard, it seems like a sensible default, but if you run the above in Chicken, this is what you'll see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6g2opxKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goober99/lisp-gui-examples/master/screenshots/pstk-linearslider.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6g2opxKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goober99/lisp-gui-examples/master/screenshots/pstk-linearslider.png%3Fraw%3Dtrue" alt="Slider" title="Slider showing 440 using a linear scale" width="160" height="99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The scale of 20 to 20,000 is so large that 440 doesn't appear to move the slider at all. Ideally, 440 would fall about the middle of the slider. To achieve this, let's use a logarithmic scale.&lt;/p&gt;

&lt;p&gt;I found a &lt;a href="https://stackoverflow.com/questions/846221/logarithmic-slider/846249#846249"&gt;Stack Overflow answer&lt;/a&gt; on how to map a slider to a logarithmic scale. The code given in the answer is JavaScript, but it was easy enough to port to Scheme.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;; Scale used by slider&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;*min-position*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;*max-position*&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;; Range of frequencies&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;*min-frequency*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;*max-frequency*&lt;/span&gt; &lt;span class="mi"&gt;20000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; Logarithmic scale for frequency (so middle A [440] falls about in the middle)&lt;/span&gt;
&lt;span class="c1"&gt;; Adapted from https://stackoverflow.com/questions/846221/logarithmic-slider&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;min-freq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt; &lt;span class="nv"&gt;*min-frequency*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;max-freq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt; &lt;span class="nv"&gt;*max-frequency*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;frequency-scale&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;max-freq&lt;/span&gt; &lt;span class="nv"&gt;min-freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*max-position*&lt;/span&gt; &lt;span class="nv"&gt;*min-position*&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;; Convert slider position to frequency&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;position-&amp;gt;frequency&lt;/span&gt; &lt;span class="nv"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;exp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;min-freq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;frequency-scale&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;position&lt;/span&gt; &lt;span class="nv"&gt;*min-position*&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;span class="c1"&gt;; Convert frequency to slider position&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-&amp;gt;position&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;min-freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;frequency-scale&lt;/span&gt; &lt;span class="nv"&gt;*min-position*&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added some global parameters to the top of the script. The variable name &lt;code&gt;*min-position*&lt;/code&gt; is just a Lisp naming convention for global parameters. I came up with the range of 0-2,000 by trial and error. It seemed to strike the best balance between each step of the slider making a noticeable change to the frequency while still allowing the user to narrow in on a specific frequency with just the slider.&lt;/p&gt;

&lt;p&gt;Then we create two functions: one that takes the position on the slider and returns the frequency (&lt;code&gt;position-&amp;gt;frequency&lt;/code&gt;) and another that takes a frequency and returns the position on the slider (&lt;code&gt;frequency-position&lt;/code&gt;). Now let's set the initial position of our slider with the &lt;code&gt;frequency-&amp;gt;position&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;slider&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'scale&lt;/span&gt; &lt;span class="ss"&gt;'from:&lt;/span&gt; &lt;span class="nv"&gt;*min-position*&lt;/span&gt; &lt;span class="ss"&gt;'to:&lt;/span&gt; &lt;span class="nv"&gt;*max-position*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;slider&lt;/span&gt; &lt;span class="ss"&gt;'configure&lt;/span&gt; &lt;span class="ss"&gt;'value:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-&amp;gt;position&lt;/span&gt; &lt;span class="mi"&gt;440&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Underneath the slider is a spin box showing the current frequency and buttons to increase/decrease the frequency by one octave.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;; Create a spin box with a units label&lt;/span&gt;
&lt;span class="c1"&gt;; Returns frame widget encompassing both spin box and label and the spin box&lt;/span&gt;
&lt;span class="c1"&gt;; widget itself. This way you can access the value of the spin box.&lt;/span&gt;
&lt;span class="c1"&gt;; e.g. (define-values (box-with-label just-box) (units-spinbox 1 12 6 "inches"))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;units-spinbox&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;initial&lt;/span&gt; &lt;span class="nv"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'frame&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;spinbox&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;container&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'spinbox&lt;/span&gt; &lt;span class="ss"&gt;'from:&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="ss"&gt;'to:&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;
                             &lt;span class="ss"&gt;'width:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;number-&amp;gt;string&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;label&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;container&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'label&lt;/span&gt; &lt;span class="ss"&gt;'text:&lt;/span&gt; &lt;span class="nv"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;spinbox&lt;/span&gt; &lt;span class="ss"&gt;'set&lt;/span&gt; &lt;span class="nv"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/pack&lt;/span&gt; &lt;span class="nv"&gt;spinbox&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt; &lt;span class="ss"&gt;'side:&lt;/span&gt; &lt;span class="ss"&gt;'left&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;values&lt;/span&gt; &lt;span class="nv"&gt;container&lt;/span&gt; &lt;span class="nv"&gt;spinbox&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;lower-button&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'button&lt;/span&gt; &lt;span class="ss"&gt;'text:&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-values&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-ext&lt;/span&gt; &lt;span class="nv"&gt;frequency-int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;units-spinbox&lt;/span&gt; &lt;span class="nv"&gt;*min-frequency*&lt;/span&gt; &lt;span class="nv"&gt;*max-frequency*&lt;/span&gt; &lt;span class="mi"&gt;440&lt;/span&gt; &lt;span class="s"&gt;"Hz"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;higher-button&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'button&lt;/span&gt; &lt;span class="ss"&gt;'text:&lt;/span&gt; &lt;span class="s"&gt;"&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;lower-button&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'column:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;frequency-ext&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'column:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;higher-button&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'column:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The frame widget is an invisible widget that helps with layout. Since all I need to arrange within the frame is a spin box and a label, I used &lt;code&gt;tk/pack&lt;/code&gt; to &lt;code&gt;pack&lt;/code&gt; them side by side. The frame is then organized in a &lt;code&gt;grid&lt;/code&gt; with the rest of the widgets. I created a function that I can reuse later to generate the spin box, label, and frame all together. At this point, we are starting to have a nice looking interface, but it doesn't do anything. If you click the buttons or slide the slider, nothing happens. The widgets have a &lt;code&gt;command&lt;/code&gt; option that wires the widget up to a function. If we add a command to the slider, that command will be called each time the slider is moved.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;slider&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'scale&lt;/span&gt; &lt;span class="ss"&gt;'from:&lt;/span&gt; &lt;span class="nv"&gt;*min-position*&lt;/span&gt; &lt;span class="ss"&gt;'to:&lt;/span&gt; &lt;span class="nv"&gt;*max-position*&lt;/span&gt;
                   &lt;span class="ss"&gt;'command:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;position-&amp;gt;frequency&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command for the slider takes one argument that indicates the new value of the slider. The spin box does have a &lt;code&gt;command&lt;/code&gt; option, but the command is only called when the value is changed by clicking the up or down arrow, not when the value is changed by other means such as typing a frequency into the field. Tk has a &lt;code&gt;bind&lt;/code&gt; command (the Scheme &lt;code&gt;tk/bind&lt;/code&gt; function) that allows binding functions to an event on a widget. We'll bind our callback to the &lt;code&gt;KeyRelase&lt;/code&gt; event. The &lt;code&gt;tk/bind&lt;/code&gt; function takes up to three arguments. The first is the widget to bind to (or a tag created with &lt;code&gt;tk/bindtags&lt;/code&gt; to apply the binding to multiple widgets). The second is the event pattern. The event pattern is surrounded by angle brackets and can specify modifiers, event types, and more. You can find detailed documentation on the event pattern in the &lt;a href="https://www.tcl.tk/man/tcl8.6/TkCmd/bind.htm"&gt;Tcl/Tk documentation&lt;/a&gt;. The third is a lambda expression to associate with the event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/bind&lt;/span&gt; &lt;span class="nv"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'&amp;lt;KeyRelease&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c1"&gt;; If frequency value is a valid number, set slider to current value&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;numified&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;numified&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;slider&lt;/span&gt; &lt;span class="ss"&gt;'configure&lt;/span&gt; &lt;span class="ss"&gt;'value:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-&amp;gt;position&lt;/span&gt; &lt;span class="nv"&gt;numified&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wire the buttons up to callback functions called &lt;code&gt;decrease-octave&lt;/code&gt; and &lt;code&gt;increase-octave&lt;/code&gt;. An &lt;a href="https://en.wikipedia.org/wiki/Octave"&gt;octave&lt;/a&gt; is "the interval between one musical pitch and another with double its frequency."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;; Set frequency slider and display&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-frequency&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt; &lt;span class="nv"&gt;*min-frequency*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt; &lt;span class="nv"&gt;*max-frequency*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;slider&lt;/span&gt; &lt;span class="ss"&gt;'configure&lt;/span&gt; &lt;span class="ss"&gt;'value:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-&amp;gt;position&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'set&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; Buttons increase and decrease frequency by one octave&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;adjust-octave&lt;/span&gt; &lt;span class="nv"&gt;modifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-frequency&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;modifier&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;decrease-octave&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;adjust-octave&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;increase-octave&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;adjust-octave&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you slide the slider, the text field updates accordingly. If you type a number in the text field, the slider updates accordingly. All good, right? What if a user (and you know they will) enters a number higher than 20,000 or a letter?&lt;/p&gt;

&lt;p&gt;Let's extend the function that returns our labeled spin box to bind a validation function to the &lt;code&gt;FocusOut&lt;/code&gt; event on the spin box. The spin box does have a &lt;code&gt;validatecommand&lt;/code&gt; option, but I wasn't able to get it working. I looked through the examples that have come with the various variations of PS/Tk and couldn't find a single example of a spin box with a &lt;code&gt;validatecommand&lt;/code&gt;. I even looked at the source code for &lt;a href="https://github.com/bintracker/bintracker/"&gt;Bintracker&lt;/a&gt;, a chiptune audio workstation written in Chicken Scheme with a PS/Tk GUI and developed by the current maintainer of the PS/Tk egg. Even it binds a &lt;code&gt;validate-new-value&lt;/code&gt; function to the &lt;code&gt;Return&lt;/code&gt; and &lt;code&gt;FocusOut&lt;/code&gt; events of the spin box rather than using &lt;code&gt;validatecommand&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;; Create a spin box with a units label&lt;/span&gt;
&lt;span class="c1"&gt;; Returns frame widget encompassing both spin box and label and the spin box&lt;/span&gt;
&lt;span class="c1"&gt;; widget itself. This way you can access the value of the spin box.&lt;/span&gt;
&lt;span class="c1"&gt;; e.g. (define-values (box-with-label just-box) (units-spinbox 1 12 6 "inches"))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;units-spinbox&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;initial&lt;/span&gt; &lt;span class="nv"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'frame&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;spinbox&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;container&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'spinbox&lt;/span&gt; &lt;span class="ss"&gt;'from:&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="ss"&gt;'to:&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;
                             &lt;span class="ss"&gt;'width:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;number-&amp;gt;string&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;label&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;container&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'label&lt;/span&gt; &lt;span class="ss"&gt;'text:&lt;/span&gt; &lt;span class="nv"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;spinbox&lt;/span&gt; &lt;span class="ss"&gt;'set&lt;/span&gt; &lt;span class="nv"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/bind&lt;/span&gt; &lt;span class="nv"&gt;spinbox&lt;/span&gt; &lt;span class="ss"&gt;'&amp;lt;FocusOut&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;current-value&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;spinbox&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;current-value&lt;/span&gt;
                     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nv"&gt;current-value&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;current-value&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;spinbox&lt;/span&gt; &lt;span class="ss"&gt;'set&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="c1"&gt;; Also reset slider position to make sure it still matches display&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;slider&lt;/span&gt; &lt;span class="ss"&gt;'configure&lt;/span&gt; &lt;span class="ss"&gt;'value:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-&amp;gt;position&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/pack&lt;/span&gt; &lt;span class="nv"&gt;spinbox&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt; &lt;span class="ss"&gt;'side:&lt;/span&gt; &lt;span class="ss"&gt;'left&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;values&lt;/span&gt; &lt;span class="nv"&gt;container&lt;/span&gt; &lt;span class="nv"&gt;spinbox&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also use this function to create a field to specify the duration of the beep in milliseconds:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-values&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;duration-ext&lt;/span&gt; &lt;span class="nv"&gt;duration-int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;units-spinbox&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;600000&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="s"&gt;"ms"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;duration-ext&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ss"&gt;'column:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Frequency is rather abstract. Let's also give the user the ability to select a musical note. We can store the corresponding frequencies for A4-G4 in an association list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;; Notes -&amp;gt; frequency (middle A-G [A4-G4])&lt;/span&gt;
&lt;span class="c1"&gt;; http://pages.mtu.edu/~suits/notefreqs.html&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;notes&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt; &lt;span class="mf"&gt;440.00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B"&lt;/span&gt; &lt;span class="mf"&gt;493.88&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt; &lt;span class="mf"&gt;261.63&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"D"&lt;/span&gt; &lt;span class="mf"&gt;293.66&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"E"&lt;/span&gt; &lt;span class="mf"&gt;329.63&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"F"&lt;/span&gt; &lt;span class="mf"&gt;349.23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"G"&lt;/span&gt; &lt;span class="mf"&gt;292.00&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll give the user a drop-down menu. Whenever a note is selected from the drop-down menu, we'll look up the frequency in the association list and set it using the &lt;code&gt;set-frequency&lt;/code&gt; helper function we created for the octave buttons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;note-frame&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'frame&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;note&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;note-frame&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'combobox&lt;/span&gt; &lt;span class="ss"&gt;'width:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ss"&gt;'values:&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt; &lt;span class="s"&gt;"B"&lt;/span&gt; &lt;span class="s"&gt;"C"&lt;/span&gt; &lt;span class="s"&gt;"D"&lt;/span&gt; &lt;span class="s"&gt;"E"&lt;/span&gt; &lt;span class="s"&gt;"F"&lt;/span&gt; &lt;span class="s"&gt;"G"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/bind&lt;/span&gt; &lt;span class="nv"&gt;note&lt;/span&gt; &lt;span class="ss"&gt;'&amp;lt;&amp;lt;ComboboxSelected&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-frequency&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cadr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;assoc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;note&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;note-label&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;note-frame&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'label&lt;/span&gt; &lt;span class="ss"&gt;'text:&lt;/span&gt; &lt;span class="s"&gt;"♪"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/pack&lt;/span&gt; &lt;span class="nv"&gt;note-label&lt;/span&gt; &lt;span class="nv"&gt;note&lt;/span&gt; &lt;span class="ss"&gt;'side:&lt;/span&gt; &lt;span class="ss"&gt;'left&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;note-frame&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ss"&gt;'column:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's make some noise. There are Chicken Scheme &lt;a href="http://wiki.call-cc.org/eggref/5/allegro"&gt;bindings&lt;/a&gt; to the &lt;a href="https://en.wikipedia.org/wiki/Allegro_(software_library)"&gt;Allegro&lt;/a&gt; library. Allegro is a library primarily used by games for cross-platform graphics, input devices, and more. What we're interested in is the audio addon that can be used to generate a tone with a sine wave. You'll need to install the Allegro library. Make sure you also install the header files. In some Linux distros, these are split into a separate package (e.g. &lt;code&gt;liballegro5-dev&lt;/code&gt; on Debian). Also, install the Allegro egg (&lt;code&gt;chicken-install -sudo allegro&lt;/code&gt;). I added the following lines near the top to import the Allegro bindings (and the chicken memory module, which we'll also use) and initialize Allegro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;prefix&lt;/span&gt; &lt;span class="nv"&gt;allegro&lt;/span&gt; &lt;span class="s"&gt;"al:"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;chicken&lt;/span&gt; &lt;span class="nv"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;+pi+&lt;/span&gt; &lt;span class="mf"&gt;3.141592&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; Initialize Allegro and audio addon&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Could not initialize Allegro."&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:audio-addon-install&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Could not initialize sound."&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:reserve-samples&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Allegro egg is accompanied by a couple of examples but no examples showing the use of the audio addon. The Allegro library itself comes with an &lt;a href="https://github.com/liballeg/allegro5/blob/master/examples/ex_saw.c"&gt;example showing how to generate a saw wave&lt;/a&gt;, but being a C library, the example is, of course, in C. I &lt;a href="https://github.com/goober99/lisp-gui-examples/blob/master/examples/pstk/saw.scm"&gt;ported that example to Scheme&lt;/a&gt;. I would have contributed the example back to the Allegro egg, but the repo is marked as "archived by the owner" and read-only on GitHub. I've included the example in the repo alongside the rest of the code for this tutorial in case someone finds it useful.&lt;/p&gt;

&lt;p&gt;Allegro is very low-level. You create an audio &lt;code&gt;stream&lt;/code&gt;. In this case, the stream buffers eight fragments of 1,024 samples each at a frequency (often called sampling rate) of 44,100 Hz (the sampling rate of an audio CD), which means there are 44,100 samples per second. Each sample is a 32-bit float (what is called the bit depth of the audio), and we only have one channel to keep things as simple as possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;; Generate a tone using Allegro&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;generate-tone&lt;/span&gt; &lt;span class="nv"&gt;frequency&lt;/span&gt; &lt;span class="nv"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;samples-per-buffer&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;stream-frequency&lt;/span&gt; &lt;span class="mi"&gt;44100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;amplitude&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;stream&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:make-audio-stream&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="nv"&gt;samples-per-buffer&lt;/span&gt; &lt;span class="nv"&gt;stream-frequency&lt;/span&gt; &lt;span class="ss"&gt;'float32&lt;/span&gt; &lt;span class="ss"&gt;'one&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;queue&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:make-event-queue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;event&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:make-event&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:audio-stream-attach-to-mixer!&lt;/span&gt; &lt;span class="nv"&gt;stream&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:default-mixer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Could not attach stream to mixer."&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:event-queue-register-source!&lt;/span&gt; &lt;span class="nv"&gt;queue&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:audio-stream-event-source&lt;/span&gt; &lt;span class="nv"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;event-loop&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="c1"&gt;; Grab and handle events&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;duration&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;stream-frequency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;samples-per-buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:event-queue-wait!&lt;/span&gt; &lt;span class="nv"&gt;queue&lt;/span&gt; &lt;span class="nv"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:event-type&lt;/span&gt; &lt;span class="nv"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;'audio-stream-fragment&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:audio-stream-fragment&lt;/span&gt; &lt;span class="nv"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="c1"&gt;; If the stream is not ready for new data, buffer will be null.&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;event-loop&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fill-buffer&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; Placeholder&lt;/span&gt;
              &lt;span class="c1"&gt;; Repeat&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;event-loop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))))))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:audio-stream-drain&lt;/span&gt; &lt;span class="nv"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An event loop waits for the audio stream to ask for another buffer. Our job is to fill that buffer with 1,024 32-bit floats at a time. In the code listing above, this is done by &lt;code&gt;fill-buffer&lt;/code&gt;. That was just a placeholder, so I could break the code up into shorter, more easily explainable chunks. This is what goes in the place of &lt;code&gt;(fill-buffer buffer n)&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;adr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pointer-&amp;gt;address&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;samples-per-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;time&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;samples-per-buffer&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;stream-frequency&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="c1"&gt;; al:audio-stream-fragment returns a C pointer. Use (chicken&lt;/span&gt;
        &lt;span class="c1"&gt;; memory) module to operate on foreign pointer objects.&lt;/span&gt;
        &lt;span class="c1"&gt;; Iterate over array four bytes at a time since 32-bit depth.&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pointer-f32-set!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;address-&amp;gt;pointer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;adr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;amplitude&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;+pi+&lt;/span&gt; &lt;span class="nv"&gt;frequency&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:audio-stream-fragment-set!&lt;/span&gt; &lt;span class="nv"&gt;stream&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Error setting stream fragment"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Allegro egg is a pretty thin wrapper of the Allegro library. The &lt;code&gt;audio-stream-fragment&lt;/code&gt; procedure in the egg just passes along the C pointer that the corresponding &lt;code&gt;al_get_audio_stream_fragment&lt;/code&gt; function from the C library returns. It would have been nice if the egg had offered some Scheme conveniences atop Allegro like allowing us to pass a Scheme list or array to Allegro to provide the buffer of samples. Since it doesn't, we'll use the chicken memory module to fill the C array starting at the C pointer returned by &lt;code&gt;audio-stream-fragment&lt;/code&gt;. We use &lt;code&gt;pointer-&amp;gt;address&lt;/code&gt; to get the address of the pointer. A pointer refrences a byte of memory. We can reference the preceding or following byte by subtracting or adding 1 to the address. Since we are filling the array with 32-bit floats, and 32 bits is 4 bytes, we want to increment the address by 4 each time. Then we can set the value of the current location with pointer-f32-set!.&lt;/p&gt;

&lt;p&gt;Then you just need to feed Allegro buffers of 1,024 samples at a time. The &lt;a href="http://pld.cs.luc.edu/telecom/mnotes/digitized_sound.html"&gt;basic formula for a sine wave&lt;/a&gt; is A sin(2πft) where &lt;em&gt;A&lt;/em&gt; is amplitude, &lt;em&gt;f&lt;/em&gt; is frequency, and &lt;em&gt;t&lt;/em&gt; is time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;amplitude&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;+pi+&lt;/span&gt; &lt;span class="nv"&gt;frequency&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wire this up to a play button, and you're ready to make some noise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;play-button&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'button&lt;/span&gt; &lt;span class="ss"&gt;'text:&lt;/span&gt; &lt;span class="s"&gt;"Play"&lt;/span&gt; &lt;span class="ss"&gt;'command:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;generate-tone&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;duration-int&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;play-button&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ss"&gt;'column:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tk has been around a long time, and it shows. While it is stable and highly portable, even with recent improvements, it just looks a little dated. At least on Linux, none of the themes I tried really fit in. There were always differences that made the Tk GUI stick out like a sore thumb. If you're building an internal tool where it doesn't really matter how pretty it is, you can get Tk to work with a variety of Schemes in a variety of places.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can check out the entire example on &lt;a href="https://github.com/goober99/lisp-gui-examples"&gt;GitHub&lt;/a&gt;. This started as a personal learning project to explore the state of GUI programming in Lisp and has become a series of tutorials on building GUIs with various dialects of Lisp.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>lisp</category>
      <category>scheme</category>
      <category>gui</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Theatre.js: Create intricate and powerful animations in JavaScript</title>
      <author>Matt Angelosanto</author>
      <pubDate>Fri, 12 Nov 2021 21:34:21 +0000</pubDate>
      <link>https://dev.to/logrocket/theatrejs-create-intricate-and-powerful-animations-in-javascript-1bff</link>
      <guid>https://dev.to/logrocket/theatrejs-create-intricate-and-powerful-animations-in-javascript-1bff</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ezesunday/"&gt;Eze Sunday&lt;/a&gt;✏️&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There’s plenty of buzz in the dev world around the relatively new &lt;a href="https://www.theatrejs.com/"&gt;Theatre.js&lt;/a&gt;. So, is it just another &lt;a href="https://blog.logrocket.com/web-animation-with-html-css-and-javascript/"&gt;JavaScript animation library&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;The answer is no, not really. Theatre.js is a motion graphics library that allows you to build powerful animations easily. According to &lt;a href="https://github.com/ariaminaei/theatre"&gt;the creators&lt;/a&gt;, “Theatre.js is an animation library for high-fidelity motion graphics. It is designed to help you express detailed animation, enabling you to create intricate movement, and convey nuance.”&lt;/p&gt;

&lt;p&gt;And, unlike &lt;a href="https://www.codeinwp.com/blog/best-javascript-animation-libraries/"&gt;other JavaScript and CSS animation libraries&lt;/a&gt;, Theatre.js is an animation library with a graphical user interface (GUI). The GUI allows you to build the animations visually with the editor integrated into your browser.&lt;/p&gt;

&lt;p&gt;It literally turns your browser into an animation studio — you’ll most likely only need to write the setup code, and that’s it.&lt;/p&gt;

&lt;p&gt;It even animates the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction"&gt;DOM&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API"&gt;WebGL&lt;/a&gt;, &lt;a href="https://threejs.org/"&gt;Three.js&lt;/a&gt;, HTML, and other JavaScript variables, meaning you can set it up and allow even a non-developer to create the animations on the browser with the Theatre.js editor.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_yytgBUJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/theatre-sample.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_yytgBUJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/theatre-sample.gif" alt="Theatre Sample" width="730" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Throughout this article, we’ll explore how to set up and create your own animation lab with JavaScript and Theatre.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://nodejs.org/en/"&gt;Node.js &amp;gt;10.15.1&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Basic understanding of JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-theatrejs"&gt;
  &lt;/a&gt;
  Setting up Theatre.js
&lt;/h2&gt;

&lt;p&gt;You can use Theatre.js with &lt;a href="http://vanilla-js.com/"&gt;Vanilla JavaScript&lt;/a&gt; or any JavaScript Library like React or Angular. In this article, we’ll use Theatre.js with Vanilla JavaScript and the &lt;a href="https://parceljs.org/"&gt;Parcel build tool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, let’s create a directory, initialize it with &lt;code&gt;npm init&lt;/code&gt;, and run the command below to install Theatre Core and Theatre Studio. Theatre Core is the main library, while Theatre Studio is the editor, which you’ll only need in design and development.&lt;/p&gt;

&lt;p&gt;Theatre Core:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt; @theatre/core &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Theatre Studio:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @theatre/studio &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we’ll create the necessary files we need to run the application. To make it easy to follow along, I’ve created a boilerplate for this article. Run &lt;code&gt;git clone https://github.com/ezesundayeze/theatrejs&lt;/code&gt; on your terminal to grab a copy of it.&lt;/p&gt;

&lt;p&gt;Edit the HTML document with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;src/index.html

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;143&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;113&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nf"&gt;#box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--box-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.boxContainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--box-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"boxContainer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type =&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let’s add the JavaScript code we linked to the HTML. Create an &lt;code&gt;index.js&lt;/code&gt; file and import Theatre and Theatre Studio, as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;core&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@theatre/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;studio&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@theatre/studio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, initialize Theatre Studio by adding &lt;code&gt;studio.initialize()&lt;/code&gt; to the existing code. It should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;core&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@theatre/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;studio&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@theatre/studio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;studio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the application with &lt;code&gt;npm run dev&lt;/code&gt; to see Theatre Studio in action. The little icon at the top left corner of the page shows that Studio is active.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YR7EgJNc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/icon-top-right.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YR7EgJNc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/icon-top-right.png" alt="Icon Top Left" width="730" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, we still won’t be able to do anything just yet, as our studio setup is incomplete.&lt;/p&gt;

&lt;p&gt;In Theatre.js, you’ll come across and use the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Projects&lt;/li&gt;
&lt;li&gt;  Sheets&lt;/li&gt;
&lt;li&gt;  Objects&lt;/li&gt;
&lt;li&gt;  Sequences&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s set them up in our studio.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#projects-in-theatrejs"&gt;
  &lt;/a&gt;
  Projects in Theatre.js
&lt;/h3&gt;

&lt;p&gt;A project in Theatre.js is the workspace in which all animation work will be done. Creating a project is as easy as adding the following line to your code after you’ve imported Theatre.js and Studio:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;soccer ball Animation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-sheets-in-theatrejs"&gt;
  &lt;/a&gt;
  Using sheets in Theatre.js
&lt;/h3&gt;

&lt;p&gt;A sheet is similar to a component in React. It holds objects that are animated together, and you can have more than one sheet within a project.&lt;/p&gt;

&lt;p&gt;This is how you add a sheet to a project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ballSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ballSheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h3&gt;

&lt;p&gt;An object in Theatre.js refers to the actual object to animate. In this object, we’ll set the default properties we’d like to animate. These props can be modified in the animation editor to create the type of animated look and feel we want.&lt;/p&gt;

&lt;p&gt;Here is an example on how to add the object props:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ballObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ballSheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;stretch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s take a look at how object properties will show up as controls in the editor when you run the app. You’ll need to slide them left to right, or vice-versa, to get the desired animation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mf0RVm9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/object-properties.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mf0RVm9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/object-properties.png" alt="Object Properties" width="730" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sequences"&gt;
  &lt;/a&gt;
  Sequences
&lt;/h3&gt;

&lt;p&gt;A sequence defines the order and manner in which related items follow each other. In Theatre.js, sequences define the order in which object properties move. It’s this movement that creates the actual animation.&lt;/p&gt;

&lt;p&gt;The section below is what allows you to create and modify the sequences:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W60WoMby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/sequences.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W60WoMby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/sequences.png" alt="Sequences" width="730" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each sequence has a &lt;code&gt;[position](https://docs.theatrejs.com/in-depth/#sequence-position)&lt;/code&gt;, which determines progress within the animation. The figures at the top of the bar show the position of the object at a certain instance. The default unit is in seconds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-animations-in-theatrejs"&gt;
  &lt;/a&gt;
  Creating animations in Theatre.js
&lt;/h2&gt;

&lt;p&gt;So, let’s add some animation to the HTML we used initially. First, select the target element, add the image we intend to use (it’s not required to be an image — you can create shapes or animate any item at all), and add some basic CSS to align the element on the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boxDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ball&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;soccer ball.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;boxDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this example, I’ll start the animation by clicking on the soccer ball. So, let’s add an &lt;code&gt;eventListener&lt;/code&gt; to the ball element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sequence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;iterationCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the ball is clicked, we can play the sequence by calling the &lt;code&gt;sequence.play()&lt;/code&gt; method. You can customize the sequence by passing an object with properties, such as &lt;code&gt;rate&lt;/code&gt;, which sets the speed of the sequence, and &lt;code&gt;iterationCount&lt;/code&gt;, which sets the number of times you want the sequence to play.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TTI4Cvvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/theatre-js.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TTI4Cvvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/theatre-js.gif" alt="Theatre JS" width="730" height="355"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the example above, I set it to play forever. &lt;code&gt;Range&lt;/code&gt; is the position range you want it to run through. We set ours to run from position &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;6&lt;/code&gt;. You can find more props in the &lt;a href="https://docs.theatrejs.com"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To see the animation progression, we’ll use the &lt;code&gt;.onValueChange&lt;/code&gt; method of the ball object and then set the CSS transformation to match the expected behavior.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ballObj&lt;/span&gt;&lt;span class="nc"&gt;.onValuesChange&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;y,&lt;/span&gt; &lt;span class="err"&gt;x,&lt;/span&gt; &lt;span class="err"&gt;angle,&lt;/span&gt; &lt;span class="err"&gt;stretch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;boxDiv.style.cssText&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;${&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;rotate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;translateY&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt; &lt;span class="err"&gt;stretch&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;stretch&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the transformation (&lt;code&gt;transform&lt;/code&gt; adds a 2D or 3D transformation to an element), we are using the &lt;code&gt;translateY&lt;/code&gt; and &lt;code&gt;translateX&lt;/code&gt; properties to modify the behavior of the transformation.&lt;/p&gt;

&lt;p&gt;We’ve now set up our Theatre.js animation studio to animate a soccer ball. You can view this in action below or click on this &lt;a href="https://c039j.csb.app/"&gt;link&lt;/a&gt; to see the demo on &lt;a href="https://codesandbox.io/s/late-pond-c039j?file=/src/index.js"&gt;CodeSandbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/embed/late-pond-c039j?fontsize=14&amp;amp;hidenavigation=1&amp;amp;theme=dark"&gt;https://codesandbox.io/embed/late-pond-c039j?fontsize=14&amp;amp;hidenavigation=1&amp;amp;theme=dark&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In production, you might want to turn off the studio. You can do so by calling the &lt;code&gt;studio.ui.hide()&lt;/code&gt; method. To restore it in development, call the &lt;code&gt;studio.ui.restore()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Finally, after playing around with the studio and creating your desired animation for the objects, you can export the studio state by clicking on &lt;strong&gt;Project, then Export&lt;/strong&gt;, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlRYLuhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/export.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlRYLuhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/export.png" alt="Export" width="730" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now link this state to your project by importing and adding it to your project instance, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./state.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;soccer ball Animation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations, you’ve set up your Theatre Studio and have explored some of its features. We have only scratched the surface. Keep in mind that there is still a lot to learn, as this project is less than two months old and still developing at the time of this writing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Theatre.js is an amazing project that gives you the power to craft your own animation studio. This has the potential to shape the web animation ecosystem as it gathers more adoption from the community, so now is a great time to jump in and start exploring &lt;a href="https://github.com/ariaminaei/theatre"&gt;Theatre.JS&lt;/a&gt; or &lt;a href="https://github.com/AriaMinaei/theatre/blob/main/CONTRIBUTING.md"&gt;contribute&lt;/a&gt; to developing the library further.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#are-you-adding-new-js-libraries-to-improve-performance-or-build-new-features-what-if-theyre-doing-the-opposite"&gt;
  &lt;/a&gt;
  Are you adding new JS libraries to improve performance or build new features? What if they’re doing the opposite?
&lt;/h2&gt;

&lt;p&gt;There’s no doubt that frontends are getting more complex. As you add new JavaScript libraries and other dependencies to your app, you’ll need more visibility to ensure your users don’t run into unknown issues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay JavaScript errors as if they happened in your own browser so you can react to bugs more effectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYla9PmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and &lt;a class="mentioned-user" href="https://dev.to/ngrx"&gt;@ngrx&lt;/a&gt;
/store. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app’s performance, reporting metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;Build confidently — &lt;a href="https://logrocket.com/signup/"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Understanding TypeScript object serialization</title>
      <author>Matt Angelosanto</author>
      <pubDate>Fri, 12 Nov 2021 21:14:05 +0000</pubDate>
      <link>https://dev.to/logrocket/understanding-typescript-object-serialization-251e</link>
      <guid>https://dev.to/logrocket/understanding-typescript-object-serialization-251e</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/faithngetich/"&gt;Faith Ng'etich&lt;/a&gt; ✏️&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we’ll learn about how systems communicate seamlessly with each other through a process called serialization and deserialization and how we can apply that in TypeScript. The process is seamless because of how the transferable data is handled.&lt;/p&gt;

&lt;p&gt;As a user, when you access any application, you do so to retrieve information. This information is made up of data that must be stored somewhere; this is where serialization comes in.&lt;/p&gt;

&lt;p&gt;By the end of this article, you should be able to understand how data transfers from one location to another, what format it transfers in, and the possible options for storing data streams. We’ll also cover technical issues that can arise when working with serialization in TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-serialization-vs-deserialization"&gt;
  &lt;/a&gt;
  What is serialization vs. deserialization?
&lt;/h2&gt;

&lt;p&gt;So what is serialization and deserialization? It is simply the process that allows a seamless transfer of data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i4CbVdHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/Serialization-deserialization-diagram-e1636039207818.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i4CbVdHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/Serialization-deserialization-diagram-e1636039207818.png" alt="Serialization And Deserialization Diagram, Showing Going From Multidimensional Object To Byte Stream And Back" width="728" height="127"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caching is a good real-life example of serialization and deserialization where data is stored in memory for faster retrieval.&lt;/p&gt;

&lt;p&gt;Cached data is transmitted through a network in a serialized format to be stored in memory, and then, every time the data is requested, it is deserialized back to an object.&lt;/p&gt;

&lt;p&gt;In this post, we will also look at different scenarios where serialization and deserialization processes are required. Generally, the serialization and deserialization process happens under the hood without you knowing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#significance-of-serialization"&gt;
  &lt;/a&gt;
  Significance of serialization
&lt;/h2&gt;

&lt;p&gt;Serialization is mainly used to store an object or when you want to transfer an object from one active script to another. The transfer could be from server to server, server to a client, or client to a server.&lt;/p&gt;

&lt;p&gt;Different systems must communicate with each other while accepting specific data formats. In this case, you control serialization and deserialization. Serialization eliminates the need for a gateway to receive these different data formats.&lt;/p&gt;

&lt;p&gt;Once serialization finishes, byte streams can be easily shared across multiple platforms. Deserialization is then done to reconstruct the data back to its original form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serialization-and-deserialization-use-cases"&gt;
  &lt;/a&gt;
  Serialization and deserialization use cases
&lt;/h2&gt;

&lt;p&gt;The following are a few examples of different use cases of when serialization and deserialization of data are needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#http-serialization"&gt;
  &lt;/a&gt;
  HTTP serialization
&lt;/h3&gt;

&lt;p&gt;HTTP uses serialization when transmitting data through a web browser. For example, a RESTFul service has an HTTP request with a message body whose contents are in a serialized form of an object.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#session-data-serialization"&gt;
  &lt;/a&gt;
  Session data serialization
&lt;/h3&gt;

&lt;p&gt;Session data is transmitted in a serialized format through a communication protocol across multiple virtual machines.&lt;/p&gt;

&lt;p&gt;An example of this is session-based authentication. When saving a user’s information in a serialized format in the server-side, a client can send a request to the server to retrieve the information, and the server processes the request then sends back a deserialized response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#redis-serialization"&gt;
  &lt;/a&gt;
  Redis serialization
&lt;/h3&gt;

&lt;p&gt;Redis is a type of database that reduces an application's load time using an in-memory dataset. Using serialization, the code converts to a persistable data structure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-streaming"&gt;
  &lt;/a&gt;
  Video streaming
&lt;/h3&gt;

&lt;p&gt;In an application that involves video streaming, the video is broken down into packets, which are a collection of bytes transmitted serially to the client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serialization-and-deserialization-benefits"&gt;
  &lt;/a&gt;
  Serialization and deserialization benefits
&lt;/h2&gt;

&lt;p&gt;Beyond general use cases, serialization provides numerous benefits, including helping with communication issues, deep copy, and caching.&lt;/p&gt;

&lt;p&gt;For instance, by allowing different computer designs to share objects simultaneously, we can store the state of any object directly, solving communication issues. An example of this is transferring data through a network such as web and mobile applications.&lt;/p&gt;

&lt;p&gt;In the case of &lt;a href="https://en.wikipedia.org/wiki/Object_copying#:~:text=Deep%20copy%20is,deep%20copy()%E2%80%9D%20function."&gt;deep copy&lt;/a&gt;, the cloning process is made simple and accurate by serializing an object into a byte array and deserializing it.&lt;/p&gt;

&lt;p&gt;And finally, for caching, the required time to build an object is more than the time taken in deserializing an object, which means serializing saves time by cashing the giant object.&lt;/p&gt;

&lt;p&gt;In TypeScript, since this is a simple scenario, you can call the JavaScript function &lt;code&gt;JSON.stringify&lt;/code&gt; to serialize an object to a JSON string and &lt;code&gt;JSON.parse&lt;/code&gt; deserializes the JSON string to an object. Below is an example of a serialized and deserialized &lt;code&gt;Person&lt;/code&gt; object using &lt;code&gt;JSON.stringify&lt;/code&gt; and &lt;code&gt;JSON.parse&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;JSON is a widely used data format, as it represents data as key-value pairs and it does not include class metadata (class definitions of objects like properties, methods, and events) since it’s structured data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Serializer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nl"&gt;Output1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Serialer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serialized_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;human&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Output1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;// {"name":"Serializer"}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deserialized_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serialized_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;// { name: 'Serializer }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out the official documentation to learn more about different examples of data types using &lt;code&gt;JSON.stringify&lt;/code&gt; and &lt;code&gt;JSON.parse.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-issues-when-serializingdeserializing-objects-in-typescript"&gt;
  &lt;/a&gt;
  Technical issues when serializing/deserializing objects in TypeScript
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#losing-type-information"&gt;
  &lt;/a&gt;
  Losing type information
&lt;/h3&gt;

&lt;p&gt;Looking at the &lt;code&gt;Person&lt;/code&gt; class example above, if you want to deserialize a JSON object back to a class instance, using &lt;code&gt;JSON.parse&lt;/code&gt; will not be enough*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;JSON.parse&lt;/code&gt; method returns a plain object and not a class object. Luckily some libraries like &lt;code&gt;Class-transformer&lt;/code&gt; can handle both serialization and deserialization of TypeScript classes without losing the type information.&lt;/p&gt;

&lt;p&gt;It allows you to transform plain objects to class objects using decorators. Check out the &lt;a href="https://github.com/typestack/class-transformer"&gt;official documentation to learn more about how you can easily serialize and deserialize a class&lt;/a&gt; using the methods it provides.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#securely-storing-serialized-data"&gt;
  &lt;/a&gt;
  Securely storing serialized data
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Output1&lt;/code&gt;string above can now either be transmitted to other machines or stored. To securely store serialized data, you can encrypt the data. In TypeScript, you can use a library called &lt;code&gt;crypto-js&lt;/code&gt; to encrypt the serialized objects.&lt;/p&gt;

&lt;p&gt;The requirement of using this tool is to have &lt;a href="https://blog.logrocket.com/node-js-best-practices-and-performance-analytics-in-2021/"&gt;Node.js and any node package manager installed&lt;/a&gt;. In this example, we will use nmp.&lt;/p&gt;

&lt;p&gt;To install &lt;code&gt;crypto-js,&lt;/code&gt; run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="nx"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
&lt;span class="c1"&gt;//Import it in your TS file&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CryptoJS&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;crypto-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;crypto-js/aes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serialized_data_encrytedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CryptoJS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                    &lt;span class="nx"&gt;serialized_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my serialized data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                                  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Different ways of storing data streams&lt;/p&gt;

&lt;p&gt;We have different ways we can serialize objects and store them. The factors to consider when doing this are the need for readability, data complexity, speed, and space constraints.&lt;/p&gt;

&lt;p&gt;These data streams can be stored in a database, memory, or file. In our example, we'll use YAML.&lt;/p&gt;

&lt;p&gt;When storing this data, ensure the data is secure to avoid possible tampering. One of the key elements of safe deserialization is to know what the data source is and that the data is safe.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-using-a-yaml-file"&gt;
  &lt;/a&gt;
  Advantages of using a YAML file
&lt;/h3&gt;

&lt;p&gt;YAML is a data serialization format that stands for “YAML ain’t markup language.”&lt;/p&gt;

&lt;p&gt;Using YAML when creating a domain-specific language (DSL) is an added advantage because it’s designed to provide readability. Strings in a YAML file don’t need to be quoted, hence its improved readability.&lt;/p&gt;

&lt;p&gt;Due to the nature of YAML’s features that handle complex data types, using YAML is ideal for small datasets and helps reduce performance-related issues.&lt;/p&gt;

&lt;p&gt;A simple example of how to store data in a YAML file is using the &lt;code&gt;js-yaml&lt;/code&gt; module. To use this, you must install &lt;code&gt;js-yaml&lt;/code&gt; and initialize it and the file stream:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yaml&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yaml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;js-yaml&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Serialization&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;db&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serialized_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yaml_formatted_serialized_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serealized_object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yaml_formatted_serialized_object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#advantages-of-using-a-database"&gt;
  &lt;/a&gt;
  Advantages of using a database
&lt;/h3&gt;

&lt;p&gt;A database is preferred when the following instances apply to the kind of data you’re serializing or deserializing.&lt;/p&gt;

&lt;p&gt;First, use a database when your application's code does not require constant change. For example, a dashboard with population data will rarely need precision insights. The goal here is to report the data.&lt;/p&gt;

&lt;p&gt;The data is only read once, hence performance is not prioritized; using a database in this instance is ideal.&lt;/p&gt;

&lt;p&gt;Second, if there is no need to select fields in the deserialized data structures, using a database is ideal. However, the downside of this is that it's almost impossible to know what type of queries you will need in the future.&lt;/p&gt;

&lt;p&gt;If you’re using the &lt;code&gt;LocalStorage&lt;/code&gt; datastore as a database, you can implement it with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Serialization&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;db&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;serialized_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// '{"name":"Serialization","category":"db"}'&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;serialized object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;serealized_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serialized object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// '{"name":"Serialization","category":"db"}'&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;serialized object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;serealized_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serialized object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that deserializing data using &lt;code&gt;JSON.parse()&lt;/code&gt; method returns a plain object and not a class object. Therefore, using &lt;code&gt;JSON.stringify&lt;/code&gt; and &lt;code&gt;JSON.parse&lt;/code&gt; is not enough when serializing class objects because you will lose type information.&lt;/p&gt;

&lt;p&gt;Luckily some libraries like &lt;code&gt;Class-transformer&lt;/code&gt; enable you to transform plain objects into class objects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-storing-data-streams-in-memory"&gt;
  &lt;/a&gt;
  Advantages of storing data streams in memory
&lt;/h3&gt;

&lt;p&gt;Storing serialized data in memory is ideal when the following scenarios apply.&lt;/p&gt;

&lt;p&gt;The first is when real-time data is required or you need a faster way to access the data. For instance, in the healthcare industry, immediate access to accurate patient information is crucial in potentially saving a life.&lt;/p&gt;

&lt;p&gt;When you're dealing with data that is time-sensitive, storing data streams in memory makes making split-second decisions, like working with stock exchange data, easier. How fast you get the data change is what determines whether you win or lose.&lt;/p&gt;

&lt;p&gt;And finally, when reducing an application’s load time, the fastest way for data retrieval is storing it in memory. For example, &lt;a href="https://blog.logrocket.com/how-to-use-redis-as-a-database-with-go-redis/"&gt;Redis uses an in-memory dataset that makes retrieving data faster&lt;/a&gt; since it doesn’t use the hard disk when storing data.&lt;/p&gt;

&lt;p&gt;Below is an example of how to store serialized data in Redis using the &lt;code&gt;SET&lt;/code&gt; and &lt;code&gt;GET&lt;/code&gt; commands, assuming you have Redis installed and running.&lt;/p&gt;

&lt;p&gt;To read the data, use the &lt;code&gt;GET&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="nx"&gt;SET&lt;/span&gt; &lt;span class="nx"&gt;serializedData&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"name":"Serialization","category":"db"}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;OK&lt;/span&gt;

&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;GET&lt;/span&gt; &lt;span class="nx"&gt;serializedData&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Serialization&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;category&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;db&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-pros-and-cons-of-serialization-and-deserialization"&gt;
  &lt;/a&gt;
  The pros and cons of serialization and deserialization
&lt;/h2&gt;

&lt;p&gt;As we’ve covered in this post, serialization and deserialization are incredibly useful in numerous use cases. But, what are the pros and cons of using serialization and deserialization?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros-of-serialization-and-deserialization"&gt;
  &lt;/a&gt;
  Pros of serialization and deserialization
&lt;/h3&gt;

&lt;p&gt;Because simple serialization in JavaScript does not require any third-party libraries, which can often be out-of-date and cause future problems, it avoids the need to mitigate security-related risks that come with using external dependencies.&lt;/p&gt;

&lt;p&gt;Serialization and deserialization are also not dependent on any specific platforms. This means that you can serialize data on one platform and deserialize it in another, which is useful when many current technologies rely on serialization and need this flexibility.&lt;/p&gt;

&lt;p&gt;Serialized data streams also support encryption, which leads to a smooth, safer process. The ability to encrypt your serialized data ensures that it is secure and more reliable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cons-of-serialization-and-deserialization"&gt;
  &lt;/a&gt;
  Cons of serialization and deserialization
&lt;/h3&gt;

&lt;p&gt;Although serialization and deserialization have many benefits, there are disadvantages to consider mitigating when using serialization and deserialization.&lt;/p&gt;

&lt;p&gt;While serialization and deserialization are useful mechanisms, the process is fragile, can lead to security problems, and adds complexity that can easily lead to security vulnerability if not used properly.&lt;/p&gt;

&lt;p&gt;The rule of thumb is that the more defensive code you write, the more secure your application will be.&lt;/p&gt;

&lt;p&gt;Deserialization also holds all variables, properties, and attributes assigned to an object, which makes the process dangerous or a point of vulnerability. It is important to write class-specific serializations methods that will not expose sensitive information about the data stream.&lt;/p&gt;

&lt;p&gt;Ensure that the deserialization process does not have any side effects as well.&lt;/p&gt;

&lt;p&gt;And, as we saw previously, serialization and deserialization involve data streams that demand an increase in an application’s memory requirements. This is as a result of all the memory allocations of objects and strings of your data streams and can easily lead to memory leaks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So far, we learned that serialization and deserialization allow the portability of objects and an overview of how you can store serialized streams of data with examples. At the end of the day, the choice of how to serialize and deserialize your data solely depends on your application needs.&lt;/p&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#writing-a-lot-of-typescript-watch-the-recording-of-our-recent-typescript-meetup-to-learn-about-writing-more-readable-code"&gt;
  &lt;/a&gt;
  Writing a lot of TypeScript? &lt;a href="https://blog.logrocket.com/typescript-meetup-recap/?utm_source=social&amp;amp;utm_medium=organic&amp;amp;utm_campaign=21Q3_WB_TS-Tech-Meetup0930#utm_source=social&amp;amp;utm_medium=organic&amp;amp;utm_campaign=21Q3_WB_TS-Tech-Meetup0930"&gt;Watch the recording&lt;/a&gt; of our recent TypeScript meetup to learn about writing more readable code.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/typescript-meetup-recap/?utm_source=social&amp;amp;utm_medium=organic&amp;amp;utm_campaign=21Q3_WB_TS-Tech-Meetup0930#utm_source=social&amp;amp;utm_medium=organic&amp;amp;utm_campaign=21Q3_WB_TS-Tech-Meetup0930"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dV4gcmr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/typescript-4-4-more-readable-code.png" alt="TypeScript meetup header" width="730" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
