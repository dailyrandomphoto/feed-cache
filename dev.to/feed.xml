<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🔥 Vue Tips #30: Reusability Fundamentals: The Configuration Pattern</title>
      <author>Michael Thiessen</author>
      <pubDate>Tue, 19 Oct 2021 15:26:53 +0000</pubDate>
      <link>https://dev.to/michaelthiessen/vue-tips-30-reusability-fundamentals-the-configuration-pattern-2dkf</link>
      <guid>https://dev.to/michaelthiessen/vue-tips-30-reusability-fundamentals-the-configuration-pattern-2dkf</guid>
      <description>&lt;p&gt;&lt;em&gt;This newsletter was sent out to my list on October 13, 2021. &lt;a href="https://michaelnthiessen.com/newsletter"&gt;Sign up here&lt;/a&gt; to get emails like this each week!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hey there,&lt;/p&gt;

&lt;p&gt;I'm still trying to adjust to the darkness this time of year in Canada.&lt;/p&gt;

&lt;p&gt;It's dark when I start work at 8, and dark again when I finish around 5. I work in my basement, so I don't get a lot of light during the day either.&lt;/p&gt;

&lt;p&gt;So I'm trying to take some time during the day to get outside and get some sunlight (and fresh air).&lt;/p&gt;

&lt;p&gt;Do you change your working habits throughout the year? A different schedule during winter or summer?&lt;/p&gt;

&lt;p&gt;— Michael&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-deal-with-dynamic-classes"&gt;
  &lt;/a&gt;
  🔥 How I deal with dynamic classes
&lt;/h2&gt;

&lt;p&gt;A pattern I use constantly is triggering classes with &lt;code&gt;boolean&lt;/code&gt; flags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"disabled &amp;amp;&amp;amp; 'disabled-component'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Sometimes this component is disabled. Other times it isn't.
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Some styles */&lt;/span&gt;
&lt;span class="nc"&gt;.disabled-component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkgray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;not-allowed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Either the trigger is a prop I use directly, or a computed prop that tests for a specific condition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If I just need one class on an element, I use the logical AND to trigger it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"disabled &amp;amp;&amp;amp; 'disabled-component'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes it's a decision between two classes, so I'll use a ternary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"disabled ? 'disabled-component' : 'not-yet-disabled'"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I don't often use more than two classes like this, but that's where an &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; comes in handy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{
    primary: isPrimary,
    secondary: isSecondary,
    tertiary: isTertiary,
  }"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"[
    isPrimary &amp;amp;&amp;amp; 'primary',
    isSecondary &amp;amp;&amp;amp; 'secondary',
    isTertiary &amp;amp;&amp;amp; 'tertiary',
  ]"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, when it gets complex enough it's better to just have a computed prop that returns a string of class names (or returns an &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"computedClasses"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reusability-fundamentals-the-configuration-pattern"&gt;
  &lt;/a&gt;
  🔥 Reusability Fundamentals: The Configuration Pattern
&lt;/h2&gt;

&lt;p&gt;So you've got an awesome &lt;code&gt;CodeBlock&lt;/code&gt; component that does syntax highlighting, and even shows line numbers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;CodeBlock&lt;/span&gt; &lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  const myMessage = 'Highlighting code is supa ez';
&lt;span class="nt"&gt;&amp;lt;/CodeBlock&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But now you need to support a second color theme.&lt;/p&gt;

&lt;p&gt;Instead of copy and pasting (which is sometimes the right solution!), we can use props to help us create variations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Uhhh, maybe not the best solution --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;DarkModeCodeBlock&lt;/span&gt; &lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  const myMessage = 'Highlighting code is supa ez';
&lt;span class="nt"&gt;&amp;lt;/DarkModeCodeBlock&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- This is what props were meant for --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;CodeBlock&lt;/span&gt;
  &lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"js"&lt;/span&gt;
  &lt;span class="na"&gt;theme=&lt;/span&gt;&lt;span class="s"&gt;"darkMode"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  const myMessage = 'Highlighting code is supa ez';
&lt;span class="nt"&gt;&amp;lt;/CodeBlock&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You already do this intuitively, so this may not be a huge revelation.&lt;/p&gt;

&lt;p&gt;But &lt;strong&gt;the Configuration pattern is a fundamental pattern&lt;/strong&gt; — you can't ignore it if you want to master reusability.&lt;/p&gt;

&lt;p&gt;Dealing with prop explosions and understanding the Base Component Pattern are also part of mastering Configuration, the second level of reusability.&lt;/p&gt;

&lt;p&gt;And the other, more interesting levels of reusability?&lt;/p&gt;

&lt;p&gt;Well, mastering Configuration is vital to unlocking them. All the other levels build on top of this one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-vue-for-a-vs-code-extension"&gt;
  &lt;/a&gt;
  📜 Using Vue for a VS Code extension?
&lt;/h2&gt;

&lt;p&gt;This is a very interesting article on creating your own VS Code extension...&lt;/p&gt;

&lt;p&gt;But you get to build the UI using Vue.&lt;/p&gt;

&lt;p&gt;It goes into all the steps necessary to set up and get your extension running. From there, the sky is the limit (unless you're building rockets 🚀).&lt;/p&gt;

&lt;p&gt;Read it now: &lt;a href="https://www.codemag.com/article/2107071"&gt;Building a VS Code Extension Using Vue.js&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%97%9E-nuxt-3-yeah-its-here"&gt;
  &lt;/a&gt;
  🗞 Nuxt 3! Yeah, it's here!
&lt;/h2&gt;

&lt;p&gt;It was officially released yesterday, and comes with some amazing stuff:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vue 3&lt;/li&gt;
&lt;li&gt;Vite&lt;/li&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;and so many other features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://nuxtjs.org/v3"&gt;Check it out here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, don't forget that &lt;a href="https://vuejs.london/"&gt;Vue.js London&lt;/a&gt; is happening next week!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repeated-failure"&gt;
  &lt;/a&gt;
  💬 Repeated failure
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;As a rule, software systems do not work well until they have been used, and have failed repeatedly, in real applications. — Dave Parnas&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think Dave is talking about edge cases.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;think&lt;/em&gt; you've covered them all, but you never have. Not until real users start using it for real.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spacedrepetition-reducing-objects"&gt;
  &lt;/a&gt;
  🧠 Spaced-repetition: Reducing Objects
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews 👨‍🔬&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actually remembering these tips is much more useful than just a quick distraction, so here's a tip from a couple weeks ago to jog your memory.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;reduce&lt;/code&gt; function is really great for converting arrays into objects, but it can be intimidating.&lt;/p&gt;

&lt;p&gt;If we have a bunch of items that all have an &lt;code&gt;id&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can reorganize the array into an object, where the key for each item is the item's &lt;code&gt;id&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Grab the id from the item&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Add the item to our object&lt;/span&gt;
  &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Return the object so we can add more items&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You get an object that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to group all objects in an array by a specific property, you can do something very similar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Grab the property from the item that we want to group by&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Add a new array to the object if this is the first one&lt;/span&gt;
  &lt;span class="c1"&gt;// with this value&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Add our item to this array&lt;/span&gt;
  &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Return the object so we can add more items&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our final object looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exclusive-tips-and-insights-every-week"&gt;
  &lt;/a&gt;
  Exclusive tips and insights every week
&lt;/h2&gt;

&lt;p&gt;Join 8335 other Vue devs and &lt;a href="//michaelnthiessen.com/newsletter"&gt;get exclusive tips and insights&lt;/a&gt; like these delivered straight to your inbox, every week.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have great content in your emails. I seriously learn something from every one of them. — Titus Decali&lt;/p&gt;

&lt;p&gt;Thanks for another beautiful tip 🙏 — Victor Onuoha&lt;/p&gt;

&lt;p&gt;Loving these, and the spaced repetition — Mark Goldstein&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="//michaelnthiessen.com/newsletter"&gt;Sign up here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>I will be notified if you click this 😈</title>
      <author>Shuvo</author>
      <pubDate>Tue, 19 Oct 2021 15:24:33 +0000</pubDate>
      <link>https://dev.to/0shuvo0/i-will-be-notified-if-you-click-this-7df</link>
      <guid>https://dev.to/0shuvo0/i-will-be-notified-if-you-click-this-7df</guid>
      <description>&lt;p&gt;Would you like to get notified when someone opens your &lt;strong&gt;dev.to&lt;/strong&gt; article or reads your email? Yea that will be awesome. Okay then lets see how we can do that?&lt;/p&gt;

&lt;p&gt;Lets talk about &lt;strong&gt;Images&lt;/strong&gt; they are pretty cool right? Imagers are everywhere including in Articles and Emails.&lt;br&gt;
So let see how image work.&lt;br&gt;
In markdown you use images like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;alt text&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://yoursite.com/some_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or in HTML you'd use the image tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://yoursite.com/some_image"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"alt text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and of course the markdown above is later compiled to HTML So lets focus on that.&lt;/p&gt;

&lt;p&gt;So when a webpage have an image the browser will send an http request to the URL which is in the src of the image(&lt;strong&gt;&lt;a href="https://yoursite.com/some_image"&gt;https://yoursite.com/some_image&lt;/a&gt;&lt;/strong&gt; in our case).&lt;br&gt;
And then &lt;strong&gt;&lt;a href="https://yoursite.com"&gt;https://yoursite.com&lt;/a&gt;&lt;/strong&gt; will send us and image which will be later shown to us in browser.&lt;br&gt;
So the server-side code of &lt;strong&gt;&lt;a href="https://yoursite.com/"&gt;https://yoursite.com/&lt;/a&gt;&lt;/strong&gt; could look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/some_image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some_image.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the question is, is it that all we can do? Well its our code we can do whatever we want. So why not just notify our self that someone viewed this image?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/some_image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;notifyUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//You can implement it the way you want&lt;/span&gt;
     &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some_image.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will be notified whenever a user sees our image. That also means that if we use this image in our article/email we will know when a user opens it/reads it.&lt;/p&gt;

&lt;p&gt;So if you're seeing this image that means ...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jyd6OXkG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16ay9r64s0rzzczwbdu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jyd6OXkG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16ay9r64s0rzzczwbdu2.png" alt="Meme image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>node</category>
      <category>security</category>
    </item>
    <item>
      <title>React User Authentication - Using JWT (Json Web Tokens)</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 19 Oct 2021 15:14:26 +0000</pubDate>
      <link>https://dev.to/sm0ke/react-user-authentication-using-jwt-json-web-tokens-4f81</link>
      <guid>https://dev.to/sm0ke/react-user-authentication-using-jwt-json-web-tokens-4f81</guid>
      <description>&lt;p&gt;Hello Coders! &lt;/p&gt;

&lt;p&gt;This article explains how to &lt;strong&gt;&lt;a href="https://blog.appseed.us/react-user-authentication-jwt-token/"&gt;Add User Authentication to React&lt;/a&gt;&lt;/strong&gt; using &lt;strong&gt;JSON Web Tokens&lt;/strong&gt; (JWT). We will start using an open-source template and mention all implementation steps that enhance the codebase. In the end, the project will be able to register and authenticate users using an open-source &lt;code&gt;Node JS API Server&lt;/code&gt; that exposes authentication routes and manages the persistence in the same way as this &lt;a href="https://node-js-react-soft-dashboard.appseed-srv1.com/authentication/sign-in"&gt;LIVE DEMO&lt;/a&gt;. In order to make this article more useful, at the end a shortlist with open-source &lt;strong&gt;React&lt;/strong&gt; Apps already enhanced with &lt;code&gt;JWT Authentication&lt;/code&gt; is mentioned.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;✨ Section #1: &lt;code&gt;Clone the React Template&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;✨ Section #2: &lt;code&gt;Analyze&lt;/code&gt; the Codebase&lt;/li&gt;
&lt;li&gt;✨ Section #3: &lt;code&gt;Code the API&lt;/code&gt; for backend communication&lt;/li&gt;
&lt;li&gt;✨ Section #4: &lt;code&gt;Code the React Store&lt;/code&gt; (frontend persistence)&lt;/li&gt;
&lt;li&gt;✨ Section #5: &lt;code&gt;Code the Authentication Flow&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;✨ Section #6: Start the &lt;code&gt;Node JS API Backend&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;✨ Section #7: &lt;code&gt;Start the React UI&lt;/code&gt; and test the authentication&lt;/li&gt;
&lt;li&gt;✨ Section #8: &lt;code&gt;Open-source React Samples&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;✨ Section #9: &lt;code&gt;Links &amp;amp; Resources&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case something is missing, feel free to ask for support in &lt;a href="https://appseed.us/support"&gt;Discord&lt;/a&gt; or use Github issues tracker of each free project to get assistance.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-download-the-react-template"&gt;
  &lt;/a&gt;
  ✨ #1 - Download the React Template
&lt;/h2&gt;

&lt;p&gt;The template used in this article is &lt;strong&gt;React Soft Dashboard&lt;/strong&gt;, an open-source product crafted by Creative-Tim and the source code can be downloaded from the &lt;a href="https://bit.ly/3kpwYdy"&gt;product page&lt;/a&gt;.  In case this design is not what you're looking for, feel free to use another one and adapt the code instructions to the new structure.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/3kpwYdy"&gt;React Soft Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/creativetimofficial/soft-ui-dashboard-react"&gt;React Soft Dashboard&lt;/a&gt; - source code (Github)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To successfully compile and run the project, the workstation should have a decent version of Node JS (12.x or above), GIT, and a modern code editor like VsCode or Atom. Here are the steps to compile the template using the source code published on Github:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;👉 Step #1 - Clone sources using GIT&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/creativetimofficial/soft-ui-dashboard-react.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;soft-ui-dashboard-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #2 - Install modules&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #3 - Start for development (with LIVE reload)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fc1sMUhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le805rquufdujq52yett.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fc1sMUhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le805rquufdujq52yett.png" alt="React Soft Dashboard - VR Page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-analyze-the-codebase"&gt;
  &lt;/a&gt;
  ✨ #2 - Analyze the Codebase
&lt;/h2&gt;

&lt;p&gt;After the download, the first logical step is to look around and see how the project is structured.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Detect master pages (layouts)&lt;/li&gt;
&lt;li&gt;Locate the authentication pages: SignIN, Register.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes, such pages aren't provided but in this case, we can use the default versions shipped by the template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;soft-ui-dashboard-react
    ├── public
    │   ├── index.html
    ├── src
    │   ├── assets
    │   │   ├── images
    │   │   └── theme
    │   ├── components
    │   ├── examples
    │   │   ├── Charts              &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Charts component &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
    │   │   ├── Footer              &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Footer component &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    │   │   ├── Navbars
    │   ├── layouts
    │   │   ├── authentication      
    │   │   │    ├── sign-in        &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Login  Page &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
    │   │   │    └── sign-up        &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; SignUP Page &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    │   │   ├── billing
    │   │   ├── dashboard           &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Dashboard Layout &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    │   │   ├── profile           
    │   │   ├── rtl                 &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; RTL Layout &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    │   │   ├── tables
    │   │   └── virtual-reality
    │   ├── App.js
    │   ├── index.js
    │   └── routes.js
    ├── package.json                &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Project Builder &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    └── README.md                   &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Contains Build Info &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#3-code-the-client-api"&gt;
  &lt;/a&gt;
  ✨ #3 - Code the Client API
&lt;/h2&gt;

&lt;p&gt;This section presents the necessary code that provides network communication with the API backend using &lt;a href="https://axios-http.com/docs/intro"&gt;Axios&lt;/a&gt;, a popular HTTP client. For newcomers, Axios is a library executable on the client and server-side (Node JS) using the same codebase.  For more information about Axios, feel free to access the official &lt;a href="https://axios-http.com/docs/intro"&gt;docs&lt;/a&gt; or play with the free &lt;a href="https://axios-http.com/docs/example"&gt;samples&lt;/a&gt;. Let's move forward and code our simple API interface:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;👉 Step #1 - Create a configuration file used by the API&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The file defines all the constants used in different places and contexts. For now, we need only the &lt;code&gt;API_SERVER&lt;/code&gt; address:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// File: src/config/constant.js
&lt;span class="nb"&gt;export &lt;/span&gt;const API_SERVER &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://localhost:5000/api/"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #2 - Create a new folder api in src folder&lt;/p&gt;
&lt;/blockquote&gt;




&lt;blockquote&gt;
&lt;p&gt;👉 Step #3 - Create an &lt;code&gt;index.js&lt;/code&gt; file with API configuration&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;API_SERVER&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../config/constant&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_SERVER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interceptors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interceptors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #4 - Create &lt;code&gt;auth.js&lt;/code&gt; that contains all API calls&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AuthApi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`users/login`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// don't forget to add the register and logout methods&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;AuthApi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, our &lt;code&gt;client-side&lt;/code&gt; API is coded and configured to communicate with the backend.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-code-the-react-store"&gt;
  &lt;/a&gt;
  ✨ #4 - Code the React Store
&lt;/h2&gt;

&lt;p&gt;In many React Apps, you will find that their store is based on React-Redux . Here we use React Context. We need to create the store in order to keep track of the user's account and determine whether we should allow the user on certain pages if they are not logged in. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;👉 Step #1 - Create a new &lt;code&gt;context&lt;/code&gt; folder in &lt;code&gt;src&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The file &lt;code&gt;src/context/auth.context.js&lt;/code&gt; will contain the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AuthContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AuthProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/AuthContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #2 - Bind together &lt;code&gt;Context Provider&lt;/code&gt; and the &lt;code&gt;App object&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// we get the user from the localStorage because that's where we will save their account on the login process&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AuthProvider&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Routes&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/AuthProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #3 - Define protected Routes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We need this feature in order to redirect guest users to authenticate before accessing the private pages (dashboard, profile page..).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ProtectedRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({..&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="c1"&gt;// component which inform the user that they must be logged in&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// let user through if they're logged in&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;{..&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below we have 2 examples of both protected and unprotected routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ProtectedRoute&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/rtl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;RtlLayout&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AuthLayout&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#5-code-the-auth-flow"&gt;
  &lt;/a&gt;
  ✨ #5 - Code the Auth Flow
&lt;/h2&gt;

&lt;p&gt;After you have identified the Auth Components you can start creating the Authentication process We'll take the &lt;code&gt;Login Component&lt;/code&gt; as an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//handle exceptions like: no email entered, no password entered, here.&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;AuthApi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//display error coming from server&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;setProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//display error originating from server / other sources&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;There has been an error.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On success (&lt;code&gt;user credentials&lt;/code&gt; are good) &lt;code&gt;setProfile&lt;/code&gt; helper is called to save the user information in the app store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//setUser is imported from the useAuth React Context&lt;/span&gt;
    &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//also set the user in local storage&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/admin/dashboard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code snippet extracts and saves the &lt;code&gt;JWT Token&lt;/code&gt; for later use (logout, user profile request).  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-start-the-node-js-api"&gt;
  &lt;/a&gt;
  ✨ #6 - Start the Node JS API
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/app-generator/api-server-nodejs"&gt;Node JS Backend Server&lt;/a&gt; is a simple one that exposes three API methods called from React, via &lt;code&gt;Axios&lt;/code&gt; library:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;👉 SignUP Method - &lt;code&gt;api/users/register&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;POST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;api/users/register&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Content-Type:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;application/json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"pass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"test@appseed.us"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 SignIN Method - &lt;code&gt;api/users/login&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;POST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/api/users/login&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Content-Type:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;application/json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"pass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"test@appseed.us"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Logout Method - &lt;code&gt;api/users/logout&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;POST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;api/users/logout&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Content-Type:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;application/json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;authorization:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;JWT_TOKEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;(returned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;request)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"token"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"JWT_TOKEN"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the complete information regarding this simple API server, feel free to access the &lt;a href="https://github.com/app-generator/api-server-nodejs"&gt;public repository&lt;/a&gt; or the &lt;a href="https://docs.appseed.us/boilerplate-code/api-server/node-js"&gt;official documentation&lt;/a&gt;.  Now, back to our tutorial, let's download and start the server:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;👉 Step #1 - Clone the sources&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/api-server-nodejs.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;api-server-nodejs 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #2 - Install dependencies via NPM or Yarn&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #3 - Run the &lt;code&gt;SQLite&lt;/code&gt; migration via &lt;code&gt;TypeORM&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn typeorm migration:run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #4 - Start the API server (development mode)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm dev
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the API server should be up and running on port &lt;code&gt;5000&lt;/code&gt;, the same port expected by the &lt;code&gt;React&lt;/code&gt; UI in the configuration (&lt;strong&gt;Section #3&lt;/strong&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File: src/config/constant.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5000/api/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#7-start-react-soft-dashboard"&gt;
  &lt;/a&gt;
  ✨ #7 - Start &lt;a href="https://appseed.us/product/node-js-react-soft-dashboard"&gt;React Soft Dashboard&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;All the above sample code can be found and downloaded from Github under the MIT License and used for commercial or learning projects.  Let's access the public repository and compile the React frontend by following the instructions provided in the README file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/react-soft-ui-dashboard"&gt;React Soft Dashboard&lt;/a&gt; - (full-stack version) source code&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://node-js-react-soft-dashboard.appseed-srv1.com/authentication/sign-in"&gt;React Soft Dashboard&lt;/a&gt; - (full-stack version) LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the necessary steps to download and compile Soft Dashboard React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/react-soft-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;react-soft-ui-dashboard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;








&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;








&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start 
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we should be able to visit the app in the browser on port &lt;code&gt;3000&lt;/code&gt;, register new users, authenticate and interact with the UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---YA4e8FS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et62dz1jgyc4b6agafvn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---YA4e8FS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et62dz1jgyc4b6agafvn.gif" alt="React User Authentication Sample - Soft Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-more-opensource-samples"&gt;
  &lt;/a&gt;
  ✨ #8 - More Open-source Samples
&lt;/h2&gt;

&lt;p&gt;In case Soft UI design is not the design you are looking for, we have other samples mentioned below that come with an identical authentication flow (login, logout, register) powered by JWT.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#react-berry-dashboard"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://appseed.us/product/react-node-js-berry-dashboard"&gt;React Berry Dashboard&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Berry is a creative React Dashboard build using the Material-UI. It is meant to be the best User Experience with highly customizable feature-rich pages. It is a complete game-changer React Dashboard with an easy and intuitive responsive design as on retina screens or laptops.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://appseed.us/product/react-node-js-berry-dashboard"&gt;React Node JS Berry&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://react-node-js-berry-dashboard.appseed-srv1.com/"&gt;React Node JS Berry&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZGA5Gld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sngvi5zwa4s59c8mr2ne.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZGA5Gld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sngvi5zwa4s59c8mr2ne.png" alt="React User Authentication Sample - Berry Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#react-purity-dashboard"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://appseed.us/product/node-js-react-purity-dashboard"&gt;React Purity Dashboard&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Purity UI Dashboard is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, and alerts, giving you the freedom of choosing and combining. All components can take variations in color, that you can easily modify using Chakra's style props.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://appseed.us/product/node-js-react-purity-dashboard"&gt;React Purity Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://node-js-react-purity-dashboard.appseed-srv1.com/#/auth/signin"&gt;React Purity Dashboard&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H_G9WTuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ku23oo7q3mre8uc28qm2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H_G9WTuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ku23oo7q3mre8uc28qm2.png" alt="React User Authentication Sample - Purity Dashboard. "&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-links-amp-resources"&gt;
  &lt;/a&gt;
  ✨ #9 - Links &amp;amp; Resources
&lt;/h2&gt;

&lt;p&gt;Authentication is an important feature for any product and JWT Authentication especially implemented in the right way will make an end-product more secure and reliable in front of the end-users. Here are some links related to this topic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://jwt.io/introduction"&gt;Introduction to JSON Web Tokens&lt;/a&gt; - a comprehensive article&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://auth0.com/docs/security/tokens/json-web-tokens"&gt;JSON Web Tokens&lt;/a&gt; - provided by Auth0 Service&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.softwaresecured.com/security-issues-jwt-authentication/"&gt;Security Issues in JWT Authentication&lt;/a&gt; - written by Olivia Harris &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>authentication</category>
      <category>jwt</category>
      <category>appseed</category>
    </item>
    <item>
      <title>UI vs UX</title>
      <author>RohitrajDeshmukh</author>
      <pubDate>Tue, 19 Oct 2021 14:31:55 +0000</pubDate>
      <link>https://dev.to/rohitrajdeshmukh/ui-vs-ux-4bna</link>
      <guid>https://dev.to/rohitrajdeshmukh/ui-vs-ux-4bna</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                   UI and UX are not the same thing.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-ui-design"&gt;
  &lt;/a&gt;
  What is UI Design?
&lt;/h3&gt;

&lt;p&gt;User interface design is focused on the look and layout. how each element of the product will look, including buttons, placeholders, text, images, checkboxes, and any visual interface elements people interact with.&lt;br&gt;
UI focuses on a products aspects like color palettes, button styles, animation, graphics, typography, diagrams, widgets, and many other elements to make the websites, applications, plugins, themes, etc.&lt;br&gt;
UI designers keep themselves updated on graphic patterns and design trends that evolve as customers tastes and behavior changes.&lt;br&gt;
UI designers create one version that scales content and elements to match any screen size. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-focus-of-ui-designer"&gt;
  &lt;/a&gt;
  Main focus Of UI Designer
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Graphic design: icons, shapes, and images to give meaning to the users actions.&lt;/li&gt;
&lt;li&gt;Colors of the interface, illustrations, buttons, and text&lt;/li&gt;
&lt;li&gt;Typography: fonts and styles such as bold, underlined, and italics.&lt;/li&gt;
&lt;li&gt;Page layout: spaces between blocks, number of elements on the graphic interface, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-ux-design"&gt;
  &lt;/a&gt;
  What is UX Design?
&lt;/h3&gt;

&lt;p&gt;User experience is the overall experience a user has with a company's products or services. Good and bad user experience design is determined by how easy or difficult it is to interact with each element or aspect of a product or service.&lt;br&gt;
User experience is the experience we have when we surf on a digital interface.&lt;br&gt;
UX design determines how the interface works and how people interact with it.&lt;br&gt;
UX designers conduct market research and analysis to educate themselves about customer’s needs and desires before designing the functionality of a product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-focus-of-ux-designer"&gt;
  &lt;/a&gt;
  Main focus of UX Designer
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Strategy.&lt;/li&gt;
&lt;li&gt;Understanding the users needs.&lt;/li&gt;
&lt;li&gt;Creation of prototypes, scenarios, etc.&lt;/li&gt;
&lt;li&gt;Easy to use, user-friendly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ui-vs-ux"&gt;
  &lt;/a&gt;
  UI vs UX
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         UI                       vs                   UX

1.UI stands for User                    1.Ux stands for User 
  Interface.                             Experience.

2.It refers to the Visual               2.Its about the feelings 
  elements that allow users               and emotions when 
  to interact with product.             interacting with product.

3.It focuses on the look                3.It focuses on overall    
  and feel.                               User friendliness.

4.The goal is to make product           4.The goal is to delight
  more usable and optimized               user with a product 
  for different screen size.              that is easy to use.

5.Mockups, Graphics, Layouts            5.Prototypes, Research, 
  etc.                                    Wireframes.

6.Visual strengths are task             6.Visual strengths are 
tasks flow and scenarios.                 colors and typography.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ux-vs-ui-tools-you-should-use"&gt;
  &lt;/a&gt;
  UX vs UI tools you should use.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Adobe XD: An all-in-one rapid prototyping tool for creating wireframes, interactive prototypes, and facilitating the design of web and mobile applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Figma: Collaborative prototyping tool where you can work online, remotely, live, and with several people.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zeplin: an interface simplifying communication between teams and making it easier to find your way around by automatically generating all the colors, fonts, sizes, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Marvel: A solution that helps quickly create animated models in just a few clicks. The Marvel application is available on Android and iOS to test live models in mobile version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maze: A very efficient tool for performing questionnaires and user tests remotely to generate detailed reports more quickly and easily.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🆕 Luos feature in the V2.0.0: the open-source bootloader
</title>
      <author>Emanuel Allely</author>
      <pubDate>Tue, 19 Oct 2021 14:25:53 +0000</pubDate>
      <link>https://dev.to/luos/luos-feature-in-the-v200-the-open-source-bootloader-1f5b</link>
      <guid>https://dev.to/luos/luos-feature-in-the-v200-the-open-source-bootloader-1f5b</guid>
      <description>&lt;p&gt;🆕 Luos feature in the V2.0.0: the open-source bootloader&lt;/p&gt;

&lt;p&gt;This feature is the big new one everyone has asked us for years. Now, you can compile Luos in bootloader mode. By compiling it this way, you can flash it to your board then use the Luos embedded network through a Gate to update your board firmware.&lt;/p&gt;

&lt;p&gt;This allows you to update any board/firmware anywhere on your device without having physical access to it. More information about bootloader: &lt;a href="https://docs.luos.io/pages/tools/boot.html"&gt;https://docs.luos.io/pages/tools/boot.html&lt;/a&gt; &lt;/p&gt;

</description>
      <category>embedded</category>
      <category>luos</category>
      <category>opensource</category>
      <category>release</category>
    </item>
    <item>
      <title>Developer Imposter Syndrome</title>
      <author>Tijan Ayomide</author>
      <pubDate>Tue, 19 Oct 2021 14:22:03 +0000</pubDate>
      <link>https://dev.to/nobletijan/developer-imposter-syndrome-3961</link>
      <guid>https://dev.to/nobletijan/developer-imposter-syndrome-3961</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-imposter-syndrome"&gt;
  &lt;/a&gt;
  What is Imposter Syndrome?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gfU8nD41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.istockphoto.com/vectors/imposter-syndromeshadow-woman-standing-for-her-present-profile-take-vector-id1296816192%3Fk%3D20%26m%3D1296816192%26s%3D612x612%26w%3D0%26h%3DZHYua8On04JzGOPZXG2EZ1gU0TmaF7aVF5l54tg8TZg%3D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gfU8nD41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.istockphoto.com/vectors/imposter-syndromeshadow-woman-standing-for-her-present-profile-take-vector-id1296816192%3Fk%3D20%26m%3D1296816192%26s%3D612x612%26w%3D0%26h%3DZHYua8On04JzGOPZXG2EZ1gU0TmaF7aVF5l54tg8TZg%3D" alt="Imposter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Imposter syndrome&lt;/strong&gt; according to  &lt;a href="https://en.wikipedia.org/wiki/Main_Page"&gt;wikipedia &lt;/a&gt; is a collection of feelings of inadequacy that persist despite evident success. 'Imposters' suffer from chronic self-doubt and a sense of intellectual fraudulence that override any feelings of success or external proof of their competence. Now that is out of the way why am I writing on Imposter syndrome? According to figures, developers are particularly prone to impostor syndrome.&lt;/p&gt;

&lt;p&gt;But today we are talking about &lt;strong&gt;Developer Imposter Syndrome&lt;/strong&gt; or I like to call it &lt;strong&gt;DIS&lt;/strong&gt;. DIS affects both junior, mid-level &amp;amp; senior developers making them dwell on the knowledge and coding languages that they don’t know. They scuffle to know their value and negatively compare their skills against the skills of others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U2SwfGCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.vecteezy.com/system/resources/previews/002/184/340/non_2x/imposter-syndrome-businessman-holding-a-mirror-with-fear-shadow-behind-anxiety-and-lack-of-self-confidence-at-work-the-person-fakes-is-someone-else-concept-vector.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U2SwfGCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.vecteezy.com/system/resources/previews/002/184/340/non_2x/imposter-syndrome-businessman-holding-a-mirror-with-fear-shadow-behind-anxiety-and-lack-of-self-confidence-at-work-the-person-fakes-is-someone-else-concept-vector.jpg" alt="Self-doubt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#characteristics-of-imposter-syndrome"&gt;
  &lt;/a&gt;
  Characteristics of Imposter Syndrome
&lt;/h2&gt;

&lt;p&gt;This are qualities one exhibit that shows he/she suffer from imposter syndrome one way or the other:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Self-doubt&lt;/li&gt;
&lt;li&gt;An inability to realistically assess your competence and skills&lt;/li&gt;
&lt;li&gt;Attributing your success to external factors&lt;/li&gt;
&lt;li&gt;Berating your performance&lt;/li&gt;
&lt;li&gt;Fear that you won't live up to expectations&lt;/li&gt;
&lt;li&gt;Overachieving &lt;/li&gt;
&lt;li&gt;Sabotaging your own success&lt;/li&gt;
&lt;li&gt;Setting very challenging goals and feeling disappointed when you fall short&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I myself struggle with number 8 once in a while, I remember creating a list of what i want to do the next day, the list can entail 20 activity to be achieved in a day, challenges that would take a month to complete i would want to complete within a span of a week. At the end of the day/week after failing to complete said objectives i begin to doubt myself and my ability to achieve anything.&lt;/p&gt;

&lt;p&gt;The problem with Developer Impostor Syndrome is that the experience of doing well at something does nothing to change your beliefs. Even though you might sail through a performance or push an update earlier than anyone, the thought still nags in your head, "What gives me the right to be here?" The more you accomplish, the more you just feel like a fraud. It's as though you can't internalize your experiences of success. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AmF55RjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.securly.com/wp-content/uploads/2018/05/securly-national-depression-awareness-month-v3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AmF55RjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.securly.com/wp-content/uploads/2018/05/securly-national-depression-awareness-month-v3.jpg" alt="self-doubt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recognizing-developer-imposter-syndrome"&gt;
  &lt;/a&gt;
  Recognizing Developer Imposter Syndrome 👀
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F6FhFJn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.insperity.com/wp-content/uploads/impostor_syndrome1200x630.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F6FhFJn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.insperity.com/wp-content/uploads/impostor_syndrome1200x630.png" alt="identifying-DIS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is estimated that 70% of people will experience at least one episode of this phenomenon in their lives. If you think you might have imposter syndrome, ask yourself the following questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Do you attribute your success to luck or outside factors?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do you agonize over even the smallest mistakes or flaws in your work?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do you downplay your own expertise, even in areas where you are genuinely more skilled than others?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do you agonize over even the smallest mistakes or flaws in your work?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#root-of-developer-imposter-syndrome-%F3%A0%81%B2%F3%A0%81%AF%F3%A0%81%AF%F3%A0%81%B4%F3%A0%81%BF%F3%A0%81%B2%F3%A0%81%AF%F3%A0%81%AF%F3%A0%81%B4%F3%A0%81%BF"&gt;
  &lt;/a&gt;
  Root of Developer Imposter Syndrome 🏴󠁲󠁯󠁯󠁴󠁿🏴󠁲󠁯󠁯󠁴󠁿
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-nA5ABx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.everydayhealth.com/images/migraine-and-ptsd-knowing-the-risk-and-relationship-1440x810.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-nA5ABx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.everydayhealth.com/images/migraine-and-ptsd-knowing-the-risk-and-relationship-1440x810.jpg" alt="Cause"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Certain factors can contribute to the more general experience of impostor syndrome. For example, you might have come from a family that highly valued achievement or had parents who flipped back and forth between offering praise and being critical.&lt;/p&gt;

&lt;p&gt;We also know that entering a new role can trigger impostor syndrome. For example, starting university or college or starting a new position in your place of work might leave you feeling as though you don't belong and are not capable. &lt;/p&gt;

&lt;p&gt;In the world of programming, developers of any experience or education can fall prey to developer impostor syndrome. This is, perhaps, due to the very nature of the tech industry. With so many approaches, languages, and methods in circulation, it’s impossible for any developer to know everything.&lt;/p&gt;

&lt;p&gt;Plus, as we gain new technology and understanding, previous methods can become obsolete. As such, development is a role in which programmers need to be constantly learning and open to new ideas and practices.&lt;/p&gt;

&lt;p&gt;So, when new or unknown methods, languages, and tools are needed, it’s easy for developers to feel inadequate. If unchecked, this can graduate to developer impostor syndrome.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-developer-imposter-syndrome"&gt;
  &lt;/a&gt;
  Managing Developer Imposter Syndrome
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pqRUUwqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.vecteezy.com/system/resources/previews/002/082/610/non_2x/imposter-syndrome-woman-standing-for-her-present-profile-with-get-award-anxiety-and-lack-of-self-confidence-at-work-the-person-fakes-is-someone-else-concept-vector.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pqRUUwqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.vecteezy.com/system/resources/previews/002/082/610/non_2x/imposter-syndrome-woman-standing-for-her-present-profile-with-get-award-anxiety-and-lack-of-self-confidence-at-work-the-person-fakes-is-someone-else-concept-vector.jpg" alt="managing-DIS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the biggest problems with developer impostor syndrome is the fact that it never really goes away. For programmers that do manage to overcome it, advancements in technology can easily cause the experience to reoccur 🥶. These tactics will help manage your imposter syndrome:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Embrace it&lt;/strong&gt;&lt;br&gt;
The first step to dealing with developer impostor syndrome is to learn to embrace it. This means remembering and recognizing that development is a role that requires constant learning. Developers should remind themselves that it’s impossible to know every new tool, language, and so on as soon as they’re released.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Take baby steps&lt;/strong&gt;&lt;br&gt;
Don't focus on doing things perfectly, but rather, do things reasonably well and reward yourself for taking action.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Keep track of your achievements&lt;/strong&gt;&lt;br&gt;
Developer impostor syndrome is caused by not recognizing your achievements and abilities and comparing yourself to other developers. So, a good way to combat developer impostor syndrome is to keep track of your achievements.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You could do this by creating a portfolio or timeline of your successes and your work, along with any time that you embraced new methods and growth. If you must then compare yourself to someone, compare your progress to your past self. In fact, a friend of mine actually does this @&lt;a href="https://dev.to@lordghostx"&gt;LordGhostX&lt;/a&gt; he created a timeline where he shows his past, present, and upcoming achievement.&lt;br&gt;
This can help you see how much you’ve grown and improved throughout your development career.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stop comparing&lt;/strong&gt;&lt;br&gt;
I feel this is common among youth, teens, and adults. But every time you compare yourself to others in a social situation, you will find some fault with yourself that fuels the feeling of not being good enough or not belonging. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Share your feelings&lt;/strong&gt;&lt;br&gt;
Talk to a friend, a mentor, or someone about how you are feeling. These irrational beliefs tend to fester when they are hidden and not talked about... &lt;br&gt;
&lt;/p&gt;


&lt;center&gt;&lt;em&gt;The numbers listing isn't following themselves&lt;/em&gt;&lt;/center&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Remember that if you are feeling like an impostor, it means you have some degree of success in your life that you are attributing to luck 😬 which is not supposed to be...&lt;br&gt;
Making mistakes and being wrong doesn't mean you are an imposter, it simply means you are achieving, learning, and moving forward 🏁🏁🏁.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>programming</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Internal Access Properties : Encouraging less brittle end-to-end testing</title>
      <author>Michael Warren</author>
      <pubDate>Tue, 19 Oct 2021 13:51:38 +0000</pubDate>
      <link>https://dev.to/michaelwarren1106/internal-access-properties-encouraging-less-brittle-end-to-end-testing-20jg</link>
      <guid>https://dev.to/michaelwarren1106/internal-access-properties-encouraging-less-brittle-end-to-end-testing-20jg</guid>
      <description>&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;When testing with web components you don't own that have shadow roots, its a much better experience for those components to expose first-class properties that expose DOM elements you'll likely need than for you to go digging in the shadow root with &lt;code&gt;querySelector&lt;/code&gt;. Adding first-class &lt;a href="#internal-access-properties"&gt;internal access properties&lt;/a&gt; makes tests written using third-party components WAY less brittle and keeps the SemVer contract intact.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-with-a-shadow-dom-component-you-dont-own"&gt;
  &lt;/a&gt;
  Testing with a shadow DOM component you don't own
&lt;/h2&gt;

&lt;p&gt;Imagine you're consuming a library of web components written by someone else, say the amazing ones from &lt;a href="https://shoelace.style/"&gt;Shoelace&lt;/a&gt; or &lt;a href="https://opensource.adobe.com/spectrum-web-components/"&gt;Adobe Spectrum&lt;/a&gt; and you have written some pretty complex user flows that you'd like to fully test end-to-end, putting yourself in the user's (automated) shoes and simulating clicks through your UI to make sure that your flows are working as intended as your user makes decisions.&lt;/p&gt;

&lt;p&gt;And, for the sake of argument, lets say that your flow has the user clicking through a few pages of results of a table, and your table has a pagination component on it like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;x-pagination&lt;/span&gt; &lt;span class="na"&gt;current-page=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;total-pages=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&amp;lt;/x-pagination&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;&amp;lt;x-pagination&amp;gt;&lt;/code&gt; component is responsible for creating all the pagination buttons that are possible, and highlighting the current page being shown, but the actual buttons the user sees in the UI are created entirely in the shadow DOM with something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// x-pagination.js&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;ul&amp;gt;
      &lt;/span&gt;&lt;span class="p"&gt;${[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;totalPages&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;li&amp;gt;&amp;lt;button class="internal-button" @click="emitPageClickEvent()"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="s2"&gt;
   &amp;lt;/ul&amp;gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;[...Array(this.totalPages - 1).keys()]&lt;/code&gt; syntax is just a shortcut to create an array with indexes numbered 0 through this.totalPages. And we can assume that &lt;code&gt;this.totalPages&lt;/code&gt; has been converted to a number type from its string attribute counterpart.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's not trouble ourselves with questions about whether or not this component API is correct, or even if the code in the render function is the right way to create pagination buttons. The main point is that &lt;em&gt;the buttons the user needs to click are generated inside the shadow DOM of &lt;code&gt;&amp;lt;x-pagination&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now lets say that your test needs to have the user click to page 3 of your dataset because you're testing that the filtering functionality of a larger page is working correctly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do you do?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How do you simulate the user going to page 3? You don't own the button that when clicked will emit the event that your code needs to do its "go to page 3 logic" and the component has no api to "change to page 3" because &lt;code&gt;current-page&lt;/code&gt; merely shows what page is currently being shown. What I have seen is that people will go digging into the shadow root to grab the element they need then call its &lt;code&gt;.click()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;That shadow root selector might look something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x-pagination&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button.internal-button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first it seems pretty straight-forward. You just query for the parent component, reach into its internals and query for the element you need. You are a dev, you can open Chrome's Dev Tools and &lt;code&gt;Inspect Element&lt;/code&gt; like nobody's business, so you know exactly what you're looking for and it all works.&lt;/p&gt;

&lt;p&gt;But there's a sneaky problem with this approach, and it'll rear its ugly head when the developer of those components changes the internals of &lt;code&gt;&amp;lt;x-pagination&amp;gt;&lt;/code&gt;. And since the internals are private, the developer can change the internal structure WITHOUT a SemVer breaking change release version. So one day soon, your automated dependency refresh pulls in the latest patch version and BOOM, your &lt;code&gt;querySelector&lt;/code&gt; is broken, your tests and pipeline fails and you get to go digging to find out that &lt;code&gt;button.internal-button&lt;/code&gt; doesn't exist anymore because the developer changed the class for some reason.&lt;/p&gt;

&lt;p&gt;So how can this unintentional breach of the SemVer contract be prevented? The component developer should provide a set of first-class &lt;strong&gt;internal access properties&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#internal-access-properties"&gt;
  &lt;/a&gt;
  Internal access properties
&lt;/h2&gt;

&lt;p&gt;What is an "Internal Access Property" you ask? Well for starters, it's a term that I just made up when thinking about this problem. I don't really know if there's an industry term for what I'm going to describe, so if there is, please let me know!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;br&gt;
An &lt;code&gt;internal access property&lt;/code&gt; is a component property exposed as a first-class API property on a component as a getter that returns either a DOM element or a DOM element collection from the internal component template.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our &lt;code&gt;&amp;lt;x-pagination&amp;gt;&lt;/code&gt; case, a set of internal access properties might look something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// x-pagination.js&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;XPagination&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;nextButton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button.next-button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;prevButton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button.prev-button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;pageButtons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.pagination-container button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What makes internal access properties different from "normal" properties in web components?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No setter since they are purely for retrieval&lt;/li&gt;
&lt;li&gt;Return a DOM element(s) instead of the usual primitives&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From a code perspective, there's not much more to it.&lt;/p&gt;

&lt;p&gt;Providing these properties can preemptively solve the unintentional breakage problem (by preventing your consuming developers from &lt;em&gt;having&lt;/em&gt; to write brittle test cases) and simplify internal access considerably.&lt;/p&gt;

&lt;p&gt;Providing a set of internal access properties with each component gives component consumers an access channel to use internal DOM elements when needed, both for testing and for unforeseen use cases where extension/reconfiguration are needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-makes-an-internal-access-property-different-than-querying-the-shadow-dom-from-the-outside"&gt;
  &lt;/a&gt;
  What makes an internal access property different than querying the shadow DOM from the outside?
&lt;/h3&gt;

&lt;p&gt;Without doubt the biggest benefit is &lt;em&gt;testability&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A consuming developer doesn't have an easy mechanism to test to make sure that some internal DOM element still exists for every single test. There's no unit tests that can easily be written by the consuming dev to make sure that all the internals of components they need to access are actually going to exist at test execution time. Also, there's no easy mechanism for devs to verify at dev time either, because their next CICD build could pull in a patch bump of that component package that breaks it.&lt;/p&gt;

&lt;p&gt;But the component developer can easily test and &lt;strong&gt;guarantee&lt;/strong&gt; an internal access property. Since they are first-class properties, they would be tested to a) make sure they actually exist and b) verify that they actually return the correct DOM element(s) they are supposed to even when the internal implementation approach changes. When those internals get removed or selectors being used to return those props get changed, &lt;strong&gt;the component's unit tests break&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, changing the internal implementation in a way that removes the need for some internal access property would be a breaking change and would cause a breaking change release.&lt;/p&gt;

&lt;p&gt;Recommending that consuming devs use your internal access properties instead of querying the shadow root allows everyone on either end of the development/consumption spectrum to trust in SemVer and allows consuming devs to be actually be able to write tests that aren't brittle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wont-consuming-developers-do-bad-things-with-dom-elements"&gt;
  &lt;/a&gt;
  Won't consuming developers do bad things with DOM elements?
&lt;/h3&gt;

&lt;p&gt;They already had access to the same DOM elements in the first place (with &lt;code&gt;open&lt;/code&gt; shadow roots). At the end of the day, we still write javascript. If a developer is willing to write a shadow DOM &lt;code&gt;querySelector&lt;/code&gt; they can already get access to component internals. Internal access properties make that process easier for supported use cases. And if/when developers do go mucking around with internal access properties and break things in their applications, component developers would tell them the same thing as if they queried the shadow DOM -- "Sorry but I can't support you since you're not using my approved API for its supported purpose".&lt;/p&gt;

&lt;p&gt;A huge reason we make Design Systems and component libraries is to enable developers, not to police them. (thanks &lt;a href="https://twitter.com/claviska"&gt;Cory&lt;/a&gt;) Sure, there will be times that those DOM elements get used for non-supported use cases, but the enablement we get from ensuring tests aren't brittle is WAY more important. As a component library author, the LAST thing I want to do is introduce unexpected breakages in consuming developers' apps OR tests. Internal access properties help cut down on those.&lt;/p&gt;

&lt;p&gt;But wait, there's more!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nested-internal-access-properties"&gt;
  &lt;/a&gt;
  Nested internal access properties
&lt;/h3&gt;

&lt;p&gt;Internal access properties don't always have to just query the immediate component's shadow root elements. They can also be nested so that an internal access property of a parent component returns an internal access property of a child component in complex cases.&lt;/p&gt;

&lt;p&gt;Here's an example. Lets say that &lt;code&gt;&amp;lt;x-pagination&lt;/code&gt; also has a text input feature (rendered entirely in the shadow root of course) that lets the user filter by some text entered. Lets say the prop that controls that is something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;x-pagination&lt;/span&gt; &lt;span class="na"&gt;with-filters&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="na"&gt;otherprops&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/x-pagination&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And when the &lt;code&gt;with-filters&lt;/code&gt; boolean attribute is present &lt;code&gt;x-pagination&lt;/code&gt; renders an &lt;code&gt;x-input&lt;/code&gt; alongside the pagination buttons. And we need to test our filtering mechanism too, so we need to type some value into that input and test what happens to our page. Again, we're not interested in directly testing the internal functionality of &lt;code&gt;x-pagination&lt;/code&gt; we're only trying to USE internal things from it to exercise our own tests. So we might do something like this, say using &lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt; syntax this time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x-pagination&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Filter Query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might be tempted to just set &lt;code&gt;.value&lt;/code&gt; on that input, but simply setting the value prop on a native &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; doesn't trigger any of the events that &lt;code&gt;x-input&lt;/code&gt; might be listening to and re-wrapping or re-emitting with custom event names and such, so using something like Cypress' &lt;code&gt;.type()&lt;/code&gt; function would be safer because they do some magic to make sure that those events are triggered.&lt;/p&gt;

&lt;p&gt;Here we have the same problem as before, but not if there's an internal access property. If &lt;code&gt;x-pagination&lt;/code&gt; and &lt;code&gt;x-input&lt;/code&gt; have properties like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;XPagination&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;nativeInput&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;nativeInput&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;XInput&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;nativeInput&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then, the tester could simply use the &lt;code&gt;nativeInput&lt;/code&gt; property on &lt;code&gt;x-pagination&lt;/code&gt; and be returned the native &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; from the internal &lt;code&gt;&amp;lt;x-input&amp;gt;&lt;/code&gt;'s shadow root.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x-pagination&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nativeInput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Its a simpler get, there's no explicit shadow DOM querying in the test, and the component developer has tested that &lt;code&gt;nativeInput&lt;/code&gt; exists and will return the right native &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; (twice actually, once in &lt;code&gt;x-pagination&lt;/code&gt; and once in &lt;code&gt;x-input&lt;/code&gt;). And if the component developer decides NOT to use &lt;code&gt;x-input&lt;/code&gt; anymore, and updates the &lt;code&gt;nativeInput&lt;/code&gt; property in a patch release, the above test doesn't break.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-testing-frameworks-require-using-the-native-element-for-interaction"&gt;
  &lt;/a&gt;
  Some testing frameworks require using the native element for interaction
&lt;/h4&gt;

&lt;p&gt;A quick word about testing frameworks is important to mention. Some frameworks like &lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt; might require that when you interact with elements, that they are the native ones. So if you are testing a complex component with nested components, you're going to need access to the native &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; at the end of the component tree so that Cypress' helper functions will work correctly and to avoid errors like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="nx"&gt;because&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;requires&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="nx"&gt;typeable&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;Thanks Brian for the call out&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Nested internal access properties can give testers access to the native elements directly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#async-internal-access-properties"&gt;
  &lt;/a&gt;
  Async internal access properties
&lt;/h3&gt;

&lt;p&gt;It's also possible, and probably desirable, to make your internal access properties &lt;code&gt;async&lt;/code&gt; as well. The nested case above isn't quite complete, because if the internal &lt;code&gt;x-input&lt;/code&gt; component isn't upgraded to a shadow DOM component when the &lt;code&gt;nativeInput&lt;/code&gt; property is being retrieved from &lt;code&gt;x-pagination&lt;/code&gt; for some reason, then you'd get a &lt;code&gt;null&lt;/code&gt; back.&lt;/p&gt;

&lt;p&gt;To prevent that, you can make your internal access properties return a &lt;code&gt;Promise&lt;/code&gt; that waits for the nested component property to be available. If that nested internal access prop is also async, then you can just await all the way down.&lt;/p&gt;

&lt;p&gt;Some web component authoring frameworks have mechanisms to let consumers wait until a component instance has been upgraded (like Lit's &lt;code&gt;await component.updateComplete&lt;/code&gt; &lt;a href="https://lit.dev/docs/components/lifecycle/#reactive-update-cycle-completing"&gt;docs&lt;/a&gt;) to do these kinds of retrievals and be sure that shadow DOMs are accessible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closed-shadow-roots"&gt;
  &lt;/a&gt;
  Closed shadow roots
&lt;/h3&gt;

&lt;p&gt;Through this article so far, my comments have largely been made assuming that the shadow roots in the example components were &lt;code&gt;open&lt;/code&gt; and accessible from the outside. But when a shadow root is closed, internal access properties become &lt;em&gt;even more important&lt;/em&gt; to provide because there is no access from the outside at all.&lt;/p&gt;

&lt;p&gt;If the third-party component is created like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyElement&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;div class="internal"&amp;gt;I'm a div in a closed shadow root.&amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then trying to access the internal div with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div.internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is impossible because the &lt;code&gt;shadowRoot&lt;/code&gt; property will be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For closed shadow root components, internal access properties are a MUST.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-kinds-of-internal-access-properties-should-be-provided"&gt;
  &lt;/a&gt;
  What kinds of internal access properties should be provided?
&lt;/h2&gt;

&lt;p&gt;The best place to start is any element that needs interaction and is created entirely in the shadow DOM. After all, those are the elements most likely to be used in tests.&lt;/p&gt;

&lt;p&gt;Think about exposing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Buttons&lt;/li&gt;
&lt;li&gt;Form elements&lt;/li&gt;
&lt;li&gt;Anchors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have a collection of related items, expose them as a collection to a) limit the number of props on your component, and b) let your consuming dev easily iterate/filter/sort them in tests however they need to.&lt;/p&gt;

&lt;p&gt;Some good collections might be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Datepicker date selection buttons&lt;/li&gt;
&lt;li&gt;Tab group tab change buttons&lt;/li&gt;
&lt;li&gt;Menu item elements in a menu (if they aren't slotted)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But as always, which internal access properties you expose is going to depend entirely on the kind of component you are creating and how the user will interact with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Providing internal access properties as a part of your web component's API can ease the testing burden considerably and prevent random test failures caused when a component's internal implementation changes over time.&lt;/p&gt;

&lt;p&gt;I'm sure I've only scratched the surface of the potential use cases for internal access properties, but I do know that once you start looking around for places where you can provide a set of them to your users, you'll find them all over the place. That [x] button in the top corner of your modal window might need clicking, the native input in your input fields might need typing into, internal buttons all over the place.&lt;/p&gt;

&lt;p&gt;As always, I'd love to know your thoughts as well. I have looked around various places and haven't seen a topic like this come up, so I'm sure I've missed it and would love some other perspectives on this idea.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>testing</category>
      <category>designsystems</category>
    </item>
    <item>
      <title>How I created my portfolio with Nextjs and PlainCSS!</title>
      <author>Randeep Rana</author>
      <pubDate>Tue, 19 Oct 2021 13:29:49 +0000</pubDate>
      <link>https://dev.to/randeeprana/how-i-created-my-portfolio-with-nextjs-and-plaincss-26ik</link>
      <guid>https://dev.to/randeeprana/how-i-created-my-portfolio-with-nextjs-and-plaincss-26ik</guid>
      <description>&lt;p&gt;At present Next.js has been a very popular library to build beautiful, scalable Full-Stack Applications. Today I would like to share my experience on building a portfolio with Next.js.&lt;/p&gt;

&lt;p&gt;Before going to my &lt;a href="https://rana-portfolio.vercel.app/"&gt;Portfolio's&lt;/a&gt; explanation, Let me give a brief intro about Next.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-nextjs"&gt;
  &lt;/a&gt;
  Why Next.js?
&lt;/h2&gt;

&lt;p&gt;Next.js is a React Framework used for front-end development that enables us to use functionalities such as generating static websites and server-side rendering for React-based web applications.&lt;/p&gt;

&lt;p&gt;It's a great tool to build your next website. It has many great features and advantages, which can make Next.js your first option for building your next web application.&lt;/p&gt;

&lt;p&gt;If you want to learn more about it please visit &lt;a href="https://nextjs.org/docs/getting-started"&gt;Next.js Official Website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-idea"&gt;
  &lt;/a&gt;
  The Idea.
&lt;/h2&gt;

&lt;p&gt;One Year ago⏲ I built &lt;a href="https://r-rana-portfolio.netlify.app/"&gt;my last portfolio&lt;/a&gt; website with React.js and SASS, and till now I was using that one. But Last weekend I thought why not make a new portfolio. Because it's my current fav framework so I picked Next.js and I started working on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;p&gt;Firstly I was planning🤔 to make it only single page portfolio, but then I decided to use Next.js routing and lets make different pages for different data, like about page, blog page, contact page and projects page.&lt;/p&gt;

&lt;p&gt;After Deciding Number of pages, I started working on Homepage or you can say landing page. I divided homepage into three sections, Hero Section, About, Skills. &lt;/p&gt;

&lt;p&gt;Background Videos in website is always excites😍 me, so I used a video in Hero Section's background, and I used &lt;a href="https://fonts.google.com/specimen/Kaushan+Script"&gt;Kaushan script&lt;/a&gt; fonts for Main Heading in Hero Section.&lt;/p&gt;

&lt;p&gt;In About Section, I added two boxes one for image and second for details and A button to read more, and it redirects to about page.&lt;br&gt;
For Skills section, I added logos of all framworks and technologies in a single box. I prefer logos instead of text because it creates attention.&lt;/p&gt;

&lt;p&gt;Let's come to Other Pages, For Project's Page I made reusable component, this component create a box and it divide the screen width equally into two boxes and one box contains the Project's Image and other box contains the project's title and description. I loop through this component in projects data array and my projects page is ready.&lt;/p&gt;

&lt;p&gt;About page contains the same component which we have in project page and I added my data in it and it works fine for about page as well. &lt;/p&gt;

&lt;p&gt;Please Have a look on my &lt;a href="https://rana-portfolio.vercel.app/"&gt;Portfolio&lt;/a&gt;🚀.&lt;/p&gt;

&lt;p&gt;If you want to check the source code please visit my &lt;a href="https://github.com/Randeep-Rana-au8"&gt;Github Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hope-you-liked-it"&gt;
  &lt;/a&gt;
  Hope you liked it
&lt;/h3&gt;

&lt;p&gt;Thank you guys for reading my first blog. Feel free to write your view and suggestion. Your feedback is always appreciated😄.&lt;/p&gt;

&lt;p&gt;Happy Coding😉&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>css</category>
      <category>javascript</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>Introducing Web Scraping with Scrapy.js</title>
      <author>Sijey</author>
      <pubDate>Tue, 19 Oct 2021 13:09:13 +0000</pubDate>
      <link>https://dev.to/sijeypraveen/introducing-web-scraping-with-scrapyjs-35pb</link>
      <guid>https://dev.to/sijeypraveen/introducing-web-scraping-with-scrapyjs-35pb</guid>
      <description>&lt;h1&gt;
  &lt;a href="#scrapyjs"&gt;
  &lt;/a&gt;
  Scrapy.js
&lt;/h1&gt;

&lt;p&gt;A Web Scraping library for JavaScript built using BeautifulSoup4.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#overview-of-this-library"&gt;
  &lt;/a&gt;
  Overview of this library
&lt;/h1&gt;

&lt;p&gt;First import the library using the script tag and then proceed to call the functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://sijey-praveen.github.io/scrapy.js/lib/scrapy.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-common-javascript-syntax-for-using-the-scrapy-object-looks-like-this"&gt;
  &lt;/a&gt;
  A common JavaScript syntax for using the Scrapy object looks like this:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Scrapy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://example.com/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html.parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;findElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#get-basic"&gt;
  &lt;/a&gt;
  Get Basic
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Scrapy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//creates an Scrapy object.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Scrapy()&lt;/code&gt; object needs 2 necessary arguments to further &lt;br&gt;
next step.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;url&lt;/strong&gt; &amp;gt; The source url.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;features&lt;/strong&gt; &amp;gt; This may be the name of a specific parser ("lxml", "lxml-xml", "html.parser").&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Scrapy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://example.com/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html.parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#findelement"&gt;
  &lt;/a&gt;
  findElement()
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;findElement()&lt;/code&gt; method is used to scrap the specific element from the given source url.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;findElement()&lt;/code&gt; method needs 3 necessary &amp;amp; 1 optional arguments to execute the program.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;class=hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;element&lt;/strong&gt; &amp;gt; the element you need to scrap.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;attrs&lt;/strong&gt; &amp;gt; you can specify element class and id or tags, if you need to specify class and id at the same time use &lt;code&gt;;&lt;/code&gt; to split it &lt;code&gt;attrs="class=hello;id=hello"&lt;/code&gt; (optional).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;get&lt;/strong&gt; &amp;gt; the element value you need to return.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;callback&lt;/strong&gt; &amp;gt; A callback function is executed after the current effect is finished.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#notice"&gt;
  &lt;/a&gt;
  Notice
&lt;/h1&gt;

&lt;p&gt;😜 You can use python &lt;code&gt;print()&lt;/code&gt; method to log stuffs in console once you imported Scrapy.js in your html.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#scraping-a-word-meaning-from-httpswwwdictionarycom"&gt;
  &lt;/a&gt;
  Scraping a word meaning from &lt;a href="https://www.dictionary.com/"&gt;https://www.dictionary.com/&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://sijey-praveen.github.io/scrapy.js/lib/scrapy.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.dictionary.com/browse/hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;meaning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Scrapy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html.parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;findElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;class=css-10ul8x e1q3nk1v2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;                
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#console-output"&gt;
  &lt;/a&gt;
  Console Output:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wp_UCYUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b876d29bqe1og3ccbolv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wp_UCYUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b876d29bqe1og3ccbolv.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#if-you-like-this-library-you-can-give-a-star-on-github-repo-and-support"&gt;
  &lt;/a&gt;
  if you like this library you can give a star 🌟 on GitHub Repo and support. 👍
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#github-httpsgithubcomsijeypraveenscrapyjs"&gt;
  &lt;/a&gt;
  GitHub : &lt;a href="https://github.com/sijey-praveen/scrapy.js"&gt;https://github.com/sijey-praveen/scrapy.js&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>{Completed my Hacktoberfest 2021-}</title>
      <author>Usama Jamil</author>
      <pubDate>Tue, 19 Oct 2021 13:08:16 +0000</pubDate>
      <link>https://dev.to/usamajamil67/completed-my-hacktoberfest-2021--2jki</link>
      <guid>https://dev.to/usamajamil67/completed-my-hacktoberfest-2021--2jki</guid>
      <description>&lt;p&gt;ALHAMDULILLAH, completed my first hacktoberfest 2021. &lt;/p&gt;

</description>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>How to choose between Next.js CSR, SSR, SSG, and ISR</title>
      <author>Theodorus Clarence</author>
      <pubDate>Tue, 19 Oct 2021 12:52:42 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/how-to-choose-between-nextjs-csr-ssr-ssg-and-isr-15o</link>
      <guid>https://dev.to/theodorusclarence/how-to-choose-between-nextjs-csr-ssr-ssg-and-isr-15o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;On my last blog, you have explored the technical side of how does it work underneath, now what you will need is how to choose between them. I'll give you 4 metrics and some use cases to help you decide.&lt;/p&gt;

&lt;p&gt;These metrics will generally work for &lt;strong&gt;most of the cases&lt;/strong&gt; but there might be some cases that are not fit with this metric.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;This post will not cover the technical difference between Client-Side Rendering, Server-Side Rendering, Static Site Generator, and Incremental Static Regeneration.&lt;/p&gt;

&lt;p&gt;You are encouraged to read my blog about &lt;a href="https://theodorusclarence.com/blog/nextjs-fetch-method"&gt;Understanding Next.js Data Fetching (CSR, SSR, SSG, ISR)&lt;/a&gt; first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#something-to-note"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Something to note&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Please do note that when we are talking about a website, you can use more than 1 fetch method. Use the necessary fetch method for each page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#review"&gt;
  &lt;/a&gt;
  Review
&lt;/h2&gt;

&lt;p&gt;Let's review the last blog to remember what are the characteristics of each.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client-Side Rendering (useEffect) → the data is fetched &lt;strong&gt;after every single render&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Server-Side Rendering → the data is fetched &lt;strong&gt;before every single render&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Static Site Generator → the data is fetched &lt;strong&gt;once at build time&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Incremental Static Regeneration → the data is fetched &lt;strong&gt;once on build time&lt;/strong&gt; and will be &lt;strong&gt;fetched again after a certain cooldown&lt;/strong&gt; and served on the second visit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep an eye on the frequency of each fetch method.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#metrics"&gt;
  &lt;/a&gt;
  Metrics
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RFCOQgXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/halzqv6l9gc67b29lj9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RFCOQgXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/halzqv6l9gc67b29lj9g.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, when I'm deciding what fetch method I should use, I consider these 4 metrics.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#metric-1-data-integrity"&gt;
  &lt;/a&gt;
  Metric 1: 🔄 Data Integrity
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OuLuPHT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ybfq4641lmbs3semvyv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OuLuPHT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ybfq4641lmbs3semvyv.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Data integrity is how fresh do you want the data to be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#high"&gt;
  &lt;/a&gt;
  High
&lt;/h3&gt;

&lt;p&gt;High integrity means that we want fresh data—the most updated one—&lt;strong&gt;every&lt;/strong&gt; &lt;strong&gt;single&lt;/strong&gt; &lt;strong&gt;render&lt;/strong&gt;. This is usually crucial for pages that are interactive and contain some critical value that can't be stale.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simply put:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We need the most updated data, every. single. time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Sites that benefit high data integrity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Products page that contains price → imagine you have a product page, and the price shown is not the most updated one. You might lose some dough.&lt;/li&gt;
&lt;li&gt;The comment section on Twitter → we want to see the most recent comment&lt;/li&gt;
&lt;li&gt;Social media → we want to see the most up-to-date content obviously.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#medium"&gt;
  &lt;/a&gt;
  Medium
&lt;/h3&gt;

&lt;p&gt;Medium integrity means that we want to serve fresh data, but it is not much of a problem if some users get stale data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simply put:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We should get fresh data, but it's okay if some still see the stale one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Sites that benefit medium data integrity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blog post with CMS → you can tolerate it when someone gets the stale page with minor typos&lt;/li&gt;
&lt;li&gt;Profile page → it is rarely updated and it is not that critical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note that &lt;strong&gt;only you&lt;/strong&gt; can decide what is critical. If you are mainly making a website to showcase your profile and portfolio with a high update rate, then it can be considered critical.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-to-none"&gt;
  &lt;/a&gt;
  Low to none
&lt;/h3&gt;

&lt;p&gt;Pages that fall into this category usually won't change or rarely change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simply put:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We don't really care, just fetch and show it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Sites that benefit low to none data integrity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;About page&lt;/li&gt;
&lt;li&gt;A page with fixed data that won't change → ex: a pokemon stat page (we will use this as an example later)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#table-result"&gt;
  &lt;/a&gt;
  Table Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ql96MDuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5tbvyby1ljq9c4753rp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ql96MDuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5tbvyby1ljq9c4753rp.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see on the illustration:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;High: CSR and SSR, as it fetches on every render&lt;/li&gt;
&lt;li&gt;Medium: ISR, we still can get the fresh data, but some user will still get the stale one&lt;/li&gt;
&lt;li&gt;Low to none: SSG, it is only fetched on build time&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#metric-2-seo"&gt;
  &lt;/a&gt;
  Metric 2: 🔍 SEO
&lt;/h2&gt;

&lt;p&gt;SEO (Search Engine Optimization) is going to be useful when we want our content to be easily found on google and bringing in that good organic visitors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QBwgeb_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0foly2qz3bmdtrx9a0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QBwgeb_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0foly2qz3bmdtrx9a0x.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I only have 2 categories for this, which are &lt;strong&gt;SEO Friendly&lt;/strong&gt; and &lt;strong&gt;Not SEO Friendly&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good"&gt;
  &lt;/a&gt;
  Good
&lt;/h3&gt;

&lt;p&gt;This category is expected when we are pre-rendering the content on the website, the general difference is when we are doing pre-render, we can see the content on the page source. This type of rendering will help search engines index our page and might put us up on the SEO ranking.&lt;/p&gt;

&lt;p&gt;SSR, SSG, ISG categorizes as SEO Friendly because the HTML is prefilled with the content without having to fetch it on the client-side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sites that can benefit SEO&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shopping website → it will be great if our products show up on search engine&lt;/li&gt;
&lt;li&gt;Quora-type website → site that provides an answer of course relies on SEO. You probably not going to search something directly from quora or stack overflow, but you start on google.&lt;/li&gt;
&lt;li&gt;Social media → contents need to be able to be searched on the internet&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#not-good"&gt;
  &lt;/a&gt;
  Not Good
&lt;/h3&gt;

&lt;p&gt;It is definitely not bad. Although we don't get any content on the page source, it doesn't mean that the search engine crawler can't index your page. The search engine can still index it, but it is not as friendly as the pre-rendered pages.&lt;/p&gt;

&lt;p&gt;CSR is categorized as Not SEO Friendly because we do not get any content until after the page renders.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sites that don't really need SEO&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication Gated Apps → things like a dashboard, premium content, or paid courses.&lt;/li&gt;
&lt;li&gt;Registration page&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#table-result"&gt;
  &lt;/a&gt;
  Table Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kREzdRyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8kkdsva56gtz5lu4f7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kREzdRyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8kkdsva56gtz5lu4f7z.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;SEO Friendly: SSR, SSG, and ISR all have very great SEO because they pre-render the fetched content&lt;/li&gt;
&lt;li&gt;Not SEO Friendly: CSR is not that good because we only get the data after render&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#metric-3-performance"&gt;
  &lt;/a&gt;
  Metric 3: ⏩ Performance
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XDN6jV-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7lckjheupok6vnm05vk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDN6jV-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7lckjheupok6vnm05vk.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Performance is whether it is loading when we visit the page or not. It should be very easy to differentiate now if you have read the first blog.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that performance in this metrics strictly means to the load time before First Contentful Paint, not to be generalized to the whole application performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#instant"&gt;
  &lt;/a&gt;
  Instant
&lt;/h3&gt;

&lt;p&gt;Instantly loads because the fetching does not happen when we request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loads-beforeafter-render"&gt;
  &lt;/a&gt;
  Loads before/after render
&lt;/h3&gt;

&lt;p&gt;There will be a slight loading on before or after renders.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-result"&gt;
  &lt;/a&gt;
  Table Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_iwR4OKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nbstxyhge39l8h8t46d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_iwR4OKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nbstxyhge39l8h8t46d.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, we obviously want better performance, so this is not something that you choose as the main metrics, but rather to consider.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Instant: SSG &amp;amp; ISR&lt;/li&gt;
&lt;li&gt;Loads before/after render: CSR &amp;amp; SSR&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#metric-4-build-time"&gt;
  &lt;/a&gt;
  Metric 4: ⏰ Build Time
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aV4J5F_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g1y8eykxmtu6nsme03x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aV4J5F_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g1y8eykxmtu6nsme03x.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build time is the amount of time it takes to build and deploy the website.&lt;/p&gt;

&lt;p&gt;This metric is to be considered when we are generating a bunch of pages with parameters, for example, &lt;code&gt;product/[name]&lt;/code&gt; or &lt;code&gt;pokemon/[name]&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fast-only-one-page"&gt;
  &lt;/a&gt;
  Fast (only one page)
&lt;/h3&gt;

&lt;p&gt;When we are using CSR and SSR, we only build 1 page because the data won't be fetched at build time.&lt;/p&gt;

&lt;p&gt;For example, if we are visiting &lt;code&gt;/pokemon/bulbasaur&lt;/code&gt; then we will take that parameter and use it to fetch it before or after render.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#slow-every-single-page"&gt;
  &lt;/a&gt;
  Slow (every single page)
&lt;/h3&gt;

&lt;p&gt;When we are using SSG and ISR, we are fetching it on build time and creating a page out of the response. So if we have 1000 products, it will take quite some time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1ert1_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o22hshhenssvibv1giqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1ert1_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o22hshhenssvibv1giqm.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-time-example"&gt;
  &lt;/a&gt;
  Build Time Example
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---io0qf4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzycfuejjtp7yez9vmyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---io0qf4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzycfuejjtp7yez9vmyq.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alt:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/ssr/poke/[name]&lt;/code&gt; only have 1 page even though it is serving 100 pokemon&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/ssg/poke/[name]&lt;/code&gt; have all of the pokemon names built into a page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is something that you'll need to consider if you have thousands of products, or you want to show all of the pokemon out there. We can't wait for them to finish building, using CSR or SSR should be the right answer.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cheatsheet"&gt;
  &lt;/a&gt;
  Cheatsheet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jG9h3IUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olho6yu5n352gz9qpw12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jG9h3IUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olho6yu5n352gz9qpw12.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#csr"&gt;
  &lt;/a&gt;
  CSR
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://next-usecase.thcl.dev/csr"&gt;https://next-usecase.thcl.dev/csr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EvU9Z8u4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hd0ofstrk2yesvwn73h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EvU9Z8u4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hd0ofstrk2yesvwn73h.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;there is a loading indicator when visited&lt;/li&gt;
&lt;li&gt;the data (repository detail) that is served is the most up to date&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's ideal for a dashboard and authentication-gated website. We need the latest data, and we don't really care about SEO.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssg"&gt;
  &lt;/a&gt;
  SSG
&lt;/h2&gt;

&lt;p&gt;I'll give SSG example first so we can compare it with SSR&lt;/p&gt;

&lt;p&gt;&lt;a href="https://next-usecase.thcl.dev/ssg"&gt;https://next-usecase.thcl.dev/ssg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qd2nqZFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoc71tvn75l99eh6wtqi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qd2nqZFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoc71tvn75l99eh6wtqi.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data fetched on build time at 13:58:38, when the current time is already 2 hours late—16:28:30&lt;/li&gt;
&lt;li&gt;It is instant and has no loading&lt;/li&gt;
&lt;li&gt;There are 10 pokemon data to choose&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This one is great for pokemon data because the data probably won't change for quite some time. And maybe you have a question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why not just store it as JSON and create every page?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We usually use SSG for convenience, adding hundreds of pages is quite repetitive and we can maintain it better if we use &lt;code&gt;getStaticProps&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssr"&gt;
  &lt;/a&gt;
  SSR
&lt;/h2&gt;

&lt;p&gt;You probably notice and have it in mind that apps that have high data integrity and have a good SEO should use SSR, for example, products page, comment section. The obvious example should be Quora, Reddit, Facebook, etc.&lt;/p&gt;

&lt;p&gt;But it is not always the case, here is the same pokemon app using SSR:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://next-usecase.thcl.dev/ssr"&gt;https://next-usecase.thcl.dev/ssr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1dEa-zA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5sbua7u4st07kzmpjo7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1dEa-zA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5sbua7u4st07kzmpjo7.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clicking the page takes a second or two before the page shows up&lt;/li&gt;
&lt;li&gt;Fetch time is the current time (meaning the data is fresh)&lt;/li&gt;
&lt;li&gt;There are considerably a lot of pokemon to choose&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This use case fits because there are about 900 pokemon, and if we build all of them using SSG, it is going to take a while. That is why you should also consider the build time metric.&lt;/p&gt;

&lt;p&gt;Well actually 900 is not that much, but imagine Amazon or eBay.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#isr"&gt;
  &lt;/a&gt;
  ISR
&lt;/h2&gt;

&lt;p&gt;ISR is quite fun and might be the common grounds between the 4 fetch methods, but we need to emphasize the data integrity. ISR can still give stale data, so it will be dangerous if you are using it on a critical process.&lt;/p&gt;

&lt;p&gt;For this example, I suggest you visit it yourself&lt;/p&gt;

&lt;p&gt;What to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Try to star the repo that is linked in the demo page (&lt;strong&gt;disclosure&lt;/strong&gt;: you are going to star my personal repository, kindly keep it starred if you like this post 😉)&lt;/li&gt;
&lt;li&gt;Wait for about 5-10 seconds&lt;/li&gt;
&lt;li&gt;Refresh the page &lt;strong&gt;twice&lt;/strong&gt; (remember how ISR works)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Demo page: &lt;a href="https://next-usecase.thcl.dev/isr"&gt;https://next-usecase.thcl.dev/isr&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You done? Cool!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can see that the data will still update, but we can have medium data integrity and still have a good performance.&lt;/p&gt;

&lt;p&gt;This is very useful if you are creating a blog with CMS, and it will be updated without having to rebuild the whole site.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#additional-resource"&gt;
  &lt;/a&gt;
  Additional Resource
&lt;/h2&gt;

&lt;p&gt;There is a pattern that uses ISR and &lt;a href="http://swr.vercel.app/"&gt;SWR&lt;/a&gt; library, it follows optimistic UI by mutating the value, and regenerating on the background.&lt;/p&gt;

&lt;p&gt;I'm not going to cover this topic, but Joe Bell has a really &lt;a href="https://joebell.co.uk/blog/updating-static-next-js-pages-instantly"&gt;great article&lt;/a&gt; about it.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Save the 4 metrics cheatsheet, and try to consider each of them when you want to choose.&lt;/p&gt;

&lt;p&gt;Remember you can use multiple fetch methods on different pages. You can use CSR on the dashboard, and also use SSR on the product page. Use the best one.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How To Install Linux, Apache, MySQL, PHP On Ubuntu</title>
      <author>Devtonight</author>
      <pubDate>Tue, 19 Oct 2021 12:30:42 +0000</pubDate>
      <link>https://dev.to/devtonight/how-to-install-linux-apache-mysql-php-on-ubuntu-76b</link>
      <guid>https://dev.to/devtonight/how-to-install-linux-apache-mysql-php-on-ubuntu-76b</guid>
      <description>&lt;p&gt;LAMP stack or Linux, Apache, MySQL and PHP are the main essential set of tools that you need to develop or run a PHP based web application or a CMS (Content Management System) such as Laravel and WordPress.&lt;/p&gt;

&lt;p&gt;Usually, when we develop an application, we create at least 3 different and separate environments for development, stage and production. In this guide, mainly you will be able to learn how to install and set up the LAMP stack. Additionally, you will be able to learn how to install Composer, NPM and troubleshoot possible errors which can be occurred when setting up the MySQL server and phpMyAdmin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lamp-linux-apache-mysql-php-stack-setup"&gt;
  &lt;/a&gt;
  LAMP (Linux, Apache, MySQL, PHP) Stack Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#linux-installation"&gt;
  &lt;/a&gt;
  Linux Installation
&lt;/h3&gt;

&lt;p&gt;You can install LAMP stack on any Linux distribution such as &lt;a href="https://ubuntu.com/"&gt;Ubuntu&lt;/a&gt;, &lt;a href="https://getfedora.org/"&gt;Fedora&lt;/a&gt; and &lt;a href="https://www.centos.org/"&gt;CentOS&lt;/a&gt;. Since different distributions use their package managers, we are using Ubuntu 20.04 LTS for this guide. If you need to install Ubuntu 20.04 LTS, refer to the &lt;a href="https://devtonight.com/posts/how-to-install-ubuntu-2004-lts-for-beginners"&gt;Ubuntu 20.04 LTS installation guide&lt;/a&gt; which explains everything step-by-step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-repository-update"&gt;
  &lt;/a&gt;
  Software Repository Update
&lt;/h3&gt;

&lt;p&gt;Before installing any application, the very first thing that you need to do is updating the software repository of your system and installing any available updates. You need to execute these administrative commands with “root” privileges, we are using &lt;code&gt;sudo&lt;/code&gt; for that. Enter the following commands, the first command will update the repository and the second command will download and install necessary updates. We are using the &lt;code&gt;-y&lt;/code&gt; flag to indicate that we do not need to confirm each action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update -y
sudo apt-get upgrade -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#apache-php-and-php-modules-installation"&gt;
  &lt;/a&gt;
  Apache, PHP And PHP Modules Installation
&lt;/h3&gt;

&lt;p&gt;Again, enter the following command. It will take few minutes to complete the installation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install apache2 curl php php-bcmath php-cli php-curl php-gd php-intl php-mbstring php-mysql php-pgsql php-sqlite3 php-xdebug php-xml php-zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should be able to access the Apache webserver by going to &lt;a href="http://localhost/"&gt;http://localhost&lt;/a&gt; address from your web browser. Make sure it does &lt;strong&gt;not&lt;/strong&gt; start with “&lt;strong&gt;https&lt;/strong&gt;”. If everything is installed properly, you should be able to see the Apache welcome screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--buLhJO9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39dgxxtzv3j8tu9xnu7p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--buLhJO9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39dgxxtzv3j8tu9xnu7p.png" alt="Apache2 Installation Welcome Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can access your web pages (PHP, HTML,..) in &lt;code&gt;/var/www/html&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#composer-dependency-manager-installation"&gt;
  &lt;/a&gt;
  Composer dependency manager installation
&lt;/h3&gt;

&lt;p&gt;Composer is a dependency manager which you can use to manage PHP packages in your application. Mainly, Composer eliminates the requirement of manually downloading package files. In addition to that, it maintains a record of which packages and versions have been used for the application that we are developing. Once you included the &lt;code&gt;composer.json&lt;/code&gt; and &lt;code&gt;composer.lock&lt;/code&gt; files in your source code, another developer can install the required packages with the same versions without making version conflicts.&lt;/p&gt;

&lt;p&gt;Enter the following command to download Composer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -sS https://getcomposer.org/installer | php
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make it globally available for all the users in the system, so you will be able to use it anywhere regardless of the path of your project or the user currently logged in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mv composer.phar /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make it executable, then you will be able to use it by typing &lt;code&gt;composer&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo chmod +x /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now check whether Composer has been successfully installed by entering the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer -V
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should print the version of Composer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nodejs-npm-package-manager-installation"&gt;
  &lt;/a&gt;
  NodeJS NPM package manager installation
&lt;/h3&gt;

&lt;p&gt;NPM or Node Package Manager is a tool that is similar to Composer but for JavaScript packages. You can use NPM to manage JavaScript packages.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://nodejs.org/en/download"&gt;https://nodejs.org/en/download&lt;/a&gt; and download the Linux binary tar.xz file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CiE3rs2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhtif62vbz5x08p1s9gp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CiE3rs2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhtif62vbz5x08p1s9gp.png" alt="NodeJS Download Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open its download directory using the file manager and open a terminal window from there by right-clicking and selecting the “Open in Terminal”.&lt;/p&gt;

&lt;p&gt;Type this command in the terminal to create a directory for NodeJS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir ~/nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter the following command to extract the downloaded file to the nodejs directory that we have created. Since the download file name change from time to time with its version numbers, make sure to type the same file name that you have downloaded. We are using the &lt;code&gt;-C&lt;/code&gt; flag to mention the destination path and &lt;code&gt;--strip-components=1&lt;/code&gt; to directly extract files in to the nodejs directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tar -xf node-v14.17.6-linux-x64.tar.xz -C ~/nodejs --strip-components=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to make NodeJS available accessible with terminal, for that type following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "export PATH=$PATH:~/nodejs/bin" &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will apply the changes and make them available immediately through the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure NodeJS and NPM are installed properly by typing the following commands. They should print the current version numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is optional, but if you need you can use this command to delete the downloaded file tar.xz.This command is optional, but if you need you can use this command to delete the downloaded file tar.xz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mv node-v14.17.6.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mysql-server-installation"&gt;
  &lt;/a&gt;
  MySQL Server Installation
&lt;/h3&gt;

&lt;p&gt;Run the following command to install the MySQL server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install mysql-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is optional since we are building a development environment. But still, you can run the following command to secure the MySQL server if you are concern about the security.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#phpmyadmin-installation"&gt;
  &lt;/a&gt;
  phpMyAdmin installation
&lt;/h3&gt;

&lt;p&gt;phpMyAdmin is a web-based tool that you can use to browser databases in the MySQL server. Run the following command to install it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install phpmyadmin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you run that command, within few seconds, it will ask the web server that you are using. Select &lt;code&gt;apache2&lt;/code&gt; by using up/down arrow keys and press space to select it. Then press the tab key to select “Ok” and press enter key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dY8OtgJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a8muphpjvojswh6b9vd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dY8OtgJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a8muphpjvojswh6b9vd.png" alt="phpMyAdmin Webserver Selection Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again it will ask to configure the database for phpMyAdmin with dbconfig-common, select “Yes” and press the enter key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uZ-XT9RL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vbdq4t7xyllxnd9kz27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uZ-XT9RL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vbdq4t7xyllxnd9kz27.png" alt="phpMyAdmin Installation dbconfig-common Configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, it will ask for a password, just leave it blank by pressing the enter key to generate a password by itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cUxnEVvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usja9bpipolc8ki9mvn6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cUxnEVvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usja9bpipolc8ki9mvn6.png" alt="phpMyAdmin Installation Password"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now check whether that you can access the phpMyAdmin login page by visiting &lt;a href="http://localhost/phpmyadmin"&gt;http://localhost/phpmyadmin&lt;/a&gt;. But sometimes you will not be able to login with the “root” MySQL account as it shows an error called “Login without a password is forbidden by configuration”. This is a security measure implemented by phpMyAdmin and you can easily fix it by following &lt;a href="https://devtonight.com/questions/how-to-fix-phpmyadmin-login-without-a-password-is-forbidden-by-configuration-error"&gt;how to fix phpMyAdmin “Login without a password is forbidden by configuration” error&lt;/a&gt;. Again, you might get another error called mysqli_real_connect(): (HY000/1698): Access denied for user ‘root’@'localhost'. This can be happened due to the default MySQL Unix socket based authentication. Learn &lt;a href="https://devtonight.com/questions/how-to-fix-mysqli-real-connect-hy0001698-access-denied-for-user-root-at-localhost-error"&gt;how to fix mysqli_real_connect(): (HY000/1698): Access denied for user ‘root’@'localhost' error&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now try to login to the phpMyAdmin with “root” user and a blank password. You should be able to see a similar page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kjFMNwxH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3eb6jf2q5ho27fsf4xn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kjFMNwxH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3eb6jf2q5ho27fsf4xn9.png" alt="phpMyAdmin PMA Welcome Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this guide, mainly we explained the installations of Apache web server, PHP and MySQL DBMS (Database Management System). Also, we explained the installations of phpMyAdmin, Composer and NPM package manager. Additionally, we discussed the possible troubleshooting with MySQL server and phpMyAdmin. What do you think about this guide? Let us know your thoughts in the comment section.&lt;/p&gt;

&lt;p&gt;Feel free to visit &lt;a href="https://devtonight.com"&gt;devtonight.com&lt;/a&gt; for more related content.&lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>apache</category>
      <category>mysql</category>
      <category>php</category>
    </item>
  </channel>
</rss>
