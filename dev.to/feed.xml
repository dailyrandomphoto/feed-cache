<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>15 minutes to create a personal assistant that can search on wikipedia (and tell some horrible jokes)</title>
      <author>Leonardo Bonetti</author>
      <pubDate>Tue, 02 Mar 2021 14:32:42 +0000</pubDate>
      <link>https://dev.to/leonardbonetti/15-minutes-to-create-a-personal-assistant-that-can-search-on-wikipedia-and-tell-some-horrible-jokes-1bc7</link>
      <guid>https://dev.to/leonardbonetti/15-minutes-to-create-a-personal-assistant-that-can-search-on-wikipedia-and-tell-some-horrible-jokes-1bc7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;On a boring day at work, a colleague and I were talking to Alexa, when a bet arose due to the joke, creating a virtual assistant in 15 minutes.&lt;/p&gt;

&lt;p&gt;Alexa has a multitude of functions, so to make the challenge possible ours should just take questions about common topics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#then-we-choose-the-following-rules" class="anchor"&gt;
  &lt;/a&gt;
  Then we choose the following rules:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The assistant must interact with you by speaking your name&lt;/li&gt;
&lt;li&gt;Responses must be in audio&lt;/li&gt;
&lt;li&gt;Searches must be carried out using wikipedia&lt;/li&gt;
&lt;li&gt;Tell some jokes&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lets-code" class="anchor"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#create-project" class="anchor"&gt;
  &lt;/a&gt;
  Create project
&lt;/h3&gt;

&lt;p&gt;I can't code without typescript anymore, so...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y &amp;amp;&amp;amp; npx ts-init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Check that your &lt;code&gt;tsconfig.json&lt;/code&gt; file is as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "compilerOptions": {
    "lib": [
      "es6",
      "DOM"
    ],
    "alwaysStrict": true,
    "strictNullChecks": true,
    "noImplicitAny": true,
    "esModuleInterop": true,
    "resolveJsonModule": true
  },
  "files": [
    "src/index.ts"
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lets-get-our-packages" class="anchor"&gt;
  &lt;/a&gt;
  Lets get our packages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm i --save say&lt;/code&gt; &lt;a href="https://www.npmjs.com/package/say"&gt;Say&lt;/a&gt; is an amazing TTS (Text-to-Speech) library, it will help us with a voice to our robot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm i --save wikipedia&lt;/code&gt; &lt;a href="https://www.npmjs.com/package/wikipedia"&gt;Wikipedia&lt;/a&gt; is a simple lib that abstract the wiki endpoints and make our lives easier&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#add-some-jokes" class="anchor"&gt;
  &lt;/a&gt;
  Add some Jokes
&lt;/h3&gt;

&lt;p&gt;Create a file named &lt;code&gt;src/jokes.json&lt;/code&gt;, copie the content of this &lt;a href="https://gist.githubusercontent.com/LeonBonetti/6101b34414761fc4567acb2eb930598a/raw/2454af2e5c362c58b6dd2397bc91fa6c4377bd2f/jokes.json"&gt;gist&lt;/a&gt; to your file&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finally-we-will-code" class="anchor"&gt;
  &lt;/a&gt;
  Finally we will code
&lt;/h3&gt;

&lt;p&gt;Inside your &lt;code&gt;src/index.ts&lt;/code&gt; import all libraries&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import say from 'say';
import wikipedia from "wikipedia";
import jokes from './jokes.json';
import readline from "readline";

...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our personal assistant will receive the commands by text, like the old ways&lt;br&gt;
So, w'll need a interface to interact with our user by terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The main goal here is create an assistant that can make searchs on wikipedia, so, lets create this func&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
const wikisearch = async (topic: string) =&amp;gt; {
    const search = await wikipedia.search(topic);
    const page = await wikipedia.page(search.results[0].title);

    const summary = await page.summary();

    return summary.extract;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's give our assistant a voice&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
const speak = (text: string) =&amp;gt; {
    return new Promise((resolve, reject) =&amp;gt; {
        say.speak(text, 'Samantha', 0.9, (err) =&amp;gt; {
            if(err) reject(err);
            resolve(true);
        });
    })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As my assistant is a woman, I decided to give her the voice of Samantha, and to make it more audible, I leave the playback speed at 0.9, but feel free to change any of these properties, you can check the full list of voices available &lt;a href="https://github.com/Marak/say.js/blob/master/examples/osx-allvoices.js"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, lets interact.&lt;br&gt;
By the first rule of the challenge, the bot need to know our name, so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...

let name = "";

rl.question("What is your name ? ", async function(received: string) {
        name = received;
        await speak(`Hello ${received}, my name is Clotilde`);
        ask();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, lets code the final function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
const ask = () =&amp;gt; {
    rl.question("ask me something: ", async function(rQuery: string) {

        if(rQuery == 'stop') {
            say.stop();
            return rl.close();
        }

        if(rQuery.toLocaleLowerCase().split(' ').findIndex(item =&amp;gt; item == 'joke') &amp;gt; -1) {
            const jokeIndex = Math.floor(Math.random() * jokes.length);
            const joke = jokes[jokeIndex];
            await speak(joke.text);
        } else {
            const searchTopic = await wikisearch(rQuery);
            await speak(`According to wikipedia, ${searchTopic}`);
        }

        ask();
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The idea here is very simple, if the user asks something that contains the word joke, we tell a joke, if not, we search on wikipedia.&lt;/p&gt;

&lt;p&gt;And, for finally, when we shutdown our assistant:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...

rl.on("close", async function() {
    console.log("\nBYE BYE !!!");
    await speak("Bye Bye");
    process.exit(0);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;She will say "Bye Bye"&lt;/p&gt;

&lt;p&gt;Your code should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import say from 'say';
import wikipedia from "wikipedia";
import jokes from './jokes.json';
import readline from "readline";

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const wikisearch = async (topic: string) =&amp;gt; {
    const search = await wikipedia.search(topic);
    const page = await wikipedia.page(search.results[0].title);

    const summary = await page.summary();

    return summary.extract;
}

const speak = (text: string) =&amp;gt; {
    return new Promise((resolve, reject) =&amp;gt; {
        say.speak(text, 'Samantha', 0.9, (err) =&amp;gt; {
            if(err) reject(err);
            resolve(true);
        });
    })
}

let name = "";

rl.question("What is your name ? ", async function(received: string) {
        name = received;
        await speak(`Hello ${received}, my name is Clotilde`);
        ask();
});


const ask = () =&amp;gt; {
    rl.question("ask me something: ", async function(rQuery: string) {

        if(rQuery == 'stop') {
            say.stop();
            return rl.close();
        }

        if(rQuery.toLocaleLowerCase().split(' ').findIndex(item =&amp;gt; item == 'joke') &amp;gt; -1) {
            const jokeIndex = Math.floor(Math.random() * jokes.length);
            const joke = jokes[jokeIndex];
            await speak(joke.text);
        } else {
            const searchTopic = await wikisearch(rQuery);
            await speak(`According to wikipedia, ${searchTopic}`);
        }

        ask();
    });
}


rl.on("close", async function() {
    console.log("\nBYE BYE !!!");
    await speak("Bye Bye");
    process.exit(0);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The complete repo of this project can be found on &lt;a href="https://github.com/LeonBonetti/Clotilde-the-personal-assistant"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you very much, let us know in the comments section how long it took you to create this bot&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>programming</category>
      <category>funny</category>
    </item>
    <item>
      <title>TypeScript and why you should type your JS project</title>
      <author>MiguelDevelopez</author>
      <pubDate>Tue, 02 Mar 2021 11:18:39 +0000</pubDate>
      <link>https://dev.to/migueldevelopez/typescript-and-why-you-should-type-your-js-project-3amb</link>
      <guid>https://dev.to/migueldevelopez/typescript-and-why-you-should-type-your-js-project-3amb</guid>
      <description>&lt;h4&gt;
  &lt;a href="#typescript-is-like-javascript-but-with-no-surprises" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;TypeScript is like JavaScript but with no surprises.&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;I heard a long time ago about TS, great stories about how useful it is, allowing js to have Javascript types. At this moment I wasn’t so 100% aware of the sense of type everything, now that I have more knowledge about clean code, good practices and start to develop some little applications in React I think that the code could be better with types and I decided to investigate about and… this is what I found:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#developers-love-it" class="anchor"&gt;
  &lt;/a&gt;
  🥰DEVELOPERS LOVE IT
&lt;/h1&gt;

&lt;p&gt;Here are some charts about how people start to use more and more…&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFhVWLIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7flwn1zrv50kd5oi3f4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFhVWLIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7flwn1zrv50kd5oi3f4.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
More interesting charts about JS here: &lt;a href="https://2020.stateofjs.com/en-US/technologies/javascript-flavors/"&gt;https://2020.stateofjs.com/en-US/technologies/javascript-flavors/&lt;/a&gt;&lt;br&gt;
Increasing the usage in GitHub projects.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9wN0Yf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0snt1f7qkdic1u7mpj08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9wN0Yf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0snt1f7qkdic1u7mpj08.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://octoverse.github.com/"&gt;https://octoverse.github.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And high place in the 2020 developer survey of StackOverflow:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pqGdQ_oR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ha3lvmob403pf2q8ysvo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pqGdQ_oR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ha3lvmob403pf2q8ysvo.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved"&gt;https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved&lt;/a&gt;&lt;br&gt;
Big companies like Airbnb support its use and claim that using it would significantly reduce potential errors. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tgKItnZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp0unrfojdu42d3zsruy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tgKItnZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp0unrfojdu42d3zsruy.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 Source: &lt;a href="https://twitter.com/swyx/status/1093670844495089664/photo/2"&gt;https://twitter.com/swyx/status/1093670844495089664/photo/2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I went deep into Reddit to find some real words about it and the same: “It's very hard to go back to Javascript once you start writing Typescript”.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#but-why-all-this-hype" class="anchor"&gt;
  &lt;/a&gt;
  🚄But… WHY ALL THIS HYPE?
&lt;/h1&gt;

&lt;p&gt;With so many people loving it I decided to learn the basics and this is what I have learned that it can offer.&lt;br&gt;
Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SUPERSET of JS, &lt;strong&gt;the same language&lt;/strong&gt; but with consistency in types.&lt;/li&gt;
&lt;li&gt;The main advantage is strict typing, you can type everything, from variables to the parameters of a function, and even the structure of an object.&lt;/li&gt;
&lt;li&gt;The ability to find these obvious yet frequently occurring errors this early makes it a lot easier to manage your code with types.&lt;/li&gt;
&lt;li&gt;Types make code management easier and more predictable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But… Not all that glitters is gold, some disadvantages that you should consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apply type may make you slower in the first instance, in the long term it is better but you have to get used to it.&lt;/li&gt;
&lt;li&gt;Required compilation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#examples-of-syntax" class="anchor"&gt;
  &lt;/a&gt;
  🤖 Examples of SYNTAX
&lt;/h1&gt;

&lt;p&gt;Basic typing when you declare variables, you won't be able to change the type later (even if you don't declare strictly the type it will be typed), making your code more reliable:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7FbUnAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jp7ljj7b6ke0tcuzak4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7FbUnAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jp7ljj7b6ke0tcuzak4.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70OvR_J7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7irtvrsfdjwo7f0i8cu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70OvR_J7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7irtvrsfdjwo7f0i8cu6.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IVf8u0Bs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8r23eczg19qndcsn25i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IVf8u0Bs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8r23eczg19qndcsn25i.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jVQawhFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xdcrntcir24n48svx9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jVQawhFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xdcrntcir24n48svx9j.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 If for any reason, you need a variable without specifically type you can use any:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YypuEyZ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rtumtuavwci2fqte10w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YypuEyZ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rtumtuavwci2fqte10w.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 But... in the documentation, they recommend not to use it unless you are in the process of migration from JS to TS.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CZy8iPqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4vo11re4dl533kojyv4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZy8iPqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4vo11re4dl533kojyv4.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 Add enum to JS, a way of giving more friendly names to sets of numeric values:&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5S3mf0wQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg75wh46h2mkqwfgk9ra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5S3mf0wQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg75wh46h2mkqwfgk9ra.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 Typing parameters of a function will allow you to detect quickly if you insert something wrong&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5LIsyeNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s75ewaz9p9iiuem9g0f6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5LIsyeNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s75ewaz9p9iiuem9g0f6.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpLHSyo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz0at7ak971imm5wzizq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpLHSyo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz0at7ak971imm5wzizq.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 You can add what is the type of function that will return&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QYp5RYGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atm5jn275zaipzwru9sp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYp5RYGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atm5jn275zaipzwru9sp.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6moadEBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcctcvlaai8aelwkvidm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6moadEBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcctcvlaai8aelwkvidm.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 but if you don’t do it typescript will do it for you&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fNsGCA8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la6tuza2qv6ckvxur1lc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fNsGCA8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la6tuza2qv6ckvxur1lc.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 You can create your own types that allow you to don't repeat the code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGaXMlcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quiqckmpwr48kulez7ea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGaXMlcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quiqckmpwr48kulez7ea.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 You can type also what you select from the DOM, allowing you access to all the methods of one kind of input. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fSwCwiTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oh4qzeyys7r86ii2bob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fSwCwiTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oh4qzeyys7r86ii2bob.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 There are also interfaces, a contract that should be matched with the object if you don’t want errors, and other &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4r4O7J2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkhsmhsn8fh7g4hsomwq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4r4O7J2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkhsmhsn8fh7g4hsomwq.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
And of course, you can implement TypeScript into your favorite JS framework, I'll show you an example in a React project, providing the same advantages mentioned above:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N13ymtyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90o608hvhtnnhtfemptr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N13ymtyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90o608hvhtnnhtfemptr.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 Similar to the PropTypes and now you will have to add the props as mandatory when you use them or the IDE  will warn you:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G0v0bC0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01bjoqwvl9hsoznzpmkj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G0v0bC0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01bjoqwvl9hsoznzpmkj.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 And when you introduce the mandatory prop person it will be okay:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U_mf9kTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58k7a4xuogynzdv3uoxe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U_mf9kTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58k7a4xuogynzdv3uoxe.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 You will be able to type other things (practically everything) like, for example, the hook useState:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uOvj04B7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knen4knxmgstpjylruxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOvj04B7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knen4knxmgstpjylruxz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And &lt;em&gt;that’s it, folks&lt;/em&gt;, I hope you enjoy this little piece of info about TypeScript and maybe consider applying it in some project. &lt;/p&gt;

&lt;p&gt;Here are some sources and interesting videos to check and go deeper if you want:&lt;br&gt;
JSConf - &lt;strong&gt;Airbnb&lt;/strong&gt; tactics and strategy to migrate to TS (very interesting)&lt;br&gt;
&lt;a href="https://youtu.be/P-J9Eg7hJwE"&gt;https://youtu.be/P-J9Eg7hJwE&lt;/a&gt;&lt;br&gt;
Official documentation - TS in 5min to JS developer:&lt;br&gt;
&lt;a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html"&gt;https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript tutorial series:&lt;br&gt;
&lt;a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9gUgr39Q_yD6v-bSyMwKPUI"&gt;https://www.youtube.com/playlist?list=PL4cUxeGkcC9gUgr39Q_yD6v-bSyMwKPUI&lt;/a&gt;&lt;br&gt;
In this video, you can see how to apply TypeScript in React:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Z5iWr6Srsj8"&gt;https://www.youtube.com/watch?v=Z5iWr6Srsj8&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create react subcomponents in a simple way!</title>
      <author>Yogini Bende</author>
      <pubDate>Tue, 02 Mar 2021 10:29:36 +0000</pubDate>
      <link>https://dev.to/ms_yogii/create-react-subcomponents-in-a-simple-way-5h1f</link>
      <guid>https://dev.to/ms_yogii/create-react-subcomponents-in-a-simple-way-5h1f</guid>
      <description>&lt;p&gt;Hello Folks,&lt;br&gt;
If you are working in react and you have used libraries like &lt;a href="https://react-bootstrap.netlify.app/components/dropdowns/#dropdowns"&gt;React Bootstrap&lt;/a&gt; you must have seen or used components like &lt;code&gt;&amp;lt;Dropdown.Item&amp;gt;&lt;/code&gt;. Have you ever wondered how to create such components?&lt;br&gt;
In this article, we will understand creating components which have their own modules or subcomponents, just like above &lt;code&gt;Dropdown&lt;/code&gt; component. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;u&gt;Note&lt;/u&gt;: If there is any particular name or jargon for subcomponents, please let me know that in comments below.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For this tutorial, we will be creating a very simple Card component. This will have Header, Body and Footer as its submodules. For the tutorial purpose, I am keeping this card component very simple and not adding any complex functionality to it. In the practical world, you may add all other features to it just like any other component in react. Though this tutorial is using plain ReactJS, you can use the same component structure for react-native apps as well. &lt;/p&gt;

&lt;p&gt;The card component we will be creating will look something like this - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cCQg6X5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/259v8yeyzmy5qpiier3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cCQg6X5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/259v8yeyzmy5qpiier3a.png" alt="Card Component UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's see the code first and understand its structure better. Below is the code we used to create the above component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subComponentList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subComponents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;subComponentList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;card&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;subComponents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;card-header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;card-body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;card-footer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, in the above code, we are treating the card component as just another object is javascript. Our subcomponents, Header, Body and Footer are passed to the Card component as its keys.&lt;/p&gt;

&lt;p&gt;Hence, inside the card, we will be first creating the list of all the keys i.e. subcomponents for the card. This way, we can add as many subcomponents as we want. &lt;/p&gt;

&lt;p&gt;After getting the list of subcomponents, all we require is to render them through Card. Here, we will make use of &lt;strong&gt;React.Children&lt;/strong&gt; api from React. React.Children provides a utility for dealing with opaque data structures the children props have. If, children prop is an array, it will return a function for each child in an array. If child is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, this method will return &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The div element inside the return statement is used to add styling to the card and inside that div, we are just returning all the sub-components. We can also add more functionalities to this as per our requirements. &lt;/p&gt;

&lt;p&gt;In this way, you can create any component with many subcomponents or modules inside it. Although, it is easy to create a single component and add all subcomponent functionalities inside it, but creating components this way will add much more readability to the code. So, depending on the use-cases, we can use this pattern in our apps. &lt;/p&gt;

&lt;p&gt;If you have ever tried creating subcomponents like this or feel this can be done in a better way, do share your approaches with me in comments!&lt;/p&gt;

&lt;p&gt;And your feedback on article will be welcomed, always!!&lt;br&gt;
Keep learning!&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>RSpec: do not verify hash keys separately</title>
      <author>Vasily Polovnyov</author>
      <pubDate>Tue, 02 Mar 2021 10:03:42 +0000</pubDate>
      <link>https://dev.to/vasily/rspec-do-not-verify-hash-keys-separately-3ami</link>
      <guid>https://dev.to/vasily/rspec-do-not-verify-hash-keys-separately-3ami</guid>
      <description>&lt;p&gt;Sometimes I come across three separate checks in specs to make sure the hash is OK: there are keys, there are values, values have the right type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;UserSerializer&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"#as_json"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;first_name: &lt;/span&gt;&lt;span class="s2"&gt;"Bart"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;last_name: &lt;/span&gt;&lt;span class="s2"&gt;"Simpson"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;tel: &lt;/span&gt;&lt;span class="s2"&gt;"+777123"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;described_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;as_json&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"has keys"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:tel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"has types"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:first_name&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_kind_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:last_name&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_kind_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tel&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_kind_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"has values"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:first_name&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:last_name&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tel&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This spec is more confusing than helpful: when you change fields, you have to update three tests; it's hard to immediately understand what the serializer returns.&lt;/p&gt;

&lt;p&gt;Better to use include matcher and skip type checks (it's not the responsibility of the test):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;UserSerializer&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"#as_json"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"includes first name, last name and tel"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;first_name: &lt;/span&gt;&lt;span class="s2"&gt;"Bart"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;last_name: &lt;/span&gt;&lt;span class="s2"&gt;"Simpson"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;tel: &lt;/span&gt;&lt;span class="s2"&gt;"+777123"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;described_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;as_json&lt;/span&gt;

      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;first_name: &lt;/span&gt;&lt;span class="s2"&gt;"Bart"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;last_name: &lt;/span&gt;&lt;span class="s2"&gt;"Simpson"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;tel: &lt;/span&gt;&lt;span class="s2"&gt;"+777123"&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>rspec</category>
      <category>ruby</category>
      <category>testing</category>
    </item>
    <item>
      <title>Advanced Usage of Styled Components for your React App - Part 3</title>
      <author>Olena Drugalya</author>
      <pubDate>Tue, 02 Mar 2021 09:59:14 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/advanced-usage-of-styled-components-for-your-react-app-part-3-4k9m</link>
      <guid>https://dev.to/olenadrugalya/advanced-usage-of-styled-components-for-your-react-app-part-3-4k9m</guid>
      <description>&lt;p&gt;This post continues the topic about &lt;a href="https://dev.to/olenadrugalya/advanced-usage-of-styled-components-for-your-react-app-2hfh"&gt;Advanced Usage of Styled Components&lt;/a&gt; and covers &lt;em&gt;animation&lt;/em&gt;, &lt;em&gt;styling the existing component&lt;/em&gt; and attaching &lt;em&gt;additional props&lt;/em&gt; (yes you can do that too).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-existing-component" class="anchor"&gt;
  &lt;/a&gt;
  Styling existing Component
&lt;/h2&gt;

&lt;p&gt;Using method &lt;code&gt;styled&lt;/code&gt; it is possible to style not only your own components, but also imported ones (third party components). This is very useful feature. &lt;br&gt;
  It is possible to style:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Another styled component&lt;/li&gt;
&lt;li&gt;Another non-styled third-party component&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#styling-another-styled-component" class="anchor"&gt;
  &lt;/a&gt;
  Styling another Styled Component
&lt;/h4&gt;

&lt;p&gt;Let's say we want to create buttons for our application and we want them to have pretty much same style, except for minor differences. If we would like to do same in another language (for example C#), we would create &lt;em&gt;interface Button&lt;/em&gt; with the main features and then other buttons would inherit from it. Pretty much same is happening here. &lt;/p&gt;

&lt;p&gt;We create a functional component &lt;strong&gt;Button&lt;/strong&gt; and define styles using &lt;code&gt;styled&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  background: #0d2728;
  border-radius: 5px;
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  -webkit-appearance: none;
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  font-family: sans-serif;
  font-weight: 700;
  height: 45px;
  margin: auto;
  opacity: 0.5;
  width: 35%;
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we want to make a button with different background colour only, but with all other styles kept. First we import &lt;em&gt;Button&lt;/em&gt; component to our file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Button.styles.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we can style it as a usual component. Remember, that new styles will have higher specificity over old styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoginButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
background-color: red;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#styling-nonstyled-thirdparty-component" class="anchor"&gt;
  &lt;/a&gt;
  Styling non-styled third-party Component
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;styled&lt;/code&gt; method works perfectly on any third-party component, as long as they attach the passed &lt;code&gt;className&lt;/code&gt; prop to a DOM element.&lt;br&gt;
Lets say you create &lt;code&gt;Link&lt;/code&gt; component (react-router-dom's Link fo example) for your application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you want it to be styled so it would be not so boring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FunnyLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  color: palevioletred;
  font-weight: bold;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When we use them in our app, they would be 2 different links:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FunnyLink&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Link.styles.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I am boring link &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FunnyLink&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I am very funny link &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FunnyLink&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Simple as that :) Now let's explore one more important feature&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-additional-props" class="anchor"&gt;
  &lt;/a&gt;
  Adding Additional Props
&lt;/h2&gt;

&lt;p&gt;The official docs say, that to avoid unnecessary wrappers that just pass on some props to the rendered component, or element, you can use the &lt;code&gt;.attrs&lt;/code&gt; constructor. It allows you to attach additional props (or "attributes") to a component. When do we even need that? Let's explore.&lt;/p&gt;

&lt;p&gt;We have our styled &lt;code&gt;Button&lt;/code&gt; component and we know that by default it has &lt;code&gt;type="submit"&lt;/code&gt;right? What if we want to change the type for one of the buttons to &lt;code&gt;type="button"&lt;/code&gt;? We can do that using &lt;code&gt;.attrs&lt;/code&gt; constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="s2"&gt;`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Every &lt;em&gt;Button&lt;/em&gt; component will now have type="button" as default.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The rule of thumb is to use &lt;code&gt;.attrs&lt;/code&gt; when you want every instance of a styled component to have that prop, and pass props directly when every instance needs a different one -&lt;a href="https://styled-components.com/docs/faqs#when-to-use-attrs"&gt;Styled Components Docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#animation" class="anchor"&gt;
  &lt;/a&gt;
  Animation
&lt;/h2&gt;

&lt;p&gt;The final feature I want to explore as a final part is &lt;em&gt;animation&lt;/em&gt;. &lt;br&gt;
We can use the animation on any element using &lt;code&gt;keyframes&lt;/code&gt; helper. Let's animate our Button :)&lt;/p&gt;

&lt;p&gt;First we create &lt;strong&gt;keyframes&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rotate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keyframes&lt;/span&gt;&lt;span class="s2"&gt;`
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Than we use it in the &lt;code&gt;animation&lt;/code&gt; property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  background: #0d2728;
  border-radius: 5px;
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  -webkit-appearance: none;
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  font-family: sans-serif;
  font-weight: 700;
  height: 45px;
  margin: auto;
  opacity: 0.5;
  width: 35%;
  animation: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; 2s linear infinite;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That is amazing! Enjoy the animation and code &lt;a href="https://codesandbox.io/s/advancedstyledcomponents-l5s0y?file=/src/App.js"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/olenadrugalya/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/OlenaDrugalya"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/J3J42JOOA"&gt;&lt;img height="12" width="30%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7c42cU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JavaScript Should Be Your Last Resort</title>
      <author>Olavi Haapala</author>
      <pubDate>Tue, 02 Mar 2021 08:36:00 +0000</pubDate>
      <link>https://dev.to/olpeh/javascript-should-be-your-last-resort-5dje</link>
      <guid>https://dev.to/olpeh/javascript-should-be-your-last-resort-5dje</guid>
      <description>&lt;h2&gt;
  &lt;a href="#js-is-your-hammer" class="anchor"&gt;
  &lt;/a&gt;
  JS Is Your Hammer
&lt;/h2&gt;

&lt;p&gt;When working on modern frontend web development, using your favorite framework of choice, it can be sometimes tempting to solve all the problems with JavaScript. Sometimes this happens unconsciously as JS is what you mostly use in your day-to-day development work.&lt;/p&gt;

&lt;p&gt;This is similar to the situation described by Abraham Maslow in 1966:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I suppose it is tempting, if the only tool you have is a hammer, to treat everything as if it were a nail.&lt;/p&gt;

&lt;p&gt;– &lt;a href="https://en.wikipedia.org/wiki/Law_of_the_instrument"&gt;Wikipedia: Law of the instrument&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IrSg_R47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d86iyhq2qmc8t2eaqw1p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrSg_R47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d86iyhq2qmc8t2eaqw1p.jpg" alt="Photo of a hammer about to hit some nails"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@faustomarques?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Fausto Marqués&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/hammer-fausto-marques?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In this blog post, I’m only talking about JS even though I’m mostly using TS in my projects – it ends up as JS after compilation anyways.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-to-take-into-account-when-implementing-ui" class="anchor"&gt;
  &lt;/a&gt;
  What to Take into Account When Implementing UI
&lt;/h3&gt;

&lt;p&gt;This mindset of using JS for everything causes unnecessary processing that needs to be run on your end users’ devices as client-side JS. All the JS resources on a website need to be downloaded, parsed and executed by the web browser. This is quite often the cause of slow and unresponsive websites on low-end mobile devices or slow network speeds.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-you-should-be-thinking-instead" class="anchor"&gt;
  &lt;/a&gt;
  How You Should Be Thinking Instead:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Can this be done in HTML?&lt;/li&gt;
&lt;li&gt;If not, can I solve it with HTML + CSS?&lt;/li&gt;
&lt;li&gt;And if nothing else works, the solution probably requires a minimal amount of JS in addition to HTML and CSS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This way of thinking is not about what is easiest for you as a developer. You may be a JavaScript focused frontend developer, and solving most of your problems with it feels natural for you. However, you should be thinking about your end users. Client-side JS is the single biggest problem when it comes to web performance. You can read some of my thoughts on web performance from my other blog posts. You can find some links at &lt;a href="https://olavihaapala.fi/2021/03/02/js-should-be-your-last-resort.html#also-read-these"&gt;the bottom of this blog post on my personal blog&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-can-this-be-done-in-html" class="anchor"&gt;
  &lt;/a&gt;
  1. Can This Be Done in HTML?
&lt;/h3&gt;

&lt;p&gt;Plan and implement the basic structure and semantics of the feature in plain HTML without any extra styles and using native HTML elements and functionality. If some additional styling or features are needed, go to step 2.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-try-to-solve-it-with-html-css" class="anchor"&gt;
  &lt;/a&gt;
  2. Try to Solve It with HTML + CSS
&lt;/h3&gt;

&lt;p&gt;Use CSS to apply the additional styling or animation that is required, still keeping the semantics and accessibility in my mind. If some additional interactivity is required in the particular piece of UI you are building, go to step 3.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-use-html-css-js" class="anchor"&gt;
  &lt;/a&gt;
  3. Use HTML + CSS + JS
&lt;/h3&gt;

&lt;p&gt;Add the minimum amount of JS required to fulfill the requirements. Keep in mind that something that can be solved without JS should probably be solved without JS.&lt;/p&gt;

&lt;p&gt;When you’re done, show your code to your colleagues and let them review it. Perhaps there is still something unnecessary parts in your code, that could be solved without having a client-side JS cost for your users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-example" class="anchor"&gt;
  &lt;/a&gt;
  Simple Example
&lt;/h2&gt;

&lt;p&gt;This problem applies to almost anything in web frontend development, but here is a simple practical example that should help me prove my point.&lt;/p&gt;

&lt;p&gt;Imagine you are working on a React project, and you are working on a feature that has some UI parts that should only become visible after a certain delay, let’s say after 2s.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-react-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Using React Hooks
&lt;/h3&gt;

&lt;p&gt;If you are used to solving your problems with React and Hooks, your initial solution could look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;thingVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setThingVisible&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeoutId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setThingVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeoutId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;thingVisible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Here&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s a thing for you!&amp;lt;/section&amp;gt; : null;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is fine and works. Probably you notice no difference in performance either on your hyper powerful developer machine. And probably, there is no real performance issue in this case. But imagine if these pile up and suddenly you would have tens or hundreds of similar unnecessary JS computations to be run on the client-side or some larger and longer executions that are taking place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-html-css-animation" class="anchor"&gt;
  &lt;/a&gt;
  Using HTML + CSS Animation
&lt;/h3&gt;

&lt;p&gt;Using CSS, you can animate content to appear on the page with a delay using CSS animations and &lt;code&gt;animation-delay&lt;/code&gt;. This is supported by all browsers and could even have a better end user experience as you could fade the content in or use any other ways of making the content appear more smoothly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The HTML:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fade-in"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Here's a thing for you!&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The CSS:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.fade-in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fadeIn&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-fill-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;fadeIn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dont-use-css-for-what-you-can-do-with-html" class="anchor"&gt;
  &lt;/a&gt;
  Don’t Use CSS for What You Can Do with HTML
&lt;/h2&gt;

&lt;p&gt;Similarly, don’t do something with CSS that you could and should be doing in HTML.&lt;/p&gt;

&lt;p&gt;An extreme example of this was that we had accidentally been using margins to separate two words from each other, instead of using a space in between the words!&lt;/p&gt;

&lt;p&gt;This was obviously not a good idea from at least the following perspectives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It might not follow the font size, letter spacing etc.&lt;/li&gt;
&lt;li&gt;It is not needed, waste of effort and processing&lt;/li&gt;
&lt;li&gt;If someone would need to copy the text, there would be no space in between the words&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#frontend-development-is-not-easy" class="anchor"&gt;
  &lt;/a&gt;
  Frontend Development Is Not Easy
&lt;/h2&gt;

&lt;p&gt;Web frontend development is not an easy topic to master. It is something you can get started with quite rapidly, but mastering it requires some level of experience and understanding the whole picture in order to be able to solve the right problems on the right level using the right tools. Solving something on the frontend has many levels and details baked in it.&lt;/p&gt;

&lt;p&gt;Additionally, you’ll need to understand when a problem should be solved on the backend instead of the frontend for various reasons such as performance, usability or maintainability among others.&lt;/p&gt;

&lt;p&gt;However, keep in mind that sometimes you don’t need to try to reach for a perfect solution and something that works might be good enough to be shipped to production and to be used by your end users.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Nevertheless, she coded: Hedy Lamarr</title>
      <author>Helen Anderson</author>
      <pubDate>Tue, 02 Mar 2021 08:11:07 +0000</pubDate>
      <link>https://dev.to/helenanders26/nevertheless-she-coded-hedy-lamarr-241h</link>
      <guid>https://dev.to/helenanders26/nevertheless-she-coded-hedy-lamarr-241h</guid>
      <description>&lt;p&gt;From early computers, to wartime inventions, the beginnings of the internet and beyond. Women have always been innovators in technology and science breaking down barriers in the process. &lt;/p&gt;

&lt;p&gt;In honour of International Women's Day, I've chosen to highlight the women who inspire and influence me. Over the next couple of weeks, I'll be showcasing ten women who &lt;a href="https://www.internationalwomensday.com/theme"&gt;#ChooseToChallenge&lt;/a&gt;, open doors for others, and have changed the world.&lt;/p&gt;




&lt;p&gt;The first woman in this series is actress, inventor, and technologist Hedy Lamarr. &lt;/p&gt;

&lt;p&gt;Well known for her iconic roles in films of the 1930s and 1940s, Hedy was also an inventor. She improved the aerodynamics of Howard Hughes planes by designing a new wing shape and created technology that would become the wifi, GPS, and Bluetooth we use today.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ts7P6Oym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwnhdxpnjf8nbjfc5izn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ts7P6Oym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwnhdxpnjf8nbjfc5izn.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Born in Austria, Hedy began acting in her teens and played significant roles in European films during the 1930s. She ultimately escaped an overly-controlling husband to London, then sailed to the United States. She continued her acting career in New York City and Hollywood, starring in MGM films and beginning a new life. During this time she also honed her skills as an inventor and technologist. &lt;/p&gt;

&lt;p&gt;The technology she developed with fellow inventor George Antheil used rapidly changing radio frequencies to prevent enemies from decoding messages. This system is called ‘frequency hopping’ and was a precursor to modern cellphone security as well as military communications.&lt;/p&gt;

&lt;p&gt;Hedy wasn’t recognised for her inventions until years later when her patent had long lapsed. However, she did go on to become the first woman to receive the Bulbie Gnass Spirit of Achievement Award and Electronic Frontier Foundation (EFF) Pioneer Award.&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Z0gu2QhV1dc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;I love Hedy's story and how she pursued her interests in technology while working in film. She dedicated so much energy to inventing, all while the world knew her as simply 'the most beautiful woman in the world'. &lt;/p&gt;

&lt;p&gt;There's a lot more to Hedy's story so check out the links to learn more about her life.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#further-reading" class="anchor"&gt;
  &lt;/a&gt;
  Further reading:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://walkoffame.com/hedy-lamarr/"&gt;Hedy Lamarr on the Hollywood Walk of Fame&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.austrianinformation.org/current-issue-summerfall-2013/the-girl-in-the-white-dress"&gt;The Girls in the White Dress&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.forbes.com/sites/shivaunefield/2018/02/28/hedy-lamarr-the-incredible-mind-behind-secure-wi-fi-gps-bluetooth/?sh=139253e241b7"&gt;Hedy Lamarr: The Incredible Mind Behind Secure WiFi, GPS And Bluetooth&lt;/a&gt;&lt;br&gt;
&lt;a href="https://theculturetrip.com/north-america/usa/new-york/articles/how-sexism-punished-inventor-hedy-lamarr/"&gt;How Sexism Punished Inventor Hedy Lamarr&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.smithsonianmag.com/smithsonian-institution/thank-world-war-ii-era-film-star-your-wi-fi-180971584/"&gt;Thank This World War II-Era Film Star for Your Wi-Fi&lt;/a&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#read-more" class="anchor"&gt;
  &lt;/a&gt;
  Read more:
&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/helenanders26" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkoi3rh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Sj8yEhMA--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/22532/a7383e59-70ad-4141-96b1-19cc6e515599.jpg" alt="helenanders26 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/helenanders26/nevertheless-helen-anderson-coded-4n12" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Nevertheless, she coded&lt;/h2&gt;
      &lt;h3&gt;Helen Anderson ・ Mar  4 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#shecoded&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/helenanders26" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkoi3rh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Sj8yEhMA--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/22532/a7383e59-70ad-4141-96b1-19cc6e515599.jpg" alt="helenanders26 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/helenanders26/nevertheless-helen-anderson-coded--1g1l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Nevertheless, she coded&lt;/h2&gt;
      &lt;h3&gt;Helen Anderson ・ Mar  8 '19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#shecoded&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#womenintech&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Image source: &lt;a href="https://commons.wikimedia.org/wiki/File:Hedy_Lamarr_in_The_Heavenly_Body_1944.jpg"&gt;Wikicommons&lt;/a&gt;&lt;/p&gt;

</description>
      <category>shecoded</category>
      <category>womenintech</category>
      <category>history</category>
    </item>
    <item>
      <title>Using UX and Performance Measures on My Club's Website</title>
      <author>Care</author>
      <pubDate>Tue, 02 Mar 2021 06:51:01 +0000</pubDate>
      <link>https://dev.to/kerocare/using-ux-and-performance-measures-on-my-club-s-website-37m9</link>
      <guid>https://dev.to/kerocare/using-ux-and-performance-measures-on-my-club-s-website-37m9</guid>
      <description>&lt;p&gt;With the ever-growing jungle that is the web, the need for web design standards only grows with it. Gaining more awareness and a better understanding over accessibility is tantamount.&lt;/p&gt;

&lt;p&gt;My club, KPMD, or Korean pop Music and Dance, is one of the K-pop communities and organizations on Penn State University. Inherently, we are not a dance club, but we aren't not a dance club? We have two essential bodies that come together to make KPMD. We have our discussion-side leaning more on culture, talk, and simple socializing. On the other hand we have the option for people to dance, no experience is required and most people do it for fun as a way to exercise. &lt;/p&gt;

&lt;p&gt;With that intro out of the way, I was curious after learning about a11y, web.dev, WAVE, and other web performance, accessibility, SEO, and more:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There's actual standards for web design?&lt;/li&gt;
&lt;li&gt;Some people actually care about websites being accessible by all people?&lt;/li&gt;
&lt;li&gt;How well was KPMD doing in terms of it?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here were the audit results:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KPMD web.dev&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LTULZ6fR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/b2Abqqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LTULZ6fR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/b2Abqqu.png" alt="web dev kpmd audit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KPMD Lighthouse Report&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YEZHreWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/e5derrr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YEZHreWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/e5derrr.png" alt="Lighthouse kpmd audit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KPMD WAVE extension&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jLN_horU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/P0Hwzea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jLN_horU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/P0Hwzea.png" alt="WAVE kpmd audit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On initial impression, I didn't really understand why anyone would implement any of the reported errors when viewing Lighthouse and web.dev. WAVE showed off direct point outs on the website itself though it may be hard to orient content when modified like so. Another worry was that inherently this the foundation for sites.psu.edu utilizing WordPress may have had a lot of dependencies to begin with. So I chose to double check their home site's results as well.&lt;/p&gt;

&lt;p&gt;Here are sites.psu.edu results:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sites web.dev&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8T5CyHM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YECoWBn.pnghttps://i.imgur.com/b2Abqqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8T5CyHM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YECoWBn.pnghttps://i.imgur.com/b2Abqqu.png" alt="web dev sites audit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sites Lighthouse Report&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y6EmQzUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ODUufQK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6EmQzUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ODUufQK.png" alt="Lighthouse sites audit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sites WAVE extension&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0psCXrNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ZThFtWs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0psCXrNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ZThFtWs.png" alt="WAVE sites audit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the accessibility score is higher, the performance score is somehow lower. &lt;/p&gt;

&lt;p&gt;While some pieces of the audit may seem self intuitive, it's not always good to assume things about stuff you're not an expert in. So in the end I tried going in more depth research over a few elements. Some of the ones I chose to delve into were:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Total Blocking Time&lt;/li&gt;
&lt;li&gt;Eliminate render-blocking resources&lt;/li&gt;
&lt;li&gt;ARIA element and content (in general)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Regardless the ability to being open to updates and aware whether change is needed are both tantamount to future web standards that can help cater to those of differing levels of necessary accessibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Total Blocking Time&lt;/strong&gt;&lt;br&gt;
This is essentially used to indicate how long the site loads until interactivity and responsiveness are available to the user. It is measured by when the main thread is blocked by "Long Tasks" or basically whenever a task runs longer than 50 milliseconds. The main thread being where the browser loads and paints events. For both the root psu.edu site as well as KPMD's, both had rather large TBTs, all exceeding 500ms, and the rest being between 700-900ms. Usability-wise this is rather low, with the average TBT of sites according to web.dev being &amp;lt;300ms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Eliminate render-blocking resources&lt;/strong&gt;&lt;br&gt;
What Total Blocking Time was was what I thought Render Blocking Resources were at first. Render blocking resources are apparently URLs blocking the first paint of your page (according to web.dev). Basically while it may affect responsiveness, it is more geared toward just the first contentful paint.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARIA (Accessible Rich Internet Applications)&lt;/strong&gt;&lt;br&gt;
I was most interested in this because it was completely unknown and related to accessibility. Plus the things around it I also didn't know. Other acronyms that popped up were WAI (Web Accessibility Initiative) and WCAG (Web Content Accessibility Guidelines) which are all inter-related. From just googling it, the gist I got was it being a standard by W3C and assistance for web developers to create accessible website. It helps with alternate navigation and user interaction as well as accessibility on tech like screen readers providing descriptions for elements on a web page.&lt;/p&gt;

&lt;p&gt;Overall the sites.psu.edu and my own club KPMD's websites were both lacking and had room for improvement granted most college kids tend to make sites based on artistic choices rather than accessibility I believe. Accessibility and performance in relation to each other are definitely important to consider.&lt;/p&gt;

&lt;p&gt;Video on Topic: &lt;a href="https://www.youtube.com/watch?v=uyVb1o2VThE"&gt;https://www.youtube.com/watch?v=uyVb1o2VThE&lt;/a&gt;&lt;br&gt;
YouTube Channel: &lt;a href="https://www.youtube.com/channel/UCjR8IqMXgs6H69ZQqrsS1Vw"&gt;https://www.youtube.com/channel/UCjR8IqMXgs6H69ZQqrsS1Vw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tools Used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;web.dev measuring tool &lt;a href="https://web.dev/measure/"&gt;https://web.dev/measure/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;WAVE google chrome extension &lt;a href="https://chrome.google.com/webstore/detail/wave-evaluation-tool/jbbplnpkjmmeebjpijfedlgcdilocofh"&gt;https://chrome.google.com/webstore/detail/wave-evaluation-tool/jbbplnpkjmmeebjpijfedlgcdilocofh&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Lighthouse google chrome extension &lt;a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk"&gt;https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding that, an interesting read was one where someone attempted to maintain a perfect accessibility score on Lighthouse while absolutely messing up accessibility in reality. Basically they wanted to point out to not always rely or become dependent on only tools like such as discrepancies and things good in theory can still happen (though this is hyper specific haha). Here's the link! &lt;a href="https://www.matuzo.at/blog/building-the-most-inaccessible-site-possible-with-a-perfect-lighthouse-score/"&gt;https://www.matuzo.at/blog/building-the-most-inaccessible-site-possible-with-a-perfect-lighthouse-score/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>seo</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Getting Started with Flask: A Python Microframework</title>
      <author>saransh kataria</author>
      <pubDate>Tue, 02 Mar 2021 02:10:07 +0000</pubDate>
      <link>https://dev.to/saranshk/getting-started-with-flask-a-python-microframework-3k69</link>
      <guid>https://dev.to/saranshk/getting-started-with-flask-a-python-microframework-3k69</guid>
      <description>&lt;p&gt;Flask is a python framework for writing web applications. It is a microframework, which as the name suggests, is a small, clean, and simple to use framework. It comes with a minimal set of features, which sounds like a strange choice at first. So why would we choose Flask if it does a minimal amount of things? Flask is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;clean and simple;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;un-opinionated (aka flexible);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;well documented;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;popular and has active community support;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;does not have any additional bloatware that might not be needed;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;extensible to include extensions that we want to add.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is included in Flask?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Jinja 2: template engine for building HTML;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Werkzeug: A tool that provides support for HTTP and routing;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Development and debugging server;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unit testing support.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the rest of the article, it is assumed that we know how to use Python (we will use Python 3) and pip.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-flask" class="anchor"&gt;
  &lt;/a&gt;
  Installing Flask
&lt;/h2&gt;

&lt;p&gt;We do not want to install Flask globally and use &lt;a href="https://www.wisdomgeek.com/development/web-development/python/managing-python-dependencies-using-virtual-environments/"&gt;Python virtual environments&lt;/a&gt; instead. So we will make use of them instead of polluting our global installation.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir flask-hello-world
$ cd flask-hello-world
$ python3 -m venv venv
$ source env/bin/activate
(venv) $
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Once we have that setup, we can install Flask in our virtual environment.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(venv) $ python3 -m pip install flask
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This will download and install Flask and its dependencies. To confirm that the installation was successful, we can start the Python interpreter and try and importing Flask:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import flask &amp;gt;&amp;gt;&amp;gt; _
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If we do not get any errors, we know that the installation was successful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hello-flask-application" class="anchor"&gt;
  &lt;/a&gt;
  The Hello Flask application
&lt;/h2&gt;

&lt;p&gt;Let us start with a minimal Flask application. We will later convert it into a more elaborate version that is better suited for a larger application.&lt;/p&gt;

&lt;p&gt;We will start by creating a hello-world.py file with a few lines of code:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello Flask!'
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The above 5 lines of code are all that we need to host our simple “Hello Flask” web page. This simplicity is one of the things that makes Flask so popular and easy to work with. Let us understand what this no-effort code is doing.&lt;/p&gt;

&lt;p&gt;We imported the package in the first line so that we can use it. This works correctly only if we have it installed.&lt;/p&gt;

&lt;p&gt;The next line calls the Flask constructor which creates a Global Flask application object. The constructor takes the name of the application as an argument. Since we are using a single module, we can use the Python predefined variable &lt;strong&gt;name&lt;/strong&gt;. This variable contains the name of the current module (in our case, the file name is hello-world, so that is used). We could have passed in a string as an argument if we wanted to. Flask uses this name to understand where to look for templates, static files, etc.&lt;/p&gt;

&lt;p&gt;We use the route decorator in the next line which changes the behavior of the function that follows the declaration. The function changes from being a simple one to a view function. @app.route is an attribute of the app object that we made in the previous line. The effect of using this decorator is that we assign a URL to our function and telling Flask which URL will trigger this function. “/” denotes the root of our application.&lt;/p&gt;

&lt;p&gt;The next line is a definition of our hello world function which returns our string.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-our-application" class="anchor"&gt;
  &lt;/a&gt;
  Running our application
&lt;/h2&gt;

&lt;p&gt;Before we run the application, we need to ensure two things.&lt;/p&gt;

&lt;p&gt;First that we are in our active virtual environment in the terminal.&lt;/p&gt;

&lt;p&gt;Second, we need to tell Flask about the module in which our application can be found. We do this by setting the FLASK_APP environment variable to the name of our python file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ export FLASK_APP=hello-world.py

# or

# set FLASK_APP=hello.py
# for Windows
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If we wanted to set Flask in development mode to enable features like debugging, we can also set the FLASK_ENV environment variable.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ export FLASK_ENV=development

# use set instead of export for Windows
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We can then run the application by using:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 -m flask run
* Running on [http://127.0.0.1:5000/](http://127.0.0.1:5000/)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If we copy-paste the URL into a browser, we can see the string from our code. This will launch a simple built-in development server but it is not something we want to use in production.&lt;/p&gt;

&lt;p&gt;Once we are done playing with the server, we can Ctrl-C our way out of it on the terminal to stop it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-our-project-structure" class="anchor"&gt;
  &lt;/a&gt;
  Improving our project structure
&lt;/h2&gt;

&lt;p&gt;Instead of writing things in a file and running it, we will create a package for our application. A sub-directory with an &lt;strong&gt;init&lt;/strong&gt;.py file is considered as a package in Python. This package can then be imported into other packages, thus making our code modular. When we import a package, the &lt;strong&gt;init&lt;/strong&gt;.py file gets executed and it defines the symbols that the package has exposed to be consumed by the outside world.&lt;/p&gt;

&lt;p&gt;We can thus move our file to an &lt;em&gt;application/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;We will also split our routes into a separate routes.py file:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from application import app

@app.route('/')
def index():
    return "Hello, Flask!"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then our &lt;strong&gt;init&lt;/strong&gt;.py file can be:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from flask import Flask

app = Flask(__name__)

from application import routes
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And our simplified hello-flask.py becomes:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from application import app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This will convert our application into a somewhat modular one that we can build upon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remembering-environment-variables-across-terminal-sessions" class="anchor"&gt;
  &lt;/a&gt;
  Remembering environment variables across terminal sessions
&lt;/h2&gt;

&lt;p&gt;Since the terminal does not remember environment variables across sessions, it can be irritating to type in the flask app variable every time we open a new terminal window. We can make use of the python-dotenv package to register environment variables and import them before we run the flask command. All we need to do is install the package:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(venv) $ pip install python-dotenv
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And write the key and value pair of our variables in a .flaskenv file in the root directory:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FLASK_APP=hello-flask.py
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Congratulations! We are on our way to play around with Flask servers. If you have any questions, feel free to drop a comment below.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Books every new software developer should read</title>
      <author>Tanaka Mutakwa</author>
      <pubDate>Mon, 01 Mar 2021 19:06:55 +0000</pubDate>
      <link>https://dev.to/tanakamutakwa/books-every-new-software-developer-should-read-4lan</link>
      <guid>https://dev.to/tanakamutakwa/books-every-new-software-developer-should-read-4lan</guid>
      <description>&lt;p&gt;If you want to be a good software developer you have to be constantly learning. One of the best ways to learn is through reading good books.&lt;/p&gt;

&lt;p&gt;Here is a list with some of the best books new software developers can learn from. I’ve selected books with long-lasting advice that will remain relevant many years from now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tech-resume-inside-out-what-a-good-developer-resume-looks-like-and-how-to-write-one" class="anchor"&gt;
  &lt;/a&gt;
  The Tech Resume Inside Out: What a good developer resume looks like and how to write one
&lt;/h3&gt;

&lt;p&gt;This book helps you craft a developer resume that represents you fairly, plays to your strengths, and increases your chances of getting hired. A practical guide written by the people who do the resume screening: engineering managers and technical recruiters working at tech companies. Free for developers out of a job.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yBXBPxmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/feydmpimrzk6zciy6r48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBXBPxmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/feydmpimrzk6zciy6r48.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cracking-the-coding-interview-189-programming-questions-and-solutions" class="anchor"&gt;
  &lt;/a&gt;
  Cracking the Coding Interview: 189 Programming Questions and Solutions
&lt;/h3&gt;

&lt;p&gt;Cracking the Coding Interview gives you the interview preparation you need to get the top software developer jobs. This is a deeply technical book and focuses on the software engineering skills you need to do well your interview. The book is over 500 pages and includes 189 programming interview questions and answers, as well as other advice.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Om0KsLhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x691e8yd1xo5ju3oc6qv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Om0KsLhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x691e8yd1xo5ju3oc6qv.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-they-dont-teach-you-in-software-school-letters-from-a-mentor" class="anchor"&gt;
  &lt;/a&gt;
  Things they don't teach you in software school: Letters from a mentor
&lt;/h3&gt;

&lt;p&gt;This book contains the top things that any junior developer should know when starting their career in tech. It is a quick and easy read.&lt;/p&gt;

&lt;p&gt;The author spent two years mentoring a young developer, who was just starting their career. After having countless conversations together, he decided to gather all of the advice he ever gave and published it in this eBook.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKhbrEz_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uubjiadlzpd8s0j560eo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKhbrEz_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uubjiadlzpd8s0j560eo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#letters-to-a-new-developer-what-i-wish-i-had-known-when-starting-my-development-career" class="anchor"&gt;
  &lt;/a&gt;
  Letters to a New Developer: What I Wish I Had Known When Starting My Development Career
&lt;/h3&gt;

&lt;p&gt;Learn what you need to succeed as a developer beyond the code. The lessons in this book will supercharge your career by sharing lessons and mistakes from real developers.&lt;/p&gt;

&lt;p&gt;Wouldn't it be nice to learn from others' career mistakes? "Soft" skills are crucial to success, but are haphazardly picked up on the job or, worse, never learned. Understanding these competencies and how to improve them will make you a more effective team member and a more attractive hire.&lt;/p&gt;

&lt;p&gt;This book will teach you the key skills you need, including how to ask questions, how and when to use common tools, and how to interact with other team members. Each will be presented in context and from multiple perspectives so you'll be able to integrate them and apply them to your own career quickly.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMyU9cVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9t4d0amnyb9y2qj1agy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMyU9cVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9t4d0amnyb9y2qj1agy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#soft-skills-the-software-developers-life-manual" class="anchor"&gt;
  &lt;/a&gt;
  Soft Skills: The software developer's life manual
&lt;/h3&gt;

&lt;p&gt;Soft Skills: The software developer's life manual is a unique guide, offering techniques and practices for a more satisfying life as a professional software developer. In it, developer and life coach John Sonmez addresses a wide range of important "soft" topics, from career and productivity to personal finance and investing, and even fitness and relationships, all from a developer-centric viewpoint.&lt;/p&gt;

&lt;p&gt;For most software developers, coding is the fun part. The hard bits are dealing with clients, peers, and managers, staying productive, achieving financial security, keeping yourself in shape, and finding true love. This book is here to help.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UyMkJMCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsnlsrb6ov503fbai2b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UyMkJMCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsnlsrb6ov503fbai2b2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-habits-of-highly-productive-developers" class="anchor"&gt;
  &lt;/a&gt;
  14 Habits of Highly Productive Developers
&lt;/h3&gt;

&lt;p&gt;You can learn the most popular frameworks, use the best programming languages, and work at the biggest tech companies, but if you cultivate bad habits, it will be hard for you to become a top developer.&lt;/p&gt;

&lt;p&gt;This book doesn't offer a straight path or pre-defined formula of success. This book is a result of a quest. A quest to uncover what habits can be cultivated to become a better software engineer.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cLO0YkiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17n7y6mqsonoc7j1bg6r.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cLO0YkiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17n7y6mqsonoc7j1bg6r.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extreme-programming-explained-embrace-change" class="anchor"&gt;
  &lt;/a&gt;
  Extreme Programming Explained: Embrace Change
&lt;/h3&gt;

&lt;p&gt;Software development projects can be fun, productive, and even daring. Yet they can consistently deliver value to a business and remain under control.&lt;/p&gt;

&lt;p&gt;Extreme Programming (XP) was conceived and developed to address the specific needs of software development conducted by small teams in the face of vague and changing requirements. This new lightweight methodology challenges many conventional tenets, including the long-held assumption that the cost of changing a piece of software necessarily rises dramatically over the course of time. XP recognizes that projects have to work to achieve this reduction in cost and exploit the savings once they have been earned.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8bx9cYDi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5wccgmqioyyai1z9plp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bx9cYDi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5wccgmqioyyai1z9plp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clean-code-a-handbook-of-agile-software-craftsmanship" class="anchor"&gt;
  &lt;/a&gt;
  Clean Code: A Handbook of Agile Software Craftsmanship
&lt;/h3&gt;

&lt;p&gt;Even bad code can function. But if code isn't clean, it can bring a development organization to its knees. Every year, countless hours and significant resources are lost because of poorly written code. But it doesn't have to be that way.&lt;/p&gt;

&lt;p&gt;In Clean Code the author has teamed up with his colleagues to distill their best agile practice of cleaning code on the fly into a book that will instil within you the values of a software craftsman and make you a better programmer but only if you work at it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJYFAg-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kz82o4gxr0tfx073owqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJYFAg-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kz82o4gxr0tfx073owqe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-pragmatic-programmer-from-journeyman-to-master" class="anchor"&gt;
  &lt;/a&gt;
  The Pragmatic Programmer: From Journeyman to Master
&lt;/h3&gt;

&lt;p&gt;The Pragmatic Programmer cuts through the increasing specialisation and technicalities of modern software development to examine the core process - taking a requirement and producing working, maintainable code that delights its users. It covers topics ranging from personal responsibility and career development to architectural techniques for keeping your code flexible and easy to adapt and reuse.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cPuDA3Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4uozq0fmtg1t0abhynl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cPuDA3Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4uozq0fmtg1t0abhynl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#refactoring-improving-the-design-of-existing-code" class="anchor"&gt;
  &lt;/a&gt;
  Refactoring: Improving the Design of Existing Code
&lt;/h3&gt;

&lt;p&gt;Refactoring is a controlled technique for improving the design of an existing code base. Its essence is applying a series of small behavior-preserving transformations, each of which "too small to be worth doing". However the cumulative effect of each of these transformations is quite significant. By doing them in small steps you reduce the risk of introducing errors. You also avoid having the system broken while you are carrying out the restructuring - which allows you to gradually refactor a system over an extended period of time.&lt;/p&gt;

&lt;p&gt;This book describes the process of refactoring and spends most of its time explaining how to do the various refactorings - the behavior preserving transformations.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvsvtt6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c46pz9hf8qi2ykkc3xc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvsvtt6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c46pz9hf8qi2ykkc3xc2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-nature-of-software-development-keep-it-simple-make-it-valuable-build-it-piece-by-piece" class="anchor"&gt;
  &lt;/a&gt;
  The Nature of Software Development: Keep It Simple, Make It Valuable, Build It Piece by Piece
&lt;/h3&gt;

&lt;p&gt;This book leads you from the desire for value down to the specific activities that help good Agile projects deliver better software sooner, and at a lower cost. Using simple sketches and a few words, the author invites you to follow his path of learning and understanding from a half century of software development and from his engagement with Agile methods from their very beginning.&lt;/p&gt;

&lt;p&gt;The book describes software development, starting from our natural desire to get something of value. Each topic is described with a picture and a few paragraphs. You're invited to think about each topic; to take it in. You'll think about how each step into the process leads to the next. You'll begin to see why Agile methods ask for what they do, and you'll learn why a shallow implementation of Agile can lead to only limited improvement.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tz8m9PdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ay493842b49fmksaxys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tz8m9PdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ay493842b49fmksaxys.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h3&gt;

&lt;p&gt;Reading good books is one of the best ways to learn and grow as a software developer. It complements your day to day learning at work.&lt;/p&gt;

&lt;p&gt;If you found this post useful and would like to learn more about how to become a better software engineer - subscribe to &lt;a href="https://thenewdeveloper.substack.com/"&gt;The New Developer&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Have you read any of the books on my list? What did you think?&lt;/p&gt;

&lt;p&gt;If you could recommend one book for new software developers, what would it be and why? Let me know in the comments.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>programming</category>
      <category>books</category>
    </item>
    <item>
      <title>Lessons learned during my journey of becoming a Web Developer</title>
      <author>Şahin Arslan</author>
      <pubDate>Mon, 01 Mar 2021 18:51:14 +0000</pubDate>
      <link>https://dev.to/humblecoder00/lessons-learned-during-my-journey-of-becoming-a-web-developer-519o</link>
      <guid>https://dev.to/humblecoder00/lessons-learned-during-my-journey-of-becoming-a-web-developer-519o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ixtrBgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8aaqnizkn0nhgv10qum.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ixtrBgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8aaqnizkn0nhgv10qum.jpg" alt="Photo by https://unsplash.com/@caseyfyfe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I decided to choose programming as my career back in 2018, I didn't had any Computer Science degree or connections that can &lt;strong&gt;clearly&lt;/strong&gt; guide me in this path. All I knew at that moment was the feeling of choosing the right thing for myself - thankfully, I still feel in same way today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chapter-1-research" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Chapter - 1: Research&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;First thing I did was some googling to get some ground on the local options on how to learn programming. Majority of results was based on university educations and paid courses held by private companies. I have also asked some people I know, people that they know to collect enough pieces to form a bigger picture for the roadmap.&lt;/p&gt;

&lt;p&gt;I won't be specifying any names that I have discussed with here, but less or more those were the answers I got at my first iteration:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"You have to go to university, otherwise you can't do it."&lt;/p&gt;

&lt;p&gt;"Why don't you choose to become an IT support instead, education part is easier. By the way you also have to go to school to get certified."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First and foremost, I am not against university education. From time to time I see people arguing and taking sides about having university degree and being self taught. I think it is pointless to looking down on someone just because they don't have a degree - or underestimating university education. At the end of the day, I believe essence of having a job agreement in this area is proving the fact you are able to add value to the company.&lt;/p&gt;

&lt;p&gt;Now back to the research - do I think those people intentionally gave me bad advice? Of course not. How I see is they gave me the best advice that &lt;em&gt;"they think"&lt;/em&gt; it was. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lesson-i-learned-here" class="anchor"&gt;
  &lt;/a&gt;
  Lesson I learned here:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Don't be against taking advices - but never follow them blindly"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because by nature humans don't like uncertainty, it is a lot easier to just follow one advice to get rid of that feeling. Thankfully, I didn't settle down and continued my research. If it was possible for me to follow university path at that point of time, I would probably go with that route. &lt;/p&gt;

&lt;p&gt;But it was not the best choice for me - I didn't had time or possibility to invest 4 years before even coming into job market. If I have listened to those advices, I would be still struggling to keep up while studying - instead of having one year of real work experience and still keep growing every weekday right now. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chapter-2-finding-a-course" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Chapter - 2: Finding a course&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Even I didn't choose the university path, I still needed to study to become employable enough. I find out one of the universities in my area was opening a course for learning programming. It was primarily focused on preparation for job market and taking 50 weeks. Class could only take limited number of applicants - you needed to be successful on the test to be part of it. So I could be ready in 50 weeks instead of 4 years? I got really excited, felt like I finally found the right opportunity. Applied in the same day I heard about it, then unpatiently waited for the reply.&lt;/p&gt;

&lt;p&gt;Then I got a mail about I was selected for the next step and invitation to a test. I had no idea about what kind of questions I was going to be tested with, as I was told there was going to be very general questions and not possible to prepare for them. Even though, I just kept googling and researching to learn about programming concepts as much as I can. &lt;/p&gt;

&lt;p&gt;Time flied quickly then I find myself at the university building, going into a test with more than 300 people in same room. Final class was going to be 30 - 40 people at the end, so I said to myself you should to be in the top 10 percent. I remember being very stressed first time seeing math topics in some questions - naturally. Because last time I have studied math concepts was a decade ago. Still, I tried my best at that point of time. Shortly after test, I received an answer about I didn't make it to top 10 percent, unfortunately I got disqualified.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ot8qQH_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1493836512294-502baa1986e2%3Fixlib%3Drb-1.2.1%26ixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26auto%3Dformat%26fit%3Dcrop%26w%3D1067%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ot8qQH_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1493836512294-502baa1986e2%3Fixlib%3Drb-1.2.1%26ixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26auto%3Dformat%26fit%3Dcrop%26w%3D1067%26q%3D80" alt="" title="Photo by https://unsplash.com/@tjump"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I still remember the frustration like it happened yesterday. All my hopes and excitement for this course was crushed into a thousand pieces. I literally didn't know what to do for a week. But still I didn't take this as a sign that programming was not for me. Because deep down inside I still knew this is the right path for me.&lt;/p&gt;

&lt;p&gt;I have recieved another mail from university, got excited again when I got the notification. Maybe someone else jumped off the course and there was a place for me? It wasn't. Since I was very interested in programming, they referred me to an initiative as an alternative: a Bootcamp like free course about Fullstack Web Development that takes 6 months. I didn't hesitated for a second and applied rightaway.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#even-the-lesson-i-have-learned-here-may-sound-like-a-cheesy-motivational-quote-this-is-something-i-remind-myself-whenever-i-feel-stucked" class="anchor"&gt;
  &lt;/a&gt;
  Even the lesson I have learned here may sound like a cheesy motivational quote, this is something I remind myself whenever I feel stucked:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"As long as you don't give up, there is always another way to be found"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#chapter-3-course-period" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Chapter - 3: Course period&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This bootcamp also had a qualification process, but it was a funnier one. We needed to make an assignment, a simple game using &lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt; engine to show our abilities. I love games a lot, and same time I was 100% dedicated to not miss another opportunity for learning programming. I wanted to make something unique and having fun while doing it. &lt;/p&gt;

&lt;p&gt;I decided to make a game about IKEA (called it KEIA in the game) - it is called "Vikingbullar". Plot was about a hungry Viking getting hit by lightning, suddenly finding himself next to KEIA through time travel. When he gets the smell of delicious meatballs, he goes straight into the KEIA building. You as a player taking the lead at that point to help him eating meatballs while fighting your way through the furnitures.&lt;/p&gt;

&lt;p&gt;A sample visual from gameplay:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUmA8Qr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2ln0wdzydj4xzb9tit1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUmA8Qr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2ln0wdzydj4xzb9tit1.gif" alt="vikingbullar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It took me one week to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sprites for the character + items + monsters (monsters are top 5 selling IKEA products)&lt;/li&gt;
&lt;li&gt;Compose game music&lt;/li&gt;
&lt;li&gt;Implement game logic &amp;amp; wrap everything together&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had a lot of fun while working with it. If you want to play, game is still alive at this link (you will need a desktop web browser to be able to play):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scratch.mit.edu/projects/239040468/"&gt;https://scratch.mit.edu/projects/239040468/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thankfully, I got accepted to the course with this assignment and my education started at the beginning of September 2018. Majority of course was consisted by homeworks, except classes held once a week by volunteer teachers that actually worked as a developer in different companies. I am really thankful to those people invested their free time to teach us voluntarily.&lt;/p&gt;

&lt;p&gt;It is not surprising to have an extremely intense course program, when the goal is to learn Fullstack Web Development in just 6 months. Looking back today, I understand the purpose of those 6 months clearly: it was aimed to give us a solid ground on how things work together. Getting expertise on those areas takes a lot longer time as I have figured out.&lt;/p&gt;

&lt;p&gt;We got to learn the basics of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;Vanilla Javascript&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;As final, a Todo app (absolute classic, isn't it?) to use everything we learned + Final project with the class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How did I hold up all with these? Amount of information was pouring down like rain, completely overwhelming. I had a lot moments feeling lost and didn't know what I was doing. Even finding out how to correctly center a div was taking hours at the beginning. By the time I started to handle more and more complex paradigms and built a couple simple single page applications. As I get better, complexity was not disappearing - but rather it was moving to another level. Then I started to realize - dealing with complexity is one of the core pieces of programmers life. It will always be there in every level.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lesson-i-learned-here" class="anchor"&gt;
  &lt;/a&gt;
  Lesson I learned here:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Dealing with complexity will be always there - embrace this fact and become better on how to deal with it"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#chapter-4-surviving-tutorial-hell" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Chapter - 4: Surviving tutorial hell&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As the time was getting closer to the end of course, I decided to focus on building a better portfolio on the side to get a better advantage when searching entry level jobs. If I only follow the course materials, I would not have much to show other than a simple Todo app.  Which is probably the most popular project that tech recruiters keeps getting in beginners CVs over and over again. If I wanted to differentiate my CV from others, I had to do something different. My knowledge with React was still at a very basic level, I needed a deeper knowledge for building cooler portfolio projects. That's exactly when tutorials came into my life.&lt;/p&gt;

&lt;p&gt;There are enormous amount of programming tutorials out there. When I was browsing Youtube and listening to different instructors, I couldn't follow along with every video. I believe this is something very unique person to person. Remember your schooldays: I bet there was a teacher some of your classmates could follow along easily, but it was not the same for you. I find this to be same with programming tutorials. After a long search, I found Mosh Hamedani as the best instructor I could listen to. If you ever read here Mosh, I am thankful for your amazing teaching style. It made a remarkable difference on my understanding of programming.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QQyR1JRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1499750310107-5fef28a66643%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1950%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQyR1JRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1499750310107-5fef28a66643%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1950%26q%3D80" alt="programming-tutorial" title="Photo by https://unsplash.com/@andrewtneel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First I have followed this courses to sharpen my Javascript skills before diving deep into React:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codewithmosh.com/p/javascript-basics-for-beginners"&gt;Javascript basics for beginners&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codewithmosh.com/p/javascript-basics-for-beginners"&gt;&lt;/a&gt;&lt;a href="https://codewithmosh.com/p/object-oriented-programming-in-javascript"&gt;Object oriented programming in Javascript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then I started with his React course:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codewithmosh.com/p/mastering-react"&gt;Mastering React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shortly after, I figured out his Node.js course was complementary with the React course he had, where you build the backend part for the example React project. This was perfect for me to follow along to build a full stack project while learning Node part:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codewithmosh.com/p/the-complete-node-js-course"&gt;The Complete Node.js course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It took 1,5 months to follow along, take notes and code along with all those courses. After finishing the tutorial, I had to decide if I should take another tutorial on a topic like Redux - or solidify my fresh knowledge. At first sight, taking another tutorial is always more comfortable - you have someone guiding you from start till the end. I choose the second option, but I was still not at a level of building something completely from scratch. &lt;/p&gt;

&lt;p&gt;Best solution I found was to test my knowledge by customizing and extending the course the project I got familiar with. This would gave me the best of both worlds: uncomfortableness of trying something new while repeating the fresh knowledge. I have added extra features like adding a new role based authorization entity and it's handlers, improved admin options, modals, responsive views, and so on.&lt;/p&gt;

&lt;p&gt;Project live preview: &lt;a href="https://medialenderonline.herokuapp.com/"&gt;Medialender&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href="https://github.com/humblecoder00/Personal-Full-stack-project---Medialender"&gt;Medialender github repo&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lesson-i-learned-here" class="anchor"&gt;
  &lt;/a&gt;
  Lesson I learned here:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Whenever you follow a tutorial to learn something new, make sure to do something on your own right after to solidify the knowledge."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I kept following this simple formula on every tutorial I took since first one - and it is still my key to survive tutorial hell.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chapter-5-job-search" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Chapter - 5: Job search&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As soon as I graduated from the course, my job search adventure started. I had some portfolio projects on my belt, polished my CV as much as possible - I naively imagined it would not take too long for me to get an entry level job. I started to send CVs, e-mails, apply to job ads, attend job fairs. I even kept an excel file to keep track of my job applications. Shortly after, I started to realize it was not easy as I imagined to find a job as a developer with no experience:&lt;/p&gt;

&lt;p&gt;Most of the companies didn't even respond to my job applications.&lt;/p&gt;

&lt;p&gt;Some of them stopped communicating after sending my CV.&lt;/p&gt;

&lt;p&gt;It felt bad, almost like getting insulted. After some critical thinking, I came up to the conclusion I should stop bothering myself with how some companies deal with their job applicants. It is something that I have no control over. I focused on the things that I can control instead: my skills, portfolio and getting better at job searching.&lt;/p&gt;

&lt;p&gt;I kept searching jobs while building my portfolio with personal projects, learning new skills, updated my CV and personal letter every 2 weeks if my results were not better than previous 2 weeks. Then shortly after I landed my first ever interview - it was exciting.&lt;/p&gt;

&lt;p&gt;When I came to the interview, I had a mix of excitement and nervousness. But nervousness disappeared shortly after we started to discuss, it felt like a natural conversation and pleasant experience. When I went out from the door I had good feelings. Last thing we talked about was to letting them know when I came back from my holiday - so we could proceed with the next step, which is technical interview. I sent an e-mail as soon as I came back - surprise. I haven't recieved any answer.&lt;/p&gt;

&lt;p&gt;This is when I learned the meaning of term getting ghosted:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;noun:&lt;/strong&gt; the practice of ending a personal relationship with someone by suddenly and without explanation withdrawing from all communication.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--83o8ZsPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1583638666708-5ba77a6f8bd1%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D693%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--83o8ZsPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1583638666708-5ba77a6f8bd1%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D693%26q%3D80" alt="ghosted" title="Photo by https://unsplash.com/@tandemxvisuals"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It felt uncomfortable. I couldn't wrap my head around it, since there was nothing unusual or anything near to it during the interview. I couldn't find any reason that made sense to me. Since I faced ghosting with e-mail only applications up to this point - I didn't expected being ghosted after having a face to face interview. At the end, when I got to know this is also something common that can happen during hiring processes, it ended up being in same class with the things I had no control over. I simply moved on.&lt;/p&gt;

&lt;p&gt;After a month or two, I have landed my second interview with a big company. This time I have passed the screening interview, then invited to have technical onsite interview. I had no idea about what was awaiting for me there. Some people I knew somehow familiar with the company told me I was having high chance to get the job and should not worry with the portfolio I have.&lt;/p&gt;

&lt;p&gt;I had the mix of excitement and nervousness at a better level this time. We had a nice introductory chat with HR person and the Tech manager over a cup of coffee, then they told me now it is time to have a technical interview. They showed me the way, suddenly I find myself in a completely white little room with one white table &amp;amp; chairs, and a big whiteboard. Technical interviewer was sitting and waiting for me with a laptop open.&lt;/p&gt;

&lt;p&gt;We had a very short conversation at the beginning, he went through my CV and asked "So you have worked with Javascript, React, this, and that...". He didn't mentioned or asked any single question about my personal projects. After a short silence, he asked me directly: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; "Show me what you can do, are you ready?"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; "Yes"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; "Can you swipe two variables?"&lt;/p&gt;

&lt;p&gt;I looked around and said: "I don't have my laptop with me, can I use yours?" &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; "No, we will only use the whiteboard."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; "Okay..."&lt;/p&gt;

&lt;p&gt;That was the moment I realized my portfolio was out of discussion and I would be having the test on a whiteboard. It was disturbing to figure this out at that moment. I wasn't prepared! But I picked myself up to proceed with writing a function to swipe variables&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; "No, don't use function. Do it with only variables"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5KtimZ2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/450myr6x5kk0o2gru4tz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5KtimZ2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/450myr6x5kk0o2gru4tz.jpg" alt="Photo by https://unsplash.com/@jeswinthomas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atmosphere in the room was hanging nervous and I started to sweat. I swiped the 2 variables by using help of a 3rd variable. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; "This is not the best way to do it. Solve without using a third variable"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; "How?"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; "Didn't you study math?"&lt;/p&gt;

&lt;p&gt;Then he showed me a math trick to do it. I tried to soften the atmosphere: "Thanks for showing, I learned something interesting"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; "Okay, can you output a Fibonacci sequence?"&lt;/p&gt;

&lt;p&gt;My nervousness got another hit and even started to sweat more. I couldn't do it, almost like my brain got short circuited. I said:  "I am sorry, but I don't remember this. Can you ask me some Javascript related questions? Because since start I only eat, sleep and breath Javascript"&lt;/p&gt;

&lt;p&gt;He asked me several Javascript related questions and I was confidently answering them. Started to feel a little bit better. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then he asked:&lt;/strong&gt; "Do you know how to reverse a linked list?"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I answered like:&lt;/strong&gt; "I am not sure, is it like array of objects?" to try making him explain and soften the discussion. He just shaked his head.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I asked again:&lt;/strong&gt; "Sorry, but is this the type of questions and level being asked to Junior level engineers? Right now I don't know some concepts you have asked me, but I can make sure that I learn them."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; "Yes we ask them. But if they don't know those basics we can't teach them. I think we are done now."&lt;/p&gt;

&lt;p&gt;After a day, I have recieved an e-mail about they were sorry to proceed with another candidate, I could apply again when I got a little bit more experience. I have replied the mail with asking what "little bit more experience" means, so I could get it until the next application. Again - haven't recieved an answer and found myself ghosted.&lt;/p&gt;

&lt;p&gt;This was the most frustrating experience I ever had since start. No one even mentioned about I was going to have an interview, where I was expected to solve data structure and algorithm problems on a whiteboard. My frustration became even more intense when I heard some people at my level didn't even recieve a single algorithm question and passed the test with general questions, ending up being employed. I was happy for them - and I mean it. But this was clearly indicating that something went wrong with my experience.&lt;/p&gt;

&lt;p&gt;I gave some critical thinking onto this. It would be absurd to think about that big company was treating me unfairly on purpose. Most likely the reason that makes sense to me is, somehow I have been wrongly placed in the recruiting pipeline, ended up with an interviewer who deals with senior level developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-i-have-learned-2-lessons" class="anchor"&gt;
  &lt;/a&gt;
  Here I have learned 2 lessons:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"You can't control how companies deal with their job applicants. You may not get an answer, no feedback or even ghosted in the middle of process. Focus on what you can control instead: getting better."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Make sure to establish a better communication with HR to get clarity on hiring process. Always ask what type of technical test you are going to have. "&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recovering after all this took longer time, but I picked myself up again to continue from where I left: build projects, learn more skills and search more jobs.&lt;/p&gt;

&lt;p&gt;After a month or two, I visited the place where I went to course for learning web development. I had a casual discussion with a senior web developer, who was a volunteer teacher at that time. I have shared my story, showed some of my personal projects, told him that I was searching job and asked for some advice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rf9jAf8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1544725121-be3bf52e2dc8%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1947%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rf9jAf8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1544725121-be3bf52e2dc8%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1947%26q%3D80" alt="showing-portfolio" title="Photo by https://unsplash.com/@luisviol"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He said &lt;em&gt;"I just want you to meet someone"&lt;/em&gt; and left, then came back with that person - we introduced ourselves. But I had no idea about the person I was handshaking with would be my current boss today. &lt;/p&gt;

&lt;p&gt;That time I presented myself in a better way. Because I was aware of what I can do and cannot do at that point of time. Even told them if they wanted to test me on a whiteboard, I would need some extra time to prepare. But it turned out to be a test closely related to what I will be doing during working hours - and I was glad to be able to show my abilities this way.&lt;/p&gt;

&lt;p&gt;Now, this sounded like being lucky, right? Probably.&lt;/p&gt;

&lt;p&gt;Do you think I could be able to do something with the luck if I was not ready for it? Probably not.&lt;/p&gt;

&lt;p&gt;If you are still learning or searching your first developer job, continue crafting your skills. You may not be ready to work with some companies, but for some of them your level might be the best fit. You cannot know without knocking the doors. At the end of the day, you only need to find one company that will say "Yes" to start your developer career.&lt;/p&gt;

&lt;p&gt;This was my story of becoming a web developer.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Static Typing in Ruby 3 Gives Me a Headache (But I Could Grow to Like It)</title>
      <author>Jared White</author>
      <pubDate>Mon, 01 Mar 2021 17:51:34 +0000</pubDate>
      <link>https://dev.to/jaredcwhite/static-typing-in-ruby-3-gives-me-a-headache-but-i-could-grow-to-like-it-4p7i</link>
      <guid>https://dev.to/jaredcwhite/static-typing-in-ruby-3-gives-me-a-headache-but-i-could-grow-to-like-it-4p7i</guid>
      <description>&lt;p&gt;I've had a doozy of a time writing this article. See here's the thing: I've been a Ruby programmer for a &lt;em&gt;long&lt;/em&gt; time (and a PHP programmer before that). My other main language exposure just before becoming a Rubyist was Objective-C. That did require putting type names before variable or method signatures, but also Objective-C featured a surprising amount of duck typing and dynamism as well (for better or worst…Swift tried to lock things down quite a bit more).&lt;/p&gt;

&lt;p&gt;But then there's JavaScript / TypeScript.&lt;/p&gt;

&lt;p&gt;My relationship with JavaScript is…complicated, at best. I actually write quite a lot of JavaScript these days. Even more to the point, a lot of the JavaScript I write is in the form of TypeScript. I don't hate JavaScript. The modern ESM environment is quite nice in certain ways. Certainly an improvement over jQuery spaghetti code and callback hell.&lt;/p&gt;

&lt;p&gt;But TypeScript is simply a bridge too far for me. I use it because a project I'm on requires it, but I don't enjoy it. At times I hate it so much I want to throw my computer across the room. However, I can't deny its appeal in one respect: those Intellisense popups and autocompletes in VSCode are very nice, as well as the occasional boneheaded mistake it warns me about.&lt;/p&gt;

&lt;p&gt;What does any of this have to do with Ruby? I'm getting there. Bear with me just a wee bit longer, I implore you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-typescript-without-writing-typescript" class="anchor"&gt;
  &lt;/a&gt;
  Using TypeScript Without Writing TypeScript
&lt;/h3&gt;

&lt;p&gt;One interesting trend I've started to see as of late (at least on Twitter) is taking what's cool about TypeScript type checking, Intellisense, and all the rest…but applying it in such as way that &lt;em&gt;you're not actually writing TypeScript, you're writing JavaScript&lt;/em&gt;. What you do is use &lt;strong&gt;JSDoc&lt;/strong&gt; code comments to add type hints to your file (but not as your actual code). Then use a special mode of TypeScript type checking which will parse the JSDoc comments and interpret them &lt;em&gt;as if you'd written all your type hints inline as actual code&lt;/em&gt;. &lt;a href="https://gils-blog.tayar.org/posts/jsdoc-typings-all-the-benefits-none-of-the-drawbacks/"&gt;Here's a fascinating article all about it.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If this is starting to sound just a wee bit familiar to you, O Rubyist, it should—because &lt;strong&gt;that's exactly what it's like using YARD + Solargraph&lt;/strong&gt; with Ruby.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improving-the-ruby-editing-experience" class="anchor"&gt;
  &lt;/a&gt;
  Improving the Ruby Editing Experience
&lt;/h3&gt;

&lt;p&gt;Right now, I'm in the middle of an extensive overhaul of the &lt;a href="https://www.bridgetownrb.com"&gt;Bridgetown&lt;/a&gt; project to add &lt;a href="https://yardoc.org"&gt;YARD documentation comments&lt;/a&gt; to all classes and methods. With the &lt;a href="https://solargraph.org"&gt;Solargraph gem&lt;/a&gt; + VSCode plugin installed, I get extensive type descriptions and code completion with a minimal amount of effort. If I were to type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It knows that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;resource&lt;/code&gt; is a &lt;code&gt;Bridgetown::Resource::Base&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;collection&lt;/code&gt; is a &lt;code&gt;Bridgetown::Collection&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;site&lt;/code&gt; is a &lt;code&gt;Bridgetown::Site&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;config&lt;/code&gt; is a &lt;code&gt;Bridgetown::Configuration&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if I were to pass some arguments into a method, it would know what those arguments should be. And if I were to assign the return value of that method to a new variable, it would know what type (class) that variable is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Livin' the dream, right?&lt;/strong&gt; But the one missing component of all this is strict type checking. Now the Solargraph gem actually comes with a type checking feature. But I've never used it, because I feel like if I were to go to the trouble of adding type checking to my Ruby workflow, I'd want something which sits a little closer to the language itself and is a recognized standard.&lt;/p&gt;

&lt;p&gt;That's where Ruby 3 + Sord comes in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ruby-3-sord-the-best-of-both-worlds" class="anchor"&gt;
  &lt;/a&gt;
  Ruby 3 + Sord = The Best of Both Worlds?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/AaronC81/sord"&gt;Sord&lt;/a&gt; was originally developed to generate &lt;em&gt;Sorbet&lt;/em&gt; type signature files from YARD comments. Sorbet is a type checking system developed by Stripe, and it does not use anything specific to Ruby 3 but is instead a custom DSL for defining types. However, Sord has recently been upgraded to support generation of &lt;strong&gt;RBS&lt;/strong&gt; files (&lt;strong&gt;R&lt;/strong&gt;u&lt;strong&gt;b&lt;/strong&gt;y &lt;strong&gt;S&lt;/strong&gt;ignature). This means that instead of having to write all your Ruby 3 type signature files by hand (which are standalone—Ruby 3 doesn't support inline typing in Ruby code itself), you can write YARD comments—just like with Solargraph—and autogenerate the signature files.&lt;/p&gt;

&lt;p&gt;Once you have those in place, you use a tool called &lt;a href="https://github.com/soutaro/steep"&gt;Steep&lt;/a&gt;, which is the official type checker "blessed" by the Ruby core team. Steep evaluates your code against your signature files and provides a printout of all the errors and warnings (similar to any other type checker, TypeScript and beyond).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So here's my grand unifying theory of Ruby 3 type checking:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You write YARD comments in your code.&lt;/li&gt;
&lt;li&gt;You install Solargraph for the slick editor features.&lt;/li&gt;
&lt;li&gt;You install Sord to generate &lt;code&gt;.rbs&lt;/code&gt; files.&lt;/li&gt;
&lt;li&gt;You install Steep to type check your Ruby code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nice theory, and &lt;em&gt;extremely similar&lt;/em&gt; in overall concept to all the folks writing JavaScript yet using JSDoc to add "TypeScript" functionality in their code editors and test suites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unfortunately the reality is…not quite there yet.&lt;/strong&gt; It kinda sorta works—with several asterisks. Hence the reason it took me so long to even write an article about Ruby 3 typing…and I'm not even sharing examples of &lt;em&gt;how&lt;/em&gt; to do it but instead my thought process around &lt;em&gt;why&lt;/em&gt; you'd want to do it and what the benefits are relative to all the hassles and headaches.&lt;/p&gt;

&lt;p&gt;In my opinion, a type checking system for Ruby is useless unless it's &lt;em&gt;gradual&lt;/em&gt;. I want everything "unchecked" by default, and "opt-in" specific classes or even methods as we go along. While YARD + Solargraph alone gives you this experience, adding Sord + Steep into the mix does not. There doesn't currently seem to be a way to say &lt;em&gt;only generate type signatures for this file or that and only check this part of the class or that&lt;/em&gt;. At least I wasn't able to find it.&lt;/p&gt;

&lt;p&gt;In addition, all this setup is confusing as hell to beginners. There's no way I can take someone's fresh MacBook Air and install &lt;em&gt;Ruby + VSCode + Solargraph + Sord + Steep (perhaps also Rubocop for linting)&lt;/em&gt; and get everything working perfectly with a minimum of headache and fuss. I myself have seen Solargraph and/or Rubocop support in VSCode break several times for unclear reasons, and it's been a PITA to fix.&lt;/p&gt;

&lt;p&gt;So here's my crazy and wacky proposal: &lt;strong&gt;This should all be one tool.&lt;/strong&gt; 🤯 I want to sit down at a computer, install Ruby + AwesomeRubyTypingTool, and &lt;em&gt;it all just works&lt;/em&gt;. That's the real dream here. I mean, TypeScript is TypeScript. It's not a bunch of random JS libraries you have to manually cobble together into some kind of coherent system. TypeScript—for all its gotchas and flaws—is a known quantity. You might even say &lt;em&gt;it just works&lt;/em&gt;—at least in VSCode. (No surprise there: both VSCode and TypeScript are Microsoft-sponsored projects.)&lt;/p&gt;

&lt;p&gt;I have no idea what it would take for the Ruby core team and the other folks out there building these various tools to get together and hash this all out. But I really hope this story gets a hell of a lot better over the coming months. Because if not…I might just kiss Ruby 3 typing goodbye.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But not Solargraph.&lt;/em&gt; You'd have to pry that out of my cold dead hands. 😆&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion?
&lt;/h3&gt;

&lt;p&gt;What are your thoughts concerning Ruby 3 and static typing? Do you think this ecosystem is headed in the right direction? Do you think I'm wrong in promoting code comments as the preferred way to add typing to Ruby? Would you use Solargraph + Sord + Steep if it all worked together seamlessly? Drop a comment and let me know!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>types</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
