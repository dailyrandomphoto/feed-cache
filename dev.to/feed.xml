<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tips To Avoid Developer Burnout Like a Pro</title>
      <author>Krowser Web Services </author>
      <pubDate>Fri, 09 Jul 2021 05:21:42 +0000</pubDate>
      <link>https://dev.to/krowser/tips-to-avoid-developer-burnout-like-a-pro-1n69</link>
      <guid>https://dev.to/krowser/tips-to-avoid-developer-burnout-like-a-pro-1n69</guid>
      <description>&lt;p&gt;Are you properly handling the stress in your dev life right now?&lt;/p&gt;

&lt;p&gt;Being stressed out because you have pending code to write or not being able to stare at your IDE for longer than 10 minutes without tabbing out and browsing the Web — are both symptoms of developer burnout. In other words, you’ve spent so much of your energy coding that you no longer can stand it.&lt;/p&gt;

&lt;p&gt;This happens to all of us senior and junior devs alike. It’s the problem of having a job that sometimes is also a hobby. When that happens, you love coding so much that you spend nine hours working on it and then a few extra working on your personal projects.&lt;br&gt;
Don’t worry though — at least not too much — because there are ways to avoid burnout. You just have to understand what you’re going through first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kwOYshIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvrxcar77ursdqhrm6yv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kwOYshIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvrxcar77ursdqhrm6yv.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-causes-developer-burnout"&gt;
  &lt;/a&gt;
  What Causes Developer Burnout?
&lt;/h1&gt;

&lt;p&gt;For you to understand how to avoid it, you first need to understand where it comes from. Burnout comes from spending too much energy on a single activity, which in turn affects every other aspect of your life. It’s that simple.&lt;/p&gt;

&lt;p&gt;That can be seen in many ways, for instance, making coding the only activity you do your entire day. When you spend 12 to 18 hours a day coding, what else do you have time for? Other than eating and sleeping, I mean?&lt;br&gt;
Or, perhaps only focusing on coding, even when you’re not writing code. Reading about coding, coding techniques, new frameworks, other languages. While you’re not actively writing code when doing any of these things, you’re still only focusing on a single task. Your mind is unable to break from the coding state of mind. Even if you’re not consciously thinking about them, your coding blockers (pending tasks on your daily job, future features you’re trying to implement on your pet project, new frameworks you’ve been dying to learn but haven’t had the time for) are adding to your stress and anxiety.&lt;/p&gt;

&lt;p&gt;You can tell yourself you’re doing it for a reason but no matter how noble that reason might be, you’ll end up burning out. Even if your mind resists it, your body will yield. You’ll start seeing physical problems such as losing (or graying) hair, stomach issues, upper back or neck pains due to strained muscles. These are all symptoms burned out developers feel. I know because I’ve felt them myself.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-can-you-do-to-avoid-burnout-then"&gt;
  &lt;/a&gt;
  What Can You Do To Avoid Burnout Then?
&lt;/h1&gt;

&lt;p&gt;Stop coding. That’s the first step.&lt;br&gt;
Not entirely of course, but give yourself a fixed time window in which you’re allowed to code. Then stop.&lt;br&gt;
And by “stop” I mean it. Close your IDE, stop Googling for a solution, and making notes for tomorrow. It’s “you” time now.&lt;br&gt;
I don’t care if you love coding. You are not a code-writing machine, you’re a person, and we humans need more than one thing in our lives. You need interaction with other people or activities that will keep your mind off of coding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N0nvSw_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myb2w2y9mhskd77mf93c.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N0nvSw_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myb2w2y9mhskd77mf93c.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
What can you do? Here are a few ideas:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#play-a-game"&gt;
  &lt;/a&gt;
  Play a game
&lt;/h1&gt;

&lt;p&gt;If you’re not a social person, playing games can also help.But, please don't play a game you developed, if not you will get disturbed is there are any bugs in the game play.&lt;/p&gt;

&lt;p&gt;Find one that speaks to you and captures your attention, then dive right into it. Mind you, don’t change one burnout for the other, but try to balance your gaming time within your day. Maybe spend one or two hours after work as a way to help your mind make the context switch into not thinking about code anymore.&lt;br&gt;
And if you are a social person, you can still implement gaming with friends (especially now that we’re all isolated) through online gaming. Use voice chat to pretend you’re all sitting together; that also adds a lot to the experience and allows you to have an actual conversation about other people’s interests. It’ll force you to stop thinking about your code and think about something completely different.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#read-a-book-watch-a-movie"&gt;
  &lt;/a&gt;
  Read a book / Watch a movie
&lt;/h1&gt;

&lt;p&gt;While they’re not the same type of activity, they both contribute in the same way: they take you out of your world and put you into a different one. If you’re more into “not thinking and letting others do the work for you,” then a movie is a great escape ( I personally love watching movies to forget about work problems).&lt;br&gt;
If, on the other hand, you have the time to read a book, then it’ll have the same effect. It’ll take you out of your house and into a completely different world where your problems (and your context) don’t exist. You’ll spend a few hours completely unaware of whatever is causing the burnout. You’ll feel refreshed and re-invigorated once you’ve closed that book for the day.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#catch-up-with-friends-or-family"&gt;
  &lt;/a&gt;
  Catch up with friends or family
&lt;/h1&gt;

&lt;p&gt;If you can, leave your house. But if you can’t, a video call or even a phone call will do. Talk to other people and actively listen to them. Making a call “because you have to” and then going back to coding will not have any positive effect. Instead, spend some time having a conversation about life, about problems, or about anything that is not work-related. Something as simple as that will help you get your mind off whatever is causing your burnout.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#take-a-break"&gt;
  &lt;/a&gt;
  Take a break
&lt;/h1&gt;

&lt;p&gt;Funny story, I didn’t know how to finish this article, and I had been writing since 4 a.m., so I left for a walk right at this point. It was a beautiful day, so my wife and I went for a walk. We picked up my kids from school, spent some time with them, and in the end, it was too late for me to go back to writing. It’s the next day now, my mind is fresher, and I know how to move forward. I could’ve stressed out about the fact that I couldn’t finish this story yesterday, but instead, I gave myself time. That’s the whole point of taking a break.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ryl3-eSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqqe1l11u5xwyxyuodx3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ryl3-eSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqqe1l11u5xwyxyuodx3.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-off-of-social-media"&gt;
  &lt;/a&gt;
  Get off of social media
&lt;/h1&gt;

&lt;p&gt;Look, I get it, I love using Twitter, Clubhouse &amp;amp; LinkedIn, and I’m sure you have your favorite social media platform, but you need to stop using them from time to time. Some people even recommend uninstalling these apps from your mobile devices, so you can remove the notifications-related anxiety from your life. This is great if you notice that your social media activity is 100% related to your burnout. If you’re getting burned out because you have an open source project that’s getting lots of activity online, then your phone is probably buzzing with updates. Stop it. You can’t unplug if you’re constantly reminded about it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dl8fUghN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fo5a6ltvner6gzkj25km.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dl8fUghN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fo5a6ltvner6gzkj25km.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#remove-workrelated-notifications-from-your-mobile-devices"&gt;
  &lt;/a&gt;
  Remove work-related notifications from your mobile devices
&lt;/h1&gt;

&lt;p&gt;In the same vein as the social media app removal, if it’s work that’s causing your burnout, unplug from it. That means turning off email and slack (or whatever combination you might have) notifications, or even if you have a dedicated work phone, turn it off if you can. If you’re not meant to be working, you should not be looking at work-related notifications. That’s the rule you need to live by.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3OEfe5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy8cwssrupu072owr4jj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3OEfe5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy8cwssrupu072owr4jj.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#it-can-wait"&gt;
  &lt;/a&gt;
  It Can Wait
&lt;/h1&gt;

&lt;p&gt;That’s the mantra you need to keep in the back of your mind. That problem you’ve been trying to solve for the past five days? It can wait a few more hours. Take a break. That new release of your framework? It can wait a little longer. Spend some time with your family. That email you started writing three times but got interrupted? It can wait; it’s “you” time. Go read a book.&lt;br&gt;
Once you accept the fact that everything but your health can wait, then taking a break becomes slightly easier.&lt;/p&gt;

&lt;p&gt;What are you doing to lower or avoid your own burnout? How are you handling stress during the pandemic? Share your experience with others in the comments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FW7XCCOy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zubpzuk7z1ulmzj3rz9g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FW7XCCOy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zubpzuk7z1ulmzj3rz9g.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Enjoy the most lightweight AI inference</title>
      <author>Yona</author>
      <pubDate>Fri, 09 Jul 2021 05:13:41 +0000</pubDate>
      <link>https://dev.to/yoname/enjoy-the-most-lightweight-ai-inference-with-yomo-and-wasmedge-43jn</link>
      <guid>https://dev.to/yoname/enjoy-the-most-lightweight-ai-inference-with-yomo-and-wasmedge-43jn</guid>
      <description>&lt;p&gt;AI Inference for Real-time Data Streams with WasmEdge and YoMo&lt;br&gt;
• 6 minutes to read&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yomorun/yomo"&gt;YoMo&lt;/a&gt; is a programming framework enabling developers to build a distributed cloud system (Geo-Distributed Cloud System). YoMo's communication layer is made on top of the QUIC protocol, which brings high-speed data transmission. In addition, it has a built-in Streaming Serverless “streaming function”, which significantly improves the development experience of distributed cloud systems. The distributed cloud system built by YoMo provides an ultra-high-speed communication mechanism between near-field computing power and terminals. It has a wide range of use cases in Metaverse, VR/AR, IoT, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;YoMo is written in the Go language. For streaming Serverless, Golang plugins and shared libraries are used to load users’ code dynamically, which also have certain limitations for developers. Coupled with Serverless architecture's rigid demand for isolation, this makes WebAssembly an excellent choice for running user-defined functions.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/yomorun"&gt;
        yomorun
      &lt;/a&gt; / &lt;a href="https://github.com/yomorun/yomo"&gt;
        yomo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🦖 Serverless Streaming Framework for Low-latency Edge Computing applications, running atop QUIC protocol, engaging 5G technology.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/WasmEdge"&gt;
        WasmEdge
      &lt;/a&gt; / &lt;a href="https://github.com/WasmEdge/WasmEdge"&gt;
        WasmEdge
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      WasmEdge Runtime is a high-performance, extensible, and hardware optimized WebAssembly Virtual Machine for automotive, cloud, AI, and blockchain applications.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;/blockquote&gt;

&lt;p&gt;For example, in the process of real-time AI inference in AR/VR devices or smart factories, the camera sends real-time unstructured data to the computing node in the near-field MEC (multi-access edge computing) device through YoMo. YoMo sends the AI computing result to the end device in real-time when the AI inference is completed. Thus, the hosted AI inference function will be automatically executed.&lt;/p&gt;

&lt;p&gt;However, a challenge for YoMo is to incorporate and manage handler functions written by multiple outside developers in an edge computing node. It requires runtime isolation for those functions without sacrificing performance. Traditional software container solutions, such as Docker, are not up to the task. They are too heavy and slow to handle real-time tasks.&lt;/p&gt;

&lt;p&gt;WebAssembly provides a lightweight and high-performance software container. It is ideally suited as a runtime for YoMo’s data processing handler functions.&lt;/p&gt;

&lt;p&gt;In this article, we will show you how to create a Rust function for Tensorflow-based image classification, compile it into WebAssembly, and then use YoMo to run it as a stream data handler. We use &lt;a href="https://wasmedge.org/"&gt;WasmEdge&lt;/a&gt; as our WebAssembly runtime because it offers the highest performance and flexibility compared with other WebAssembly runtimes. It is the only WebAssembly VM that reliably supports Tensorflow. YoMo manages WasmEdge VM instances and the contained WebAssembly bytecode apps through &lt;a href="https://github.com/second-state/WasmEdge-go"&gt;WasmEdge’s Golang API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yomorun/yomo-wasmedge-tensorflow"&gt;Source code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checkout the &lt;a href="https://www.youtube.com/watch?v=E0ltsn6cLIU"&gt;WasmEdge image classification function in action in YoMo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;p&gt;Obviously, you will need to have &lt;a href="https://golang.org/doc/install"&gt;Golang installed&lt;/a&gt;, but I will assume you already did.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Golang version should be newer than 1.15 for our example to work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You also need to install the YoMo CLI application. It orchestrates and coordinates data streaming and handler function invocations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go install github.com/yomorun/cli/yomo@latest
$ yomo version
YoMo CLI version: v0.0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, please install the WasmEdge and its Tensorflow shared libraries. &lt;a href="https://wasmedge.org/"&gt;WasmEdge&lt;/a&gt; is a leading WebAssembly runtime hosted by the CNCF. We will use it to embed and run WebAssembly programs from YoMo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Install WasmEdge
$ wget https://github.com/second-state/WasmEdge-go/releases/download/v0.8.1/install_wasmedge.sh
$ chmod +x ./install_wasmedge.sh
$ sudo ./install_wasmedge.sh /usr/local

# Install WasmEdge Tensorflow extension
$ wget https://github.com/second-state/WasmEdge-go/releases/download/v0.8.1/install_wasmedge_tensorflow_deps.sh
$ wget https://github.com/second-state/WasmEdge-go/releases/download/v0.8.1/install_wasmedge_tensorflow.sh
$ chmod +x ./install_wasmedge_tensorflow_deps.sh
$ chmod +x ./install_wasmedge_tensorflow.sh
$ sudo ./install_wasmedge_tensorflow_deps.sh /usr/local
$ sudo ./install_wasmedge_tensorflow.sh /usr/local

# Install WasmEdge Images extension
$ wget https://github.com/second-state/WasmEdge-go/releases/download/v0.8.1/install_wasmedge_image_deps.sh
$ wget https://github.com/second-state/WasmEdge-go/releases/download/v0.8.1/install_wasmedge_image.sh
$ chmod +x ./install_wasmedge_image_deps.sh
$ chmod +x ./install_wasmedge_image.sh
$ sudo ./install_wasmedge_image_deps.sh /usr/local
$ sudo ./install_wasmedge_image.sh /usr/local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, since our demo WebAssembly functions are written in Rust, you will also need a &lt;a href="https://www.secondstate.io/articles/rustwasmc/"&gt;Rust compiler and the rustwasmc toolchain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the rest of the demo, fork and clone the &lt;a href="https://github.com/yomorun/yomo-wasmedge-tensorflow"&gt;source code repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git clone https://github.com/yomorun/yomo-wasmedge-tensorflow.git&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-image-classification-function"&gt;
  &lt;/a&gt;
  The image classification function
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/yomorun/yomo-wasmedge-tensorflow/tree/main/flow/rust_mobilenet_food"&gt;image classification function&lt;/a&gt; to process the YoMo image stream is written in Rust. It utilizes the WasmEdge Tensorflow API to process an input image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#[wasm_bindgen]
pub fn infer(image_data: &amp;amp;[u8]) -&amp;gt; String {
    // Load the TFLite model and its meta data (the text label for each recognized object number)
    let model_data: &amp;amp;[u8] = include_bytes!("lite-model_aiy_vision_classifier_food_V1_1.tflite");
    let labels = include_str!("aiy_food_V1_labelmap.txt");

    // Pre-process the image to a format that can be used by this model
    let flat_img = wasmedge_tensorflow_interface::load_jpg_image_to_rgb8(image_data, 192, 192);

    // Run the TFLite model using the WasmEdge Tensorflow API
    let mut session = wasmedge_tensorflow_interface::Session::new(&amp;amp;model_data, wasmedge_tensorflow_interface::ModelType::TensorFlowLite);
    session.add_input("input", &amp;amp;flat_img, &amp;amp;[1, 192, 192, 3])
           .run();
    let res_vec: Vec&amp;lt;u8&amp;gt; = session.get_output("MobilenetV1/Predictions/Softmax");

    // Find the object index in res_vec that has the greatest probability
    // Translate the probability into a confidence level
    // Translate the object index into a label from the model meta data food_name

    ret_str = format!(
        "It {} a &amp;lt;a href='https://www.google.com/search?q={}'&amp;gt;{}&amp;lt;/a&amp;gt; in the picture",
        confidence, food_name, food_name
    );
    return ret_str;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use the &lt;a href="https://www.secondstate.io/articles/rustwasmc/"&gt;rustwasmc&lt;/a&gt; tool to compile this function into WebAssembly bytecode.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At this time, we require Rust compiler version 1.50 or less in order for WebAssembly functions to work with WasmEdge’s Golang API. We will catch up to the &lt;a href="https://github.com/WasmEdge/WasmEdge/issues/264"&gt;latest Rust compiler version&lt;/a&gt; once the Interface Types spec is finalized and supported.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rustup default 1.50.0

$ cd flow/rust_mobilenet_food
$ rustwasmc  build `--enable-ext`
# The output WASM will be pkg/rust_mobilenet_food_lib_bg.wasm.

# Copy the wasm bytecode file to the flow/ directory
$ cp pkg/rust_mobilenet_food_lib_bg.wasm ../
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#integration-with-yomo"&gt;
  &lt;/a&gt;
  Integration with YoMo
&lt;/h2&gt;

&lt;p&gt;On the YoMo side, we use the WasmEdge Golang API to start and run WasmEdge VM for the image classification function. The &lt;a href="https://github.com/yomorun/yomo-wasmedge-tensorflow/blob/main/flow/app.go"&gt;app.go&lt;/a&gt; file in the source code project is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
package main

... ...

var (
    vm      *wasmedge.VM
    vmConf  *wasmedge.Configure
    counter uint64
)

func main() {
    // Initialize WasmEdge's VM
    initVM()
    defer vm.Delete()
    defer vmConf.Delete()

    // Connect to Zipper service
    cli, err := client.NewServerless("image-recognition").Connect("localhost", 9000)
    if err != nil {
        log.Print("❌ Connect to zipper failure: ", err)
        return
    }

    defer cli.Close()
    cli.Pipe(Handler)
}

// Handler process the data in the stream
func Handler(rxStream rx.RxStream) rx.RxStream {
    stream := rxStream.
        Subscribe(ImageDataKey).
        OnObserve(decode).
        Encode(0x11)

    return stream
}

// decode Decode and perform image recognition
var decode = func(v []byte) (interface{}, error) {
    // get image binary
    p, _, _, err := y3.DecodePrimitivePacket(v)
    if err != nil {
        return nil, err
    }
    img := p.ToBytes()

    // recognize the image
    res, err := vm.ExecuteBindgen("infer", wasmedge.Bindgen_return_array, img)

    return hash, nil
}

... ...

// initVM initialize WasmEdge's VM
func initVM() {
    wasmedge.SetLogErrorLevel()
    vmConf = wasmedge.NewConfigure(wasmedge.WASI)
    vm = wasmedge.NewVMWithConfig(vmConf)

    var wasi = vm.GetImportObject(wasmedge.WASI)
    wasi.InitWasi(
        os.Args[1:],     /// The args
        os.Environ(),    /// The envs
        []string{".:."}, /// The mapping directories
        []string{},      /// The preopens will be empty
    )

    /// Register WasmEdge-tensorflow and WasmEdge-image
    var tfobj = wasmedge.NewTensorflowImportObject()
    var tfliteobj = wasmedge.NewTensorflowLiteImportObject()
    vm.RegisterImport(tfobj)
    vm.RegisterImport(tfliteobj)
    var imgobj = wasmedge.NewImageImportObject()
    vm.RegisterImport(imgobj)

    /// Instantiate wasm
    vm.LoadWasmFile("rust_mobilenet_food_lib_bg.wasm")
    vm.Validate()
    vm.Instantiate()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#in-action"&gt;
  &lt;/a&gt;
  In action
&lt;/h2&gt;

&lt;p&gt;Finally, we can start YoMo and see the entire data processing pipeline in action. Start the YoMo CLI application from the project folder. The yaml file defines port YoMo should listen on and the workflow handler to trigger for incoming data. Note that the flow name image-recognition matches the name in the aforementioned data handler app.go.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ yomo serve -c ./zipper/workflow.yaml&lt;/code&gt;&lt;br&gt;
Start the handler function by running the aforementioned app.go program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd flow
$ go run --tags "tensorflow image" app.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start a simulated data source by sending a video to YoMo. The video is a series of image frames. The WasmEdge function in app.go will be invoked against every image frame in the video.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Download a video file
$ wget -P source 'https://github.com/yomorun/yomo-wasmedge-tensorflow/releases/download/v0.1.0/hot-dog.mp4'

# Stream the video to YoMo
$ go run ./source/main.go ./source/hot-dog.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the output from the WasmEdge handler function in the console. It prints the names of the objects detected in each image frame in the video.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>ai</category>
      <category>serverless</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Front End Developer Personal Website</title>
      <author>Ajo Alex</author>
      <pubDate>Fri, 09 Jul 2021 04:53:34 +0000</pubDate>
      <link>https://dev.to/ajoalex/front-end-developer-personal-website-2mn6</link>
      <guid>https://dev.to/ajoalex/front-end-developer-personal-website-2mn6</guid>
      <description>&lt;p&gt;&lt;a href="https://ajo-alex.netlify.app/"&gt;https://ajo-alex.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today i finished my personal website with react js&lt;/p&gt;

</description>
      <category>react</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Creating Dev.to Clone with Angular</title>
      <author>Ajit Singh</author>
      <pubDate>Fri, 09 Jul 2021 04:07:40 +0000</pubDate>
      <link>https://dev.to/ajitsinghkaler/creating-dev-to-clone-with-angular-4j41</link>
      <guid>https://dev.to/ajitsinghkaler/creating-dev-to-clone-with-angular-4j41</guid>
      <description>&lt;p&gt;I'm starting a new series in which we will create a dev.to clone in angular. I will release some work every Thursday. I'm busy on all other days. I will use&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Component store for state management&lt;/li&gt;
&lt;li&gt;Rx-angular template for RxLet and push pipe&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Rest we will add stuff as needed and think about it in various scenario's as we go. I'll add stuff to github repo on Thursday and drop an article on what we did on Friday. Follow along if you want to learn more about Angular.&lt;/p&gt;

&lt;p&gt;Github Repo - &lt;a href="https://github.com/ajitsinghkaler/devto-clone"&gt;https://github.com/ajitsinghkaler/devto-clone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deployed on Firebase - &lt;a href="https://dev-toclone.firebaseapp.com/"&gt;https://dev-toclone.firebaseapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right now we have created the header component and next we will create the side bar.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wFJJYyB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/einwybxpfjnh6jhx2p7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wFJJYyB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/einwybxpfjnh6jhx2p7z.png" alt="Sidebar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each commit message will tell what we have done in that commit. Follow alone if you want to learn angular and let me know if any enhancements you think are needed create an issue on the repo if you want we can discuss there.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>React Typescript example Project with Axios and Web API</title>
      <author>Tien Nguyen</author>
      <pubDate>Fri, 09 Jul 2021 02:05:47 +0000</pubDate>
      <link>https://dev.to/tienbku/react-typescript-example-project-with-axios-and-web-api-70k</link>
      <guid>https://dev.to/tienbku/react-typescript-example-project-with-axios-and-web-api-70k</guid>
      <description>&lt;p&gt;In this tutorial, I will show you how to build a React Hooks CRUD Application to consume Web API with Axios, display and modify data with Router &amp;amp; Bootstrap.&lt;/p&gt;

&lt;p&gt;Full Article: &lt;a href="https://bezkoder.com/react-typescript-axios/"&gt;https://bezkoder.com/react-typescript-axios/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Overview of React Typescript example Project&lt;/h2&gt;

&lt;p&gt;We will build a React Tutorial Application with Axios and Web API in that:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Each Tutorial has id, title, description, published status.&lt;/li&gt;
    &lt;li&gt;We can create, retrieve, update, delete Tutorials.&lt;/li&gt;
    &lt;li&gt;There is a Search bar for finding Tutorials by title.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are screenshots of our React CRUD Application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a Tutorial:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5omUMDJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghx3aup4ubqhp0t8wtke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5omUMDJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghx3aup4ubqhp0t8wtke.png" alt="react-typescript-project-axios-crud-create-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve all Tutorials:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdkFLlmw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7e35otqv6j7mbeclyboj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdkFLlmw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7e35otqv6j7mbeclyboj.png" alt="react-typescript-project-axios-crud-retrieve-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on &lt;strong&gt;Edit&lt;/strong&gt; button to update an item:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n7wXKkEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz4kycb55482my1ovpgs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n7wXKkEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz4kycb55482my1ovpgs.png" alt="react-typescript-project-axios-crud-retrieve-one-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this Page, you can:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;change status to &lt;strong&gt;Published&lt;/strong&gt; using &lt;strong&gt;Publish&lt;/strong&gt; button&lt;/li&gt;
    &lt;li&gt;delete the item using &lt;strong&gt;Delete&lt;/strong&gt; button&lt;/li&gt;
    &lt;li&gt;update the item details with &lt;strong&gt;Update&lt;/strong&gt; button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--POhvUlh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/868evjw8rk8fddc0uqmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--POhvUlh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/868evjw8rk8fddc0uqmr.png" alt="react-typescript-project-axios-crud-update-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search Tutorials by title:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1i86DtZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xdaouu020sove7i4stl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1i86DtZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xdaouu020sove7i4stl.png" alt="react-typescript-project-axios-crud-search-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This React Client consumes the following Web API:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Urls&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;create new Tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;retrieve all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;retrieve a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;update a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;delete a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;delete all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials?title=[keyword]&lt;/td&gt;
&lt;td&gt;find all Tutorials which title contains &lt;code&gt;keyword&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;You can find step by step to build a Server like this in one of these posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-js-express-sequelize-mysql/"&gt;Express, Sequelize &amp;amp; MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-express-sequelize-postgresql/"&gt;Express, Sequelize &amp;amp; PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-express-mongodb-crud-rest-api/"&gt;Express &amp;amp; MongoDb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-jpa-crud-rest-api"&gt;Spring Boot &amp;amp; MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-postgresql-example/"&gt;Spring Boot &amp;amp; PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-mongodb-crud/"&gt;Spring Boot &amp;amp; MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-jpa-h2-example/"&gt;Spring Boot &amp;amp; H2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-cassandra-crud/"&gt;Spring Boot &amp;amp; Cassandra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-hibernate-oracle/"&gt;Spring Boot &amp;amp; Oracle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/django-crud-mysql-rest-framework/"&gt;Django &amp;amp; MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/django-postgresql-crud-rest-framework/"&gt;Django &amp;amp; PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/django-mongodb-crud-rest-framework/"&gt;Django &amp;amp; MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Component Diagram&lt;/h2&gt;

&lt;p&gt;Now look at the React components that we're gonna implement:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUqy_6D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvxhzgymwmppkujegker.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUqy_6D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvxhzgymwmppkujegker.png" alt="react-typescript-project-axios-crud-components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– The &lt;code&gt;App&lt;/code&gt; component is a container with React &lt;code&gt;Router&lt;/code&gt;. It has &lt;code&gt;navbar&lt;/code&gt; that links to routes paths.&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;TutorialsList&lt;/code&gt; component gets and displays Tutorials.&lt;br&gt;
– &lt;code&gt;Tutorial&lt;/code&gt; component has form for editing Tutorial's details based on &lt;code&gt;:id&lt;/code&gt;.&lt;br&gt;
– &lt;code&gt;AddTutorial&lt;/code&gt; component has form for submission new Tutorial.&lt;/p&gt;

&lt;p&gt;– These Components call &lt;code&gt;TutorialDataService&lt;/code&gt; methods which use &lt;code&gt;axios&lt;/code&gt; to make HTTP requests and receive responses.&lt;/p&gt;

&lt;h2&gt;Technology&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;React 17/16&lt;/li&gt;
    &lt;li&gt;react-router-dom 5&lt;/li&gt;
    &lt;li&gt;axios 0.21.1&lt;/li&gt;
    &lt;li&gt;bootstrap 4.6.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TU3jHNZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdjxbz921tw2lakuncs0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TU3jHNZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdjxbz921tw2lakuncs0.png" alt="react-typescript-project-axios-crud-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm gonna explain it briefly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;package.json&lt;/strong&gt; contains 5 main modules: &lt;code&gt;react&lt;/code&gt;, &lt;code&gt;typescript&lt;/code&gt;, &lt;code&gt;react-router-dom&lt;/code&gt;, &lt;code&gt;axios&lt;/code&gt; &amp;amp; &lt;code&gt;bootstrap&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;App&lt;/code&gt; is the container that has &lt;code&gt;Router&lt;/code&gt; &amp;amp; navbar.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;tutorial.type.ts&lt;/strong&gt; exports &lt;code&gt;ITutorialData&lt;/code&gt; interface.&lt;/li&gt;
&lt;li&gt;There are 3 components: &lt;code&gt;TutorialsList&lt;/code&gt;, &lt;code&gt;Tutorial&lt;/code&gt;, &lt;code&gt;AddTutorial&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;http-common.ts&lt;/strong&gt; initializes axios with HTTP base Url and headers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TutorialDataService&lt;/code&gt; has methods for sending HTTP requests to the Apis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;.env&lt;/strong&gt; configures &lt;em&gt;port&lt;/em&gt; for this React CRUD App.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For steps and Github source code, please visit:&lt;br&gt;
&lt;a href="https://bezkoder.com/react-typescript-axios/"&gt;https://bezkoder.com/react-typescript-axios/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or using Hooks instead React Components:&lt;br&gt;
&lt;a href="https://bezkoder.com/react-typescript-api-call/"&gt;React Hooks Typescript with API call example&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;Fullstack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-spring-boot-crud/"&gt;React + Spring Boot + MySQL: CRUD example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-react-postgresql/"&gt;React + Spring Boot + PostgreSQL: CRUD example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-spring-boot-mongodb/"&gt;React + Spring Boot + MongoDB: CRUD example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-mysql/"&gt;React + Node.js + Express + MySQL: CRUD example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-postgresql/"&gt;React + Node.js + Express + PostgreSQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-mongodb-mern-stack/"&gt;React + Node.js + Express + MongoDB example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/django-react-axios-rest-framework/"&gt;React + Django + Rest Framework example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Serverless with Firebase:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-firebase-crud/"&gt;React Firebase CRUD with Realtime Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-firestore-crud/"&gt;React Firestore CRUD App example | Firebase Cloud Firestore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Integration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/integrate-reactjs-spring-boot/"&gt;Integrate React with Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/integrate-react-express-same-server-port/"&gt;Integrate React with Node.js Express&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Serverless GraphQL in Rust with Diana</title>
      <author>arctic_hen7</author>
      <pubDate>Fri, 09 Jul 2021 01:52:03 +0000</pubDate>
      <link>https://dev.to/arctic_hen7/serverless-graphql-in-rust-with-diana-2b3m</link>
      <guid>https://dev.to/arctic_hen7/serverless-graphql-in-rust-with-diana-2b3m</guid>
      <description>&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/diana-graphql"&gt;
        diana-graphql
      &lt;/a&gt; / &lt;a href="https://github.com/diana-graphql/diana"&gt;
        diana
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Rust GraphQL system with full support for subscriptions and authentication that works out of the box.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Diana&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pragmatic GraphQL that just works.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://diana-graphql.github.io" rel="nofollow"&gt;Book&lt;/a&gt; • &lt;a href="https://crates.io/crates/diana" rel="nofollow"&gt;Crate Page&lt;/a&gt; • &lt;a href="https://docs.rs/diana" rel="nofollow"&gt;API Documentation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/diana-graphql/diana/main/./CONTRIBUTING.md"&gt;Contributing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Diana is a GraphQL system for Rust that's designed to work as simply as possible out of the box, without sacrificing configuration ability. Unlike other GraphQL systems, Diana &lt;strong&gt;fully supports serverless functions and automatically integrates them with a serverful subscriptions system&lt;/strong&gt; as needed, and over an authenticated channel. GraphQL subscriptions are state&lt;em&gt;ful&lt;/em&gt;, and so have to be run in a server&lt;em&gt;ful&lt;/em&gt; way. Diana makes this process as simple as possible.&lt;/p&gt;
&lt;p&gt;Diana's documentation can be found in &lt;a href="https://diana-graphql.github.io" rel="nofollow"&gt;the book&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;Getting started with Diana is really easy! Just install it by adding this to your &lt;code&gt;Cargo.toml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;diana = "0.2.3"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Due to the complexity of its components, Diana does have a lot of dependencies, so you may want to go and have a cup of tea while you wait for the installation…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/diana-graphql/diana"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;A while ago, I was thinking about how to get serverless GraphQL working with subscriptions. Unfortunately, you can't easily, because subscriptions are state*ful*, and so they have to be run on a server*ful* system. But there's nothing to stop a serverful subscriptions system from being connected to a serverless queries/mutations system!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/diana-graphql/diana"&gt;Diana&lt;/a&gt; is a GraphQL system for Rust that does just this. It's mostly a high-level wrapper around the excellent work of &lt;a href="https://github.com/async-graphq/async-graphql"&gt;async_graphql&lt;/a&gt;, but it adds authentication and a bridge between serverful and serverless systems.&lt;/p&gt;

&lt;p&gt;Right now, Diana supports integration with &lt;a href="https://actix.rs"&gt;Actix Web&lt;/a&gt; and AWS Lambda (including derivatives like Netlify) out of the box, with support for more platforms coming soon! You can read Diana's documentation in &lt;a href="https://diana-graphql.github.io"&gt;the book&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;You can easily install Diana by adding this to your &lt;code&gt;Cargo.toml&lt;/code&gt; under &lt;code&gt;[dependencies]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="py"&gt;diana&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.2.3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All Diana's integrations (currently &lt;a href="https://crates.io/crates/diana-actix-web"&gt;&lt;code&gt;diana-actix-web&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://crates.io/crates/diana-aws-lambda"&gt;&lt;code&gt;diana-aws-lambda&lt;/code&gt;&lt;/a&gt;) are kept to the same version as the core library, so everything is always at the same version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Diana is pretty easy to use, just define your configuration and set up the integration and you're good to go, with authentication built-in! There's more on how to do this in the docs &lt;a href="https://diana-graphql.github.io/diana/getting_started.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-words"&gt;
  &lt;/a&gt;
  Closing Words
&lt;/h2&gt;

&lt;p&gt;I've found Diana to be really useful so far for simplifying GraphQL in my own projects, so I hope it helps someone! Please open an issue on the repository if you find a bug or want to propose a new feature!&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>rust</category>
      <category>serverless</category>
    </item>
    <item>
      <title>How to pass data between React components?</title>
      <author>Murat Can Yüksel</author>
      <pubDate>Fri, 09 Jul 2021 01:12:51 +0000</pubDate>
      <link>https://dev.to/muratcanyuksel/how-to-pass-data-between-react-components-3i70</link>
      <guid>https://dev.to/muratcanyuksel/how-to-pass-data-between-react-components-3i70</guid>
      <description>&lt;p&gt;Say you want to pass data between React components. As I've seen, there are a couple of ways to do it. What I'm gonna show here is just one of them. It's not using anything external, so it's a good way (IMO) to practice one's React skills. In my case, I needed to get the user input from one component to another. To do this, I learned how to pass data between those two using a third (parent) component. I will try to show you actually how easy to do so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passing-data-from-parent-to-child-component"&gt;
  &lt;/a&gt;
  Passing data from parent to child component
&lt;/h3&gt;

&lt;p&gt;Let's start by the easiest step: Sending data from parent to child. For heuristic purposes, I'll use a function component for the child. Let's say we have a parent component called App. And let's make it a class component because we're going to make use of state in this example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class App extends Component {
  constructor(props) {
    super(props);

    this.state = { data: "some data here" };
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;Child1 parentData={this.state.data} /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, I already included a component called Child1 inside the render method, with the props "parentData" that's using the "data" object in the App component's state. &lt;/p&gt;

&lt;p&gt;Step 2: Declare a function component called Child1 and pass the parentData props in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Child1(props) {
  return &amp;lt;div&amp;gt;The data we're getting is : {props.parentData}&amp;lt;/div&amp;gt;;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all, actually. Here we send the data from parent to child, and from child, we can use it in the render method. I don't know if anyone feels weird how these things work in React, because I do, but once you get the hang of it, it feels much comfortable to play with React.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-child-to-parent-component-and-from-there-to-another-child"&gt;
  &lt;/a&gt;
  From child to parent component (and from there to another child)
&lt;/h3&gt;

&lt;p&gt;Now, let's see how we can pass data from child to parent. Because the parent component will be the medium we'll pass data between children. Let's rewrite our App class component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class App extends Component {
  constructor(props) {
    super(props);

    this.state = { data: "some data here" };
  }
  handleCallback = (childData) =&amp;gt; {
    this.setState({ data: childData });
  };
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;Child1 parentData={this.state.data} /&amp;gt;
        &amp;lt;Child2 fromChild={this.handleCallback} /&amp;gt;

      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've did some new things with the App class component. &lt;br&gt;
-added a handleCallback function that sets the state with the data taken with "fromChild" props. &lt;br&gt;
-rendered a Child2 component with fromChild props calling the handleCallback function. &lt;/p&gt;

&lt;p&gt;Now, we need to write the Child2 component. For heuristic purposes again, I'm going to write this one as a class component. This shows us that the children need not be the same type of components, indeed, one can be a class component and the other can be a function component. Just so we know.&lt;/p&gt;

&lt;p&gt;Here's is our Child2 component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Child2 extends Component {
  constructor(props) {
    super(props);

    this.state = {};
  }
  sendData = () =&amp;gt; {
    this.props.fromChild("data sent by the child");
  };

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={this.sendData}&amp;gt;Send data&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What do we have here?&lt;br&gt;
-A sendData function with the props fromChild &lt;br&gt;
-a button that calls that sendData function on click.&lt;br&gt;
What will happen now? Well, remember we put that fromChild props in Child2 component while rendering it inside the App parent component. That fromChild props, in turn, was calling the handleCallback function that updates the App component's state. And remember, what was our first child component doing? Exactly, it was getting data from the App component's state. Now, as a result of the above steps, the first child component will get the data given by the second child component, using the parent as a medium.&lt;/p&gt;

&lt;p&gt;If you write these code lines, you'll see a button, and when you click the button, the text (i.e. data) will change.&lt;/p&gt;

&lt;p&gt;I hope this explanation was clear. I realized, whilst writing, how weird React works. But again, once you get the hang of it, things start to become quite automatic. &lt;/p&gt;

&lt;p&gt;Anyway, have fun &amp;amp; keep coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>component</category>
      <category>state</category>
    </item>
    <item>
      <title>Tools you love vs tools you use at work</title>
      <author>Igor Zalutski</author>
      <pubDate>Fri, 09 Jul 2021 01:08:37 +0000</pubDate>
      <link>https://dev.to/zij/tools-you-love-vs-tools-you-use-at-work-1ok6</link>
      <guid>https://dev.to/zij/tools-you-love-vs-tools-you-use-at-work-1ok6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JNcyQXVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xu4b4u95lf20mnztrli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JNcyQXVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xu4b4u95lf20mnztrli.png" alt="Tools you love: Vercel, Heroku, Firebase, Netlify. Tools you use at work: AWS, GCP, Azure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Something weird is going on. On the one hand, there are amazing tools out there that allow you to build applications quickly without thinking of infrastructure. Tools like Vercel, Heroku, Firebase, Netlify. On the other hand, most teams keep building on AWS or GCP, seemingly ignoring these amazing tools for all but the smallest of projects. How come? Aren’t we all supposed to be serverless by now?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cost-of-great-developer-experience"&gt;
  &lt;/a&gt;
  The cost of great developer experience
&lt;/h2&gt;

&lt;p&gt;What makes Vercel and Heroku amazing is simplicity. Just connect a repo (or push your code) and see it live in a few seconds. Perfection! It just works. How? You’re not supposed to think about that, it’s been handled by the platform.&lt;/p&gt;

&lt;p&gt;That’s all great, until you need a bit more than a PaaS can offer. Things like block storage for example, or private networking, or pub-sub, or a specific kind of a database. There are many of them, you know - not just relational. And there is a reason why each exists.&lt;/p&gt;

&lt;p&gt;But building such a stack now presents a problem. Your apps work just fine on a PaaS; you only need one extra piece that can be built say on AWS. So you end up spreading your stack across multiple providers. Frontends are running on Netlify, backends on Heroku, databases on AWS. All over public network of course. And then there is a problem of latencies and multi-region setups. Things got to be close to each other to be fast, but there aren’t that many regions to choose from on a PaaS. The only option now seems to be to move to AWS (or GCP).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cost-of-great-flexibility"&gt;
  &lt;/a&gt;
  The cost of great flexibility
&lt;/h2&gt;

&lt;p&gt;This migration of course could have been avoided altogether if you had started on AWS right away. Maybe the developer experience is not that great, but then at least you can be sure that your future needs are covered. In fact most startups do just that – and Amazon as well as Google and Microsoft are happy to extend generous free credits to them.&lt;/p&gt;

&lt;p&gt;At this point startups are split in two distinct groups: those who have DevOps expertise, and those who don’t. The former are doing alright, perhaps moving a bit slower, but just a bit. They get their developer infrastructure in place rather quickly, set up CI / CD pipelines, and start shipping. That group is a minority though, roughly 10-15% of all startups. The remaining 90% don’t have in-house DevOps expertise. And that’s where it becomes really painful.&lt;/p&gt;

&lt;p&gt;AWS has over 200 services. Say you’re building a simple web app with a backend, frontend, and database. Should you deploy it into EC2? Or ECS? Or EKS? Or Lambda? Or Fargate? Or Beanstalk? What’s a VPC? How do I make my service public? And so on. It’s not clear at all. And so those unfortunate teams without DevOps expertise can either move slow by trial and error, or hire a DevOps engineer. Which to a startup is a tough decision with consequences. This essentially means hiring one less engineer to work on the product…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-what-about-infrastructure-as-code"&gt;
  &lt;/a&gt;
  But what about infrastructure as code?
&lt;/h2&gt;

&lt;p&gt;It’s great. Terraform is a de-facto standard for DevOps work, other tools like are either niche (Pulumi) or badly designed (CloudFormation). But infra-as-code does not solve this dilemma. But you still need to think in the exact same terms as without tools. So they aren’t making it any simpler – they are solving a different problem (infrastructure consistency). Present-day IaC tools are a bit like assembly language: total precision, zero abstraction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-must-be-a-better-way"&gt;
  &lt;/a&gt;
  There must be a better way
&lt;/h2&gt;

&lt;p&gt;Just imagine if building mobile apps was like that. To start building an app you use one combination of IDE, language and toolchain. Then when it matures you rebuild the whole thing in a different language, with a different IDE, using a different toolchain. Ridiculous, isn’t it?&lt;/p&gt;

&lt;p&gt;So can we not somehow combine the developer experience of tools like Vercel with flexibility of major cloud providers? So you could start small, move fast with reasonable defaults, then add customisation without the need to rebuild from scratch? Wouldn’t that be… normal?&lt;/p&gt;

&lt;p&gt;That’s what we thought – and built Digger.dev. It automatically generates infrastructure for your code in your AWS account. It has a nice web UI so you can deploy your apps and services in a couple clicks. But under the hood is Terraform. So when time comes you can customise or even completely replace it. But only if you need to.&lt;/p&gt;

&lt;p&gt;We have just &lt;a href="https://www.producthunt.com/posts/digger"&gt;launched and hungry for feedback - check it out&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>javascript</category>
      <category>heroku</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Docker for Dummies</title>
      <author>StevenMcGown</author>
      <pubDate>Fri, 09 Jul 2021 00:23:18 +0000</pubDate>
      <link>https://dev.to/stevenmcgown/docker-for-dummies-2bff</link>
      <guid>https://dev.to/stevenmcgown/docker-for-dummies-2bff</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CX4arF15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4psm82g8sqb647mi83kr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CX4arF15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4psm82g8sqb647mi83kr.png" alt="dockerlogo"&gt;&lt;/a&gt;&lt;br&gt;
Docker is one of those services that you always hear about but may have never used. I never used Docker in college, and I actually never heard of it until I began researching the field of DevOps. Knowing how to use Docker is a quintessential element of becoming a part of a modern development team. My goal of this post is to help the reader gain an understanding of what Docker is, to learn why enterprise teams are adopting it today, and how to get started using Docker.&lt;/p&gt;

&lt;h1&gt;Questions to answer:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What problems does Docker solve?&lt;/li&gt;
&lt;li&gt;What are containers?&lt;/li&gt;
&lt;li&gt;What is the difference between a container and a VM?&lt;/li&gt;
&lt;li&gt;What is the difference between images and containers?&lt;/li&gt;
&lt;li&gt;How does Docker help create applications?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Why Docker?&lt;/h3&gt;

&lt;p&gt;The need for Docker arises from virtual machines on servers being used at large scales. Take a large business for example. For a business that uses hundreds of servers with a cluster of virtual machines for each of their platforms, maintaining these machines is a full-time job. Each server has to have an OS installed, it needs upgrades and patches from time to time, and then dependencies for the applications each machine uses also have to be installed. &lt;/p&gt;

&lt;p&gt;You can see why this quickly becomes very complex. Manually configuring these servers is not feasible, so many companies keep a list of servers that they programmatically update. This can work, however the list of servers is shared between a team of people, and this list does not always stay up to date. Some servers never receive updates and consequentially errors may arise which impact system performance. Finding one faulty server in a room of hundreds can also be a troubleshooting nightmare. How does Docker solve this?&lt;/p&gt;

&lt;h3&gt;Docker to the rescue!&lt;/h3&gt;

&lt;p&gt;Rather than running applications on virtual machines, you can upload Docker images to your server. When an image fails, you just upload a new one. There is no need to worry about configuration because the image exists as an exact replica of the original configuration. In this way, you do not have to worry about installing application dependencies or OS patches because they have already been configured in your Docker image. The Docker setup frees you from treating servers as pets, constantly monitored and cared for, to something more ephemeral; It is okay if the image fails, you can just replace it. "What is an image, and why can it be a better fit than virtual machines? You might ask." This term will make more sense as we move forward.&lt;/p&gt;

&lt;p&gt;Docker is also great for developers. It means no more "It works on my machine" since all the developers are developing with the same stack maintained in the Docker file.&lt;/p&gt;

&lt;h3&gt;How does Docker streamline the development process?&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;CI/CD:&lt;/b&gt; You can consistently test and deploy your code to different environments in the development process (staging, user acceptance testing, production) without the hassle of configuring various testing environments.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Versioning:&lt;/b&gt; Docker also helps with versioning, as you can save different versions of software on repositories and check them out later if needed. This eliminates the need for changing versions of software when running an older version of an application.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Roll Forward:&lt;/b&gt; When defects are found, there is no need to patch or update the application. You just need to use a new image.&lt;/p&gt;

&lt;h3&gt;What is the difference between an image and a container?&lt;/h3&gt;

&lt;p&gt;Docker images and containers are closely related, however they are distinct. Docker images are immutable, meaning they cannot be changed. I have explained previously that these images can be uploaded to servers in place of running applications directly on an OS. Images contain the source code, libraries, dependencies, tools and other files that the application needs to run. When using Docker, we start with a base image. Because images can become quite large, images are designed to be composed of layers of other images to allow a minimal amount of data to be sent when transferring images over the network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--49swSV-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jxn6fjons4ggrfrnxek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--49swSV-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jxn6fjons4ggrfrnxek.png" alt="imageandcontainer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The instance of an image is called a container. Containers are running instances with top writable layers, and they run the actual applications. When the container is deleted, the writable layer is also deleted but the underlying image remains the same. The main takeaway from this is that you can have many running containers off of the same image. A good way to think about images and containers is with this metaphor: Images are the recipe to make a cake, and containers are the cakes you bake. You can make as many cakes as your resources allow you with a recipe; you can make as many containers as your resources will allow you with an image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9sdzq4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t7fkz3s61nzd1t34px5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9sdzq4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t7fkz3s61nzd1t34px5.jpeg" alt="docker cake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;What is the difference between virtual machines and containers?&lt;/h3&gt;

&lt;p&gt;Consider the layout of a typical VM fleet: Virtual machines are managed through a hypervisor, which runs on a host OS that is installed on server hardware. The hypervisor virtualizes hardware that virtual machines use to run their operating systems (Guest OS). So basically the server has a host OS, and the virtual machines themselves have a complete operating system installed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SC0D0ObN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abs51w3ej6bhe3hzxv1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SC0D0ObN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abs51w3ej6bhe3hzxv1s.png" alt="helloworld"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What makes a container different is that the container does not have a Guest OS. Instead, the container actually virtualizes the operating system. Inside this container you can build whatever you want. The advantages to using containers over virtual machines are the fast boot up time and their portability. &lt;/p&gt;

&lt;h3&gt;Buildling images with Dockerfiles&lt;/h3&gt;

&lt;p&gt;As you can see, Docker helps ease the hassle of installation and configuration. Let's look at a sample Docker command:&lt;br&gt;
&lt;code&gt;sudo docker run docker/whalesay cowsay Hello-World!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzILkcUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f426u44863qi5wy9hjf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzILkcUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f426u44863qi5wy9hjf.png" alt="images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the docker image did not initially exist locally so it had to be pulled from docker/whalesay. You can also see that the image consists of multiple layers e190868d63f8, 909cd34c6fd7, etc. To create an image, we can create a Dockerfile. Once this file is completed, we will use &lt;code&gt;docker build [OPTIONS] PATH | URL | -&lt;/code&gt; to create our image.&lt;/p&gt;

&lt;p&gt;A Dockerfile can be created using &lt;code&gt;touch Dockerfile&lt;/code&gt; and can be edited using your favorite text editor. Notice that this file is created without an extension, this is intentional.&lt;/p&gt;

&lt;p&gt;In your Dockerfile, type the following code:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xq5ID1qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cdf79op8zdso1wbt0zq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xq5ID1qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cdf79op8zdso1wbt0zq.png" alt="dockerfile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The FROM statement declares what image your new image will be based on. For this sample project, I will be using the ubuntu image. However if you want to create a Docker image from scratch, you can simply write &lt;code&gt;FROM scratch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;LABEL is used to apply meta data to Docker objects. In this case, you can use LABEL to specify the maintainer of the Docker image. MAINTAINER was once used but this is since deprecated. &lt;/p&gt;

&lt;p&gt;RUN is used to execute commands during the building of the image, while CMD is executed only when the container is created out of the image.&lt;/p&gt;

&lt;p&gt;In the directory of your Dockerfile, type &lt;code&gt;docker build .&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1n2X0AoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfgovtflb64shwx535x4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1n2X0AoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfgovtflb64shwx535x4.png" alt="dockerbuild"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first time each command is executed, each command will be executed. Each command in the Dockerfile is cached, so if you edit the file it will only need to build for edited command. After editing the echo command of our Dockerfile, we will also give the Docker image a name and the 'latest' tag. &lt;br&gt;
&lt;code&gt;docker build -t helloworld:latest&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dGyjhetm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkxhwrf7leudhcytr591.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dGyjhetm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkxhwrf7leudhcytr591.png" alt="built"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To run your image, first find the image name by running &lt;code&gt;docker images&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nw9Ev_34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ihsb09q9vjalops1fhuk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nw9Ev_34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ihsb09q9vjalops1fhuk.png" alt="dockerimages"&gt;&lt;/a&gt;&lt;br&gt;
Note that you can run a Docker image by its image ID or its name and tag. If you run by name only, Docker will automatically run by the 'latest' tag.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run helloworld:latest&lt;/code&gt; and &lt;code&gt;docker run 4d6c8eea04c9&lt;/code&gt;&lt;br&gt;
produce the same output in this case.&lt;/p&gt;

&lt;p&gt;And there you have it! You have created your first Docker image. You can find other images on &lt;a href="https://hub.docker.com"&gt;https://hub.docker.com&lt;/a&gt; and documentation at &lt;a href="https://docs.docker.com/"&gt;https://docs.docker.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I hope that this post can help anyone who feels like they aren't ready to learn about Docker. Often times, the most difficult part of getting something done is starting it. Please let me know if this helped or if I missed anything!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>beginners</category>
      <category>devops</category>
      <category>linux</category>
    </item>
    <item>
      <title>When is the best time to share a "new" product?</title>
      <author>Avelino</author>
      <pubDate>Fri, 09 Jul 2021 00:17:23 +0000</pubDate>
      <link>https://dev.to/prestd/when-is-the-best-time-to-share-a-new-product-42pl</link>
      <guid>https://dev.to/prestd/when-is-the-best-time-to-share-a-new-product-42pl</guid>
      <description>&lt;p&gt;&lt;strong&gt;Is now&lt;/strong&gt; (as soon as possible), even if it's not the way you want it&lt;/p&gt;

&lt;p&gt;pREST exists since 2016 and today I remembered to publish it on Product Hunt, without having much expectation on the engagement.&lt;/p&gt;

&lt;p&gt;To my surprise, has a much higher engagement than I imagined, especially in the installation of binary (software).&lt;/p&gt;

&lt;p&gt;We will be a software for API development based on PostgreSQL database (new or existing) with low-code, there is a lot of work to be done... we are just in the beginning.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YV4r-9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/662417488806711296/NucHBWWQ_normal.png" alt="Product Hunt Hi profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Product Hunt Hi
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @producthunthi
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/avelinorun"&gt;@avelinorun&lt;/a&gt; FYI, you've been added as a maker of pREST on &lt;a href="https://twitter.com/ProductHunt"&gt;@ProductHunt&lt;/a&gt; &lt;a href="https://t.co/RYsNUbdVna"&gt;producthunt.com/posts/prest&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      02:08 AM - 08 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1412956727822200835" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1412956727822200835" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1412956727822200835" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/prest"&gt;
        prest
      &lt;/a&gt; / &lt;a href="https://github.com/prest/prest"&gt;
        prest
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      pREST (PostgreSQL REST), simplify and accelerate development, ⚡ instant, realtime, high-performance on any Postgres application, existing or new
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/46ae6b60c9489ed1e9acb5b175397a1f0dc13336e9845c2d4edb29c331e38297/68747470733a2f2f646f63732e7072657374642e636f6d2f6c6f676f2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/46ae6b60c9489ed1e9acb5b175397a1f0dc13336e9845c2d4edb29c331e38297/68747470733a2f2f646f63732e7072657374642e636f6d2f6c6f676f2e706e67" alt="RESTful API" title="RESTful API"&gt;&lt;/a&gt; pREST&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.com/prest/prest" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4c8498cf30582894fde2ee192ae0d6754b12169258c39e0190037bdb75d99511/68747470733a2f2f7472617669732d63692e636f6d2f70726573742f70726573742e7376673f6272616e63683d6d61696e" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://godoc.org/github.com/prest/prest" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ed439e448b4589ce43941820408b3748cf67c44a8bfa986eee938aee551ffe26/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f70726573742f70726573743f7374617475732e706e67" alt="GoDoc"&gt;&lt;/a&gt;
&lt;a href="https://goreportcard.com/report/github.com/prest/prest" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a44e02070085a4c6d91c0f81ea8491ef939ac779bc899ce2898a14ccf0fc82c8/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f70726573742f7072657374" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/prest/prest?branch=main" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/06b1bf385514b02b7c254d223264fcb0f57a073c2e7a7ea31e7504f0f13ea773/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f70726573742f70726573742f62616467652e7376673f6272616e63683d6d61696e" alt="Coverage Status"&gt;&lt;/a&gt;
&lt;a href="https://app.sourcelevel.io/github/prest/-/prest" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f123648b25b48267acf38e2c42814e28a71feb4cfd84e64d3695b37553a345a8/68747470733a2f2f6170702e736f757263656c6576656c2e696f2f6769746875622f70726573742f2d2f70726573742e737667" alt="SourceLevel"&gt;&lt;/a&gt;
&lt;a href="https://formulae.brew.sh/formula/prestd" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e4da1f5bab77e151b27c8b4f007f7b62736fc3543ad221617421813e69a80036/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f64796e616d69632f6a736f6e2e7376673f75726c3d68747470733a2f2f666f726d756c61652e627265772e73682f6170692f666f726d756c612f7072657374642e6a736f6e2671756572793d242e76657273696f6e732e737461626c65266c6162656c3d686f6d6562726577" alt="Homebrew"&gt;&lt;/a&gt;
&lt;a href="http://slack.prestd.com/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9ea076087533d2cdedd82289802ae95142304642c926171aaab5c3023e55a8c2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f736c61636b2d7072657374642d626c756576696f6c65742e7376673f6c6f676f3d736c61636b" alt="Slack"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;p&lt;/em&gt;&lt;strong&gt;REST&lt;/strong&gt; (&lt;strong&gt;P&lt;/strong&gt;&lt;em&gt;ostgreSQL&lt;/em&gt; &lt;strong&gt;REST&lt;/strong&gt;), simplify and accelerate development, instant, realtime, high-performance on any &lt;strong&gt;Postgres&lt;/strong&gt; application, &lt;strong&gt;existing or new&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL version 9.4 or higher&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/prest?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-prest" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4a88f9fc2e5a5d033be5d30e566a3b9d55b7c267fe3bc2587182940f146a9966/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d333033353036267468656d653d6c69676874" alt="pREST - instant, realtime, high-performance on PostgreSQL | Product Hunt" width="250" height="54"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Problem&lt;/h2&gt;
&lt;p&gt;There is PostgREST written in Haskell, but keeping Haskell software in production is not an easy job. With this need pREST was born. &lt;a href="https://github.com/prest/prest/issues/41"&gt;Read more&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Test using Docker&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;To simplify the process of bringing up the test environment we will use &lt;strong&gt;docker-compose&lt;/strong&gt;, assuming you do not have the repository cloned locally, we are assuming you are reading this page for the first time&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Download docker compose file&lt;/span&gt;
wget https://raw.githubusercontent.com/prest/prest/main/docker-compose-prod.yml -O docker-compose.yml
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Up (run) PostgreSQL and prestd&lt;/span&gt;
docker-compose up
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Run data migration to create user structure for access (JWT)&lt;/span&gt;
docker-compose &lt;span class="pl-c1"&gt;exec&lt;/span&gt; prest prestd migrate up auth

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Create user and password for API access (via JWT)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;# user: prest&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;# pass: prest&lt;/span&gt;
docker-compose &lt;span class="pl-c1"&gt;exec&lt;/span&gt; postgres psql&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/prest/prest"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/prest"&gt;https://www.producthunt.com/posts/prest&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>opensource</category>
      <category>postgres</category>
      <category>graphql</category>
    </item>
    <item>
      <title>Is DEV doomed?</title>
      <author>Nočnica Fee</author>
      <pubDate>Fri, 09 Jul 2021 00:15:48 +0000</pubDate>
      <link>https://dev.to/run-x/is-dev-doomed-11d2</link>
      <guid>https://dev.to/run-x/is-dev-doomed-11d2</guid>
      <description>&lt;p&gt;&lt;em&gt;cover image by By &lt;a href="https://commons.wikimedia.org/w/index.php?curid=82194229"&gt;Rhododendrites - Own work, CC BY-SA 4.0,&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After reading &lt;a href="https://dev.to/samuelfaure/is-dev-to-victim-of-its-own-success-1ioj"&gt;Samuel's piece on some concerns about the DEV content streams&lt;/a&gt; (and the great discussion in the comments) I found myself writing something so long I decided to post it as its own article. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines#:~:text=Betteridge's%20law%20of%20headlines%20is,the%20principle%20is%20much%20older."&gt;Betteridge's law of headlines&lt;/a&gt; is an adage that states: "Any headline that ends in a question mark can be answered by the word no." And this article is no exception. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr-dev-is-a-humanoperated-editorial-site-and-as-such-isnt-locked-in-to-any-content-strategy-no-site-will-be-perfect-for-everyone-but-dev-has-a-ton-to-offer-to-most-developers"&gt;
  &lt;/a&gt;
  &lt;em&gt;tl;dr DEV is a human-operated editorial site and as such isn't locked in to any content strategy. No site will be perfect for everyone but DEV has a ton to offer to most developers&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Working as a dev advocate, this site is one of the places I go to work: promoting interesting tutorials and ideas that will appeal to people. As such its vagaries are quite fascinating to me: that beginner content is dominant isn't that surprising considering that the tech industry is trying to double in size in the next five years, but other stuff is more surprising like the heavy weighting on recent posts. Anything from last month feels invisible. It's almost a hybrid of Twitter and Medium, with content going stale quite fest. That contributes to a sort of 'treadmill' feel where a 'beginner's guide to GitHub' gets to the top of the charts almost every week.&lt;/p&gt;

&lt;p&gt;I find that Dev encourages a blend of content. Everything from short punchy discussion questions, to longer tutorials, to beginner's tips. No one content type is dominant and that feels about right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-question-of-calving"&gt;
  &lt;/a&gt;
  the question of calving
&lt;/h2&gt;

&lt;p&gt;One of the questions not addressed here is how you handle the fact that communities often calve off into sub-boards, and Dev's tagging system doesn't really allow for that. There's no way to say definitively "I only want to talk about Java running on AWS, and I don't want to read any Javascript at all" (It turns out you can mute tags per Michael's advice by giving a negative weighting on 'my tags') &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dev-is-more-human-than-you-know"&gt;
  &lt;/a&gt;
  DEV is more human than you know
&lt;/h2&gt;

&lt;p&gt;Human effort plays a huge part in the general vibes of Dev, and it's helped enormously: you'll note that 'a beginner's guide to Git' is no longer the #1 article in the digest... every week.&lt;/p&gt;

&lt;p&gt;I think most people don't realize how big a role people play in the DEV experience. The 'top articles' are selected from high-performing pieces but are &lt;em&gt;not&lt;/em&gt; simply the 'most clicked.' And did you know that tags are heavily moderated by volunteer humans? It's true!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#culture-is-key"&gt;
  &lt;/a&gt;
  Culture is key
&lt;/h2&gt;

&lt;p&gt;And humans do a lot more than deleting odd, content-farming articles and outright spam: they also delete comments and articles that are mean-spirited and disingenuous. There will never be a Prager U of Dev.to, and that's by design!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future-is-bright"&gt;
  &lt;/a&gt;
  The future is bright
&lt;/h2&gt;

&lt;p&gt;Most of us want more information on the tech sector. Everything from step-by-step tutorials to extremely meta articles like this one. As such DEV is riding a rising tide. What exactly the future looks like isn't perfectly clear. I'll be interested to see if the two biggest 'market shares' on the site (beginners and JS) come to dominate, split off, or lose ground to new subjects.&lt;/p&gt;

&lt;p&gt;What is clear is that there is place for the interesting hybrid that is DEV and the Forem platform: a community site that isn't purely algorithmic. A frenetic content pace that still makes room for a few timeless pieces. And above all, a page where you can read about tech while remaining blissfully unaware of what Elon Musk is up to.&lt;/p&gt;

</description>
      <category>meta</category>
      <category>discuss</category>
      <category>culture</category>
    </item>
    <item>
      <title>The GITHUB_TOKEN in GitHub Actions: How it Works, Change Permissions, Customizations</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Fri, 09 Jul 2021 00:08:01 +0000</pubDate>
      <link>https://dev.to/github/the-githubtoken-in-github-actions-how-it-works-change-permissions-customizations-3cgp</link>
      <guid>https://dev.to/github/the-githubtoken-in-github-actions-how-it-works-change-permissions-customizations-3cgp</guid>
      <description>&lt;p&gt;Today I'm gonna tell you everything about the &lt;strong&gt;GITHUB_TOKEN&lt;/strong&gt; in GitHub Actions. You will learn what it is, &lt;strong&gt;how it works&lt;/strong&gt;, how to &lt;strong&gt;customize&lt;/strong&gt; its behavior, and how to limit or &lt;strong&gt;change its permissions&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jEK07KPEjnY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/jEK07KPEjnY"&gt;Link to the video: https://youtu.be/jEK07KPEjnY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-githubtoken"&gt;
  &lt;/a&gt;
  What is GITHUB_TOKEN
&lt;/h3&gt;

&lt;p&gt;Let's start with what the GITHUB_TOKEN is in GitHub Actions and how it works.&lt;/p&gt;

&lt;p&gt;The GITHUB_TOKEN is a &lt;strong&gt;special access token&lt;/strong&gt; that you can use to authenticate on behalf of GitHub Actions. GitHub &lt;strong&gt;automatically creates&lt;/strong&gt; a GITHUB_TOKEN secret for you to use in your workflow, and you can use it to authenticate in a workflow run.&lt;/p&gt;

&lt;p&gt;The way this works is that when you enable GitHub Actions in a repository, &lt;strong&gt;GitHub installs a GitHub App&lt;/strong&gt; on that. The GITHUB_TOKEN secret is basically a GitHub App installation access token.&lt;/p&gt;

&lt;p&gt;Before each job begins, GitHub fetches an installation access token for the job from that GitHub App. Since the App has access to a single repo, the &lt;strong&gt;token's permissions are limited to the repository&lt;/strong&gt; that contains your workflow. And to make it even more secure, the token expires when the job is finished.&lt;/p&gt;

&lt;p&gt;Hope the mechanism is now clearer. Let's quickly see how to use a GITHUB_TOKEN&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-github-token"&gt;
  &lt;/a&gt;
  Use GitHub Token
&lt;/h3&gt;

&lt;p&gt;There are 2 ways to use the token: from &lt;em&gt;secrets&lt;/em&gt; and from the &lt;em&gt;context&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/labeler@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;repo-token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this first example we use the &lt;code&gt;secrets.GITHUB_TOKEN&lt;/code&gt; to consume it. As mentioned, the secret is automatically generated so you can just use it straight away.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create a Release&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;create_release&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/create-release@v1&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.token }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here instead we use the GitHub context, which contains the token. Note that the two are equivalent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#personal-access-token-vs-githubtoken"&gt;
  &lt;/a&gt;
  Personal Access Token vs GITHUB_TOKEN
&lt;/h3&gt;

&lt;p&gt;If you are thinking _"why should I use the GITHUB_TOKEN instead of my normal PAT?", remember that a Personal Access Token is always available, so if someone is able to steal that PAT they can potentially do some harm.&lt;/p&gt;

&lt;p&gt;The GITHUB_TOKEN instead expires just right after the job is over. So even if someone is able to steal it (which is &lt;em&gt;almost impossible&lt;/em&gt;), they basically can't do anything wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-permissions"&gt;
  &lt;/a&gt;
  Default Permissions
&lt;/h3&gt;

&lt;p&gt;By Default, the GITHUB_TOKEN has a quite comprehensive list of permissions assigned to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fsp3l_vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhcu0oezj5gcrqbqh0ch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fsp3l_vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhcu0oezj5gcrqbqh0ch.png" alt="Permissions Table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This table shows the permissions granted to the GITHUB_TOKEN by default. Good thing is that people with admin permissions to an enterprise, organization, or repository can set the default &lt;strong&gt;permissions to be either permissive or restricted&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-permissions-ui"&gt;
  &lt;/a&gt;
  The Permissions UI
&lt;/h3&gt;

&lt;p&gt;So, let's see how we can &lt;strong&gt;&lt;em&gt;change the permissions&lt;/em&gt;&lt;/strong&gt; of the GITHUB_TOKEN to make it even more secure.&lt;/p&gt;

&lt;p&gt;Just go to your repository or organization &lt;strong&gt;&lt;em&gt;Settings&lt;/em&gt;&lt;/strong&gt;, then click on &lt;strong&gt;&lt;em&gt;Actions&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQxb0Ja---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omcns15otneci0mmzmrj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQxb0Ja---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omcns15otneci0mmzmrj.png" alt="Permissions UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In here you can change the permissions assigned to your token by choosing &lt;code&gt;Read and Write&lt;/code&gt; (which allows you to access the content and make changes) or &lt;code&gt;Read-only&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That is super quick to do, but on the other hand pretty limited. What if I want to assign permissions in a more granular way?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#granular-permissions-via-yaml"&gt;
  &lt;/a&gt;
  Granular permissions via YAML
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;permissions&lt;/code&gt; key in the &lt;strong&gt;YAML workflow&lt;/strong&gt; file to modify permissions for the GITHUB_TOKEN for an entire workflow or for individual jobs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;permissions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;contents&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;write&lt;/span&gt;
  &lt;span class="na"&gt;pull-requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;write&lt;/span&gt; 
  &lt;span class="na"&gt;issues&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;read&lt;/span&gt;
  &lt;span class="na"&gt;packages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you can use all the permissions that are listed in the table above. Additionally, as you can see below, it supports &lt;em&gt;intellisense&lt;/em&gt; if you do it in the GitHub interface directly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jqdKz8ZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29trk400g443p1j2qeyn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jqdKz8ZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29trk400g443p1j2qeyn.png" alt="Intellisense"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When the permissions key is used, all unspecified permissions are set to no access, with the exception of the metadata scope, which always gets read access.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can personalize the token permissions either at Job level, or at whole workflow level (or actually both):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;permissions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;contents&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;write&lt;/span&gt;
  &lt;span class="na"&gt;pull-requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;write&lt;/span&gt;  

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;job1&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="na"&gt;job2&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;   
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;  
    &lt;span class="na"&gt;permissions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;issues&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;write&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Hope you have now a better understanding about the GITHUB_TOKEN, what it does and how we can set its permissions properly. Let me know in the comment section below if you have any other questions about it.&lt;/p&gt;

&lt;p&gt;Also, check out &lt;a href="https://youtu.be/SzrETQdGzBM"&gt;this video&lt;/a&gt; where I talk about creating Personal Access Tokens in GitHub.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jEK07KPEjnY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>github</category>
      <category>cicd</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
