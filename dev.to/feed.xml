<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript : Variables &amp; Scope</title>
      <author>Vivek Alhat</author>
      <pubDate>Fri, 16 Jul 2021 18:51:59 +0000</pubDate>
      <link>https://dev.to/vivekalhat/javascript-variables-scope-3jhg</link>
      <guid>https://dev.to/vivekalhat/javascript-variables-scope-3jhg</guid>
      <description>&lt;p&gt;Variable is a fundamental concept of programming. A variable is a container that stores a value or data. It is a named unit of data that is assigned a value.&lt;/p&gt;

&lt;p&gt;Variables in JavaScript are different compared to other programming languages such as C and C++.&lt;/p&gt;

&lt;p&gt;JavaScript is a &lt;strong&gt;&lt;em&gt;weakly typed language&lt;/em&gt;&lt;/strong&gt;. It means that you do not have to specify the type for a variable declaration.&lt;/p&gt;

&lt;p&gt;The scope is a policy that manages the availability of variables throughout the program.&lt;/p&gt;

&lt;p&gt;In JavaScript, variables can be created in three ways, these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;var&lt;/li&gt;
&lt;li&gt;let&lt;/li&gt;
&lt;li&gt;const&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#var"&gt;
  &lt;/a&gt;
  var
&lt;/h2&gt;

&lt;p&gt;Before let and const were introduced there was only one method for variable declarations i.e var. Var is a keyword that is used to declare or &lt;em&gt;optionally&lt;/em&gt; initialize a variable.&lt;/p&gt;

&lt;p&gt;e.g: &lt;code&gt;var name;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When a variable is &lt;strong&gt;declared&lt;/strong&gt; using var then by default &lt;em&gt;undefined&lt;/em&gt; is assigned to that variable. In this case, the name contains a value undefined. If you initialize a variable then it will contain the assigned value.&lt;/p&gt;

&lt;p&gt;e.g: &lt;code&gt;var character = "Joseph Joestar"&lt;/code&gt;&lt;br&gt;
In the above example, the variable character contains a string value i.e &lt;em&gt;"Joseph Joestar"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Var statement declares a &lt;strong&gt;globally scoped variable&lt;/strong&gt;. This means that a variable declared using var is available in the global context i.e throughout the program.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9DzX2lQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6qa9ch2kmz6yclybpn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9DzX2lQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6qa9ch2kmz6yclybpn5.png" alt="var"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, we initialized the var variable with value as &lt;em&gt;Joseph Joestar&lt;/em&gt;. This variable is now available in the global context of the program. We have also created a function &lt;em&gt;changeCharacter&lt;/em&gt; that reassigns the value to the variable and then outputs it to the console. After executing the function, the value that will be printed to the console is &lt;em&gt;Dio Brando&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now, if we print the variable outside the function, it will still print &lt;em&gt;Dio Brando&lt;/em&gt; instead of &lt;em&gt;Joseph Joestar&lt;/em&gt;. Even though we have changed the value &lt;strong&gt;only inside the function&lt;/strong&gt; still is printing the same value &lt;strong&gt;outside the function scope&lt;/strong&gt;. This happens because &lt;strong&gt;var creates a globally scoped variable&lt;/strong&gt;. The change is reflected globally thus we get this output.&lt;/p&gt;

&lt;p&gt;This type of situation may create confusion while writing large components so you should avoid using var as much as possible. So what should we use instead of var?&lt;br&gt;
ES6 introduced two new ways to create variables i.e using let and const.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-amp-const"&gt;
  &lt;/a&gt;
  let &amp;amp; const
&lt;/h2&gt;

&lt;p&gt;As we saw earlier that var declares globally scoped variables which may lead to issues if not used properly. This problem can be solved using &lt;em&gt;let&lt;/em&gt; &amp;amp; &lt;em&gt;const&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The variables created using let and const are &lt;strong&gt;block-scoped&lt;/strong&gt;. A block is everything inside two curly braces i.e {}.&lt;/p&gt;

&lt;p&gt;e.g: &lt;code&gt;let name&lt;/code&gt; or &lt;code&gt;let name = "JOJO"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70-cPu5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv438byprxkwhzegukeh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70-cPu5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv438byprxkwhzegukeh.png" alt="let"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, we have created a new variable inside a function using the let keyword. This &lt;strong&gt;name&lt;/strong&gt; variable is now block-scoped hence exists only inside that function. If we print it outside the function it will output &lt;strong&gt;Reference Error: name not defined&lt;/strong&gt; to the console because name variable is not present in the global scope.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;const&lt;/strong&gt; is similar to let. It creates a block-scoped variable. The only difference is that you cannot reassign a new value to the const variable. The variable declared using const has a constant value. You cannot re-assign or re-declare value to the const variable, otherwise, it will throw &lt;strong&gt;Type Error: assignment to constant variable&lt;/strong&gt; error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYX-o7od--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j309yiyiwz29bl87ys19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYX-o7od--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j309yiyiwz29bl87ys19.png" alt="const"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;var is always hoisted in JavaScript. You can use the variable declared using var before its actual declaration.&lt;/p&gt;

&lt;p&gt;let and const are also hoisted but they are not initialized.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>7 Awesome CSS Cards: üé∞ Cuphead Style ‚òïÔ∏è + (animation, pure CSS, tutorual)</title>
      <author>Roden</author>
      <pubDate>Fri, 16 Jul 2021 18:11:04 +0000</pubDate>
      <link>https://dev.to/kerthin/7-awesome-css-cards-cuphead-style-animation-pure-css-tutorual-44n0</link>
      <guid>https://dev.to/kerthin/7-awesome-css-cards-cuphead-style-animation-pure-css-tutorual-44n0</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;A couple of years ago, I happened to play a game called &lt;strong&gt;Cuphead&lt;/strong&gt;. When I finished it, I thought that I would soon forget about it and switch to something else. But everything turned out to be wrong. I liked the style of this game so much that I didn't want to just forget about it. And so I decided to find a couple of &lt;code&gt;GIF&lt;/code&gt; images on the internet and create different kinds of &lt;code&gt;CSS Cards&lt;/code&gt; for them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Well, let's get down to the show.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CCbwd2Zn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vg2mfhn9jn0e4tn5j5q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CCbwd2Zn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vg2mfhn9jn0e4tn5j5q.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;DEMO&lt;/h1&gt;

&lt;p&gt;For those who do not want to read the entire post, I can suggest taking a look at the finished project right away.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Astap/embed/OJmpxGp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You can also download the project from my &lt;code&gt;GitHub repository&lt;/code&gt;. (There is also a demo on &lt;code&gt;GitHub Pages&lt;/code&gt;).&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kerthin"&gt;
        Kerthin
      &lt;/a&gt; / &lt;a href="https://github.com/Kerthin/cuphead-templateSait"&gt;
        cuphead-templateSait
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Graphic cards in the style of the Cuphead video game.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img width="100" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2yOQigTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/READMEimage/squirrelAppIcon.png" alt="Kerthin logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/3aaee52aea7e26ea020e0c2bac3ea70c011c1cc0507999c2c8b91c121b7fe9ba/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275696c642d70617373696e672d627269676874677265656e2e737667" alt="Build Status"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/9131d6ef04409049c328ce7a6f6a175e64f1374adac1f18ffaf89a8f2889e366/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6d706c6574696f6e2d32302532352d6f72616e67652e737667" alt="completion Status"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/ace92ef25e6952f0f77c73e5169314c5c556ef62b59ca99b05d1b6a6fa9c08b9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e342e302d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/3cefcfb7445315bec657e476d97e481c4454c212aeba9b4750dedfb4210a1f1b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652d76392e342e302d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/b9df44101935d7d9d1a7473476819810c8e2aff9ccc0a172f9ebe3d01e94ea6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f626f7765722d76312e382e342d626c75652e737667" alt="Version"&gt;&lt;/a&gt; &lt;br&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/8057bef1e1a6a5aa5bc62b252a0eaf471d3f8b5516da3db38c5c79daa8f83c01/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7265706f25323073697a652d3434302e382532304d422d677265656e2e737667" alt="Size"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/51a0fe3eb761a361596ff48ff1099dfd1088addcb441363fbe2dfff24bec2cd4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d696e69666965642532307265706f2d32302532304d422d677265656e2e737667" alt="Size"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/685b6b61f9e20199132631db1c422c1b44109707d8fdac9b87b74174e3b83cc1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f6a65637425323076657273696f6e2d76302e322d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;p&gt;This site is an example of work created specifically for the portfolio. If you want to take a look at it, then you can follow the link given below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerthin.github.io/cuphead-templateSait/" rel="nofollow"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
Use technology.&lt;/h4&gt;
&lt;p&gt;The following technologies were used to create this project:&lt;/p&gt;
&lt;h3&gt;
Task-Manager&lt;/h3&gt;
&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;
    &lt;img width="160px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_P5-dr4u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/READMEimage/gulp.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Software platform&lt;/h3&gt;
&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;
    &lt;img width="260px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xNVlXWBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/READMEimage/nodejs-1.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Preprocessors&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXfRh6mh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/READMEimage/pug.svg"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zt6gfEqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/READMEimage/sass-1.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Libraries&lt;/h3&gt;
&lt;h3&gt;
Package manager&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPHhnmso--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/READMEimage/npm.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;


&lt;h2&gt;
Plugins&lt;/h2&gt;
&lt;p&gt;To develop the project through gulp, I used the following types of NPM plugins:&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plugin&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-sourcemaps" rel="nofollow"&gt;gulp-sourcemaps&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-sourcemaps" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/528a1ebd364b693bb3d0101b0673c41e655019ffd2f9bdc0d1d6ee92e2641899/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76322e362e342d626c75652e737667" alt="gulp-sourcemaps-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Intended for generation of &lt;code&gt;css source maps&lt;/code&gt; which will be necessary at debugging of a code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-imagemin" rel="nofollow"&gt;gulp-imagemin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-imagemin" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/711705519071329822e444430727735680a0559653d21c428730d5f74dacef31/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76342e312e302d626c75652e737667" alt="gulp-imagemin-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Minify &lt;code&gt;PNG&lt;/code&gt;, &lt;code&gt;JPEG&lt;/code&gt;, &lt;code&gt;GIF&lt;/code&gt; and &lt;code&gt;SVG&lt;/code&gt; images with &lt;code&gt;imagemin&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-autoprefixer" rel="nofollow"&gt;gulp-autoprefixer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-autoprefixer" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/98049dfc0610712ebdfca9ffac989e2d2b0693eec4fd386e15242b7eeec66552/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e302e302d626c75652e737667" alt="gulp-autoprefixer-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Prefix &lt;code&gt;CSS&lt;/code&gt; with &lt;code&gt;Autoprefixer&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/imagemin-pngquant" rel="nofollow"&gt;imagemin-pngquant&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/imagemin-pngquant" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/98049dfc0610712ebdfca9ffac989e2d2b0693eec4fd386e15242b7eeec66552/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e302e302d626c75652e737667" alt="imagemin-pngquant-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Pngquant imagemin&lt;/code&gt; plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-uglify" rel="nofollow"&gt;gulp-uglify&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-uglify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b2b4a07c63198d7e5f42f3b13e24079c5ffbc9c3527a41f9179a171d7f0e4f0f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76332e302e312d626c75652e737667" alt="gulp-uglify-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Minify &lt;code&gt;JavaScript&lt;/code&gt; with &lt;code&gt;UglifyJS3&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-rigger" rel="nofollow"&gt;gulp-rigger&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-rigger" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/503c5942f276fc051f3b969da0dbaaf76a0aa9bb080825ceafda298f5fb986fa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76302e352e382d626c75652e737667" alt="gulp-rigger-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Rigger&lt;/code&gt; is a build time include engine for &lt;code&gt;Javascript&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;CoffeeScript&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-clean-css" rel="nofollow"&gt;gulp-minify-css&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-clean-css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b4d51093e94d643642cc5875f38df3914480590a4cc9720463e6c100ad1a203d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76332e31302e302d626c75652e737667" alt="gulp-minify-css-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Gulp&lt;/code&gt; plugin to minify &lt;code&gt;CSS&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/rimraf" rel="nofollow"&gt;rimraf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/rimraf" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cfbb87eb7037ab4f0aa7470555d074f84bb49b210d547a680b7b75d9608432bb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76322e362e322d626c75652e737667" alt="rimraf-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;UNIX&lt;/code&gt; command &lt;code&gt;rm&lt;/code&gt; &lt;code&gt;-rf&lt;/code&gt; for node.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-watch" rel="nofollow"&gt;gulp-watch&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-watch" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ac8499db04cba84bee8f0e495626d8be65ee98015cda17685ecd617944488313/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76352e302e312d626c75652e737667" alt="gulp-watch-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;File watcher that uses super-fast chokidar and emits vinyl&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;‚Ä¶&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kerthin/cuphead-templateSait"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;a href="https://kerthin.github.io/cuphead-templateSait/"&gt;&lt;h1&gt;Full Page Demo (GitHub Pages)&lt;/h1&gt;&lt;/a&gt;
&lt;/blockquote&gt;

&lt;h1&gt;01. Ribby ü•ä&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Jn8pTpBM5Iz2M9Mond/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Jn8pTpBM5Iz2M9Mond/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The first card is dedicated to one of the first bosses in the game, a combat toad named &lt;strong&gt;Ribby&lt;/strong&gt;. This card is made in the video of a boxing ring (you can see the tight ropes in the background).&lt;/p&gt;

&lt;p&gt;When creating this card, simple geometric shapes such as triangles and cubes were used. You can edit each element on the card as you like (&lt;code&gt;color&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;font&lt;/code&gt;, &lt;code&gt;etc.&lt;/code&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;This also applies to other cards.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/cwhflD8kopt80HH9td/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/cwhflD8kopt80HH9td/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;02. Croaks ü•ä&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/NAFFX3Pbfprnlz0xKI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/NAFFX3Pbfprnlz0xKI/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Croaks&lt;/code&gt; is another of the bosses in the game, who is the brother of Ribby. During the battle, they are together and you need to resist their joint blows.&lt;/p&gt;

&lt;p&gt;The card consists of simple elements. There is also a gradient in the background, which forms a &lt;code&gt;brick wall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/B3ur4Kf89L2a2YHWEE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/B3ur4Kf89L2a2YHWEE/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;03. Chauncey Chantenay ü•ï&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/luPz5LZM5cgKpbQS7q/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/luPz5LZM5cgKpbQS7q/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Chauncey Chantenay&lt;/code&gt; is a large, anthropomorphic orange carrot with lanky arms and yellow and white eyes.&lt;/p&gt;

&lt;p&gt;The design of this card is completely formed by fonts.&lt;/p&gt;

&lt;p&gt;There are also cubes that you could see in the &lt;code&gt;first card&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Fh8es18SqnyUMV0kK7/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Fh8es18SqnyUMV0kK7/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;04. Cuphead ‚òïÔ∏è&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ghn1lsad75dPWb9tA0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ghn1lsad75dPWb9tA0/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A simple, but at the same time very good card, which depicts the main character of the game Cuphead.&lt;/p&gt;

&lt;h1&gt;05. Cagney Carnation üå∏&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/62sCc3Yy10j2mFc6D1/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/62sCc3Yy10j2mFc6D1/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cagney&lt;/code&gt; is sneaky. He seems to delight in catching his enemies off guard with his appearance, posing as a harmless and adorable flower before roaring loudly and showing his true colors.&lt;/p&gt;

&lt;p&gt;This card uses several triangles, inside of which animated linear gradients are placed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/f4d9WaUnsk3U3fysxd/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/f4d9WaUnsk3U3fysxd/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;06. King Dice üé∞&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/GLu13AMcNLQ7reC31k/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/GLu13AMcNLQ7reC31k/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;King Dice&lt;/code&gt; is the right-hand man of the &lt;code&gt;Devil&lt;/code&gt; and the secondary antagonist of Cuphead.&lt;/p&gt;

&lt;p&gt;The card consists of the simplest elements with images of the character.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/2kLFo7APHKBU7W4ZVy/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2kLFo7APHKBU7W4ZVy/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;07. King Dice: Casino üé∞&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/gHCoFYjLazcl7vB3NA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gHCoFYjLazcl7vB3NA/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most difficult card in its implementation. The card is an implementation of one of the &lt;code&gt;last levels&lt;/code&gt; of the game, which is made in the form of a &lt;code&gt;roulette table&lt;/code&gt; on which you can place your bets.&lt;/p&gt;

&lt;p&gt;The most difficult thing in this card was to &lt;code&gt;create a table&lt;/code&gt; on which the &lt;code&gt;King Dice&lt;/code&gt; character relies.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To create it, I used a &lt;code&gt;gradient&lt;/code&gt; that forms the illusion of soft upholstery for the table surface. There is also a chain of &lt;code&gt;lots&lt;/code&gt;, each of which you can edit separately as you like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/hsAUE7XOIjUFz3MgvR/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hsAUE7XOIjUFz3MgvR/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was also necessary to make a playing table surface on which the main character would run. After creating it, it was necessary to create a perspective for the surface, which affected the depth of the image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/itnoKSUBQ31B9PerIV/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/itnoKSUBQ31B9PerIV/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;For me, this was a purely creative project, I did not try to create something insanely complex in order to impress someone. Just being impressed by the style of the &lt;code&gt;Cuphead&lt;/code&gt; game, I decided to create these cards.&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Thank you for paying attention to my post. You can also follow me on &lt;a href="https://twitter.com/BelichenkoRoden"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;, where I also publish many of my works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goodbye&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/QC1pIBes52h663IwTN/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/QC1pIBes52h663IwTN/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Reminder ‚Äî All CodeLand Talk Proposals Due by Tuesday, July 20th @ 11:59 PM UTC </title>
      <author>Ben Halpern</author>
      <pubDate>Fri, 16 Jul 2021 17:52:52 +0000</pubDate>
      <link>https://dev.to/devteam/reminder-all-codeland-talk-proposals-due-by-tuesday-july-20th-11-59-pm-utc-1jmp</link>
      <guid>https://dev.to/devteam/reminder-all-codeland-talk-proposals-due-by-tuesday-july-20th-11-59-pm-utc-1jmp</guid>
      <description>&lt;h3&gt;
  &lt;a href="#ill-keep-this-reminder-short-and-sweet-the-codeland-2021-callforproposals-cfp-closes-in-just-a-few-days"&gt;
  &lt;/a&gt;
  I‚Äôll keep this reminder short and sweet: the CodeLand 2021 Call-For-Proposals (CFP) closes in just a few days!

&lt;/h3&gt;

&lt;p&gt;Hosted by DEV and &lt;a href="https://community.codenewbie.org"&gt;CodeNewbie&lt;/a&gt;, &lt;a href="https://codelandconf.com"&gt;CodeLand&lt;/a&gt; is the most welcoming conference for early-career developers and their champions. &lt;/p&gt;

&lt;p&gt;This year, CodeLand will be taking place &lt;em&gt;virtually&lt;/em&gt; from September 23-24, 2021 ‚Äì we‚Äôre excited to welcome speakers and attendees from all over the globe. &lt;/p&gt;

&lt;p&gt;If you‚Äôve been considering submitting a talk, now is your chance ‚è∞&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-more-details-on-the-codeland-cfp-here-by-this-tuesday-1159-pm-utc"&gt;
  &lt;/a&gt;
  Read more details on the CodeLand CFP &lt;a href="https://community.codenewbie.org/codenewbie/reminder-submit-your-codeland-talk-proposals-by-tuesday-july-20th-163l"&gt;here&lt;/a&gt; by this Tuesday @ 11:59 PM UTC.
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#submit-your-talk-here"&gt;
  &lt;/a&gt;
  Submit your talk &lt;a href="https://cfp.codelandconf.com/events/codeland-2021"&gt;here&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We hope to see a CodeLand 2021 talk proposal from you üåà &lt;/p&gt;

</description>
      <category>codeland</category>
      <category>codenewbie</category>
      <category>meta</category>
    </item>
    <item>
      <title>‚ùå Is your BUSINESS really safe from HACKERS? ‚ùå</title>
      <author>Dotnetsafer</author>
      <pubDate>Fri, 16 Jul 2021 17:46:56 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/is-your-business-really-safe-from-hackers-1i03</link>
      <guid>https://dev.to/dotnetsafer/is-your-business-really-safe-from-hackers-1i03</guid>
      <description>&lt;p&gt;Are you REALLY prepared for a CYBERSECURITY ATTACK? ü§î&lt;/p&gt;

&lt;p&gt;From Dotnetsafer we want to make you aware with this video of the importance of keeping all your data safe. ‚úÖ&lt;/p&gt;

&lt;p&gt;The size of your company is irrelevant to the attackers, they only have one mission: STEAL YOUR INTELLECTUAL PROPERTY, CONFIDENTIAL DATA OR DESTROY YOUR IMAGE.&lt;/p&gt;

&lt;p&gt;I hope you dare to see itü§ó&lt;br&gt;
It's ONLY 3 minutes...&lt;br&gt;
About DOUBLE the time it takes a HACKER to obtain any data they need from your company. &lt;/p&gt;

</description>
      <category>development</category>
      <category>programm</category>
      <category>csharp</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>React Context Simplifier</title>
      <author>Harsh</author>
      <pubDate>Fri, 16 Jul 2021 17:28:12 +0000</pubDate>
      <link>https://dev.to/harshdand/react-context-simplifier-3f4n</link>
      <guid>https://dev.to/harshdand/react-context-simplifier-3f4n</guid>
      <description>&lt;p&gt;To simplify the react context api usage and reduce unnecessary renders I have created &lt;a href="https://www.npmjs.com/package/context-simplifier"&gt;context-simplifier&lt;/a&gt; library. Adding usage details and example below.  Feedback, feature requests, bugs can be raised here &lt;a href="https://github.com/Harshdand/context-simplifier"&gt;https://github.com/Harshdand/context-simplifier&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; context-simplifier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add context-simplifier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#to-create-new-context"&gt;
  &lt;/a&gt;
  To create new context
&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;createContextProvider&lt;/code&gt; to create new context. It will return the provider for the created context&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContextProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;context-simplifier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CountProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContextProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CountProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CountDisplay&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CountProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#to-use-the-context-value-use-raw-getcontextvalue-endraw-"&gt;
  &lt;/a&gt;
  To use the context value use &lt;code&gt;getContextValue&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getContextValue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;context-simplifier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CountDisplay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getContextValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CountDisplay&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#to-get-the-setter-for-updating-the-context-value"&gt;
  &lt;/a&gt;
  To get the setter for updating the context value
&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;getContextAction&lt;/code&gt; to get the setter function which can be used to update the context value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getContextAction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;context-simplifier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getContextAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Decrement&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  API
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#-raw-createcontextprovidercontextname-initialvalue-reducerfunction-endraw-%E2%87%92-raw-provider-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;createContextProvider(contextName, initialValue, reducerFunction)&lt;/code&gt; ‚áí &lt;code&gt;provider&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Creates a context and returns the provider.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Param&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;contextName&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string:required&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Context name must be string without any spaces or special characters. &lt;strong&gt;Examples&lt;/strong&gt;: &lt;code&gt;count, countContext&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;initialValue&lt;/td&gt;
&lt;td&gt;&lt;code&gt;any:optional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Initial Value for the context&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reducerFunction&lt;/td&gt;
&lt;td&gt;&lt;code&gt;function:optional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reducer function to update context value. Reducer function will receive two params &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-getcontextvaluecontextname-endraw-%E2%87%92-raw-contextvalue-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;getContextValue(contextName)&lt;/code&gt; ‚áí &lt;code&gt;contextValue&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Creates a context and returns the provider.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Param&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;contextName&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string:required&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Provide the context name to fetch its value&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-getcontextactioncontextname-endraw-%E2%87%92-raw-contextsetterfunction-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;getContextAction(contextName)&lt;/code&gt; ‚áí &lt;code&gt;contextSetterFunction&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Creates a context and returns the provider.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Param&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;contextName&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string:required&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Provide the context name to get its setter function&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;MIT ¬© &lt;a href="https://github.com/Harshdand"&gt;Harshdand&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/context-simplifier"&gt;https://www.npmjs.com/package/context-simplifier&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>C# Array Methods</title>
      <author>Ishaan Sheikh</author>
      <pubDate>Fri, 16 Jul 2021 16:47:41 +0000</pubDate>
      <link>https://dev.to/sheikh_ishaan/c-array-methods-54dj</link>
      <guid>https://dev.to/sheikh_ishaan/c-array-methods-54dj</guid>
      <description>&lt;p&gt;In C# there is an Array class which provides methods related to array operations. In this blog we'll look into some of the common methods used with arrays.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#declaring-an-array"&gt;
  &lt;/a&gt;
  Declaring an array
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Array of integers&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Array of strings&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Smith"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Bill"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getting-the-length-of-an-array"&gt;
  &lt;/a&gt;
  Getting the length of an array
&lt;/h3&gt;

&lt;p&gt;To get the length of an array we can use the &lt;code&gt;Length&lt;/code&gt; property of the Array class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrayfind"&gt;
  &lt;/a&gt;
  Array.Find()
&lt;/h2&gt;

&lt;p&gt;This method is used to search an element in an array. It will return the &lt;strong&gt;first&lt;/strong&gt; element found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrayfindall"&gt;
  &lt;/a&gt;
  Array.FindAll()
&lt;/h2&gt;

&lt;p&gt;This methods is used to find all the elements in the array that matches the given condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FindAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result from above code snippet will contain the array of elements returned from the function that matches the condition. We can use the foreach loop to print the elements in the result array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrayexist"&gt;
  &lt;/a&gt;
  Array.Exist()
&lt;/h2&gt;

&lt;p&gt;This method is used to check whether an element exists that match the specified condition in the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Steve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Bob"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Shane"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Andrew"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt; &lt;span class="c1"&gt;// True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrayindexof"&gt;
  &lt;/a&gt;
  Array.IndexOf()
&lt;/h2&gt;

&lt;p&gt;This method is used to find the first occurrence of an element in an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"Smith"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Clark"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Peter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arraysort"&gt;
  &lt;/a&gt;
  Array.Sort()
&lt;/h2&gt;

&lt;p&gt;This method is used to sort the given array. This method returns &lt;code&gt;void&lt;/code&gt;, that means it manipulates the same array and didn't return any result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Zack"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Bob"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Shane"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Andrew"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// users = {"Andrew", "Bob", "Shane", "Zack"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is basic method I have shown here, you can view all the overloads for this method &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrayreverse"&gt;
  &lt;/a&gt;
  Array.Reverse()
&lt;/h2&gt;

&lt;p&gt;This method reverse the order of an array. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Zack"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Bob"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Shane"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Andrew"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// users = {"Andrew", "Shane", "Bob", "Zack"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arraybinarysearch"&gt;
  &lt;/a&gt;
  Array.BinarySearch()
&lt;/h2&gt;

&lt;p&gt;Using this method we can perform a binary search on the array. The array must be sorted before passing it to this method. It returns the index of the element found in the array. If the array is not sorted before using this method you may see some unexpected results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BinarySearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>csharp</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Create a GitHub Profile README.md with widgets</title>
      <author>Kritika</author>
      <pubDate>Fri, 16 Jul 2021 16:38:28 +0000</pubDate>
      <link>https://dev.to/kritikapattalam/create-a-github-profile-readme-md-with-widgets-47j7</link>
      <guid>https://dev.to/kritikapattalam/create-a-github-profile-readme-md-with-widgets-47j7</guid>
      <description>&lt;p&gt;Ever since GitHub released the feature that allows users to add a profile level Readme to showcase their interests, bio, contributions etc., I have been wanting to add one to my  &lt;a href="https://github.com/kritika-pattalam"&gt;GitHub profile&lt;/a&gt; . While I did that, I thought why not document this and what better way than a blog post.¬† &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-am-i-going-to-do-"&gt;
  &lt;/a&gt;
  What am I going to do ?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a new repository using the github web interface with a readme file.&lt;/li&gt;
&lt;li&gt;Add content into that readme file using markdown.&lt;/li&gt;
&lt;li&gt;Add some widgets to power the github profile . Eg &lt;strong&gt;GitHub stats&lt;/strong&gt;, &lt;strong&gt;GitHub streak&lt;/strong&gt;,  &lt;strong&gt;stackoverflow reputation&lt;/strong&gt; , &lt;strong&gt;top languages&lt;/strong&gt; etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#create-a-readme-github-profile"&gt;
  &lt;/a&gt;
  Create a Readme github profile
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt;  Go to  &lt;a href="//Github.com"&gt;https://github.com/&lt;/a&gt;  and on the top far right corner, click the + icon and click on New Repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Enter the repository name. It should be same as your github username. In my case , my github username is &lt;strong&gt;kritika-pattalam&lt;/strong&gt; so I entered that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt;  Make sure you select the option public .(P.S Github profile will be available for others to view only if the repository is public.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Select Initialize this repository with a README.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Click¬† Create Repository &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4ULo05z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmxf3dt5m5yqkdyp16m1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4ULo05z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmxf3dt5m5yqkdyp16m1.jpeg" alt="Create a new Repository with username"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your github profile readme file has been created with a dummy content for you to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQk9cTYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z36cxzl8it9g5cikei5y.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQk9cTYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z36cxzl8it9g5cikei5y.jpeg" alt="Dummy Markdown section after new repository creation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-markdown-to-the-readmemd-file"&gt;
  &lt;/a&gt;
  Adding Markdown to the Readme.md file
&lt;/h3&gt;

&lt;p&gt;Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. It can be used to add anything to a readme file. &lt;br&gt;
Even though its a markup language it does not accept css classes, hence the plain old HTML attributes such as width for an image , align="center" for a paragraph tag can be used to align the layout. Read more about markdown &lt;a href="https://www.markdownguide.org/cheat-sheet/"&gt;Markdown cheatsheet&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#widgets"&gt;
  &lt;/a&gt;
  Widgets
&lt;/h3&gt;

&lt;p&gt;You can add the below code to your markdown file , replacing {username} with your github profile username. There are more options such as choosing your own themes, &lt;br&gt;
whether you want to show the icons or not. To know more about the options, you can refer  &lt;a href="https://github.com/anuraghazra/github-readme-stats#github-stats-card"&gt;Github Widgets&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#### Github Stats
&amp;lt;img src="https://github-readme-stats.vercel.app/api?username={username}&amp;amp;show_icons=true&amp;amp;theme=gotham" alt="github stats" width="45%" align="right"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### Github Streaks
&amp;lt;img¬†src="https://github-readme-streak-stats.herokuapp.com/?user=kritika-pattalam&amp;amp;theme=dark" width="48%" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### Top Languages
 ![Top Langs](https://github-readme-stats.vercel.app/api/top-langs/?username=kritika-pattalam&amp;amp;layout=compact)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#stackoverflow-reputation-using-flair"&gt;
  &lt;/a&gt;
  Stackoverflow reputation using Flair
&lt;/h3&gt;

&lt;p&gt;If you have a stackoverflow account, adding this to your github profile to reflect your SO reputation is straightforward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Go to your stackoverflow account, and click on edit profile and settings.&lt;br&gt;
&lt;strong&gt;Step 2&lt;/strong&gt;: Scroll down to &lt;strong&gt;Flair&lt;/strong&gt; found under site settings.&lt;br&gt;
&lt;strong&gt;Step 3&lt;/strong&gt;: Copy paste the code snippet to your readme file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jz42wAo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtzh5l3wqaufo8x0khju.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jz42wAo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtzh5l3wqaufo8x0khju.jpeg" alt="Stackoverflow profile - on how to get the flair"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally once you are done with all the changes, commit the readme.md file and you should be able to see your Readme.md github profile. You can see mine at &lt;a href="https://github.com/kritika-pattalam"&gt;Kritika's Github Profile&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;Let me know your thoughts in the comments below. Feedback and suggestions are Welcome.!!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.markdownguide.org/cheat-sheet/"&gt;Markdown cheatsheet&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://shields.io/category/size"&gt;Create your badges&lt;/a&gt;  eg: my Techstack was created using the shields.io&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/anuraghazra/github-readme-stats#github-stats-card"&gt;Github Widgets&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets connect on  &lt;a href="https://twitter.com/KritikaPattalam"&gt;Twitter&lt;/a&gt;  | &lt;a href="https://www.linkedin.com/in/kritika-p-296739155/"&gt;LinkedIn&lt;/a&gt; for more web development related chats.&lt;/p&gt;

</description>
      <category>github</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Build a Crypto Alert App with Strapi and Next.js</title>
      <author>Shada </author>
      <pubDate>Fri, 16 Jul 2021 16:18:38 +0000</pubDate>
      <link>https://dev.to/strapi/how-to-build-a-crypto-alert-app-with-strapi-and-next-js-4b8l</link>
      <guid>https://dev.to/strapi/how-to-build-a-crypto-alert-app-with-strapi-and-next-js-4b8l</guid>
      <description>&lt;p&gt;Liquid syntax error: Variable '{{% raw %}' was not properly terminated with regexp: /\}\}/&lt;/p&gt;
</description>
      <category>nextjs</category>
      <category>crypto</category>
      <category>strapi</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Eliminating Software Development Process w/ Adam Carmi, CTO of Applitools</title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 16 Jul 2021 16:17:03 +0000</pubDate>
      <link>https://dev.to/linearb/eliminating-software-development-process-w-adam-carmi-cto-of-applitools-3gcl</link>
      <guid>https://dev.to/linearb/eliminating-software-development-process-w-adam-carmi-cto-of-applitools-3gcl</guid>
      <description>&lt;p&gt;What would happen if you eliminated all of the processes that surround your software development teams today?&lt;/p&gt;

&lt;p&gt;Adam Carmi, CTO of Applitools, joins the &lt;a href="https://devinterrupted.com/podcast/eliminating-software-development-process/"&gt;Dev Interrupted podcast&lt;/a&gt; to discuss how his methodology works, and why you need to start eliminating processes too.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/0U8s16n8iU1yLKY88q9Lch"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The ins-and-outs of a process-less software &lt;a href="https://linearb.io/blog/dev-methodology-doesnt-matter/"&gt;development method&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;How and why Adam recruits only ‚ÄúA Players‚Äù&lt;/li&gt;
&lt;li&gt;Why he let‚Äôs the product team dictate his engineering roadmap&lt;/li&gt;
&lt;li&gt;How he tackles large projects without time estimates or &lt;a href="https://linearb.io/blog/why-agile-velocity-is-the-most-dangerous-metric-for-software-development-teams/"&gt;sprints&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1300 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>productivity</category>
      <category>programming</category>
      <category>leadership</category>
    </item>
    <item>
      <title>Perfect Table Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 16 Jul 2021 16:14:42 +0000</pubDate>
      <link>https://dev.to/nikhil27b/perfect-table-with-html-37g3</link>
      <guid>https://dev.to/nikhil27b/perfect-table-with-html-37g3</guid>
      <description>&lt;p&gt;Hello Guys,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfPO80Ku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzjxj5vas5p4scgr4kd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfPO80Ku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzjxj5vas5p4scgr4kd9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I created a Amazing Table Using HTML &amp;amp; CSS. this simple table with little touch of colors and border-radius so this is looks good also I added some padding in the table to its look clean. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/jOmmVNW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why Astro matters</title>
      <author>Ben Read</author>
      <pubDate>Fri, 16 Jul 2021 16:12:15 +0000</pubDate>
      <link>https://dev.to/endymion1818/why-astro-matters-55nj</link>
      <guid>https://dev.to/endymion1818/why-astro-matters-55nj</guid>
      <description>&lt;p&gt;&lt;strong&gt;Next, Nuxt, Gatsby, SvelteKit ... there's been an explosion of frontend application frameworks lately. I've tried many (but not all) of them, and I've got to say, it's never been a more delightful experience to spin up a new project. So much so, that I've got hundreds of unfinished ones lying around everywhere.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recently, &lt;a href="https://astro.build"&gt;Astro&lt;/a&gt;, another new frontend application framework, launched itself on the unsuspecting JavaScript public. &lt;/p&gt;

&lt;p&gt;Whilst many of us may have been tempted to say "oh no not another one", this framework really stood out to me.&lt;/p&gt;

&lt;p&gt;What's the point of difference with this one? Why does it "matter" so much? Well, consider this:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-frontend-can-be-one-happy-family-again"&gt;
  &lt;/a&gt;
  1. Frontend can be one happy family again
&lt;/h2&gt;

&lt;p&gt;Astro could be considered the first frontend "meta framework". &lt;/p&gt;

&lt;p&gt;What's one of those then? It's a "set of core interfaces for common services and highly extensible backbone for integrating components &lt;a href="https://www.igi-global.com/chapter/java-web-application-frameworks/16864"&gt;this is already Java thing by the way&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Astro is essentially a "bring your own frontend" approach to modern web frameworks. You can use whatever framework (oh, ok "library" then) you know and love, and still spin up a performant app that you can host almost anywhere.&lt;/p&gt;

&lt;p&gt;Think about the potential here. Astro could be the place the frontend finally comes together. It no longer matters (as much) what framework you use. Use them all if you like ü§∑‚Äç‚ôÇÔ∏è. &lt;/p&gt;

&lt;p&gt;Love Vue? You can love Astro. React? Same. Svelte? You'll find no argument from Astro, because Astro is the glue that underpins how we build websites and applications.&lt;/p&gt;

&lt;p&gt;Great, innit? It'll probably never happen but I can dream, can't I?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-astro-pushes-the-boundaries-for-every-javascript-framework"&gt;
  &lt;/a&gt;
  2. Astro pushes the boundaries for every javascript framework*
&lt;/h2&gt;

&lt;p&gt;(* oh, ok library then)&lt;/p&gt;

&lt;p&gt;Take a look at this tweet from Evan You, the creator of Vue:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;I just tried this in a Vite SSRed app and this approach totally works... a plugin can simply remove the script tags for the actual bundle and let petite-vue "sprinkle" the parts.&lt;br&gt;&lt;br&gt;aka "Island Architecture" üèùÔ∏è &lt;a href="https://t.co/Oe9KRvFsrd"&gt;&lt;/a&gt;&lt;a href="https://t.co/Oe9KRvFsrd"&gt;https://t.co/Oe9KRvFsrd&lt;/a&gt; &lt;a href="https://t.co/KV7SvCwyn8"&gt;pic.twitter.com/KV7SvCwyn8&lt;/a&gt;&lt;/p&gt;‚Äî Evan You (@youyuxi) &lt;a href="https://twitter.com/youyuxi/status/1411405615369539590?ref_src=twsrc%5Etfw"&gt;July 3, 2021&lt;/a&gt;
&lt;/blockquote&gt;  

&lt;p&gt;Is it a coincidence that Vue now can do a similar thing to Astro? did Astro get Evan to start thinking more about this problem? Could the same be said for the other frameworks too?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deliciousreverie.co.uk/post/towards-better-rehydration/"&gt;Better hydration is something I've been wanting ever since the present generation of frontend application frameworks came out&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I know the React team have been working on it for a long time. &lt;a href="https://github.com/gatsbyjs/gatsby/issues/17993"&gt;I even opened (very prematurely it turns out!) this issue on the GatsbyJS repo around 2 years ago&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;React 18's hydration prioritisation is a good step forward, however the whole DOM tree still need to be hydrated. Won't it be great when we need only attach JavaScript generated elements to the DOM when components really need them?!&lt;/p&gt;

&lt;p&gt;It would be wonderful to think that partial rehydration could be everywhere, it would certainly level the playing field and even things up a lot &lt;a href="https://gomakethings.com/progressive-enhancement-and-the-next-billion-web-users/"&gt;for the next 1 billion web users&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-out-astro"&gt;
  &lt;/a&gt;
  Check out Astro
&lt;/h2&gt;

&lt;p&gt;If you care about performance (you care right?) please check out this gamechanger. I'm so excited for the potential here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://astro.build"&gt;https://astro.build&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
      <category>svelte</category>
    </item>
    <item>
      <title>How to add audio and video calls to a TalkJS chat by using the Daily API</title>
      <author>Andrew</author>
      <pubDate>Fri, 16 Jul 2021 15:58:55 +0000</pubDate>
      <link>https://dev.to/talkjs/how-to-add-audio-and-video-calls-to-a-talkjs-chat-by-using-the-daily-api-5961</link>
      <guid>https://dev.to/talkjs/how-to-add-audio-and-video-calls-to-a-talkjs-chat-by-using-the-daily-api-5961</guid>
      <description>&lt;p&gt;In this post we‚Äôll explore how we can add video call functionality to a TalkJS chat. With remote work more popular than ever, video calling is in high demand and considered a must-have feature for many chat applications. We‚Äôll be making use of the &lt;a href="https://www.daily.co/"&gt;Daily video API&lt;/a&gt;, which will allow us to get up and running quickly!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-a-simple-talkjs-chat"&gt;
  &lt;/a&gt;
  Setting up a simple TalkJS chat
&lt;/h3&gt;

&lt;p&gt;First of all, we‚Äôll set up a simple conversation. Follow this &lt;a href="https://talkjs.com/docs/Getting_Started/index.html"&gt;Getting Started guide&lt;/a&gt;. You may also want to change the &lt;code&gt;photoUrl&lt;/code&gt; of each user to an actual image address. You can find free images &lt;a href="https://www.pexels.com/search/faces/?size=small"&gt;here&lt;/a&gt; to act as the profile pictures of your users. &lt;/p&gt;

&lt;p&gt;For this tutorial, we will use a chatbox (a single conversation) instead of an inbox that allows you to swap between conversations. You can learn more about a TalkJS chatbox &lt;a href="https://talkjs.com/docs/Features/Chat_UI_Modes/The_Chatbox.html"&gt;here&lt;/a&gt;. Make sure you change this code from the Getting Started guide from:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const inbox = session.createInbox({selected: conversation});
inbox.mount(document.getElementById("talkjs-container"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To the new code for a chatbox:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var chatbox = session.createChatbox(conversation);
chatbox.mount(document.getElementById("talkjs-container"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run your application, it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A3DzC73k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22xsr0ob31ci9c159x6c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A3DzC73k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22xsr0ob31ci9c159x6c.PNG" alt="Screenshot of chat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect! Let‚Äôs move on to adding a button to the chat header that will allow us to make video calls.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-video-call-button-to-talkjs-chat"&gt;
  &lt;/a&gt;
  Adding a video call button to TalkJS chat
&lt;/h3&gt;

&lt;p&gt;We want to add a video call button to our chat header. We will use the button to toggle whether the video call dialog is shown. Unfortunately we cannot use the in-built ChatHeader component that comes with the chatbox out-of-the-box. TalkJS does not allow click handlers to be added to buttons there. To get around this we can use custom headers as described by this documentation &lt;a href="//talkjs.com/docs/Features/Customizations/Creating_Custom_Headers.html"&gt;here&lt;/a&gt;. This &lt;a href="https://talkjs.com/resources/customizing-the-chatbox-ui-adding-a-custom-header/"&gt;blog post&lt;/a&gt; also describes the process excellently. &lt;/p&gt;

&lt;p&gt;Let‚Äôs get started!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-a-custom-chat-header-in-talkjs"&gt;
  &lt;/a&gt;
  Using a custom chat header in TalkJS
&lt;/h4&gt;

&lt;p&gt;First, change our chatbox code to not use the default chat header.&lt;/p&gt;

&lt;p&gt;Change the code from:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var chatbox = session.createChatbox(conversation);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To the new version that won‚Äôt use the default header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var chatbox = session.createChatbox(conversation, {showChatHeader: false});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Incorporate the &lt;code&gt;talkjs-container&lt;/code&gt; div into the structure shown below. As you can see we have a div for our entire chatbox, and a separate div for our header. We also have a div called &lt;code&gt;button-container&lt;/code&gt; where we‚Äôll add our video call button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- Container element for all TalkJS UI elements --&amp;gt;
   &amp;lt;div class="chatbox-container"&amp;gt;

    &amp;lt;!-- Custom TalkJS chat header --&amp;gt;
    &amp;lt;div id="chatbox-header"&amp;gt;

        &amp;lt;div id="header-bg"&amp;gt;&amp;lt;/div&amp;gt;
         &amp;lt;div id="user-avatar"&amp;gt;&amp;lt;/div&amp;gt;
         &amp;lt;p id="header-subject"&amp;gt;&amp;lt;span id="header-username"&amp;gt; Username&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;


        &amp;lt;div class="button-container"&amp;gt;
            &amp;lt;div class="call-button"&amp;gt;
                &amp;lt;!--input type="checkbox" name="notificationToggle" class="toggle-checkbox" id="toggle"--&amp;gt;
                &amp;lt;input type="image" name="videoCallButton" id="videocall" src="https://img.icons8.com/material-sharp/24/ffffff/video-call--v1.png"/&amp;gt; 
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;!-- container element in which TalkJS will display a chat UI --&amp;gt;
    &amp;lt;div id="talkjs-container" style="width: 100%;  height: 500px"&amp;gt;&amp;lt;i&amp;gt;Loading chat...&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#adding-a-username-and-picture-to-a-talkjs-custom-chat-header"&gt;
  &lt;/a&gt;
  Adding a username and picture to a TalkJS custom chat header
&lt;/h4&gt;

&lt;p&gt;Add the following code to incorporate your user‚Äôs name and profile picture into the custom header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Add the participant user's name and photo to the custom header
var headerUsername = document.getElementById('header-username');
headerUsername.textContent = other.name;      
document.getElementById('user-avatar').style.backgroundImage = "url(" + other.photoUrl + ")";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#styling-a-custom-chat-header-in-talkjs"&gt;
  &lt;/a&gt;
  Styling a custom chat header in TalkJS
&lt;/h4&gt;

&lt;p&gt;Finally, we‚Äôll add some basic CSS so that child elements in the &lt;code&gt;chatbox-container&lt;/code&gt; are centered horizontally and scale their width similar to how the default Chatbox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
/* Container for everything TalkJS*/
.chatbox-container {
    width: 420px;
    max-width: 100%; 
    margin: auto;
}

/* Custom header for the chatbox*/
#chatbox-header {
    height: 110px;
    position: relative;
    background-color: #000;
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    /* Slightly curve the top of the header */
    border-radius: 10px 10px 0 0;
    margin-bottom: -3px;
    padding: 10px;
    position: relative;
}

#header-bg {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
  border-radius: inherit;
  opacity: 0.6;
}

#user-avatar {
  position: absolute;
  height: 50px;
  width: 50px;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
  border-radius: 50%;
  border: 2px solid #eee;
}

#chatbox-header p {
  font-family: "Helvetica", sans-serif;
  color: #eee;
  margin: 0;
}

#header-subject {
  position: absolute;
  font-size: 32px;
  left: 70px;
  top: 7px;
}

/* Notification toggle */
.button-container {
    text-align: right;
    position: absolute;
    bottom: 15px;
    right: 10px;
}

.button-container p {
    display: inline;
    font-size: 10px;
    padding-right: 10px;
    vertical-align: middle;
}
.call-button {
    vertical-align: middle;
    display: inline-block;
    position: relative;
    width: 51px;
    -webkit-user-select:none; 
    -moz-user-select:none; 
    -ms-user-select: none;
    user-select: none;
    height: 18px;
}
    &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After these changes your chat should resemble the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--opAKbCEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1irtb9981ba35nf7e1en.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--opAKbCEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1irtb9981ba35nf7e1en.PNG" alt="Screenshot of chat with custom UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow, we‚Äôve made a lot of progress. You can see our new video button, but it currently does not have any functionality.&lt;/p&gt;

&lt;p&gt;Time to hook up the Daily API and have this button open the video call dialog.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-the-daily-api"&gt;
  &lt;/a&gt;
  Setting up the Daily API
&lt;/h3&gt;

&lt;p&gt;Sign up for the Daily API &lt;a href="https://www.daily.co/"&gt;here&lt;/a&gt;. Their free plan allows you to get building and prototyping straight away, without adding any form of payment!&lt;/p&gt;

&lt;p&gt;Creating a Daily room by following this &lt;a href="https://docs.daily.co/docs/experiment-in-the-dashboard#step-by-step-guide-create-a-daily-room-url-from-the-dashboard"&gt;guide&lt;/a&gt;. Each Daily room has an associated URL, we will need this to have our video call.&lt;/p&gt;

&lt;p&gt;To hook up our button to the Daily API we will have to make two additions to our current code:&lt;/p&gt;

&lt;p&gt;Simply add these script tags to your html page:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script crossorigin src="&lt;a href="https://unpkg.com/@daily-co/daily-js"&gt;https://unpkg.com/@daily-co/daily-js&lt;/a&gt;"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add the following code, make sure to use your own Room URL we set up here&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```
var callButton = document.getElementById('videocall');

    callButton.addEventListener('click', function() {
        callFrame = window.DailyIframe.createFrame({
            showLeaveButton: true,
            showFullscreenButton: true,
        });
        callFrame.join({ url: 'https://talkjstest.daily.co/{your-video-call-room-id}' })
    });

```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see we passed in some additional properties like &lt;code&gt;showLeaveButton&lt;/code&gt; and &lt;code&gt;showFullscreenButton&lt;/code&gt;. Check out this &lt;a href="https://docs.daily.co/docs/embed-the-daily-prebuilt-ui#step-by-step-guide-embed-a-daily-room-url"&gt;guide&lt;/a&gt; for more information on what you can do with the premade Daily UI.&lt;/p&gt;

&lt;p&gt;Let‚Äôs run the application and check out our brand new video call functionality!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TdYBZNS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32kecf9qrgva252khgpg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TdYBZNS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32kecf9qrgva252khgpg.png" alt="Screenshot of video call"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect! Note, if you would like to change anything about how the video call dialog behaves, try changing your Room &lt;a href="https://dashboard.daily.co/settings"&gt;settings&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-regular-audio-calls-to-a-talkjs-chat"&gt;
  &lt;/a&gt;
  Adding regular audio calls to a TalkJS chat
&lt;/h3&gt;

&lt;p&gt;We‚Äôll also add another button, this time for regular audio calls. The main difference here is the user will be placed directly into the call without being shown an option to set up their microphone and camera.&lt;/p&gt;

&lt;p&gt;Go back to your Daily API &lt;a href="https://dashboard.daily.co/"&gt;dashboard&lt;/a&gt; and create a new room. Select settings that are typical of regular calls like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Turning off the Prejoin UI&lt;/li&gt;
&lt;li&gt;Turning off video by default&lt;/li&gt;
&lt;li&gt;Turning off screen share by default.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the settings I have selected:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXwVSnPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rph7o87fr93yp9oivqq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXwVSnPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rph7o87fr93yp9oivqq5.png" alt="Screenshot of settings for Daily room"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that our room is set up let‚Äôs add the actual call button icon. Update our &lt;code&gt;button-container&lt;/code&gt; div to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="button-container"&amp;gt;
            &amp;lt;div class="call-button"&amp;gt;
                &amp;lt;input type="image" name="videoCallButton" id="videocall" src="https://img.icons8.com/material-sharp/24/ffffff/video-call--v1.png"/&amp;gt; 
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="call-button"&amp;gt;
                &amp;lt;input type="image" name="audioCallButton" id="audiocall" src="https://img.icons8.com/material-rounded/24/ffffff/phone-disconnected.png"/&amp;gt;
            &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will add the call icon to our custom chat header panel, but the button will have no functionality. Let‚Äôs add functionality by following similar steps as before. Make sure your new code looks as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var callButton = document.getElementById('videocall');
    var audioCallButton = document.getElementById('audiocall');

    var callFrame; 

    callButton.addEventListener('click', function() {
        if(callFrame != null){
            callFrame.destroy();
        }
        callFrame = window.DailyIframe.createFrame({
            showLeaveButton: true,
            showFullscreenButton: true,
        });


        callFrame.join({ url: 'https://talkjstest.daily.co/{your-video-call-room-id}' })
    });

    //audio button listener
        audioCallButton.addEventListener('click', function() {


        if(callFrame != null)
        {
            callFrame.destroy();
        }

        callFrame = window.DailyIframe.createFrame({
            showLeaveButton: true,
            showFullscreenButton: true,

        });
        callFrame.join({ url: 'https://talkjstest.daily.co/{your-audio-call-room-id}' })
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that we now destroy the &lt;code&gt;callFrame&lt;/code&gt; Chat frame each time the button is pressed, and proceed to load the new audio or video UI depending on what button was clicked. This will ensure only one frame is displayed at any one time.&lt;/p&gt;

&lt;p&gt;Try out your new audio call button. You should be placed directly into a call without having to set up your microphone or camera. It should be similar to having a call on Microsoft Teams, Slack, or Facebook Messenger.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BOP_Tark--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1udo3r6131rnbl2kw9bh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOP_Tark--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1udo3r6131rnbl2kw9bh.png" alt="Audio call screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There you have it, both audio and video calls integrated with a TalkJS chatbox! Don‚Äôt be afraid to take this project further. This &lt;a href="https://jsfiddle.net/aboxshall/L43eka8w/14/"&gt;JSFiddle project&lt;/a&gt; from TalkJS, along with this &lt;a href="https://github.com/daily-demos/fullscreen-prebuilt-ui"&gt;sample project from Daily&lt;/a&gt;, are great resources that show you even more functionality. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
      <category>chat</category>
    </item>
  </channel>
</rss>
