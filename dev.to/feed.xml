<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Striver's SDE Sheet Journey - #8 Merge Overlapping Subintervals</title>
      <author>sachin26</author>
      <pubDate>Wed, 29 Dec 2021 09:14:24 +0000</pubDate>
      <link>https://dev.to/sachin26/strivers-sde-sheet-journey-8-merge-overlapping-subintervals-4jff</link>
      <guid>https://dev.to/sachin26/strivers-sde-sheet-journey-8-merge-overlapping-subintervals-4jff</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Problem Statement&lt;/u&gt; :-&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Given an array of intervals where &lt;code&gt;intervals[i] = [starti, endi]&lt;/code&gt;, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: intervals=[[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explanation :&lt;/strong&gt; &lt;em&gt;Since intervals [1,3] and [2,6] are overlapping we can merge them to form [1,6]&lt;br&gt;
 intervals.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, in this problem, we need to merge those intervals which are overlapping, which means intervals that start point lies between the start &amp;amp; endpoint of another interval.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution-1"&gt;
  &lt;/a&gt;
  &lt;u&gt;Solution 1&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;step-1&lt;/strong&gt; first, we need to &lt;strong&gt;sort&lt;/strong&gt; the &lt;code&gt;intervals&lt;/code&gt; on the basis of their starting point. by doing this we can easily merge overlapping adjacent intervals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;unsorted intervals&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wLFMUeZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7ahbqnqqn5rplzzmmq7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLFMUeZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7ahbqnqqn5rplzzmmq7.png" alt="dsa" width="300" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sorted intervals&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3x74NnGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iig6aamvyjncml77sgcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3x74NnGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iig6aamvyjncml77sgcm.png" alt="dsa" width="300" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-2&lt;/strong&gt; take the first interval and compare its &lt;code&gt;end&lt;/code&gt; with the next interval &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if they overlap, update the &lt;code&gt;end&lt;/code&gt; of the first interval with the max end of overlapping intervals.&lt;/p&gt;

&lt;p&gt;if they do not overlap, move to the next interval.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See below the java version of this approach.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Java&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="n"&gt;intervals&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validIntervals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// sort the array by thier starting point&lt;/span&gt;
        &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intervals&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]));&lt;/span&gt;

        &lt;span class="c1"&gt;// store first interval as valid&lt;/span&gt;
        &lt;span class="n"&gt;validIntervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intervals&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;


        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;intervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intervals&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;validInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validIntervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validIntervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// if intervals overlapping,then marge&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validInterval&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;]){&lt;/span&gt;
               &lt;span class="n"&gt;validInterval&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;&lt;span class="n"&gt;validInterval&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt; 
            &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;validIntervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;validIntervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toArray&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;validIntervals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;][]);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for reading this blog. if you find something wrongs, let me know in the comment section.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>dsa</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Anayo Debugging 1: java.lang.NoClassDefFoundError: &lt;clinit&gt; failed for class com.facebook.flipper.android.EventBase</title>
      <author>Anayo Oleru</author>
      <pubDate>Wed, 29 Dec 2021 09:06:11 +0000</pubDate>
      <link>https://dev.to/anayooleru/anayo-debugging-1-javalangnoclassdeffounderror-failed-for-class-comfacebookflipperandroideventbase-3pm5</link>
      <guid>https://dev.to/anayooleru/anayo-debugging-1-javalangnoclassdeffounderror-failed-for-class-comfacebookflipperandroideventbase-3pm5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#bug"&gt;
  &lt;/a&gt;
  Bug
&lt;/h1&gt;

&lt;p&gt;Generating an Android build package(APK)from Android Studio builds successfully. But running the generated APK on a real device or device connected to Android Studio Crashes on launch and returns the following errors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getWifiLinkLayerStats_1_3_Internal(l.973) failed {.code = ERROR_NOT_SUPPORTED, .description = }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/? E/studio.deploy: Could not get package user id: run-as: unknown package: com....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/? E/studio.deploy: Could not find apks for this package: com....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/? E/Finsky: [2] VerifyPerSourceInstallationConsentInstallTask.d(2): Package name null is not an installed package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/? E/installd: Couldn't opendir /data/app/vmdl1184715882.tmp: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/? E/installd: Failed to delete /data/app/vmdl1184715882.tmp: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/? E/ssioncontrolle: Not starting debugger since process cannot load the jdwp agent.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
java.lang.NoClassDefFoundError: &amp;lt;clinit&amp;gt; failed for class com.facebook.flipper.android.EventBase; see exception in other thread
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I read through all, trying to understand each of them. But what stood out from these errors, and that has some sort of clarity is the last one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java.lang.NoClassDefFoundError: &amp;lt;clinit&amp;gt; failed for class com.facebook.flipper.android.EventBase; see exception in other thread
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I was a bit skeptical, because it's getting really difficult to justify Flipper, a debug tool shouldn't crash and block the development process.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-i-solved-it"&gt;
  &lt;/a&gt;
  How I solved it
&lt;/h1&gt;

&lt;p&gt;After several trial and error, I was able to arrive at a solution that worked. I had to re-think, this particular error happens when after I try running the generated APK and not when I was generating a build. And I looked at how the Android build process works, the compiler converts the source code into DEX(whatever the name is) files, which include byte code that runs on android devices. So this would mean that while compiling, there was possibly a mix of old and new source code(which is possible since there is no such thing as a perfect compiler), or if there isn't no issue, then there must be something wrong with the compiled files. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is the best way to resolve something like this? As any other way, deleting the build and starting afresh as a new build.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is what I did, and it worked.&lt;/p&gt;

&lt;p&gt;Here is what I did, the steps I took:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deleted android build file, you can find this file in: 
android&amp;gt;app inside app delete build folder&lt;/li&gt;
&lt;li&gt;Then I cleaned the gradlew:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd android &amp;amp;&amp;amp;./gradlew clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Next I rebuilt the application again&lt;/li&gt;
&lt;li&gt;Then I ran the APK&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voila! It solved all the above issues. I hope this will help you and save you time, if you face similar error or the same error.&lt;/p&gt;

&lt;p&gt;If it helps you, like this post.&lt;/p&gt;




&lt;p&gt;My name is &lt;strong&gt;Anayo Oleru&lt;/strong&gt;, I specialise in Backend Development(NodeJS &amp;amp; ExpressJS), but I am experienced with Web frontend(ReactJS) and mobile(React-native). And I am open to offers in these fields.&lt;/p&gt;

&lt;p&gt;You can follow me on Twitter at &lt;a href="https://twitter.com/AnayoOleru"&gt;@AnayoOleru&lt;/a&gt; or send an email to: &lt;a href="mailto:anayo_oleru@outlook.com"&gt;anayo_oleru@outlook.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers and take care.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>androidstudio</category>
      <category>flipper</category>
      <category>unknownpackage</category>
    </item>
    <item>
      <title>5 WEB UX LAWS EVERY DEVELOPER SHOULD KNOW</title>
      <author>Visualway</author>
      <pubDate>Wed, 29 Dec 2021 08:21:55 +0000</pubDate>
      <link>https://dev.to/visualway/5-web-ux-laws-every-developer-should-know-f6h</link>
      <guid>https://dev.to/visualway/5-web-ux-laws-every-developer-should-know-f6h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-jakobs-law"&gt;
  &lt;/a&gt;
  1. JAKOB’S LAW
&lt;/h2&gt;

&lt;p&gt;Users spend most of their time on other sites. This means that users prefer your site to work the same way as all the other sites they already know. Websites do better the more standardized their design is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHzwAKIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Jakobs-Law.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHzwAKIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Jakobs-Law.png" alt="jakob" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-fitts-law"&gt;
  &lt;/a&gt;
  2. FITT’S LAW
&lt;/h2&gt;

&lt;p&gt;The time it takes someone to select an object in the screen depends on how far the cursor is from the object and the size of the object. Thus, the longer the distance and the smaller the target’s size, the longer it takes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PRvAjQVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Fittss-Law-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PRvAjQVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Fittss-Law-1.png" alt="fitt" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-millers-law"&gt;
  &lt;/a&gt;
  3. MILLER’S LAW
&lt;/h2&gt;

&lt;p&gt;The average person can only keep 7 (plus or minus 2) items in their working memory. Organize content into smaller chunks to help users process, understand, and memorize easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YeGr_MSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Millerss-Law.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeGr_MSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Millerss-Law.png" alt="miller" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-law-of-proximity"&gt;
  &lt;/a&gt;
  4. LAW OF PROXIMITY
&lt;/h2&gt;

&lt;p&gt;Objects that are near, or proximate to each other, tend to be grouped together.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proximity helps to establish a relationship with nearby objects.&lt;/li&gt;
&lt;li&gt;Proximity helps users understand and organize information faster and more efficiently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVB_MSEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Law-of-Proximity.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVB_MSEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Law-of-Proximity.png" alt="proximity" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-hicks-law"&gt;
  &lt;/a&gt;
  5. HICK'S LAW
&lt;/h2&gt;

&lt;p&gt;The time it takes to make a decision increases with the number and complexity of choices. Hick’s Law is a fairly commonsense idea: the more choices you present to a person, the longer they take to make a decision. It’s essentially a fancier way to describe the KISS rule: Keep It Simple, Stupid!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZlfYtGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Hicks-Law.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZlfYtGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Hicks-Law.png" alt="hick" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading
&lt;/h3&gt;

&lt;p&gt;If you liked this post, subscribe to our newsletter to never miss out on our blogs, product launches and tech news.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tinyletter.com/visualway"&gt;Subsribe to Visualway's newsletter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
      <category>programming</category>
    </item>
    <item>
      <title>Custom Web Design and Development</title>
      <author>Ace Infoway</author>
      <pubDate>Wed, 29 Dec 2021 07:54:18 +0000</pubDate>
      <link>https://dev.to/ace_infoway/custom-web-design-and-development-4pl9</link>
      <guid>https://dev.to/ace_infoway/custom-web-design-and-development-4pl9</guid>
      <description>&lt;p&gt;&lt;strong&gt;Ace Infoway&lt;/strong&gt; has gained 21+ years of experience in a plethora of &lt;a href="https://www.aceinfoway.com/"&gt;&lt;strong&gt;Custom Web Design and Development&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://www.aceinfoway.com/"&gt;&lt;strong&gt;Custom Website Development Services&lt;/strong&gt;&lt;/a&gt;, IT Services and has access to resources and teams in the USA, UK, and India.&lt;/p&gt;

&lt;p&gt;We are proud to be an extended partner and offer &lt;a href="https://www.aceinfoway.com/website-development"&gt;&lt;strong&gt;Website Development Consultants&lt;/strong&gt;&lt;/a&gt; teams for over 50+ Web Agencies &amp;amp; Businesses in diverse industries. Ace’s value proposition lies in its diverse domain expertise, minimum learning curve period, and efficient turn-around time. We learn and invest for our customers and with an electrifying and eccentric team on board, we are ready to harness the force for good.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our Esteemed Services Include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/digital-transformation"&gt;Digital Transformation Consulting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/"&gt;Custom Web Design and Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/website-development"&gt;Website Development Consultants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/ui-ux"&gt;UI UX Design Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/product-engineering"&gt;Software Product Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/web-application-development"&gt;Web Application Development Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/mobile-app-development"&gt;Custom Mobile App Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/qa-testing"&gt;Quality Assurance Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/back-office-process"&gt;Back Office Solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Publishing Support&lt;/li&gt;
&lt;li&gt;Agencies and Marketing Tech Services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sales Contact:&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Email:&lt;/strong&gt; &lt;a href="mailto:success@aceinfoway.com"&gt;success@aceinfoway.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href="https://www.aceinfoway.com"&gt;https://www.aceinfoway.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>programming</category>
      <category>design</category>
    </item>
    <item>
      <title>How to handle loading progress flicker</title>
      <author>Giannis Koutsaftakis</author>
      <pubDate>Wed, 29 Dec 2021 07:37:48 +0000</pubDate>
      <link>https://dev.to/kouts/how-to-handle-loading-progress-flicker-11ne</link>
      <guid>https://dev.to/kouts/how-to-handle-loading-progress-flicker-11ne</guid>
      <description>&lt;p&gt;One of the most important things in our web apps UX is to provide a form of feedback when the app needs more time to process the user's action when e.g an ajax request is fired in the background. This is usually done using a progress bar, a spinner, or a combination of both. &lt;/p&gt;

&lt;p&gt;Have you ever noticed though a "flaky" behavior when a lot of API calls happen at the same time?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GeTkE3nv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbmtxd8cnngrcxaes4ok.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GeTkE3nv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbmtxd8cnngrcxaes4ok.gif" alt="Image description" width="724" height="54"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We can provide a smooth experience to our users, so let's fix that!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-well-build"&gt;
  &lt;/a&gt;
  What we'll build
&lt;/h2&gt;

&lt;p&gt;We'll create a simple loader handler function for &lt;code&gt;Promises&lt;/code&gt; that will make sure our loading indicator will disappear only when the last unresolved &lt;code&gt;Promise&lt;/code&gt; gets resolved. We'll also make sure that the function is &lt;strong&gt;reusable&lt;/strong&gt; so that it can be used with any project and with any progress loading indicator plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;createLoader.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createLoader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;slackTime&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...{&lt;/span&gt;
      &lt;span class="na"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
      &lt;span class="na"&gt;slackTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slackTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We created a factory function that takes an options object that defines which operations will be performed on loading start/end and optionally an operation to execute when a &lt;code&gt;Promise&lt;/code&gt; is resolved.&lt;/p&gt;

&lt;p&gt;We can also define a &lt;code&gt;slackTime&lt;/code&gt; that will be used as a delay to wait until the last &lt;code&gt;Promise&lt;/code&gt; is resolved. This is useful in cases that we have e.g an API call that starts shortly after another call has just finished, causing a "flickering" effect in our loader.&lt;/p&gt;

&lt;p&gt;The factory function will return our &lt;code&gt;load&lt;/code&gt; method which will accept a &lt;code&gt;Promise&lt;/code&gt; or a function that returns a &lt;code&gt;Promise&lt;/code&gt;. Instead of firing our &lt;code&gt;async&lt;/code&gt; functions directly, we'll pass them through our &lt;code&gt;load&lt;/code&gt; function instead. Our loader then will make sure that the loading progress ends when the last of the &lt;code&gt;Promises&lt;/code&gt; is resolved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  Options
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;start&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A function to execute on loading start, this is where we start our progress loader&lt;/td&gt;
&lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A function to execute when loading ends, this is where we stop our progress loader&lt;/td&gt;
&lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;inc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An optional function to execute when a promise resolves (valid for all promises except the last one). We can use this function to increment our loading progress.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;() =&amp;gt; {}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;slackTime&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Time in &lt;code&gt;ms&lt;/code&gt; to wait until last promise is resolved as to enable multiple operations in a sequence without re-triggering a loader progress start&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#creating-our-loader"&gt;
  &lt;/a&gt;
  Creating our loader
&lt;/h2&gt;

&lt;p&gt;It's time to create our loader. Here we're using the popular &lt;a href="https://github.com/rstacruz/nprogress"&gt;nprogress&lt;/a&gt; library for our progress loading indicator as an example.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;loader.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NProgress&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nprogress&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createLoader&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./createLoader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;NProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;minimum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;NProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;NProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;NProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createLoader&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;slackTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inc&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have configured the &lt;code&gt;NProgress&lt;/code&gt; instance and setup a new loader that will start, end, or increment the &lt;code&gt;nprogress&lt;/code&gt; progress bar depending on the &lt;code&gt;Promises&lt;/code&gt;' state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;Using our loader is fairly simple, we just need to pass our &lt;code&gt;Promises&lt;/code&gt; into the &lt;code&gt;load&lt;/code&gt; function and our loader will take care of the rest. Here's an example using &lt;code&gt;axios&lt;/code&gt; that dispatches two requests so that they get registered in our loader.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/todos`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/todos/1`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;That's it&lt;/strong&gt;, no more loading progress flicker!&lt;/p&gt;

&lt;p&gt;If you want to see how this feels in a browser, checkout a live example of the loader that implements a global page progress bar (and some extra stuff too) in this stackblitz &lt;a href="https://stackblitz.com/edit/vitejs-vite-yv9gg4?"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure you open this with a Chromium-based browser (e.g Chrome) and run &lt;code&gt;npm run dev&lt;/code&gt; on the console.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>ux</category>
    </item>
    <item>
      <title>The Basics of Web Application Testing</title>
      <author> QAble Testlab Private Limited</author>
      <pubDate>Wed, 29 Dec 2021 07:18:20 +0000</pubDate>
      <link>https://dev.to/qablehq/the-basics-of-web-application-testing-5ha5</link>
      <guid>https://dev.to/qablehq/the-basics-of-web-application-testing-5ha5</guid>
      <description>&lt;p&gt;The development of any application is incomplete without proper testing. Testing has its own cycle that precisely monitors the performance of any web application. Further, it uncovers all the bugs and increases the potential of an application.&lt;/p&gt;

&lt;p&gt;Also, quality testing assures the performance of an application and enables you to deliver a great customer experience. We all know, the ultimate aim behind any application is client engagement.&lt;/p&gt;

&lt;p&gt;client engagement is always dependent upon the performance of an application. Being a &lt;strong&gt;&lt;a href="https://www.qable.io/"&gt;leading software testing company in India&lt;/a&gt;&lt;/strong&gt;, QAble keeps exploring the concepts in order to make your web application more reliable and goal-oriented.&lt;/p&gt;

&lt;p&gt;In this series, you will get to know about the &lt;strong&gt;&lt;a href="https://www.qable.io/the-basics-of-web-application-testing/"&gt;basics of web application testing&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-web-application-testing"&gt;
  &lt;/a&gt;
  What is Web application testing?
&lt;/h2&gt;

&lt;p&gt;Either we say &lt;a href="https://www.qable.io/web-application-testing-service/"&gt;web application testing&lt;/a&gt; or website application testing, both are the same. Analyzing the performance of a web application as per the requirement document comes under web application testing.&lt;/p&gt;

&lt;p&gt;The QA team highlights the bugs and reports them to the concerned developers. Also, identification of bugs at the earlier stage is beneficial for the company and developers because it saves cost and time.&lt;/p&gt;

&lt;p&gt;It is the reason, QA team performs the testing module-wise. It means, as soon as the developer has finished a module, the testing team checks it immediately.&lt;/p&gt;

&lt;p&gt;If you ignore it, the minute issue raises big problems in the end, and if this bug comes during production, it will definitely take ten times more cost and effort. Hence, we always recommend following testing protocol in a disciplined way to assure the performance of your web application.&lt;/p&gt;

&lt;p&gt;Following each testing step comes under the basics of web application testing, and ignoring the same will lead you in the wrong way&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-application-testing-example"&gt;
  &lt;/a&gt;
  Web application testing example
&lt;/h3&gt;

&lt;p&gt;Testing needs technical knowledge along with an imaginary approach. As you know, investors make applications for audiences only. Hence, you are required to test an application on behalf of the users.&lt;/p&gt;

&lt;p&gt;They can click anywhere, and you need to cover the maximum possible scenarios. While testing a web application, always keep one thing in mind. Your majority of the users are non-technical, so you need to keep things simple.&lt;/p&gt;

&lt;p&gt;We can explore the concept through one &lt;strong&gt;&lt;a href="https://www.qable.io/web-application-testing-service/"&gt;web application testing example&lt;/a&gt;&lt;/strong&gt;. Suppose a web application has these elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Products Category&lt;/li&gt;
&lt;li&gt;Listing of Products&lt;/li&gt;
&lt;li&gt;Add to Cart&lt;/li&gt;
&lt;li&gt;Payment Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Testing Approaches:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To test the above-said application, you need to follow the pattern in a synchronized way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Firstly, check out the User-Interface (UI).&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check all the elements available on the screen such as scroll bar, font, text, font color, labels, description, description box, radio button (if available), etc.&lt;/li&gt;
&lt;li&gt;Also, check the display of all the icons, product images, price value, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Afterward, test if filters are performing properly or not?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As we know, the page has categories for the products, and it may be possible, the user tries to check the products category-wise, price-wise or popularity-wise, etc. Hence working of filters should be verified.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Result analysis&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once you have checked the UI and Filters, move to the logical part. Check whether the cart is showing the correct value or not. Verify the calculation accurately.&lt;/li&gt;
&lt;li&gt;You should check Payment Gateway under various scenarios.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;For example, after adding a product to the cart, what will happen if&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don’t make the final payment.&lt;/li&gt;
&lt;li&gt;He selects the option of COD.&lt;/li&gt;
&lt;li&gt;During online payment, his internet goes off.&lt;/li&gt;
&lt;li&gt;He makes the payment successfully.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope now you have some idea through this web application testing example. Also, these are some rough scenarios that should be followed while testing an application.&lt;/p&gt;

&lt;p&gt;Also, each application is different from others, hence the test cases vary based on the requirement of the web application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-application-testing-tools"&gt;
  &lt;/a&gt;
  Web application testing tools
&lt;/h3&gt;

&lt;p&gt;The era is too competitive, and everybody needs perfection. To meet the expectations technocrats keep launching new concepts. Nowadays, we have many excellent web application testing tools that have decreased the effort of manual testing by 90%.&lt;/p&gt;

&lt;p&gt;Means, can you imagine, just before a few years, a simple module takes many days to test, and with these automation testing concepts, we can test the complex application quickly. It is a technology-driven era, and we all should take its benefits.&lt;/p&gt;

&lt;p&gt;Let’s have a look at the leading web application testing tools and implement them in your upcoming project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selenium&lt;/li&gt;
&lt;li&gt;Ranorex&lt;/li&gt;
&lt;li&gt;TestComplete&lt;/li&gt;
&lt;li&gt;Watir&lt;/li&gt;
&lt;li&gt;Katalon Studio&lt;/li&gt;
&lt;li&gt;TestingWhiz&lt;/li&gt;
&lt;li&gt;HPE Unified Functional Testing (HP – UFT formerly QTP)&lt;/li&gt;
&lt;li&gt;Tosca Testsuite&lt;/li&gt;
&lt;li&gt;Telerik TestStudio&lt;/li&gt;
&lt;li&gt;Sahi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these testing tools are adopted worldwide as they have brought a revolution to the QA world. We are also a testing company in India, and we know the worth of web application testing tools.&lt;/p&gt;

&lt;p&gt;If you are looking for detailed information about these web testing tools, let us know.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#web-application-testing-checklist"&gt;
  &lt;/a&gt;
  Web application testing checklist
&lt;/h4&gt;

&lt;p&gt;A checklist is mandatory during testing. It keeps you assured of quality testing. Also, without checklists, the testers may forget any of the modules, etc.&lt;/p&gt;

&lt;p&gt;Here we are sharing an &lt;a href="https://www.qable.io/the-basics-of-web-application-testing/"&gt;effective web application testing checklist&lt;/a&gt; that will not only strengthen the testing process but also save your time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Focus on the minute errors:&lt;/strong&gt; Testing demands patience, and one should never dare to perform in a hurry because the consequences can be dangerous.&lt;/p&gt;

&lt;p&gt;Take your time to check out the minor errors with full conviction because this is something testers, miss. Even check out the typo errors and ask the concerned team member to fix the same. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Verify spam links on the website:&lt;/strong&gt; Being a user, you must know, the spam links irritate a user the most. We immediately leave the website if we see spam links. Hence always secure the website from spamming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Analyze the usability of a website:&lt;/strong&gt; The usability of a website matters a lot because the conversion rate and quality of SEO depend on it. Always check the image optimization, call-to-action activity, user experience, login process, login credentials, user role, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Navigation process testing:&lt;/strong&gt; A web application has multiple pages, and users navigate frequently between them. Testers should check each navigation process from home to the thank you page because users have infinite options to roam on the website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Mobile responsiveness:&lt;/strong&gt; The website should be properly visible across all mobile devices. It is the mobile era, and the presence of your website on mobile devices should be accurate. Check its compatibility on Android, iOS, Windows devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Browser compatibility:&lt;/strong&gt; QA team must check the performance of a website across all possible web and mobile browsers like Chrome, Mozilla, Safari, IE, etc. We don’t know the user’s browser hence testing the website across all the platforms becomes mandatory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Loading Speed of a Website:&lt;/strong&gt; This we all have experienced for sure. For a website that takes too much time to load, we close them instantly. As we have said earlier, the present era is too competitive, and users have 100 more options.&lt;/p&gt;

&lt;p&gt;Hence always keep your website prompt so that your traffic could be yours only.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h5&gt;

&lt;p&gt;These are the basics of web application testing. Following the activities will definitely make you a reliable service provider for sure. QAble is the fastest-growing &lt;strong&gt;&lt;a href="https://www.qable.io/"&gt;QA company in Ahmedabad, India&lt;/a&gt;&lt;/strong&gt;. If you have any concerns or doubts, feel free to catch us.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>career</category>
      <category>discuss</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Public Solving: Let it snow</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 29 Dec 2021 07:16:46 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/public-solving-let-it-snow-29ik</link>
      <guid>https://dev.to/dailydevtips1/public-solving-let-it-snow-29ik</guid>
      <description>&lt;p&gt;Today the elves asked us to make some snow animations!&lt;br&gt;
This is a pretty exciting task as we have to get out our creative hats.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/devadvent/puzzle-19"&gt;You can find the complete puzzle here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far I've done some &lt;a href="https://daily-dev-tips.com/posts/happy-birthday-confetti-animation/"&gt;confetti in CSS&lt;/a&gt;, and an &lt;a href="https://daily-dev-tips.com/posts/css-animated-snake/"&gt;animated snake&lt;/a&gt;.&lt;br&gt;
Today we can add animated snow to the list.&lt;/p&gt;

&lt;p&gt;We are free to make it in any way we want.&lt;/p&gt;

&lt;p&gt;My results looks like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/gOGRzJq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-a-solution"&gt;
  &lt;/a&gt;
  Thinking about a solution
&lt;/h2&gt;

&lt;p&gt;I'm right away thinking in the lines of the CSS confetti I made, where we repeat 50 divs and use CSS to randomize some elements of every snowflake.&lt;/p&gt;

&lt;p&gt;The things I want to randomize:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Size of the snowflake&lt;/li&gt;
&lt;li&gt;Position left to right on the screen&lt;/li&gt;
&lt;li&gt;Animation speed and delay&lt;/li&gt;
&lt;li&gt;Falling animation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This would be the easiest to use SASS, which isn't mentioned as a no-go, so we'll be implementing that.&lt;/p&gt;

&lt;p&gt;For the creation of 50 divs, we could use &lt;code&gt;pug&lt;/code&gt;, but I inject them through JavaScript.&lt;/p&gt;

&lt;p&gt;Let me guide you through this process step by step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-animated-snow-in-javascript"&gt;
  &lt;/a&gt;
  Making animated snow in JavaScript
&lt;/h2&gt;

&lt;p&gt;First, we need to add our 50 divs into the main container.&lt;br&gt;
This main container already exists and looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"snow"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can fetch this element in our provided JavaScript file by using the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snowContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.snow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll need to create a loop that runs 50 times and adds a new element into this one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snowFlake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;snowFlake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snowflake&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;snowContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snowFlake&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;forEach&lt;/code&gt; hack is a simple way to generate x looped lines.&lt;br&gt;
We then use the &lt;code&gt;createElement&lt;/code&gt; function to create a new div and add the &lt;code&gt;snowflake&lt;/code&gt; class.&lt;br&gt;
After which, we add out to our container element.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#enable-scss-in-vite"&gt;
  &lt;/a&gt;
  Enable SCSS in Vite
&lt;/h3&gt;

&lt;p&gt;Now that we have these 50 divs in the viewport, we need to change the default CSS import to work with SASS files.&lt;/p&gt;

&lt;p&gt;Luckily for us, Vite already supports this out of the box. We just need to install the preprocessor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; sass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can change our file from &lt;code&gt;style.css&lt;/code&gt; to &lt;code&gt;style.scss&lt;/code&gt;.&lt;br&gt;
And modify the import in the &lt;code&gt;main.js&lt;/code&gt; to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./style.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right, we can now leverage the massive powers of SCSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-the-snowflake-elements"&gt;
  &lt;/a&gt;
  Styling the snowflake elements
&lt;/h3&gt;

&lt;p&gt;There are some elements to our snowflake that never really change.&lt;br&gt;
We can style those in a general fashion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.snowflake&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-5vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This sets a basic viewport-based snowflake.&lt;br&gt;
It will start outside of the viewport on the negative top side.&lt;/p&gt;

&lt;p&gt;Then we want to create a loop to add our differences to each individual snowflake.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@for&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.snowflake&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;random(100)&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;snowfall&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;10&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="err"&gt;random(10)&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;linear&lt;/span&gt; &lt;span class="nt"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;animation-delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;random(15)&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we loop 50 times, and for each of the snowflake, we set the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Random size: between &lt;code&gt;0.1vw&lt;/code&gt; and &lt;code&gt;1vw&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The left position 0-100% of the viewport width&lt;/li&gt;
&lt;li&gt;The animation time and a custom delay, so they don't all fall at the same time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The animation looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;snowfall&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110vh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we get the random flakes falling down, but they fall straight down, so maybe we should add a slight offset to mix things up.&lt;/p&gt;

&lt;p&gt;To achieve this, we need a horizontal start and endpoint.&lt;br&gt;
This should be a random number based on a percentage of the viewport's width.&lt;br&gt;
As we don't want the snowflakes to fall across the whole screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;--horizontal-start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;random(20)&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;--horizontal-end&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;random(20)&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, we can modify our animation to start and end on these values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;snowfall&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--horizontal-start&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--horizontal-end&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;110vh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, my version of CSS-based animated snow ❄️.&lt;/p&gt;

&lt;p&gt;I would be delighted to see other people's snow animations, as some are wizards with CSS 👀.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>PHP deployment to SSH server using Github action and bash script</title>
      <author>es404020</author>
      <pubDate>Wed, 29 Dec 2021 07:04:15 +0000</pubDate>
      <link>https://dev.to/es404020/php-deployment-to-ssh-server-using-github-action-and-bash-script-58e</link>
      <guid>https://dev.to/es404020/php-deployment-to-ssh-server-using-github-action-and-bash-script-58e</guid>
      <description>&lt;p&gt;In this tutorial we would lean how to deploy our PHP code to a remote server using github action .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1.
&lt;/h2&gt;

&lt;p&gt;ssh into remote server by &lt;/p&gt;

&lt;p&gt;for Windows users use Power shell, while Mac users use Terminal.&lt;/p&gt;

&lt;p&gt;yyyy : username&lt;br&gt;
xxxx.xxxx.xxxx : Remote IP address&lt;br&gt;
-p :Reference to a port&lt;br&gt;
ZZZZ: port number &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;In the root directory on your linux server create a bash file and write into by using &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
touch phpdeploy.sh &amp;amp;&amp;amp; vi phpdeploy.sh&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;To start typing on the vi editor type press the "a" key and input the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "Deploying changes..."


cd /var/www/html

DIR="ECOMM"

if [ -d "$DIR" ]; then

  cd DIR
  echo "Pull update "
  git  pull 
fi

else 
 echo "Clone repo"
 git clone 
 https://username:password@github.com/username/projectname.git


fi

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To exit insert mode on vi editor press escape key followed by shift column and type wq(save and quite).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h2&gt;

&lt;p&gt;This is our final step, this involves creating our .github/main.yaml file in the root of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name:project name
on:
  push:
    branches: main
jobs:
  build-and-deploy:
    name: Build and deploy next site
    runs-on: ubuntu-latest
    steps:
        - name: copy file via ssh key
        uses: appleboy/scp-action@master
        env:
          HOST:  XXXXXXX
          PORT:  XXXXX
          USERNAME:  XXXXX
          PASSWORD: XXXXXX
          command_timeout: 100m
          script: sh phpdeploy.sh

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For every time your code is merger to "main" branch  the yaml file above would execute.Thanks for reading.&lt;/p&gt;

</description>
      <category>php</category>
      <category>github</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Weekly web development resources #102</title>
      <author>Vincent Will</author>
      <pubDate>Wed, 29 Dec 2021 07:00:42 +0000</pubDate>
      <link>https://dev.to/vincenius/weekly-web-development-resources-102-2n86</link>
      <guid>https://dev.to/vincenius/weekly-web-development-resources-102-2n86</guid>
      <description>

&lt;h2&gt;
  &lt;a href="#alternate-column-scroll-animation"&gt;
  &lt;/a&gt;
  &lt;a href="https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/"&gt;Alternate Column Scroll Animation &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ErlkUnTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/column-layout.jpg" alt="Alternate Column Scroll Animation " width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
A grid layout with columns that scroll in opposite directions and a content preview animation.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#colorhuddle"&gt;
  &lt;/a&gt;
  &lt;a href="https://colorhuddle.co/"&gt;ColorHuddle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://colorhuddle.co/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QFgAnKIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/colorhuddle.jpg" alt="ColorHuddle" width="880" height="462"&gt;&lt;/a&gt;&lt;br&gt;
A collection of color palettes on which you can easily copy the hex codes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#alternativefrontends"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/mendel5/alternative-front-ends"&gt;alternative-front-ends&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/mendel5/alternative-front-ends"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bBdN2p9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/frontends.jpg" alt="alternative-front-ends" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
Overview of alternative open source front-ends for popular internet platforms (e.g. YouTube, Twitter, etc.)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vitest"&gt;
  &lt;/a&gt;
  &lt;a href="https://vitest.dev/"&gt;Vitest&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://vitest.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4pIOGMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/vitest.jpg" alt="Vitest" width="880" height="461"&gt;&lt;/a&gt;&lt;br&gt;
A  fast unit test framework powered by Vite.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#intab-resources"&gt;
  &lt;/a&gt;
  &lt;a href="https://intab.io/resources/"&gt;Intab Resources&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://intab.io/resources/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymD3JMQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/devbox.jpg" alt="Intab Resources" width="880" height="527"&gt;&lt;/a&gt;&lt;br&gt;
A curated list of 84+ web development resources.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-react-context-effectively"&gt;
  &lt;/a&gt;
  &lt;a href="https://kentcdodds.com/blog/how-to-use-react-context-effectively"&gt;How to use React Context effectively&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://kentcdodds.com/blog/how-to-use-react-context-effectively"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wnAfecpm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/react-context.jpg" alt="How to use React Context effectively" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
An interesting article on React Context by Kent C. Dodds.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#deploy-a-gmaillike-email-server"&gt;
  &lt;/a&gt;
  &lt;a href="https://andycallaghan.com/posts/deploy-a-gmail-like-email-server-in-30-minutes/"&gt;Deploy a Gmail-like email server&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://andycallaghan.com/posts/deploy-a-gmail-like-email-server-in-30-minutes/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---vPuYVqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/gmail.jpg" alt="Deploy a Gmail-like email server" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
An article by Andy Callaghan on how to run your own email infrastructure.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#blackmagic"&gt;
  &lt;/a&gt;
  &lt;a href="https://blackmagic.so/"&gt;BlackMagic&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blackmagic.so/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXNl7Xbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/blackmagic.jpg" alt="BlackMagic" width="880" height="461"&gt;&lt;/a&gt;&lt;br&gt;
A browser plugin to enhance your Twitter experience.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#coding-fonts"&gt;
  &lt;/a&gt;
  &lt;a href="https://coding-fonts.css-tricks.com/"&gt;Coding Fonts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://coding-fonts.css-tricks.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O7lewHiM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/coding-fonts.jpg" alt="Coding Fonts" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
A collection of coding fonts with infos about designers, character charts, features, and more.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bangleio"&gt;
  &lt;/a&gt;
  &lt;a href="https://bangle.io/"&gt;Bangle.io&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://bangle.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ppYs42W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/bangle.jpg" alt="Bangle.io" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
A powerful note taking web app that works on top of your locally saved Markdown files. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#icon-shelf"&gt;
  &lt;/a&gt;
  &lt;a href="//An%20icon%20manager%20for%20developers%20to%20have%20all%20icons%20in%20one%20place,%20easily%20copyable%20as%20code."&gt;Icon Shelf&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://icon-shelf.github.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-lftyMh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/icon-shelf.jpg" alt="Icon Shelf" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
An icon manager for developers to have all icons in one place, easily copyable as code.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#github-repositories"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/denicmarko/status/1475803138498207746"&gt;GitHub repositories&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/denicmarko/status/1475803138498207746"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oGsr5GYF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/github-repos.jpg" alt="GitHub repositories" width="880" height="498"&gt;&lt;/a&gt;&lt;br&gt;
A nice Twitter thread with GitHub repositories to improve your programming skills.&lt;/p&gt;




&lt;p&gt;To see all the weeklies check: &lt;a href="https://wweb.dev/weekly"&gt;wweb.dev/weekly&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>weekly</category>
    </item>
    <item>
      <title>Why I'm excited about web3.0</title>
      <author>Eda</author>
      <pubDate>Wed, 29 Dec 2021 06:59:04 +0000</pubDate>
      <link>https://dev.to/edatweets_/why-im-excited-about-web30-1i94</link>
      <guid>https://dev.to/edatweets_/why-im-excited-about-web30-1i94</guid>
      <description>&lt;p&gt;You may have heard of web3. It made quite the buzz this year; it seems like people either love it or hate it. Honestly, I didn't know what web3 was until I somehow ended up in the web3 world itself. I didn't even know that the traditional tech world, which I am in, is called the web2 world (ps: no one calls it web2 there).&lt;/p&gt;

&lt;p&gt;After months of experimenting, learning and building in the web3 world, I decided it's time to explain how I see web3, why I'm excited about it, alongside some of the challenges.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-background"&gt;
  &lt;/a&gt;
  The background
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-even-is-web1-and-web2"&gt;
  &lt;/a&gt;
  What even is web1 and web2?
&lt;/h2&gt;

&lt;p&gt;To understand web3, we first need to understand the evolution of the web. The web has evolved a lot since it got into our lives: web1, web2 and web3 as terms to describe the different eras.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Web1&lt;/strong&gt; is the first web era, also known as the &lt;strong&gt;read-only web&lt;/strong&gt;. Web1 roughly covers the years between 1990-2005. During this period, users were mainly consumers of the technology—an era when static websites were a thing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then came &lt;strong&gt;web2&lt;/strong&gt;. Web2, the &lt;strong&gt;read-write web&lt;/strong&gt;, started around 2005 and is mainly used today. The web became a place where anyone can create content. It became a new collaborative and interactive environment. Social media has been a significant catalyst for web2. It's never been easier to upload a cat photo to Instagram, celebrate birthdays from Facebook and chat via Facetime.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, it went from only super shady coders doing something on web1 to making it so easy that now everyone can easily use web2. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here's a great intro video for the eras of the web by Whiteboard Crypto -&lt;a href="https://www.youtube.com/watch?v=nHhAEkG1y2U&amp;amp;ab_channel=WhiteboardCrypto"&gt;What is Web 3.0? (Explained with Animations)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-issues-with-web2"&gt;
  &lt;/a&gt;
  What are the issues with web2?
&lt;/h2&gt;

&lt;p&gt;Web2 is &lt;strong&gt;highly centralized&lt;/strong&gt;. In web2, large companies own servers that provide messaging, searching, storing etc. These companies have complete control and ownership over the services they provide.&lt;/p&gt;

&lt;p&gt;You need to agree to the terms and services to use the platforms. This makes sense as the companies pay to operate these servers and provide you with certain services. That been said, with every term and condition agreement, we &lt;strong&gt;give the ownership and control of our data&lt;/strong&gt;. Companies use this data to monetize their platform; it's fair to say that many large companies solely exist to collect data. Not to get into many buzzwords, but this is also called the &lt;a href="https://en.wikipedia.org/wiki/Data_economy"&gt;&lt;strong&gt;data economy&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Aside from the issues with companies using and selling our data, these entities are the &lt;strong&gt;primary targets for hackers&lt;/strong&gt;. Cyberattacks and data breaches are inevitable when there is a single point of failure.&lt;/p&gt;

&lt;p&gt;Last but not least is the &lt;strong&gt;control that the centralized cooperations&lt;/strong&gt; have. They can change the product and the features anytime, affecting others using their platforms. Companies also have the power to censor and block any account.&lt;/p&gt;

&lt;p&gt;In this environment, we see web3 emerging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-i-get-into-web3"&gt;
  &lt;/a&gt;
  How did I get into web3?
&lt;/h2&gt;

&lt;p&gt;Before moving on to what web3 is, I want to explain how I ended up here. Because quite honestly, it wasn't due to the issues in the web2 world. I got in as an investor (sounds cooler than just saying money), but I saw all the prices going up and tried to give it a go. You can read more about how I got into web3 in this &lt;a href="https://eda.hashnode.dev/my-web3-journey-day-50-of-100daysofweb3"&gt;post&lt;/a&gt;. In short, after getting in for the money, I fell in love with the technology and community. I started to learn, build, contribute, and that's how my web3 journey started.&lt;/p&gt;

&lt;p&gt;The way I see it is that there are these problems in web2, but there's no denying that it's a working system and has great benefits. The disadvantages feel like something most people accept without diving deep when using web2 platforms. People love to use Instagram, TikTok, Google, Twitter etc. I did too, but &lt;strong&gt;once I learned that an alternative exists, I started to dig deeper and ask interesting questions; that was a turning point for me.&lt;/strong&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#web3"&gt;
  &lt;/a&gt;
  Web3
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-web3"&gt;
  &lt;/a&gt;
  What is web3?
&lt;/h2&gt;

&lt;p&gt;Web3 is mainly described as &lt;strong&gt;the decentralized web&lt;/strong&gt;; it's still a term under construction.&lt;/p&gt;

&lt;p&gt;Here is a more detailed definition that I enjoyed from &lt;a href="https://www.psl.com/feed-posts/web3-engineer-take"&gt;this article&lt;/a&gt; by Dave Peck &amp;amp; the PSL Team:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Web3” is the name* given to a suite of peer-to-peer technologies — particularly blockchains and distributed filesystems (like IPFS)— that are used to build modern “decentralized apps”, or dApps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essentially it's &lt;strong&gt;a group of technologies that are all decentralized and used to create decentralized applications.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This means that in web3, there isn't any single company in control but instead individual contributors that own and control the underlying technology stack. So basically, now service providers and users become the same person. Decentralization takes away the power from a single entity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-would-anyone-want-to-become-a-service-provider"&gt;
  &lt;/a&gt;
  Why would anyone want to become a service provider?
&lt;/h2&gt;

&lt;p&gt;Now, this is where &lt;strong&gt;cryptocurrencies&lt;/strong&gt; come into play.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cryptocurrencies are the economic incentives given to network contributors&lt;/strong&gt; (aka service providers). Each contributor provides resources to the network and gets rewarded in cryptocurrencies. Anyone can become a service provider, like you and me. &lt;/p&gt;

&lt;p&gt;Consumers pay with cryptocurrencies to use the services. So it's a &lt;strong&gt;different economic relationship from the traditional web world that we know&lt;/strong&gt;. &lt;em&gt;For example, in web2, a user might pay AWS or Microsoft for cloud services; in web3, the money goes to the network participants.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is value for both the creator and the consumer of the network. &lt;strong&gt;It's a relationship based on the protocol rules without any entity in between.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-this-blockchain-thing"&gt;
  &lt;/a&gt;
  What about this "blockchain" thing?
&lt;/h2&gt;

&lt;p&gt;Today we mainly see the use of &lt;strong&gt;decentralized blockchain technology&lt;/strong&gt; for building web3. &lt;/p&gt;

&lt;p&gt;Now two important notes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A blockchain does not have to be decentralized. I mostly see people take decentralization when they refer to blockchain technology. However, blockchain does not imply decentralization.&lt;/li&gt;
&lt;li&gt;Web3 does not have to use blockchain technology. In the context of Ethereum, that is the technology used. However, keep in mind that web3 and blockchain are not the same things.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, &lt;strong&gt;blockchain is a shared ledger&lt;/strong&gt; where each transaction is recorded and shared between the participants. Instead of having a central location for information, the information is shared among multiple computers on the network.  &lt;/p&gt;

&lt;p&gt;There are different layers to the web3 technology stack—which we will not cover in this post. Instead, here's a great &lt;a href="https://edgeandnode.com/blog/defining-the-web3-stack"&gt;post&lt;/a&gt; by Nader that I'd highly recommend if you'd like to dive deeper into the tech stack. &lt;/p&gt;

&lt;p&gt;Essentially, in web3, there isn't any person or marketplace in the middle, but instead, &lt;strong&gt;there are protocols governed by network contributors which have economic incentives to participate.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-am-i-excited-about-web3"&gt;
  &lt;/a&gt;
  Why am I excited about web3?
&lt;/h2&gt;

&lt;p&gt;Here are what I'm most excited for:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Individual ownership and control&lt;/strong&gt;: people can own and control what they create on web3. For example, you can have your self-sovereign identity without relying on any identity provider or you could create a blog post on a user-owned blogging platform where the content is yours.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://academy.binance.com/en/glossary/trustless"&gt;&lt;strong&gt;Trustless&lt;/strong&gt;&lt;/a&gt;: the web2 world is based on trust. We trust the centralized cooperations to provide services and give them control over our data. It's a single point of control and thus trust, which creates a massive power imbalance. Instead, in web3, there are protocols that the users can directly interact with; there isn't any marketplace in between. Users do not need to trust anyone in the middle to utilize the services.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Open and Global Ecosystem&lt;/strong&gt;:  The services and protocol are global and available to everyone regardless of location, age, sex etc. Every single contributor has a specific economic incentive to participate. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Boost of Innovation&lt;/strong&gt;: advertising is the dominant revenue model for the web that we know of today. Much time and energy is spent on advertising and learning the consumer better to show them the correct clothing item or even certain news. Alongside this, the boundaries of the web2 world are in some ways defined and limited. In web3, there is much room to explore and experiment, it raises many interesting questions, and people can try new things. I'm amazed when I hear about what some projects are trying to do. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you may be asking why I did not mention decentralization here. The reason being is that these properties are only possible with decentralization, so it's not the goal itself but the core component to get there. &lt;/p&gt;

&lt;p&gt;The more people contribute, the more decentralized the underlying technology becomes. Recall that this technology is very new, so we yet need to understand the degree of decentralization and how to distribute cryptocurrencies in the best way. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-the-cons-of-web3"&gt;
  &lt;/a&gt;
  What about the cons of web3?
&lt;/h2&gt;

&lt;p&gt;Here are some of the challenges I see for web3:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Regulations&lt;/strong&gt;: there's no regulatory clarity. Most of the space is experimental without any guidelines. This creates an uncertain environment for everyone participating.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Language&lt;/strong&gt;: There seems to be an invisible barrier of entry; at least, that was the case in my experience. There are too many new terminology and abbreviations. Alongside these, the false and overly-optimistic information make it complicated to understand. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Monetary Incentives&lt;/strong&gt;: Custodial wallets are growing faster than non-custodial; more people seem to be interested in the money than the tech. This does not speak well on the promise of decentralization. Additionally, there are "maxi's" (people who only like their coins and tokens, hate all the others), which creates a lot of intense discussions in the space. It's hard to tell if people believe in a particular tech or if it's their monetary incentives.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Narrative&lt;/strong&gt;: there are a lot of opposing views on crypto. I constantly find myself explaining why I'm interested in the technology and then get the response: "but bitcoin is used for illegal activities". It takes time to change this, and we need concrete killer-use cases to do so. &lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Centralized platforms have been the standard for so long that it is hard to imagine otherwise. However, there's no denying the issues of web2. Web3 is reshaping the web, redesigning at its core, and I'm super excited to see what it will bring!&lt;/p&gt;

&lt;p&gt;This post is my take on web3, and I'm sure there's more to learn as we see web3 evolving. &lt;/p&gt;

&lt;p&gt;Thanks for reading! If you have any questions or comments, drop them below or reach out to me from &lt;a href="https://twitter.com/edatweets_"&gt;Twitter&lt;/a&gt;. I'd love to hear from you!&lt;/p&gt;

</description>
      <category>web3</category>
      <category>beginners</category>
      <category>blockchain</category>
      <category>ethereum</category>
    </item>
    <item>
      <title>My New Python library</title>
      <author>Prince Verma</author>
      <pubDate>Wed, 29 Dec 2021 06:46:38 +0000</pubDate>
      <link>https://dev.to/vermaprince123/my-new-python-library-12h6</link>
      <guid>https://dev.to/vermaprince123/my-new-python-library-12h6</guid>
      <description>&lt;p&gt;Check it out my new library :- Share your views&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zvamI2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2f4s098r1jf40d0slhz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zvamI2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2f4s098r1jf40d0slhz.PNG" alt="Image description" width="880" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to choose a MongoDB shard key</title>
      <author>ChunTing Wu</author>
      <pubDate>Wed, 29 Dec 2021 06:40:36 +0000</pubDate>
      <link>https://dev.to/lazypro/how-to-choose-a-mongodb-shard-key-3c7d</link>
      <guid>https://dev.to/lazypro/how-to-choose-a-mongodb-shard-key-3c7d</guid>
      <description>&lt;p&gt;In this article, I will show you what is the ideal pattern of a MongoDB shard key. Although there is a good page on the &lt;a href="https://docs.mongodb.com/manual/core/sharding-choose-a-shard-key/"&gt;MongoDB official manual&lt;/a&gt;, it still not provides a formula to choose a shard key.&lt;/p&gt;

&lt;p&gt;TL;DR&lt;/p&gt;

&lt;p&gt;The formula is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{coarselyAscending : 1, search : 1}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will explain the reason in the following sections.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-scenario"&gt;
  &lt;/a&gt;
  User Scenario
&lt;/h2&gt;

&lt;p&gt;In order to well-describe the formula, I will use an example to illustrate the scenario. There is a collection within application logs, and the format is like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"4df16cf0-2699-410f-a07e-ca0bc3d3e153"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"high"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1635132899&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Database crash"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each log has the same template, &lt;code&gt;id&lt;/code&gt; is a &lt;code&gt;UUID&lt;/code&gt;, &lt;code&gt;ts&lt;/code&gt; is an epoch, and both &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;level&lt;/code&gt; are a finite enumeration. I will leverage the terminologies in the official manual to explain some incorrect designs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#low-cardinality-shard-key"&gt;
  &lt;/a&gt;
  Low Cardinality Shard Key
&lt;/h2&gt;

&lt;p&gt;From the mentioned example, we usually choose &lt;code&gt;type&lt;/code&gt; at first sight. Because, we always use &lt;code&gt;type&lt;/code&gt; to identify the logging scope. However, if we choose the &lt;code&gt;type&lt;/code&gt; as the shard key, it must encounter a hot-spot problem. Hot-spot problem means there is a shard size much larger than others. For example, there are 3 shards corresponding to 3 types of logs, app, web and admin, the most popular user is on app. Therefore, the shard size with app log will be very large. Furthermore, due to the low-cardinality shard key, the shards cannot be rebalanced anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ascending-shard-key"&gt;
  &lt;/a&gt;
  Ascending Shard Key
&lt;/h2&gt;

&lt;p&gt;Alright, if &lt;code&gt;type&lt;/code&gt; cannot be the shard key, how about &lt;code&gt;ts&lt;/code&gt;? We always search for the most recently logs, and &lt;code&gt;ts&lt;/code&gt; are fully uniform distributed, it should be a proper choice. Actually, no. When the shard key is an ascending data, it works at the very first time. Nevertheless, it will result in a performance impact soon. The reason is &lt;code&gt;ts&lt;/code&gt; is always ascending, so the data will always insert into the last shard. The last shard will be rebalanced frequently. Worst of all, the query pattern used to search from the last shard as well, i.e. the search will often be the rebalance period.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random-shard-key"&gt;
  &lt;/a&gt;
  Random Shard Key
&lt;/h2&gt;

&lt;p&gt;Based on the previous sections, we know &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;ts&lt;/code&gt; all are not good shard key candidates. Thus, we can use &lt;code&gt;id&lt;/code&gt; as the shard key, so that we can spread the data evenly without frequent changes. This approach will work fine when the data set is limited. After the data set becomes huge, the overhead of rebalance will be very high. Because the data is random, MongoDB has to random access the data while rebalancing. On the other hand, if the data is ascending, MongoDB can retrieve the data chunks via the sequential access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;A good MongoDB shard key should be like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{coarselyAscending : 1, search : 1}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to prevent the random access, we choose the coarsely ascending data be the former. This pick also won't meet the problem of frequently rebalancing. And we put a search pattern on the latter to ensure the related data can be located at the same shard as much as possible. In our example, I will not only choose the shard key but also redesign our search pattern. The &lt;code&gt;ts&lt;/code&gt; is fine to address the log at the specific time; however, it is a bit inefficient for a time range query like from 3 month ago til now. Hence, I will add one more key, &lt;code&gt;month&lt;/code&gt;, in the document, so we therefore can leverage the MongoDB date type and make a proper shard key. The collection will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4df16cf0-2699-410f-a07e-ca0bc3d3e153&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;level&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;high&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1635132899&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Database crash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;month&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// only month&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, the shard key is &lt;code&gt;{month: 1, type: 1}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The key point here is we use &lt;code&gt;month&lt;/code&gt; instead of &lt;code&gt;ts&lt;/code&gt; to avoid frequently rebalaning. The &lt;code&gt;month&lt;/code&gt; is not made just for the shard key; on the contrary, we also use it for our search pattern. Instead of calculating the relationship between timestamp and the date, we can use &lt;code&gt;getMonth&lt;/code&gt; to find results faster. For instance,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//1 month ago&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;$gte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;}});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To sum up, this article provides the concepts of designing MongoDB shard key. You might not have a coarsely ascending data so, but you can refer to the concepts and find out a proper key design for your applications.&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>distributedsystems</category>
      <category>bigdata</category>
    </item>
  </channel>
</rss>
