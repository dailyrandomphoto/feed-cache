<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>3 Ways to Sync a Forked Repository on GitHub AUTOMATICALLY</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Thu, 16 Dec 2021 06:09:48 +0000</pubDate>
      <link>https://dev.to/n3wt0n/3-ways-to-sync-a-forked-repository-on-github-automatically-cfd</link>
      <guid>https://dev.to/n3wt0n/3-ways-to-sync-a-forked-repository-on-github-automatically-cfd</guid>
      <description>&lt;p&gt;Keeping your forked repo in sync with the upstream one is something tedious, and to do it usually we have to use the command line and some git command. &lt;/p&gt;

&lt;p&gt;But today I have for you &lt;strong&gt;3 ways you can make that simpler&lt;/strong&gt; and much less time consuming, and even synchronize them &lt;strong&gt;automatically&lt;/strong&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VOakLctEC2Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/VOakLctEC2Q"&gt;Link to the video: https://youtu.be/VOakLctEC2Q&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-sync-from-the-ui"&gt;
  &lt;/a&gt;
  1. Sync from the UI
&lt;/h3&gt;

&lt;p&gt;Right, so the first way you can easily synchronize your forked repo is using the feature GitHub has made recently available &lt;strong&gt;directly in the UI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can just go to the main page of your repo, in the Code Section, and next to the indicator that says if your branch is ahead or behind the source repo, you now have this "Fetch Upstream" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0T_YaKl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/863ca9tr81krdu01r2ag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0T_YaKl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/863ca9tr81krdu01r2ag.png" alt="Automatic Fork Sync UI" width="880" height="242"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking on that you have the possibility to &lt;strong&gt;compare&lt;/strong&gt; the changes made in the source repo with the ones made in your forked repo, and also to &lt;strong&gt;automatically fetch and merge&lt;/strong&gt; them into your repo.&lt;/p&gt;

&lt;p&gt;If the changes from the upstream repository cause conflicts, GitHub will prompt you to create a pull request to resolve the conflicts.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/VOakLctEC2Q?t=26"&gt;Watch the whole demo here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#2-the-new-api"&gt;
  &lt;/a&gt;
  2. The new API
&lt;/h3&gt;

&lt;p&gt;Next method I have for you to synchronize your forked repo with the upstream one requires a little more setup, but then it will allow you to keep the repos in sync &lt;strong&gt;automatically&lt;/strong&gt;. I'm talking about using the new GitHub &lt;code&gt;merge-upstream&lt;/code&gt; API. This way is much more flexible than the previous one. &lt;/p&gt;

&lt;p&gt;Using the API, in fact, you can start the synchronization from many different platforms: your CLI, an application you develop to apply governance to your repos, and so on so forth. And as such it will also enable you to automate the whole process, for example using a cron job or a scheduled operation.&lt;/p&gt;

&lt;p&gt;For this example I'm gonna use &lt;code&gt;curl&lt;/code&gt; to invoke the API.&lt;/p&gt;

&lt;p&gt;First thing to notice is that this will be a &lt;strong&gt;POST&lt;/strong&gt; operation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-X&lt;/span&gt; POST 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'd need to specify the &lt;em&gt;GitHub APIs version&lt;/em&gt; we are targeting, in this case let's use the v3. You need to pass that in a header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Accept: application/vnd.github.v3+json"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, &lt;strong&gt;authorization&lt;/strong&gt;. The &lt;code&gt;merge-upstream&lt;/code&gt; API requires authentication, of course otherwise everyone would be able to merge somebody else's repos :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Authorization: token YOUR_GITHUB_PAT"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since GitHub is deprecating the use of username and password for API authentication, I'm using a Personal Access Token instead. And this needs to be passed as a header as well.&lt;/p&gt;

&lt;p&gt;To know more about how you can authenticate to the GitHub's APIs, check &lt;a href="https://docs.github.com/en/rest/guides/getting-started-with-the-rest-api#authentication"&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And &lt;a href="https://youtu.be/SzrETQdGzBM"&gt;check this out&lt;/a&gt; to know how to create a PAT in GitHub.&lt;/p&gt;

&lt;p&gt;Then we need to pass the &lt;strong&gt;url of the API&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;https://api.github.com/repos/USER_OR_ORG/REPO_NAME/merge-upstream
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is pretty self-explanatory, you just need the name of your forked repo, and the username or organization name that owns it.&lt;/p&gt;

&lt;p&gt;Last step, we need to tell GitHub what &lt;strong&gt;branch&lt;/strong&gt; we want to synchronize with the upstream repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{"branch":"main"}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example I'm telling the API I want to sync the &lt;code&gt;main&lt;/code&gt; branch but you can specify any branch which is present in both the upstream and the forked repos.&lt;/p&gt;

&lt;p&gt;This is how the complete API call looks when invoked using &lt;code&gt;curl&lt;/code&gt;, using my user account &lt;code&gt;n3wt0n&lt;/code&gt; and the repo &lt;code&gt;openhack-devops-team&lt;/code&gt; which I've forked a while back from Microsoft:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Accept: application/vnd.github.v3+json"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Authorization: token PAT_REMOVED_FOR_SECURITY_REASONS"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  https://api.github.com/repos/n3wt0n/openhack-devops-team/merge-upstream &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{"branch":"main"}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything goes well, and the sync is &lt;strong&gt;successful&lt;/strong&gt;, we will see a message like &lt;code&gt;Status: 200 OK&lt;/code&gt; with a response which will give you all the details of the operation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Successfully fetched and fast-forwarded from upstream defunkt:main"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"merge_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"fast-forward"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"base_branch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"defunkt:main"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If instead there are &lt;strong&gt;conflicts&lt;/strong&gt;, the API will return &lt;code&gt;Status: 409 Conflict&lt;/code&gt; and you will need to solve the conflicts manually before merge.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/VOakLctEC2Q?t=64"&gt;Watch the whole demo here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3-using-github-actions"&gt;
  &lt;/a&gt;
  3. Using GitHub Actions
&lt;/h3&gt;

&lt;p&gt;The final method I have for you behind the scenes still uses the new API we have just seen, but it &lt;strong&gt;abstracts&lt;/strong&gt; it to the user making it much easier to use and to automate. So much so that I can say this is my favorite one, also because &lt;strong&gt;it uses GitHub Actions&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;There are just a few actions that allow you to sync your forked repos, but &lt;a href="https://github.com/marketplace/actions/sync-and-merge-upstream-repository-with-your-current-repository"&gt;this one&lt;/a&gt; from &lt;a href="https://github.com/dabreadman"&gt;dabreadman&lt;/a&gt; is my favorite because it allows you to use &lt;strong&gt;GITHUB_TOKEN&lt;/strong&gt; rather than your PAT.&lt;/p&gt;

&lt;p&gt;The action is &lt;strong&gt;fully configurable&lt;/strong&gt; but the most important parts are the following ones:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sync and merge upstream repository with your current repository&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dabreadman/sync-upstream-repo@v1.0.0.b&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# URL of gitHub public upstream repo&lt;/span&gt;
    &lt;span class="na"&gt;upstream_repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://github.com/actions/starter-workflows.git"&lt;/span&gt;
    &lt;span class="c1"&gt;# Branch to merge from upstream (defaults to downstream branch)&lt;/span&gt;
    &lt;span class="na"&gt;upstream_branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
    &lt;span class="c1"&gt;# Branch to merge into downstream&lt;/span&gt;
    &lt;span class="na"&gt;downstream_branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;
    &lt;span class="c1"&gt;# GitHub Bot token&lt;/span&gt;
    &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The actions fields are self-explanatory. The minimum information you need to pass to the action is the original (upstream) repo url you want to sync from, the branch in your forked repo you want to sync to, and the token.&lt;/p&gt;

&lt;p&gt;In my case I like to have this run on a schedule, so my repo should be always in sync with the upstream one (unless there are conflicts):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;13&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think it should be now clearer why this is my favorite way to sync a forked repo, and also why it's usually my recommendation.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/VOakLctEC2Q?t=428"&gt;Watch the whole demo here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Of course if you have to sync just once in a while, using the UI is more than enough. And if you have complex requirements for busy repos or custom apps the API is the way to go. &lt;/p&gt;

&lt;p&gt;But this last one using GitHub Actions is for me &lt;strong&gt;the sweet spot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below &lt;strong&gt;how you synchronize your forked repos&lt;/strong&gt; to their upstreams, and if are going to change now that we have this other options.&lt;/p&gt;

&lt;p&gt;Also, you may want to check out &lt;a href="https://youtu.be/msCWg2F4sck"&gt;this video here&lt;/a&gt;, where I talk about using GitHub Actions to &lt;strong&gt;automate everything&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üìß &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VOakLctEC2Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>fork</category>
      <category>devops</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>A Comprehensive Guide to Mockito in Flutter</title>
      <author>Aswin Gopinathan</author>
      <pubDate>Thu, 16 Dec 2021 05:40:04 +0000</pubDate>
      <link>https://dev.to/infiniteoverflow/a-comprehensive-guide-to-mockito-in-flutter-1od0</link>
      <guid>https://dev.to/infiniteoverflow/a-comprehensive-guide-to-mockito-in-flutter-1od0</guid>
      <description>&lt;p&gt;No one likes testing! Everyone thinks testing is a boring job. But trust me, testing a software is as important as developing a software.&lt;/p&gt;

&lt;p&gt;Imagine, if you spend days and months building your app and finally when it went live, the app started crashing. What if you had tested all the functionalities before making it live?&lt;/p&gt;

&lt;p&gt;So, testing is a very important phase of Software Development Life Cycle. Even if you hate it, you have to do it.&lt;/p&gt;

&lt;p&gt;But, in this article i will make sure you will end up liking the process of testing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xHcmHKxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/88/5d/7c/885d7c27467f1e976d0c873336facc24.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHcmHKxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/88/5d/7c/885d7c27467f1e976d0c873336facc24.gif" alt="Celebration" width="350" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, what are you gonna learn in this article?&lt;/p&gt;

&lt;p&gt;Just one thing - &lt;strong&gt;How to Unit test your code using Mockito!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before i begin, if you wanna read about Unit Testing, check out my latest tweet which talks about a basic introduction to Unit Testing in Flutter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15CV3I3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dh03h2i2gwl1e818c3o6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15CV3I3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dh03h2i2gwl1e818c3o6.png" alt="Tweet" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/gopinathanaswin/status/1470617070559711234?s=21"&gt;https://twitter.com/gopinathanaswin/status/1470617070559711234?s=21&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, lets get to the fun part. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-mockito"&gt;
  &lt;/a&gt;
  What is Mockito?
&lt;/h2&gt;

&lt;p&gt;Mockito is a package in Flutter that helps you create Mock Dependencies of classes while testing your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let me give you an example:&lt;/strong&gt;&lt;br&gt;
Imagine a feature that you are testing requires data to be fetched from an external DB such as Firebase/Supabase. &lt;br&gt;
When you are testing your code offline you cant possibly gather data from the DB right? Or even if you are online, you dont wanna wait for the actual data to return in order to test the app right?&lt;/p&gt;

&lt;p&gt;So, what will you do then?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VEgg5TkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/f2/6c/be/f26cbec6fb6c5d9bf65789e4ce69479b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VEgg5TkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/f2/6c/be/f26cbec6fb6c5d9bf65789e4ce69479b.jpg" alt="Joey Thinking" width="880" height="929"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use &lt;strong&gt;Mockito&lt;/strong&gt; to create a fake class which will use dummy data as input for your tests !!&lt;/p&gt;

&lt;p&gt;Before we get started with the code, lets add dependencies for two packages in pubspec.yaml :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dev_dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;mockito&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^5.0.10&lt;/span&gt;
  &lt;span class="na"&gt;build_runner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^2.1.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: I have added the packages in the &lt;code&gt;dev_dependencies&lt;/code&gt; section. This is because, we are not gonna use these packages in the actual application code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Also, the package versions may vary when you are reading this article. Do checkout &lt;a href="https://pub.dev/"&gt;pub.dev&lt;/a&gt; to get the latest versions.&lt;/p&gt;

&lt;p&gt;Let's create a new file &lt;code&gt;cat.dart&lt;/code&gt; in the &lt;code&gt;test&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Meow"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;eatFood&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;food&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;hungry&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chew&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Chewing..."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;hunt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;prey&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have used the example which is given in the official docs of mockito in pub.dev&lt;/p&gt;

&lt;p&gt;Next, create a file &lt;code&gt;cat_test.dart&lt;/code&gt; file which will contain all the codes to test the class.&lt;br&gt;
Add the following contents to the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:mockito/annotations.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'cat.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@GenerateMocks&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="n"&gt;Cat&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;@GenerateMocks([Cat])&lt;/code&gt; is used to create a Mock Class for our &lt;code&gt;Cat&lt;/code&gt; class. &lt;/p&gt;

&lt;p&gt;Now, head over to the terminal and type the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dart run build_runner build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate the mock file for us with the name &lt;code&gt;cat_test_mocks.dart&lt;/code&gt; which contains the &lt;code&gt;MockCat&lt;/code&gt; class which we are gonna use for our testing.&lt;/p&gt;

&lt;p&gt;Import this new file into our &lt;code&gt;cat_test.dart&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'cat_test.mocks.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, head over to the &lt;code&gt;main&lt;/code&gt; function and initialise an object for class &lt;code&gt;MockCat&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var cat = MockCat();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's verify some methods. But, what is verify in testing ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verify&lt;/strong&gt;: It means we are verifying a method if it was invoked in that particular scope or not.&lt;/p&gt;

&lt;p&gt;I will explain this better with an example. Append the following code inside the &lt;code&gt;main()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'verify sound'&lt;/span&gt;&lt;span class="o"&gt;,()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'meow'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have defined a test block that performs verify operation on the &lt;code&gt;sound()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The first line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'meow'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is known as &lt;strong&gt;Stubbing&lt;/strong&gt;. &lt;br&gt;
Oh come on! What is Stubbing now? I will explain this a bit later, but for now just imagine we have a method &lt;code&gt;sound()&lt;/code&gt;, that returns 'meow'.&lt;/p&gt;

&lt;p&gt;Now, the second line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we invoke the &lt;code&gt;sound()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Finally, the last line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we are verifying if the mentioned method with the given parameter list was invoked in this scope or not.&lt;/p&gt;

&lt;p&gt;So, this test will pass since it was invoked in line 2. But what if we write verify like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Bow'&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will fail, because the &lt;code&gt;sound()&lt;/code&gt; method was not invoked in this scope with a String parameter 'Bow'.&lt;/p&gt;

&lt;p&gt;So, this is how &lt;code&gt;verify&lt;/code&gt; works in mockito.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where is this helpful ?&lt;/strong&gt;&lt;br&gt;
This is helpful to know whether a method was invoked during the flow of a unit.&lt;br&gt;
&lt;strong&gt;For example&lt;/strong&gt;: Verify if the &lt;code&gt;validatePassword()&lt;/code&gt; method was called while creating a user.&lt;/p&gt;

&lt;p&gt;But, there are some more interesting variants of &lt;code&gt;verify&lt;/code&gt; known as &lt;code&gt;verifyInOrder()&lt;/code&gt;, &lt;code&gt;verifyNever()&lt;/code&gt;, and &lt;code&gt;verifyZeroInteractions()&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;verifyInOrder() takes in a list of methods, to verify if they were invoked in that particular order.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;verifyNever() takes in a method, to verify if it was never invoked.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;verifyZeroInteractions() takes in a mock object (not a method), to verify if that object was never called in the scope of the test.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, lets jump into &lt;strong&gt;Stubbing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Stubbing is the process of overriding the behaviour of a method belonging to the mock class instance.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Consider a method that returns 'Dart':&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getLang&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'Dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We stub the method to return 'Flutter' instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLang&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Flutter'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, no matter how many times you call the method &lt;code&gt;getLang()&lt;/code&gt;, it will always return 'Flutter' as opposed to its declaration in its class.&lt;/p&gt;

&lt;p&gt;This is helpful when you wanna test your methods for different return data.&lt;/p&gt;

&lt;p&gt;Let's consider our &lt;code&gt;MockCat&lt;/code&gt; class and test a stubbing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'stubbing'&lt;/span&gt;&lt;span class="o"&gt;,()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Flutter'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;'Flutter'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the normal flow &lt;code&gt;cat.sound()&lt;/code&gt; should return 'Meow', but after stubbing it will always return 'Flutter'.&lt;/p&gt;

&lt;p&gt;If a method invocation matches multiple stubs, the one which was declared last will be used. It is worth noting that stubbing and verifying only works on methods of a mocked class; in this case, an instance of &lt;code&gt;MockCat&lt;/code&gt; must be used, not an instance of &lt;code&gt;Cat&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practices-while-working-with-mockito"&gt;
  &lt;/a&gt;
  Best Practices while working with Mockito
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Whenever you make changes to the class that you are mocking, always re-generate the mock class using the build command that i mentioned above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always Stub your method before verifying it in a test block. Otherwise, it will return an error like the following:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnvKsx-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grcsdmtloiwvm1slfx44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnvKsx-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grcsdmtloiwvm1slfx44.png" alt="Image description" width="880" height="210"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Testing with real objects is preferred over testing with mocks - if you can construct a real instance for your tests, you should!&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you liked this article, dont forget to hit the like button and share it with your friends and colleagues.&lt;/p&gt;

&lt;p&gt;Follow me on Twitter &lt;a href="https://twitter.com/GopinathanAswin"&gt;@GopinathanAswin&lt;/a&gt; where i regularly share my learnings in Dart and Flutter üíô&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rynz1uuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m90v4tivz5xqzf51xu2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rynz1uuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m90v4tivz5xqzf51xu2n.png" alt="Image description" width="880" height="663"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>programming</category>
      <category>testing</category>
      <category>mockito</category>
    </item>
    <item>
      <title>Decomposing Composition</title>
      <author>Toby Parent</author>
      <pubDate>Thu, 16 Dec 2021 05:21:45 +0000</pubDate>
      <link>https://dev.to/parenttobias/decomposing-composition-9m7</link>
      <guid>https://dev.to/parenttobias/decomposing-composition-9m7</guid>
      <description>&lt;p&gt;Functional libraries like Ramda.js are great, and give us some very powerful, useful, simple functionality. But they‚Äôre the kind of thing you might not know you need, unless you know you need them.&lt;/p&gt;

&lt;p&gt;I‚Äôve been reading (well, okay, _devouring) &lt;a href="https://medium.com/u/c359511de780?source=post_page-----d06df9c0b8a-----------------------------------"&gt;Eric Elliott&lt;/a&gt;‚Äôs &lt;strong&gt;Composing Software&lt;/strong&gt; book (and before that, the series of blog posts). Powerful read, easy to understand, lot of meat under that skin. But it‚Äôs easy to get lost in there. Trying to understand both the what and why of function composition (and later, object composition) can be challenging.&lt;/p&gt;

&lt;p&gt;So I wanted to break it down into a step-by-step, and see if we can make more sense of this as an ‚Äúevolution of the idea.‚Äù&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-the-problem"&gt;
  &lt;/a&gt;
  Defining the Problem
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs take an absurd example, reversing a string. It‚Äôs a lesson we see in all sorts of introductory lessons, and the steps are pretty easy to follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;turn the string into an array of letters,&lt;/li&gt;
&lt;li&gt;reverse the array of letters,&lt;/li&gt;
&lt;li&gt;rejoin the reversed array back into a string,&lt;/li&gt;
&lt;li&gt;return the reversed (transformed) string.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Easy to follow, and easy to write. A perfect introduction to methods of core objects in javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reversedStringArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stringArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinedReversedStringArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reversedStringArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;joinedReversedStringArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we take each step of the problem, and do that thing. Each step is assigned to a variable because we can, and that variable is passed to the next step as its input. Easy to read, but kind of wasteful.&lt;/p&gt;

&lt;p&gt;Wasteful why? Because of &lt;em&gt;method chaining&lt;/em&gt;. When we call &lt;code&gt;String.prototype.split()&lt;/code&gt;, that returns an array, and we can chain directly onto that. The &lt;code&gt;Array.prototype.reverse()&lt;/code&gt; acts on an array and modifies it in place, returning the same array, and &lt;code&gt;Array.prototype.join()&lt;/code&gt; returns a string, which we are returning. So we can call each of those methods on their returned result, without needing the intermediary variables&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that does all four steps in one line. Beauty! Note the order of the functions being called there ‚Äî we &lt;code&gt;split&lt;/code&gt; the string, we &lt;code&gt;reverse&lt;/code&gt; the array, we &lt;code&gt;join&lt;/code&gt; the array.&lt;/p&gt;

&lt;p&gt;It is much shorter, and it reads very well. This is often the solution that we as mentors in online programming courses might point to as the cleanest and easiest solution, and it really works. And it &lt;em&gt;does&lt;/em&gt; get us closer to where I want us to be.&lt;/p&gt;

&lt;p&gt;But this? This is about &lt;em&gt;functional composition&lt;/em&gt;. We‚Äôve got a ways to go yet, but we‚Äôre closer. Let‚Äôs look at another way of doing much the same thing, see if that helps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prestep-3"&gt;
  &lt;/a&gt;
  Pre-Step 3
&lt;/h2&gt;

&lt;p&gt;While chaining is a great way to go, in terms of readability, it doesn‚Äôt really &lt;em&gt;compose&lt;/em&gt; well. We can‚Äôt build with chained methods like Lego blocks, snapping them together and rearranging as we like. To do that, we need to consider another way of passing data from one function to another.&lt;/p&gt;

&lt;p&gt;The pattern of what we‚Äôre about to do, in a mathematical sense, might look more like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// given functions f, g, and h, and a data point x:  &lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are taking value &lt;code&gt;x&lt;/code&gt;, pushing it into function &lt;code&gt;h&lt;/code&gt; (getting ‚Äúthe &lt;code&gt;h&lt;/code&gt; of &lt;code&gt;x&lt;/code&gt;‚Äù), and then taking the returned value from that and pushing it into &lt;code&gt;g&lt;/code&gt; (getting ‚Äúthe &lt;code&gt;g&lt;/code&gt; of &lt;code&gt;h&lt;/code&gt; of &lt;code&gt;x&lt;/code&gt;‚Äù), and then taking the returned evaluation from that and pushing it into &lt;code&gt;f&lt;/code&gt; (getting ‚Äúthe &lt;code&gt;f&lt;/code&gt; of &lt;code&gt;g&lt;/code&gt; of &lt;code&gt;h&lt;/code&gt; of &lt;code&gt;x&lt;/code&gt;‚Äù).&lt;/p&gt;

&lt;p&gt;It makes sense, but it hurts to think in &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; and &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; hurt my little button-head. Let‚Äôs make it a bit more concrete.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/***
 * for reference, this was the mathematical idea:
 *
 * return f(
 *         g(
 *           h(
 *             x  
 *           )
 *         )
 *       );
 ***/&lt;/span&gt;

&lt;span class="c1"&gt;// and the concrete example:&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="nx"&gt;string&lt;/span&gt;  
            &lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that is doing the same thing - it gets the "split of &lt;code&gt;string&lt;/code&gt;", passes that to get "reverse of (split of &lt;code&gt;string&lt;/code&gt;), then passes that out to get "join of reverse of split of &lt;code&gt;string&lt;/code&gt;." Sounds silly worded that way, but it's part of the mental model. Our function is composed of these steps, in this order.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// some utility functions, curried.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;splitOn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;splitString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;splitString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joinString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joinString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// partially-applied instances of our utilities&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
           &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
               &lt;span class="nx"&gt;string&lt;/span&gt;
             &lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is quite a bit more meat to this one, and it will require some explanation to grok fully what is going on.&lt;/p&gt;

&lt;p&gt;First, before we do the &lt;code&gt;reverseString&lt;/code&gt;, we want to turn those &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; methods into composable functions. We‚Äôll make some curried functions, because who doesn‚Äôt like abstraction?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;splitOn&lt;/code&gt; is an abstract wrapper for the &lt;code&gt;String.prototype.split&lt;/code&gt; method, taking as its first parameter the string on which we‚Äôll split.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;joinWith&lt;/code&gt; is an abstract wrapper for the &lt;code&gt;Array.protoype.join&lt;/code&gt; method, taking as its first parameter the string we‚Äôll use for our join.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reverse&lt;/code&gt; doesn‚Äôt take any parameters, but it turns &lt;code&gt;Array.prototype.reverse&lt;/code&gt; into a composable function in itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, within our &lt;code&gt;reverseString&lt;/code&gt;, the first step is to &lt;em&gt;partially apply&lt;/em&gt; those two abstract functions. We tell &lt;code&gt;split&lt;/code&gt; that it is a reference to &lt;code&gt;splitOn('')&lt;/code&gt;, we tell &lt;code&gt;join&lt;/code&gt; that it is a reference to &lt;code&gt;join.with('')&lt;/code&gt;, and then we have all the parts we need to combine three functions into one call.&lt;/p&gt;

&lt;p&gt;This is much better, as we can now see each function, and the order in which they are applied. But this reads a little bit differently than the original chained example. That one read in left-to-right order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// given string, call split, then call reverse, then call join  &lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In functional circles, this is considered ‚Äúpipe‚Äù order. The term comes from the Unix/Linux world, and leads down a whole ‚Äònother rabbit hole.&lt;/p&gt;

&lt;p&gt;Our latest code, rather than reading left-to-right, is processed inside-to-outside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
  &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
      &lt;span class="nx"&gt;string&lt;/span&gt;  
    &lt;span class="p"&gt;)&lt;/span&gt;  
  &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if we read these in that same left-to-right order, &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;reverse&lt;/code&gt;, &lt;code&gt;split&lt;/code&gt;, we execute them exactly &lt;em&gt;backwards&lt;/em&gt; of that. This would be considered ‚Äúcomposed‚Äù order, and now we‚Äôre about to venture into composed-function-land!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pre-step-4"&gt;
  &lt;/a&gt;
  Pre Step 4
&lt;/h2&gt;

&lt;p&gt;This is where things start to get fun. First thing to remember is this: functions in javascript are just another kind of data (and thanks, &lt;a href="https://medium.com/u/a3a8af6addc1?source=post_page-----d06df9c0b8a-----------------------------------"&gt;Dan Abramov&lt;/a&gt; for the mental models from &lt;a href="https://justjavascript.com/"&gt;JustJavascript&lt;/a&gt;!). In javascript, we can pass ‚Äôem, we can store ‚Äôem in arrays or objects, we can manipulate them in fun and exciting ways‚Ä¶ and we can combine ‚Äôem. And that‚Äôs just what we‚Äôll do.&lt;/p&gt;

&lt;p&gt;In this iteration, we are going to place all our functions in an array, and then we will simply ask that array to perform each function in turn on a given piece of data. The concept is easy to understand, but again ‚Äî concrete examples are helpful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// again, the helpers:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;splitOn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;splitSting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;splitString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joinString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joinString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// with those, we can write this:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// let's define our transforming variable&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;workingValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// apply each function and transform our data.&lt;/span&gt;
    &lt;span class="nx"&gt;workingValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;workingValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;workingValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is nicely abstracted ‚Äî inside the &lt;code&gt;reverseString&lt;/code&gt;, we simply create an array of instructions and then we process each one, passing the most recently transformed data in.&lt;/p&gt;

&lt;p&gt;If that sounds like a sneaky way of saying we are reducing the array of instructions, you‚Äôre either paying attention or reading ahead. üòâ&lt;/p&gt;

&lt;p&gt;That is exactly where we are going. We are taking an array of instructions, using &lt;code&gt;workingValue&lt;/code&gt; as the starting ‚Äúaccumulator‚Äù of that array, and reducing the &lt;code&gt;workingValue&lt;/code&gt; to the final evaluation of each of those instructions, applying the &lt;code&gt;workingValue&lt;/code&gt; each time. This is precisely what &lt;code&gt;Array.prototype.reduce&lt;/code&gt; is for, and it works a treat. Let‚Äôs go there next!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// I'll leave those helper methods as written.&lt;/span&gt;
&lt;span class="c1"&gt;// Imagine we've placed them in a util library.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/util.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workingValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workingValue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// and use string as the initial workingValue&lt;/span&gt;
    &lt;span class="nx"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we‚Äôve taken that imperative &lt;code&gt;for&lt;/code&gt; loop and made it a declarative &lt;code&gt;reduce&lt;/code&gt; statement. We simply tell javascript "reduce the original &lt;code&gt;workingValue&lt;/code&gt; by applying each &lt;code&gt;instruction&lt;/code&gt; to it in turn." It is a much more structured way to code, and if we want, we can always add, alter, rearrange the &lt;code&gt;instructions&lt;/code&gt; without breaking the way that &lt;code&gt;reduce&lt;/code&gt; function call works. It simply sees instructions, and does instructions. Is a beautiful thing.&lt;/p&gt;

&lt;p&gt;But it would be a colossal pain to have to write each function that way. The concept will be much the same any time we want to combine a number of functions ‚Äî we write the instructions, then we transform some datapoint based on those instructions. Sounds like another candidate for abstraction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pre-step-6"&gt;
  &lt;/a&gt;
  Pre Step 6
&lt;/h2&gt;

&lt;p&gt;Given that we‚Äôre working with the instructions in first-to-last order, we‚Äôll talk about writing a &lt;code&gt;pipe&lt;/code&gt; function first. It‚Äôs an easy step from that to reduce, and in terms of how we think, pipe order may make more sense.&lt;/p&gt;

&lt;p&gt;So what we want is a function that takes an array of functions, and applies them to a particular data point. Internally, we know it‚Äôll be a reducer, but how might that look?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;arrayOfInstructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;arrayOfInstructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workingValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workingValue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// or, with shorter variable names:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those two are exactly the same ‚Äî the first simply has longer variable names to make it easier to see what‚Äôs happening.&lt;/p&gt;

&lt;p&gt;So we‚Äôve made a curryable function here. By partially applying it (passing in any number of functions), we get back a function that wants a value. When we give it a value, it will apply each of the instructions to that value in turn, transforming the value as it goes along. Each time, the latest iteration of that transformed value will be used for the next step, until we reach the end and return the final transformation.&lt;/p&gt;

&lt;p&gt;How might that help us? Remember, we want &lt;code&gt;returnString&lt;/code&gt; to be a function that takes a value. And we want to give it a series of instructions. So how‚Äôs this look?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// again with our utility functions:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/util.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/pipe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we call in our utility functions, and we call in our &lt;code&gt;pipe&lt;/code&gt; function, and then we‚Äôre ready to begin. We partially apply the instructions to &lt;code&gt;pipe&lt;/code&gt;, which returns a function expecting a value ‚Äî which is exactly what we want &lt;code&gt;reverseString&lt;/code&gt; to be! Now, when we call &lt;code&gt;reverseString&lt;/code&gt; with a string argument, it uses that string as the final argument to the reducer, runs each of those instructions, and gives us a return result!&lt;/p&gt;

&lt;p&gt;Look closely, though: our &lt;code&gt;reverseString&lt;/code&gt; is a function, &lt;strong&gt;defined without a body&lt;/strong&gt;! I can't stress enough, this is weird. This is not what we're accustomed to when we write functions. We expect to write a function body, to arrange some instructions, to do some stuff - but that is all happening &lt;em&gt;for&lt;/em&gt; us. The &lt;code&gt;pipe&lt;/code&gt; function takes all the function references passed in above, and then returns a function... awaiting a value. We aren't writing a &lt;code&gt;reverseString&lt;/code&gt; function, we're sitting in the &lt;code&gt;pipe&lt;/code&gt; function's closure!&lt;/p&gt;

&lt;p&gt;Remember above when I explained that we can look at &lt;code&gt;pipe&lt;/code&gt; as similar to chained order? If you read the above &lt;code&gt;pipe&lt;/code&gt; call, you can read it in the same order. But when we compose, it is the reverse of pipe ‚Äî while we might read it left-to-right (or outermost to innermost), it should process from right to left. Let‚Äôs write a &lt;code&gt;compose&lt;/code&gt; function, and compare it to &lt;code&gt;pipe&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// remember,this is our pipe function in the compact terms&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// compose is eerily similar - we just want to reverse-order&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduceRight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you look at those two functions, the only difference between them is that &lt;code&gt;pipe&lt;/code&gt; uses &lt;code&gt;fns.reduce()&lt;/code&gt; while &lt;code&gt;compose&lt;/code&gt; uses &lt;code&gt;fns.reduceRight()&lt;/code&gt;. Otherwise, nothing has changed. We could test them easily, if we wanted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/util.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/my_fp_lib.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipedReverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composedReverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// let's use them!&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;pipedReverseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;composedRreverseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// logs true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that this is hardly the best explanation or implementation of pipe and reduce. There are far better, more robust FP libraries out there doing a far better job of implementing this. But what I‚Äôm doing here is more about explaining the how of it, for some who might be intimidated by the whole idea of functional composition. It doesn‚Äôt have to be intimidating, really. When we break it down to smaller steps, we can see that we already know most of this ‚Äî it is simply how we combine that knowledge together.&lt;/p&gt;

&lt;p&gt;And when I wrote something similar to this some time back, the biggest critique I got was ‚Äúwhat‚Äôs the point? I‚Äôm not gaining anything by writing little functions for every little detail!‚Äù There is some truth to that, for the person who made the comment. For me, having that &lt;code&gt;compose&lt;/code&gt; functionality means that my more complex functions become testable and debuggable quickly and easily, my development becomes more about what I want to do and less about how I‚Äôll do it, my thinking becomes more abstract.&lt;/p&gt;

&lt;p&gt;For example, suppose we wanted to add some inline debugging to the pipe version of our &lt;code&gt;reverseString&lt;/code&gt; function? We could easily add that, without breaking anything:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/util.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/my_fp_lib.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// this would be a candidate for a useful function to add to util.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Starting Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;splitOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;After split&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;After reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;joinWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;reverseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/***
 * logs out
 * Starting Value Hello World
 *
 * After split [
 *   'H', 'e', 'l', 'l',
 *   'o', ' ', 'W', 'o',
 *   'r', 'l', 'd'
 * ]
 *
 * After reverse [
 *  'd', 'l', 'r', 'o',
 *  'W', ' ', 'o', 'l',
 *  'l', 'e', 'H'
 * ]
 *
 * dlroW olleH
 ***/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only thing we‚Äôve changed here is that we‚Äôve added a &lt;code&gt;trace&lt;/code&gt; function, something we &lt;strong&gt;&lt;em&gt;couldn‚Äôt&lt;/em&gt;&lt;/strong&gt; do with a chained function call or a normal nested series of functions. This is one of the secret superpowers of composition ‚Äî we can combine things easily that might not be easy or obvious otherwise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;I hope this helped clear up some, for those (like me) who were initially confused looking at Eric‚Äôs &lt;code&gt;compose&lt;/code&gt; and &lt;code&gt;pipe&lt;/code&gt; functions. Not because they were poorly written at all, simply because I was still thinking in a linear style and these functions are next-level.&lt;/p&gt;

&lt;p&gt;I wanted to take us from the 101-level javascript, and start looking at how we might easily take the knowledge we already have and turn it into something more. First, by exploring two different ways of doing the same things ‚Äî chained methods or nested function calls. Each does similar things, but the mindset and reading-order behind both are a bit different. Both are equally valid, and both apply to functional composition.&lt;/p&gt;

&lt;p&gt;If you got these concepts, you‚Äôre already well on your way down the functional programming rabbit-hole. Welcome to the madhouse, have a hat! If you didn‚Äôt quite get the concepts yet, it‚Äôs not a failing ‚Äî these are deep and twisty applications of ideas. You get a hat anyway!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>functional</category>
    </item>
    <item>
      <title>What is WEB3 and Why Is It gaining so much of a Traction ?</title>
      <author>Pramit Marattha</author>
      <pubDate>Thu, 16 Dec 2021 04:49:03 +0000</pubDate>
      <link>https://dev.to/aviyel/what-is-web3-and-why-is-it-gaining-so-much-of-a-traction--2d4n</link>
      <guid>https://dev.to/aviyel/what-is-web3-and-why-is-it-gaining-so-much-of-a-traction--2d4n</guid>
      <description>&lt;p&gt;Everything began with &lt;a href="https://www.techopedia.com/definition/27960/web-10"&gt;web 1.0&lt;/a&gt;, an information transit hub of documents connected by Hyperlinks. The mechanism worked well until 2004, but when we saw the beginnings of &lt;a href="https://en.wikipedia.org/wiki/Web_2.0"&gt;web 2.0&lt;/a&gt;, things changed, with more people participating in the web through platforms such as Google, YouTube, Facebook, Twitter, resulting in massive centralized tech conglomerates that controlled the flow of information and money on the internet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8W3crTje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027693313-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8W3crTje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027693313-image.png" alt="Tech corpo" width="377" height="105"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We live in fascinating times because we've arrived at the critical juncture of &lt;a href="https://en.wikipedia.org/wiki/Web3"&gt;web 3.0&lt;/a&gt;, a decentralized yet secure internet in which people may exchange money and information without the need for a middleman such as a bank or a tech company. This blog article serves as a comprehensive introduction to the wild world of web 3.0. It's humbling to get into it because it causes you to feel like you know nothing whatsoever.&lt;/p&gt;

&lt;p&gt;Let's dive into its ecosystem from a critical perspective and try to answer questions that the whole world has been asking about web3.0. Get ready to know- "is web 3 bs" or "should I even bother getting into it?" I believe the answer to both is yes. There's obviously a lot of hype around web3, but not everyone is buying it, even Elon Musk said ‚Äú&lt;a href="https://twitter.com/elonmusk/status/1466320998379175939"&gt;Web3 sounds like bs&lt;/a&gt;‚Äù just a few days ago on Twitter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_cnV6q9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639025174597-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_cnV6q9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639025174597-image.png" alt="Tweet" width="530" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The very harsh reality of web 3 is that venture capitalists and silicon valley insiders control many of the companies and the cryptocurrencies they issue. This isn't always the case, but much of the industry is bolstered up by Fear Of Missing Out, and there are a lot of scams and shady stuff to be aware of but there are actually genuine smart people out there making a very good argument about how web 3 lacks the computing power, bandwidth, and storage to scale on any practical level. The scammers and tricksters will tell you that &lt;a href="https://en.wikipedia.org/wiki/Cryptocurrency"&gt;crypto&lt;/a&gt; is growing faster than the internet was in the 1990s, but that's a ridiculous argument because crypto is built on top of the internet itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--guGnhfY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027585425-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--guGnhfY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027585425-image.png" alt="Crypto Internet" width="252" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Crypto will never be as revolutionary as the internet, but that doesn't mean it won't be significant. Here's how we should think about it: let's assume it's 1990, and things are just getting started. The best-case scenario is that web 3.0 will continue to grow for another 10 years, completely revolutionizing the way the world works; on the other hand, the worst-case scenario is that the cryptocurrency bubble has already burst, and as it crashes, it will take web 3.0 down with it. For comparison, when the dot-com bubble burst, Amazon's stock fell by a whopping 90%. &lt;a href="https://www.macrotrends.net/stocks/charts/AMZN/amazon/stock-price-history"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUr5PE1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639025731991-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUr5PE1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639025731991-image.png" alt="Amazon Stock" width="755" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, they were one of the fortunate enterprises that managed to survive. Imagine what will happen to web3.0 if Ethereum plummets down by 90%, but the next question is whether we even need cryptocurrencies to construct decentralized apps. Decentralized technology has been around for a long time, such as peer-to-peer file sharing with Napster in the 1990s or BitTorrent, which has a hundred million to Two Hundred million monthly active users. That said, cryptocurrency is still kind of essential because you need some form of payment to build up a creator economy, and banks are not an acceptable solution. It also provides the incentive for people to provide the computing infrastructure that makes it all possible.&lt;/p&gt;

&lt;p&gt;Let's use the Ethereum blockchain as an example of how a decentralized app or DAPs on the blockchain works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_u-fH0hw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639031919660-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_u-fH0hw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639031919660-image.png" alt="Ethereum" width="202" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although there are a variety of alternative cryptocurrencies available, Ethereum is similar to a large network of computers in which all participants agree on the same state of the data throughout the network. Ether is the cryptocurrency used on the Ethereum network to create transactions that change the state of the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7K25QCrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027214445-image-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7K25QCrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027214445-image-resized.png" alt="Ethereum Transaction" width="760" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you broadcast a transaction, you also offer a small amount of ether as a reward for another computer in the network to complete the transaction. This is known as a gas fee, and it works similarly to how you pay for cloud computing resources on &lt;a href="https://cloud.google.com/"&gt;GCP(Google Cloud Platform)&lt;/a&gt;, &lt;a href="https://aws.amazon.com/"&gt;AWS(Amazon Web Services)&lt;/a&gt;, and &lt;a href="https://azure.microsoft.com/en-us/"&gt;Azure&lt;/a&gt;. If you want things done faster, you pay more gas. Normally, when you build a web application, you write some back-end code and then deploy it to a centralized server like GCP, AWS, or Azure, but with a decentralized app on the blockchain, your backend code is contained in a smart contract, which is an application that lives on the blockchain that can govern the behavior of multiple accounts and is usually written in the solidity language.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--viRfM6Mv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027450004-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--viRfM6Mv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639027450004-image.png" alt="Ethereum" width="300" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A decentralized app also requires a front end that can be developed similarly to a traditional website, with the exception that user identification is handled differently. So, how does user identity function in a decentralized app? The end-user owns all of their data, so there's no need for the developer to collect a username and password. Instead, the end-user has a public wallet address that can receive payments and a private key that can sign transactions to send payments to someone else. The user can then connect their wallet to a browser plugin like &lt;a href="https://metamask.io/"&gt;metamask&lt;/a&gt;, and your front-end application, such as a vue, react, and nextjs app, can then interact with that user's wallet to do something interesting in the UI for example purchasing the NFTs (Non-Fungible Tokens).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QIkPAyWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028037246-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QIkPAyWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028037246-image.png" alt="NFT" width="271" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, what the hell is an NFT? To begin, we must first grasp the basic understanding of "what is a token?"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TY1VnDUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028083197-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TY1VnDUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028083197-image.png" alt="Tokens" width="200" height="177"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So a token is just a digital asset, similar to ether, the currency of Ethereum, that you can trade with other people. But the cool thing is that developers can create their own tokens in the form of smart contracts. A token is basically just a number in a smart contract mapped to a wallet address. In fact, if we wanted to create our own cryptocurrency, we could do so by writing a smart contract that gives an initial balance of 1 trillion tokens. It's conceivable to sell it to other individuals for 10 dollars, and then they sell it to their friends for 20 dollars and snowball it to 30 dollars. In that process, we might become super-rich. To be honest, that seems like a Ponzi scheme with extra steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O28452tX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639036681354-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O28452tX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639036681354-image.png" alt="Ponzi" width="301" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you look closely everything is a Ponzi scheme, with the physical currency that we use on a daily basis, so there's no need to be concerned about ethics or anything about cryptocurrencies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L_9eXvB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639032820217-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_9eXvB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639032820217-image.png" alt="Crypto" width="247" height="183"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, what does it mean by fungible tokens? It simply means that one token has the same value as another token of the same size, or in other words, one coin is always worth the same as another coin. However, tokens can also represent assets that are not identical, such as Pokemon cards, digital artwork, house rents, and other items. Because each token is unique and represents a separate object, its actual market value may alter when exchanged for another type of currency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n5o0_jB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028787621-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5o0_jB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028787621-image.png" alt="Open seas" width="100" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a large non-fungible token (NFT) frenzy on the market, with entire marketplaces like open seas springing up to sell digital artwork as non-fungible tokens, which is actually a perfect example of a highly polished web 3 app so let's speak about Web3 technology. What does a web3 application's front end look like? For the most part, it's not much different from a regular web app. You'll probably utilize a UI library like react, vue, or next, as well as all of your other front-end tools. When it comes to user authentication, things change because, as previously said, the end-user utilizes a plugin such as metamask to make their public wallet details available to a decentralized app. Now the question is how do we as developers connect to metamask.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eEEQggAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028959056-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eEEQggAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639028959056-image.png" alt="Metamask" width="201" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's actually quite simple because metamask creates a global object on the browser window that we can use to access wallet details. Figuring out what to do with this data is a little more difficult, but luckily there are libraries to help us out. The two most popular options are &lt;a href="https://web3js.readthedocs.io/en/v1.5.2/"&gt;web3.js&lt;/a&gt; and &lt;a href="https://docs.ethers.io/v5/"&gt;ethers.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--woUbsGwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639029190569-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--woUbsGwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639029190569-image.png" alt="Web3 and ether" width="368" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These libraries provide a javascript-based API that makes interacting with users and smart contracts on the blockchain much easier.&lt;/p&gt;

&lt;p&gt;The front end of a web3 application is fairly standard and straightforward, but let's look at the back end of a web3 application. Instead of a server and database like node, PHP, and MySQL, you'll be working with smart contracts. There are frameworks available to help with development; two of the most popular options are &lt;a href="https://hardhat.org/"&gt;hardhat&lt;/a&gt; and &lt;a href="https://trufflesuite.com/"&gt;truffle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ow2DLX-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gakibefr47tnlfmp5e3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ow2DLX-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gakibefr47tnlfmp5e3.png" alt="Hardhat and truffle" width="387" height="544"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These frameworks will give you a place to develop a smart contract in Solidity. It's essentially an object-oriented language designed specifically for writing smart contracts on the blockchain. While this may sound intimidating, there's a project called &lt;a href="https://openzeppelin.com/"&gt;openzeppelin&lt;/a&gt; that provides templates for writing smart contracts that adhere to industry standards, making it extremely simple to implement reliable code right out of the box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zRb_3nT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639029808205-image-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zRb_3nT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639029808205-image-resized.png" alt="open zepplin" width="760" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another thing that a development toolchain will do for you is to provide a script to deploy your smart contract to the blockchain. It's just a simple node script that signs a contract with your credentials and deploys it to an address on the blockchain. Now you might be wondering how do I test this code before I deploy it because I have no idea if it actually works. That's something that hardhat and truffle can help you with. They can set up a testing network as well on localhost and produce a lot of fake crypto wallet addresses to use for testing in the browser. so people can then connect Metamask to their testing network instead of the real Ethereum network.&lt;/p&gt;

&lt;p&gt;Furthermore, if you're working on a serious project, you should think about writing automated tests for it, and there's a library called &lt;a href="https://getwaffle.io/"&gt;Waffle&lt;/a&gt; that can help you with that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oTlqN9cK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639033639781-image-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oTlqN9cK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639033639781-image-resized.png" alt="waffle" width="760" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But there's one more question: "Do I put all of my data on the blockchain?" The answer is no, storing anything on the blockchain is inefficient and unnecessary, which is where off-chain storage comes in.&lt;/p&gt;

&lt;p&gt;In some cases, data may be too large to store on the blockchain, or it may need to be modified or deleted, which is not possible in a blockchain where all data is read-only. The most common solution is the &lt;a href="https://ipfs.io/"&gt;interplanetary file system&lt;/a&gt;, or &lt;a href="https://en.wikipedia.org/wiki/InterPlanetary_File_System"&gt;IPFS&lt;/a&gt;, which is a decentralized way to share files similar to how BitTorrent works. There are also databases built on top of IPFS, such as &lt;a href="https://orbitdb.org/"&gt;orbitdb&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/@textile/threaddb"&gt;threaddb&lt;/a&gt;, which are similar to a peer-to-peer version MongoDB database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--alfG55bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639033965166-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--alfG55bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639033965166-image.png" alt="Orbit and thread db" width="379" height="207"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Web3"&gt;Web 3.0&lt;/a&gt; is a refinement of &lt;a href="https://en.wikipedia.org/wiki/Web_2.0"&gt;Web 2.0&lt;/a&gt;, which is a service-oriented web that promotes and facilitates user collaboration and communication. Despite the lack of agreement on the specific traits that characterize Web 3.0, many experts agree that semantic technologies and customization techniques play a very important role in it.&lt;/p&gt;

&lt;p&gt;From this perspective, Web 3.0 might be viewed as a semantic and personalized variation of Web 2.0. Tons of features of Web 3.0 are currently available; others will appear in the future, and stunning modern technology will continue to amaze us. Web 3.0's ultimate global information architecture will boost network activity and internet traffic, open up new markets for unique content.&lt;/p&gt;

&lt;p&gt;Main article available here =&amp;gt; &lt;a href="https://aviyel.com/post/1513/what-is-web3-and-why-is-it-gaining-traction"&gt;https://aviyel.com/post/1513&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="https://twitter.com/AviyelHq"&gt;@aviyelHQ&lt;/a&gt; or &lt;a href="https://aviyel.com/discussions"&gt;sign-up&lt;/a&gt; on Aviyel for early access if you are a project maintainer, contributor, or just an Open Source enthusiast.&lt;/p&gt;

&lt;p&gt;Join Aviyel's Discord =&amp;gt; &lt;a href="https://discord.gg/TbfZmbvnN5"&gt;Aviyel's world&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter =&amp;gt;[&lt;a href="https://twitter.com/AviyelHq"&gt;https://twitter.com/AviyelHq&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>web3</category>
      <category>web2</category>
      <category>crypto</category>
      <category>news</category>
    </item>
    <item>
      <title>Orchestration and Microservices - A match made in heaven</title>
      <author>Boney</author>
      <pubDate>Thu, 16 Dec 2021 04:19:19 +0000</pubDate>
      <link>https://dev.to/boneys/orchestration-and-microservices-a-match-made-in-heaven-3jjn</link>
      <guid>https://dev.to/boneys/orchestration-and-microservices-a-match-made-in-heaven-3jjn</guid>
      <description>&lt;p&gt;Microservices have emerged as the dominant application development paradigm in the software world today. It has tremendous benefits both from a business and technical perspective due to its fundamental characteristics of agility, scalability, and resiliency.&lt;/p&gt;

&lt;p&gt;However, implementing microservices are hard! The inherently distributed nature of this architectural pattern introduces complexity across multiple areas especially around Transaction Management, Data Consistency, and Process Automation. In a distributed system, Business Transactions can span across multiple services. Since we no longer have the ability to run a single ACID transaction, it requires careful coordination across these services to ensure that you have a consistent and reliable system at the end of a business process.&lt;/p&gt;

&lt;p&gt;Solutions to solve this ‚Äúcoordination‚Äù problem have led to the rise of a new set of application patterns that can be broadly classified into two main groups - Choreography and Orchestration.&lt;/p&gt;

&lt;p&gt;Let us tackle the first group - choreography which advocates the usage of events as a coordination mechanism to complete local tasks within each microservice involved in an end-to-end business transaction. Each microservice is responsible for its local execution of the transaction resulting in the publishing of events that other microservices react to and then execute their local transactions. In other words, a sequence of event subscriptions across various microservices to complete a business transaction.&lt;/p&gt;

&lt;p&gt;Using the ubiquitous ‚ÄúFlight Booking example to depict a choreographic approach.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o1S3L-8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/orkes-io/docs/blob/main/blog/assets/choreography-microservices.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o1S3L-8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/orkes-io/docs/blob/main/blog/assets/choreography-microservices.png%3Fraw%3Dtrue" alt="Microservice Choreography" width="880" height="440"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;center&gt;&lt;em&gt;Choreography&lt;/em&gt;&lt;/center&gt;

&lt;p&gt;As seen the various microservices utilize events to interact with each other to complete the booking process flow.&lt;/p&gt;

&lt;p&gt;The tendency to move towards choreography to implement business flows in a distributed environment is natural, the major appeal being the autonomy that this pattern provides. As seen in the flight booking example below, each microservice executes its local transaction and publishes events that are subscribed-to by other microservices which in turn trigger local transactions.   &lt;/p&gt;

&lt;p&gt;But as you start looking at it more closely, we realize that there is a relationship or a logical flow between the subscriptions and that is where it starts to become problematic.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To begin with, it becomes difficult to see the flow as it is embedded within code. In other words, the lack of visibility into the process flows is a challenging aspect of choreography as you would need to reason over all the various microservices to infer the flow&lt;/li&gt;
&lt;li&gt;It becomes extremely difficult to gauge the impact of a change within the flow requiring coordinated deployment and hope that it works due to the inability to test it holistically (since each service just does its own bit)&lt;/li&gt;
&lt;li&gt;There is no systematic mechanism to report as well as action on technical/business metrics associated with the process (e.g. SLAs, How much are we done with Process X ?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, with peer-to-peer choreography, it becomes harder to scale with growing business needs and complexities. It does offer a low entry barrier but you completely lose sight of the larger-scale flow.&lt;/p&gt;

&lt;p&gt;On the other side of the spectrum is the Orchestration approach which relies purely on a task-based approach to coordinate and execute process flows. Generally, it is implemented using a central component that issues task-based requests to the individual services, interprets response(s), and decides to proceed/terminate or complete the flow.&lt;/p&gt;

&lt;p&gt;Going back to the Flight Booking problem, if the orchestration approach is adopted, it would be depicted like something below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--81C3K0WR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/orkes-io/docs/blob/main/blog/assets/orchestration-microservices.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--81C3K0WR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/orkes-io/docs/blob/main/blog/assets/orchestration-microservices.png%3Fraw%3Dtrue" alt="Microservice Orchestration" width="880" height="556"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;center&gt;&lt;em&gt;Orchestration&lt;/em&gt;&lt;/center&gt;

&lt;p&gt;The orchestration approach does alleviate some of the problems that choreography poses - There is now complete process visibility and traceability into the process flows, change impact is localized to the central component and it generally becomes easier and quicker to debug issues as well as action on them.&lt;/p&gt;

&lt;p&gt;However applying orchestration is easier said than done and while at first glance it looks easy, it does have a whole set of challenges associated with its implementation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For example, how do we prevent the centralized component from being a single point of failure? &lt;/li&gt;
&lt;li&gt;In addition to that, we would need to ensure that there are no business logic creeps into the component and it does what it is intended to do i.e. just pure orchestration&lt;/li&gt;
&lt;li&gt;And finally, how do we provide reliable, resilient, and scalable orchestration services since it forms such a critical piece of the infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, we would need to build a distributed orchestration engine. And building one is not easy! Like any other piece of infrastructural software, it is always prudent to utilize a purpose-built tool. And it holds true in the case of a distributed orchestration engine too.&lt;/p&gt;

&lt;p&gt;Introducing Conductor which was built to help orchestrate microservices based process flows at Netflix.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conductor provides a clean task-based API backed by a distributed server ecosystem to create a highly efficient and scalable distributed orchestration engine. &lt;/li&gt;
&lt;li&gt;It uses a well-structured DSL mechanism to help define process flows across microservices. &lt;/li&gt;
&lt;li&gt;It provides full operational control over process flows including operations for pause/resume/retry and a user interface to visualize, replay and search the flows. &lt;/li&gt;
&lt;li&gt;Not to mention the fact that it is battle-tested for scale at Netflix volumes running millions of concurrent process flows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A3sUfb4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/orkes-io/docs/blob/main/blog/assets/netflix-conductor-architecture-orkes.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A3sUfb4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/orkes-io/docs/blob/main/blog/assets/netflix-conductor-architecture-orkes.png%3Fraw%3Dtrue" alt="Netflix Conductor Architecture - Orkes" width="880" height="600"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;center&gt;&lt;em&gt;Netflix Conductor Architecture&lt;/em&gt;&lt;/center&gt;

&lt;p&gt;To conclude, the choice of orchestration over choreography to help run your process flows across microservices is a safe one. However, it would be advisable to use a purpose-built engine like Netflix Conductor to help implement your orchestration needs. The implementation is complex especially in a distributed system and Conductor helps abstract all the technical and infrastructural complexities associated with orchestration helping you focus on your business code.&lt;/p&gt;

&lt;p&gt;The adoption and usage of Conductor have exploded over the past few years since it was first released. Organizations rely on Conductor to help implement reliable, scalable, and resilient Microservices-based applications utilizing a robust distributed orchestration engine. From powering complex loan origination processes at a leading Financial Institution to enabling India‚Äôs largest food delivery platform to assist sales at a large real estate brokerage company, the range of use cases that Conductor supports is broad.&lt;/p&gt;

&lt;p&gt;And that is precisely why we started Orkes! Orkes brings to market an enterprise-grade, cloud-hosted, fully managed version of Netflix Conductor offering full compatibility with the open-source version along with tiered support.&lt;/p&gt;

&lt;p&gt;Early access to the platform is now available for interested customers &lt;a href="https://orkes.io"&gt;https://orkes.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://netflix.github.io/conductor/"&gt;Follow/Star the Netflix Conductor Open Source Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://orkes.io"&gt;Learn more about Orkes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://join.slack.com/t/orkes-conductor/shared_invite/zt-xyxqyseb-YZ3hwwAgHJH97bsrYRnSZg"&gt;Join the Orkes Conductor Slack community here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jobs.lever.co/Orkes/"&gt;Want to work at Orkes?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://orkes.io/content/blog/orchestration-microservices-match-made-heaven"&gt;Link to Original Post&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>orchestration</category>
      <category>microservices</category>
      <category>workflow</category>
    </item>
    <item>
      <title>40+ Nodejs Projects for Beginners ‚Äì Advance</title>
      <author>Dev Journal</author>
      <pubDate>Thu, 16 Dec 2021 04:17:05 +0000</pubDate>
      <link>https://dev.to/devjournal/40-nodejs-projects-for-beginners-advance-2c7h</link>
      <guid>https://dev.to/devjournal/40-nodejs-projects-for-beginners-advance-2c7h</guid>
      <description>&lt;p&gt;If you have decided to build your career in¬†&lt;span&gt;NodeJS¬†&lt;/span&gt;development, we have gathered a list of¬†&lt;span&gt;nodeJS projects for beginners&lt;/span&gt;¬†for all node enthusiasts to build highly scalable¬†&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best¬†&lt;span&gt;nodeJS projects for beginners&lt;/span&gt;¬†will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it‚Äôs highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn¬†&lt;em&gt;git&lt;/em&gt;¬†and show your coding expertise to future employers.¬†&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;40+ Nodejs Projects for Beginners ‚Äì Easy Ideas to Get Started Coding Nodejs &lt;/a&gt;&lt;/b&gt;¬†&lt;/p&gt;






</description>
    </item>
    <item>
      <title>Artificial Intelligence Tutorial: What is AI? Basics for Beginners</title>
      <author>Dev Journal</author>
      <pubDate>Thu, 16 Dec 2021 04:16:20 +0000</pubDate>
      <link>https://dev.to/devjournal/artificial-intelligence-tutorial-what-is-ai-basics-for-beginners-5fpb</link>
      <guid>https://dev.to/devjournal/artificial-intelligence-tutorial-what-is-ai-basics-for-beginners-5fpb</guid>
      <description>&lt;p&gt;This tutorial provides introductory knowledge on Artificial Intelligence. It would come to a great help if you are about to select Artificial Intelligence as a course subject. You can briefly know about the areas of AI in which research is prospering.&lt;/p&gt;

&lt;h1&gt;Audience&lt;/h1&gt;

&lt;p&gt;This tutorial is prepared for the students at beginner level who aspire to learn Artificial Intelligence.&lt;/p&gt;

&lt;h1&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;The basic knowledge of Computer Science is mandatory. The knowledge of Mathematics, Languages, Science, Mechanical or Electrical engineering is a plus. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.codelivly.com/what-is-ai-artificial-intelligence-tutorial-basics-for-beginners/" rel="noreferrer noopener"&gt;Artificial Intelligence Tutorial: What is AI? Basics for Beginners - Advance&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Install Kubernetes on Windows 10?</title>
      <author>Nawaz Siddiqui</author>
      <pubDate>Thu, 16 Dec 2021 03:54:41 +0000</pubDate>
      <link>https://dev.to/nawazsiddiqui27/how-to-install-kubernetes-on-windows-10-4bep</link>
      <guid>https://dev.to/nawazsiddiqui27/how-to-install-kubernetes-on-windows-10-4bep</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oUyo9kK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtepgg3wkusql7hwb09p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oUyo9kK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtepgg3wkusql7hwb09p.png" alt="Image description" width="730" height="389"&gt;&lt;/a&gt;&lt;br&gt;
Kubernetes or K8s is an open-source platform to manage containerized workloads and applications. With containers, it's easy to manage, run or ship your application. Kubernetes helps to manage cloud resources and makes your cloud infrastructure more scalable by automating and deploying applications in no time. While installing Kubernetes for the first time, these are the steps I followed on my Windows 10 home. Let‚Äôs explore each of them:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-hyperv"&gt;
  &lt;/a&gt;
  Setting up Hyper-V
&lt;/h2&gt;

&lt;p&gt;Hyper-V is window's own virtualization software same as Virtualbox. If you are using windows home, you need to install Hyper-V. Here is the article for that. After installing, follow these steps to enable Hyper-V on your local machine.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Open search bar and go to control panel&lt;/li&gt;
&lt;li&gt; On the left side of the control panel, click on program and then on programs and features.&lt;/li&gt;
&lt;li&gt; Turn on the Windows features on and off.&lt;/li&gt;
&lt;li&gt; Check on the Hyper-V and Windows Hypervision Platform, click the OK button.&lt;/li&gt;
&lt;li&gt; It may take a few minutes to install Hyper-V on the system, in some cases, your system will reboot itself a couple of times. &lt;/li&gt;
&lt;li&gt; To verify the successful installation of Hyper-V on Windows, open windows Powershell, run it as an administrator, and paste the below command.
Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m20_60Ls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjrojkx1iowob16lk8ia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m20_60Ls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjrojkx1iowob16lk8ia.png" alt="Image description" width="880" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-docker-on-windows-10"&gt;
  &lt;/a&gt;
  Installing Docker on Windows 10
&lt;/h2&gt;

&lt;p&gt;You can install any alternatives of docker like Containerd, RunC, Podman, and many more to mention. Although I am installing Kubernetes for the first time in the system, I used the Docker desktop. Click here to go to the official website of docker and click on Get Docker Desktop. Follow the instructions while installing and you are ready to run Docker on your machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-kubernetes-on-windows-10"&gt;
  &lt;/a&gt;
  Installing Kubernetes on Windows 10
&lt;/h2&gt;

&lt;p&gt;Follow these steps to install Kubernetes on windows 10 seamlessly. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Open the Docker GUI tool and click on Settings.&lt;/li&gt;
&lt;li&gt; On the left plane, click on Kubernetes and check on Enable Kubernetes
Apply the changes, wait for 5 to 10 minutes, or until the installation complete popup message is shown up on the screen.
To confirm the running of Kubernetes, hover your mouse pointer on the down left side of the Docker desktop plane, you will see ‚ÄúKubernetes Running‚Äù message.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yR6jojO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vnqu7hg8il4syji06a3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yR6jojO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vnqu7hg8il4syji06a3.jpg" alt="Image description" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-kubernetes-ui"&gt;
  &lt;/a&gt;
  Accessing Kubernetes UI
&lt;/h2&gt;

&lt;p&gt;Kubernetes UI is not installed by default. It‚Äôs a web-based interface and can be accessed via a web browser. Open the command prompt and paste the given script to deploy dashboard UI. &lt;br&gt;
kubectl apply -f &lt;a href="https://raw.githubusercontent.com/Kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml"&gt;https://raw.githubusercontent.com/Kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case, the command was showcasing some error with my Linux, so I reinstalled Ubuntu 20.04 LTS. If you don‚Äôt have any Linux distribution, install from the Microsoft store in case of any error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-kubernetes-dashboard"&gt;
  &lt;/a&gt;
  Accessing Kubernetes Dashboard
&lt;/h2&gt;

&lt;p&gt;You need to create a sample user to access the Kubernetes dashboard. Follow this article to create a sample user and generate token.&lt;br&gt;
To enable access to the dashboard, use the below command in the terminal&lt;br&gt;
kubectl proxy&lt;br&gt;
The dashboard will be available at &lt;a href="http://localhost:8001/api/v1/namespaces/Kubernetes-dashboard/services/https:Kubernetes-dashboard:/proxy/"&gt;http://localhost:8001/api/v1/namespaces/Kubernetes-dashboard/services/https:Kubernetes-dashboard:/proxy/&lt;/a&gt;&lt;br&gt;
If everything is done right you will be able to get access to the dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kSzywaUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6u70tjaetpesx7g21l2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSzywaUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6u70tjaetpesx7g21l2.png" alt="Image description" width="880" height="452"&gt;&lt;/a&gt;&lt;br&gt;
These are the steps I followed to install Kubernetes on windows 10 home. I hope this article was helpful. If you still face any problems, comment down below, I will try to get back to you with the solution. &lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>cloudnative</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to handle errors gracefully in Remix</title>
      <author>Carlo Gino Catapang</author>
      <pubDate>Thu, 16 Dec 2021 03:31:49 +0000</pubDate>
      <link>https://dev.to/codegino/how-to-handle-errors-gracefully-in-remix-1jkb</link>
      <guid>https://dev.to/codegino/how-to-handle-errors-gracefully-in-remix-1jkb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#using-errorboundary-and-catchboundary-in-error-handling"&gt;
  &lt;/a&gt;
  Using ErrorBoundary and CatchBoundary in error handling
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#how-remix-handles-errors"&gt;
  &lt;/a&gt;
  How Remix handles errors
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;From the Remix official documentation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Remix will automatically catch errors and render the nearest error boundary for errors thrown while:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rendering in the browser&lt;/li&gt;
&lt;li&gt;rendering on the server&lt;/li&gt;
&lt;li&gt;in a loader during the initial server rendered document request&lt;/li&gt;
&lt;li&gt;in an action during the initial server rendered document request&lt;/li&gt;
&lt;li&gt;in a loader during a client-side transition in the browser (Remix serializes the error and sends it over the network to the browser)&lt;/li&gt;
&lt;li&gt;in an action during a client-side transition in the browser&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-can-we-use-to-handle-errors-in-remix"&gt;
  &lt;/a&gt;
  What can we use to handle errors in Remix?
&lt;/h3&gt;

&lt;p&gt;Since Remix is still a JavasScript framework, we can still use JavaScript constructs to catch errors such as &lt;code&gt;try/cath&lt;/code&gt;.&lt;br&gt;
This blog will only discuss how to catch errors using &lt;code&gt;ErrorBoundary&lt;/code&gt; and &lt;code&gt;CatchBoundary&lt;/code&gt;.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#using-raw-errorboundary-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;ErrorBoundary&lt;/code&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;From the official Docs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An ErrorBoundary is a React component that renders whenever there is an error anywhere on the route, either during rendering or during data loading.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is an example of using the &lt;code&gt;ErrorBoundary&lt;/code&gt; component to catch errors in Remix.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundaryComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundaryComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ERROR: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;ErrorBoundary&lt;/code&gt; above, Here are some examples of errors we can catch and the corresponding result.&lt;/p&gt;



&lt;h5&gt;
  &lt;a href="#-explicitly-thrown-errors"&gt;
  &lt;/a&gt;
  - Explicitly thrown errors
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I am a failure!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;ERROR: "I am a failure!"&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#-unhandled-errors"&gt;
  &lt;/a&gt;
  - Unhandled errors
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://a.b.c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;ERROR: "request to http://a.b.c/ failed, reason: getaddrinfo ENOTFOUND a.b.c"&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#-other-errors-in-backend"&gt;
  &lt;/a&gt;
  - Other errors in backend
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// syntax error&lt;/span&gt;
  &lt;span class="nx"&gt;someCodeInBackend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;ERROR: "someCodeInBackend is not defined"&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#-errors-in-react-land"&gt;
  &lt;/a&gt;
  - Errors in React land
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;someCodeInReact&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*...*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;ERROR: "someCodeInReact is not defined"&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h4&gt;
  &lt;a href="#using-raw-catchboundary-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;CatchBoundary&lt;/code&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;A CatchBoundary is a React component that renders whenever an action or loader throws a Response.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It works in combination with &lt;code&gt;useCatch&lt;/code&gt;. The hook will allow us to get a reference to the response's &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt;, and &lt;code&gt;statusText&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CatchBoundary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;caught&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        ERROR: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Some custom message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;501&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will yield to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;ERROR: Not Implemented 501&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Some custom message&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also use other data formats such as plain string, but we need to make sure our &lt;code&gt;CatchBoundary&lt;/code&gt; can handle them properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Some custom message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;501&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will yield to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;ERROR: Not Implemented 501&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#in-which-cases-should-we-use-one-over-the-other"&gt;
  &lt;/a&gt;
  In which cases should we use one over the other?
&lt;/h3&gt;

&lt;p&gt;We should use &lt;code&gt;CatchBoundary&lt;/code&gt; if we care about the context of the error, such as status codes or the custom data related to the error; in another case, we use &lt;code&gt;ErrorBoundary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The good thing is we can even use them together. So, for example, if there's an error in the &lt;code&gt;CatchBoundary&lt;/code&gt;, that error will be caught by the &lt;code&gt;ErrorBoundary&lt;/code&gt;.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#live-examples"&gt;
  &lt;/a&gt;
  Live examples
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#handling-global-404-error"&gt;
  &lt;/a&gt;
  Handling global 404 error
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://playground-efupcps19-codegino.vercel.app/non-exisiting-page"&gt;/non-exisiting-page&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#handling-route-404-error"&gt;
  &lt;/a&gt;
  Handling route 404 error
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://playground-efupcps19-codegino.vercel.app/words/404"&gt;/words/404&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#handling-error-in-an-action"&gt;
  &lt;/a&gt;
  Handling error in an action
&lt;/h4&gt;

&lt;p&gt;Try to fill in the form, then click submit to see the &lt;code&gt;401&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://playground-efupcps19-codegino.vercel.app/words/add"&gt;/words/add&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#handing-error-in-a-nested-route"&gt;
  &lt;/a&gt;
  Handing error in a nested route
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://playground-efupcps19-codegino.vercel.app/words/edit/404"&gt;/words/edit/404&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#propagating-error-from-raw-test-endraw-to-the-root-route"&gt;
  &lt;/a&gt;
  Propagating error from &lt;code&gt;/test&lt;/code&gt; to the root route
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://playground-efupcps19-codegino.vercel.app/test"&gt;/test&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#additional-note"&gt;
  &lt;/a&gt;
  Additional note:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Your root &lt;code&gt;ErrorBoundary&lt;/code&gt; should not throw an error in a production environment since there's nothing else to catch the error. If the root &lt;code&gt;ErrorBoundary&lt;/code&gt; can throw an error, the user might see something like &lt;a href="https://playground-jb6w7fn95-codegino.vercel.app/words/404"&gt;this&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I find using &lt;code&gt;ErrorBoundary&lt;/code&gt; and &lt;code&gt;CatchBoundary&lt;/code&gt; an easy way to handle route errors in Remix as it allows us to have fine-grained control on how we want to display errors in our pages. In my opinion, it improves the readability of what we are trying to achieve as there is the precise placement of the success and error cases. &lt;/p&gt;

</description>
      <category>react</category>
      <category>remix</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>‚Äã‚ÄãSend Code and Verify Email with Tuya API</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Thu, 16 Dec 2021 03:12:20 +0000</pubDate>
      <link>https://dev.to/surajondev/send-code-and-verify-email-with-tuya-api-461k</link>
      <guid>https://dev.to/surajondev/send-code-and-verify-email-with-tuya-api-461k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Today, we are going to build a web application to send verification code to the user. We will use Tuya‚Äôs Basic API to send an email. We will to verify the code and notify the user about the verification.&lt;/p&gt;

&lt;p&gt;We will use express js as our backend for sending and verifying the code. Frontend with basic HTML, CSS, and JavaScript. &lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-tuya"&gt;
  &lt;/a&gt;
  What is Tuya?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.tuya.com/?_source=781e374dc3faa217b38cfdc6341d549a"&gt;&lt;strong&gt;Tuya&lt;/strong&gt;&lt;/a&gt; provides you with APIs and a cloud development environment for managing and programming IoT-based devices. Tuya with their APIs helps you to create an application that will control [&lt;strong&gt;IoT devices&lt;/strong&gt;] with ease. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AvZMbtLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3x7hmejnertpjw0xt09m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AvZMbtLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3x7hmejnertpjw0xt09m.png" alt="Tuya" width="300" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.tuya.com/en/iot-core"&gt;Tuya&lt;/a&gt; has many APIs that can be used in sending emails, messages, getting weather, etc. Among them, we are going to use their‚Äôs Mail service for sending the code to the user.&lt;/p&gt;

&lt;p&gt;Learn more about the Mail Message API provided by Tuya here.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tuya-setup-for-api"&gt;
  &lt;/a&gt;
  Tuya Setup for API
&lt;/h1&gt;

&lt;p&gt;Create a tuya developers account by visiting &lt;a href="https://developer.tuya.com/en/?_source=2993152cf5bd786a7ba5c08ae1a89b26"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;. After login Go to Cloud ‚Üí Development ‚Üí Create Cloud Project.&lt;br&gt;
Registered your project by filling in the details. Choose your nearest location for Data Center for the best experience. Click on &lt;code&gt;Create&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q208I2rw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_DA3210F3AFBA18A6963C082C9C4D56D114EEFE0FE4466DE43C962E0A6A34F2B1_1638772007963_Tuya%2BRegistered.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q208I2rw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_DA3210F3AFBA18A6963C082C9C4D56D114EEFE0FE4466DE43C962E0A6A34F2B1_1638772007963_Tuya%2BRegistered.png" alt="Registered your project" width="780" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the next window, you will have &lt;code&gt;IoT Core&lt;/code&gt; and &lt;code&gt;Authorization&lt;/code&gt; by default. Select &lt;code&gt;Email Service&lt;/code&gt; Trial Version API from the Select API Services and then click on &lt;code&gt;Authorize&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uKy3Qi8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_DA3210F3AFBA18A6963C082C9C4D56D114EEFE0FE4466DE43C962E0A6A34F2B1_1638772137765_API%2BTuya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uKy3Qi8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_DA3210F3AFBA18A6963C082C9C4D56D114EEFE0FE4466DE43C962E0A6A34F2B1_1638772137765_API%2BTuya.png" alt="Select API Services" width="700" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the next window, fill the detail for your asset on the choosen Data Center.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E-bibffb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_DA3210F3AFBA18A6963C082C9C4D56D114EEFE0FE4466DE43C962E0A6A34F2B1_1638772347629_Screenshot%2B2021-12-06%2B120205.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E-bibffb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_DA3210F3AFBA18A6963C082C9C4D56D114EEFE0FE4466DE43C962E0A6A34F2B1_1638772347629_Screenshot%2B2021-12-06%2B120205.png" alt="Asset Data Center" width="642" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now your project is create and you will have your &lt;code&gt;client ID&lt;/code&gt; and &lt;code&gt;client secret&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RgaxRjOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_DA3210F3AFBA18A6963C082C9C4D56D114EEFE0FE4466DE43C962E0A6A34F2B1_1638772630496_Screenshot%2B2021-12-06%2B120602.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RgaxRjOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_DA3210F3AFBA18A6963C082C9C4D56D114EEFE0FE4466DE43C962E0A6A34F2B1_1638772630496_Screenshot%2B2021-12-06%2B120602.png" alt="Project Created" width="694" height="343"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h1&gt;

&lt;p&gt;We will have both frontend and backend. The frontend will deal with taking emails from the user and making the request to the backend. Backend will handle making request to tuya for sending mail and generating random code. It will verify the code too. We are using the backend to prevent a user from knowing the code that we will generate to send.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#file-structure"&gt;
  &lt;/a&gt;
  File Structure:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;    ‚îú‚îÄ‚îÄ &lt;span class="kd"&gt;public&lt;/span&gt;
        ‚îú‚îÄ‚îÄindex.html
        ‚îú‚îÄ‚îÄscript.js
    ‚îú‚îÄ‚îÄ &lt;span class="kd"&gt;server&lt;/span&gt;.js
    ‚îú‚îÄ‚îÄ &lt;span class="kd"&gt;package&lt;/span&gt;.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So let‚Äôs start coding by hitting &lt;code&gt;npm init&lt;/code&gt; and creating the &lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#serverjs"&gt;
  &lt;/a&gt;
  server.js
&lt;/h1&gt;

&lt;p&gt;Let‚Äôs create our server with express. Our server will handle the following process&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It will generate a random 4 digit code to send&lt;/li&gt;
&lt;li&gt;Requests Tuya to Send Email&lt;/li&gt;
&lt;li&gt;It will verify the verification code
Imports&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are going to import the following libraries in the server.js file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;express: We are going to use express for handling our backend server.
Command to Install:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;    &lt;span class="kd"&gt;npm&lt;/span&gt; &lt;span class="kd"&gt;install&lt;/span&gt; &lt;span class="kd"&gt;express&lt;/span&gt; &lt;span class="na"&gt;--save
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;TuyaContext from tuya-connector-nodejs: TuyaContext will handle all the requests to the server
Command to Install
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;    &lt;span class="kd"&gt;npm&lt;/span&gt; &lt;span class="kd"&gt;install&lt;/span&gt; @tuya/tuya&lt;span class="na"&gt;-connector-nodejs
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Our import will look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TuyaContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tuya/tuya-connector-nodejs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#routes"&gt;
  &lt;/a&gt;
  Routes
&lt;/h1&gt;

&lt;p&gt;We are going to have to one &lt;code&gt;GET&lt;/code&gt; and two &lt;code&gt;POST&lt;/code&gt; routes. The default route &lt;code&gt;/&lt;/code&gt; will be used for rendering our &lt;code&gt;public folder&lt;/code&gt;. Among the &lt;code&gt;POST&lt;/code&gt;  method, one will get an email from the frontend request, generate random code, and makes a request to tuya for sending mail. Another route gets the code entered by the user and verified with the sent code.&lt;/p&gt;

&lt;p&gt;We are using port &lt;code&gt;8000&lt;/code&gt; for our backend server. That makes the URL for sending mails as&lt;br&gt;
&lt;code&gt;http://localhost:8000/sendcode/&lt;/code&gt; and our verify route &lt;code&gt;http://localhost:8000/verify&lt;/code&gt;. The default&lt;code&gt;:8000/&lt;/code&gt; will be served to render our index.html from our public folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#send-email-route"&gt;
  &lt;/a&gt;
  Send Email Route
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tuyacontext"&gt;
  &lt;/a&gt;
  TuyaContext:
&lt;/h3&gt;

&lt;p&gt;Create a new TuyaContext by entering all the details. Enter &lt;code&gt;accessKek&lt;/code&gt; and &lt;code&gt;secretKey&lt;/code&gt; of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tuya&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TuyaContext&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://openapi.tuyain.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;accessKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XXXXXXXXXXXXXXX&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;secretKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XXXXXXXXXXXXXXX&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Choose &lt;code&gt;baseURL&lt;/code&gt; according to your location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e9ifi-Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B108A034B117585FA67CB9AC8AA22244235BA2B1C94F599522EED319198B90_1638939332188_wkNf_Kk_l.jfif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e9ifi-Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B108A034B117585FA67CB9AC8AA22244235BA2B1C94F599522EED319198B90_1638939332188_wkNf_Kk_l.jfif" alt="Chose Endpoint Location" width="560" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#random-code"&gt;
  &lt;/a&gt;
  Random Code:
&lt;/h3&gt;

&lt;p&gt;Declare a variable outside both routes so that both routes can access the code. Generate a code with Math.floor and Math.random. If the number generated by Math.random is less than 0.1 the code will be 3 digits. If the code generated is 3 digits which is &lt;code&gt;code&amp;lt;1000&lt;/code&gt; add &lt;code&gt;1000&lt;/code&gt; to make it 4 digits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Making request to Tuya:&lt;br&gt;
Make a request to tuya with &lt;code&gt;tuya.request&lt;/code&gt; and store the data in the &lt;code&gt;data&lt;/code&gt; variable. Request contains method as &lt;code&gt;POST&lt;/code&gt;, path is our endpoint to the API which is &lt;code&gt;/v1.0/iot-03/messages/mails/actions/push&lt;/code&gt; . The body contains the following 4 parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;to_address&lt;/strong&gt;: It is the address to which the mail will be sent. We will get an email from the request that we will send from the frontend to the backend.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;reply_to_address&lt;/strong&gt;: An email to which the user can reply.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;template_id&lt;/strong&gt;: It is a predefined email template ID by Tuya. &lt;code&gt;MAIL_1624531323&lt;/code&gt; is for verification code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;template_patam&lt;/strong&gt;: It is the parameter for email. &lt;code&gt;{\"code\":\"${code}\"}&lt;/code&gt; is the correct parameter and it will contain our generated code.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt;  &lt;span class="nx"&gt;data&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tuya&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/v1.0/iot-03/messages/mails/actions/push&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;to_address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emailaddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reply_to_address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test@example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;template_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MAIL_1624531323&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;template_param&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`{\"code\":\"&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\"}`&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And that‚Äôs it for the sending mail route.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code-verification-route"&gt;
  &lt;/a&gt;
  Code Verification Route
&lt;/h2&gt;

&lt;p&gt;It‚Äôs quite a simple route to verify the code entered by the user and the code that we have sent. It is a &lt;code&gt;POST&lt;/code&gt; request. Thecode will be passed in the body while making a request to the backend from the frontend. We will send only &lt;code&gt;true&lt;/code&gt; if the code is correct and &lt;code&gt;false&lt;/code&gt; if the code is incorrect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;    
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;  
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h1&gt;

&lt;p&gt;We are going simple and have just two inputs, one for email and the other for code. The two buttons, one for initiating a request to the backend for sending mail and the other for verifying the code.&lt;/p&gt;

&lt;p&gt;Add stylesheet according to you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Name:&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter Email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;sendCode()&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Send Code&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Code:&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"verify"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter Code"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;verifyCode()&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Verify Code&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#scriptjs"&gt;
  &lt;/a&gt;
  script.js
&lt;/h1&gt;

&lt;p&gt;We are having two functions. &lt;code&gt;sendCode()&lt;/code&gt; will make a request to our server with the body containing the entered email address. It will &lt;code&gt;POST&lt;/code&gt;  request as it contain &lt;code&gt;body&lt;/code&gt;. &lt;code&gt;JSON.Stringify()&lt;/code&gt; will convert the body into JSON so that server can read it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
        &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:8000/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;
                &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="na"&gt;emailaddress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The other function verifyCode will make a &lt;code&gt;POST&lt;/code&gt; request to the server for verifying the entered code. This request will send us data regarding verification either &lt;code&gt;verify:true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. We will alert the user regarding code verification. If the code is correct &lt;code&gt;window.alert("VERIFIED")&lt;/code&gt; and if the code is incorrect &lt;code&gt;window.alert("INCORRECT CODE")&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verifyCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;enteredCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;verify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
        &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:8000/verify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;
            &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;code&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;enteredCode&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VERIFIED&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;INCORRECT CODE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h1&gt;

&lt;p&gt;Run the server by running the command &lt;code&gt;node server.js&lt;/code&gt;. Enter the email and click on send the email on the &lt;code&gt;http://localhost:800&lt;/code&gt;. If everything goes well, you will get the email with a code on your device.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XHVWcjud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B108A034B117585FA67CB9AC8AA22244235BA2B1C94F599522EED319198B90_1638969740460_Screenshot%2B2021-12-08%2B185119.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XHVWcjud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B108A034B117585FA67CB9AC8AA22244235BA2B1C94F599522EED319198B90_1638969740460_Screenshot%2B2021-12-08%2B185119.png" alt="Email Code" width="486" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you entered the right code, you will see the alert box with the message &lt;code&gt;VERIFIED&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k-ivzN4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B108A034B117585FA67CB9AC8AA22244235BA2B1C94F599522EED319198B90_1638942478205_Screenshot%2B2021-12-08%2B111144.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k-ivzN4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B108A034B117585FA67CB9AC8AA22244235BA2B1C94F599522EED319198B90_1638942478205_Screenshot%2B2021-12-08%2B111144.png" alt="Verification Code by Tuya" width="476" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#play-with-code"&gt;
  &lt;/a&gt;
  Play with Code
&lt;/h1&gt;

&lt;p&gt;I have created a GitHub repository for this project. You can look into it by visiting &lt;a href="https://github.com/surajondev/tuya-email-verification"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;. I have also deployed the project on Heroku. Visit &lt;a href="https://tuya-email-verification.herokuapp.com/"&gt;&lt;strong&gt;tuya-email-verification&lt;/strong&gt;&lt;/a&gt; to see the working of the project live.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The project is doing its job. The Tuya API is working great and can send an email with generated code to enter email in real-time. &lt;/p&gt;

&lt;p&gt;The APIs provided by tuya do a lot of heavy lifting for us. Tuya has many other APIs like Mail Messages. They have Short Messages, Voice messages, Weather, Country codes, &lt;a href="https://developer.tuya.com/en/iot-core"&gt;IoT-based&lt;/a&gt; APIs, and many more. &lt;/p&gt;

&lt;p&gt;With their libraries, you can make requests easily with access code and secret code. I recommend you to look into &lt;a href="https://developer.tuya.com/en/?_source=2993152cf5bd786a7ba5c08ae1a89b26"&gt;&lt;strong&gt;Tuya&lt;/strong&gt;&lt;/a&gt; as it is a great platform for getting useful APIs and programming IoT-based devices.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Wacky World of Closures &amp; What Makes Them Useful</title>
      <author>aruna-x</author>
      <pubDate>Thu, 16 Dec 2021 02:18:43 +0000</pubDate>
      <link>https://dev.to/aruna/the-wacky-world-of-closures-what-makes-them-useful-24a7</link>
      <guid>https://dev.to/aruna/the-wacky-world-of-closures-what-makes-them-useful-24a7</guid>
      <description>&lt;p&gt;Can you guess what this prints out?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... Are you sure? There's a gotcha here, and if you're not aware of it already, I'd wager this blog post is worth your time. &lt;em&gt;(Hint: 0, 1, 2 is incorrect.)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-closure-with-javascript"&gt;
  &lt;/a&gt;
  Getting Closure With Javascript
&lt;/h2&gt;

&lt;p&gt;To understand what's happening in the above code snippet, we have to understand closures. If you're looking for practical applications of closures, you can jump &lt;a href="#uses"&gt;ahead&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A closure has a surprisingly simple definition: a function with access to &lt;em&gt;information outside of itself&lt;/em&gt;, otherwise known as its "lexical environment". &lt;code&gt;function addTwo()&lt;/code&gt; is a closure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;let x = 5&lt;/code&gt; is in its lexical environment.&lt;/p&gt;

&lt;p&gt;All functions in Javascript can be closures, because they automatically gain access to outer scope.&lt;/p&gt;

&lt;p&gt;By contrast, pure functions are not closures:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addNums&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;addNums&lt;/code&gt; does not reference any data outside of its own scope. Its data is kept in your computer's short term memory. It gets pushed onto the "call stack", executed, and then popped off the stack again. Clean, simple, easy. &lt;/p&gt;

&lt;p&gt;On the other hand, when a function references information outside of its own scope (as with a closure), its data becomes packaged (or "enclosed") with references to all of its lexical info, and the entire package gets placed in longer term memory, called the heap. We can thank a memory management process called &lt;a href="https://javascript.info/garbage-collection"&gt;garbage collection&lt;/a&gt; for keeping the heap clear of information we no longer need in long term memory.&lt;/p&gt;

&lt;p&gt;Despite closures needing more memory and computational power, there are some great reasons to use them (which I'll cover in a moment below).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-all-closures-are-made-the-same"&gt;
  &lt;/a&gt;
  Not All Closures Are Made The Same
&lt;/h2&gt;

&lt;p&gt;Closures are particularly easy in Javascript.&lt;/p&gt;

&lt;p&gt;You can use &lt;a href="https://letoverlambda.com/"&gt;&lt;em&gt;let over lambda&lt;/em&gt;&lt;/a&gt; to create a closure in &lt;a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)"&gt;Lisp&lt;/a&gt; (the second oldest higher-level programming language). &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;nonlocal&lt;/code&gt; keyword is helpful to gain access to variables normally outside of scope in &lt;a href="https://zetcode.com/python/python-closures/"&gt;python closures&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In C# however, &lt;a href="https://www.simplethread.com/c-closures-explained/"&gt;closures&lt;/a&gt; must explicitly be &lt;em&gt;enclosed&lt;/em&gt; with its lexical environment, through "binding" variables.&lt;/p&gt;

&lt;p&gt;You get the idea. For now, we'll continue to use Javascript.&lt;br&gt;
&lt;span id="uses"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-makes-closures-uniquely-useful"&gt;
  &lt;/a&gt;
  What Makes Closures Uniquely Useful?
&lt;/h2&gt;

&lt;p&gt;There is surprisingly sparse info online about &lt;em&gt;uses&lt;/em&gt; for closures. It's odd! While I'm sure there are many more uses, there seem to be at least two compelling ones I'd like to discuss:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Function factories&lt;/li&gt;
&lt;li&gt;Namespacing private functions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#function-factories"&gt;
  &lt;/a&gt;
  Function Factories
&lt;/h3&gt;

&lt;p&gt;Function factories are functions that return other functions based on various conditions. I'd like to share how I used a function factory in a recent project. But first, let's look at a simple example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we call &lt;code&gt;factory(5)&lt;/code&gt;, it returns &lt;code&gt;(b) =&amp;gt; 5 % b&lt;/code&gt;. &lt;br&gt;
If we call &lt;code&gt;factory(4)&lt;/code&gt; it returns &lt;code&gt;(b) =&amp;gt; 4 + b&lt;/code&gt;. &lt;br&gt;
And if we call &lt;code&gt;factory(4)(2)&lt;/code&gt; we can see that:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;factory(4) = (b) =&amp;gt; 4 + b&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;factory(4)(2)&lt;/code&gt; becomes &lt;code&gt;((b) =&amp;gt; 4 + b)(2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Resulting in &lt;code&gt;(2) =&amp;gt; 4 + 2&lt;/code&gt;. Which returns &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The important note here is that function factories return &lt;em&gt;functions&lt;/em&gt; that can accept even more info.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#a-closure-function-factory-in-use"&gt;
  &lt;/a&gt;
  A Closure Function Factory In Use
&lt;/h4&gt;

&lt;p&gt;I recently built a notes app with a react front end using &lt;code&gt;semantic-ui-react&lt;/code&gt;. The new note form included a dropdown menu. (Bear with me here.) &lt;/p&gt;

&lt;p&gt;&lt;code&gt;semantic-ui-react&lt;/code&gt;'s dropdown menu requires an array of &lt;code&gt;options&lt;/code&gt;. Once I fetched data from my database and generated the options array, it looked something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;option1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;option2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can feed this array to the dropdown like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Dropdown&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dropdown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;multiple&lt;/span&gt;
    &lt;span class="nx"&gt;search&lt;/span&gt;
    &lt;span class="nx"&gt;selection&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(I've simplified all of these snippets of code for readability.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This dropdown will allow you to make multiple selections. It turns out the &lt;code&gt;value&lt;/code&gt; attribute of &lt;code&gt;semanitic-ui-react&lt;/code&gt;'s dropdown menu is an array of &lt;code&gt;id&lt;/code&gt;s from the objects in &lt;code&gt;options&lt;/code&gt;. I wanted to store whole objects from &lt;code&gt;options&lt;/code&gt; in state instead. &lt;/p&gt;

&lt;p&gt;I wanted just one change handler function for all form elements. Closure to the rescue.&lt;/p&gt;

&lt;p&gt;Every form element executes the same function on change, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleMaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"name" matches the name attribute of the form element it's associated with for style reasons.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;handleMaker&lt;/code&gt; is a function factory that returns a &lt;em&gt;different&lt;/em&gt; function based on which form element name is passed in. The function &lt;em&gt;returned&lt;/em&gt; from &lt;code&gt;handleMaker&lt;/code&gt; accepts the onChange event as an argument.&lt;/p&gt;

&lt;p&gt;Here is a simplified version of the function factory I use in the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleMaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;note&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setFormData&lt;/span&gt;&lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collections&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setFormData&lt;/span&gt;&lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;())});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dropdown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setFormData&lt;/span&gt;&lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})})&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oops, something went wrong!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are other cases here, showing how a function factory can help handle all sorts of special cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#namespacing-private-functions"&gt;
  &lt;/a&gt;
  Namespacing private functions
&lt;/h3&gt;

&lt;p&gt;Private functions make apps more secure, disallowing ill-intentioned users from calling functions or methods that can mutate the app's state unhelpfully (or, in some cases, even inject code). &lt;/p&gt;

&lt;p&gt;Ruby has a &lt;code&gt;private&lt;/code&gt; keyword to make methods private. Javascript didn't &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields"&gt;until recently&lt;/a&gt;. But that applies to classes. When we're not inside classes (or running on IE, lol), we can still &lt;a href="https://www.oreilly.com/library/view/learning-javascript-design/9781449334840/ch13s15.html"&gt;namespace private javascript functions&lt;/a&gt; with closures:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;namespacer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;changer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;public1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;changer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;public2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;changer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;public3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we can see that namespacer is actually an object with closures as keys, since the anonymous function on line 1 is immediately invoked on the last line. &lt;/p&gt;

&lt;p&gt;We can call the public functions like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;namespacer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;public1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 200&lt;/span&gt;
&lt;span class="nx"&gt;namespacer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;public2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;span class="nx"&gt;namespacer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;public3&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we would be unable to call &lt;code&gt;changer&lt;/code&gt; directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;namespacer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// TypeError: undefined is not a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or access &lt;code&gt;num&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;namespacer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Presto! Private functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closures-in-interviews"&gt;
  &lt;/a&gt;
  Closures In Interviews
&lt;/h2&gt;

&lt;p&gt;If you are new to web dev and preparing for interviews, it may interest you to know that there is a common interview question involving closures:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you guess what &lt;code&gt;console.log&lt;/code&gt;s here?&lt;/p&gt;

&lt;p&gt;If you guessed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... you'd be right! We might expect 0, 1, 2 but that won't happen here. Each time we go through the loop, &lt;code&gt;setTimeout&lt;/code&gt; waits a whole 2 seconds before running. The &lt;code&gt;i&lt;/code&gt; inside of the &lt;code&gt;setTimeout&lt;/code&gt; callback function refers to the &lt;code&gt;i&lt;/code&gt; from the loop. In 2 seconds, the loop will have run all 3 times, leaving &lt;code&gt;i&lt;/code&gt; at 2 when all three &lt;code&gt;setTimeout&lt;/code&gt;s eventually run.&lt;/p&gt;

&lt;p&gt;There are a number of ways we can fix this. One way is to wrap the callback function inside of &lt;code&gt;setTimeout&lt;/code&gt; in an immediately invoked function that accepts &lt;code&gt;i&lt;/code&gt; as its argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does this accomplish? Wrapping the callback function in an immediately invoked function ensures that the current value of &lt;code&gt;i&lt;/code&gt; is passed in and kept in the state of the &lt;code&gt;setTimeout&lt;/code&gt; function. It is stored there for later use.&lt;/p&gt;

&lt;p&gt;Another way we can do this involves wrapping the entirety of the &lt;code&gt;setTimeout&lt;/code&gt; in the same immediately invoked function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This accomplishes the same result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-final-musing"&gt;
  &lt;/a&gt;
  A Final Musing:
&lt;/h2&gt;

&lt;p&gt;I'm curious to know whether there is a language in which creating a closure is impossible. So far my Googling efforts haven't gotten me far. I'd be grateful for your thoughts on the topic.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>List Of HTTP Status Codes</title>
      <author>capscode</author>
      <pubDate>Thu, 16 Dec 2021 01:57:04 +0000</pubDate>
      <link>https://dev.to/capscode/list-of-http-status-codes-4ph</link>
      <guid>https://dev.to/capscode/list-of-http-status-codes-4ph</guid>
      <description>&lt;p&gt;Hello Devs,&lt;/p&gt;

&lt;p&gt;In this blog I am going to discuss about the https status code in an API calls.&lt;br&gt;
I know, you all must have worked on many API's till date and also checked the Network tab in browser's Developers tool to check whether the HTTP request is success or its failed. But have you ever seen something called status code in the network tab, which contain some random numbers like &lt;code&gt;200&lt;/code&gt;, &lt;code&gt;404&lt;/code&gt;, &lt;code&gt;501&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;In this blog I am going to discuss about these numbers, what these numbers are and what these numbers denotes.&lt;br&gt;
So without wasting time, lets get deep dive into the tutorial.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-status-code-"&gt;
  &lt;/a&gt;
  What is status code ?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt; response status codes indicates that whether the request made by you or your browser has been successfully completed or not.&lt;br&gt;
Depending on the response status you will get the different status code.&lt;br&gt;
Status codes are categorized in the following 5 groups.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Informational responses (status code between 100‚Äì199)&lt;/li&gt;
&lt;li&gt;Successful responses (status code between 200‚Äì299)&lt;/li&gt;
&lt;li&gt;Redirects (status code between 300‚Äì399)&lt;/li&gt;
&lt;li&gt;Client errors (status code between 400‚Äì499)&lt;/li&gt;
&lt;li&gt;Server errors (status code between 500‚Äì599)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#lets-see-some-of-the-general-status-code-in-each-category"&gt;
  &lt;/a&gt;
  Lets see some of the general status code in each category.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#1-informational-responses-status-code-between-100199"&gt;
  &lt;/a&gt;
  1. Informational responses (status code between 100‚Äì199)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;100&lt;/code&gt; Continue, if status code is 100, it indicates that the response is OK and you can continue to make other request.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;101&lt;/code&gt; Switching Protocols&lt;/p&gt;

&lt;p&gt;&lt;code&gt;102&lt;/code&gt; Processing&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-successful-responses-status-code-between-200299"&gt;
  &lt;/a&gt;
  2. Successful responses (status code between 200‚Äì299)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;200&lt;/code&gt; OK&lt;/p&gt;

&lt;p&gt;&lt;code&gt;201&lt;/code&gt; Created&lt;/p&gt;

&lt;p&gt;&lt;code&gt;202&lt;/code&gt; Accepted&lt;/p&gt;

&lt;p&gt;&lt;code&gt;203&lt;/code&gt; Non-authoritative Information&lt;/p&gt;

&lt;p&gt;&lt;code&gt;204&lt;/code&gt; No Content&lt;/p&gt;

&lt;p&gt;&lt;code&gt;205&lt;/code&gt; Reset Content&lt;/p&gt;

&lt;p&gt;&lt;code&gt;206&lt;/code&gt; Partial Content&lt;/p&gt;

&lt;p&gt;&lt;code&gt;207&lt;/code&gt; Multi-Status&lt;/p&gt;

&lt;p&gt;&lt;code&gt;208&lt;/code&gt; Already Reported&lt;/p&gt;

&lt;p&gt;&lt;code&gt;226&lt;/code&gt; IM Used&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3redirects-status-code-between-300399"&gt;
  &lt;/a&gt;
  3.Redirects (status code between 300‚Äì399)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;300&lt;/code&gt; Multiple Choices&lt;/p&gt;

&lt;p&gt;&lt;code&gt;301&lt;/code&gt; Moved Permanently&lt;/p&gt;

&lt;p&gt;&lt;code&gt;302&lt;/code&gt; Found&lt;/p&gt;

&lt;p&gt;&lt;code&gt;303&lt;/code&gt; See Other&lt;/p&gt;

&lt;p&gt;&lt;code&gt;304&lt;/code&gt; Not Modified&lt;/p&gt;

&lt;p&gt;&lt;code&gt;305&lt;/code&gt; Use Proxy&lt;/p&gt;

&lt;p&gt;&lt;code&gt;307&lt;/code&gt; Temporary Redirect&lt;/p&gt;

&lt;p&gt;&lt;code&gt;308&lt;/code&gt; Permanent Redirect&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-client-errors-status-code-between-400499"&gt;
  &lt;/a&gt;
  4. Client errors (status code between 400‚Äì499)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;400&lt;/code&gt; Bad Request&lt;/p&gt;

&lt;p&gt;&lt;code&gt;401&lt;/code&gt; Unauthorized&lt;/p&gt;

&lt;p&gt;&lt;code&gt;402&lt;/code&gt; Payment Required&lt;/p&gt;

&lt;p&gt;&lt;code&gt;403&lt;/code&gt; Forbidden&lt;/p&gt;

&lt;p&gt;&lt;code&gt;404&lt;/code&gt; Not Found&lt;/p&gt;

&lt;p&gt;&lt;code&gt;405&lt;/code&gt; Method Not Allowed&lt;/p&gt;

&lt;p&gt;&lt;code&gt;406&lt;/code&gt; Not Acceptable&lt;/p&gt;

&lt;p&gt;&lt;code&gt;407&lt;/code&gt; Proxy Authentication Required&lt;/p&gt;

&lt;p&gt;&lt;code&gt;408&lt;/code&gt; Request Timeout&lt;/p&gt;

&lt;p&gt;&lt;code&gt;409&lt;/code&gt; Conflict&lt;/p&gt;

&lt;p&gt;&lt;code&gt;410&lt;/code&gt; Gone&lt;/p&gt;

&lt;p&gt;&lt;code&gt;411&lt;/code&gt; Length Required&lt;/p&gt;

&lt;p&gt;&lt;code&gt;412&lt;/code&gt; Precondition Failed&lt;/p&gt;

&lt;p&gt;&lt;code&gt;413&lt;/code&gt; Payload Too Large&lt;/p&gt;

&lt;p&gt;&lt;code&gt;414&lt;/code&gt; Request-URI Too Long&lt;/p&gt;

&lt;p&gt;&lt;code&gt;415&lt;/code&gt; Unsupported Media Type&lt;/p&gt;

&lt;p&gt;&lt;code&gt;416&lt;/code&gt; Requested Range Not Satisfiable&lt;/p&gt;

&lt;p&gt;&lt;code&gt;417&lt;/code&gt; Expectation Failed&lt;/p&gt;

&lt;p&gt;&lt;code&gt;418&lt;/code&gt; I'm a teapot&lt;/p&gt;

&lt;p&gt;&lt;code&gt;421&lt;/code&gt; Misdirected Request&lt;/p&gt;

&lt;p&gt;&lt;code&gt;422&lt;/code&gt; Unprocessable Entity&lt;/p&gt;

&lt;p&gt;&lt;code&gt;423&lt;/code&gt; Locked&lt;/p&gt;

&lt;p&gt;&lt;code&gt;424&lt;/code&gt; Failed Dependency&lt;/p&gt;

&lt;p&gt;&lt;code&gt;426&lt;/code&gt; Upgrade Required&lt;/p&gt;

&lt;p&gt;&lt;code&gt;428&lt;/code&gt; Precondition Required&lt;/p&gt;

&lt;p&gt;&lt;code&gt;429&lt;/code&gt; Too Many Requests&lt;/p&gt;

&lt;p&gt;&lt;code&gt;431&lt;/code&gt; Request Header Fields Too Large&lt;/p&gt;

&lt;p&gt;&lt;code&gt;444&lt;/code&gt; Connection Closed Without Response&lt;/p&gt;

&lt;p&gt;&lt;code&gt;451&lt;/code&gt; Unavailable For Legal Reasons&lt;/p&gt;

&lt;p&gt;&lt;code&gt;499&lt;/code&gt; Client Closed Request&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-server-errors-status-code-between-500599"&gt;
  &lt;/a&gt;
  5. Server errors (status code between 500‚Äì599)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;500&lt;/code&gt; Internal Server Error&lt;/p&gt;

&lt;p&gt;&lt;code&gt;501&lt;/code&gt; Not Implemented&lt;/p&gt;

&lt;p&gt;&lt;code&gt;502&lt;/code&gt; Bad Gateway&lt;/p&gt;

&lt;p&gt;&lt;code&gt;503&lt;/code&gt; Service Unavailable&lt;/p&gt;

&lt;p&gt;&lt;code&gt;504&lt;/code&gt; Gateway Timeout&lt;/p&gt;

&lt;p&gt;&lt;code&gt;505&lt;/code&gt; HTTP Version Not Supported&lt;/p&gt;

&lt;p&gt;&lt;code&gt;506&lt;/code&gt; Variant Also Negotiates&lt;/p&gt;

&lt;p&gt;&lt;code&gt;507&lt;/code&gt; Insufficient Storage&lt;/p&gt;

&lt;p&gt;&lt;code&gt;508&lt;/code&gt; Loop Detected&lt;/p&gt;

&lt;p&gt;&lt;code&gt;510&lt;/code&gt; Not Extended&lt;/p&gt;

&lt;p&gt;&lt;code&gt;511&lt;/code&gt; Network Authentication Required&lt;/p&gt;

&lt;p&gt;&lt;code&gt;599&lt;/code&gt; Network Connect Timeout Error&lt;/p&gt;

&lt;p&gt;Thank you for reading this far. These HTTP status code are the most commonly used status codes while working with the API calls. If you want to learn more about the other staus codes, please visit &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;MDN Doc&lt;/a&gt;&lt;br&gt;
If you find this article useful, like and share this article. Someone could find it useful too. If you find anything technically inaccurate please feel free to reach out to us.&lt;/p&gt;

&lt;p&gt;Hope its a nice and informative read for you.&lt;br&gt;
VISIT &lt;a href="https://www.capscode.in/blog"&gt;https://www.capscode.in/blog&lt;/a&gt; TO LEARN MORE...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-my-article-helped-you"&gt;
  &lt;/a&gt;
  IF MY ARTICLE HELPED YOU
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/capscode"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;source/ credit: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
CapsCode&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
