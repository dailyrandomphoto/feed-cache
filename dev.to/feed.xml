<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Instrumenting Your Node.js Apps with OpenTelemetry</title>
      <author>Daniel Kim</author>
      <pubDate>Thu, 24 Jun 2021 16:21:26 +0000</pubDate>
      <link>https://dev.to/newrelic/instrumenting-your-node-js-apps-with-opentelemetry-5flb</link>
      <guid>https://dev.to/newrelic/instrumenting-your-node-js-apps-with-opentelemetry-5flb</guid>
      <description>&lt;p&gt;As systems become increasingly complex, it’s increasingly important to get visibility into the inner workings of systems to increase performance and reliability. Distributed tracing shows how each request passes through the application, giving developers context to resolve incidents, showing what parts of their system are slow or broken. &lt;/p&gt;

&lt;p&gt;A single trace shows the path a request makes, from the browser or mobile device down to the database. By looking at traces as a whole, developers can quickly discover which parts of their application is having the biggest impact on performance as it affects your users’ experiences.&lt;/p&gt;

&lt;p&gt;That’s pretty abstract, right? So let’s zero in on a specific example to help clarify things. We’ll use OpenTelemetry to generate and view traces from a small sample application.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/r8UvWSX3KA8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spinning-up-our-movies-app"&gt;
  &lt;/a&gt;
  Spinning up our Movies App
&lt;/h2&gt;

&lt;p&gt;We have written a simple application consisting of two microservices, movies and dashboard. The &lt;code&gt;movies&lt;/code&gt; service provides the name of movies and their genre in JSON format, while the &lt;code&gt;dashboard&lt;/code&gt; service returns the results from the movies service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/lazyplatypus/Open-Telemetry-Demo"&gt;👉 Clone the repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To spin up the app, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i
$ node dashboard.js
$ node movies.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the variable &lt;code&gt;delay&lt;/code&gt;, built into the movies microservice that causes random delays returning the JSON.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;const express = require('express')
const app = express()
const port = 3000
&lt;/span&gt;
app.get('/movies', async function (req, res) {
   res.type('json')
&lt;span class="gi"&gt;+  var delay = Math.floor( ( Math.random() * 2000 ) + 100);
+  setTimeout((() =&amp;gt; {
&lt;/span&gt;      res.send(({movies: [
         { name: 'Jaws', genre: 'Thriller'},
         { name: 'Annie', genre: 'Family'},
         { name: 'Jurassic Park', genre: 'Action'},
      ]}))
&lt;span class="gi"&gt;+  }), delay)
&lt;/span&gt;&lt;span class="err"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tracing-http-requests-with-open-telemetry"&gt;
  &lt;/a&gt;
  Tracing HTTP Requests with Open Telemetry
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry traces incoming and outgoing HTTP requests by attaching IDs. To do this, we need to &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Instantiate a trace provider&lt;/strong&gt; to get data flowing. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configure that trace provider with an exporter&lt;/strong&gt; to send telemetry data to another system where you can view, store, and analyze it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Install OpenTelemetry plugins&lt;/strong&gt; to instrument specific node module(s) to automatically instrument various frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-our-trace-provider-and-configuring-it-with-an-exporter"&gt;
  &lt;/a&gt;
  Step 1: Create our trace provider and configuring it with an exporter
&lt;/h3&gt;

&lt;p&gt;We’ll start by creating our trace provider and configuring it with an exporter. To do this, we’ll need to install&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install @opentelemetry/node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#opentelemetry-auto-instrumentation-package-for-nodejs"&gt;
  &lt;/a&gt;
  OpenTelemetry auto instrumentation package for NodeJS
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;@opentelemetry/node&lt;/code&gt; module provides auto-instrumentation for Node.js applications, which automatically identifies frameworks (Express), common protocols (HTTP), databases, and other libraries within your application. This module uses other community-contributed plugins to automatically instrument your application to automatically produce spans and provide end-to-end tracing with just a few lines of code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#opentelemetry-plugins"&gt;
  &lt;/a&gt;
  OpenTelemetry Plugins
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install @opentelemetry/plugin-http
$ npm install @opentelemetry/plugin-express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;@opentelemetry/plugin-http&lt;/code&gt; plugin generates trace data from NodeJS’s underlying HTTP handling APIs that both send, and handle requests. The &lt;code&gt;@opentelemetry/plugin-express&lt;/code&gt; plugin generates trace data from requests sent through the express framework. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-adding-the-trace-provider-and-the-span-processor"&gt;
  &lt;/a&gt;
  Step 2: Adding the Trace Provider and the Span Processor
&lt;/h3&gt;

&lt;p&gt;Add this code snippet to &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a trace provider&lt;/li&gt;
&lt;li&gt;adds a span processor to the trace provider&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This code gets data out of your local application and exports into your console!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NodeTracerProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ConsoleSpanExporter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SimpleSpanProcessor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/tracing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NodeTracerProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;consoleExporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ConsoleSpanExporter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spanProcessor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimpleSpanProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;consoleExporter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addSpanProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spanProcessor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we add this code snippet, whenever we reload &lt;code&gt;http://localhost:3001/dashboard&lt;/code&gt;, we should get something like this - beautiful things on the console. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VfuBUj0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fklulsur2tviyd32wlnf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VfuBUj0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fklulsur2tviyd32wlnf.gif" alt="giphy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3a-spinning-up-zipkin"&gt;
  &lt;/a&gt;
  Step 3a: Spinning up Zipkin
&lt;/h3&gt;

&lt;p&gt;Let's spin up a Zipkin instance with the &lt;a href="https://hub.docker.com/r/openzipkin/zipkin/"&gt;Docker Hub Image&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run -d -p 9411:9411 openzipkin/zipkin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you’ll have a Zipkin instance up and running. You’ll be able to load it by pointing your web browser to &lt;a href="http://localhost:9411"&gt;http://localhost:9411&lt;/a&gt;. You’ll see something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k-w60WYa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xs7db7lo5gck3i2ty12e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k-w60WYa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xs7db7lo5gck3i2ty12e.png" alt="Screenshot of Zipkin"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-exporting-to-zipkin"&gt;
  &lt;/a&gt;
  Step 3: Exporting to Zipkin
&lt;/h3&gt;

&lt;p&gt;While it’s neat, spans in a terminal window are a poor way to have visibility into a service. In our code above, the following lines are what added a console exporter to our system. Let's now ship this data to Zipkin. &lt;/p&gt;

&lt;p&gt;In this code snippet, we are instantiating a Zipkin exporter, and then adding it to the trace provider. The great thing about OpenTelemetry is that it's backend agnostic, meaning you can have as many different exporters configured as you like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;const { NodeTracerProvider } = require('@opentelemetry/node')
const { ConsoleSpanExporter, SimpleSpanProcessor } = require('@opentelemetry/tracing')
&lt;/span&gt;&lt;span class="gi"&gt;+ const { ZipkinExporter } = require('@opentelemetry/exporter-zipkin')
&lt;/span&gt;&lt;span class="p"&gt;const provider = new NodeTracerProvider()
const consoleExporter = new ConsoleSpanExporter()
const spanProcessor = new SimpleSpanProcessor(consoleExporter)
provider.addSpanProcessor(spanProcessor)
provider.register()
&lt;/span&gt;
+ const zipkinExporter = new ZipkinExporter({
&lt;span class="gi"&gt;+  url: 'http://localhost:9411/api/v2/spans',
+  serviceName: 'movies-service'
&lt;/span&gt;&lt;span class="err"&gt;})&lt;/span&gt;

&lt;span class="gi"&gt;+ const zipkinProcessor = new SimpleSpanProcessor(zipkinExporter)
+ provider.addSpanProcessor(zipkinProcessor)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you make these changes, let's visit our Zipkin instance at localhost:9411, start our application back up and request some URLs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nlXR2uQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scuaqg2k6y3zwwzospt4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nlXR2uQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scuaqg2k6y3zwwzospt4.png" alt="Screen Shot 2021-06-23 at 3.54.32 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-using-the-opentelemetry-collector-to-export-the-data-into-new-relic"&gt;
  &lt;/a&gt;
  Step 4: Using the OpenTelemetry Collector to export the data into New Relic
&lt;/h3&gt;

&lt;p&gt;What happens if we want to send the OpenTelemetry data to another backend where you didn't have to manage all of your own telemetry data? &lt;/p&gt;

&lt;p&gt;Well, the amazing contributors to OpenTelemetry have come up with a solution to fix this!  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W5mfwoZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2o98se1kb01bsjni2j6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W5mfwoZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2o98se1kb01bsjni2j6.png" alt="Group 1792"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The OpenTelemetry Collector is a way for developers to receive, process and export telemetry data to multiple backends. It supports multiple open-source observability data formats like Zipkin, Jaeger, Prometheus, Fluent Bit sending it to one or more open-source or commercial back-ends. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#new-relic"&gt;
  &lt;/a&gt;
  New Relic
&lt;/h4&gt;

&lt;p&gt;New Relic is a platform for you to analyze, store, and use your telemetry data for Free, forever. &lt;a href="https://newrelic.com/signup?utm_campaign=fy20-q1-amer-obsv-video-free_code_camp-video-&amp;amp;utm_medium=video&amp;amp;utm_source=free_code_camp&amp;amp;utm_content=video&amp;amp;fiscal_year=fy20&amp;amp;quarter=q1&amp;amp;program=obsv&amp;amp;audience=none&amp;amp;creative=none&amp;amp;placement=none&amp;amp;targeting=none&amp;amp;ad_type=none&amp;amp;geo=amer"&gt;Sign up now!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BCEZEo2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/692fiew3ync926gcfuw1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCEZEo2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/692fiew3ync926gcfuw1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#configuring-the-opentelemetry-collector-with-new-relic"&gt;
  &lt;/a&gt;
  Configuring the OpenTelemetry Collector with New Relic
&lt;/h4&gt;

&lt;p&gt;Clone the &lt;a href="https://github.com/lazyplatypus/OpenTelemetry-NR-Exporter"&gt;OpenTelemetry Collector with New Relic Exporter&lt;/a&gt; and spin up the docker container, making sure to export the New Relic API key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export NEW_RELIC_API_KEY=&amp;lt;INSERT-API-KEY-HERE&amp;gt;
docker-compose -f docker-compose.yaml up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡 Make sure to change the reporting URL from &lt;code&gt;http://localhost:9411/api/v2/spans&lt;/code&gt; to &lt;code&gt;http://localhost:9411/&lt;/code&gt; in both &lt;code&gt;dashboard.js&lt;/code&gt; and &lt;code&gt;movies.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;const zipkinExporter = new ZipkinExporter({
&lt;/span&gt;&lt;span class="gd"&gt;- url: 'http://localhost:9411/api/v2/spans',
&lt;/span&gt;&lt;span class="gi"&gt;+ url: 'http://localhost:9411',
&lt;/span&gt;  serviceName: 'movies-service'
&lt;span class="err"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-5-look-at-your-beautiful-data"&gt;
  &lt;/a&gt;
  Step 5: Look at your ✨ beautiful data ✨
&lt;/h1&gt;

&lt;p&gt;Navigate to the "Explorer" tab on &lt;a href="https://one.newrelic.com"&gt;New Relic One&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8IMOhPDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/im53j8pdag4sl034us77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8IMOhPDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/im53j8pdag4sl034us77.png" alt="New Relic One Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on the service, you should be able to see some ✨beautiful✨ traces!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--csNPyIiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fati4q1acf3pqn675yhz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--csNPyIiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fati4q1acf3pqn675yhz.png" alt="OTel Traces"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;Instrumenting your app with Open Telemetry makes it easy to figure out what is going wrong when parts of your application is slow, broken, or both. With the collector, you can forward your data anywhere, so you are never locked into a vendor. You can choose to spin up an open source backend, use a proprietary backend like New Relic, or just roll your own backend! Whatever you choose, I wish you well you in journey to instrument EVERYTHING! &lt;/p&gt;

</description>
      <category>opentelemetry</category>
      <category>observability</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>9 Technologies to Check Out for Your Next.js &amp; React Project</title>
      <author>Cole Gawin</author>
      <pubDate>Thu, 24 Jun 2021 15:57:08 +0000</pubDate>
      <link>https://dev.to/chroline/9-technologies-to-check-out-for-your-next-js-react-project-2o78</link>
      <guid>https://dev.to/chroline/9-technologies-to-check-out-for-your-next-js-react-project-2o78</guid>
      <description>&lt;p&gt;&lt;strong&gt;Libraries, frameworks, and services that will take your project to the next level.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next.js is a great technology by itself, as it offers many great features that makes creating fast and versatile React apps and websites easily. However, the beauty of the Javascript ecosystem is that there is an abundance of hidden (and not-so-hidden) gems that will enhance your experience as a developer and the experience for the end user. In this article, I will present 9 technologies that can enhance the frontend, backend, and full-stack development and experience for your next project with Next.js.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#goober-a-smaller-option-for-cssinjs"&gt;
  &lt;/a&gt;
  goober: a smaller option for CSS-in-JS
&lt;/h3&gt;

&lt;p&gt;The React ecosystem has become bloated with different styling options, with arguably the most popular being CSS Modules, emotion, and styled-components. However, a lesser-known competitor to these options has the same core capabilities as other CSS-in-JS libraries, with the differentiating feature being its size: compared to 11kB and 12kB for emotion and styled-components respectively, goober comes in at less than 1kB! This will drastically reduce the bundle size of your web app and will ultimately lead to faster loading times and a better user experience all around.&lt;/p&gt;

&lt;p&gt;Check out the project at &lt;a href="https://github.com/cristianbote/goober"&gt;https://github.com/cristianbote/goober&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preact-a-fast-tiny-alternative-to%C2%A0react"&gt;
  &lt;/a&gt;
  Preact: a fast, tiny alternative to React
&lt;/h3&gt;

&lt;p&gt;Preact offers the same advantages as the aforementioned library: it offers the same core capabilities as its more popular competitor, with an immensely smaller footprint. Together, &lt;a href="https://bundlephobia.com/package/react@17.0.2"&gt;React&lt;/a&gt; and &lt;a href="https://bundlephobia.com/package/react-dom@17.0.2"&gt;React-DOM&lt;/a&gt; have a bundle size of 42.2kB (!), while Preact is about a 10th of a size at ~4kB. Preact offers direct compatibility with React and React-DOM, so you can easibly substitute React for Preact in your Next.js app.&lt;/p&gt;

&lt;p&gt;Learn more about Preact at &lt;a href="https://preactjs.com/"&gt;https://preactjs.com&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chakraui-predesigned-and-highlycustomizable-ui-components"&gt;
  &lt;/a&gt;
  Chakra-UI: predesigned and highly-customizable UI components
&lt;/h3&gt;

&lt;p&gt;Pre-made CSS frameworks and component libraries are growing increasingly popular in the world of web and mobile design, and rightfully so. You no longer have to hire a designer to create visually-appealing and attention-grabbing apps and websites. There are many component libraries available for React that come with pre-designed components and styles with which you can design and code your app, including &lt;a href="https://github.com/ant-design/ant-design"&gt;Ant Design&lt;/a&gt;, &lt;a href="https://github.com/segmentio/evergreen"&gt;Evergreen&lt;/a&gt;, and &lt;a href="https://github.com/react-bootstrap/react-bootstrap"&gt;React-Bootstrap&lt;/a&gt; built on top of the &lt;a href="https://getbootstrap.com/"&gt;bootstrap.css library.&lt;/a&gt; However, Chakra-UI is making a name for itself amongst all of the other component libraries because of its infinite modularity and customizability. Its components take inspiration from the likes of &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt; and &lt;a href="https://tailwindui.com/"&gt;TailwindUI&lt;/a&gt;, and you can customize and tweak them to match your envisioned design.&lt;/p&gt;

&lt;p&gt;See documentation and examples at &lt;a href="https://chakra-ui.com/"&gt;https://chakra-ui.com&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#nestjs-a-versatile-web-framework-for%C2%A0nodejs"&gt;
  &lt;/a&gt;
  Nest.js: a versatile web framework for Node.js
&lt;/h3&gt;

&lt;p&gt;By itself, Next.js offers great options for writing lambda functions to power the backend of your application. However, the default offerings can be limiting, especially if your backend involves more complex logic than what is allowed by straightforward lambda functions. Nest.js is a popular framework made to be used for building complex server-side applications, and can be integrated into Next.js to combine the powers of both. Nest.js is inspired by the modularity of Angular, and they offer &lt;a href="https://docs.nestjs.com/"&gt;great documentation&lt;/a&gt; that helps with overcome the learning curve that comes with any new framework.&lt;/p&gt;

&lt;p&gt;Visit their official website at &lt;a href="https://nestjs.com/"&gt;https://nestjs.com&lt;/a&gt;. &lt;strong&gt;Bonus&lt;/strong&gt;: for an example of how to integrate Nest.js into Next.js, follow Simon Knott’s great tutorial at &lt;a href="https://simonknott.de/articles/Integrating-NextJS-with-NestJS.html"&gt;https://simonknott.de/articles/Integrating-NextJS-with-NestJS.html&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prisma-futureproof-orm-and-database%C2%A0client"&gt;
  &lt;/a&gt;
  Prisma: future-proof ORM and database client
&lt;/h3&gt;

&lt;p&gt;The features offered by Prisma dramatically improve the developer experience of working with SQL databases. Prisma offers a schema language that allows you to easily define models that will be represented in your database, as well as the Prisma database client. Because the schema you create integrates with the Prisma Client, you can pragmatically make type-safe queries and mutations. Additionally, Prisma offers a database migration service that will automatically generate schemas for your database based on pre-existing data, and a database browser to view and manipulate your database.&lt;/p&gt;

&lt;p&gt;Learn more about the features offered by Prisma at &lt;a href="https://www.prisma.io/"&gt;https://www.prisma.io&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supabase-an-opensource-alternative-to%C2%A0firebase"&gt;
  &lt;/a&gt;
  Supabase: an open-source alternative to Firebase
&lt;/h3&gt;

&lt;p&gt;Firebase is one of the most popular options for backend-as-a-service because of its great feature set and its large community and ecosystem. However, by using Firebase or its main competitor AWS Amplify, you can unknowingly fall victim to vendor lock-in, which will restrict your ability to grow and utilize other services later on. Supabase, on the other hand, is a completely open-source alternative to Firebase. The advantages of Supabase being open-source software is that it is constantly audited by the community for security flaws and vulnerabilities, in addition to not being locked into the ecosystem of Google Cloud or AWS.&lt;/p&gt;

&lt;p&gt;Check out the Supabase project at &lt;a href="https://supabase.io/"&gt;https://supabase.io&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#fullstack"&gt;
  &lt;/a&gt;
  Full-stack
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#blitzjs-a-fullstack-react-framework-built-ontop-of%C2%A0nextjs"&gt;
  &lt;/a&gt;
  Blitz.js: a full-stack React framework built on-top of Next.js
&lt;/h3&gt;

&lt;p&gt;As previously discussed, the options provided by Next.js in terms of backend development are pretty limited. Nest.js can certainly solve this problem solely on the server-side, but if you are looking for a more comprehensive solution that integrates both the frontend and backend, consider Blitz.js. As described by the official project website, “Blitz is a batteries-included framework that’s inspired by Ruby on Rails, is built on Next.js, and features a “Zero-API” data layer abstraction that eliminates the need for REST/GraphQL.” The purpose of Blitz.js was to be able to seamlessly integrate complex backend logic into your frontend React app. Blitz.js is a relatively opinionated framework, which means that much of the file and folder structure of your app is dictated by the requirements of the framework; that being said, the structure that Blitz.js incorporates will make your code organized and easy to understand.&lt;/p&gt;

&lt;p&gt;Watch introductory videos and read about the features of Blitz.js at &lt;a href="https://blitzjs.com/"&gt;https://blitzjs.com&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#swr-realtime-updates-without-sacrificing-ux"&gt;
  &lt;/a&gt;
  SWR: real-time updates without sacrificing UX
&lt;/h3&gt;

&lt;p&gt;As &lt;a href="https://www.karlton.org/2017/12/naming-things-hard/"&gt;the famous quote by Phil Karlton&lt;/a&gt; goes, “There are only two hard things in Computer Science: cache invalidation and naming things.” Stale-while-revalidate, or SWR for short, attempts to solve the first of those two challenges. This term originated in &lt;a href="https://tools.ietf.org/html/rfc5861"&gt;HTTP RFC 5861&lt;/a&gt;, which describes a strategy to manage cache invalidation and revalidation. The React SWR library, developed by the team behind Next.js, describes the advantages of using SWR: “With SWR, components will get a stream of data updates constantly and automatically. And the UI will be always fast and reactive.” Using SWR in your Next.js app, you can implement a real-time experience to your app with automatic updates.&lt;/p&gt;

&lt;p&gt;Learn more about SWR and the React SWR library at &lt;a href="https://github.com/vercel/swr"&gt;https://github.com/vercel/swr&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphql-apollo-improve-dx-and%C2%A0ux"&gt;
  &lt;/a&gt;
  GraphQL + Apollo: improve DX and UX
&lt;/h3&gt;

&lt;p&gt;By now, you have probably heard of the advantages offered by implementing GraphQL into your backend API. GraphQL allows you to easily query and mutate data by calling a single endpoint on your API. With GraphQL, you only receive the data you need, reducing the size of the HTTP response sent from your API, thereby making your app quicker. Using Next.js API routes in addition to &lt;a href="https://www.apollographql.com/docs/apollo-server/v1/servers/micro/"&gt;apollo-server-micro&lt;/a&gt;, you can easily implement a GraphQL backend to your Next.js app that integrates with Apollo client.&lt;/p&gt;

&lt;p&gt;View the Next.js &lt;code&gt;api-routes-graphql&lt;/code&gt; example at &lt;a href="https://github.com/vercel/next.js/tree/canary/examples/api-routes-graphql"&gt;https://github.com/vercel/next.js/tree/canary/examples/api-routes-graphql&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Each of these technologies can help to improve a different aspect of your Next.js app or website, and hopefully you found some of interest and will consider using them in your next project! If you have any other suggestions, please feel free to leave them in the comments of this article.&lt;/p&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Awesome dataviz tools for software developers 📊📈</title>
      <author>Igor Lukanin</author>
      <pubDate>Thu, 24 Jun 2021 15:54:50 +0000</pubDate>
      <link>https://dev.to/cubejs/awesome-dataviz-tools-for-software-developers-3ppi</link>
      <guid>https://dev.to/cubejs/awesome-dataviz-tools-for-software-developers-3ppi</guid>
      <description>&lt;p&gt;&lt;em&gt;TL;DR: We've built &lt;a href="https://awesome.cube.dev/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=awesome"&gt;awesome.cube.dev&lt;/a&gt; to help you choose the best charting libraries and other tools for your needs. Please have a look, it's awesome.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Hey friends! 👋&lt;/p&gt;

&lt;p&gt;Have you ever wondered which tool or library to choose to add a chart, a map, or maybe a data grid to your app built with the &lt;code&gt;%BEST_FRONTEND_FRAMEWORK%&lt;/code&gt; and the &lt;code&gt;%BEST_PROGRAMMING_LANGUAGE%&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;I'm happy to know for sure that you have! Just a few months ago, I talked to developers in the &lt;a href="https://cube.dev/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=awesome"&gt;Cube.js&lt;/a&gt; community and also ran this survey that got dozens of replies:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/cubejs" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJD5I6GS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CjLBmM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/553/6ca9ad7d-1de7-42a2-a671-2f8f2cf79749.png" alt="Cube.js"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2aoYhcua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--QQavH9-d--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/374270/8d416f5c-7685-4c7b-9b66-5d40e5af117a.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/cubejs/dev-survey-front-end-data-visualization-tools-1f37" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;DEV Survey ✅ — Front-end Data Visualization Tools&lt;/h2&gt;
      &lt;h3&gt;Igor Lukanin for Cube.js ・ Mar 22 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;On behalf of the &lt;a href="https://cube.dev/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=awesome"&gt;Cube.js&lt;/a&gt; team, let me share what I learned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-a-tool-is-hard"&gt;
  &lt;/a&gt;
  Choosing a tool is hard 😬
&lt;/h2&gt;

&lt;p&gt;I discovered that there're two types of criteria that developers evaluate when the need to choose a dataviz tool arise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First, you need to check if a particular tool is compatible with the technology stack that you're using,&lt;/strong&gt; and by that I mean the front-end framework and the programming language. Obviously, &lt;a href="https://recharts.org/en-US/"&gt;Recharts&lt;/a&gt; is a neat tool but there's no way to use it in a Vue app because it's purposefully built for React. Same is true for the language: according to the survey, &lt;em&gt;2/3 of all developers use TypeScript&lt;/em&gt;, so making sure that the tool has built-in type definitions or something available via &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped"&gt;DefinitelyTyped&lt;/a&gt; is also crucial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's also nice to check the license.&lt;/strong&gt; Discovering that something that you've already built into your app is not open-source and free to use may be painful. In the other case, when you specifically look for a paid tool with enterprise support, checking the license and pricing beforehand is crucial as well. According to the survey, &lt;em&gt;20 % of all developers use paid tools.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then, you'll see how easy it is to get started, the hard way.&lt;/strong&gt; The adoption curve is heavily influenced by the ease of use and available docs and examples. &lt;em&gt;Developers particularly praised the tools that have readily available "getting started" pages with code examples as well as the tools with excessive number of examples.&lt;/em&gt; &lt;a href="https://observablehq.com/@d3/gallery"&gt;D3.js&lt;/a&gt; and &lt;a href="https://echarts.apache.org/examples/en/index.html"&gt;ECharts&lt;/a&gt; are obvious winners in this category.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the end, you might face the sad truth: a tool is rooted in the past.&lt;/strong&gt; Your success will depend on the flexibility that a tool can provide for your use cases. And if it can't, soon you'll find yourself checking if there's much activity in the issues and pull requests sections on GitHub. Let's hope you'll find that a tool currently has a vibrant and active community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-choosing-a-tool-is-easy"&gt;
  &lt;/a&gt;
  Now, choosing a tool is easy 😎
&lt;/h2&gt;

&lt;p&gt;Equipped with this evidence, we've committed to solve the dataviz tools choice problem once and for all. We've built an open-source list of data visualization tools for software developers that will support you at every step.&lt;/p&gt;

&lt;p&gt;In the very beginning, you'll have the chance to pick the front-end framework of your choice and specify if you care about TypeScript support. If you're an open-source aficionado, there's an option for that, too. Also, if you come for something specific (e.g., a data grid), you'll have a filter for that as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_5cWTx8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylim2ipawsvzbatze6z6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_5cWTx8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylim2ipawsvzbatze6z6.png" alt="Filters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In an instant, you'll see the awesome tools matching your criteria. For those tools that gathered a lot of mentions in the survey results, you'll see badges like "Easy to customize" or "Full-fledged" that you can use to set expectation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--inIXd_JD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yve18kj4es537noo7s30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--inIXd_JD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yve18kj4es537noo7s30.png" alt="Cards"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Definitely feel free to pick some candidates and dive deep into their pages. You'll be able to build understanding what to expect in terms of flexibility and the community dynamics. Checking the last release date and the number of outstanding issues are also wise things to do.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xvXDNJYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0z9v5w6nv65liyc6bsd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xvXDNJYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0z9v5w6nv65liyc6bsd.png" alt="Data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ready to get started? You'll find links to tutorials and guides that, hopefully, will help you get on track. And if you're stuck, there're a few links for that, too.&lt;/p&gt;

&lt;p&gt;As the last but not the least resort, feel free to come and join &lt;a href="https://slack.cube.dev/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=awesome"&gt;Cube.js community&lt;/a&gt; on Slack. It has thousands of developers building apps for which Cube.js serve as the open-source API layer that delivers data to the dataviz tools on the front-end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_fF8IAu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtmpivikvtad3n1zf621.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_fF8IAu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtmpivikvtad3n1zf621.png" alt="Getting Started and Getting Help"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Now, it's time to visit &lt;a href="https://awesome.cube.dev/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=awesome"&gt;awesome.cube.dev&lt;/a&gt; and see it in action! If you like it, don't hesitate to share a link with your friends. In any case, leave us a comment: we'd love to know what you think 😇&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P. S. Just like &lt;a href="https://github.com/cube-js/cube.js"&gt;Cube.js&lt;/a&gt;, awesome.cube.dev is &lt;a href="https://github.com/cube-js/awesome-tools"&gt;open-source&lt;/a&gt;. We appreciate your issues and pull requests.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>ASP.NET Core Identity User Locked out</title>
      <author>Nirmal Krishna</author>
      <pubDate>Thu, 24 Jun 2021 15:20:39 +0000</pubDate>
      <link>https://dev.to/meuequalsd/asp-net-core-identity-user-locked-out-3bb0</link>
      <guid>https://dev.to/meuequalsd/asp-net-core-identity-user-locked-out-3bb0</guid>
      <description>&lt;p&gt;The user lockout feature is the way to improve application security by locking out a user that enters a password incorrectly several times. This technique can help us in protecting against brute force attacks, where an attacker repeatedly tries to guess a password. ⛳ &lt;/p&gt;

&lt;p&gt;Quite a basic feature for an authentication service, but adding it in my Web API app was quite a head scratcher.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-adding-to-configuration-service"&gt;
  &lt;/a&gt;
  1. Adding to configuration service
&lt;/h4&gt;

&lt;p&gt;In your startup.cs or container configuration file,   the config for locking out can be  set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;services.AddIdentity&amp;lt;User, IdentityRole&amp;gt;(opt =&amp;gt;
{
    // previous code removed for clarity reasons
    opt.Lockout.AllowedForNewUsers = true;
    opt.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(2);
    opt.Lockout.MaxFailedAccessAttempts = 3;
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The property names are self explanatory here.&lt;/p&gt;

&lt;p&gt;The  above code will  by default setup locking out feature and if a person is trying to login with wrong &lt;code&gt;password&lt;/code&gt; for a given &lt;code&gt;username&lt;/code&gt; the user account will be locked out for 5 minutes updated accordingly in &lt;code&gt;LockoutEnd&lt;/code&gt; column &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-how-to-check-if-this-user-is-locked-out"&gt;
  &lt;/a&gt;
  2. How to check if this user is Locked Out?
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//  AuthService.cs
..
    var result = await signInManager.CheckPasswordSignInAsync(user, model.Password, lockoutOnFailure: true);
..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The properties  of &lt;code&gt;result : SignInResult&lt;/code&gt; we are concerned here are &lt;code&gt;Succeeded&lt;/code&gt;, &lt;code&gt;IsLockedOut&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;✅ &lt;code&gt;Succeeded ==  true&lt;/code&gt; if the username and password &lt;strong&gt;match&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;❌ &lt;code&gt;Succeeded == false&lt;/code&gt; if the username and password &lt;strong&gt;do not match&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✅ &lt;code&gt;IsLockedOut == true&lt;/code&gt; if this user has been locked out after x number of trials&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-what-is-here-to-scratch-your-hear-for"&gt;
  &lt;/a&gt;
  3. 🤔 What is here to scratch your hear for
&lt;/h4&gt;

&lt;p&gt;I was expecting &lt;code&gt;LockOutEnabled&lt;/code&gt; will become &lt;code&gt;true (1)&lt;/code&gt; in the identity user table. It took me few hours to get to the documentation but it was stated clearly in the Library class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Microsoft.AspNetCore.Identity.IdentityUser

// Gets or sets a flag indicating if the user could be locked out.

public virtual bool LockoutEnabled { get; set; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I missed the &lt;strong&gt;could be&lt;/strong&gt;  and  it costed me some hours.😪&lt;/p&gt;

&lt;p&gt;Updating this column to &lt;code&gt;true&lt;/code&gt; for necessary users then locks out the user for particular a time limit set in the &lt;code&gt;config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The proper logging and an error can be thrown with &lt;br&gt;
&lt;code&gt;result.IsLockedOut&lt;/code&gt; flag from the service layer 😅&lt;/p&gt;

&lt;p&gt;📚 References&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Using  &lt;a href="https://stackoverflow.com/questions/53854051/usermanager-checkpasswordasync-vs-signinmanager-passwordsigninasync"&gt;UserManager.CheckPasswordAsync versus SignInManager.PasswordSignInAsync&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://code-maze.com/user-lockout-aspnet-core-identity/"&gt;User Lockout with ASP.NET Core Identity&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>dotnet</category>
      <category>identity</category>
      <category>auth</category>
    </item>
    <item>
      <title>Light/dark mode, React implementation</title>
      <author>Ayc0</author>
      <pubDate>Thu, 24 Jun 2021 15:16:28 +0000</pubDate>
      <link>https://dev.to/ayc0/light-dark-mode-react-implementation-3aoa</link>
      <guid>https://dev.to/ayc0/light-dark-mode-react-implementation-3aoa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In the previous posts, we saw how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use CSS to handle different themes,&lt;/li&gt;
&lt;li&gt;handle system themes and also user-picked themes,&lt;/li&gt;
&lt;li&gt;store the previously picked theme for next visits,&lt;/li&gt;
&lt;li&gt;how to avoid theme blink on page reload.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, we'll see how we can use everything together, and add &lt;strong&gt;React&lt;/strong&gt; and a remote database (for fun) in this mix.&lt;br&gt;
The goal is to show the backbone of what could be the actual code you'd use to handle themes in your app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="#flow-of-the-logic-well-implement"&gt;Flow of the logic we'll implement&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#first-visit-ever"&gt;First visit ever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#first-visit-on-a-new-browser"&gt;First visit on a new browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#re-visit"&gt;Re-visit&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#results"&gt;Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#explanations"&gt;Explanations&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="#html"&gt;HTML&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#color-scheme"&gt;Color scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#css"&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#blocking-script"&gt;Blocking script&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#javascript"&gt;JavaScript&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#base-variables"&gt;Base variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#react-context"&gt;React context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initialization-of-the-mode"&gt;Initialization of the mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-sync"&gt;Database sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#save-back-the-mode"&gt;Save back the mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initialization-of-the-mode-1"&gt;Initialization of the mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#system-theme-update"&gt;System theme update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#apply-the-theme-back-to-the-html"&gt;Apply the theme back to the HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#defining-the-context"&gt;Defining the context&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#flow-of-the-logic-well-implement"&gt;
  &lt;/a&gt;
  Flow of the logic we'll implement
&lt;/h2&gt;

&lt;p&gt;The following flow is related to a frontend app, not a server-side rendered website (like what you would have in PHP):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Users are loading your website&lt;/li&gt;
&lt;li&gt;We are applying (in a blocking way) the previously picked theme (it can be a wrong one)&lt;/li&gt;
&lt;li&gt;A fetch is performed on your database to retrieve their favorite mode (light/dark/system)&lt;/li&gt;
&lt;li&gt;The favorite mode is saved in their browser for future visits&lt;/li&gt;
&lt;li&gt;The mode is saved in a react context (for reactive updates if needed)&lt;/li&gt;
&lt;li&gt;When the mode changes, it is saved locally (for future uses), a request is performed against your database, and the react context is updated.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#first-visit-ever"&gt;
  &lt;/a&gt;
  First visit ever
&lt;/h3&gt;

&lt;p&gt;Your users won't have any entry in your database and they won't have any local data saved either. So we'll use the system mode as a fallback.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#first-visit-on-a-new-browser"&gt;
  &lt;/a&gt;
  First visit on a new browser
&lt;/h3&gt;

&lt;p&gt;Your users won't have any local data, so while the request is being done against your database to retrieve their preferred mode, we'll use the system one to avoid unwanted flashes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#revisit"&gt;
  &lt;/a&gt;
  Re-visit
&lt;/h3&gt;

&lt;p&gt;The mode they previously picked on this browser will be initially picked. And then 2 possibilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they haven't changed their preferred mode on another device, so the local one matches the remote one =&amp;gt; no differences and no flashes (this is the flow during a page refresh),&lt;/li&gt;
&lt;li&gt;they have changed it, and here we'll have a small flash at the initial re-visit (but we cannot prevent that)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/tbclf"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explanations"&gt;
  &lt;/a&gt;
  Explanations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#color-scheme"&gt;
  &lt;/a&gt;
  Color scheme
&lt;/h4&gt;

&lt;p&gt;As in all other posts of this series, we have the following in the head, ensuring that native elements will respond to the correct theme (and the id is for changing its value from the JS):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"colorScheme"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"color-scheme"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"light dark"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h4&gt;

&lt;p&gt;I went with something simple for the CSS: 2 classnames &lt;code&gt;light&lt;/code&gt; and &lt;code&gt;dark&lt;/code&gt;, and I'm updating 2 css variables, than in the end control the look of the main body:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="nc"&gt;.light&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="nc"&gt;.dark&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cecece&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--background&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#blocking-script"&gt;
  &lt;/a&gt;
  Blocking script
&lt;/h4&gt;

&lt;p&gt;As we want to avoid flicker during page loads, I added a small &lt;strong&gt;blocking&lt;/strong&gt; script tag, performing only &lt;strong&gt;synchronous actions&lt;/strong&gt;, that only checks for the most &lt;strong&gt;basic&lt;/strong&gt; requirements to determine to best theme to display:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isSystemInDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isSystemInDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// for light and dark, the theme is the mode&lt;/span&gt;
    &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#base-variables"&gt;
  &lt;/a&gt;
  Base variables
&lt;/h4&gt;

&lt;p&gt;First, we need to determine our variables: I'm gonna use &lt;code&gt;mode&lt;/code&gt; for the saved modes (light / dark / system), and &lt;code&gt;theme&lt;/code&gt; for the visual themes (light / dark):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Saved mode&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Visual themes&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#react-context"&gt;
  &lt;/a&gt;
  React context
&lt;/h4&gt;

&lt;p&gt;As we want to be able to provide some informations about the current mode/theme and also a way for users to change the mode, we'll create a React context containing everything:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ThemeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Mode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Theme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#initialization-of-the-mode"&gt;
  &lt;/a&gt;
  Initialization of the mode
&lt;/h4&gt;

&lt;p&gt;We'll use a state (as its value can change and it should trigger updates) to store the mode.&lt;br&gt;
With &lt;code&gt;React.useState&lt;/code&gt;, you can provide a function, called a &lt;a href="https://reactjs.org/docs/hooks-reference.html#lazy-initial-state"&gt;lazy initial state&lt;/a&gt;, that will only get called during the 1st render:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Mode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorageKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Mode&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;initialMode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#database-sync"&gt;
  &lt;/a&gt;
  Database sync
&lt;/h4&gt;

&lt;p&gt;Now that we have a &lt;code&gt;mode&lt;/code&gt; state, we need to update it with the remote database. To do so, we could use an effect, but I decided to use another &lt;code&gt;useState&lt;/code&gt;, which seems weird as I'm not using the returned state, but as mentioned above, lazy initial states are only called during the 1st render.&lt;br&gt;
This allows us to start the backend call during the render, and not after in an effect. And as we're starting the API call earlier, we'll also receive the response faster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This will only get called during the 1st render&lt;/span&gt;
&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getMode&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#save-back-the-mode"&gt;
  &lt;/a&gt;
  Save back the mode
&lt;/h4&gt;

&lt;p&gt;When the mode changes, we want to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;save it in the local storage (to avoid flashes on reload)&lt;/li&gt;
&lt;li&gt;in the database (for cross-device support)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An effect is the perfect use-case for that: we pass the &lt;code&gt;mode&lt;/code&gt; in the &lt;a href="https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect"&gt;dependencies array&lt;/a&gt;, so that the effect will be called every time the mode changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorageKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;saveMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// database&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#initialization-of-the-mode"&gt;
  &lt;/a&gt;
  Initialization of the mode
&lt;/h4&gt;

&lt;p&gt;Now that we have a way to get, save, and update the mode, we need a way to translate it to a visual theme.&lt;br&gt;
For this we will use another state (because theme change should trigger an update).&lt;/p&gt;

&lt;p&gt;We'll use another lazy initial state to synchronize the &lt;code&gt;system&lt;/code&gt; mode with the theme users picked for their devices:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isSystemInDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isSystemInDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#system-theme-update"&gt;
  &lt;/a&gt;
  System theme update
&lt;/h4&gt;

&lt;p&gt;If users picked the &lt;code&gt;system&lt;/code&gt; mode, we need to track down if they decide to change it from light to dark while still being in our system mode (which is why we are also using a state for the &lt;code&gt;theme&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To do so, we'll also use an effect that will detect any changes in the mode. In addition to that, when users are in the &lt;code&gt;system&lt;/code&gt; mode, we'll get their current system theme and start an event listener to detect any changes in their theme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isSystemInDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// If system mode, immediately change theme according to the current system value&lt;/span&gt;
  &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isSystemInDarkMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// As the system value can change, we define an event listener when in system mode&lt;/span&gt;
  &lt;span class="c1"&gt;// to track down its changes&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MediaQueryListEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;isSystemInDarkMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isSystemInDarkMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#apply-the-theme-back-to-the-html"&gt;
  &lt;/a&gt;
  Apply the theme back to the HTML
&lt;/h4&gt;

&lt;p&gt;Now that we have a reliable &lt;code&gt;theme&lt;/code&gt; state, we can make so that the CSS and the HTML follows this state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Clear previous classNames on the body and add the new one&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// change &amp;lt;meta name="color-scheme"&amp;gt; for native inputs&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;colorScheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLMetaElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#defining-the-context"&gt;
  &lt;/a&gt;
  Defining the context
&lt;/h4&gt;

&lt;p&gt;Now that we have all the variables we need, the last thing to do is to wrap the whole app in a context provider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And when we need to refer to it, we can do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Handling multiple themes isn't trivial, especially if you want to provide the best experience possible for users while having handy tools for your fellow developers.&lt;/p&gt;

&lt;p&gt;Here I only presented one possible way of handling this, and it can be refined, improved, and expanded for other use-cases.&lt;/p&gt;

&lt;p&gt;But even if your logic/requirements are different, the flow presented at the beginning shouldn't be that different from the one you should adopt.&lt;/p&gt;

&lt;p&gt;And if you want to have a look at the full code I wrote in the example, you can find it here: &lt;a href="https://codesandbox.io/s/themes-tbclf"&gt;https://codesandbox.io/s/themes-tbclf&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Logging vs Tracing: Why Logs Aren’t Enough to Debug Your Microservices</title>
      <author>Michael Haberman</author>
      <pubDate>Thu, 24 Jun 2021 15:10:51 +0000</pubDate>
      <link>https://dev.to/aspecto/logging-vs-tracing-why-logs-aren-t-enough-to-debug-your-microservices-4jgi</link>
      <guid>https://dev.to/aspecto/logging-vs-tracing-why-logs-aren-t-enough-to-debug-your-microservices-4jgi</guid>
      <description>&lt;p&gt;When debugging microservices, it can be challenging for developers to identify the root cause of issues. Not to mention how frustrating it is to search through endless logs across multiple services and the time it takes them.&lt;/p&gt;

&lt;p&gt;With all these challenges, however, there is a silver lining — distributed tracing.&lt;/p&gt;

&lt;p&gt;Distributed tracing can help your developers with tracking requests across services (but more on that later).&lt;/p&gt;

&lt;p&gt;Let’s dive into what is distributed tracing, its benefits, and the role it plays in your teams’ system. Then we’ll cover which tools developers can use to implement distributed tracing in a cloud native environment.&lt;/p&gt;

&lt;p&gt;But first, to understand where tracing fits in your microservices debugging process and why you might even need them in the first place, let’s identify the challenges that debugging with logs pose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log-debugging-challenges"&gt;
  &lt;/a&gt;
  Log Debugging Challenges
&lt;/h2&gt;

&lt;p&gt;Logs can be very useful when we are trying to understand an unexpected response or a production failure. However, logs don’t have unlimited capabilities. Here are some of the challenges they pose for your developers when they are debugging microservices:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-logging-is-a-manual-timeconsuming-process"&gt;
  &lt;/a&gt;
  1. Logging Is a Manual Time-Consuming Process
&lt;/h3&gt;

&lt;p&gt;Adding logs is not an automatic process, and it requires a lot of meticulous, manual work. Identifying all the potential information that will be needed for debugging, adding the logs, removing them if necessary – these all take a long time and require a lot of effort. Also, the process is error-prone. Developers might be spending a lot of time adding logs but will still miss the exact information they need in production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-its-hard-to-find-the-right-balance"&gt;
  &lt;/a&gt;
  2. It’s Hard to Find the Right Balance
&lt;/h3&gt;

&lt;p&gt;Developers need to ensure they have enough logs for debugging, but not too many logs so that the code is too heavy and they waste too much time on adding and analyzing them. It’s hard to create this balance. If they haven’t logged enough information, they’ll miss data for debugging. If they logged too much, the process becomes resource-intensive and makes log analysis much more difficult.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-tracking-logs-across-services-is-difficult"&gt;
  &lt;/a&gt;
  3. Tracking Logs across Services Is Difficult
&lt;/h3&gt;

&lt;p&gt;Tracking and analyzing log entries across multiple services, containers, and processes is challenging. The developer has to be able to make sense of the relationship between all the different logs, which requires understanding the code flow in different services and correlating them to logs. They have to go through the process of transforming raw text (logs) into visualization in their minds.&lt;/p&gt;

&lt;p&gt;This takes a very, very long time.&lt;/p&gt;

&lt;p&gt;Even companies that have added unique identifiers to their instrumentation to enable tracking have difficulties maintaining and updating them. Not to mention ensuring all developers are up to speed about their homegrown identifier conventions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-logs-arent-standardized"&gt;
  &lt;/a&gt;
  4. Logs Aren’t Standardized
&lt;/h3&gt;

&lt;p&gt;Logs do not have a structured format, meaning that any developer can create messages and events according to their style. While this provides flexibility and freedom, it can be challenging and counter-productive for your team to try to understand someone else’s logs or to explain them.&lt;/p&gt;

&lt;p&gt;Also, lack of standardization leaves more room for human error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log-debugging-fail"&gt;
  &lt;/a&gt;
  Log Debugging Fail
&lt;/h2&gt;

&lt;p&gt;As a result, logs won’t always provide the required information to solve performance and regressions. There are many solutions out there that try to overcome these challenges. These include standardization conventions, best practices, analysis tools, and more. But, maybe we need to realize that logging has its limitations and that your team needs another solution for debugging microservices.&lt;/p&gt;

&lt;p&gt;And that solution is tracing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What Is Distributed Tracing?
&lt;/h2&gt;

&lt;p&gt;Traces complement logs. While logs provide information about what happened inside the service, distributed tracing tells you what happened between services/components and their relationships. This is extremely important for microservices, where many issues are caused due to the failed integration between components.&lt;/p&gt;

&lt;p&gt;Also, logs are a manual developer tool and can be used for any level of activity – a specific low-level detail, or a high-level action. This is also why there are many logging best practices available for developers to learn from. On the other hand, traces are generated automatically, providing the most complete understanding of the architecture.&lt;/p&gt;

&lt;p&gt;Distributed tracing is tracing that is adapted to a microservices architecture. Distributed tracing is designed to enable request tracking across autonomous services and modules, providing observability into cloud native systems.&lt;/p&gt;

&lt;p&gt;Distributed Tracing Advantages&lt;br&gt;
Where logging is bounded, distributed tracing thrives. Let’s see how distributed tracing answers logging limitations when it comes to debugging microservices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-visualization"&gt;
  &lt;/a&gt;
  1. Visualization
&lt;/h3&gt;

&lt;p&gt;Traces are visual instrumentation. As opposed to text logs, with traces, developers don’t have to imagine the communication flows and make up an image in their minds. Instead, they can see it right before their eyes. This makes it easier for developers to understand the relationships between services and to resolve issues, like performance bottlenecks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--08v4B-GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/339i89x8r7p9j1ai8qa1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08v4B-GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/339i89x8r7p9j1ai8qa1.png" alt="Logging vs Tracing Aspecto Platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-automation"&gt;
  &lt;/a&gt;
  2. Automation
&lt;/h3&gt;

&lt;p&gt;Unlike logs, traces are automatic. Developers don’t have to make the manual effort of adding logs to get the complete picture. Instead, they automatically get a visualization of what happened. This also solved the standardization problem. With automated traces, the standardization is hard-coded in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-accelerate-timetomarket"&gt;
  &lt;/a&gt;
  3. Accelerate Time-to-Market
&lt;/h3&gt;

&lt;p&gt;Distributed tracing provides observability and a clear picture of the services. This improves productivity because it enables developers to spend less time trying to locate errors and debugging them, as the answers are more clearly presented to them. As a result, productivity is increased, and developers can spend more time developing features, (or taking a break), while you accelerate time-to-market.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-tracking-requests-across-services"&gt;
  &lt;/a&gt;
  4. Tracking Requests Across Services
&lt;/h3&gt;

&lt;p&gt;Microservices interactions span multiple services. Distributed tracing enables understanding the system and the relationships between components. This is done by tracking and recording all these requests through unique IDs that are passed to the services handling them. As a result, developers can see the flow and progression of the request across the entire architecture, which is often the hardest to understand when debugging. Your team’s code quality will improve immensely.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-easy-to-use-and-implement"&gt;
  &lt;/a&gt;
  5. Easy to Use and Implement
&lt;/h3&gt;

&lt;p&gt;With the right setup, developers can work with multiple applications and across different programming languages. This is unique for distributed tracing and saves your team a lot of time and headaches, by not restricting you to one language or certain apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-insightful"&gt;
  &lt;/a&gt;
  6. Insightful
&lt;/h3&gt;

&lt;p&gt;Distributed tracing provides the developer with a lot of insightful information. This includes request time, information about components, latency, application health, and more. All this info can be useful when debugging and during root cause analysis, for improving code quality and resolving customer issues quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g7VzzlbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai549kkx498qa26eblfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g7VzzlbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai549kkx498qa26eblfn.png" alt="Timeline view Aspecto platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-should-we-use-distributed-tracing"&gt;
  &lt;/a&gt;
  When Should We Use Distributed Tracing?
&lt;/h2&gt;

&lt;p&gt;Great question! Here are the three main use cases in which distributed tracing can be helpful for you and your team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-for-a-distributedapplication-architecture"&gt;
  &lt;/a&gt;
  1. For a Distributed-Application Architecture
&lt;/h3&gt;

&lt;p&gt;If your department is using a distributed infrastructure, we highly recommend implementing distributed tracing. As you can see, this is the best method for tracking requests across services, with many teams involved and when you have complex processes in place.&lt;/p&gt;

&lt;p&gt;It makes sure you don’t waste your time trying to investigate issues across machines or, search through endless logs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-when-you-dont-know-which-problem-to-look-for"&gt;
  &lt;/a&gt;
  2. When You Don’t Know Which Problem to Look for
&lt;/h3&gt;

&lt;p&gt;One of the reasons developers end up with too many logs is that they want to cover themselves and make sure they have information for all and any scenario that could go wrong. But that’s the wrong approach. This is exactly what traces are for. Traces provide you with all the heaps of information you need to analyze yourself, without the disadvantages of logs. So if you don’t know what the problem is, you can analyze until you do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-when-you-need-observability"&gt;
  &lt;/a&gt;
  3. When You Need Observability
&lt;/h3&gt;

&lt;p&gt;Distributed traces provide you with visibility into the system and across all services and the relationships between them. You can see the journey requests went through, how long they took, insights into system health, and more. You can use distributed tracing not only for identifying why a problem occurred, but also to avoid problems with ongoing observability and tracking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#distributed-tracing-tools"&gt;
  &lt;/a&gt;
  Distributed Tracing Tools
&lt;/h2&gt;

&lt;p&gt;Hopefully, by now you’re convinced that distributed tracing can make your life easier, or at least shorten your debugging time. To get you started, here are three tools for your team to look into. These tools use an open-source called &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt;, an observability framework for microservices and a member of the &lt;a href="https://cncf.io/?utm_content=inline-mention"&gt;Cloud Native Computing Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are the tracing tools that will complement your logging efforts, especially in a microservices architecture:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-jaeger"&gt;
  &lt;/a&gt;
  1. Jaeger
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt; is an open-source, distributed tracing tool. It enables transaction monitoring, latency optimization, and advanced data analysis. Jaeger supports most common languages and requires running Kubernetes. &lt;a href="https://www.jaegertracing.io/download/"&gt;You can check it out here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kP-1VkCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44jmbbjpbu8qt09ikko8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kP-1VkCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44jmbbjpbu8qt09ikko8.png" alt="Jaeger UI view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-zipkin"&gt;
  &lt;/a&gt;
  2. Zipkin
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://zipkin.io/"&gt;Zipkin&lt;/a&gt;, an open-source tool very similar to Jaeger, and also provides all distributed tracing capabilities. For implementation, Zipkin doesn’t require containers. You can use Docker, &lt;a href="https://zipkin.io/pages/quickstart.html"&gt;but you don’t have to&lt;/a&gt;. The difference between the two is minor, and in the end, it comes to personal preferences and specific technology stack needs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7fqMKXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ii8en4qugm0stsnp1v1y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7fqMKXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ii8en4qugm0stsnp1v1y.png" alt="Zipkin UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-aspecto"&gt;
  &lt;/a&gt;
  3. Aspecto
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=logging-vs-tracing-why-logs-arent-enough-to-debug-your-microservices"&gt;Aspecto&lt;/a&gt; is like the Chrome DevTools for your distributed applications, helping developers find, fix, and prevent distributed application issues across the entire development cycle. Starting with their local dev environment all the way to production.&lt;/p&gt;

&lt;p&gt;Aspecto is OpenTelemetry based, and the way it allows developers to prevent issues before they reach production is by implementing telemetry data that learns the system, then compares what they do locally to the production, staging, or other locals baseline data.&lt;/p&gt;

&lt;p&gt;This helps you to validate changes and prevent issues, live, while you develop.&lt;/p&gt;

&lt;p&gt;It’s super easy to &lt;a href="https://docs.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=logging-vs-tracing-why-logs-arent-enough-to-debug-your-microservices"&gt;install&lt;/a&gt; with a one-liner SDK, and you can give the &lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=logging-vs-tracing-why-logs-arent-enough-to-debug-your-microservices"&gt;Live Playground&lt;/a&gt; a spin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UU38GYcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5wjxtbr2phkdd9lkf1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UU38GYcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5wjxtbr2phkdd9lkf1s.png" alt="Aspecto platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Debugging with logs can only get you so far. By implementing distributed tracing, you can see your requests and services, and spend less time debugging. Try distributed tracing with an open-source tool, like &lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt; or &lt;a href="https://zipkin.io/"&gt;Zipkin&lt;/a&gt; and if you’re looking for that extra boost of predicting the effects of your changes, give &lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=logging-vs-tracing-why-logs-arent-enough-to-debug-your-microservices"&gt;Aspecto&lt;/a&gt; a try, for faster feedback and more visibility.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>microservices</category>
      <category>debugging</category>
      <category>architecture</category>
    </item>
    <item>
      <title>How to Build Your Own Blockchain in NodeJS</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 24 Jun 2021 14:59:34 +0000</pubDate>
      <link>https://dev.to/codesphere/how-to-build-your-own-blockchain-in-nodejs-3ijh</link>
      <guid>https://dev.to/codesphere/how-to-build-your-own-blockchain-in-nodejs-3ijh</guid>
      <description>&lt;p&gt;When we're trying to learn something new, it can oftentimes be tempting to dive headfirst into documentation, articles, and conceptual explanations. While all of that is certainly important, programmers have a great tool in their arsenal for understanding complex topics that they often take for granted.&lt;/p&gt;

&lt;p&gt;Building models for different topics in code can help us understand how different pieces of an idea fit together and operate in practice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this tutorial, I'll show you how to build a rudimentary blockchain with some relatively simple Javascript.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#what-is-a-blockchain"&gt;
  &lt;/a&gt;
  What is a Blockchain?
&lt;/h3&gt;

&lt;p&gt;It can be helpful to think of blockchains as augmented linked lists, or arrays in which each element points to the preceding array.&lt;/p&gt;

&lt;p&gt;Within each block (equivalent to an element in an array) of the blockchain, there contains at least the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A timestamp of when the block was added to the chain&lt;/li&gt;
&lt;li&gt;Some sort of relevant data. In the case of a cryptocurrency, this data would store transactions, but blockchains can be helpful in storing much more than just transactions for a cryptocurrency&lt;/li&gt;
&lt;li&gt;The encrypted hash of the block that precedes it&lt;/li&gt;
&lt;li&gt;An encrypted hash based on the data contained within the block(Including the hash of the previous block)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key component that makes a blockchain so powerful is that embedded in each block's hash is the data of the previous block (stored through the previous block's hash). This means that if you alter the data of a block, you will alter its hash, and therefore invalidate the hashes of all future blocks.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#creating-a%C2%A0block"&gt;
  &lt;/a&gt;
  Creating a Block
&lt;/h3&gt;

&lt;p&gt;While this can probably be done with vanilla Javascript, for the sake of simplicity we are going to be making a Node.js script and be taking advantage of Node.js's built-in Crypto package to calculate our hashes.&lt;/p&gt;

&lt;p&gt;We can define a block in code like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Note that we use SHA256 encryption to hash our function. This is the standard cryptographic hash function that is used in most blockchains because it is incredibly easy to calculate, but incredibly hard to reverse.&lt;/p&gt;

&lt;p&gt;We can then create instances of these blocks like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let a = new Block({from: "Joe", to: "Jane"}, precedingHash = "0")&lt;/code&gt;&lt;br&gt;
&lt;code&gt;let b = new Block({from: "Jane", to: "Joe"}, precedingHash = a.hash)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Try printing out the hashes for these blocks and note how they are different. Also note that if you alter the data of the first block, the hashes of both will change.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#creating-a-blockchain"&gt;
  &lt;/a&gt;
  Creating a Blockchain
&lt;/h3&gt;

&lt;p&gt;Now that we have our building blocks (pun intended), let's create a class for our chain. We can define it like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;First, note that we call the initial block in the chain the Genesis Block. Since this block is the first in the chain, it cannot store any previous hash value.&lt;/p&gt;

&lt;p&gt;Next, we also created a function to check the validity of the blockchain to monitor tampering. We are checking for two possibilities.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Someone tampered with the data and that the stored hash value is no longer the correct hash value&lt;/li&gt;
&lt;li&gt;Someone tampered with a previous block's data, and that the prevHash value stored is therefore incorrect.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run that code and print out the value of the chain, you should be able to see how each block in the chain is storing both its own hash, and the hash of the prior block!&lt;/p&gt;




&lt;p&gt;That's all for this example, but if you want to get more comfortable with blockchain, I highly recommend playing around with this code and seeing what breaks the validity of the chain!&lt;br&gt;
Happy coding from your good friends at &lt;a href="https://link.codesphere.com/AK"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>node</category>
      <category>cryptocurrency</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Getting Started with the LOGIQ PaaS Community Edition</title>
      <author>Ajit Chelat</author>
      <pubDate>Thu, 24 Jun 2021 14:30:30 +0000</pubDate>
      <link>https://dev.to/logiq/getting-started-with-the-logiq-paas-community-edition-1a88</link>
      <guid>https://dev.to/logiq/getting-started-with-the-logiq-paas-community-edition-1a88</guid>
      <description>&lt;p&gt;If you’ve been looking for an inexpensive way to run your own observability stack while maintaining complete control over your data and its security, look no further. The LOGIQ PaaS Community Edition is officially live!&lt;/p&gt;

&lt;p&gt;With the LOGIQ PaaS Community Edition, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Self-host your observability stack on a cloud provider of your choice – public or private &lt;/li&gt;
&lt;li&gt;Ingest up to &lt;strong&gt;50GB&lt;/strong&gt; of log data &lt;strong&gt;per day&lt;/strong&gt; with &lt;strong&gt;unlimited data retention&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Store your log data on any S3-compatible cloud provider via the built-in Minio S3 service&lt;/li&gt;
&lt;li&gt;Ingest logs from Syslog, RSyslog, Logstash, Fluent, AWS Firelens, JSON, and &lt;strong&gt;plenty more&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Run up to &lt;strong&gt;4 ingest worker&lt;/strong&gt; processes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll also get access to all of the LOGIQ Enterprise Edition’s features along with Community Support, &lt;strong&gt;free forever&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tgg91t03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5bqcmn5z8zyjygvm0vb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tgg91t03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5bqcmn5z8zyjygvm0vb.gif" alt="The LOGIQ UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What’s more? Deploying LOGIQ PaaS is ridiculously easy! This article will show you exactly how you can deploy the LOGIQ PaaS Community Edition on your Kubernetes cluster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-you-begin"&gt;
  &lt;/a&gt;
  Before you begin
&lt;/h2&gt;

&lt;p&gt;To get you up and running with the LOGIQ PaaS Community Edition quickly, we’ve made LOGIQ PaaS’ Kubernetes components available as &lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt; Charts. To deploy LOGIQ PaaS, you’ll need access to a Kubernetes cluster and Helm 3.&lt;/p&gt;

&lt;p&gt;Before you start deploying LOGIQ PaaS, let’s run through a few quick steps to set up your environment correctly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-the-logiq-helm-repository"&gt;
  &lt;/a&gt;
  Add the LOGIQ Helm repository
&lt;/h3&gt;

&lt;p&gt;Add LOGIQ’s Helm repository to your Helm repositories by running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm repo add logiq-repo https://logiqai.github.io/helm-charts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Helm repository you just added is named logiq-repo. Whenever you install charts from this repository, ensure that you use the repository name as the prefix in your install command, as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm install &amp;lt;deployment_name&amp;gt; logiq-repo/&amp;lt;chart_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now search for the Helm charts available in the repository by running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm search repo logiq-repo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this command displays a list of the available Helm charts along with their details, as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ helm repo update
$ helm search repo logiq-repo
NAME                CHART VERSION    APP VERSION    DESCRIPTION
logiq-repo/logiq    2.2.11           2.1.11         LOGIQ Observability HELM chart for Kubernetes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you’ve already added LOGIQ’s Helm repository in the past, you can update the repository by running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm repo update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-namespace-to-deploy-logiq-paas"&gt;
  &lt;/a&gt;
  Create a namespace to deploy LOGIQ PaaS
&lt;/h3&gt;

&lt;p&gt;Create a namespace where we’ll deploy LOGIQ PaaS by running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl create namespace logiq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the command shown above creates a namespace named &lt;code&gt;logiq&lt;/code&gt;. You can also name your namespace differently by replacing &lt;code&gt;logiq&lt;/code&gt; with the name of your choice in the command above. In case you do, remember to use the same namespace for the rest of the instructions listed in this guide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Ensure that the name of the namespace is not more than 15 characters in length.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prepare-your-values-file"&gt;
  &lt;/a&gt;
  Prepare your Values file
&lt;/h3&gt;

&lt;p&gt;Just as any other package deployed via Helm charts, you can configure your LOGIG PaaS deployment using a Values file. The Values file acts as the Helm chart’s API, giving it access to values to populate the Helm chart’s templates.&lt;/p&gt;

&lt;p&gt;To give you a head start with configuring your LOGIQ deployment, we’ve provided sample &lt;code&gt;values.yaml&lt;/code&gt; files for small, medium, and large clusters. You can use these files as a base for configuring your LOGIQ deployment. You can download these files from the following links. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://firebasestorage.googleapis.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LmzGprckLqwd5v6bs6m%2F-MOSfp6X1_SPwV_8AGhv%2F-MOSh7NloEncIi1LjUyh%2Fvalues.small.yaml?alt=media&amp;amp;token=83d76953-0854-4a48-a3a8-0591aded0bc6"&gt;&lt;code&gt;values.small.yaml&lt;/code&gt;&lt;/a&gt; for small clusters.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://firebasestorage.googleapis.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LmzGprckLqwd5v6bs6m%2F-MQ3BQwto2mGZmAgEveP%2F-MQ3BW2mk4SRtFYNkQ2B%2Fvalues.medium.yaml?alt=media&amp;amp;token=95ffa9d0-a736-4213-9425-1b5ff7fa3178"&gt;&lt;code&gt;values.medium.yaml&lt;/code&gt;&lt;/a&gt; for medium clusters.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://firebasestorage.googleapis.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LmzGprckLqwd5v6bs6m%2F-MQ3BQwto2mGZmAgEveP%2F-MQ3BXv1S-DqlVCWRpOw%2Fvalues.large.yaml?alt=media&amp;amp;token=7d4772bf-39e0-4030-8620-1de1a64aed99"&gt;&lt;code&gt;values.large.yaml&lt;/code&gt;&lt;/a&gt; for large clusters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can pass the &lt;code&gt;values.yaml&lt;/code&gt; file with the helm install command using the &lt;code&gt;-f&lt;/code&gt; flag, as shown in the following example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm install logiq --namespace logiq --set global.persistence.storageClass=&amp;lt;storage_class_name&amp;gt; logiq-repo/logiq -f values.small.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#read-and-accept-the-eula"&gt;
  &lt;/a&gt;
  Read and accept the EULA
&lt;/h3&gt;

&lt;p&gt;As a final step, you should read our &lt;a href="https://docs.logiq.ai/eula/eula"&gt;End User’s License Agreement&lt;/a&gt; and accept its terms before you proceed with deploying LOGIQ PaaS. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-logiq-paas-component-versions"&gt;
  &lt;/a&gt;
  Latest LOGIQ PaaS component versions
&lt;/h3&gt;

&lt;p&gt;The following table lists the latest version tags for all LOGIQ components.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Image&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;logiq-flash&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.1.11.27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;coffee&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.1.17.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;logiq&lt;/code&gt; Helm chart&lt;/td&gt;
&lt;td&gt;2.2.11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#install-logiq-paas"&gt;
  &lt;/a&gt;
  Install LOGIQ PaaS
&lt;/h3&gt;

&lt;p&gt;Now that your environment is ready, you can proceed with installing LOGIQ PaaS in it. To install LOGIQ PaaS, run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm install logiq --namespace logiq --set global.persistence.storageClass=&amp;lt;storage class name&amp;gt; logiq-repo/logiq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the above command installs LOGIQ PaaS and exposes its services and UI on the ingress’ IP address. Accessing the ingress’ IP address in a web browser of your choice takes you to the LOGIQ PaaS login screen, as shown in the following image. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KPWozekP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn31ild6u6k6oijbxivn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KPWozekP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn31ild6u6k6oijbxivn.png" alt="The LOGIQ login screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you haven’t changed any of the admin settings in the values.yaml file you used during deployment, you can log into the LOGIQ PaaS UI using the following default credentials. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Username&lt;/strong&gt;: &lt;code&gt;flash-admin@foo.com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Password&lt;/strong&gt;: &lt;code&gt;flash-password&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can change the default login credentials after you’ve logged into the UI.&lt;/p&gt;

&lt;p&gt;Your LOGIQ PaaS instance is now deployed and ready for use. Your LOGIQ instance enables you to ingest and tail logs, index and query log data, and provides search capabilities. Along with the LOGIQ UI, you can also access these features via LOGIQ’s CLI, &lt;a href="https://docs.logiq.ai/logiq-cli"&gt;logiqctl&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now that you have full access to your very own LOGIQ PaaS instance, you should try using it to amplify your observability practices. You can use LOGIQ to &lt;a href="https://logiq.ai/k8s/"&gt;observe your Kubernetes clusters&lt;/a&gt;, &lt;a href="https://logiq.ai/jenkins-log-analysis-with-logiq/"&gt;set up centralised observability for your CI/CD pipelines&lt;/a&gt;, &lt;a href="https://logiq.ai/monitoring/"&gt;monitor your applications and infrastructure&lt;/a&gt;, or even tail and analyse logs from &lt;a href="https://logiq.ai/how-to-stream-aws-cloudwatch-logs-to-logiq/"&gt;AWS CloudWatch&lt;/a&gt; or other data sources – all without the pricing shock that the usual log management and analysis solutions provide.&lt;/p&gt;

&lt;p&gt;Do drop a comment or &lt;a href="https://logiq.ai/contact"&gt;reach out to us&lt;/a&gt; if you’d like to know more about how LOGIQ PaaS can help you deliver always-on applications and infrastructure at scale through efficient log management and analysis. &lt;/p&gt;

</description>
      <category>devops</category>
      <category>analytics</category>
      <category>monitoring</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Reverse Engineering a platform</title>
      <author>Hiram</author>
      <pubDate>Thu, 24 Jun 2021 14:30:05 +0000</pubDate>
      <link>https://dev.to/eichgi/reverse-engineering-a-platform-1ohh</link>
      <guid>https://dev.to/eichgi/reverse-engineering-a-platform-1ohh</guid>
      <description>&lt;p&gt;Hey folks, today's post is about a reverse engineering work I had to do for a platform and what I found by doing it 💪&lt;/p&gt;

&lt;p&gt;A while ago I acquired a web platform with an android client for a very entertaining project. The backend was written with Symfony 2.X and the client was a native android app written in Java.&lt;/p&gt;

&lt;p&gt;Long short story, the backend was a complete headache. I had to deal with different configurations for the server given it was aimed for PHP 7. A lot of deprecations had happened since then so you can picture it. The first setup was good enough, but I ran out of lucky for the 2nd 🤯, this led me to create my 100% (almost there) compatible backend.&lt;/p&gt;

&lt;p&gt;Version 1&lt;br&gt;
I started by consuming all API endpoints to figure out what responses look like. I blue-printed the web admin views to replicate the same functionality, and after a thorough debugging to the database I was able to create the same relations with some tweaks for a better integration. This work took me like two weeks but I ended up with an easier and well-known backend.&lt;/p&gt;

&lt;p&gt;The android app didn't require too many changes. I basically changed the interfaces, some texts translations and added some validations. Version 1 was a pretty straight forward work.&lt;/p&gt;

&lt;p&gt;Update to version 2:&lt;br&gt;
The mess came with the update, because I changed things and it was necessary to understand what should happen next in order to place it into the app. It costs me two rounds, and a hell of debugging. This is basically how you learn to reverse engineering, things must follow a flow and you need to chunk it into small pieces so they can fit. Discover the rules and validations might be the hardest part, try and failure over and over.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fH-GwmpA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/bf5435861513b64b9ae54eec103a6526/tenor.gif%3Fitemid%3D4614296" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fH-GwmpA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/bf5435861513b64b9ae54eec103a6526/tenor.gif%3Fitemid%3D4614296" alt="Bob's sculpture"&gt;&lt;/a&gt;&lt;br&gt;
Graphic explanation, thanks bob&lt;/p&gt;

&lt;p&gt;Finally I could achieve the expected behavior and things continue working smoothly. It has been a good experience. Now that I have forked the project every new change is easier to me. I could go deeper with advanced android topics as well. This is a practice I completely recommend to everyone in their spare time. Keep coding and keep failing ✌&lt;/p&gt;

</description>
      <category>reverse</category>
      <category>engineer</category>
    </item>
    <item>
      <title>I made and launched a SAAS product in 43 days</title>
      <author>Robert Brunhage 💙</author>
      <pubDate>Thu, 24 Jun 2021 14:28:54 +0000</pubDate>
      <link>https://dev.to/robertbrunhage/i-made-and-launched-a-saas-product-in-43-days-n1c</link>
      <guid>https://dev.to/robertbrunhage/i-made-and-launched-a-saas-product-in-43-days-n1c</guid>
      <description>&lt;p&gt;Building a SaaS product in just &lt;strong&gt;43 days&lt;/strong&gt; have been a lot of fun, so let's deep dive in to it!&lt;/p&gt;

&lt;p&gt;This was originally posted over at &lt;a href="https://robertbrunhage.com"&gt;robertbrunhage.com&lt;/a&gt; you can also find me over on  &lt;a href="https://twitter.com/robertbrunhage"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#and-just-to-be-transparent-here-is-the-first-commit-and-the-launch-tweet-of-krossaio"&gt;
  &lt;/a&gt;
  And just to be transparent, here is the first commit and the launch tweet of &lt;a href="https://krossa.io"&gt;krossa.io&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--amHng-BB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/krossa-prod.appspot.com/o/e3IUXc1BFZTlvvaqD8xjvHlIy2q1%252Farticles%252FjQ9EDP2OeSOgqanNnXe9%252FScreenshot%25202021-05-14%2520072424.png%3Falt%3Dmedia%26token%3Dcd78475a-b6ec-464b-8e14-2bb3a02da1a4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--amHng-BB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/krossa-prod.appspot.com/o/e3IUXc1BFZTlvvaqD8xjvHlIy2q1%252Farticles%252FjQ9EDP2OeSOgqanNnXe9%252FScreenshot%25202021-05-14%2520072424.png%3Falt%3Dmedia%26token%3Dcd78475a-b6ec-464b-8e14-2bb3a02da1a4" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HndWtxbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/krossa-prod.appspot.com/o/e3IUXc1BFZTlvvaqD8xjvHlIy2q1%252Farticles%252FjQ9EDP2OeSOgqanNnXe9%252FScreenshot%25202021-05-14%2520072541.png%3Falt%3Dmedia%26token%3D6b802f57-97b2-4f66-aebc-ccae73970597" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HndWtxbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/krossa-prod.appspot.com/o/e3IUXc1BFZTlvvaqD8xjvHlIy2q1%252Farticles%252FjQ9EDP2OeSOgqanNnXe9%252FScreenshot%25202021-05-14%2520072541.png%3Falt%3Dmedia%26token%3D6b802f57-97b2-4f66-aebc-ccae73970597" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And yes, I regret not having a cool first commit...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;This is actually something I made together with &lt;a href="https://twitter.com/tadaspetra"&gt;Tadas Petra&lt;/a&gt; and both of us are content creators mostly focused on YouTube. Though we had an &lt;strong&gt;issue&lt;/strong&gt; which was that we wanted to both move in a bit to the blogging space.&lt;/p&gt;

&lt;p&gt;One issue with starting a blog is &lt;strong&gt;getting traffic&lt;/strong&gt;, now both of us could drive a bit of traffic from our YouTube channels but we thought that this wasn't enough, so we started doing something called "crossposting".&lt;/p&gt;

&lt;p&gt;Crossposting is when you take your original blog post let's say this one which is published at &lt;a href="https://robertbrunhage.com"&gt;robertbrunhage.com&lt;/a&gt;, and publish it to other platforms as well, such as Medium, DevTo and Hashnode. The reason for this is that you can drive traffic from those platforms over to your website! I personally did this with adding a small message at the top or bottom saying something like "This was originally posted at ...".&lt;/p&gt;

&lt;p&gt;But just this simple thing of crossposting your blog could take &lt;strong&gt;A LOT of time&lt;/strong&gt;. For my first blog I did this with, took &lt;strong&gt;over an hour&lt;/strong&gt; which, let's be honest here... I wanted to spend on other things 😅 (&lt;em&gt;Playing games and wasting time&lt;/em&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-solution"&gt;
  &lt;/a&gt;
  Building a Solution
&lt;/h2&gt;

&lt;p&gt;So we started researching about crossposting more on how to do it effectively which in the end mostly cut the time from a bit over an hour per post to about an hour. To us, &lt;strong&gt;these were no solutions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We thought about the idea of a platform that would do everything for you and this is the flow we came up with.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write your blogpost or import it&lt;/li&gt;
&lt;li&gt;Select the platforms&lt;/li&gt;
&lt;li&gt;Publish (either to draft or directly)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now a lot of things had to be done behind the scenes such as &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Formatting&lt;/strong&gt; the blog to look good on each platform.&lt;/li&gt;
&lt;li&gt;Make sure the &lt;strong&gt;canonical url&lt;/strong&gt; would be set (makes sure the search engine is fine with multiple copies of the post).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A GREAT editor&lt;/strong&gt; to write in.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-tech-stack"&gt;
  &lt;/a&gt;
  The Tech Stack
&lt;/h2&gt;

&lt;p&gt;TLDR of the stack&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;Firebase (Storage, Functions, Firestore)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason we went this route was that we had some requirements that made us go with Next.js such as being able to have a blog on the website and both of us prefer a typed language which TypeScript helped with!&lt;/p&gt;

&lt;p&gt;Now in my opinion the one that helped us create &lt;a href="https://krossa.io"&gt;krossa.io&lt;/a&gt; in such a short amount of time is &lt;strong&gt;Firebase&lt;/strong&gt;. There were so many things handled for us right of the bat, such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Subscription&lt;/strong&gt; with Stripe.&lt;/li&gt;
&lt;li&gt;Our &lt;strong&gt;previous knowledge&lt;/strong&gt; of it.&lt;/li&gt;
&lt;li&gt;Function to &lt;strong&gt;delete user data&lt;/strong&gt; when the user wants to delete their account.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;We launched &lt;a href="https://krossa.io"&gt;krossa.io&lt;/a&gt; in &lt;strong&gt;43 days&lt;/strong&gt; and we believe it will help A LOT of bloggers find their audience.&lt;/p&gt;

&lt;p&gt;The problem was that crossposting took too much time and this was our solution for a platform:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write your blogpost or import it&lt;/li&gt;
&lt;li&gt;Select the platforms&lt;/li&gt;
&lt;li&gt;Publish&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;TLDR of the stack&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;Firebase (Storage, Functions, Firestore)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you found this interesting and you are a blogger or thinking about becoming one,consider &lt;a href="https://krossa.io"&gt;krossa.io&lt;/a&gt; as even this was posted from it 😎&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/robertbrunhage"&gt;Twitter&lt;/a&gt; and you can find the original blog post at &lt;a href="https://robertbrunhage.com"&gt;robertbrunhage.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/STp846IvtZw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>saas</category>
      <category>nextjs</category>
      <category>blogging</category>
    </item>
    <item>
      <title>Simple way to serialize objects to JSON in TypeScript</title>
      <author>Hans Ott</author>
      <pubDate>Thu, 24 Jun 2021 14:21:09 +0000</pubDate>
      <link>https://dev.to/hansott/simple-way-to-serialize-objects-to-json-in-typescript-27f5</link>
      <guid>https://dev.to/hansott/simple-way-to-serialize-objects-to-json-in-typescript-27f5</guid>
      <description>&lt;p&gt;When we’re building an application we often need to serialize objects to JSON for storing them in a key value store (e.g. Redis) or publishing them on a queue.&lt;/p&gt;

&lt;p&gt;While there are libraries available like &lt;a href="https://github.com/typestack/class-transformer"&gt;class-transformer&lt;/a&gt; or &lt;a href="https://github.com/gcanti/io-ts"&gt;io-ts&lt;/a&gt;, there's an easier way to serialize/unserialize objects to JSON.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/typestack/class-transformer"&gt;class-transformer&lt;/a&gt; depends on the &lt;code&gt;reflect-metadata&lt;/code&gt; package. Read &lt;a href="https://dev.to/svehla/why-reflect-metadata-suc-s-5fal"&gt;this blogpost&lt;/a&gt; to know why you should be careful with depending on this package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gcanti/io-ts"&gt;io-ts&lt;/a&gt; requires knowledge of some functional programming concepts. While I'm a big fan of functional programming, it's not for everyone. (The library is very well designed though)&lt;/p&gt;

&lt;p&gt;In both cases we also need to depend on an extra package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/hackernoon/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5"&gt;We want to keep our dependencies as small as possible.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What none of these packages offer is a way to deal with backwards compatibility (e.g. when you've added or renamed a property of an object).&lt;/p&gt;

&lt;p&gt;I also want something simple.&lt;/p&gt;

&lt;p&gt;Let's say we want to serialize a user with an email &lt;a href="https://martinfowler.com/bliki/ValueObject.html"&gt;value object&lt;/a&gt; to JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Not an email address: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;asString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Email&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User ID cannot be empty!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;toObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toObject&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;fromSerialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serialized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toObject&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serialized&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;john.doe@acme.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromSerialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We add a &lt;code&gt;private toObject()&lt;/code&gt; method that returns a plain object for the &lt;code&gt;User&lt;/code&gt; (since JSON is not aware of classes).&lt;/li&gt;
&lt;li&gt;We add a &lt;code&gt;serialize()&lt;/code&gt; method that returns the plain object as a JSON string.&lt;/li&gt;
&lt;li&gt;We add a &lt;code&gt;static unserialize(serialized: string)&lt;/code&gt; method to recreate the &lt;code&gt;User&lt;/code&gt; instance. &lt;code&gt;JSON.parse&lt;/code&gt; has &lt;code&gt;any&lt;/code&gt; as return type, which results in no type checking or autocompletion. We can grab the return type of the &lt;code&gt;toObject()&lt;/code&gt; method with &lt;code&gt;ReturnType&amp;lt;User["toObject"]&amp;gt;&lt;/code&gt; to regain type checking/autocompletion.&lt;/li&gt;
&lt;li&gt;Always guard against invalid state in your entities. This makes sure that a &lt;code&gt;User&lt;/code&gt; always has an ID and a valid email address.&lt;/li&gt;
&lt;li&gt;Look ma, no packages needed!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me know if this blogpost was useful! 😊&lt;/p&gt;

</description>
      <category>typescript</category>
    </item>
    <item>
      <title>Javascript: Les opérateurs ...spread et ...REST </title>
      <author> Eric Le Codeur</author>
      <pubDate>Thu, 24 Jun 2021 14:04:04 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/javascript-les-operateurs-spread-et-rest-1a3a</link>
      <guid>https://dev.to/ericlecodeur/javascript-les-operateurs-spread-et-rest-1a3a</guid>
      <description>&lt;p&gt;Si vous désirez plus de contenu francophone comme celui-ci, cliquer &lt;strong&gt;Follow ou &lt;a href="https://twitter.com/EricLeCodeur"&gt;suivez-moi sur Twitter&lt;/a&gt;&lt;br&gt;
&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Définition&lt;/h2&gt;

&lt;p&gt;Opérateur &lt;em&gt;Spread&lt;/em&gt; : Permet de déconstruire les itérables (tableaux/objets/chaînes) en éléments uniques.&lt;/p&gt;

&lt;p&gt;Opérateur &lt;em&gt;Rest&lt;/em&gt;: Rassemble tous les éléments restants dans un tableau.&lt;/p&gt;

&lt;h2&gt;Exemples Spread Operator&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Paul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour déconstruire un tableau&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ['Mike', 'Paul', 'John']&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Mike Paul John&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour modifier/ajouter à un tableau&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// ['Jack', 'Mike', 'Paul', 'John', 'David']&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour copier un tableau&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copyNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour joindre 2 tableaux&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;numbers1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;numbers2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour les strings également&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// ['M', 'i', 'k', 'e']&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator comme paramêtres d'une fonction&lt;/span&gt;
&lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// sans spread operator&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// avec spread operator&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour déconstruire les objects&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Taylor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Utiliser le spread operator pour copier les valeurs d'un object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// // Utiliser le spread operator pour étendre un object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;creditLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;h2&gt;Exemples REST operator&lt;/h2&gt;

&lt;p&gt;Le REST operator fonctionne selon le même principe que le spread operator mais du côté gauche du '=' &lt;/p&gt;

&lt;p&gt;Le REST operator permet de déconstuire l'assignation&lt;/p&gt;

&lt;p&gt;Le REST operator doit être utiliser comme dernière assignation&lt;/p&gt;

&lt;p&gt;Toutes les valeurs non assigné (avant l'ajout du REST) seront envoyé dans le REST&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;others&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1, 2, [3, 4, 5]&lt;/span&gt;

&lt;span class="c1"&gt;// Même principe avec les objects&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Taylor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;
&lt;span class="c1"&gt;// personName va assigner le "rest" des properties non utilisées&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 25, { firstName: 'Mike', lastName: 'Taylor' }&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le REST operator pour capter tous les paramètres&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Le REST operator va rassembler tous les paramètre dans un tableau&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2]&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 3]&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 3, 4]&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le REST operator pour capter tous les autres paramètres:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Exemple, tous les autres paramètres après mainText se retrouverons dans options&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
