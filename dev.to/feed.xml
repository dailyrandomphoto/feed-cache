<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Benchmark: Mezon Router is up to 463 times faster then Pecee Router</title>
      <author>alexdodonov</author>
      <pubDate>Tue, 11 May 2021 10:31:09 +0000</pubDate>
      <link>https://dev.to/alexdodonov/benchmark-mezon-router-is-up-to-463-times-faster-then-pecee-router-53ae</link>
      <guid>https://dev.to/alexdodonov/benchmark-mezon-router-is-up-to-463-times-faster-then-pecee-router-53ae</guid>
      <description>&lt;p&gt;Hi all! Today we have one more benchmark.&lt;/p&gt;

&lt;p&gt;As usual we have two cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;http server accepts request, launches php script, which handles this request, and then all script data is removed from memory. All following requests are processed in the same way. In this case very critical to launch script as soon as possible and we do not have time for long pre-compilations and preparations. Because all of it will be lost after the script will finish working;&lt;/li&gt;
&lt;li&gt;php script is launching, initiating all internal components (and router is one of them) and then starting processing requests. This case can be organized via for example react-php. It differs from the previous case because we can spend reasonable time to pre-compile routes for faster processing.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#the-first-case"&gt;
  &lt;/a&gt;
  The first case
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// static routes&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generatePeceeStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/static/0'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generatePeceeStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/static/99'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generatePeceeStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/static/199'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// and so on up to '/static/999'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Non-static routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generatePeceeNonStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/param/0/1'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generatePeceeNonStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/param/99/1'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generatePeceeNonStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/param/199/1'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// and so on up to '/param/999/1'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-second-case"&gt;
  &lt;/a&gt;
  The second case
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generatePeceeStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/static/0'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/static/99'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/static/199'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// and so on up to '/static/999'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Non-static routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generatePeceeNonStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/param/0/1'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/param/99/1'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/param/199/1'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// and so on up to '/param/999/1'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#ok-what-do-we-have"&gt;
  &lt;/a&gt;
  OK What do we have?
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#the-first-case-static-routes"&gt;
  &lt;/a&gt;
  The first case + static routes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+-------------------------------+-------------+-----+------+-----+------------+--------------+--------------+--------------+---------------+--------------+--------+-------+
| benchmark                     | subject     | set | revs | its | mem_peak   | best         | mean         | mode         | worst         | stdev        | rstdev | diff  |
+-------------------------------+-------------+-----+------+-----+------------+--------------+--------------+--------------+---------------+--------------+--------+-------+
| DVKSingleRequestStaticBench   | benchStatic | 0   | 10   | 10  | 3,169,760b | 32,444.300μs | 40,121.470μs | 37,618.470μs | 48,182.400μs  | 5,328.241μs  | 13.28% | 3.19x |
| HoaSingleRequestStaticBench   | benchStatic | 0   | 10   | 10  | 3,772,064b | 55,991.800μs | 64,991.640μs | 62,583.264μs | 81,316.900μs  | 7,115.357μs  | 10.95% | 5.16x |
| MezonSingleRequestStaticBench | benchStatic | 0   | 10   | 10  | 2,211,528b | 10,973.500μs | 12,595.210μs | 11,765.806μs | 14,942.800μs  | 1,358.407μs  | 10.79% | 1.00x |
| PeceeSingleRequestStaticBench | benchStatic | 0   | 10   | 10  | 6,939,320b | 47,342.800μs | 68,375.800μs | 53,452.352μs | 167,419.000μs | 35,936.088μs | 52.56% | 5.43x |
+-------------------------------+-------------+-----+------+-----+------------+--------------+--------------+--------------+---------------+--------------+--------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-first-case-nonstatic-routes"&gt;
  &lt;/a&gt;
  The first case + non-static routes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+------------------------------+------------+-----+------+-----+--------------+---------------+---------------+---------------+---------------+--------------+--------+-------+
| benchmark                    | subject    | set | revs | its | mem_peak     | best          | mean          | mode          | worst         | stdev        | rstdev | diff  |
+------------------------------+------------+-----+------+-----+--------------+---------------+---------------+---------------+---------------+--------------+--------+-------+
| DVKSingleRequestParamBench   | benchParam | 0   | 10   | 10  | 3,162,144b   | 32,829.700μs  | 41,110.350μs  | 39,790.715μs  | 49,529.600μs  | 5,064.512μs  | 12.32% | 1.00x |
| HoaSingleRequestParamBench   | benchParam | 0   | 10   | 10  | 4,090,992b   | 51,596.500μs  | 65,339.800μs  | 55,031.464μs  | 108,218.000μs | 20,450.626μs | 31.30% | 1.59x |
| MezonSingleRequestParamBench | benchParam | 0   | 10   | 10  | 139,432,880b | 149,946.900μs | 214,165.110μs | 171,992.241μs | 323,257.200μs | 59,659.846μs | 27.86% | 5.21x |
| PeceeSingleRequestParamBench | benchParam | 0   | 10   | 10  | 6,523,504b   | 79,722.600μs  | 92,934.320μs  | 91,920.295μs  | 117,962.000μs | 9,651.642μs  | 10.39% | 2.26x |
+------------------------------+------------+-----+------+-----+--------------+---------------+---------------+---------------+---------------+--------------+--------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-second-case-static-routes"&gt;
  &lt;/a&gt;
  The second case + static routes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+-----------------------+-------------+-----+------+-----+------------+--------------+--------------+--------------+--------------+-------------+--------+---------+
| benchmark             | subject     | set | revs | its | mem_peak   | best         | mean         | mode         | worst        | stdev       | rstdev | diff    |
+-----------------------+-------------+-----+------+-----+------------+--------------+--------------+--------------+--------------+-------------+--------+---------+
| DVKReactStaticBench   | benchStatic | 0   | 100  | 10  | 2,429,064b | 11,877.080μs | 18,817.626μs | 15,714.995μs | 27,952.280μs | 5,398.121μs | 28.69% | 272.60x |
| HoaReactStaticBench   | benchStatic | 0   | 100  | 10  | 2,818,136b | 4,588.740μs  | 9,116.453μs  | 10,712.551μs | 13,069.140μs | 2,891.315μs | 31.72% | 132.07x |
| MezonReactStaticBench | benchStatic | 0   | 100  | 10  | 1,832,360b | 21.040μs     | 69.030μs     | 55.919μs     | 199.270μs    | 49.229μs    | 71.32% | 1.00x   |
| PeceeReactStaticBench | benchStatic | 0   | 10   | 10  | 4,098,184b | 24,875.300μs | 32,002.620μs | 34,481.087μs | 41,128.800μs | 5,201.623μs | 16.25% | 463.60x |
+-----------------------+-------------+-----+------+-----+------------+--------------+--------------+--------------+--------------+-------------+--------+---------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-second-case-nonstatic-routes"&gt;
  &lt;/a&gt;
  The second case + non-static routes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----------------------+------------+-----+------+-----+------------+--------------+--------------+--------------+---------------+--------------+--------+--------+
| benchmark            | subject    | set | revs | its | mem_peak   | best         | mean         | mode         | worst         | stdev        | rstdev | diff   |
+----------------------+------------+-----+------+-----+------------+--------------+--------------+--------------+---------------+--------------+--------+--------+
| DVKReactParamBench   | benchParam | 0   | 100  | 10  | 2,433,456b | 14,381.460μs | 18,069.357μs | 15,746.601μs | 26,204.970μs  | 3,907.676μs  | 21.63% | 6.82x  |
| HoaReactParamBench   | benchParam | 0   | 100  | 10  | 3,286,352b | 3,862.330μs  | 4,365.385μs  | 4,270.722μs  | 5,134.820μs   | 341.324μs    | 7.82%  | 1.65x  |
| MezonReactParamBench | benchParam | 0   | 100  | 10  | 3,053,640b | 1,155.640μs  | 2,648.767μs  | 2,063.057μs  | 6,195.750μs   | 1,445.991μs  | 54.59% | 1.00x  |
| PeceeReactParamBench | benchParam | 0   | 10   | 10  | 4,479,280b | 59,373.000μs | 74,590.120μs | 65,226.368μs | 114,763.200μs | 17,391.520μs | 23.32% | 28.16x |
+----------------------+------------+-----+------+-----+------------+--------------+--------------+--------------+---------------+--------------+--------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h1&gt;

&lt;p&gt;More articles can be found in my &lt;a href="https://twitter.com/mezonphp"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-mezonrouter"&gt;
  &lt;/a&gt;
  What is mezon/router?
&lt;/h1&gt;

&lt;p&gt;mezon/router now is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;framework for routing with &lt;strong&gt;100% code coverage&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;10.0 points&lt;/strong&gt; on scrutinizer-ci.com&lt;/li&gt;
&lt;li&gt;router is a part of the &lt;a href="https://github.com/alexdodonov/mezon"&gt;Mezon Project&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Repo on github.com: &lt;a href="https://github.com/alexdodonov/mezon-router"&gt;https://github.com/alexdodonov/mezon-router&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#it-will-be-great-if-you-will-contribute-something-to-this-project-documentation-sharing-the-project-in-your-social-media-bug-fixing-refactoring-or-even-submitting-issue-with-question-or-feature-request-thanks-anyway-"&gt;
  &lt;/a&gt;
  It will be great if you will contribute something to this project. Documentation, sharing the project in your social media, bug fixing, refactoring, or even &lt;strong&gt;&lt;a href="https://github.com/alexdodonov/mezon-router/issues"&gt;submitting issue with question or feature request&lt;/a&gt;&lt;/strong&gt;. Thanks anyway )
&lt;/h1&gt;

</description>
      <category>php</category>
      <category>router</category>
      <category>mezon</category>
      <category>benchmark</category>
    </item>
    <item>
      <title>Minimal Programming Kit</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 11 May 2021 09:55:35 +0000</pubDate>
      <link>https://dev.to/sm0ke/minimal-programming-kit-gej</link>
      <guid>https://dev.to/sm0ke/minimal-programming-kit-gej</guid>
      <description>&lt;p&gt;Hello coders,&lt;/p&gt;

&lt;p&gt;This page aims to help beginners to set up their PC for programming. All recommended tools are free, stable, and widely used even by experienced programmers and designers. In the end, we will build a popular open-source project using the downloaded tools. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;The Short-list&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;A modern editor - &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/"&gt;Nodejs&lt;/a&gt; - used in Javascript-based products and tools&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; - a modern script language used for many types of projects &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/"&gt;GIT&lt;/a&gt; - a command-line tool used to download sources from &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#vscode"&gt;
  &lt;/a&gt;
  VSCode
&lt;/h2&gt;

&lt;p&gt;We need this software to visualize and edit the sources, execute our projects and investigate the issues that might occur during the programming process. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/Download"&gt;VSCode&lt;/a&gt; - download page&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJT18_kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr29ouux80qxitfe3pdx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJT18_kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr29ouux80qxitfe3pdx.png" alt="Programming Kit - VSCode editor."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  NodeJS
&lt;/h2&gt;

&lt;p&gt;Installing NodeJS unlocks access to a huge ecosystem that exposes &lt;br&gt;
many tools and libraries we can use in our projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For coding web pages: &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Backend: &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;, &lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt;, &lt;a href="https://koajs.com/"&gt;Koa&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tools: &lt;a href="https://gulpjs.com/"&gt;Gulp&lt;/a&gt;, &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;To get started with &lt;strong&gt;NodeJS&lt;/strong&gt; please access the official website and download a version compatible with your operating system&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/download/"&gt;NodeJS&lt;/a&gt; - download page&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m54xzZHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nowklhu6p46jx8fh5zt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m54xzZHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nowklhu6p46jx8fh5zt.png" alt="Programming Kit - NodeJS."&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h2&gt;

&lt;p&gt;Python is a general-purpose coding language—which means that, unlike HTML, CSS, and JavaScript, it can be used for other types of programming and software development besides web development. Python is interpreted, easy to learn surrounded by a huge ecosystem, actively supported and used in many industries and domains. Can be used for things like (starting from the simple ones): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic programming: using strings, adding numbers, open files&lt;/li&gt;
&lt;li&gt;Writing system scripts (creating instructions that tell a computer system to “do” something)&lt;/li&gt;
&lt;li&gt;Back end (or server-side) web and mobile app development&lt;/li&gt;
&lt;li&gt;Desktop apps and software development&lt;/li&gt;
&lt;li&gt;Processing big data and performing mathematical computations&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Python can be downloaded from the &lt;a href="https://www.python.org/"&gt;official website&lt;/a&gt;. Choose the installer for your operating system, download, and click a few times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python &lt;span class="nt"&gt;--version&lt;/span&gt;
Python 3.7.2 &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; All Good
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRKcyMCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuiuzuoggsyes9ie5brc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRKcyMCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuiuzuoggsyes9ie5brc.png" alt="Programming Kit - Python Interpreter."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  GIT
&lt;/h2&gt;

&lt;p&gt;Git is a free and open-source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Using GIT we can clone/download and manage projects from Github and BitBucket with ease. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/"&gt;GIT&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/downloads"&gt;GIT&lt;/a&gt; - download page&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;To check the installation, feel free to open a terminal and type  &lt;code&gt;git --version&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git &lt;span class="nt"&gt;--version&lt;/span&gt;
git version 2.28.0.windows.1 &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; All Good
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---I-iegEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzonmw3atr4g9dmkfm2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---I-iegEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzonmw3atr4g9dmkfm2w.png" alt="Programming Kit - GIT versioning tool."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#build-a-sample-project"&gt;
  &lt;/a&gt;
  Build a Sample Project
&lt;/h2&gt;

&lt;p&gt;To make this short tutorial useful, we will build in the local environment a popular open-source project from &lt;a href="https://bit.ly/3fKQZaL"&gt;Creative-Tim&lt;/a&gt;: &lt;a href="https://bit.ly/3u2lZc6"&gt;Material Kit&lt;/a&gt; (free version) with a few commands typed in the terminal.  Material Kit is a Free Bootstrap 4 UI Kit with a fresh, new design inspired by Google's material design.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/3u2lZc6"&gt;Material Kit&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/2RMZDO4"&gt;Material Kit&lt;/a&gt; - LIVE Demo &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To build locally this amazing product, we will follow up a simple setup: clone the sources from the public repository (Github), install modules, and start the template. Let's go!&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the sources&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/creativetimofficial/material-kit.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;material-kit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install project dependencies (this might take a while)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Start the project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;If all goes well, we should see &lt;strong&gt;Material Kit&lt;/strong&gt; starter running in the browser: &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SjCWpWy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zhnq8ktvkojpo6tlnha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SjCWpWy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zhnq8ktvkojpo6tlnha.png" alt="Programming Kit - Sample Project."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Free &lt;strong&gt;&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt;&lt;/strong&gt; - a curated list published here on Dev.to&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-source Dashboards&lt;/a&gt;&lt;/strong&gt; provided by AppSeed&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Hi all</title>
      <author>tiepvv</author>
      <pubDate>Tue, 11 May 2021 09:49:05 +0000</pubDate>
      <link>https://dev.to/tiepvv/hi-all-2nn</link>
      <guid>https://dev.to/tiepvv/hi-all-2nn</guid>
      <description>&lt;p&gt;nice to meet you &lt;/p&gt;

</description>
    </item>
    <item>
      <title>5 Ways To Create A Healthy Eating Lifestyle</title>
      <author>Darren Ainsworth</author>
      <pubDate>Tue, 11 May 2021 09:49:00 +0000</pubDate>
      <link>https://dev.to/darrenainsworth/5-ways-to-create-a-healthy-eating-lifestyle-26b</link>
      <guid>https://dev.to/darrenainsworth/5-ways-to-create-a-healthy-eating-lifestyle-26b</guid>
      <description>&lt;p&gt;We all know that eating healthy is one of the major keys to a healthier, happier, and longer life. That is I, &lt;a href="https://www.crunchbase.com/person/darren-ainsworth"&gt;Darren Ainsworth&lt;/a&gt;, your number one dietitian is all for healthy eating and how to make it a healthy eating lifestyle. And while many must have made resolutions and goals to incorporate a healthy diet, sticking to these goals is where the challenge lies.&lt;/p&gt;

&lt;p&gt;However, it doesn’t have to be hard. To eat healthier and smarter, I have shared with you a few tips and tricks to get you started. With these together with exercising and taking care of your overall well-being, you can stay on top of sicknesses, and live healthier and happier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#go-colorful"&gt;
  &lt;/a&gt;
  Go Colorful
&lt;/h2&gt;

&lt;p&gt;Fruits and vegetables are colorful for good reasons: they contain different antioxidants, vitamins and minerals that will do your body good. Along with keeping you from free radicals and protecting against diseases and illnesses, it can also help your mental health by protecting from oxidative stress. This means the more you are making your meal colorful, the more nutrients you are enriching your body.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reduce-sugar-intake"&gt;
  &lt;/a&gt;
  Reduce Sugar Intake
&lt;/h2&gt;

&lt;p&gt;Sugar is one of the things I love most. I love sweet things but as a dietitian, I know this is not something my body loves. What did I do? I replaced sweets with healthier snacks and I keep these snacks handy at home in case those cravings rear their heads. I consume whole food and ditch sugar-sweetened drinks for smoothies or home-made iced drinks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-overly-processed-food"&gt;
  &lt;/a&gt;
  Avoid Overly Processed Food
&lt;/h2&gt;

&lt;p&gt;Avoid processed food as much as possible. The point is you never can tell how much has been added into the food. And you can be consuming more than the ideal amount of fat, sugar, salt and calories. Hence, less of boxed macaroni, potato chips or hamburgers. More fresh foods, whole grains, healthy breads, fruits and vegetables and many more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drink-enough-water"&gt;
  &lt;/a&gt;
  Drink Enough Water
&lt;/h2&gt;

&lt;p&gt;Proper hydration is essential to stay healthy. While you crave for those sugary drinks every time, why not replace them with water or fruit- infused water? This way, not only are you ensuring your body is getting the required amount of water, but you are also keeping away from obesity and illnesses. And if you have difficulty keeping up with the right amount of water, make it a habit to keep a bottle of water on your desk or take it with you when you run errands. This way, you can always reach out when there’s a need for it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-fall-for-tempting-food-blogs"&gt;
  &lt;/a&gt;
  Don’t Fall for Tempting Food Blogs
&lt;/h2&gt;

&lt;p&gt;You are working on healthy diets, but you can’t stop yourself from watching those yummy food videos and pictures? This might be a difficult feat to conquer and you are more likely to want more of those foods you swear to keep away from. For this, try as much as you can to limit how much you watch food TV shows, blogs and videos and work more on realising your goals.&lt;/p&gt;

&lt;p&gt;To conclude, don’t beat yourself too much on what to eat and what not to eat. It’s all about finding a balance- eating healthy and still satisfying your desires when it comes knocking. Contact me, &lt;a href="https://darrenainsworth.wordpress.com/"&gt;Darren Ainsworth&lt;/a&gt; for more on diet and healthy eating.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Original Source:&lt;a href="https://getjoys.net/health/healthy-eating-lifestyle/"&gt;getjoys.net&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

</description>
      <category>darrenainsworth</category>
      <category>healthydiet</category>
      <category>healthtips</category>
      <category>healthcare</category>
    </item>
    <item>
      <title>The future of ecommerce is with Jamstack: Next.js, Contentful and Shopify</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Tue, 11 May 2021 09:47:28 +0000</pubDate>
      <link>https://dev.to/contentful/the-future-of-ecommerce-is-with-jamstack-next-js-contentful-and-shopify-4o20</link>
      <guid>https://dev.to/contentful/the-future-of-ecommerce-is-with-jamstack-next-js-contentful-and-shopify-4o20</guid>
      <description>&lt;p&gt;We’re trying something new in the Contentful DevRel team. Myself and Shy Ruparel are joining forces for four weeks of live streams to explore, experiment and build with Next.js, Contentful and Shopify — with the goal of proving why Jamstack is the future of ecommerce. You’re all invited!&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="https://twitch.tv/contentfuldevs"&gt;ContentfulDevs&lt;/a&gt; on Twitch and join us when we begin our journey May 18, 2021.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#jamstack-is-no-longer-just-javascript-apis-and-markup"&gt;
  &lt;/a&gt;
  Jamstack is no longer just JavaScript, APIs and Markup
&lt;/h2&gt;

&lt;p&gt;Since its origin in the mid 2010s, Jamstack has evolved into a super-speedy, fully-scalable, secure ecosystem of “headless” tools for building web applications. Jamstack architecture promotes tools that separate frontend and backend functionalities to allow full-stack teams to move faster. It encourages serving static HTML to browsers that is pre-rendered at build time. Jamstack has empowered small teams and individuals to build and deploy full-stack applications without the overhead of traditional model-view-controller application architecture. &lt;/p&gt;

&lt;p&gt;Today, developers are using Jamstack and open-source software to bootstrap, build and deploy websites in &lt;em&gt;a matter of minutes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Since the world moved almost entirely to the web during the Covid-19 pandemic, businesses have entered a new era of digital transformation. This shift has particularly impacted small-to-medium-sized enterprises (SMEs) offering physical products and services. Due to the inability to trade in-person, businesses had to move to online offerings to preserve their income. However, traditional all-in-one monolith solutions for ecommerce can be very costly for SMEs. That’s where Jamstack can help.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scale-online-as-you-grow-your-business"&gt;
  &lt;/a&gt;
  Scale online as you grow your business
&lt;/h2&gt;

&lt;p&gt;Ecommerce doesn’t have to cost a lot when you’re starting out. With Jamstack, you’ll only need to invest in the ecommerce tools to provide stock inventory and checkout functionality. This can start from as little as $29 per month, depending on the vendor. With that taken care of, you can build, deploy and release a basic website for free using popular hosting platforms such as &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; and &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;, and you can &lt;a href="https://www.contentful.com/sign-up"&gt;sign up with Contentful&lt;/a&gt; for free to serve your landing page content and marketing materials to your website. As your business grows and you’re serving millions of customers every day, Jamstack will scale with you. &lt;/p&gt;

&lt;p&gt;But is it really that simple?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#salma-and-shy-will-prove-it"&gt;
  &lt;/a&gt;
  Salma and Shy will prove it
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mhMDUXQmjRo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For four weeks, Salma and Shy from the Contentful DevRel team will join forces to test this theory. Their hypothesis is that the future of ecommerce is supported by Jamstack. Their goal? To build an ecommerce site from the ground up using only Jamstack tools. They’ll be using Next.js, Contentful and Shopify. And who knows, maybe they’ll end up building the next ecommerce empire — Jamstack will ensure their empire scales as they do.&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="https://twitch.tv/contentfuldevs"&gt;ContentfulDevs&lt;/a&gt; on Twitch and join Salma and Shy on their journey. It kicks off May 18, 2021. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Solution: Maximum Points You Can Obtain from Cards</title>
      <author>seanpgallivan</author>
      <pubDate>Tue, 11 May 2021 09:35:04 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-maximum-points-you-can-obtain-from-cards-2no</link>
      <guid>https://dev.to/seanpgallivan/solution-maximum-points-you-can-obtain-from-cards-2no</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/discuss/1202397"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1423-medium-maximum-points-you-can-obtain-from-cards"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/"&gt;Leetcode Problem #1423 (&lt;em&gt;Medium&lt;/em&gt;): Maximum Points You Can Obtain from Cards&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are several cards &lt;strong&gt;arranged in a row&lt;/strong&gt;, and each card has an associated number of points The points are given in the integer array &lt;code&gt;cardPoints&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In one step, you can take one card from the beginning or from the end of the row. You have to take exactly &lt;code&gt;k&lt;/code&gt; cards.&lt;/p&gt;

&lt;p&gt;Your score is the sum of the points of the cards you have taken.&lt;/p&gt;

&lt;p&gt;Given the integer array &lt;code&gt;cardPoints&lt;/code&gt; and the integer &lt;code&gt;k&lt;/code&gt;, return the &lt;em&gt;maximum score&lt;/em&gt; you can obtain.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;cardPoints = [1,2,3,4,5,6,1], k = 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;cardPoints = [2,2,2], k = 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;Regardless of which two cards you take, your score will always be 4.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;cardPoints = [9,7,7,9,7,7,9], k = 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;You have to take all the cards. Your score is the sum of points of all cards.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 4:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;cardPoints = [1,1000,1], k = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;You cannot take the card in the middle. Your best score is 1.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 5:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;cardPoints = [1,79,80,1,1,1,200,1], k = 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;202&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= cardPoints.length &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= cardPoints[i] &amp;lt;= 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= k &amp;lt;= cardPoints.length&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Since we're forced to take &lt;strong&gt;K&lt;/strong&gt; amount of cards no matter what, we can solve this problem with a &lt;strong&gt;two-pointer system&lt;/strong&gt; with a &lt;strong&gt;sliding window&lt;/strong&gt; approach. Instead of counting the sum of the values &lt;em&gt;between&lt;/em&gt; the two pointers, we'll instead be counting the sum of the values &lt;em&gt;outside&lt;/em&gt; the sliding window.&lt;/p&gt;

&lt;p&gt;We can start by iterating through the first &lt;strong&gt;K&lt;/strong&gt; cards of our card list (&lt;strong&gt;C&lt;/strong&gt;) and finding the &lt;strong&gt;total&lt;/strong&gt; points. At this point, our reverse window will be the cards from &lt;strong&gt;i = K&lt;/strong&gt; to &lt;strong&gt;j = C.length - 1&lt;/strong&gt;. At each iteration, we'll slide the window backwards, removing one card from the left side (&lt;strong&gt;-C[i]&lt;/strong&gt;) and adding one card from the right side (&lt;strong&gt;+C[j]&lt;/strong&gt;) each time.&lt;/p&gt;

&lt;p&gt;We should keep track of the &lt;strong&gt;best&lt;/strong&gt; possible result at each iteration, then &lt;strong&gt;return best&lt;/strong&gt; once we reach the end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--th9xg4Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ec3x0su.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--th9xg4Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ec3x0su.gif" alt="Visual 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(K)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;maxScore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;K&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;best&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;maxScore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maxScore&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;K&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;K&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;K&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxScore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>React Bootstrap 5</title>
      <author>MD Bootstrap</author>
      <pubDate>Tue, 11 May 2021 09:31:25 +0000</pubDate>
      <link>https://dev.to/mdbootstrap/react-bootstrap-5-2bkb</link>
      <guid>https://dev.to/mdbootstrap/react-bootstrap-5-2bkb</guid>
      <description>&lt;p&gt;We just released  &lt;strong&gt;&lt;a href="https://www.producthunt.com/posts/react-bootstrap-5"&gt;React Bootstrap 5&lt;/a&gt;&lt;/strong&gt;  on Product Hunt.&lt;/p&gt;

&lt;p&gt;Only a few days after the stable release of Bootstrap 5 - we can integrate it with React 17.&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RTL support&lt;/li&gt;
&lt;li&gt;Material Design 2.0 guidelines&lt;/li&gt;
&lt;li&gt;extensive docs &amp;amp; API&lt;/li&gt;
&lt;li&gt;700+ UI components &amp;amp; templates&lt;/li&gt;
&lt;li&gt;MIT license - free for personal &amp;amp; commercial use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you will enjoy it :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LdOEKc2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cbee6y5y3i92smfw5eg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LdOEKc2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cbee6y5y3i92smfw5eg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#npm-installation"&gt;
  &lt;/a&gt;
  NPM Installation
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before starting the project make sure to install Node LTS (12.x.x or higher). We are using yarn to start a project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to use package from npm you have to have a project with React. We recommend creating an app with create-react-app from react for beginners.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-react-app"&gt;
  &lt;/a&gt;
  Step 1: Create React App.
&lt;/h3&gt;

&lt;p&gt;We are using React 17+ version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create-react-app my-app or npx create-react-app my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-navigate-to-apps-directory"&gt;
  &lt;/a&gt;
  Step 2:  Navigate to App's directory
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#react-bootstrap-5-installlation"&gt;
  &lt;/a&gt;
  React Bootstrap 5 installlation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-setup-mdb"&gt;
  &lt;/a&gt;
  Step 1:  Setup MDB
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add mdb-react-ui-kit or npm i mdb-react-ui-kit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;CSS import&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the following line in your index.js file before the App.js file import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'mdb-react-ui-kit/dist/css/mdb.min.css'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Font Awesome&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the following line in public/index.html file inside head section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link href="https://use.fontawesome.com/releases/v5.15.1/css/all.css" rel="stylesheet" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Roboto font&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the following line in public/index.html file inside head section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;amp;display=swap" rel="stylesheet" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set font family in globally css file for example src/index.css inside src folder as in the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body { font-family: Roboto, Helvetica, Arial, sans-serif; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-launch-your-app"&gt;
  &lt;/a&gt;
  Step 2:  Launch Your App
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn start or npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>bootstrap</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Magento Developer Experience Level</title>
      <author>Karl Gorman</author>
      <pubDate>Tue, 11 May 2021 09:09:39 +0000</pubDate>
      <link>https://dev.to/karlgorman6/magento-developer-experience-level-1b60</link>
      <guid>https://dev.to/karlgorman6/magento-developer-experience-level-1b60</guid>
      <description>&lt;p&gt;Experience is always a crucial factor for employers to hire a candidate for a particular job role. Just like any of the roles in software development companies, employers also put forth varying experience requirements depending on the type of position and role they will play. Here’s a brief description of each category:&lt;/p&gt;

&lt;p&gt;Junior&lt;br&gt;
Some software companies in Germany and other parts of the world hire career starters as Trainees or Junior Developers who have good theoretical knowledges as well as motivation and have performed exceptionally well during the interwies and execution of technical test task. Junior Magento developers work under the guidance of senior developers and gain practical software development experience.&lt;/p&gt;

&lt;p&gt;However, they ought to have basic knowledge of technologies associated with Magento eCommerce and aspects of testing. They should also be familiar with PHP, a programming language used for developing Magento 2 code. Additionally, as a Frontend developer in Magento development, one should be skillful in HTML, CSS, and JavaScript. They are subject to diligent and fruitful training by the experts or seniors so that they end up becoming the Perfect Magento website developer.&lt;/p&gt;

&lt;p&gt;Secondly, the essential attribute upon which candidates are selected for a junior position is their soft skills. In other words, they need to possess a professional working style, ethics and values, phenomenal client management and should be committed and dedicated to delivering quality work on time and meet the deadlines.&lt;/p&gt;

&lt;p&gt;Middle (2-3 Years Experience)&lt;br&gt;
In the case of middle positions, the leading e-Commerce companies in Germany demand 2-3 years of experience for the role of Magento developers. Middle developers should have good combination of soft skills and hard skills.&lt;/p&gt;

&lt;p&gt;At this level, developers for the Magento platform are supposed to be self-skilled in liaising with the design team. They are asked to be prominent in setting Magento 1x and 2x websites for clients. In addition, they should have excellent object-oriented programming knowledge, the ability to build modules, testing the performance of websites, and customizing extensions.&lt;/p&gt;

&lt;p&gt;To be selected for the role, one ought to hold the certificate of Magento development. In addition to technical soundness, it is the management skills of Magento employees that help them hit the jackpot and attain the position of senior or manager in the nearby future.&lt;/p&gt;

&lt;p&gt;Senior (5 Years Experience)&lt;br&gt;
The A-list eCommerce or software development companies in Germany require 5+ years of experience for the role of Senior Magento developer. The recruitment for Senior-level may happen in two ways. First is internal recruitment, that is, when middle developer is promoted to the senior-level based on his or her incredible performance for a consistent period. The second is external recruitment when the vacancy for the senior developer is filled from outside the organization.&lt;/p&gt;

&lt;p&gt;In the case of external hiring, employees determine the proficiency of the candidate in line with previous experience and knowledge about the Magento platform. The employers also consider the refrences of different projects that the candidate has worked on in a previous firm. Besides, management skills is another foremost aspect that helps to become a senior developer in a reputed enterprise in Germany and other parts of the world.&lt;/p&gt;

&lt;p&gt;Lead Developer ( min. 7 Years Experience)&lt;br&gt;
In comparison to junior, middle and senior PHP developer positions, vacancies for Lead developer are less in number. They should have hands-on experience working on different aspects of Magento development, including core PHP, HTML, CSS, MySQL, JavaScript &amp;amp; Query, and plugins.&lt;br&gt;
&lt;a href="https://chudovo.com/magento-developer/"&gt;https://chudovo.com/magento-developer/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>magento</category>
      <category>software</category>
      <category>devops</category>
    </item>
    <item>
      <title>_b00t_ - a startup environment</title>
      <author>Brian Horakh</author>
      <pubDate>Tue, 11 May 2021 08:47:40 +0000</pubDate>
      <link>https://dev.to/elasticdotventures/b00t-a-startup-environment-298</link>
      <guid>https://dev.to/elasticdotventures/b00t-a-startup-environment-298</guid>
      <description>&lt;p&gt;The idea behind &lt;em&gt;b00t&lt;/em&gt; is a framework to build a startup properly and provide tooling &amp;amp; infrastructure, devops pipeline, vs code environments, "startup kit", mostly python &amp;amp; typescript with optional libraries such as ai, crypto, ecommerce, etc. necessary for building &lt;em&gt;and&lt;/em&gt; testing &lt;em&gt;and&lt;/em&gt; deploying those.&lt;/p&gt;

&lt;p&gt;I'm still very early into the process, I'm presently building heavily into the Azure Cloud,  OpenID and the authentication middleware in Vue.JS, using the Vittesse framework.  The final product can give you a Vue.JS interface to push a button that runs an authenticated function, and then builds a plurality of messaging layers MQTT, Redis, etc. At least that's the dream.&lt;/p&gt;

&lt;p&gt;Presently the docker and fzf menuing system is coming along nicely.  This is a massive cloud-stack span of knowledge will ultimately come together in a crescendo of pre-configured bash scripting &amp;amp; menuing environment, thereby compressing the first 100 hours of action required for "creating a startup" into a few commands and reducing operational costs substantially by starting from a functional template.  &lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.com/elasticdotventures/_b00t_"&gt;http://github.com/elasticdotventures/_b00t_&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>pointers</title>
      <author>Thilak</author>
      <pubDate>Tue, 11 May 2021 08:32:55 +0000</pubDate>
      <link>https://dev.to/thilak/pointers-24mf</link>
      <guid>https://dev.to/thilak/pointers-24mf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#pointers"&gt;
  &lt;/a&gt;
  pointers:
&lt;/h1&gt;

&lt;p&gt;A pointer is a variable whose value is the address of another variable, i.e., direct address of the memory location. Like any variable or constant, you must declare a pointer before using it to store any variable address. The general form of a pointer variable declaration is −&lt;/p&gt;

&lt;p&gt;syntax:&lt;/p&gt;

&lt;p&gt;type *var-name;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;example:&lt;br&gt;
include &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;int main () {&lt;/p&gt;

&lt;p&gt;int  var = 20; &lt;br&gt;
   int  ip;        &lt;/p&gt;

&lt;p&gt;ip = &amp;amp;var;  &lt;/p&gt;

&lt;p&gt;printf("Address of var variable: %x\n", &amp;amp;var  );&lt;/p&gt;

&lt;p&gt;/* address stored in pointer variable */&lt;br&gt;
   printf("Address stored in ip variable: %x\n", ip );&lt;/p&gt;

&lt;p&gt;/* access the value using the pointer */&lt;br&gt;
   printf("Value of *ip variable: %d\n", *ip );&lt;/p&gt;

&lt;p&gt;return 0;&lt;br&gt;
}&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#types-of-pointers"&gt;
  &lt;/a&gt;
  Types of Pointers
&lt;/h1&gt;

&lt;p&gt;There are different types of pointers which are as follows −&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Null pointer

Void pointer

Wild pointer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;1.Null Pointer:&lt;/p&gt;

&lt;p&gt;You create a null pointer by assigning the null value at the time of pointer declaration.&lt;/p&gt;

&lt;p&gt;This method is useful when you do not assign any address to the pointer. A null pointer always contains value 0.&lt;/p&gt;

&lt;p&gt;syntax:&lt;/p&gt;

&lt;p&gt;Begin.&lt;br&gt;
   Declare a pointer p of the integer datatype.&lt;br&gt;
      Initialize *p= NULL.&lt;br&gt;
   Print “The value of pointer is”.&lt;br&gt;
      Print the value of the pointer p.&lt;br&gt;
End.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;example:&lt;br&gt;
include &lt;br&gt;
int main() {&lt;br&gt;
   int *p= NULL;//initialize the pointer as null.&lt;br&gt;
   printf("The value of pointer is %u",p);&lt;br&gt;
   return 0;&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.Void Pointer:&lt;/p&gt;

&lt;p&gt;It is a pointer that has no associated data type with it. A void pointer can hold addresses of any type and can be typecast to any type.&lt;/p&gt;

&lt;p&gt;It is also called a generic pointer and does not have any standard data type.&lt;/p&gt;

&lt;p&gt;It is created by using the keyword void.&lt;/p&gt;

&lt;p&gt;syntax:&lt;br&gt;
Begin&lt;br&gt;
   Declare a of the integer datatype.&lt;br&gt;
      Initialize a = 7.&lt;br&gt;
   Declare b of the float datatype.&lt;br&gt;
      Initialize b = 7.6.&lt;br&gt;
   Declare a pointer p as void.&lt;br&gt;
   Initialize p pointer to a.&lt;br&gt;
   Print “Integer variable is”.&lt;br&gt;
      Print the value of a using pointer p.&lt;br&gt;
   Initialize p pointer to b.&lt;br&gt;
   Print “Float variable is”.&lt;br&gt;
      Print the value of b using pointer p&lt;br&gt;
End.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;example:&lt;br&gt;
include&lt;br&gt;
int main() {&lt;br&gt;
   int a = 7;&lt;br&gt;
   float b = 7.6;&lt;br&gt;
   void *p;&lt;br&gt;
   p = &amp;amp;a;&lt;br&gt;
   printf("Integer variable is = %d", ( (int) p) );&lt;br&gt;
   p = &amp;amp;b;&lt;br&gt;
   printf("\nFloat variable is = %f", ( (float) p) );&lt;br&gt;
   return 0;&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3.Wild Pointer:&lt;/p&gt;

&lt;p&gt;Wild pointers are also called uninitialized pointers. Because they point to some arbitrary memory location and may cause a program to crash or behave badly.&lt;/p&gt;

&lt;p&gt;syntax:&lt;br&gt;
include &lt;br&gt;
int main(){&lt;br&gt;
   int *p; //wild pointer&lt;br&gt;
   printf("\n%d",*p);&lt;br&gt;
   return 0;&lt;br&gt;
}&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;example:&lt;br&gt;
include &lt;br&gt;
int main(){&lt;br&gt;
   int *p; //wild pointer&lt;br&gt;
   printf("\n%d",*p);&lt;br&gt;
   return 0;&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>ถ้าจะเอา Hospital-OS ไปออกหน่วยฉีดวัคซีน ทำยังไง</title>
      <author>Somprasong Damyos</author>
      <pubDate>Tue, 11 May 2021 08:31:43 +0000</pubDate>
      <link>https://dev.to/somprasongd/hospital-os-102p</link>
      <guid>https://dev.to/somprasongd/hospital-os-102p</guid>
      <description>&lt;p&gt;ช่วงนี้หลายๆ โรงพยาบาลคงเตรียมตัวสำหรับฉีดวัคซีนโควิดกันอยู่ ซึ่ง Hospital-OS เวอร์ชัน 3.9.64 นั้น ได้เพิ่มหน้าจอสำหรับบันทึก และส่งข้อมูลการรับวัคซีนไปยัง MOPH Immunization Center ให้เพื่อลดขั้นตอนการทำงานของเจ้าหน้าที่ &lt;/p&gt;

&lt;p&gt;ซึ่งถ้าใช้งานภายในโรงพยาบาลเองก็ไม่มีปัญหาอะไร แต่ถ้าโรงพยาบาลต้องออกหน่วยไปฉีดวัคซีนข้างนอกหล่ะต้องทำยังไง&lt;/p&gt;

&lt;p&gt;วิธีที่ปลอดภัยก็คงหนีไม่พ้นการใช้งาน VPN แต่ก็มีขั้นตอนตั้งค่ามากมายทั้งฝั่งของ server และ client วันนี้เลยจะมาแนะนำการเชื่อมต่อ VPN แบบไม่ต้องตั้งค่าอะไรเลย&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E0%B8%AA%E0%B8%B4%E0%B9%88%E0%B8%87%E0%B8%97%E0%B8%B5%E0%B9%88%E0%B8%95%E0%B9%89%E0%B8%AD%E0%B8%87%E0%B8%A1%E0%B8%B5"&gt;
  &lt;/a&gt;
  สิ่งที่ต้องมี
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;โปรแกรม Hospital-OS เวอร์ชัน 3.9.64 ขึ้นไป&lt;/li&gt;
&lt;li&gt;สมัครใช้งาน &lt;a href="https://tailscale.com"&gt;tailscale&lt;/a&gt; แบบ Solo (ฟรี)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#%E0%B8%A1%E0%B8%B2%E0%B9%80%E0%B8%A3%E0%B8%B4%E0%B9%88%E0%B8%A1%E0%B8%81%E0%B8%B1%E0%B8%99%E0%B9%80%E0%B8%A5%E0%B8%A2"&gt;
  &lt;/a&gt;
  มาเริ่มกันเลย
&lt;/h2&gt;

&lt;p&gt;วิธีการเชื่อมต่อ VPN ในบทความนี้จะใช้งาน &lt;a href="https://tailscale.com"&gt;tailscale&lt;/a&gt; เลือกใช้งานแบบ Solo แถมยังสามารถใช้งานได้ถึง 100 เครื่องกันเลยทีเดียว ซึ่งวิธีการก็ไม่ยุ่งยาก แค่ติดตั้งโปรแกรมก็พร้อมใช้งานทันที ไม่ต้องตั้งค่าอะไรเพิ่มอีกแล้ว ง่ายๆ เพียง 3 ขั้นตอน&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E0%B8%82%E0%B8%B1%E0%B9%89%E0%B8%99%E0%B9%81%E0%B8%A3%E0%B8%81-%E0%B8%95%E0%B8%B4%E0%B8%94%E0%B8%95%E0%B8%B1%E0%B9%89%E0%B8%87-tailscale-%E0%B8%97%E0%B8%B5%E0%B9%88-database-server"&gt;
  &lt;/a&gt;
  ขั้นแรก ติดตั้ง tailscale ที่ Database Server
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ไปที่ &lt;a href="https://tailscale.com/download/linux"&gt;https://tailscale.com/download/linux&lt;/a&gt; เพื่อดูวิธีการติดตั้งในแต่ละ OS&lt;/li&gt;
&lt;li&gt;โดยในตัวอย่างใช้ server เป็น Ubuntu 20.04 จะใช้คำสั่ง ดังนี้
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Add Tailscale’s package signing key and repository&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://pkgs.tailscale.com/stable/ubuntu/focal.gpg | &lt;span class="nb"&gt;sudo &lt;/span&gt;apt-key add -
&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://pkgs.tailscale.com/stable/ubuntu/focal.list | &lt;span class="nb"&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/tailscale.list

&lt;span class="c"&gt;# Install Tailscale&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;tailscale

&lt;span class="c"&gt;# Authenticate and connect your machine to your Tailscale network&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;tailscale up
To authenticate, visit:

        https://login.tailscale.com/a/c0d94d261161
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;จากขั้นตอนข้างบน เราจะต้องเข้าไปที่ &lt;a href="https://login.tailscale.com/a/c0d94d261161"&gt;https://login.tailscale.com/a/c0d94d261161&lt;/a&gt; เพื่อทำการยืนยันตัวตน และเมื่อ login สำเร็จจะแสดงหน้าจอแบบนี้&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdYqTpMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8am8opr53bdlhdl1trg1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdYqTpMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8am8opr53bdlhdl1trg1.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ให้เข้าไปที่หน้า &lt;a href="https://login.tailscale.com/admin"&gt;admin console&lt;/a&gt; เพื่อทำการตรวจสอบ ก็จะพบเครื่องที่เราเพิ่งติดตั้งไป&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4UYwHO----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upzhyx0f7e9qfbqvgas4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4UYwHO----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upzhyx0f7e9qfbqvgas4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ซึ่งเราสามารถแก้ไขชื่อเครื่องได้ โดยการกดที่ &lt;code&gt;...&lt;/code&gt; แล้วเลือก &lt;code&gt;Edit machine name&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WqVn8qMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35htdruc4h95f31b7bf0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WqVn8qMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35htdruc4h95f31b7bf0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ให้เอาตัวเลือก &lt;code&gt;Auto-generate from OS hostname&lt;/code&gt; ออก แล้วแก้ไขชื่อ เช่น &lt;code&gt;hospitalos-db&lt;/code&gt; และกด Update name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qDSuG8q---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abcqdyvxyoe7bo7bw0kw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDSuG8q---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abcqdyvxyoe7bo7bw0kw.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ชื่อก็จะเปลี่ยนไปเป็นตามที่เราตั้งค่า&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vMmoNBjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jvmx2znpxxmk7siy5d7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vMmoNBjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jvmx2znpxxmk7siy5d7.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E0%B8%82%E0%B8%B1%E0%B9%89%E0%B8%99%E0%B8%97%E0%B8%B5%E0%B9%88%E0%B8%AA%E0%B8%AD%E0%B8%87-%E0%B8%95%E0%B8%B4%E0%B8%94%E0%B8%95%E0%B8%B1%E0%B9%89%E0%B8%87-tailscale-%E0%B8%97%E0%B8%B5%E0%B9%88%E0%B9%80%E0%B8%84%E0%B8%A3%E0%B8%B7%E0%B9%88%E0%B8%AD%E0%B8%87-client"&gt;
  &lt;/a&gt;
  ขั้นที่สอง ติดตั้ง tailscale ที่เครื่อง client
&lt;/h3&gt;

&lt;p&gt;โดยให้ติดที่เครื่อง client ทุกเครื่องที่จะนำออกไปใช้งานนอกโรงพยาบาล&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ดาวน์โหลดโปรแกรม &lt;a href="https://tailscale.com/download/windows"&gt;https://tailscale.com/download/windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ทำการติดตั้ง เมื่อติดตั้งเสร็จจะมี icon แบบในรูปด้านล่างแสดงที่ taskbar&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NpkUaiIj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd9woeba9o909pmmc368.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NpkUaiIj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd9woeba9o909pmmc368.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ทำการ login เพื่อใช้งาน โดยการคลิกขวาที่ icon เลือก &lt;code&gt;Log in&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rbDG9TLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gtzs4z75bj4ccz9pprr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rbDG9TLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gtzs4z75bj4ccz9pprr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ขั้นตอนการยืนยันตัวตนจะต้องใช้บัญีเดียวกันกับที่ติดตั้งที่เครื่อง server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;กลับไปที่หน้า &lt;a href="https://login.tailscale.com/admin"&gt;admin console&lt;/a&gt; เพื่อทำการตรวจสอบ ก็จะพบเครื่องที่เราเพิ่งติดตั้งไป&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tyU1Fflb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbdehniz027qqsrekryq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tyU1Fflb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbdehniz027qqsrekryq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E0%B8%82%E0%B8%B1%E0%B9%89%E0%B8%99%E0%B8%95%E0%B8%AD%E0%B8%99%E0%B8%AA%E0%B8%B8%E0%B8%94%E0%B8%97%E0%B9%89%E0%B8%B2%E0%B8%A2"&gt;
  &lt;/a&gt;
  ขั้นตอนสุดท้าย
&lt;/h3&gt;

&lt;p&gt;เพียงแค่เปิดใช้งานโปรแกรม Hospital-OS เวอร์ชั่น 3.9.64 ขึ้นไป แล้วเปลี่ยนการเชื่อมต่อไปยังระบบฐานข้อมูล โดยใช้ IP ของ VPN ดูได้จากหน้า &lt;a href="https://login.tailscale.com/admin"&gt;admin console&lt;/a&gt; เพียงแค่ก็สามารถใช้งานได้เลย&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ek1dR2yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjpvhhtlby7n7eodgn7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ek1dR2yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjpvhhtlby7n7eodgn7w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KBWz7__i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0k2d6ad72eu4lbrez643.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBWz7__i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0k2d6ad72eu4lbrez643.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;จะเห็นว่าวิธีการนี้ช่วยลดขั้นตอนความยุ่งยากในการติดตั้ง VPN ออกไป และเริ่มใช้งานได้เลยทันที ซึ่งเราสามารถนำเอาไปใช้กับการออกหน่วยให้บริการด้านอื่นๆ ได้อีก ขอแค่มีอินเตอร์เน็ตก็ใช้งานได้แล้ว แถมยังปลอดภัยอีกด้วย&lt;/p&gt;

</description>
      <category>his</category>
      <category>hospitalos</category>
      <category>vpn</category>
    </item>
    <item>
      <title>A Comprehensive Guide To JavaScript Design Patterns</title>
      <author>Rahul</author>
      <pubDate>Tue, 11 May 2021 08:24:16 +0000</pubDate>
      <link>https://dev.to/jainrahul/a-comprehensive-guide-to-javascript-design-patterns-2h7d</link>
      <guid>https://dev.to/jainrahul/a-comprehensive-guide-to-javascript-design-patterns-2h7d</guid>
      <description>&lt;p&gt;Design Pattern is a widely acknowledged concept in the software engineering industry in terms of the benefits it brings to areas of code-reuse and maintainability. As a software developer, you likely stumble upon this term at one point. Unsurprisingly, without even knowing it, the chances are that you might have already implemented them somewhere in the development journey.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;design pattern&lt;/strong&gt; is used to identify reusable solutions that can be applied to recurring problems that software developers commonly face during software design. They represent time-tested solutions and best practices adopted by object-oriented software developers over time.&lt;/p&gt;

&lt;p&gt;This blog will be your guide to everything you need to know about popular JavaScript design patterns. The only prerequisite is that you should have basic knowledge of JavaScript and Object-Oriented Programming concepts.&lt;/p&gt;

&lt;p&gt;Starting with the historical perspective, we will do an in-depth exploration of various common JavaScript design patterns from an object-oriented view. By the end, you will be accustomed to various &lt;a href="https://www.lambdatest.com/blog/comprehensive-guide-to-javascript-design-patterns/?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Rahul-11052021&amp;amp;utm_term=Rahul"&gt;JavaScript design patterns&lt;/a&gt; along with a basic idea of their implementation.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#history-of-design-pattern"&gt;
  &lt;/a&gt;
  History of Design Pattern
&lt;/h2&gt;

&lt;p&gt;Since its inception, the concept of design pattern has been around in the programming world. But it was not formalized till 1994 when one of the most influential work was published called “Design Patterns: Elements Of Reusable Object-Oriented Software” – written by &lt;a href="https://en.wikipedia.org/wiki/Erich_Gamma"&gt;Erich Gamma&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/w/index.php?title=Richard_Helm&amp;amp;action=edit&amp;amp;redlink=1"&gt;Richard Helm&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Ralph_Johnson"&gt;Ralph Johnson&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/John_Vlissides"&gt;John Vlissides&lt;/a&gt; – a group that became known as the Gang of Four (or GoF).&lt;/p&gt;

&lt;p&gt;In this book, 23 object-oriented design patterns are featured. Since then, the “pattern approach” became popular in the software engineering industry, and after that, dozens of other patterns have been discovered.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TNwjquU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/software-engineering.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TNwjquU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/software-engineering.png" alt="object-oriented design patterns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-design-pattern"&gt;
  &lt;/a&gt;
  What is a Design Pattern?
&lt;/h2&gt;

&lt;p&gt;Design patterns can be considered pre-made blueprint applied to solve a particular design problem. It is not a finished piece of code that can be directly applied to your program. But rather, it is more like a template or description that can give you an idea of approaching a problem and inspiring solutions. Hence, the code for the two separate programming scenarios, implementing the same pattern can be different.&lt;/p&gt;

&lt;p&gt;Now, if you are wondering how a pattern gets discovered, it’s simple. When the same solution gets repeated over and over, someone will eventually recognize it, put a name to it, and then describe the solution in detail. That’s how a pattern gets discovered. Definitely, they were not forged overnight.&lt;/p&gt;

&lt;p&gt;A design pattern is often confused with algorithms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structure-of-a-design-pattern"&gt;
  &lt;/a&gt;
  Structure of a Design Pattern
&lt;/h3&gt;

&lt;p&gt;As mentioned in the above section, the author of a design pattern provides documentation. Even though there is no strict agreement among the pattern community regarding the documentation template structure, the following are the sections that are usually present.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vlo5cNIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/4ddbcc85-89bd-4e25-acfc-0e664274cf5b/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vlo5cNIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/4ddbcc85-89bd-4e25-acfc-0e664274cf5b/" alt="Capture.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some other sections are Applicability, Collaborations, Consequences, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-patterns"&gt;
  &lt;/a&gt;
  Why Patterns?
&lt;/h3&gt;

&lt;p&gt;As previously mentioned, we already use patterns every day. They help us solve recurring design problems. But is it necessary to spend time learning them? Let’s look into a few key benefits that design patterns grant us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Avoid reinventing the wheel:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most of the frequently faced design problems already have a well-defined solution that is associated with a pattern. Patterns are proven solutions that can speed up development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Codebase Maintenance:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Patterns help in implementing DRY(Do not Repeat Yourself) – the concept which helps to prevent your codebase from growing large and unwieldy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Easily reused:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Reusing patterns assists in preventing minor subtle issues that can cause major problems in the application development process. This also improves code readability for coders and architects familiar with the patterns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Enables efficient communication:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Patterns add to a developer’s vocabulary. This allows developers to communicate using well-known, well-understood names for software interactions, making communication faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Improve your object-oriented skills:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now even if you never encounter any of these problems, learning patterns can give you insights into various approaches to solving problems using object-oriented principles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#criticism-of-patterns"&gt;
  &lt;/a&gt;
  Criticism of Patterns
&lt;/h3&gt;

&lt;p&gt;Over time design patterns have also received a fair share of criticism. Let’s peek into the popular arguments against patterns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Increases Complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inappropriate use of patterns creates undesired complexity. This is a problem suffered by many novices, who try to apply the pattern wherever they can think of, even in situations where simpler code would do just fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Reduced Relevance:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In “&lt;em&gt;Design Patterns in Dynamic Languages&lt;/em&gt;,” Peter Norvig points out that over half of the design patterns in the 1994 book (written by GoF) are workarounds for missing language features. In many cases, patterns just become kludges that gave the programming language the much-needed super-abilities it lacked then.&lt;/p&gt;

&lt;p&gt;As the language features, frameworks, and libraries evolved, there is no reason to use a few patterns anymore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Lazy Design:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As suggested by Paul Graham in “Revenge of the Nerds” (2002), patterns are a form of lazy design, when the developer is not focused on the problem requirement at hand. Instead of creating a new and appropriate design for the problem, they might just reuse the existing design patterns because they think they should.&lt;/p&gt;

&lt;p&gt;So far, we have seen what design patterns are and also discussed their advantages and disadvantages. Now it’s time for in-depth exploration of various types of JS design patterns available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the upcoming sessions, we will explore object-oriented JavaScript implementations of both classical and modern design patterns. It is to be noted that a few of the classic design patterns mentioned in the GoF book have reduced relevance over time. Hence they will be omitted, and modern patterns from sources like &lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;Addy Osmani’s Learn JavaScript Design Patterns&lt;/a&gt; will be included.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-design-patterns"&gt;
  &lt;/a&gt;
  JavaScript Design Patterns
&lt;/h2&gt;

&lt;p&gt;JavaScript is one of the most in-demand programming languages for web development today. As we will be concentrating on JavaScript design patterns in this article, let’s just have a quick recap of essential JavaScript features that will aid in smoother understanding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) Flexible with programming styles&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
JavaScript has support for procedural, object-oriented, and functional programming styles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Supports First-class Functions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
This means functions can be passed as arguments to other functions just like a variable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) Prototype-based Inheritance&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Though JavaScript supports objects, unlike other OOPs languages, JavaScript doesn’t have the concept of class or class-based inheritance in its basic form. Instead, it uses something called prototype-based or instance-based inheritance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In ES6, even though the keyword “class” is introduced, it still utilizes prototype-based inheritance in the hood.&lt;/p&gt;

&lt;p&gt;To know more about defining “class” using JavaScript, do check out this useful post by Stoyan Stefanov on &lt;a href="https://www.phpied.com/3-ways-to-define-a-javascript-class/"&gt;three ways to define a JavaScript class&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#categories-of-design-pattern"&gt;
  &lt;/a&gt;
  Categories of Design Pattern
&lt;/h3&gt;

&lt;p&gt;Based on intent, the JavaScript design pattern can be categorized into 3 major groups:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) Creational Design Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These patterns focus on handling object creation mechanisms. A basic object creation approach in a program can lead to an added complexity. Creational JS design patterns aim to solve this problem by controlling the creation process.&lt;/p&gt;

&lt;p&gt;Few patterns that fall under this category are – Constructor, Factory, Prototype, Singleton, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Structural Design Patterns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These patterns are concerned with object composition. They explain simple ways to assemble objects and classes into larger structures. They help ensure that when one part of a system changes, the entire structure of the system doesn’t need to do the same, keeping them flexible and efficient.&lt;/p&gt;

&lt;p&gt;Few patterns that fall under this category are – Module, Decorator, Facade, Adapter, Proxy, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) Behavioral Design Patterns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These patterns focus on improving the communication and assignment of responsibilities between dissimilar objects in a system.&lt;/p&gt;

&lt;p&gt;Few patterns that fall under this category are – Chain of Responsibility, Command, Observer, Iterator, Strategy, Template, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kCLRYrmn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Behavioral-Design-Patterns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kCLRYrmn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Behavioral-Design-Patterns.png" alt="Behavioral Design Patterns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this understanding of the categorization, let’s examine each JavaScript design pattern.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#creational-design-patterns"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creational Design Patterns&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. Constructor Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The constructor pattern is one of the most simple, popular, and modern JS design patterns. As suggested by the name, the purpose of this pattern is to aid constructor creation.&lt;/p&gt;

&lt;p&gt;In Addy’s words-&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“A constructor is a special method used to initialize a newly created object once the memory has been allocated for it. In JavaScript, as almost everything is an object, we’re most often interested in object constructors.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the below code, we have defined a function/class Person with attributes name and age. The getDetails() method will print the name and age of the person in the format –&lt;/p&gt;

&lt;p&gt;“Name is age years old!”&lt;/p&gt;

&lt;p&gt;The syntax is given in 2 formats – (a) traditional function-based syntax and (b) EC6 class syntax.&lt;/p&gt;

&lt;p&gt;Then, we instantiate an object for the class Person by invoking the constructor method using the new keyword and passing respective attribute values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//  a) Traditional "function" based syntax

function Person(name,age) {
        this.name = name;
        this.age = age;
        this.getDetails = function () {
            console.log(`${this.name} is ${this.age} years old!`);

    }
}

//  b) ES6 "class" syntax

class Person {
    constructor(name, age) {
        this.name = name;
        this.age = age;
        this.getDetails = function () {
            console.log(`${this.name} is ${this.age} years old!`);
        };
    }
}

//Creating new instance of Person
const personOne = new Person('John',20);
personOne.getDetails(); // Output - “John is 20years old!”
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Factory Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Factory pattern is another creational pattern concerned with creating objects but using some sort of generic interface. According to GoF’s book, this pattern has the following responsibility.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Define an interface for creating an object, but let subclasses decide which class to instantiate.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This pattern is typically used when we need to handle object groups that share similar characters yet are different through appropriate custom calls. An example would bring more clarity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QWaER7cY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Factory-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QWaER7cY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Factory-Pattern.png" alt="Factory Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Though the definition particularly mentions that an interface needs to be defined, we don’t have interfaces in JavaScript. Therefore, we are going to implement it using an alternative way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here, the &lt;strong&gt;shapeFactory&lt;/strong&gt; constructor is responsible for creating new objects of the constructors’ Rectangle, Square, and Circle. The &lt;strong&gt;createShape()&lt;/strong&gt; inside &lt;strong&gt;shapeFactory&lt;/strong&gt; takes in parameters, depending on which it delegates the responsibility of object instantiation to the respective class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Factory method for creating new shape instances
function shapeFactory(){
    this.createShape = function (shapeType) {

        var shape;
        switch(shapeType){
            case "rectangle":
                shape = new Rectangle();
                break;
            case "square":
                shape = new Square();
                break;
            case "circle":
                shape = new Circle();
                break;    
            default:
                shape = new Rectangle();
                break;
        }
        return shape;
    }
}

// Constructor for defining new Rectangle
var Rectangle = function () {
    this.draw = function () {
        console.log('This is a Rectangle');
    }
};

// Constructor for defining new Square
var Square = function () {
    this.draw = function () {
        console.log('This is a Square');
    }
};

// Constructor for defining new Circle
var Circle= function () {
    this.draw = function () {
        console.log('This is a Circle);
    }
};

var factory = new shapeFactory();
//Creating instance of factory that makes rectangle,square,circle respectively
var rectangle = factory.createShape('rectangle');
var square = factory.createShape('square');
var circle= factory.createShape('circle');

rectangle.draw();
square.draw();
circle.draw();

/*
  OUTPUT

  This is a Rectangle
  This is a Square
  This is a Circle

*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Prototype Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An object that supports cloning is called a &lt;strong&gt;prototype&lt;/strong&gt;. Using the prototype pattern, we can instantiate new objects based on a template of an existing object through cloning.&lt;/p&gt;

&lt;p&gt;As the prototype pattern is based on prototypal inheritance, we can utilize the native prototypical strengths of JavaScript. In the previous JS design patterns, we were trying to imitate features of other languages in JavaScript, which is not the case here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0X5JXhEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Prototype-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0X5JXhEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Prototype-Pattern.png" alt="Prototype design Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we have a prototype class car, which is cloned to create a new object myCar using &lt;code&gt;Object.create&lt;/code&gt; feature defined by ES5 standard.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Prototype Class
const car = {
    noOfWheels: 4,
    start() {
      return 'started';
    },
    stop() {
      return 'stopped';
    },
  };


//using Object.create to create clones - as recommended by ES5 standard
  const myCar = Object.create(car, { owner: { value: 'John' } });

  console.log(myCar.__proto__ === car); // true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Singleton Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The singleton pattern is a creational JavaScript design pattern that restricts the instantiation of a class to a single object. It creates a new instance of the class if one doesn’t exist and if existing already, it simply returns a reference to it. It is also known as the Strict Pattern.&lt;/p&gt;

&lt;p&gt;A singleton pattern solves two problems at the same time, violating the Single Responsibility Principle.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Guarantees that there is only a single instance of a class.&lt;/li&gt;
&lt;li&gt;Provide a global access point to this instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cvDIUGv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Singleton-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cvDIUGv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Singleton-Pattern.png" alt="Singleton Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A practical example would be a single database object shared by different parts of the program. There is no need to create a new instance of a database when one is already existing.&lt;/p&gt;

&lt;p&gt;One drawback of the pattern is the difficulty associated with testing. There are hidden dependencies objects, which are difficult to single out to test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Singleton class
var Singleton = (function () {
    var instance;

    function createDBInstance() {
        var object = new Object("I am the DataBase instance");
        return object;
    }

    return {
        getDBInstance: function () {
            if (!instance) {
                instance = createDBInstance();
            }
            return instance;
        }
    };
})();

function run() {

    var instance1 = Singleton.getDBInstance();
    var instance2 = Singleton.getDBInstance();

    console.log("Same instance? " + (instance1 === instance2));  
}

run(); // OUTPUT = "Same instance? true"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#structural-design-patterns"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Structural Design Patterns&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. Adapter Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The adapter is a structural JS design pattern that allows objects or classes with incompatible interfaces to collaborate. It matches interfaces of different classes or objects; therefore, they can work together despite incompatible interfaces. It is also referred to as the Wrapper pattern.&lt;/p&gt;

&lt;p&gt;A real-world analogy would be trying to connect a projector to a laptop. The projector might have a VGA plug, and the laptop might have an HDMI plug. So we require an adapter that can make these two unrelated interfaces compatible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PeVn3_0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Adapter-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PeVn3_0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Adapter-Pattern.png" alt="Adapter Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pattern will include a class that will be responsible for joining the incompatible interfaces/functionalities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The below code shows an online flight ticket pricing calculation system. There is an old interface that performs pricing calculations in one way. There is a new, improved interface with additional features like user identification and improvised calculations.&lt;/p&gt;

&lt;p&gt;An adapter class is introduced, which allows the client program to continue working without any API changes by matching the old interface with the new one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// old interface
function TicketPrice() {
    this.request = function(start, end, overweightLuggage) {
        // price calculation code...
        return "$150.34";
    }
}

// new interface
function NewTicketPrice() {
    this.login = function(credentials) { /* process credentials */ };
    this.setStart = function(start) { /* set start point */ };
    this.setDestination = function(destination) { /* set destination */ };
    this.calculate = function(overweightLuggage) { 
        //price calculation code...
        return "$120.20"; 
    };
}

// adapter interface
function TicketAdapter(credentials) {
    var pricing = new NewTicketPrice();

    pricing.login(credentials);

    return {
        request: function(start, end, overweightLuggage) {
            pricing.setStart(start);
            pricing.setDestination(end);
            return pricing.calculate(overweightLuggage);
        }
    };
}

var pricing = new TicketPrice();
var credentials = { token: "30a8-6ee1" };
var adapter = new TicketAdapter(credentials);

// original ticket pricing and interface
var price = pricing.request("Bern", "London", 20);
console.log("Old price: " + price);

// new ticket pricing with adapted interface
price = adapter.request("Bern", "London", 20);
console.log("New price: " + price);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Composite Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Composite is a structural JavaScript design pattern that lets you compose objects into tree structures and then work with these structures as if they were individual objects. According to GoF’s book, this pattern composes objects into tree structures to represent part-whole hierarchies. It is also known as a partitioning JS design pattern.&lt;/p&gt;

&lt;p&gt;The perfect example of this pattern would be tree control. The nodes of the tree either contain an individual object (leaf node) or a group of objects (a subtree of nodes).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQc0wRvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Composite-Pattern-1024x842.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQc0wRvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Composite-Pattern-1024x842.png" alt="Composite Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modern JS frameworks like React and Vue use the composite pattern to build user interfaces. The entire view is divided into components. Each component can contain multiple components. This method is preferred because of the ease of development and scalability compared to fewer monolithic objects. The composite pattern reduces the complexity of a system by allowing you to work with small objects and build them up into larger ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A file-folder(directory) structure is explained in the below code. Here a directory can have two types of entities, a file or another directory, which can contain files or directories and so on.&lt;br&gt;&lt;br&gt;
We have two classes – File and Directory. We can add or remove files in the Directory and also getFileName, and the display will list all file names inside the directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function File(name) {
    this.name = name;
}

File.prototype.display = function () {
    console.log(this.name);
}

function Directory(name) {
    this.name = name;
    this.files = [];
}

Directory.prototype.add = function (file) {
    this.files.push(file);
}

Directory.prototype.remove = function (file) {
    for (let i = 0, length = this.files.length; i &amp;lt; length; i++) {
        if (this.files[i] === file) {
            this.files.splice(i, 1);
            return true;
        }
    }

    return false;
}

Directory.prototype.getFileName = function (index) {
    return this.files[index].name;
}

Directory.prototype.display = function() {
    console.log(this.name);
    for (let i = 0, length = this.files.length; i &amp;lt; length; i++) {
        console.log("   ", this.getFileName(i));
    }
}

directoryOne = new Directory('Directory One');
directoryTwo = new Directory('Directory Two');
directoryThree = new Directory('Directory Three');

fileOne = new File('File One');
fileTwo = new File('File Two');
fileThree = new File('File Three');

directoryOne.add(fileOne);
directoryOne.add(fileTwo);

directoryTwo.add(fileOne);

directoryThree.add(fileOne);
directoryThree.add(fileTwo);
directoryThree.add(fileThree);

directoryOne.display();
directoryTwo.display();
directoryThree.display();

/*
Directory One
    File One
    File Two
Directory Two
    File One
Directory Three
    File One
    File Two
    File Three
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Module Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Module Pattern is another prevalent JavaScript design pattern for keeping our code clean, separated, and organized. A module is a piece of self-contained code that can be updated without affecting other components. As the concept of access modifier is not supported in JavaScript, the modules help in mimicking the behavior of private/public access hence providing encapsulation.&lt;/p&gt;

&lt;p&gt;The typical code structure will be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(function() {

    // declare private variables and/or functions

    return {
    // declare public variables and/or functions
    }

})();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we have the flexibility of renaming like we have renamed addAnimal to add. A point to be noted is that we can’t invoke removeAnimal from an outside environment as it is dependent on the private property container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function AnimalContainter () {
    //private variables and/or functions
    const container = [];

    function addAnimal (name) {
    container.push(name);
    }

    function getAllAnimals() {
    return container;
    }

    function removeAnimal(name) {
    const index = container.indexOf(name);
    if(index &amp;lt; 1) {
    throw new Error('Animal not found in container');
    }
    container.splice(index, 1)
    }

    return {
    public variables and/or functions
    add: addAnimal,
    get: getAllAnimals,
    remove: removeAnimal
    }
    }

    const container = AnimalContainter();
    container.add('Hen');
    container.add('Goat');
    container.add('Sheep');

    console.log(container.get()) //Array(3) ["Hen", "Goat", "Sheep"]
    container.remove('Sheep')
    console.log(container.get()); //Array(2) ["Hen", "Goat"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Decorator Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Decorators are a structural JS design pattern that aims to promote code reuse. This pattern allows behavior to be added to an individual object dynamically, without affecting the behavior of other objects from the same class. Decorators can also provide a flexible alternative to subclassing for extending functionality.&lt;/p&gt;

&lt;p&gt;Since JavaScript allows us to add methods and properties to objects dynamically, implementing this JavaScript pattern is a very straight-forward process. Do check out Addy Osmani’s post to know more about &lt;a href="https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841"&gt;Decorators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Let’s take a look at the simple implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// A vehicle constructor
function Vehicle( vehicleType ){

    // some sane defaults
    this.vehicleType = vehicleType || "car";
    this.model = "default";
    this.license = "00000-000";

}

// Test instance for a basic vehicle
var testInstance = new Vehicle( "car" );
console.log( testInstance );

// Outputs:
// vehicle: car, model:default, license: 00000-000

// Lets create a new instance of vehicle, to be decorated
var truck = new Vehicle( "truck" );

// New functionality we're decorating vehicle with
truck.setModel = function( modelName ){
    this.model = modelName;
};

truck.setColor = function( color ){
    this.color = color;
};

// Test the value setters and value assignment works correctly
truck.setModel( "CAT" );
truck.setColor( "blue" );

console.log( truck );

// Outputs:
// vehicle:truck, model:CAT, color: blue

// Demonstrate "vehicle" is still unaltered
var secondInstance = new Vehicle( "car" );
console.log( secondInstance );

// Outputs:
// vehicle: car, model:default, license: 00000-000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. Facade Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The facade pattern consists of a facade, which is an object that acts as a “front-face” for a much complex structural code. Developers normally use this pattern when a system is very complex or difficult to understand to provide a simpler interface to the client. This helps to create an abstraction layer between what is shown publicly and what is implemented behind the curtain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9M5y3Znt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Facade-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9M5y3Znt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Facade-Pattern.png" alt="Facade Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here Mortgage is a facade for Bank, Credit, and Background.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var Mortgage = function(name) {
        this.name = name;
    }

    Mortgage.prototype = {

        applyFor: function(amount) {
            // access multiple subsystems...
            var result = "approved";
            if (!new Bank().verify(this.name, amount)) {
                result = "denied";
            } else if (!new Credit().get(this.name)) {
                result = "denied";
            } else if (!new Background().check(this.name)) {
                result = "denied";
            }
            return this.name + " has been " + result +
                   " for a " + amount + " mortgage";
        }
    }

    var Bank = function() {
        this.verify = function(name, amount) {
            // complex logic ...
            return true;
        }
    }

    var Credit = function() {
        this.get = function(name) {
            // complex logic ...
            return true;
        }
    }

    var Background = function() {
        this.check = function(name) {
            // complex logic ...
            return true;
        }
    }

    function run() {
        var mortgage = new Mortgage("Joan Templeton");
        var result = mortgage.applyFor("$100,000");

        alert(result);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6. Proxy Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As the name suggests, the Proxy Pattern provides a surrogate or placeholder for another object to control access, reduce cost, and reduce complexity. The proxy could interface to anything – a network connection, a large object in memory, a file, or some other resource that is expensive or impossible to duplicate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x9jGDAif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Proxy-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x9jGDAif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Proxy-Pattern.png" alt="Proxy Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we will create a proxy object that ‘stands in’ for the original object. The proxy interface will be the same as that of the original object so that the client may not even be aware they are dealing with a proxy rather than the real object. In the proxy, extra functionality can be provided, for example, caching, checking some preconditions, etc.&lt;/p&gt;

&lt;p&gt;There are three common situations in which the Proxy pattern is applicable.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A &lt;strong&gt;virtual proxy&lt;/strong&gt; is a placeholder for expensive to create or resource-intensive objects. &lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;remote proxy&lt;/strong&gt; controls access to the remote object.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;protective proxy&lt;/strong&gt; controls access rights to a sensitive master object. The caller’s access permissions are checked prior to forwarding the request.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following code will aid you in getting a gist of Proxy implementation. We have an external API FlightListAPI for accessing Flight Details databases. We will create a proxy FlightListProxy which will act as the interface through which the client can access the API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*  External API*/
var FlightListAPI = function() {
//creation
};

FlightListAPI.prototype = {
getFlight: function() {
    // get master list of flights
    console.log('Generating flight List');
},

searchFlight: function(flightDetails) {
    // search through the flight list based on criteria
    console.log('Searching for flight');
},

addFlight: function(flightData) {
    // add a new flight to the database
    console.log('Adding new flight to DB');
}
};

// creating the proxy
var FlightListProxy = function() {
    // getting a reference to the original object
this.flightList = new FlightListAPI();
};

FlightListProxy.prototype = {
getFlight: function() {
    return this.flightList.getFlight();
},

searchFlight: function(flightDetails) {
    return this.flightList.searchFlight(flightDetails);
},

addFlight: function(flightData) {
    return this.flightList.addFlight(flightData);
},

};

console.log("----------With Proxy----------")
const proxy = new FlightListProxy()
console.log(proxy.getFlight());
/*

OUTPUT

----------With Proxy----------
Generating flight List


*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#behavioural-design-pattern"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Behavioural Design Pattern&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. Chain of Responsibility Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a behavioral JavaScript design pattern that creates a chain of receiver objects for a request. This pattern promotes loose coupling. We can avoid coupling the sender of a request to a receiver, and more than one receiver can handle the request.&lt;/p&gt;

&lt;p&gt;The receiving objects will be linked together, and they can choose to act on the request and/or pass it to the next receiver object. It is also easy to add new receiver objects to the chain.&lt;/p&gt;

&lt;p&gt;Event Handling in DOM is one implementation of the Chain of Responsibility pattern.&lt;/p&gt;

&lt;p&gt;Once an event is fired, it propagates through the DOM hierarchy, calling every event handler it runs into until it finds the appropriate “event listener” and then acts on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let us consider the scenario of an ATM. When we request an amount for withdrawal, the machine processes the request and dispends the amount as combinations of available note denominations ($100, $50, $20, $10, $5, $1).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIy3olX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/pasted-image-0-15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIy3olX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/pasted-image-0-15.png" alt="ATM Cash Withdrawl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this code on requesting an amount, a Request object is created. This object then invokes a series of get calls, which are chained together, each one handling a particular denomination. Finally, the user receives the amount as a note combination which satisfies the amount value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var Request = function(amount) {
    this.amount = amount;
    console.log("Request Amount:" +this.amount);
}

Request.prototype = {
    get: function(bill) {
        var count = Math.floor(this.amount / bill);
        this.amount -= count * bill;
        console.log("Dispense " + count + " $" + bill + " bills");
        return this;
    }
}

function run() {
    var request = new Request(378); //Requesting amount
    request.get(100).get(50).get(20).get(10).get(5).get(1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Command Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Command Pattern is a behavioral JS design pattern that aims to encapsulate actions or operations as objects. This pattern is useful in scenarios where we want to decouple or split the objects executing the commands from objects issuing the commands. Command objects allow you to centralize the processing of these actions/operations.&lt;/p&gt;

&lt;p&gt;The four participants involved in the command pattern are command, receiver, invoker, and client.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Command&lt;/strong&gt; – A command object knows about the receiver and invokes a method of the receiver. Values for parameters of the receiver method are stored in the command.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Client&lt;/strong&gt; – The client’s responsibility is to create the command object and pass it to the invoker.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Invoker&lt;/strong&gt; – The invoker receives the command object from the client, and it’s only responsibility is to call (or invoke) a command.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Receiver&lt;/strong&gt; – Then, the receiver receives the command and looks for a method to call based on the received command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In our example, the calculator object contains four methods – add, subtract, divide, and multiply. Command objects define a method execute, which has the responsibility of invoking a method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var calculator = {
    add: function(x, y) {
        return x + y;
    },
    subtract: function(x, y) {
        return x - y;
    },
    divide: function(x,y){
        return x/y;
    },
    multiply: function (x,y){
        return x*y;
    }
}
var manager = {
    execute: function(name, args) {
        if (name in calculator) {
            return calculator[name].apply(calculator, [].slice.call(arguments, 1));
        }
        return false;
    }
}
console.log(manager.execute("add", 5, 2)); // prints 7
console.log(manager.execute("multiply", 2, 4)); // prints 8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Observer Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Observer is a behavioral JS design pattern that lets you define a subscription mechanism to notify multiple objects (observers) about any events that happen to the object (subject) they’re observing. This pattern is also called Pub/Sub, short for Publication/Subscription. It defines a one-to-many dependency between objects, promotes loose coupling, and facilitates good object-oriented design.&lt;/p&gt;

&lt;p&gt;The observer pattern is the foundation of event-driven programming. We write event handler functions that will be notified when a certain event fires.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKxo3qri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Observer-Pattern-1024x380.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKxo3qri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Observer-Pattern-1024x380.png" alt="Observer Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have set up a Subject function Click and extended it using the prototype. We have created methods to subscribe and unsubscribe objects to the Observer collection, which is handled by the clickHandler function. Also, there is a fire method to propagate any changes in the Subject class object to the subscribed Observers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Click() {
    this.observers = [];  // observers
}

Click.prototype = {

    subscribe: function(fn) {
        this.observers.push(fn);
    },

    unsubscribe: function(fn) {
        this.observers = this.observers.filter(
            function(item) {
                if (item !== fn) {
                    return item;
                }
            }
        );
    },

    fire: function(o, thisObj) {
        var scope = thisObj;
        this.observers.forEach(function(item) {
            item.call(scope, o);
        });
    }
}

function run() {

    var clickHandler = function(item) { 
        console.log("Fired:" +item);
    };

    var click = new Click();

    click.subscribe(clickHandler);
    click.fire('event #1');
    click.unsubscribe(clickHandler);
    click.fire('event #2');
    click.subscribe(clickHandler);
    click.fire('event #3');

}

/* OUTPUT:

Fired:event #1
Fired:event #3

*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Iterator Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Iterator Pattern lets you access and traverses through elements of an aggregate object (collection) sequentially without exposing its underlying representation. This pattern allows JavaScript developers to design looping constructs that are far more flexible and sophisticated. In ES6, Iterator and Generators are introduced, which further aids in the Iteration pattern implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a simple straight-forward code for front-to-back iteration. We have defined two methods for the Iterator – hasNext() and next().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const items = [1,"hello",false,99.8];

function Iterator(items){
  this.items = items;
  this.index = 0; // to start from beginning position of array
}

Iterator.prototype = {
  // returns true if a next element is available
  hasNext: function(){
    return this.index &amp;lt; this.items.length;
  },
  //returns next element
  next: function(){
    return this.items[this.index++]
  }
}

//Instantiate object for Iterator
const iterator =  new Iterator(items);
while(iterator.hasNext()){
  console.log(iterator.next());
}
/*
OUTPUT

1
hello
false
99.8

*/ 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. Template Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The template pattern defines the skeleton of an algorithm in operation in terms of some high-level steps. These steps are themselves implemented by additional helper methods in the same class as the template method. The objects that implement these steps retain the original structure of the algorithm but have the option to redefine or adjust certain steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GX_V5XJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Template-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GX_V5XJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Template-Pattern.png" alt="Template Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we have an abstract class datastore that offers an interface to implement the template method by defining primitive steps for an algorithm. And we have a concrete MySQL class, which implements the primitive steps defined in the abstract class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; // implement template method

var datastore = {
    process: function() {
        this.connect();
        this.select();
        this.disconnect();
        return true;
    }
};

function inherit(proto) {
    var F = function() { };
    F.prototype = proto;
    return new F();
}


function run() {
    var mySql = inherit(datastore);

    // implement template steps

    mySql.connect = function() {
        console.log("MySQL: connect step");
    };

    mySql.select = function() {
        console.log("MySQL: select step");
    };

    mySql.disconnect = function() {
        console.log("MySQL: disconnect step");
    };

    mySql.process();

}

run();
/* 

MySQL: connect step
MySQL: select step
MySQL: disconnect step

*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6. Strategy Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Strategy Patterns allows one of a family of algorithms to be selected on-the-fly at runtime. The pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable at run-time without client interference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMfvfujV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Strategy-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMfvfujV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Strategy-Pattern.png" alt="Strategy Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have created a class Shipping which encapsulates all possible strategies for shipping a parcel – FedEx, UPS, and USPS. Using this pattern, we can swap the strategy during runtime and generate appropriate output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Strategy1 
function FedEx(){
  this.calculate = package =&amp;gt; {
    //calculations  happen here..
    return 2.99
  }
}

//Strategy2
function UPS(){
  this.calculate = package =&amp;gt; {
    //calculations  happen here..
    return 1.59
  }
}

//Strategy3
function USPS(){
  this.calculate = package =&amp;gt; {
    //calculations  happen here..
    return 4.5
  }
}

// encapsulation
function Shipping(){
  this.company = "";
  this.setStrategy = (company) =&amp;gt; {
    this.company=company;
  }
  this.calculate = (package) =&amp;gt;{
    return this.company.calculate(package);
  }
}

//usage
const fedex = new FedEx();
const ups = new UPS();
const usps = new USPS();

const package = { from: 'Alabama',to:'Georgia',weight:1.5};

const shipping = new Shipping();
shipping.setStrategy(fedex);
console.log("Fedex:" +shipping.calculate(package)); // OUTPUT =&amp;gt; "Fedex:2.99"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#antipatterns"&gt;
  &lt;/a&gt;
  Anti-Patterns
&lt;/h3&gt;

&lt;p&gt;While it’s important to know about design patterns, it is equally important to know about Anti-Patterns. If a design pattern can be considered as a best practice, an anti-pattern represents just the opposite.&lt;/p&gt;

&lt;p&gt;The term anti-pattern was coined in 1995 by Andrew Koenig. According to Koenig, an anti-pattern is a bad solution to a particular problem that resulted in a bad situation.&lt;/p&gt;

&lt;p&gt;Few examples of anti-patterns in JavaScript are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Polluting the global namespace by defining a large number of variables in the global context&lt;/li&gt;
&lt;li&gt;Passing strings rather than functions to either setTimeout or setInterval as this triggers the use of eval() internally.&lt;/li&gt;
&lt;li&gt;Modifying the Object class prototype (this is a particularly bad anti-pattern) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To summarize, an anti-pattern is a bad design that is worthy of documenting. Knowledge about them will help you recognize such anti-patterns in your code and hence improve code quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-design-patterns-and-testing"&gt;
  &lt;/a&gt;
  Applying Design Patterns and Testing
&lt;/h2&gt;

&lt;p&gt;Once a design pattern has been implemented and validated, we need to ensure that it works across multiple browser and browser versions seamlessly. LambdaTest is a &lt;a href="https://www.lambdatest.com/?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Rahul-11052021&amp;amp;utm_term=Rahul"&gt;cross browser testing&lt;/a&gt; platform for manual and automated cross browser testing. It includes more than 2000 real browsers &amp;amp; browser versions, and allows browser compatibility regression testing across all major browsers and browser versions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7s12aPgL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/cross-browser-testing-1024x480.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7s12aPgL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/cross-browser-testing-1024x480.png" alt="cross browser testing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also leverage &lt;a href="https://www.lambdatest.com/lt-browser?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Rahul-11052021&amp;amp;utm_term=Rahul"&gt;LT Browser&lt;/a&gt;, a developer friendly tool to perform a detailed analysis of the responsiveness of your design patterns across popular devices and viewports.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UUhqx6xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/responsiveness-1024x544.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UUhqx6xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/responsiveness-1024x544.png" alt="test responsiveness"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Design patterns represent some of the best practices adopted by experienced object-oriented software developers. They are time-tested solutions for various software design problems. In this article, we have explored common design patterns in JavaScript. Additionally, we also briefly discussed Anti-Patterns and how we can test websites with such patterns on LambdaTest platform. Hopefully, this chapter will enable you to get accustomed to various JavaScript design patterns. To dive deeper into the concept, do checkout &lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;Learn JavaScript Design Patterns&lt;/a&gt; by Addy Osmani.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>responsive</category>
    </item>
  </channel>
</rss>
