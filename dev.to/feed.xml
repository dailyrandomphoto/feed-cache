<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to use tutorials effectively to learn how to code </title>
      <author>Joel P. Mugalu</author>
      <pubDate>Mon, 30 Nov 2020 09:01:59 +0000</pubDate>
      <link>https://dev.to/codingknite/how-to-use-tutorials-to-learn-code-effectively-377f</link>
      <guid>https://dev.to/codingknite/how-to-use-tutorials-to-learn-code-effectively-377f</guid>
      <description>&lt;p&gt;Tutorials are no doubt an incredible way to learn how to code. With the growth of popular websites such as YouTube, tutorials have become almost accessible to anyone.&lt;/p&gt;

&lt;p&gt;This also means that most tutorials are free. They're also usually taught by industry professionals. On top of this, Tutorials tend to be shorter than courses and in most cases they get straight to the point. &lt;/p&gt;

&lt;p&gt;But tutorials can be a double edged sword. So these advantages can very quickly become disadvantages. In fact if you've ever heard of the term "tutorial hell" then you know that tutorial is part of the name.&lt;/p&gt;

&lt;p&gt;Without a proper strategy  tutorials can lead one to a never ending path of watching tutorials.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Essence of strategy is choosing what not to do&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in this article am going to discuss some practical ways that can help you learn how to code using tutorials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-the-fundamentals" class="anchor"&gt;
  &lt;/a&gt;
  Learn The Fundamentals
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;“As to methods there may be a million and then some, but principles are few. The man who grasps principles can successfully select his own methods. The man who tries methods, ignoring principles, is sure to have trouble” — Harrington Emerson&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the most common things that can lead one to the path of tutorial hell is having knowledge gaps. Most tutorials do not cover fundamental concepts. They simply cover certain specific aspects such as "How to build an x project with an x framework". &lt;/p&gt;

&lt;p&gt;So embarking on a tutorial like that can introduce you to fundamental concepts that you were not aware of. Naturally you'd watch other tutorials to understand these concepts. And the cycle goes on and on.&lt;/p&gt;

&lt;p&gt;Before watching a tutorial be sure that you know the fundamental concepts of the subject at hand. &lt;/p&gt;

&lt;p&gt;Besides tutorials, fundamentals are important to any developer. Frameworks come and go but the fundamentals remain. I'd recommend taking a course that teaches the fundamentals of programming in general. &lt;/p&gt;

&lt;p&gt;One such course is the famous &lt;a href="https://www.edx.org/course/cs50s-introduction-to-computer-science"&gt;CS50&lt;/a&gt; offered by Harvard University. This course is amazing and I can't recommend it enough. I'm sure of this because I took the course myself. It's free and coming from Harvard you know the quality is top notch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-notes" class="anchor"&gt;
  &lt;/a&gt;
  Take Notes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R5B4fqjl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/proxy/vz5UEf1qOUmkhF6W1OqYL6QRGgsAXbLF4V0LAERoaqbBlQU2eXTEvoTtZn4e-T2TAXLvkKIdoMQFYX5Dad79qmG7xyABXD-qNmNdSvA_QjyBWYpyDVZZzejDCyIaqEer7OntZ7RfbPhCAfSaUNOZ0KaTh2m-2TgsR68" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R5B4fqjl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/proxy/vz5UEf1qOUmkhF6W1OqYL6QRGgsAXbLF4V0LAERoaqbBlQU2eXTEvoTtZn4e-T2TAXLvkKIdoMQFYX5Dad79qmG7xyABXD-qNmNdSvA_QjyBWYpyDVZZzejDCyIaqEer7OntZ7RfbPhCAfSaUNOZ0KaTh2m-2TgsR68" alt="Meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another very effective yet underrated way to learn from tutorials is to take notes. Being in the digital age, it's not uncommon for people to take digital notes using iPads and laptops.&lt;/p&gt;

&lt;p&gt;Where as I myself do this from time to time I still vouch for the good old hand written notes. I strongly believe that you're most likely to remember what you wrote in a hand taken note written in a physical notebook than in an digital one.&lt;/p&gt;

&lt;p&gt;Don't afraid to pause the tutorial and write something that you feel is worth remembering. The beauty of writing notes is that it allows you to express yourself in the way you understood what you've learnt. So what you're writing is what you understood not what the instructor said.&lt;/p&gt;

&lt;p&gt;Taking notes is especially important because of our forgetful nature. The moment your brain takes in information. That information is discarded as soon as possible unless you practically apply it.&lt;/p&gt;

&lt;p&gt;Which brings me to the next point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-build-build" class="anchor"&gt;
  &lt;/a&gt;
  Build. Build. Build.
&lt;/h2&gt;

&lt;p&gt;You'll agree with me that the only thing that makes a tutorial worth your time is how practical it is. &lt;/p&gt;

&lt;p&gt;The idea of building a project during the tutorial is what drives you to watch it.&lt;/p&gt;

&lt;p&gt;Looking at it from another perspective, that is the general goal of a tutorial. It's meant to show you how to apply a certain skill. So unless you build. You will never benefit from tutorials.&lt;/p&gt;

&lt;p&gt;If you struggle with getting ideas for what to build then look up some articles on project ideas. &lt;/p&gt;

&lt;p&gt;You can also decide to add more features to the already existing application built in the tutorial.&lt;/p&gt;

&lt;p&gt;The key to learning with this method though is to make sure you implement these features by yourself. That's the only way to apply what you've learnt.&lt;/p&gt;

&lt;p&gt;Be sure to use google to the fullest when you get stuck. Lots of questions have already been answered including the one you might have. The chances of you having a completely new question are probably 1 of 100.&lt;/p&gt;

&lt;p&gt;However, it's worth noting that these days many tutorials urge you to code a long. It's believed that this is supposed to help you with retention. &lt;/p&gt;

&lt;p&gt;I personally have mixed feelings about this.&lt;br&gt;
In my opinion I don't see how doing the same exact thing that another person is doing step by step word for word is supposed to help you learn a new skill. But that's just me. Choose to do what works for you.&lt;/p&gt;

&lt;p&gt;If you learn better by coding along then code along. If not I'd suggest watching the entire lecture and trying to re-implement what the instructor did on your own. This is most likely to test the degree to which you understood what was being taught.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spaced-repetition" class="anchor"&gt;
  &lt;/a&gt;
  Spaced Repetition
&lt;/h2&gt;

&lt;p&gt;Spaced repetition is a learning method where the learner continues to revise what they learnt over a spaced amount of time.&lt;/p&gt;

&lt;p&gt;So if you learn something new today then you would come back to revise it say after 3 days and then repeat that over and over again.&lt;/p&gt;

&lt;p&gt;This learning method is very effective especially when you're learning theoretical over practical things. &lt;/p&gt;

&lt;p&gt;Like I mentioned earlier, your brain discards unused information. So revising that information after a certain period is a good trick to get the knowledge to sink in.&lt;/p&gt;

&lt;p&gt;Since you're most unlikely to apply everything learnt from a tutorial at once, this method can help and I've found it to be effective myself.&lt;/p&gt;

&lt;p&gt;Speaking of learning methods, another great one is the Pomodoro technique. Now this more of a time management technique. The technique uses a timer to break down work into intervals, traditionally 25 minutes in length, separated by short breaks. &lt;/p&gt;

&lt;p&gt;One of the reasons you're most likely to forget or even get bored during a tutorial is if you keep taking in information for very long periods of time.&lt;/p&gt;

&lt;p&gt;I have also found this method to be very effective and I tend to cover more material when using this technique. Try it out and see if it would work for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#share-what-you-learn" class="anchor"&gt;
  &lt;/a&gt;
  Share What You Learn
&lt;/h2&gt;

&lt;p&gt;This is standard and you've probably heard that the best way to learn is to teach. This is absolutely true and I can't recommend it enough.&lt;/p&gt;

&lt;p&gt;The moment you learn something, it's true that there is a ton of people out there who don't know what you just learnt or those that know of it but don't fully understand it.&lt;/p&gt;

&lt;p&gt;But this step involves more than just sharing what you feel you understood. A certain amount of effort is required. There's a saddening amount of mediocre articles out there that tend to lead to more confusion than clarity.&lt;/p&gt;

&lt;p&gt;Blogging requires research in order for you to make sure that what you understand harmonizes with what should actually be understood. &lt;/p&gt;

&lt;p&gt;Other than that blogging is a tremendous way to learn. And you don't need to build your own blogging site from scratch. There are lots options out there. You can use platforms like Medium, Dev, and recently an interesting one came up called Hashnode. Now I'm also new to Hashnode myself but I've heard only good things about it. So shoot your shot. There's no harm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beware-of-tutorial-hell" class="anchor"&gt;
  &lt;/a&gt;
  Beware of Tutorial Hell
&lt;/h2&gt;

&lt;p&gt;Now this is the biggest challenge that one could face from trying to learn from a tutorial. That of finding oneself in a never ending loop of watching tutorials endlessly.&lt;/p&gt;

&lt;p&gt;I already covered part of why one might end up in tutorial hell. That of poor knowledge of the fundamentals. &lt;/p&gt;

&lt;p&gt;However, the thing is that even those with a good grasp of the fundamentals can end up in tutorial hell. So what is the problem?&lt;/p&gt;

&lt;p&gt;The thing is that most people who end up watching tutorial after tutorial simply doubt that they have enough knowledge to build a project on their own.&lt;/p&gt;

&lt;p&gt;And so tutorial hell is simply like a quest for adequate knowledge.&lt;/p&gt;

&lt;p&gt;Couple this with the fear of failure of starting an own project and you'll see people find comfort in tutorial hell. &lt;/p&gt;

&lt;p&gt;The simple way out of tutorial hell is simply building a project on your own. That's all really.&lt;br&gt;
There's no magic pill and no you're not under a curse. All you got to do is build one project on your own, then another and soon enough you'll find that you can't even sit through a tutorial. And that's a good problem.&lt;/p&gt;

&lt;p&gt;Leaving tutorial hell can be as easy as child deciding to get up and walk instead of being carried around all day. But it can also be as hard as a child deciding to leave the comfort of being carried around all day and starting walking alone.&lt;/p&gt;

&lt;p&gt;So ultimately how you view tutorial hell and the amount of effort required for you to leave it is ultimately upon you.&lt;/p&gt;

&lt;p&gt;A practical step could be starting small. Whether you fear to fail or think you don't know enough - start small. Build small projects and then project from there.&lt;/p&gt;

&lt;p&gt;Another thing is to try to figure out how you learn best. You see tutorials aren't the only way to learn. If all attempts fail then trying switching up your learning methods. &lt;/p&gt;

&lt;p&gt;You could try reading articles instead or taking a course or even reading books. The possibilities are endless. &lt;/p&gt;

&lt;p&gt;Whichever way works for you, find that and stick to it.&lt;/p&gt;

&lt;p&gt;I hope you found this article helpful. If you did feel free to share it with a friend. If you would like to say hi to me then feel free to do so via my &lt;a href="https://twitter.com/joelpmugalu"&gt;Twitter&lt;/a&gt; or &lt;a href="https://linkedin.com/in/joelpm"&gt;LinkedIn&lt;/a&gt; accounts. I also have a &lt;a href="https://github.com/mojpm"&gt;GitHub&lt;/a&gt;😉&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>10 JavaScript Array methods to simplify your code.</title>
      <author>Marko Denic</author>
      <pubDate>Mon, 30 Nov 2020 07:19:27 +0000</pubDate>
      <link>https://dev.to/denicmarko/10-javascript-array-methods-to-simplify-your-code-56fe</link>
      <guid>https://dev.to/denicmarko/10-javascript-array-methods-to-simplify-your-code-56fe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#lets-start" class="anchor"&gt;
  &lt;/a&gt;
  Let’s start!
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-raw-filter-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;filter()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; method creates a new array with all elements that pass the test implemented by the provided function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--45TwVJ23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jziujn2h35esiif4hvyj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45TwVJ23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jziujn2h35esiif4hvyj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-raw-foreach-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;forEach()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;forEach()&lt;/code&gt; method executes a provided function once for each array element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8pCb23C---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hpvn9z82ffsz8ll8uxuq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8pCb23C---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hpvn9z82ffsz8ll8uxuq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-raw-some-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;some()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;some()&lt;/code&gt; method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nkghyhkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tkl9l86v0q23jouh7km3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nkghyhkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tkl9l86v0q23jouh7km3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-raw-every-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;every()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;every()&lt;/code&gt; method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1w5dD_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ryppf3ss4rndaosnmmsb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1w5dD_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ryppf3ss4rndaosnmmsb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-raw-includes-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;includes()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;includes()&lt;/code&gt; method determines whether an array includes a certain value among its entries, returning true or false as appropriate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---9v3Wb2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hmw2r0qp8v3zlo0za4xu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---9v3Wb2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hmw2r0qp8v3zlo0za4xu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-raw-map-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  6. &lt;code&gt;map()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;map()&lt;/code&gt; method creates a new array populated with the results of calling a provided function on every element in the calling array.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZTSS2eR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b5zzautv0bafyvyb25ua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZTSS2eR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b5zzautv0bafyvyb25ua.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-raw-reduce-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  7. &lt;code&gt;reduce()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QWL8UlnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vlmaeig2dhgh6ji594i8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QWL8UlnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vlmaeig2dhgh6ji594i8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-raw-sort-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  8. &lt;code&gt;sort()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;sort()&lt;/code&gt; method sorts the elements of an array in place and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code unit values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P46_jc05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z49rw50ihc70tyv4uluk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P46_jc05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z49rw50ihc70tyv4uluk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-raw-find-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  9. &lt;code&gt;find()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;find()&lt;/code&gt; method returns the value of the first element in the provided array that satisfies the provided testing function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cIiP8H7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ad5s4vyrlgbextkedshp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cIiP8H7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ad5s4vyrlgbextkedshp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-raw-findindex-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  10. &lt;code&gt;findIndex()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;findIndex()&lt;/code&gt; method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kh8K9c_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ujhu10ftwd0d7t7gvnpe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kh8K9c_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ujhu10ftwd0d7t7gvnpe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you liked this article, be sure to ❤️ it.&lt;/p&gt;

&lt;p&gt;Let's keep in touch:&lt;br&gt;&lt;br&gt;
Website: &lt;a href="https://markodenic.com/"&gt;markodenic.com&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/denicmarko"&gt;@denicmarko&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>4 Things beginner Figma users have no idea about</title>
      <author>Rahul </author>
      <pubDate>Mon, 30 Nov 2020 05:40:22 +0000</pubDate>
      <link>https://dev.to/holdmypotion/4-things-beginner-figma-users-have-no-idea-about-3777</link>
      <guid>https://dev.to/holdmypotion/4-things-beginner-figma-users-have-no-idea-about-3777</guid>
      <description>&lt;p&gt;Here are some things that I didn't know when I started with Figma. These tips really boosted my workflow and got me really nice designs in the end.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-a-grid-and-not-just-a-12column" class="anchor"&gt;
  &lt;/a&gt;
  Use a grid, and not just a 12-column.
&lt;/h1&gt;

&lt;p&gt;Okay, so first thing! USE A GRID!!&lt;br&gt;
I have seen so many beginner Figma users just putting out things measuring distances all the time. There is a way to put everything in or out of symmetry in an easy and beautiful way using a grid.&lt;/p&gt;

&lt;p&gt;In this example, I am using a 12-column grid with 120 horizontal margin and 120 gutter. But grid comes in all forms, so you can surely look into that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2s4E_uv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/holdmypotion/Blog-Assets/blob/main/1.5.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2s4E_uv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/holdmypotion/Blog-Assets/blob/main/1.5.gif%3Fraw%3Dtrue" alt="Grid in Figma Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reusable-components" class="anchor"&gt;
  &lt;/a&gt;
  Reusable Components
&lt;/h1&gt;

&lt;p&gt;I like to explain everything in my own words but I really like this description on Figma's official docs.&lt;/p&gt;

&lt;p&gt;""&lt;/p&gt;

&lt;p&gt;Components are elements you can reuse across your designs. They help to create and manage consistent designs across projects.&lt;/p&gt;

&lt;p&gt;You can create components from any layers or objects you've designed. These could be a whole range of things like buttons, icons, layouts, and more.&lt;/p&gt;

&lt;p&gt;There are two aspects to a Component:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A &lt;strong&gt;Main Component&lt;/strong&gt; defines the properties of the Component.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;Instance&lt;/strong&gt; is a copy of the Component you can reuse in your designs. Instances are linked to the main Component and receive any updates made to the Component.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;""&lt;/p&gt;

&lt;p&gt;The thing that I love about components is that you don't have to change the color or font or whatever of every single button in your design. Just change the main component and use the gifted time to brew some coffee☕.&lt;/p&gt;

&lt;p&gt;This is a screenshot of an app design I made months ago and because I didn't know about components I had to manually change each of those pink buttons to orange.&lt;/p&gt;

&lt;p&gt;Don't be like me, learn components!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSgxjC9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/holdmypotion/Blog-Assets/main/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSgxjC9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/holdmypotion/Blog-Assets/main/2.png" alt="Figma workspace screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-button-component" class="anchor"&gt;
  &lt;/a&gt;
  Making a button component
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BBinSxEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/holdmypotion/Blog-Assets/main/3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BBinSxEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/holdmypotion/Blog-Assets/main/3.gif" alt="Making button component gif in Figma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#save-local-styles" class="anchor"&gt;
  &lt;/a&gt;
  Save Local Styles
&lt;/h1&gt;

&lt;p&gt;Another useful way to keep your design consistent and free up some time to play Valorant, is by saving local styles!&lt;br&gt;
Saving Local Styles (Fill, Text, Stroke, Effect, etc, etc...) lets you apply the same styles anywhere in a matter of a few clicks.&lt;/p&gt;

&lt;p&gt;And by the way, this also prevents the loss of styles due to accidents.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKWpdmt_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/holdmypotion/Blog-Assets/main/4%2520%281%29.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKWpdmt_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/holdmypotion/Blog-Assets/main/4%2520%281%29.gif" alt="Making and saving local text styles in Figma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-plugins-and-built-components" class="anchor"&gt;
  &lt;/a&gt;
  Use Plugins and Built Components
&lt;/h1&gt;

&lt;p&gt;This is absolutely amazing. Due to every growing Figma community, there are a lot of free to use plugins, designs, and design components, available.&lt;br&gt;
Explore them!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XXHz7s5N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/holdmypotion/Blog-Assets/main/5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXHz7s5N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/holdmypotion/Blog-Assets/main/5.gif" alt="Community on Figma gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thank-you" class="anchor"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#please-leave-your-views" class="anchor"&gt;
  &lt;/a&gt;
  Please leave your views!
&lt;/h4&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Understanding 'this'</title>
      <author>Mahesh Pratap</author>
      <pubDate>Mon, 30 Nov 2020 05:28:06 +0000</pubDate>
      <link>https://dev.to/mpratapdev/understanding-this-4bhj</link>
      <guid>https://dev.to/mpratapdev/understanding-this-4bhj</guid>
      <description>&lt;p&gt;One of the most confusing mechanisms in JavaScript is &lt;code&gt;this&lt;/code&gt; keyword. Even a seasoned developer can get bewildered sometimes. So, let’s see if it's really that complicated!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;this&lt;/code&gt; is a special keyword that’s automatically defined in the scope of every function&lt;/strong&gt;. But how JavaScript engines decide what value should it assign to &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#default-binding" class="anchor"&gt;
  &lt;/a&gt;
  Default Binding
&lt;/h2&gt;

&lt;p&gt;In default binding, &lt;code&gt;this&lt;/code&gt; refers to the global object. Any plain undecorated function call will invoke default binding if the scope in which &lt;code&gt;this&lt;/code&gt; is used is not using &lt;code&gt;strict mode&lt;/code&gt;. Consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Variables declared in global scope as &lt;code&gt;var a = 2&lt;/code&gt;, &lt;code&gt;function foo() {…}&lt;/code&gt; are synonymous with global-object properties of the same name. &lt;strong&gt;They are not copies of each other, they are each other&lt;/strong&gt;. In this snippet &lt;code&gt;foo()&lt;/code&gt; is called with a plain, undecorated function reference. Hence, the default binding applies here i.e., global object.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;strict mode&lt;/code&gt; is in effect, the global object is not eligible for the default binding, so the &lt;code&gt;this&lt;/code&gt; is instead set to &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// TypeError: 'this' is 'undefined'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Although overall &lt;code&gt;this&lt;/code&gt; binding rules are entirely based on the call-site, the global object is only eligible for the default binding if the contents of &lt;code&gt;foo()&lt;/code&gt; are not running in &lt;code&gt;strict mode&lt;/code&gt;. The &lt;code&gt;strict mode&lt;/code&gt; state of the call-site of &lt;code&gt;foo()&lt;/code&gt; is irrelevant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implicit-binding" class="anchor"&gt;
  &lt;/a&gt;
  Implicit Binding
&lt;/h2&gt;

&lt;p&gt;Implicit binding is invoked if the call-site has a context object. Now, what’s a context object! &lt;br&gt;
Consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here the call-site uses the &lt;code&gt;obj&lt;/code&gt; context to reference the function, so we can say &lt;code&gt;obj&lt;/code&gt; 'owns' or 'contains' the function reference at the time function is called. Now consider this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This may look confusing but only the last level of an object property reference chain matters to the call-site. So &lt;code&gt;this&lt;/code&gt; in &lt;code&gt;foo()&lt;/code&gt; refers to obj for the above function call.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gotchas" class="anchor"&gt;
  &lt;/a&gt;
  Gotchas
&lt;/h3&gt;

&lt;p&gt;Consider the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oops, global&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 'Oops, global'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Even though &lt;code&gt;bar&lt;/code&gt; appears to be a reference to &lt;code&gt;obj.foo&lt;/code&gt;, in fact, it’s really just another reference to &lt;code&gt;foo&lt;/code&gt; itself. Moreover, the call-site is what matters, and the call-site is &lt;code&gt;bar()&lt;/code&gt;, which is a plain, undecorated call, and thus the default binding applies.&lt;/p&gt;

&lt;p&gt;There is one more way to lose implicit binding i.e. when we are using callbacks. You don’t know how your passed function is being called in the callback. &lt;em&gt;Trust issues&lt;/em&gt; 😐️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#are-default-and-implicit-binding-the-same" class="anchor"&gt;
  &lt;/a&gt;
  Are default and implicit binding the same?
&lt;/h3&gt;

&lt;p&gt;Consider the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As discussed earlier variables declared in the global scope are synonymous with global-object properties of the same name. We can refer to these variables as &lt;code&gt;window.a&lt;/code&gt;, &lt;code&gt;window.foo&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;So whenever we are using plain, undecorated functions calls that means its context object is window and hence we get &lt;code&gt;window&lt;/code&gt; as &lt;code&gt;this&lt;/code&gt; in those cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explicit-binding" class="anchor"&gt;
  &lt;/a&gt;
  Explicit Binding
&lt;/h2&gt;

&lt;p&gt;Now let’s take the controls into our hands 😎️.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--buh4M91k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/40jcm4g487maqz8uimji.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--buh4M91k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/40jcm4g487maqz8uimji.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Functions have some utilities available to them (via their &lt;code&gt;[[Prototype]]&lt;/code&gt;), which can be useful for this task. Specifically &lt;code&gt;bind(…)&lt;/code&gt;, &lt;code&gt;call(…)&lt;/code&gt;, and &lt;code&gt;apply(…)&lt;/code&gt; methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#call-apply-amp-bind" class="anchor"&gt;
  &lt;/a&gt;
  call(), apply() &amp;amp; bind()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We can specify what we want our &lt;code&gt;this&lt;/code&gt; to be, using these functions.&lt;/li&gt;
&lt;li&gt;One common thing about these functions is, it takes the first parameter - an object which is assigned as &lt;code&gt;this&lt;/code&gt; on function invocation.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;call()&lt;/code&gt; &amp;amp; &lt;code&gt;apply()&lt;/code&gt; invokes the function immediately while &lt;code&gt;bind()&lt;/code&gt; just returns a new function.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;These are very useful functions in JavaScript and can’t be covered in this post so we’ll talk about these functions in-depth in another article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-binding" class="anchor"&gt;
  &lt;/a&gt;
  new Binding
&lt;/h2&gt;

&lt;p&gt;When a function is invoked with &lt;code&gt;new&lt;/code&gt; in front of it, the following things happen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A brand new object is created out of thin air.&lt;/li&gt;
&lt;li&gt;The newly constructed object is set as the &lt;code&gt;this&lt;/code&gt; binding for that function call.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;new foo(2)&lt;/code&gt; will return &lt;code&gt;{a:2}&lt;/code&gt; in the above snippet.&lt;/p&gt;

&lt;p&gt;There are few other things that happen too, but that is out of scope for this topic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Once you know the call-site of a function, 4 rules can be applied to the call-site, in this order of precedence to determine &lt;code&gt;this&lt;/code&gt; binding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Called with &lt;code&gt;new&lt;/code&gt;? Use the newly constructed object.&lt;/li&gt;
&lt;li&gt;Called with &lt;code&gt;call()&lt;/code&gt;, &lt;code&gt;apply()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt; ? Use the specified object.&lt;/li&gt;
&lt;li&gt;Called with context object owning the call? Use that context object.&lt;/li&gt;
&lt;li&gt;Default: &lt;code&gt;undefined&lt;/code&gt; in &lt;code&gt;strict mode&lt;/code&gt;, global object otherwise.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a more in-depth understanding of &lt;code&gt;this&lt;/code&gt; I highly recommend reading &lt;strong&gt;this &amp;amp; OBJECT PROTOTYPES&lt;/strong&gt; of &lt;strong&gt;YOU DON’T KNOW JS&lt;/strong&gt; series by &lt;strong&gt;Kyle Simpson&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>this</category>
    </item>
    <item>
      <title>Beyond create-react-app: Why you might want to use Next.js or Gatsby instead
</title>
      <author>Masa Kudamatsu</author>
      <pubDate>Mon, 30 Nov 2020 03:18:27 +0000</pubDate>
      <link>https://dev.to/masakudamatsu/beyond-create-react-app-why-you-might-want-to-use-next-js-or-gatsby-instead-13bh</link>
      <guid>https://dev.to/masakudamatsu/beyond-create-react-app-why-you-might-want-to-use-next-js-or-gatsby-instead-13bh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#limitations-of-createreactapp" class="anchor"&gt;
  &lt;/a&gt;
  Limitations of create-react-app
&lt;/h2&gt;

&lt;p&gt;Once you start learning web development, sooner or later you'll learn React and use &lt;a href="https://create-react-app.dev/"&gt;&lt;code&gt;create-react-app&lt;/code&gt;&lt;/a&gt; to kickstart the building of your first React app. Or at least that's what &lt;a href="https://www.codecademy.com/"&gt;CodeCademy&lt;/a&gt; taught me to do (in 2019). And I built my first React app, &lt;a href="https://line-height-picker.app/"&gt;Line-height Picker&lt;/a&gt;, out of &lt;code&gt;create-react-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, I've noticed web developers often point out two limitations of &lt;code&gt;create-react-app&lt;/code&gt;: (1) &lt;strong&gt;it takes time for the landing page to be rendered&lt;/strong&gt;; and (2) &lt;strong&gt;search engine crawlers may fail to index the app&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In addition, what keeps bugging me while I'm building an app from &lt;code&gt;create-react-app&lt;/code&gt; is this: (3) &lt;strong&gt;it doesn't show anything meaningful to the user who surfs the web with JavaScript disabled&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;All these limitations stem from the reliance of &lt;code&gt;create-react-app&lt;/code&gt; on &lt;em&gt;client-side rendering&lt;/em&gt; (often abbreviated as &lt;em&gt;CSR&lt;/em&gt;), where the app-hosting server sends the JavaScript code to the user's browser, which then runs the received JavaScript code to generate HTML documents.&lt;/p&gt;

&lt;p&gt;Here's how CSR affects each of the three above-mentioned limitations of &lt;code&gt;create-react-app&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-the-landing-page-appears%C2%A0slowly" class="anchor"&gt;
  &lt;/a&gt;
  1. The landing page appears slowly
&lt;/h3&gt;

&lt;p&gt;With an app built with &lt;code&gt;create-react-app&lt;/code&gt;, it takes time for the landing page to appear on the user's browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oxcGGrR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3i6xahwnzvdn0dth1nhg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oxcGGrR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3i6xahwnzvdn0dth1nhg.png" alt="The Lighthouse audit result of Line-height Picker, a React app that I made out of `create-react-app`. It takes 3.2 seconds for the landing page to appear."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 1: The &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt; audit result of &lt;a href="https://line-height-picker.app/"&gt;Line-height Picker&lt;/a&gt;, a React app that I made out of &lt;code&gt;create-react-app&lt;/code&gt;. It takes 3.2 seconds for the landing page to appear.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is because, once the user's browser receives the data from the server, it needs to run the JavaScript code to generate the HTML document that the user can see. While the browser is busy working on rendering the page content, the user keeps staring at a blank page. It clearly doesn't contribute to a good user experience.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-search-engines-fail-to-index-your-web%C2%A0app" class="anchor"&gt;
  &lt;/a&gt;
  2. Search engines fail to index your web app
&lt;/h3&gt;

&lt;p&gt;In addition, the search engine optimisation (SEO) can severely be compromised with CSR, as explained by &lt;a href="https://developers.google.com/web/updates/2019/02/rendering-on-the-web#seo"&gt;Miller and Osmani (2019)&lt;/a&gt;. Search engine crawlers may fail to run JavaScript to render your React app. So your React app is indexed as a blank page, which clearly doesn't help the user to find your React app by search.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-javascriptdisabled-users-will-see%C2%A0nothing" class="anchor"&gt;
  &lt;/a&gt;
  3. JavaScript-disabled users will see nothing
&lt;/h3&gt;

&lt;p&gt;The third limitation with &lt;code&gt;create-react-app&lt;/code&gt; is that none of the "meat" of your React app will be shown if the user disables JavaScript on their browser. &lt;/p&gt;

&lt;p&gt;Installing &lt;code&gt;create-react-app&lt;/code&gt; will create the file called &lt;code&gt;/public/index.html&lt;/code&gt; which contains the following code inside the body element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;noscript&amp;gt;
    You need to enable JavaScript to run this app.
  &amp;lt;/noscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The message enclosed in the &lt;code&gt;noscript&lt;/code&gt; tags will be shown when the browser disables JavaScript (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript"&gt;MDN Contributors 2020&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;Ideally, however, the non-interactive components of your React app should be shown to the JavaScript-disabled users. This way, they will be able to see what the app is like, before deciding whether to enable JavaScript or not.&lt;/p&gt;

&lt;p&gt;A workaround is to insert an HTML version of your React app into the &lt;code&gt;noscript&lt;/code&gt; tags. But this approach is super tedious: whenever you revise the React code, you have to manually change the HTML code as well.&lt;/p&gt;

&lt;p&gt;Most web developers appear to dismiss this concern as irrelevant today; even people in less developed countries use a JavaScript-enabled device to browse the web (see &lt;a href="https://nolanlawson.com/2016/10/13/progressive-enhancement-isnt-dead-but-it-smells-funny/"&gt;Lawson 2016&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;However, when I read &lt;a href="https://www.smashingmagazine.com/2018/05/using-the-web-with-javascript-turned-off/#comments-using-the-web-with-javascript-turned-off"&gt;various comments&lt;/a&gt; to a &lt;em&gt;Smashing Magazine&lt;/em&gt; article about surfing the web without JavaScript (&lt;a href="https://www.smashingmagazine.com/2018/05/using-the-web-with-javascript-turned-off/"&gt;Ashton 2018&lt;/a&gt;), I've learned that a non-negligible number of people actually disable JavaScript when they surf the web. &lt;/p&gt;

&lt;p&gt;Let me cite a few of these comments. Matt wrote as recently as on 18 April, 2020:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I'm … browsing the Web with [JavaScript] turned off. Things run faster. It's also good for bypassing pay walls on news articles and I don't get so many popups anymore"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Phillip Parr also wrote on 9 March, 2019:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I regularly browse the web with JS disabled. Too many sites are using JS now 'just because', and overloading my connection / CPU time with frivolous multi-megabyte framework downloads. It's VERY easy to build a fast, efficient, valid, accessible site with no JS at all, and I absolutely implore everyone to do so. Quite a few sites are completely broken with JS disabled, despite being perceptually static when enabled."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a percentage, these JavaScript-disabled users are a tiny minority. &lt;a href="https://deliberatedigital.com/blockmetry/javascript-disabled"&gt;Deliberate Digital (2016)&lt;/a&gt; reports that 0.2% of the worldwide page views had JavaScript disabled during October to December 2016. That's a similar percentage to the global page views with Internet Explore 9 in August 2020 (&lt;a href="https://caniuse.com/usage-table"&gt;Can I Use 2020&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But reading their own voices—rather than just the cold number of "0.2%"—makes me feel that we should not ignore them. The web content is for everybody. Access to information doesn't require personal connections with knowledgeable people. That's the beauty of the web.&lt;/p&gt;




&lt;p&gt;Now that we understand the limitations of create-react-app - or client-side rendering (CSR) in general - the question is: how can we do better to build a React app?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-prerendering" class="anchor"&gt;
  &lt;/a&gt;
  Solution: Pre-rendering
&lt;/h2&gt;

&lt;p&gt;The answer is &lt;em&gt;pre-rendering&lt;/em&gt;, which may involve &lt;em&gt;static generation&lt;/em&gt;, &lt;em&gt;server-side rendering&lt;/em&gt; (often abbreviated as &lt;em&gt;SSR&lt;/em&gt;), or both. &lt;/p&gt;

&lt;p&gt;These jargons are often used without clear explanation in web dev articles. I myself was confused a lot, until I read a crystal-clear description by &lt;a href="https://nextjs.org/learn/basics/data-fetching/two-forms"&gt;Vercel (2020)&lt;/a&gt;, the official tutorial of Next.js (more on Next.js below).&lt;/p&gt;

&lt;p&gt;Here is my own understanding of what &lt;em&gt;pre-rendering&lt;/em&gt; is and how it solves the limitations of client-side rendering (CSR) while preserving the merits of React.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#merits-of%C2%A0react" class="anchor"&gt;
  &lt;/a&gt;
  Merits of React
&lt;/h3&gt;

&lt;p&gt;The whole problem stems from the fact that the server sends JavaScript code, not HTML documents, to the user's browser. React takes this approach for two reasons.&lt;/p&gt;

&lt;p&gt;First, it ensures fast user interactions with the app. The browser doesn't need to contact with the server whenever the user clicks, taps, or drags the app's interface: all the JavaScript code for user interactions has already been downloaded and can be run on the browser.&lt;/p&gt;

&lt;p&gt;Second, the use of JavaScript to render HTML documents makes it easier to maintain web pages thanks to the modular design of React Components.&lt;/p&gt;

&lt;p&gt;These two merits come at a cost of the three limitations of create-react-app described above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-prerendering-works" class="anchor"&gt;
  &lt;/a&gt;
  How pre-rendering works
&lt;/h3&gt;

&lt;p&gt;Pre-rendering is a solution to overcome the limitations while keeping the two merits of React. It runs JavaScript code to generate HTML documents &lt;em&gt;before&lt;/em&gt; sending any data to the user's browser. That's what "pre-rendering" means.&lt;/p&gt;

&lt;p&gt;The pre-rendered HTML documents will be sent along with the JavaScript code for interactivity so that the first merit of React is preserved.&lt;/p&gt;

&lt;p&gt;Web developers can still use JavaScript to compose HTML documents, the second merit of React.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerendering-method-1-static-generation" class="anchor"&gt;
  &lt;/a&gt;
  Pre-rendering method #1: Static generation
&lt;/h3&gt;

&lt;p&gt;One form of pre-rendering is static generation, the most popular tool for which has been &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt;, a static generation framework for React-based web development. I kept hearing its name for powering "blazing fast" websites, without knowing what Gatsby was special about. Now I know why.&lt;/p&gt;

&lt;p&gt;Static generation converts your React JavaScript code into HTML documents &lt;em&gt;before you deploy your React app&lt;/em&gt;. This has two consequences.&lt;/p&gt;

&lt;p&gt;First, when the user visits your web app, the server sends the pre-rendered HTML document to the user's browser. Consequently, the user will save time for rendering HTML documents by running JavaScript on their browser. &lt;/p&gt;

&lt;p&gt;Second, even when the user disables JavaScript, he or she still sees the landing page instead of a cold message "Please enable JavaScript". So does the search engine crawler.&lt;/p&gt;

&lt;p&gt;This is a great solution for websites such as blogs which do not involve interactive features other than hypertext links. You can use React to compose HTML documents without sacrificing the speed of rendering the landing page.&lt;/p&gt;

&lt;p&gt;Aside from Gatsby, static generation can be implemented with &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; since its version 9.3, released on March 10, 2020 (&lt;a href="https://nextjs.org/blog/next-9-3"&gt;Neutkens et al. 2020a&lt;/a&gt;). Below we compare these two options for static generation in the final section of this article.&lt;/p&gt;

&lt;p&gt;If you have already created a React app with &lt;code&gt;create-react-app&lt;/code&gt;, refactoring the code for Gatsby or Next.js is a big headache. In this case, consider &lt;a href="https://frontarm.com/navi/en/"&gt;Navi&lt;/a&gt;, which allows you to convert the code based on &lt;code&gt;create-react-app&lt;/code&gt; into a statically generated one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerendering-method-2-serverside-rendering-ssr" class="anchor"&gt;
  &lt;/a&gt;
  Pre-rendering method #2: Server-side rendering (SSR)
&lt;/h3&gt;

&lt;p&gt;Another form of pre-rendering is &lt;em&gt;sever-side rendering&lt;/em&gt; (&lt;em&gt;SSR&lt;/em&gt;), which deals with a drawback of static generation at the cost of a slower rendering speed.&lt;/p&gt;

&lt;p&gt;Static generation cannot work with live data such as social media feed, because HTML documents were already created before deployment.&lt;/p&gt;

&lt;p&gt;SSR can handle live data because it converts your React JavaScript code into HTML documents &lt;em&gt;when the user accesses the website&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The cost of doing so, of course, is that the user needs to wait while the server runs the JavaScript code to generate HTML documents. However, unlike static generation, the latest pieces of data (e.g. social media posts) can be incorporated into the HTML documents delivered to the user.&lt;/p&gt;

&lt;p&gt;As far as I can tell, &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; has long been the React framework for SSR, and it still is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gatsby-vs%C2%A0nextjs" class="anchor"&gt;
  &lt;/a&gt;
  Gatsby vs Next.js
&lt;/h2&gt;

&lt;p&gt;For static generation, you need to decide which framework to go with, Gatsby or Next.js. Here are some pieces of information to help you make a choice.&lt;/p&gt;

&lt;p&gt;There are a countless number of articles that compare these two React frameworks. But I advise you to ignore all of those written before &lt;strong&gt;March 10, 2020&lt;/strong&gt;, because Next.js was incapable of static generation until then (&lt;a href="https://nextjs.org/blog/next-9-3"&gt;Neutkens et al. 2020a&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cases-for-gatsby" class="anchor"&gt;
  &lt;/a&gt;
  Cases for Gatsby
&lt;/h3&gt;

&lt;p&gt;In an article written one month after the release of Next.js 9.3, &lt;a href="https://hackernoon.com/u/sidney"&gt;sidney (2020)&lt;/a&gt; claims "Gatsby Won Against Next.js" after he himself built the same website with both frameworks. &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;LightHouse&lt;/a&gt; performance scores are slightly higher for Gatsby (78 vs 74). He also mentions that documentation is better with Gatsby.&lt;/p&gt;

&lt;p&gt;But this is the only article that I've found is in favor of Gatsby.&lt;/p&gt;

&lt;p&gt;Gatsby's own website provides the comparison chart between the two (&lt;a href="https://www.gatsbyjs.com/features/jamstack/gatsby-vs-nextjs/"&gt;Gatsby 2020&lt;/a&gt;). Unsurprisingly, it claims that Gatsby provides more features than Next.js, although it is unclear which version of Next.js they refer to. As Next.js keeps updating itself, most recently on Oct. 27th, 2020 (&lt;a href="https://nextjs.org/blog/next-10"&gt;Neutkens et al. 2020b&lt;/a&gt;), this comparison chart may be outdated by now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cases-for%C2%A0nextjs" class="anchor"&gt;
  &lt;/a&gt;
  Cases for Next.js
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://medium.com/frontend-digest/which-to-choose-in-2020-nextjs-vs-gatsby-1aa7ca279d8a"&gt;Laing (2020)&lt;/a&gt;, written one month later after Next.js becomes a static generation tool, argues that Next.js is a better option because of its SSR capability. Maybe you start out building a static website. But then when you realize you need SSR, Next.js just allows you to implement it while Gatsby does not. For each feature that he mentions Gatsby is better at, there is a comment to this article saying Next.js, too, has that feature.&lt;/p&gt;

&lt;p&gt;In the Twitter sphere, Next.js appears to get more popular. &lt;/p&gt;

&lt;p&gt;A Twitter poll by &lt;a href="https://twitter.com/AlexBuaiscia/status/1279863634965991424?s=20"&gt;Buaiscia (2020)&lt;/a&gt; on July 6, 2020, shows that 7 out of 13 voted for Next.js as a blogging platform while 5 voted for Gatsby.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/josh_mcdaniel1/status/1290398333941485570?s=20"&gt;McDaniel (2020)&lt;/a&gt;, tweeting on August 4, 2020, is in favour of Next.js:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Switching this new site to #nextjs from #Gatsby. The more I started getting everything together the more I realized next js was going to be a better choice. Love me some gatsby though."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The NPM weekly download data backs up this trend:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o8jdYjmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tdrmga71n6vhe4aua4v4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8jdYjmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tdrmga71n6vhe4aua4v4.png" alt="A screenshot of NPM Trends on November 30, 2020, where the weekly number of NPM package downloads is compared between Gatsby and Next.js over the last one year."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;A screenshot of &lt;a href="https://www.npmtrends.com/gatsby-vs-next"&gt;NPM trends&lt;/a&gt; on November, 30, 2020&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The popularity of Next.js is on the rise from around 400,000 to 1,000,000 downloads per week while Gatsby's is stagnated around 400,000 per week.&lt;/p&gt;

&lt;p&gt;Of course, the number of package downloads doesn't mean the number of people who actually keep using it. But it is an indication of reputation. People won't download it unless they hear something good about the package.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#verdict" class="anchor"&gt;
  &lt;/a&gt;
  Verdict
&lt;/h3&gt;

&lt;p&gt;As of November 2020, Next.js appears to be more suitable for a static generation tool.&lt;/p&gt;

&lt;p&gt;If you want to decide which to use on your own judgement, instead of relying on what people say, &lt;em&gt;Smashing Magazine&lt;/em&gt; recently interviewed the person behind each React framework, for the audience who doesn't even know what static generation is. Listen to each's sales pitch, and decide which one you will go with.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.smashingmagazine.com/2020/07/smashing-podcast-episode-20/"&gt;Smashing Podcast Episode 20 With Marcy Sutton: What Is Gatsby? - Smashing Magazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smashingmagazine.com/2020/08/smashing-podcast-episode-23/"&gt;Smashing Podcast Episode 23 With Guillermo Rauch: What Is Next.js? - Smashing Magazine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;This article is part of &lt;a href="https://masakudamatsu.medium.com/web-dev-survey-from-kyoto-introduction-9a8928972cc0"&gt;Web Dev Survey from Kyoto&lt;/a&gt;, a series of my blog posts on web development. It intends to simulate that the reader is invited to Kyoto, Japan, to attend a web dev conference. So the article ends with a photo of Kyoto in the current season, as if you were sightseeing after the conference was over. &lt;/p&gt;

&lt;p&gt;So let me take you to the world's famous zen garden at Ryoan-ji Temple:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s5UWCwGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6k5janjj1ev2fj4mgqo7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s5UWCwGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6k5janjj1ev2fj4mgqo7.JPG" alt="A photo of Ryoan-ji Rock Garden in autumn"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Ryoan-ji Temple Rock Garden at 8:26 am on 29 November, 2019. Photographed by Masa Kudamatsu (the author of this article)&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Hope you have learned something today! Happy coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#footnote" class="anchor"&gt;
  &lt;/a&gt;
  Footnote
&lt;/h2&gt;

&lt;p&gt;I use the &lt;a href="https://www.hup.harvard.edu/resources/authors/pdf/hup-author-guidelines-author-date-citations-and-reference-lists.pdf"&gt;Author-Date referencing system&lt;/a&gt; in this article, to refer to various articles on web development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Ashton, Chris (2018) "&lt;a href="https://www.smashingmagazine.com/2018/05/using-the-web-with-javascript-turned-off/"&gt;I Used The Web For A Day With JavaScript Turned Off&lt;/a&gt;", &lt;em&gt;Smashing Magazine&lt;/em&gt;, May 8, 2018.&lt;/p&gt;

&lt;p&gt;Buaiscia, Alex (2020) "&lt;a href="https://twitter.com/AlexBuaiscia/status/1279863634965991424?s=20"&gt;A Tweet on July 6, 2020&lt;/a&gt;", &lt;em&gt;Twitter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Can I Use (2020) "&lt;a href="https://caniuse.com/usage-table"&gt;Browser Usage Table&lt;/a&gt;" &lt;em&gt;caniuse.com&lt;/em&gt;, 8 September, 2020.&lt;/p&gt;

&lt;p&gt;Deliberate Digital (2016) "&lt;a href="https://deliberatedigital.com/blockmetry/javascript-disabled"&gt;What percentage of browsers with javascript disabled?&lt;/a&gt;", &lt;em&gt;deliberatedigital.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Gatsby (2020) "&lt;a href="https://www.gatsbyjs.com/features/jamstack/gatsby-vs-nextjs/"&gt;Comparison of Gatsby vs Next.js&lt;/a&gt;", &lt;em&gt;gatsbyjs.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Laing, Malcom (2020) "&lt;a href="https://medium.com/frontend-digest/which-to-choose-in-2020-nextjs-vs-gatsby-1aa7ca279d8a"&gt;Which To Choose in 2020: NextJS or Gatsby?&lt;/a&gt;", &lt;em&gt;Frontend Digest&lt;/em&gt;, Apr. 18, 2020.&lt;/p&gt;

&lt;p&gt;Lawson, Nolan (2016) "&lt;a href="https://nolanlawson.com/2016/10/13/progressive-enhancement-isnt-dead-but-it-smells-funny/"&gt;Progressive enhancement isn't dead, but it smells funny&lt;/a&gt;", &lt;em&gt;Read the Tea Leaves&lt;/em&gt;, Oct. 13, 2016.&lt;/p&gt;

&lt;p&gt;McDaniel, Josh (2020) "&lt;a href="https://twitter.com/josh_mcdaniel1/status/1290398333941485570?s=20"&gt;A Tweet on August 4, 2020&lt;/a&gt;", &lt;em&gt;Twitter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;MDN Contributors (2020) "&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript"&gt;&amp;lt;noscript&amp;gt;&lt;/a&gt;", &lt;em&gt;MDN web docs&lt;/em&gt;, Apr. 12, 2020.&lt;/p&gt;

&lt;p&gt;Miller, Jason, and Addy Osmani (2019) "&lt;a href="https://developers.google.com/web/updates/2019/02/rendering-on-the-web"&gt;Rendering on the Web&lt;/a&gt;", &lt;em&gt;Web Fundamentals&lt;/em&gt;, Nov. 26, 2019.&lt;/p&gt;

&lt;p&gt;Neutkens, Tim, Joe Haddad, JJ Kasper, Luis Alvarez, and Shu Uesugi (2020a) "&lt;a href="https://nextjs.org/blog/next-9-3"&gt;Next.js 9.3&lt;/a&gt;", &lt;em&gt;Next.js Blog&lt;/em&gt;, Mar. 10, 2020.&lt;/p&gt;

&lt;p&gt;Neutkens, Tim, Joe Haddad, JJ Kasper, Connor Davis, Luis Alvarez, Shu Uesugi, Belén Curcio, and Steven (2020b) "&lt;a href="https://nextjs.org/blog/next-10"&gt;Next.js 10&lt;/a&gt;", &lt;em&gt;Next.js Blog&lt;/em&gt;, Oct. 27, 2020.&lt;/p&gt;

&lt;p&gt;sidney (2020) "&lt;a href="https://hackernoon.com/gatsby-won-against-nextjs-in-this-heads-up-competition-xa7p3ysc"&gt;Gatsby Won Against Next.js in this Heads Up Competition&lt;/a&gt;", &lt;em&gt;Hacker Noon&lt;/em&gt;, Apr. 27, 2020.&lt;/p&gt;

&lt;p&gt;Vercel (2020) "&lt;a href="https://nextjs.org/learn/basics/data-fetching/two-forms"&gt;Two Forms of Pre-rendering&lt;/a&gt;", &lt;em&gt;Next.js Docs&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>gatsby</category>
      <category>navi</category>
    </item>
    <item>
      <title>Next.js Commerce: Get Your Store Up And Running</title>
      <author>Ivana</author>
      <pubDate>Mon, 30 Nov 2020 01:37:19 +0000</pubDate>
      <link>https://dev.to/ivanadokic/next-js-commerce-get-your-store-up-and-running-2c5e</link>
      <guid>https://dev.to/ivanadokic/next-js-commerce-get-your-store-up-and-running-2c5e</guid>
      <description>&lt;p&gt;&lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; is a lightweight framework for React applications. As of March 2020, the framework is used by many large websites, including Netflix, Docker, GitHub, Uber, and Starbucks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y6OP5jwG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/12brta85nvqqithemayb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6OP5jwG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/12brta85nvqqithemayb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next.js is the most popular framework for creating React applications that support server-side rendering and generating static websites for React based web applications.&lt;/p&gt;

&lt;p&gt;It powers the biggest websites like Airbnb and Twilio, for use cases in e-commerce, travel, news, and marketing. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-next-big-thing-in-ecommerce-nextjs-commerce" class="anchor"&gt;
  &lt;/a&gt;
  The Next Big Thing in Ecommerce: Next.js Commerce.
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---PlE6-MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9rg951vcu75xewh4qwvh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---PlE6-MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9rg951vcu75xewh4qwvh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-commerce" class="anchor"&gt;
  &lt;/a&gt;
  Next.js Commerce
&lt;/h2&gt;

&lt;p&gt;COVID-19 pandemic reshapes whole world in unprecedented acceleration of e-commerce. The growth in e-commerce due to the pandemic has set a high bar, according to new data from &lt;a href="https://techcrunch.com/2020/08/24/covid-19-pandemic-accelerated-shift-to-e-commerce-by-5-years-new-report-says/#:~:text=report%20says%20%7C%20TechCrunch-,COVID%2D19%20pandemic%20accelerated%20shift%20to%20e%2Dcommerce%20by,5%20years%2C%20new%20report%20says&amp;amp;text=The%20report%20indicates%20that%20department,by%20nearly%2020%25%20in%202020."&gt;IBM’s U.S. Retail Index&lt;/a&gt;, the pandemic has accelerated the shift away from physical stores to digital shopping by roughly five years. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“In collaboration with BigCommerce, Next Commerce is the all-in-one starter kit for high-performance ecommerce sites”.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next.js Commerce - Vercel partnered with &lt;a href="https://www.bigcommerce.com/"&gt;BigCommerce&lt;/a&gt; (open SaaS platform for e-commerce ) to release Next.js Commerce. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dw5YwrBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7d55wd2rztyh9e1hi3tx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dw5YwrBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7d55wd2rztyh9e1hi3tx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's learn how you can leverage BigCommerce utilizing the first open source application for e-commerce from Next.js. It is an open source platform that gives all developers the performance, personalization, customization and modern experiences. &lt;/p&gt;

&lt;p&gt;You can launch your storefront, it's ready for any hosting platform, and integrate easily with any backend. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iqKenozn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u4264r1onhm2l2xjqhdj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iqKenozn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u4264r1onhm2l2xjqhdj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-clone-git-repository" class="anchor"&gt;
  &lt;/a&gt;
  Step 1. Clone Git Repository
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DM11tzq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5yi23xlkrvyqa3kvhm02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DM11tzq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5yi23xlkrvyqa3kvhm02.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Integrations let you connect your Vercel Project with third-party services to automate aspects of your workflow. The following ones are required for your project, BigCommerce must be installed:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V2A8C2SY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j5d047gxkr2onaeo5pmy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V2A8C2SY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j5d047gxkr2onaeo5pmy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And as simple as that you have your project deployed, via Vercel  (formerly Zeit) as the easiest way to deploy website and host your web projects with zero configuration, automatic SSL, and global CDN. &lt;a href="https://commerce-silk-psi.vercel.app/"&gt;check here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVgol04b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ishbe4qhw71axy8mvbac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVgol04b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ishbe4qhw71axy8mvbac.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To connect with me please check my &lt;a href="https://github.com/ivanadokic"&gt;Github&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/ivana-dokic/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/LloydPile"&gt;Twitter&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>typescript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>How to Document an Express API with Swagger UI and JSDoc</title>
      <author>Kate Bartolo</author>
      <pubDate>Sun, 29 Nov 2020 19:01:33 +0000</pubDate>
      <link>https://dev.to/kabartolo/how-to-document-an-express-api-with-swagger-ui-and-jsdoc-50do</link>
      <guid>https://dev.to/kabartolo/how-to-document-an-express-api-with-swagger-ui-and-jsdoc-50do</guid>
      <description>&lt;p&gt;&lt;a href="https://jsdoc.app/"&gt;JSDoc&lt;/a&gt; is a popular tool for generating documentation from comments in the source code of your app. This serves two purposes. First, the documentation is directly available to anyone viewing the source code. Second, the comments can be compiled later into a complete set of reference documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://swagger.io"&gt;Swagger&lt;/a&gt; provides a tool for presenting this documentation: &lt;a href="https://swagger.io/tools/swagger-ui/"&gt;Swagger UI&lt;/a&gt;. Swagger UI creates a web page from &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md"&gt;OpenAPI Specification&lt;/a&gt; definitions. As this tutorial will show, these definitions can be written in YAML directly in JSDoc comments.&lt;/p&gt;

&lt;p&gt;In this tutorial, you will set up a &lt;a href="https://swagger.io/tools/swagger-ui/"&gt;Swagger UI&lt;/a&gt; documentation web page for an Express API. You can then write JSDoc comments in your API's source code to generate the OpenAPI definitions. By the end, you will have documentation that follows the OpenAPI Specification, presented from a custom &lt;code&gt;/docs&lt;/code&gt; endpoint added to your Express API:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lrcd0CIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/slj2ispghsmt2viixbdn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lrcd0CIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/slj2ispghsmt2viixbdn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To complete this tutorial, you'll need&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Familiarity with REST APIs and &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nodejs.dev/learn/how-to-install-nodejs"&gt;Node.js&lt;/a&gt; installed on your system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An &lt;strong&gt;Express-based REST API&lt;/strong&gt; running on a local Express server. If you don't have one, you can install the &lt;a href="https://github.com/kabartolo/jsonplaceholder-express-api"&gt;Express API&lt;/a&gt; used in this tutorial. It retrieves user data from &lt;a href="https://jsonplaceholder.typicode.com/"&gt;JSONPlaceholder&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install and run the sample Express API, first clone the repository (replace &lt;code&gt;test-api&lt;/code&gt; with the directory name of your choosing):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/kabartolo/jsonplaceholder-express-api test-api
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, run the following commands to start the Express server (replace &lt;code&gt;test-api&lt;/code&gt; with the name of the directory you just created):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;test-api
npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Navigate&lt;/strong&gt; to &lt;a href="http://localhost:3000"&gt;&lt;code&gt;localhost:3000&lt;/code&gt;&lt;/a&gt; to see the API. You should see links to &lt;code&gt;/users&lt;/code&gt; and &lt;code&gt;/users/1&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lxALROaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nlqr49528h817w6wd4iv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lxALROaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nlqr49528h817w6wd4iv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Navigate to either of these to see user data from JSONPlaceholder.&lt;/p&gt;

&lt;p&gt;The code added during this tutorial can be found in the repository's &lt;a href="https://github.com/kabartolo/jsonplaceholder-express-api/tree/docs"&gt;&lt;code&gt;docs&lt;/code&gt; branch&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terminology" class="anchor"&gt;
  &lt;/a&gt;
  Terminology
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;OpenAPI&lt;/em&gt; is the name of the specification, while &lt;em&gt;Swagger&lt;/em&gt; is the set of tools that implement this specification. See &lt;a href="https://swagger.io/blog/api-strategy/difference-between-swagger-and-openapi/"&gt;What Is the Difference Between Swagger and OpenAPI?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tutorial uses the following API-related terms and definitions defined by &lt;a href="https://swagger.io/docs/specification/api-host-and-base-path/"&gt;OpenAPI&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    https://api.example.com/v1/users?role=admin&amp;amp;status=active
    \________________________/\____/ \______________________/
             server URL       endpoint    query parameters
                                path
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Server URL or base URL&lt;/strong&gt;: The base URL for all API endpoints: &lt;code&gt;localhost:3000&lt;/code&gt; or &lt;code&gt;example.com/api&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Endpoint path&lt;/strong&gt;: The path representing the location of the resource (relative to the base URL): &lt;code&gt;/users&lt;/code&gt; or &lt;code&gt;/users/1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Operation&lt;/strong&gt;: The HTTP method used to manipulate endpoint paths: GET, POST, PUT, DELETE&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resource&lt;/strong&gt;: Information representing a real-world object (e.g., a user or book), usually returned by the API as JSON data. Represented by a database &lt;strong&gt;model&lt;/strong&gt; in Express.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full URL used to retrieve data from the API is formed by adding the endpoint to the base URL: &lt;code&gt;localhost:3000/users&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-set-up-the-application" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Set up the application
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#11-install-raw-swaggerjsdoc-endraw-and-raw-swaggeruiexpress-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  1.1: Install &lt;code&gt;swagger-jsdoc&lt;/code&gt; and &lt;code&gt;swagger-ui-express&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;To create a Swagger UI page from JSDoc comments, you’ll need a way to pass your documentation to Swagger UI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/Surnet/swagger-jsdoc"&gt;&lt;code&gt;swagger-jsdoc&lt;/code&gt;&lt;/a&gt;  generates OpenAPI definitions from JSDoc comments.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/scottie1984/swagger-ui-express"&gt;&lt;code&gt;swagger-ui-express&lt;/code&gt;&lt;/a&gt; creates the Swagger UI page from these definitions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install &lt;code&gt;swagger-jsdoc&lt;/code&gt; and &lt;code&gt;swagger-ui-express&lt;/code&gt; to your Express API, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;swagger-jsdoc@5.0.1 &lt;span class="nt"&gt;--save-exact&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;swagger-ui-express &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This tutorial uses &lt;code&gt;swagger-jsdoc&lt;/code&gt; version &lt;code&gt;5.0.1&lt;/code&gt;. The latest version might not be compatible with this tutorial. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#12-create-an-api-specification" class="anchor"&gt;
  &lt;/a&gt;
  1.2: Create an API specification
&lt;/h3&gt;

&lt;p&gt;Swagger UI creates a docs page from a set of OpenAPI definitions. These definitions are written in &lt;a href="https://yaml.org/"&gt;YAML&lt;/a&gt; or &lt;a href="https://json.org"&gt;JSON&lt;/a&gt; to describe a REST API. For more information on the basic structure of the Swagger specification, see &lt;a href="https://swagger.io/docs/specification/basic-structure/"&gt;Basic Structure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In your Express API's &lt;code&gt;app.js&lt;/code&gt; file, add the following code below the list of required modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerJSDoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swagger-jsdoc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerDefinition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Express API for JSONPlaceholder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;swaggerDefinition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Paths to files containing OpenAPI definitions&lt;/span&gt;
  &lt;span class="na"&gt;apis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/*.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerSpec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;swaggerJSDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;swaggerDefinition&lt;/code&gt; object (i.e., the OpenAPI definition) defines the root information for your API. Provide a few basic pieces of information to the &lt;code&gt;swaggerDefinition&lt;/code&gt;, such as the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; of your API; you can fill in more later.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;options&lt;/code&gt; object contains this &lt;code&gt;swaggerDefinition&lt;/code&gt; object and an array of paths called &lt;code&gt;apis&lt;/code&gt;. These are paths to files containing other OpenAPI definitions. These file paths should be relative to the root directory of your Express API. In our case, definitions will be written in JSDoc directly in the &lt;code&gt;/routes&lt;/code&gt; files. You can list the filenames individually or use the wildcard delimiter &lt;code&gt;*&lt;/code&gt; to add all JavaScript files in a directory, as shown above.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;options&lt;/code&gt; object is used by &lt;code&gt;swagger-jsdoc&lt;/code&gt; to produce an OpenAPI specification in a variable called &lt;code&gt;swaggerSpec&lt;/code&gt;. This specification is equivalent to the &lt;code&gt;swagger.json&lt;/code&gt; or &lt;code&gt;swagger.yaml&lt;/code&gt; file normally used by Swagger UI to create a docs page. You'll pass this object to Swagger UI in the next step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server to ensure there are no errors. If you get any errors at this stage, check that your &lt;code&gt;swagger-jsdoc&lt;/code&gt; version is &lt;code&gt;5.0.1&lt;/code&gt; exactly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-create-the-swagger-ui-docs-page" class="anchor"&gt;
  &lt;/a&gt;
  1.3: Create the Swagger UI docs page
&lt;/h3&gt;

&lt;p&gt;To create a Swagger UI page for your Express API, include &lt;code&gt;swagger-ui-express&lt;/code&gt; in the &lt;code&gt;app.js&lt;/code&gt; file. Then, add an endpoint path called &lt;code&gt;/docs&lt;/code&gt; (or any name of your choosing):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerJSDoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swagger-jsdoc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerUi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swagger-ui-express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/docs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;swaggerUi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;swaggerUi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;swaggerSpec&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As shown above, &lt;code&gt;swagger-ui-express&lt;/code&gt; provides two callbacks to set up the endpoint: one to &lt;strong&gt;set up&lt;/strong&gt; Swagger UI with the &lt;code&gt;swaggerSpec&lt;/code&gt; definitions and one to &lt;strong&gt;serve&lt;/strong&gt; it to the &lt;code&gt;/docs&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser.&lt;/p&gt;

&lt;p&gt;You'll see the title and version number of your Express API, as well as the OpenAPI version number (&lt;code&gt;3.0.0&lt;/code&gt;). Since we have no other definitions yet, you'll see a "No operations defined in spec!" message:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwQ-_boc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fvsnzhvcj94o3ced81lk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwQ-_boc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fvsnzhvcj94o3ced81lk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You now have the start of a beautiful docs page for your API! The rest of this tutorial provides a basic introduction to OpenAPI definitions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-define-your-apis-root-information" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Define your API's root information
&lt;/h2&gt;

&lt;p&gt;You've created a Swagger UI docs page, and you're set to start writing docs. But first, you should add more root definitions for the API.&lt;/p&gt;

&lt;p&gt;Return to &lt;code&gt;app.js&lt;/code&gt;. Note that the &lt;code&gt;info&lt;/code&gt; object maps to OpenAPI's &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#infoObject"&gt;Info Object&lt;/a&gt; to define a title, description, list of servers, contact information, and list of paths for your API.&lt;/p&gt;

&lt;p&gt;Here is an example of a more complete definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerDefinition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Express API for JSONPlaceholder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is a REST API application made with Express. It retrieves data from JSONPlaceholder.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;license&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Licensed Under MIT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://spdx.org/licenses/MIT.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JSONPlaceholder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;servers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Development server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have a production server, add the URL and a description to the &lt;code&gt;servers&lt;/code&gt; list. See &lt;a href="https://swagger.io/docs/specification/basic-structure/"&gt;Basic Structure&lt;/a&gt; for more information on the other properties you can add to the root definition.&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://swagger.io/docs/specification/basic-structure/"&gt;OpenAPI docs&lt;/a&gt;, you'll notice there's also a &lt;code&gt;paths&lt;/code&gt; field. You won't need to specify the path definitions here, since each path is defined separately in a JSDoc comment (to be added in the next step). These path definitions are compiled by &lt;code&gt;swagger-jsdoc&lt;/code&gt; into a &lt;code&gt;paths&lt;/code&gt; object for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You should see more information about your API at the top of the docs page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02FZ3ozf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9lw2xrss7nz5f0fq1t5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02FZ3ozf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9lw2xrss7nz5f0fq1t5i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now start documenting your Express routes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-write-the-docs" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Write the docs
&lt;/h2&gt;

&lt;p&gt;With a Swagger UI docs page available at the &lt;code&gt;/docs&lt;/code&gt; endpoint and a complete set of root information on your API, you can start writing your path definitions. Each path definition corresponds to an Express route in your API. It describes both the operation and endpoint path, such as &lt;code&gt;GET /users&lt;/code&gt; and &lt;code&gt;DELETE /users/:id&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-document-the-routes" class="anchor"&gt;
  &lt;/a&gt;
  3.1: Document the routes
&lt;/h3&gt;

&lt;p&gt;To document &lt;code&gt;/routes/users.js&lt;/code&gt;, first  add a comment starting with &lt;code&gt;@swagger&lt;/code&gt; above the first route. Follow this with some basic information about the route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * /users:
 *   get:
 *     summary: Retrieve a list of JSONPlaceholder users
 *     description: Retrieve a list of users from JSONPlaceholder. Can be used to populate a list of fake users when prototyping or testing an API.
*/&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;swagger-jsdoc&lt;/code&gt; looks for comments with a &lt;code&gt;@swagger&lt;/code&gt; or &lt;code&gt;@openapi&lt;/code&gt; tag to create OpenAPI definitions.&lt;/p&gt;

&lt;p&gt;As shown in the code example, add the endpoint path &lt;code&gt;/users&lt;/code&gt; and the operation &lt;code&gt;get&lt;/code&gt; (indented two spaces). The path in the Express router function &lt;code&gt;get('/')&lt;/code&gt; is relative to &lt;code&gt;/users&lt;/code&gt;, so the path in the definition should be &lt;code&gt;/users&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;summary&lt;/code&gt; should be a brief description of the goal of this route. The &lt;code&gt;description&lt;/code&gt; should provide more detail, such as when or why you would want to use the route.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be sure to use two spaces (or four spaces) for indentation, not tabs. Refer to &lt;a href="https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html"&gt;YAML Syntax&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You should see a listing for &lt;code&gt;GET /users&lt;/code&gt; near the bottom of the page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0xpdErD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/76tz1fkiserr8dnwe02c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0xpdErD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/76tz1fkiserr8dnwe02c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-document-responses" class="anchor"&gt;
  &lt;/a&gt;
  3.2: Document responses
&lt;/h3&gt;

&lt;p&gt;Your users will want to know what is returned when this GET request is successful (i.e., with a status code of &lt;code&gt;200&lt;/code&gt;).  To define a successful response, add a &lt;code&gt;responses&lt;/code&gt; object and a response called &lt;code&gt;200&lt;/code&gt; to the path definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * /users:
 *   get:
 *     summary: Retrieve a list of JSONPlaceholder users.
 *     description: Retrieve a list of users from JSONPlaceholder. Can be used to populate a list of fake users when prototyping or testing an API.
 *     responses:
 *       200:
 *         description: A list of users.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       id:
 *                         type: integer
 *                         description: The user ID.
 *                         example: 0
 *                       name:
 *                         type: string
 *                         description: The user's name.
 *                         example: Leanne Graham
 */&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;description&lt;/code&gt; field describes the response or what it returns. The &lt;code&gt;content&lt;/code&gt; field describes the content type (&lt;code&gt;application/json&lt;/code&gt;), and the &lt;code&gt;schema&lt;/code&gt; describes the response object. In our case, JSONPlaceholder returns an object with a &lt;code&gt;data&lt;/code&gt; field, which contains the data you've requested. For this response, &lt;code&gt;data&lt;/code&gt; contains an array of user objects. Add just one or two user properties (e.g., &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;) to avoid cluttering the file for now. &lt;/p&gt;

&lt;p&gt;Add a real example value for each property (e.g., &lt;code&gt;'Leanne Graham'&lt;/code&gt;); otherwise, Swagger UI creates a generic example such as &lt;code&gt;'string'&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice how the types are defined in this schema. For example, to define an array, add &lt;code&gt;type: array&lt;/code&gt; and an &lt;code&gt;items&lt;/code&gt; field. Read more about types in the &lt;a href="https://swagger.io/docs/specification/data-models/data-types/"&gt;Data Types&lt;/a&gt; documentation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also describe &lt;strong&gt;error&lt;/strong&gt; responses this way. See Swagger's &lt;a href="https://swagger.io/docs/specification/describing-responses/"&gt;Describing Responses&lt;/a&gt; documentation for more details on the fields available for describing each response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You should see the response, an example value (using the example values you provided for each property), and the schema for the data returned in this response:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SfN6pT3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pyqmavht837zspni1mrx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SfN6pT3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pyqmavht837zspni1mrx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, define the &lt;code&gt;GET /users/:id&lt;/code&gt; path by adding the fields we've covered already (&lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;responses&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

 &lt;span class="cm"&gt;/**
 * @swagger
 * /users/:id:
 *   get:
 *     summary: Retrieve a single JSONPlaceholder user.
 *     description: Retrieve a single JSONPlaceholder user. Can be used to populate a user profile when prototyping or testing an API.
 *     responses:
 *       200:
 *         description: A single user.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: integer
 *                       description: The user ID.
 *                       example: 0
 *                     name:
 *                       type: string
 *                       description: The user's name.
 *                       example: Leanne Graham
*/&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The path parameter (&lt;code&gt;id&lt;/code&gt;) is added to the endpoint path: &lt;code&gt;/users/:id&lt;/code&gt;. Use a colon (&lt;code&gt;:&lt;/code&gt;) or curly brackets (&lt;code&gt;{}&lt;/code&gt;) to mark a path parameter in the endpoint path.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;data&lt;/code&gt; object in this &lt;code&gt;schema&lt;/code&gt; contains a single user object instead of an array of user objects, but the properties are the same. &lt;/p&gt;

&lt;p&gt;Next, define &lt;code&gt;POST /users&lt;/code&gt; by adding the fields we've covered already (&lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;responses&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * /users:
 *   post:
 *     summary: Create a JSONPlaceholder user.
 *     responses:
 *       201:
 *         description: Created
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: integer
 *                       description: The user ID.
 *                       example: 0
 *                     name:
 *                       type: string
 *                       description: The user's name.
 *                       example: Leanne Graham
*/&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A successful response in this case would be &lt;code&gt;201&lt;/code&gt;. It returns an object with a &lt;code&gt;data&lt;/code&gt; field containing the new user. &lt;/p&gt;

&lt;p&gt;You can continue adding path definitions for the remaining routes in the same way. We'll do some refactoring in a later step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You'll now see a listing for &lt;code&gt;GET /users/:id&lt;/code&gt;, &lt;code&gt;POST /users&lt;/code&gt;, and any other path definitions you've added:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpY8vkmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w2o5mkbodner0r9qdv6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpY8vkmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w2o5mkbodner0r9qdv6v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-document-the-requests" class="anchor"&gt;
  &lt;/a&gt;
  3.3: Document the requests
&lt;/h3&gt;

&lt;p&gt;Request data such as parameters and request bodies can also be documented in your OpenAPI definitions. For example, &lt;code&gt;GET /users/:id&lt;/code&gt; has an &lt;code&gt;id&lt;/code&gt; parameter, which should be documented.&lt;/p&gt;

&lt;p&gt;To document parameters, add a &lt;code&gt;parameters&lt;/code&gt; field to the path definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * /users/:id:
 *   get:
 *     summary: Retrieve a single JSONPlaceholder user.
 *     description: Retrieve a single JSONPlaceholder user. Can be used to populate a user profile when prototyping or testing an API.
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Numeric ID of the user to retrieve.
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         ...
 */&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the definition for this parameter, &lt;code&gt;in&lt;/code&gt; defines the parameter's location (in this case, it's a path parameter because it's part of the path). You can also add a &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;schema&lt;/code&gt; and whether the parameter is &lt;code&gt;required&lt;/code&gt;. See &lt;a href="https://swagger.io/docs/specification/describing-parameters/"&gt;Describing Parameters&lt;/a&gt; for more details. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You'll see a list of parameters for this route:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZVzgTzY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ooyj0ej96i38ph07mxgx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZVzgTzY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ooyj0ej96i38ph07mxgx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, document the &lt;strong&gt;request body&lt;/strong&gt; for &lt;code&gt;POST /users&lt;/code&gt; to describe the data required to create a new user in the database. To do this, &lt;strong&gt;add&lt;/strong&gt; a &lt;code&gt;requestBody&lt;/code&gt; field to this path definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * /users:
 *   post:
 *     summary: Create a JSONPlaceholder user.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 description: The user's name.
 *                 example: Leanne Graham
 *     responses:
 *       201:
 *         ...
*/&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This adds a request body schema to this path definition. This example shows that &lt;code&gt;name&lt;/code&gt; can be sent in the request body. You can add more properties for new users later. See &lt;a href="https://swagger.io/docs/specification/describing-request-body/"&gt;Describing Request Body&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You'll see a section called &lt;code&gt;Request body&lt;/code&gt; with the schema you've provided:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SOmi00Ja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5b7ktwvrhuqlcugl7q14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOmi00Ja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5b7ktwvrhuqlcugl7q14.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-document-the-resources" class="anchor"&gt;
  &lt;/a&gt;
  3.4: Document the resources
&lt;/h3&gt;

&lt;p&gt;You might have noticed you've repeated the user schema several times in the documentation so far. To avoid this duplication, you can define the user schema in one place and reference it from elsewhere.&lt;/p&gt;

&lt;p&gt;Each model defined by your Express API can be documented separately as a schema definition (or &lt;a href="https://swagger.io/docs/specification/components/"&gt;component&lt;/a&gt;). To do this for the user model, add a &lt;code&gt;User&lt;/code&gt; schema definition to the top of the file, under &lt;code&gt;components/schemas&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *           description: The user ID.
 *           example: 0
 *         name:
 *           type: string
 *           description: The user's name.
 *           example: Leanne Graham
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can then reference this schema definition using &lt;code&gt;$ref&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * /users:
 *   get:
 *     summary: Retrieve a list of JSONPlaceholder users
 *     description: Retrieve a list of users from JSONPlaceholder. Can be used to populate a list of fake users when prototyping or testing an API.
 *     responses:
 *       200:
 *         description: A list of users.
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/User'
 */&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;$ref&lt;/code&gt; path uses &lt;a href="https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03"&gt;JSON Reference&lt;/a&gt; notation. The &lt;code&gt;#&lt;/code&gt; symbol indicates the root of the current document, and the remaining nested values are then resolved in order. For more information, see &lt;a href="https://swagger.io/docs/specification/using-ref/"&gt;Using $ref&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. Your path definitions will now use this &lt;code&gt;User&lt;/code&gt; schema, and you should see a schema definition for &lt;code&gt;User&lt;/code&gt; at the bottom of the page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJhY97Av--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7cdcc3ad8wzz57aufx97.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJhY97Av--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7cdcc3ad8wzz57aufx97.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, you can define a &lt;code&gt;NewUser&lt;/code&gt; object to reference in the &lt;code&gt;POST /users&lt;/code&gt; request body. Since it contains some but not all of the fields from the &lt;code&gt;User&lt;/code&gt; schema, you can also use &lt;code&gt;$ref&lt;/code&gt; to avoid duplication between them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @swagger
 * components:
 *   schemas:
 *     NewUser:
 *       type: object
 *       properties:
 *         name:
 *           type: string
 *           description: The user's name.
 *           example: Leanne Graham
 *     User:
 *       allOf:
 *         - type: object
 *           properties:
 *             id:
 *               type: integer
 *               description: The user ID.
 *               example: 0
 *         - $ref: '#/components/schemas/NewUser'
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;allOf&lt;/code&gt; keyword combines model definitions, in this case the &lt;code&gt;NewUser&lt;/code&gt; definition (containing the &lt;code&gt;name&lt;/code&gt; property) and an object with an &lt;code&gt;id&lt;/code&gt; property. See &lt;a href="https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/"&gt;oneOf, anyOf, allOf, not&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;You can now reference &lt;code&gt;NewUser&lt;/code&gt; from the request body definition for &lt;code&gt;POST /users&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @swagger
 * /users:
 *   post:
 *     summary: Create a JSONPlaceholder user.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/NewUser'
 *     responses:
 *       201:
 *         ...
*/&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You'll see your &lt;code&gt;NewUser&lt;/code&gt; schema in the request body definition for &lt;code&gt;POST /users&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDwtHfcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/glkw439i08pi4bk00bak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDwtHfcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/glkw439i08pi4bk00bak.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This covers the basic techniques for producing OpenAPI definitions in JSDoc comments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You are now set up to produce a complete reference documentation page for your Express API. You've created a basic set of OpenAPI definitions and a Swagger UI page that displays them. If you want more practice with the OpenAPI Specification, you can finish documenting the &lt;code&gt;jsonplaceholder-express-api&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This tutorial has also covered the basics of writing OpenAPI definitions. To complete your documentation, consult the &lt;a href="https://swagger.io/specification/"&gt;OpenAPI Specification&lt;/a&gt; and the &lt;a href="https://swagger.io/docs/specification/about/"&gt;Swagger Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To see a version of the &lt;code&gt;jsonplaceholder-express-api&lt;/code&gt; that includes all the code added during this tutorial, see the repository's &lt;a href="https://github.com/kabartolo/jsonplaceholder-express-api/tree/docs"&gt;&lt;code&gt;docs&lt;/code&gt; branch&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>api</category>
      <category>docs</category>
    </item>
    <item>
      <title>Easy understanding of web protocols - HTTP and HTTPS </title>
      <author>Yogesh Kasliwal</author>
      <pubDate>Sun, 29 Nov 2020 18:58:12 +0000</pubDate>
      <link>https://dev.to/yogkas1006/easy-understanding-of-web-protocols-http-and-https-2h7g</link>
      <guid>https://dev.to/yogkas1006/easy-understanding-of-web-protocols-http-and-https-2h7g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Google announced that websites with SSL Certificate / HTTPS protocol will be preferred in search engine results. I will try to cover the fundamentals of HTTP and HTTPS protocols.&lt;br&gt;
Before we dive deeper into understanding about HTTP and HTTPS protocol, let’s try to understand the meaning of the word protocol.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-protocol-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is a protocol ?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A Protocol is a set of rules that we use for specific purposes. In the current scenario, when we are talking about protocols, it is about communication- the way we talk to each other. For instance, a newsreader speaks in English and because you understand English, you are able to understand. English is the protocol.&lt;/p&gt;

&lt;p&gt;The moment the newsreader starts speaking in a language that you don't understand, the protocol beats its purpose. Thus, we need both the parties to agree to a set of rules for the communication to take place. The protocol, in this case, is for communication.&lt;/p&gt;

&lt;p&gt;Now, talking about the web, in particular, multiple protocols are used to communicate. Primarily for end users, the most important and visible protocols are HTTP and HTTPS. Though there are many other protocols as well, HTTP and HTTPS protocols cater to most of the population.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-http-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is HTTP ?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;HTTP is Hypertext transfer protocol. Simply put - Rules to sending and receiving text-based messages. As we all know, computers work in a language of 1's and 0's i.e. Binary language. Therefore, potentially every set of 1's and 0's construct something, it could be a word.&lt;/p&gt;

&lt;p&gt;Let's say I want to write 'a'. Now, if 0 stands for 'a', 1 stands for 'b', and 01 stands for 'c', I can infer that a combination of 0's and 1's can construct a word as well. In this case, the text is already constructed and is being sent on the wire. The computer works on many languages - pure binary, text and some other formats like byte codes. Here, what is being transferred is text. I am emphasizing on 'text' because this text is interpreted by the browser and the moment browser interprets it, it becomes hypertext, and the protocol that transfers the text is referred to as hypertext transfer protocol - HTTP.&lt;/p&gt;

&lt;p&gt;Using HTTP, you can definitely transfer images and text and even sound, but not videos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-https-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is HTTPS ?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Hyper Text Transfer Protocol Secure (HTTPS) is the secure version of HTTP, the protocol over which data is sent between your browser and the website that you are connected to. The 'S' at the end of HTTPS stands for 'Secure'. It means all communications between your browser and the website are encrypted. HTTPS is often used to protect highly confidential online transactions like online banking and online shopping order forms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-importance-of-https-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is the importance of HTTPS ?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We agreed upon the fact that what is being transferred from one point to another is text. To understand why HTTPS protocol, we first should know how wi-fi routers function. Let's say you are at an airport and you are connecting to the wi-fi which is the property of a third party. Now, when you are communicating over HTTP, the text is being transferred by their router. And if I go to a low version of the router, I can comfortably check and read the text that is being transferred. There could be a password that I can use to login to your bank site and do a fraudulent transaction!. Point being - this is fundamentally insecure. This is called the man in the middle attack. &lt;/p&gt;

&lt;p&gt;And this why do we need https when HTTP seems to suffice.&lt;/p&gt;

&lt;p&gt;Now, to save our data from such attacks, we need to encrypt that data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t47TyBuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qs3184ln0o0e88n1uyll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t47TyBuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qs3184ln0o0e88n1uyll.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In fact, in order to implement an advanced secure connection for users, in 2014 the search engine giant announced HTTPS as a ranking signal. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#encryption-and-encryption-levels" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Encryption and Encryption Levels&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Encryption is simple terms is a hiding information. There are various ways to do so. You must have heard these terms - 128 bit encrypt HTTPS and 64 bit encrypt HTTPS. 128-bit Encrypt is a high encryption technique and it's very difficult to decrypt (decode). In the case of HTTPS when the data is being transferred on the wires, the man in the middle may still know what is being transferred, but can not make sense out of it as the data is encrypted. Only the browser will decrypt it and show it, and the server will decrypt it and use it for transactions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-this-happens-when-you-request-to-open-a-site-in-a-browser-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How does this happens when you request to open a site in a browser ?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To understand this, let us imagine that there is one Server that resides somewhere serving all the request for one domain. Now, when I type xyz.com, it's a server that I am connecting to, taking data from and rendering it in the browser.&lt;/p&gt;

&lt;p&gt;To simplify further, imagine a domain name google.com being broadcasted from one server. There resides one machine somewhere connected to the internet and the moment you say google.com in your browser, you connect to that machine, pick data from that machine and show it in the browser. If you have saved your picture, it gets uploaded to that machine. Now, if you want to see that picture, you go to google.com/show-me-my-picture, which transfers the picture from the machine to the browser to be shown to you.&lt;/p&gt;

&lt;p&gt;This process cannot be completed if I am not able to reach that particular machine. For this to happen, every machine has an address (the way we have a mobile number), it is called the IP address and every domain has an IP map. The moment you enter this user-friendly URL - google.com, it converts this username into IP and connects to the router to reach out to that particular service line associated with this URL. Once it reaches to the server, it raises a request of what is needed. It is represented as 'google.com/s=', helping the user understand the request made by him. As a result, the server gives him the results according to your request, which gets rendered to the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happens-when-a-request-for-a-website-url-is-made-which-is-on-http-protocol-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What happens when a request for a website URL is made which is on HTTP protocol ?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As the first step, it is the job of HTTP to find out the server and once the communication route is established, the server sends a text to the browser. This text could either be in its pure form or encrypted form, which is then rendered by the browser or used for whatever purpose it has to it has to be used.&lt;/p&gt;

&lt;p&gt;As there should be a measurement of this difficulty quotient, we interpret that, higher the number of bits, more difficult it is to decrypt. However, it only increases the level of complexity making it very difficult to decrypt, but not impossible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deciding-between-http-and-https" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Deciding between HTTP and HTTPS&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QJnVFXSy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wow8u84kyu8ps8ybegyl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QJnVFXSy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wow8u84kyu8ps8ybegyl.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anything and everything is personal. If you are searching for “How to install SSL Certificate”, that search would be private to you, isn't it? Whether you are browsing or looking for a product, reading an article, you generally do not want others to know about it. As an end user, I would want to keep it as private. There are things I might not want to keep private and for those, I can use HTTP. However, for personal information, banks and transnational information, HTTPS has become a standard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#https-sounds-great-what-else-should-you-know-about-it-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;HTTPS sounds great. What else should you know about it ?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;There is no denying to the fact that privacy has a cost to it. There are a couple of cons-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;HTTPS requests take more time to process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because it needs more time to process, it needs more hardware - the server that you are utilizing. This also means additional cost&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Whereas, for HTTP you use lesser energy as compared to HTTPS as the communication happens faster (without encryption and decryption). However, I will not refer to it as a limitation for HTTPS. It is highly subjective and personal, I consider it a very low cost that we pay to ensure our privacy.&lt;/p&gt;

&lt;p&gt;The idea of building a secure web has been around for a while. Because of the following two reasons -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;User Data and User Privacy: Using HTTPS ensures that you as a developer care value user data, user’s privacy, and its security.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Protecting Your Data: As a developer, we would never want to give away our critical data to malicious participants.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information- &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/https"&gt;https://developer.mozilla.org/en-US/docs/Glossary/https&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>security</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building custom HTML elements with web components</title>
      <author>Marcus Stamström</author>
      <pubDate>Sun, 29 Nov 2020 18:38:11 +0000</pubDate>
      <link>https://dev.to/mstamstrom/building-custom-html-elements-with-web-components-4lb</link>
      <guid>https://dev.to/mstamstrom/building-custom-html-elements-with-web-components-4lb</guid>
      <description>&lt;h3&gt;
  &lt;a href="#imagine-building-reusable-encapsulated-html-elements-without-any-framework-with-web-components-we-can-certainly-create-it" class="anchor"&gt;
  &lt;/a&gt;
  Imagine building reusable, encapsulated HTML elements, without any framework! With web components, we can certainly create it!
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#what-are-web-components" class="anchor"&gt;
  &lt;/a&gt;
  What are Web components?
&lt;/h2&gt;

&lt;p&gt;Web components are a set of web platform APIs that allows to create custom, reusable and encapsulated HTML elements that can be used in any document or web app. Web components consist of 3 different technologies.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Custom elements&lt;/strong&gt;, a set of Javascript APIs that permits to create custom HTML elements and define their behavior.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Shadow DOM&lt;/strong&gt;, is used to encapsulate javascript and styling to specific components.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTML templates&lt;/strong&gt;, is used to declare markup that goes unused at page load, but it can be instantiated later at runtime.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#custom-elements" class="anchor"&gt;
  &lt;/a&gt;
  Custom elements
&lt;/h2&gt;

&lt;p&gt;Custom elements are the foundation of web components. With the &lt;code&gt;CustomElemets&lt;/code&gt; API, we are creating new HTML elements based on desired behavior and logic. &lt;/p&gt;

&lt;p&gt;Constructing a custom element is similar to construct a component in Vue, React or insert-flavor-of-the-week framework, but without the need for a framework. These custom elements can be used in any document, both directly in HTML or in web applications. Another advantage of using web components, since these custom elements are supported by browsers, is that they don't become obsolete (in contrast to SPA framework).&lt;/p&gt;

&lt;p&gt;In order to build a custom element, a javascript class is necessary to extend &lt;code&gt;HTMLElement&lt;/code&gt; and define the class with a tag name. A fundamental version of a custom element:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marcusalfredsson/embed/WNxqEGB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Despite the fact that this example isn't advanced, it allows being used as a starting block. The example illustrates that the javascript class extends &lt;code&gt;HTMLElement&lt;/code&gt; allowing the component to be registered by the browser. It's important to define the custom HTML element with a tag in order to use it from the document. Defining a tag is achieved with &lt;code&gt;customElements.define('hello-world', HelloWorld)&lt;/code&gt;. After fulfilling these steps, we have built a custom element, ready to be used in any document by simply writing &lt;code&gt;&amp;lt;hello-world&amp;gt;&amp;lt;/hello-world&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, extending &lt;code&gt;HTMLElement&lt;/code&gt; allows access to the API used by HTML elements, for example, lifecycle events. In the exposed case, lifecycle event &lt;code&gt;connectedCallback&lt;/code&gt; is executed when the component is inserted into the DOM. &lt;code&gt;connectedCallback&lt;/code&gt; is the right location for adding initial content to elements or fetching data to be rendered in a component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: A custom element always has a dash in the tag name, for example &lt;code&gt;my-component&lt;/code&gt;, &lt;code&gt;hello-world&lt;/code&gt; or &lt;code&gt;whats-up&lt;/code&gt;. Browser vendors have bound not to use dashes in HTML tags, to avoid conflicts in tag name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-template" class="anchor"&gt;
  &lt;/a&gt;
  HTML template
&lt;/h2&gt;

&lt;p&gt;With HTML templates, we define HTML that will be instantiated later at runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello world&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The code snippet above renders an empty page as a result of the template's content aren't displayed in the browser. With this powerful technique, we can define and store HTML in the DOM and display the content when desired. To display the content of a template we need to use javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Start with fetching the template from the DOM, next copy the template to the &lt;code&gt;node&lt;/code&gt; variable using &lt;code&gt;importNode&lt;/code&gt; and at the end insert the newly created &lt;code&gt;node&lt;/code&gt; into the DOM. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;importNode&lt;/code&gt; copies the template's content and in consequence it can be reused in several places for a document. After being executed, the DOM is similar to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello world&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello world&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A great aspect about templates is the possibility to include any HTML, style or scripts. As a result templates are a good location for styling our component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"counter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Click me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"times"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#shadow-dom" class="anchor"&gt;
  &lt;/a&gt;
  Shadow DOM
&lt;/h2&gt;

&lt;p&gt;The DOM (Document Object Model) represents the structure of the HTML document. The DOM has a tree structure that models a document with a parent-children relationship.&lt;/p&gt;

&lt;p&gt;The DOM API has absent support for encapsulation. This characteristic makes it difficult to create reusable, encapsulated custom elements.&lt;/p&gt;

&lt;p&gt;Encapsulation is however possible in the shadow DOM and is accessible to use javascript and styling to custom elements. When creating a shadow DOM, a subtree is attached to one DOM element. The newly created shadow DOM subtree is encapsulated from the rest of the document and our shadow DOM subtree cannot affect the residual part of the document.&lt;/p&gt;

&lt;p&gt;Aside from encapsulation, the API for the DOM and the shadow DOM work similarly. Furthermore functions like &lt;code&gt;querySelector&lt;/code&gt;, &lt;code&gt;textContent&lt;/code&gt;, &lt;code&gt;getElementById&lt;/code&gt; etc. from the API can still be used.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marcusalfredsson/embed/YzWobNg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This exemplifies how shadow DOM is attached to the root of a custom element with &lt;code&gt;this.attachShadow({mode: 'open'})&lt;/code&gt;. Now the generated shadow DOM will encapsulate javascript, HTML and styling inside the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"counter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Click me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"times"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;my-counter&amp;gt;&lt;/span&gt;
  #shadow-root
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Click me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"times"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/my-counter&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After we render our component the final result of the DOM is outlined as in the present example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Without using any SPA framework, we are able to create encapsulated, reusable web components that are a great benefit to worldwide users. &lt;/p&gt;

&lt;p&gt;Considering that web development becomes increasingly complex, it's reasonable to invest more development in the web platform. From this perspective, I believe web components are a great complement to SPA frameworks such as Vue and React. They don't substitute each other, but it's very suitable to build these custom HTML elements without any framework.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webcomponents</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Netflix intro animation - Pure CSS</title>
      <author>Claudio Bonfati</author>
      <pubDate>Sun, 29 Nov 2020 17:32:31 +0000</pubDate>
      <link>https://dev.to/claudiobonfati/netflix-intro-animation-pure-css-1m0c</link>
      <guid>https://dev.to/claudiobonfati/netflix-intro-animation-pure-css-1m0c</guid>
      <description>&lt;p&gt;Hey everyone,&lt;/p&gt;

&lt;p&gt;Recently I've cloned the Netflix's intro animation using only CSS and I got some great feedback about it, so I thought it would be great to share a bit about the development process of the animation step-by-step.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/claudio_bonfati/embed/mdryxPv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So here we go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-structure" class="anchor"&gt;
  &lt;/a&gt;
  HTML Structure
&lt;/h3&gt;

&lt;p&gt;First I mapped the letters in Netflix's logo, and separated they so I could use it as a base reference for positioning the HTML elements later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpmMTo4X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/doh6umhnrgl61hfzhrdb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpmMTo4X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/doh6umhnrgl61hfzhrdb.png" alt="Netflix logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the HTML, I've created a container with 4 subdivs named helpers, each helper is designated to be a 'side' of the animated letter, for example, animating the N letter, 3 helpers are going to be used, because the N is divided in 3 individual parts, like this 👉 I\I&lt;/p&gt;

&lt;p&gt;That being said, considering that in the container div we have an attribute named 'letter', I've used the image we export in the previous step, and it placed exactly where the helper divs  should be for each value in the 'letter' attribute, wich supports all letters from the 'NETFLIX' name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j6Aj7P7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n3xnwm7xggknttgpenr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6Aj7P7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n3xnwm7xggknttgpenr7.png" alt="Separated letters from Netflix's logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-animation" class="anchor"&gt;
  &lt;/a&gt;
  The Animation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X4Und3pY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w54thypsvulodi8xwwg1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X4Und3pY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w54thypsvulodi8xwwg1.gif" alt="Netflix intro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it's time to focus on the animation part. The animation is composed by three main steps, the first one is when the letter is fading each one of its sides, until it came to the second part, that is mainly composed by lots of vertical 'lights' with different widths and colors that emerge from the last side of the letter while it's also fading away. The third part is the camera movement applied while the lights are going away - but that is the easiest part.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-first-part-fading-away" class="anchor"&gt;
  &lt;/a&gt;
  The first part (fading away)
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mt_Stxk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ux1uwhy16knpktdvgbp3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mt_Stxk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ux1uwhy16knpktdvgbp3.png" alt="Fading away"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The fading effect has a clear similarity to a paintbrush "unpainting" the letter. In order to clone this effect, we must acknowledge that a paintbrush doesn't have an uniform tip, some brush tips are made of nylon and polyester. &lt;br&gt;
To do this, we have to build an 'irregular' gradient effect. Using photoshop I've made this brush effect:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1zK_ekeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q71epfffixl4yeholesc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1zK_ekeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q71epfffixl4yeholesc.png" alt="Paintbrush gradient effect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Later I've created each little piece of the gradient into HTML helpers elements, this pieces was named as a 'fur', each one being a single 'span' tag. And, as it can be seen in the image, each fur has a different gradient effect, that was also replicated in the CSS file.&lt;/p&gt;

&lt;p&gt;With this irregular gradient created, I made they move using simple CSS key-frame animation, each helper having its own delay setting to start one after another.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-second-part-colorful-lights" class="anchor"&gt;
  &lt;/a&gt;
  The second part (colorful lights)
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NqIzHYkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1umwm603seyjp6ji0u5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NqIzHYkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1umwm603seyjp6ji0u5f.png" alt="Colorful lights from Netflix animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea behind the lights is similar to the paintbrush. But, instead of each little piece being a fur with a gradiente background, each light has a random solid color as background and a box shadow for the illumination effect.&lt;/p&gt;

&lt;p&gt;In order to make the lights "avoid the camera" while its getting closer, it was created a random movement with key-frame animation that make them move sideways, opening an empty gap in the middle of the lights.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-third-part-camera-movement" class="anchor"&gt;
  &lt;/a&gt;
  The third part (camera movement)
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7_Nj26z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ro21uthbu4ky43l6ck2m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7_Nj26z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ro21uthbu4ky43l6ck2m.png" alt="Camera movement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The camera movement was replicated also using key-frame animation, but this time the css property manipulated was the scale of the main HTML container, so it looks like the camera is zooming in the letter while all the other animations are playing at the same time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The hardest part was to conciliate all animations to be played at exactly the time they should be, so 'animation-delay' plays a big role in these scenarios. The approach I toke in the animations was to make sure that the animation could be played with a different background color and even with a different letter color, just changing the SASS variable and all the animation would still work as it should. &lt;br&gt;
The code can still be optimised in many ways, so feel free to play with it if you like.&lt;/p&gt;

&lt;p&gt;Thats all guys. I hope this post can help someone in some way. =)&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>showdev</category>
      <category>sideprojects</category>
    </item>
    <item>
      <title>DIY Christmas Radio</title>
      <author>Laura Vuorenoja</author>
      <pubDate>Sun, 29 Nov 2020 17:32:30 +0000</pubDate>
      <link>https://dev.to/levelupkoodarit/diy-christmas-radio-31k4</link>
      <guid>https://dev.to/levelupkoodarit/diy-christmas-radio-31k4</guid>
      <description>&lt;p&gt;Many people who are starting their programming journey often wonder where to get the ideas for their side projects. My advice is that work with a topic you are passionate about. For example, if you love cooking, make yourself a cookbook service or perhaps a digital egg timer. Or if you like to wander in nature, code an app that tracks your routes or helps you to identify which bird is singing. You will have an extra motivational boost when solving the problem will benefit you also otherwise.&lt;/p&gt;

&lt;p&gt;"The thing" for me has always been music, so most of my side projects have been related to music in a way or another. One of my favorite apps is Spotify and luckily for me, they have published excellent APIs that one can utilize versatilely in their projects.&lt;/p&gt;




&lt;p&gt;So it is no surprise that my latest project is also built on Spotify API. As Christmas is getting closer, my daily listening queue is filled with Christmas tunes. However, I tend to listen to the same songs every Christmas. This year I decided to find some new favorites.&lt;/p&gt;

&lt;p&gt;We have an excellent internet radio for Christmas songs in Finland called &lt;a href="https://www.jouluradio.fi/"&gt;Jouluradio&lt;/a&gt;. The only problem when listening to Jouluradio is if you like some new song you hear, saving it for later listening is quite cumbersome. You need to find the track information from the Jouluradio web page and manually search the track from Spotify.&lt;/p&gt;

&lt;p&gt;Fortunately, Jouluradio publishes its playlist of the last 20 songs on the service web page. I decided to make "a radio app" that grabs this information. If the tracks are found in Spotify, they are added to my personal Christmas radio playlist and when playing it I can easily save the ones I like for later listening.&lt;/p&gt;




&lt;p&gt;My radio app, named &lt;a href="https://github.com/lauravuo/kaneli"&gt;Kaneli&lt;/a&gt; (cinnamon in Finnish) is a command-line program written in Golang. The trickiest part of the project was to implement the user OAuth 2.0 authentication to Spotify that I wrote about in &lt;a href="https://dev.to/lauravuo/how-to-oauth-from-the-command-line-47j0"&gt;my last week's post&lt;/a&gt;. The user authentication and authorization part is required for the app to have permission to add tracks to the user-owned Spotify playlist.&lt;/p&gt;

&lt;p&gt;Otherwise, the program is mainly about fetching and posting JSON to various endpoints.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Af0ZhmXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6a9xgtdzt7newf9kf0ya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Af0ZhmXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6a9xgtdzt7newf9kf0ya.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;API providers and app interaction flow&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;When the songs' information is acquired from Jouluradio, the app searches from Spotify if the track is found there. The Spotify &lt;a href="https://developer.spotify.com/documentation/web-api/reference/search/search/"&gt;search API endpoint&lt;/a&gt; provides handy tools for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PageLastPlayed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RecentlyPlayed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Songs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryEscape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"artist:%s track:%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Artist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Song&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="c"&gt;// search for song by artist and title&lt;/span&gt;
  &lt;span class="n"&gt;trackResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trackErr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;doGetRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://api.spotify.com/v1/search?type=track&amp;amp;q=%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bearerHeader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;trackErr&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to fetch track data %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;trackData&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;SpotifyResponse&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trackResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;trackData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to parse track data %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;// just pick the first found track&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trackData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tracks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;trackData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tracks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Add track %s: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Artist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Song&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;songIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;songIds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;removeIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;removeIds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;SpotifyRemoveItem&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The search query is done for each track using the artist and song title information. If the search returns results, the first found result id is saved for later use.&lt;/p&gt;




&lt;p&gt;When the looping is done, it's time to add the results to the user's playlist. For this Spotify provides &lt;a href="https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/"&gt;a playlist API endpoint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this phase, I had one problem though: how to prevent the program from adding duplicate tracks. First I tried to find an API that would allow me to search if the playlist contains the specific track already. But luckily, there didn't exist this kind of API. Instead, I figured out a more efficient way of avoiding the duplicates: before adding the items, the program would make a delete request for the tracks that are about to be added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;apiPath&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://api.spotify.com/v1/playlists/%s/tracks"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;playlistID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// first delete all tracks with similar id to avoid duplicates&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doJSONRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apiPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodDelete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;SpotifyPlaylistDelete&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Tracks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;removeIds&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;bearerHeader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// then add all tracks to the start of the list&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doJSONRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apiPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodPost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;SpotifyPlaylistModify&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;URIs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;songIds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;bearerHeader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Both the delete and the add request are done by utilizing batches, so it is more efficient than removing or adding the tracks one-by-one.&lt;/p&gt;




&lt;p&gt;The codes can be found in &lt;a href="https://github.com/lauravuo/kaneli"&gt;GitHub&lt;/a&gt; if you want to take a closer look. To run the app, you need to register your application in &lt;a href="https://developer.spotify.com/dashboard/"&gt;the Spotify developer dashboard&lt;/a&gt; and check the further instructions in the repository README.&lt;/p&gt;

&lt;p&gt;The current version of the app loops through a couple of different radios dedicated to specific genres and adds the tracks to the user-defined playlist. So far I have been running the program manually at random times but I guess it would be possible to create &lt;a href="https://en.wikipedia.org/wiki/Cron"&gt;a cron job&lt;/a&gt; for it to run e.g. once per hour. That is if one would like a really extensive radio list 😄&lt;/p&gt;

&lt;p&gt;You can find my Christmas radio &lt;a href="https://open.spotify.com/playlist/5x5mdsVit4ngNyvglqkO8f?si=Qu24MltlRmKBWFoLP_xN0A"&gt;on Spotify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Cover photo by &lt;a href="https://unsplash.com/@markusspiske?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Markus Spiske&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fm-radio?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>spotify</category>
      <category>sideprojects</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Terminal (zsh): Increase Productivity by Creating Aliases &amp; Functions</title>
      <author>Anthony DiPietrantonio</author>
      <pubDate>Sun, 29 Nov 2020 17:02:36 +0000</pubDate>
      <link>https://dev.to/antdp425/terminal-zsh-increase-productivity-by-creating-aliases-functions-5b38</link>
      <guid>https://dev.to/antdp425/terminal-zsh-increase-productivity-by-creating-aliases-functions-5b38</guid>
      <description>&lt;p&gt;&lt;em&gt;This tutorial will cover how to create aliases and functions in your zprofile file to increase your productivity in the terminal. It assumes that you are on MacOS, using zsh as your shell, and are editing the zprofile file with VS Code. If you are using bash, you can do the same by following this &lt;a href="https://medium.com/better-programming/boost-your-productivity-with-aliases-and-functions-88eaf0fa0fb4"&gt;article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/g0jlOqo7AJ0FmaHSFZ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/g0jlOqo7AJ0FmaHSFZ/giphy.gif" alt="https://media.giphy.com/media/g0jlOqo7AJ0FmaHSFZ/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why use Aliases and Functions?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a developer, you'll likely spend a good amount of time in Terminal doing the same things over and over again — things like cd-ing into/ accessing a folder (ex: a "Projects" folder) or running some kind of command (ex: git add, git commit -m, git push, etc). While it may not seem like much these repetitive tasks slowly begin to eat away at your precious time. Making use of aliases and functions can help us solve this "problem".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Access Your zprofie&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open Terminal and enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;code ./.zprofile
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once doing so, your VS Code should open your zprofile, where you'll see some ENV variables, aliases, and even functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aliases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TVlNTcuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/en/thumb/1/1c/Alias-logo.png/250px-Alias-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TVlNTcuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/en/thumb/1/1c/Alias-logo.png/250px-Alias-logo.png" alt="https://upload.wikimedia.org/wikipedia/en/thumb/1/1c/Alias-logo.png/250px-Alias-logo.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can think of aliases as a text shortcut for some of your most common commands — like git add, git push, and git commit. &lt;/p&gt;

&lt;p&gt;To create aliases for these three commands specifically, we would add something like this to our zprofile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ga&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git add."&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git push"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git commit"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Remember, all we are doing here is creating a text shortcut, so that next time we enter Terminal, instead of typing out "git add .", "git push", or "git commit", we can simply type "ga", "gp", or "gc".&lt;/p&gt;

&lt;p&gt;As an additional example, another handy use case for an alias is for when you are deploying a site to Netlify with the &lt;a href="https://docs.netlify.com/cli/get-started/"&gt;Netlify CLI&lt;/a&gt;. Typically, you would need to type "netlify deploy" or "netlify deploy —prod", but now that we know what aliases are and how to create them, we can simply add the following to our zprofile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"netlify deploy"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ndp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"netlify deploy --prod"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Doing so allows us to simply type "nd" or "ndp" instead of "netlify deploy" or "netlify deploy —prod".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IhytMv3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thumbs.dreamstime.com/b/functions-message-word-wooden-desk-cube-blocks-software-development-functions-message-word-wooden-desk-cube-187107835.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IhytMv3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thumbs.dreamstime.com/b/functions-message-word-wooden-desk-cube-blocks-software-development-functions-message-word-wooden-desk-cube-187107835.jpg" alt="https://thumbs.dreamstime.com/b/functions-message-word-wooden-desk-cube-blocks-software-development-functions-message-word-wooden-desk-cube-187107835.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Functions allow us to perform more involved actions from the terminal — like cd-ing into a folder or opening certain browser tabs. These are just simple examples, but with the ability to &lt;a href="http://zsh.sourceforge.net/Guide/zshguide03.html"&gt;make use of conditionals, for loops, and more&lt;/a&gt;, you can imagine that this is just the tip of the iceberg in terms of what can be done with functions.&lt;/p&gt;

&lt;p&gt;To create a function, we simply need to use the function keyword + whatever we want to call our function + curly braces + the terminal commands you want to run.&lt;/p&gt;

&lt;p&gt;Here's how the functions I mentioned above would look within my zprofile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;projects &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; /Users/&lt;span class="nv"&gt;$USER&lt;/span&gt;/Desktop/Projects
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;job-search &lt;span class="o"&gt;{&lt;/span&gt;
  open https://www.linkedin.com
  open https://indeed.com
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;My projects function makes use of the USER variable that defaults to my MacOS username. Now when I type "projects" in terminal, it will simply bring me to that folder — no need to type the entire path like I would have had to do in the past. &lt;/p&gt;

&lt;p&gt;For my job-search function, we are making use of &lt;em&gt;open&lt;/em&gt; which will open a browser tab in my default browser. So in this function, when I type "job-search" in terminal, it will open two browser tabs — one for Linkedin and one for Indeed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/iEs4yXq5rVlL2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/iEs4yXq5rVlL2/giphy.gif" alt="https://media.giphy.com/media/iEs4yXq5rVlL2/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding your aliases and/or functions in your zprofile — just remember to save the file, then once you open a new Terminal window, you'll be able to make use of them.&lt;/p&gt;

&lt;p&gt;Here are some additional resources that may be useful when working with zsh and your zprofile:&lt;br&gt;
&lt;a href="https://blog.lftechnology.com/command-line-productivity-with-zsh-aliases-28b7cebfdff9"&gt;Command Line Productivity with ZSH Aliases&lt;/a&gt;&lt;br&gt;
&lt;a href="https://scriptingosx.com/2019/06/moving-to-zsh/"&gt;Moving to zsh (series)&lt;/a&gt;&lt;br&gt;
&lt;a href="http://zsh.sourceforge.net/Intro/intro_toc.html"&gt;An Introduction to the Z Shell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to reach out on any of my socials for questions, feedback, or just to connect / say hello 👋.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>productivity</category>
      <category>zsh</category>
    </item>
  </channel>
</rss>
