<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learn Python</title>
      <author>Vijay Patel</author>
      <pubDate>Mon, 29 Nov 2021 17:52:44 +0000</pubDate>
      <link>https://dev.to/easyawslearn/learn-python-fo5</link>
      <guid>https://dev.to/easyawslearn/learn-python-fo5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Python&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Python is an interpreted high-level general-purpose programming language. Its design philosophy emphasizes code readability with its use of significant indentation. Its language constructs as well as its object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.&lt;/p&gt;

&lt;p&gt;It supports multiple programming paradigms, including structured (particularly, procedural), object-oriented and functional programming. It is often described as a "batteries included" language due to its comprehensive standard library.&lt;/p&gt;

&lt;p&gt;It was created by Guido van Rossum, and released in 1991.&lt;/p&gt;

&lt;p&gt;It is used for:&lt;br&gt;
web development (server-side),&lt;br&gt;
software development,&lt;br&gt;
mathematics,&lt;br&gt;
system scripting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/25J4Ruv7E_U"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cLJm5rAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7fwblbz1pr4z97sreku.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What can Python do?&lt;/strong&gt;&lt;br&gt;
Python can be used on a server to create web applications.&lt;br&gt;
Python can be used alongside software to create workflows.&lt;br&gt;
Python can connect to database systems. It can also read and modify files.&lt;br&gt;
Python can be used to handle big data and perform complex mathematics.&lt;br&gt;
Python can be used for rapid prototyping, or for production-ready software development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Python?&lt;/strong&gt;&lt;br&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).&lt;br&gt;
Python has a simple syntax similar to the English language.&lt;br&gt;
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.&lt;br&gt;
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;br&gt;
Python can be treated in a procedural way, an object-oriented way or a functional way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=6YVS-qUxukc&amp;amp;t=74s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIPToo8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xhnddhekdd4r0px9t8r.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#python-installation"&gt;
  &lt;/a&gt;
  Python Installation:
&lt;/h2&gt;

&lt;p&gt;Many PCs and Macs will have python already installed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ycTc1zAR_iA&amp;amp;t=4s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3l0s1xU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltb2ok6th4n2axx6acvl.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line&lt;br&gt;
 &lt;code&gt;(cmd.exe):&lt;br&gt;
   C:\Users\Your Name&amp;gt;python --version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type:&lt;br&gt;
&lt;code&gt;python --version&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#python-syntax-and-comments"&gt;
  &lt;/a&gt;
  Python Syntax and Comments:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ncbTQeqUb90&amp;amp;t=49s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htSnUJtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsfir2fyznpssihhd9zk.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python syntax can be executed by writing directly in the Command Line:&lt;br&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print("Hello, World!")&lt;br&gt;
Hello, World!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or by creating a python file on the server, using the .py file extension, and running it in the Command Line:&lt;br&gt;
C:\Users\Your Name&amp;gt;python myfile.py&lt;br&gt;
Python Indentation:&lt;br&gt;
Indentation refers to the spaces at the beginning of a code line.&lt;br&gt;
Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.&lt;br&gt;
Python uses indentation to indicate a block of code.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if 5 &amp;gt; 2:
  print("Five is greater than two!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Single-Line Comments:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Comments can be used to explain Python code.&lt;br&gt;
Comments can be used to make the code more readable.&lt;br&gt;
Comments can be used to prevent execution when testing code.&lt;/p&gt;

&lt;p&gt;Comments start with a #, and Python will ignore them:&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#This is a comment
print("Hello, World!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;**Multi-Line Comments:&lt;br&gt;
**Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"""
This is a comment
written in
more than just one line
"""
print("Hello, World!")

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-variable-and-data-types"&gt;
  &lt;/a&gt;
  Python Variable and Data Types:
&lt;/h2&gt;

&lt;p&gt;Variables are containers for storing data values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=raShdX__8BE&amp;amp;t=5s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kwjDpi20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcnqabo09koy7lna64ra.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating Variables:&lt;/strong&gt;&lt;br&gt;
Python has no command for declaring a variable.&lt;br&gt;
A variable is created the moment you first assign a value to it.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 5
y = "John"
print(x)
print(y)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Get the Type:&lt;/strong&gt;&lt;br&gt;
You can get the data type of a variable with the type() function.&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 5
y = "John"
print(type(x))
print(type(y))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;**Case-Sensitive:&lt;br&gt;
**Variable names are case-sensitive.&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;This will create two variables:
a = 4
A = "Sally"
#A will not overwrite a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Built-in Data Types:&lt;/strong&gt;&lt;br&gt;
In programming, data type is an important concept.&lt;br&gt;
Variables can store data of different types, and different types can do different things.&lt;br&gt;
Python has the following data types built-in by default, in these categories:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Text Type: str&lt;br&gt;
Numeric Types: int, float, complex&lt;br&gt;
Sequence Types: list, tuple, range&lt;br&gt;
Mapping Type: dict&lt;br&gt;
Set Types: set, frozenset&lt;br&gt;
Boolean Type: bool&lt;br&gt;
Binary Types: bytes, bytearray, memoryview&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#python-conditions-and-if-statements"&gt;
  &lt;/a&gt;
  Python Conditions and If statements:
&lt;/h2&gt;

&lt;p&gt;Python supports the usual logical conditions from mathematics:&lt;br&gt;
Equals: a == b&lt;br&gt;
Not Equals: a != b&lt;br&gt;
Less than: a &amp;lt; b&lt;br&gt;
Less than or equal to: a &amp;lt;= b&lt;br&gt;
Greater than: a &amp;gt; b&lt;br&gt;
Greater than or equal to: a &amp;gt;= b&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=BasLA6W7Yhs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nDS5kxdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7l34rff5a8d2yq8ox9ia.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These conditions can be used in several ways, most commonly in "if statements" and loops.&lt;br&gt;
An "if statement" is written by using the if keyword.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If statement:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a = 33
b = 200
if b &amp;gt; a:
  print("b is greater than a")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Indentation:&lt;/strong&gt;&lt;br&gt;
Python relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elif:&lt;/strong&gt;&lt;br&gt;
The elif keyword is pythons way of saying "if the previous conditions were not true, then try this condition".&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a = 33
b = 33
if b &amp;gt; a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Getting the Data Type:&lt;/strong&gt;&lt;br&gt;
You can get the data type of any object by using the type() function:&lt;br&gt;
Example&lt;br&gt;
Print the data type of the variable x:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 5
print(type(x))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-loops"&gt;
  &lt;/a&gt;
  Python Loops:
&lt;/h2&gt;

&lt;p&gt;Python has two primitive loop commands:&lt;br&gt;
while loops&lt;br&gt;
for loops&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The while Loop:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=89aw4fD9YeQ&amp;amp;t=19s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--knQie06p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojvvhvrwl4qqwyd5d992.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the while loop we can execute a set of statements as long as a condition is true.&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Print i as long as i is less than 6:
i = 1
while i &amp;lt; 6:
  print(i)
  i += 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Python For Loops:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).&lt;br&gt;
This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.&lt;br&gt;
With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=cSdunnrI0ds"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6IHnUJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2q12l58b0qq0jft3kj6.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Print each fruit in a fruit list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Looping Through a String:&lt;/strong&gt;&lt;br&gt;
Even strings are iterable objects, they contain a sequence of characters:&lt;br&gt;
Example&lt;br&gt;
Loop through the letters in the word "banana":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for x in "banana":
  print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#break-continue-and-pass"&gt;
  &lt;/a&gt;
  Break, Continue, and Pass:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=css_ijwXOHw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IlUZ0SpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxjp3vf0r689jrcm1fov.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Break Statement:&lt;/strong&gt;&lt;br&gt;
With the break statement we can stop the loop before it has looped through all the items:&lt;br&gt;
Example&lt;br&gt;
Exit the loop when x is "banana":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  if x == "banana":
    break
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Continue Statement:&lt;/strong&gt;&lt;br&gt;
With the continue statement we can stop the current iteration of the loop, and continue with the next:&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Do not print banana:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
  print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Pass Statement:&lt;/strong&gt;&lt;br&gt;
for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for x in [0, 1, 2]:
  pass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-for-else"&gt;
  &lt;/a&gt;
  Python For Else:
&lt;/h2&gt;

&lt;p&gt;The else keyword in a for loop specifies a block of code to be executed when the loop is finished:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=1-woqHzS9n0&amp;amp;t=2s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZiavEFyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6dmp15jgsx0jir45oxh.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Print all numbers from 0 to 5, and print a message when the loop has ended:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for x in range(6):
  print(x)
else:
  print("Finally finished!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-functions"&gt;
  &lt;/a&gt;
  Python Functions:
&lt;/h2&gt;

&lt;p&gt;A function is a block of code which only runs when it is called.&lt;br&gt;
You can pass data, known as parameters, into a function.&lt;br&gt;
A function can return data as a result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Qy6bVkOegwU&amp;amp;t=37s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--te4iQ_KE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyelhy1m4x2qkm0rj1ql.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a Function:&lt;/strong&gt;&lt;br&gt;
In Python a function is defined using the def keyword:&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def my_function():
  print("Hello from a function")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Calling a Function:&lt;/strong&gt;&lt;br&gt;
To call a function, use the function name followed by parenthesis:&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def my_function():
  print("Hello from a function")
my_function()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Arguments:&lt;/strong&gt;&lt;br&gt;
Information can be passed into functions as arguments.&lt;br&gt;
Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.&lt;br&gt;
The following example has a function with one argument (fname). When the function is called, we pass along a first name, which is used inside the function to print the full name:&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def my_function(fname):
  print(fname + " Refsnes")

my_function("Emil")
my_function("Tobias")
my_function("Linus")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Number of Arguments:&lt;/strong&gt;&lt;br&gt;
By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
This function expects 2 arguments, and gets 2 arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def my_function(fname, lname):
  print(fname + " " + lname)

my_function("Emil", "Refsnes")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Default Parameter Value:&lt;/strong&gt;&lt;br&gt;
The following example shows how to use a default parameter value.&lt;br&gt;
If we call the function without argument, it uses the default value:&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def my_function(country = "Norway"):
  print("I am from " + country)

my_function("Sweden")
my_function("India")
my_function()
my_function("Brazil")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-lambda"&gt;
  &lt;/a&gt;
  Python Lambda:
&lt;/h2&gt;

&lt;p&gt;A lambda function is a small anonymous function.&lt;br&gt;
A lambda function can take any number of arguments, but can only have one expression.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=VkGBzKq7dRs&amp;amp;t=3s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gOsYGrdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9pm4jz3fejx5vr2fb8p.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;lambda arguments : expression&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The expression is executed and the result is returned:&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Add 10 to argument a, and return the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = lambda a : a + 10
print(x(5))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Why Use Lambda Functions?&lt;/strong&gt;&lt;br&gt;
The power of lambda is better shown when you use them as an anonymous function inside another function.&lt;br&gt;
Say you have a function definition that takes one argument, and that argument will be multiplied with an unknown number:&lt;br&gt;
&lt;code&gt;def myfunc(n):&lt;br&gt;
  return lambda a : a * n&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Use that function definition to make a function that always doubles the number you send in:&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(2)

print(mydoubler(11))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-arrays"&gt;
  &lt;/a&gt;
  Python Arrays:
&lt;/h2&gt;

&lt;p&gt;Note: Python does not have built-in support for Arrays, but Python Lists can be used instead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=G7z19LQcH3g"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PGO7k-0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtxyj8x4elk5o0dxseoh.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is an Array?&lt;/strong&gt;&lt;br&gt;
An array is a special variable, which can hold more than one value at a time.&lt;br&gt;
If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:&lt;br&gt;
&lt;code&gt;car1 = "Ford"&lt;br&gt;
car2 = "Volvo"&lt;br&gt;
car3 = "BMW"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?&lt;br&gt;
The solution is an array!&lt;br&gt;
An array can hold many values under a single name, and you can access the values by referring to an index number.&lt;/p&gt;

&lt;p&gt;Access the Elements of an Array:&lt;br&gt;
You refer to an array element by referring to the index number.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Get the value of the first array item:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = cars[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Adding Array Elements:&lt;/strong&gt;&lt;br&gt;
You can use the append() method to add an element to an array.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Add one more element to the cars array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cars.append("Honda")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Removing Array Elements:&lt;/strong&gt;&lt;br&gt;
You can use the pop() method to remove an element from the array.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Delete the second element of the cars array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cars.pop(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use the remove() method to remove an element from the array.&lt;br&gt;
Example&lt;br&gt;
Delete the element that has the value "Volvo":&lt;br&gt;
&lt;strong&gt;cars.remove("Volvo")&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>python</category>
    </item>
    <item>
      <title>Join me at AWS re:Invent - Level Up as a Developer and Software Engineer with me - DAY 1</title>
      <author>Brian H. Hough</author>
      <pubDate>Mon, 29 Nov 2021 17:43:12 +0000</pubDate>
      <link>https://dev.to/aws-builders/join-me-at-aws-reinvent-level-up-as-developer-and-software-engineer-with-me-day-1-292e</link>
      <guid>https://dev.to/aws-builders/join-me-at-aws-reinvent-level-up-as-developer-and-software-engineer-with-me-day-1-292e</guid>
      <description>&lt;p&gt;I have an exciting announcement friends!! I just touched down in Las Vegas for day 1 of AWS' re:Invent 2021 conference 🌄 and I cannot wait to share this week's exciting updates, announcements, learnings, and opportunities to level up in cloud computing, serverless, and DevOps with you all. &lt;/p&gt;

&lt;p&gt;In this episode of the &lt;a href="https://www.youtube.com/watch?v=kJV-OD_VAJk" rel="noopener noreferrer"&gt;Tech Stack Playbook&lt;/a&gt;, I'll be sharing more about AWS re:Invent - the year's largest global tech conference that brings together leaders, builders, innovators, and creators from cloud, DevOps, serverless, app development, and software engineering from all around the world. I was so fortunate to win an All Builders Grant to attend this year's event, so thank you SO much AWS for this incredible opportunity. 🎉 &lt;/p&gt;

&lt;p&gt;In this blog post and the blog posts to come this week, my hope is to vlog through the entire week and share all that I'm learning and building with you all so whether you are attending virtually or in person, this AWS re:Invent series on the Tech Stack Playbook will help you gain skills, level up in tech, and boost your software engineering abilities from the sessions I'm attending throughout the conference.&lt;/p&gt;

&lt;p&gt;Here’s a glance at what you’ll learn in this blog post:&lt;br&gt;
👉  What AWS re:Invent is all about&lt;br&gt;
👉  Traveling to Las Vegas for the year's largest tech conference&lt;br&gt;
👉  What I'll be learning about and building this week&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kJV-OD_VAJk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's going to be a major week for cloud and tech in general, so I am so excited to bring you along for the ride.&lt;/p&gt;

&lt;p&gt;What do you want to know about AWS, serverless, and DevOps? 💭&lt;/p&gt;

&lt;p&gt;Let me know in the comments below! ⬇️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-out-the-full-recording-below"&gt;
  &lt;/a&gt;
  Check out the full recording below:
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kJV-OD_VAJk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know if you found this post helpful! And if you haven't yet, make sure to check out these free resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Follow my Instagram for more: &lt;a href="https://instagram.com/brianhhough" rel="noopener noreferrer"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Watch my latest &lt;a href="https://youtube.com/brianhhough" rel="noopener noreferrer"&gt;YouTube video for more&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Listen to my Podcast on &lt;a href="https://podcasts.apple.com/us/podcast/tech-stack-playbook/id1553712082" rel="noopener noreferrer"&gt;Apple Podcasts&lt;/a&gt; and &lt;a href="https://open.spotify.com/show/01bHbabSyBmPfbc3ORMZa9?si=av_16aPbQEqL_bVu3RnO0g" rel="noopener noreferrer"&gt;Spotify&lt;/a&gt;&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join my FREE &lt;a href="https://facebook.com/groups/techstackplaybook" rel="noopener noreferrer"&gt;Tech Stack Playbook Facebook Group&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's digitize the world together! 🚀&lt;/p&gt;

&lt;p&gt;-- Brian&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to create a sleek "baseline" animation in CSS under 15 lines of code</title>
      <author>ManuTheCoder</author>
      <pubDate>Mon, 29 Nov 2021 17:24:26 +0000</pubDate>
      <link>https://dev.to/manuthecoder/how-to-create-a-sleek-baseline-animation-in-css-under-15-lines-of-code-386o</link>
      <guid>https://dev.to/manuthecoder/how-to-create-a-sleek-baseline-animation-in-css-under-15-lines-of-code-386o</guid>
      <description>&lt;p&gt;Off late, I've been obsessed with this trend in web pages. I saw this animation in Canva. Here's how to make it: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;Let's create some HTML. We'll need a &lt;code&gt;span&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello, World!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;Let's create some CSS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;-apple-system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;BlinkMacSystemFont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;"Segoe UI"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Oxygen-Sans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Ubuntu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Cantarell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1.04&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;140%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Just for basic styles */&lt;/span&gt;
&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#37474f&lt;/span&gt;
  &lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explained&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;&lt;/code&gt; - This is just for fancy stuff&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;display: inline-block;&lt;/code&gt; - We'll need this to animate the transform property&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@keyframes baseline&lt;/code&gt; - This is the defined animation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;overflow:hidden&lt;/code&gt; - Hides the overflow of the header&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great! You've successfully made a baseline CSS animation. Hit the ❤️ button if you liked this post!&lt;br&gt;
Demo: &lt;a href="https://jsfiddle.net/ManuTheCoder/xao1s6kd/68/"&gt;https://jsfiddle.net/ManuTheCoder/xao1s6kd/68/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React Tips &amp; Tricks: Uploading a File With A Progress Bar</title>
      <author>JB </author>
      <pubDate>Mon, 29 Nov 2021 17:18:03 +0000</pubDate>
      <link>https://dev.to/jbrocher/react-tips-tricks-uploading-a-file-with-a-progress-bar-3m5p</link>
      <guid>https://dev.to/jbrocher/react-tips-tricks-uploading-a-file-with-a-progress-bar-3m5p</guid>
      <description>&lt;p&gt;Forms are often tricky to get right with React. While there are great libraries like &lt;a href="https://formik.org/"&gt;formik&lt;/a&gt; or &lt;a href="https://github.com/final-form/react-final-form"&gt;React Final Form&lt;/a&gt; to do the heavy lefting for us, handling file upload still isn't always straightforward. &lt;/p&gt;

&lt;p&gt;In today's episode of React Tips &amp;amp; Tricks, we'll see how to handle and submit file Data, and how to display a progress bar !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-basic-form"&gt;
  &lt;/a&gt;
  A basic Form
&lt;/h2&gt;

&lt;p&gt;Let's say we need to build a form to create blog posts, with an &lt;code&gt;input&lt;/code&gt; for the title, and a &lt;code&gt;textarea&lt;/code&gt; for the body.&lt;/p&gt;

&lt;p&gt;Here's a simple implementation for such a form, using &lt;a href="https://mui.com/"&gt;Material UI&lt;/a&gt; for the basic components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/Box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TextField&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/TextField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;PostData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormValues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Handlers for the input&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleTitleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ChangeEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFormValues&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevFormValues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevFormValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleBodyChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ChangeEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFormValues&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevFormValues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevFormValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt;
      &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;flexDirection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;justifyContent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;alignItems&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;marginY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextField&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleTitleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post Title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;marginY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextField&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleBodyChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;multiline&lt;/span&gt;
          &lt;span class="nx"&gt;minRows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post Body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;marginY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: I'm not using any Form libraries here, as I want to focus on file handling. In a production setting I'd really recommend using somethign like &lt;a href="https://formik.org/docs/api/formik"&gt;Formik&lt;/a&gt; to avoid re-inventing the wheel!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This works like a charm, and renders the following output: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evn24C1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636902278730/212jbOdu_.png%3Fauto%3Dcompress%26auto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evn24C1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636902278730/212jbOdu_.png%3Fauto%3Dcompress%26auto%3Dcompress%2Cformat%26format%3Dwebp" alt="Post Form" width="387" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! But now say we also want to submit an image along with the title and the body, to serve as a cover for the article. This is a bit more complicated as we're not juste maniuplating strings anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-an-image-to-the-post"&gt;
  &lt;/a&gt;
  Adding an image to the post
&lt;/h2&gt;

&lt;p&gt;In order to be able to submit an image, we need to add 3 things to our Form : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A button to upload a file from the client's computer;&lt;/li&gt;
&lt;li&gt;A way to handle the file and store it in the sate;&lt;/li&gt;
&lt;li&gt;A handler to submit our form;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's dive in ! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-the-button"&gt;
  &lt;/a&gt;
  Adding the button
&lt;/h3&gt;

&lt;p&gt;To add a file upload button to the form, we use an &lt;code&gt;input&lt;/code&gt; of type &lt;code&gt;file&lt;/code&gt;, wrapped in a &lt;code&gt;Button&lt;/code&gt; component :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="c1"&gt;//Form.tsx&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;marginY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleBodyChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;multiline&lt;/span&gt;
        &lt;span class="na"&gt;minRows&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Post Body"&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"body"&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"contained"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;hidden&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;marginY&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit Post &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  )
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we leverage the fact that a label (Here rendered as a Button) is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label"&gt;programmatically&lt;/a&gt; linked to its input. Meaning, any click event on our "Button" component will be passed to the hidden input. This trick allows us to display any component we want to the user, while still benefiting fro the built-in file handling system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#controlling-the-component"&gt;
  &lt;/a&gt;
  Controlling the component
&lt;/h3&gt;

&lt;p&gt;For now our input is &lt;a href="https://reactjs.org/docs/uncontrolled-components.html"&gt;uncontrolled&lt;/a&gt;: it's not linked to any state variable, so we can't declaratively use its value when submitting the form. We need to change that : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/YO3icZKE2G8OoGHWC9/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/YO3icZKE2G8OoGHWC9/giphy.gif" alt="Give me Control" width="480" height="400"&gt;&lt;/a&gt;&lt;em&gt;I agree with Dwight!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To control our input, as with a normal input, we need to pass it a handler. This handler uses the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/File"&gt;File API&lt;/a&gt; to retrieve the fiels data we interested in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;PostData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// Add an image attribute&lt;/span&gt;
  &lt;span class="c1"&gt;// to our formData&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormValues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="c1"&gt;// Set up the handler&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleImageChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ChangeEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFormValues&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevFormValues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevFormValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contained&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Upload File&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Bind the handler to the input */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleImageChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;hidden&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when the user uploads an image using our button, the &lt;code&gt;image&lt;/code&gt; attribute will be populated with a File object. This object has a lot of useful&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/File"&gt;properties&lt;/a&gt;, like the name of the file, and its type. We can use them to display the name file currently selected by the user inside our button. Also note that &lt;code&gt;target.files&lt;/code&gt; is an &lt;strong&gt;array&lt;/strong&gt;. Here we're only interested in the first value as we're only uploading one file, but the same method can be used with multiple files !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AmaaGz8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636904350691/JxJAKcamS.png%3Fauto%3Dcompress%26auto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AmaaGz8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636904350691/JxJAKcamS.png%3Fauto%3Dcompress%26auto%3Dcompress%2Cformat%26format%3Dwebp" alt="showing the file name in a button" width="226" height="104"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#form-submission"&gt;
  &lt;/a&gt;
  Form submission
&lt;/h3&gt;

&lt;p&gt;Finally, we need a way to submit the data. For testing purposes I've created a small API in Flask you can find it in the &lt;a href="https://github.com/jbrocher/file-upload-progress-bar"&gt;repository&lt;/a&gt; for this article. It's just a single endpoint that listens for POST requests and returns a 201.&lt;/p&gt;

&lt;p&gt;Now, we can't POST our Data as json because we're want to send a file and json doesn't handle binary data. We need to send &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData"&gt;form-data&lt;/a&gt; instead. We'll use &lt;a href="https://github.com/axios/axios"&gt;axios&lt;/a&gt; to send the request, as it comes in handy to display the progress as we'll see in the next section.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;Alternatively, we could &lt;a href="https://stackoverflow.com/questions/6150289/how-can-i-convert-an-image-into-base64-string-using-javascript"&gt;encode our image in BASE64&lt;/a&gt; and send it as a string in the json payload. Of course in that case we'd also need to decode it in the backend.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ENDPOINT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;multipart/form-data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Several things are happening here : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First we create a new &lt;code&gt;FormData&lt;/code&gt; object;&lt;/li&gt;
&lt;li&gt;Then we add our fomvalues to the data;&lt;/li&gt;
&lt;li&gt;Finally we post it to our endpoint using the correct content headers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#showing-progress"&gt;
  &lt;/a&gt;
  Showing progress
&lt;/h2&gt;

&lt;p&gt;Our form submisssion is working hooray ! But we're not done yet ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/JNrWNUUNZlIhG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/JNrWNUUNZlIhG/giphy.gif" alt="Hooray" width="500" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maybe the image our user will posting are going to be heavy, and maybe we'll do some slow processing server side too. &lt;br&gt;
As it's probably gonna take some times to process the request, we'd like to show a progress bar. &lt;/p&gt;

&lt;p&gt;That's where Axios saves the day! It comes with two built-ins callback hook to process progress data: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;onUploadProgress&lt;/code&gt;: send event during the upload phase;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onDownloadProgress&lt;/code&gt;: during the download phase;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now all we have to do is to create a new state variable to stor the progress value and monitor the requests states ! Might as well write this logic in a custom hook, as&lt;br&gt;
we'll probably want to reuse it later. (It's also easier to read). Here's how this looks :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// hooks.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUploadForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsSuccess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProgress&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uploadForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;multipart/form-data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;onUploadProgress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progressEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progressEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loaded&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;progressEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;setProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;onDownloadProgress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progressEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progressEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loaded&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;progressEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;uploadForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I made the choice to represent the progress as evenly distributed between the uplaod and download steps, but you're free to do as you please ! It all depends on what you &lt;br&gt;
want to display to your users. I've also added &lt;code&gt;success&lt;/code&gt; boolean we can use to do some conditionnal rendering. &lt;/p&gt;

&lt;p&gt;Now all we have to do is use our custom hook to submit the form, and somehow display the progress value! I'm using &lt;a href="https://mui.com/api/linear-progress/"&gt;linear progress&lt;/a&gt; for thatfrom Material UI here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uploadForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUploadForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5000/post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;uploadForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;marginY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LinearProgress&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;determinate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what it looks like : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UeTZTAZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636906969200/aYHOb-Czr.gif%3Fauto%3Dcompress%26auto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UeTZTAZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636906969200/aYHOb-Czr.gif%3Fauto%3Dcompress%26auto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" alt="Progress Bar Demonstration" width="852" height="675"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty neat  !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-round-"&gt;
  &lt;/a&gt;
  Bonus Round !
&lt;/h2&gt;

&lt;p&gt;I thought it would be a nice addition to show how to display a little success message after the bar reach 100%.&lt;/p&gt;

&lt;p&gt;To do so we'll use our &lt;code&gt;isSuccess&lt;/code&gt; indicator. But first well add an artificial pause after the request complete to let he user&lt;br&gt;
admire the progress bar reaching 100%. Otherwise React will merge the states updates and dipslay the success message before the progress bar has finished animating.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//hooks.ts&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uploadForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;setIsSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now using &lt;code&gt;isSuccess&lt;/code&gt; we can conditionnaly render a success message :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;

&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success.main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CheckIcon&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Typography&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Success&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Typography&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LinearProgress&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;determinate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2GpqRre---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636908105155/WSu_9b6N_.gif%3Fauto%3Dcompress%26auto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2GpqRre---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636908105155/WSu_9b6N_.gif%3Fauto%3Dcompress%26auto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" alt="Success message" width="424" height="110"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading-"&gt;
  &lt;/a&gt;
  Thanks for reading !
&lt;/h2&gt;

&lt;p&gt;That's it for today, hope you learned something ! Form handling in React is not easy, as they are so many ways to do it, and so many ways it could go wrong. All the more reason&lt;br&gt;
to keep trying and learning !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hungry for more React tips ?&lt;/strong&gt; ➡️ &lt;a href="https://twitter.com/JiBRocher"&gt;Follow Me on Twitter !&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/File"&gt;File API documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/axios/axios#axios-api"&gt;Axios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mui.com/api/linear-progress/"&gt;Material Linear Progress Bar&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>react</category>
      <category>typescript</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 09: Ada</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Mon, 29 Nov 2021 17:14:07 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-09-ada-34og</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-09-ada-34og</guid>
      <description>&lt;p&gt;Ada is an old programming language created to enforce "safe" programming.&lt;/p&gt;

&lt;p&gt;It is best known for tiny accident when such a "safe" Ada program blew up Ariane 5 rocket in 1996, costing approximately $370m.&lt;/p&gt;

&lt;p&gt;If we take ratio of losses due to programming language issues to number of people coding in a given language, Ada would likely rank as the absolute least safe of all languages. Sure, SQL injections cost $billions, but SQL is used by 10000x as many people as Ada, so an average SQL programmer is doing a lot less damage than an average Ada programmer. If that doesn't prove that TDD is more important than "static safety", then I don't know what will.&lt;/p&gt;

&lt;p&gt;Also, as an old language Ada is fairly difficult to run on modern operating systems, so we'll be using Docker to run it.&lt;/p&gt;

&lt;p&gt;It is named after Ada Lovelace, who is often called a "first programmer", &lt;a href="https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html"&gt;which is a considerable exaggeration&lt;/a&gt;, but let's leave all that historical stuff behind and explore the language itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;

&lt;p&gt;Let's start with &lt;code&gt;hello_world.adb&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ada"&gt;&lt;code&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="nn"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;Hello_World&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;Hello_World&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I couldn't find any compiler running on OSX, we'll run it with Docker:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run --rm -i -t -v $(pwd):/source nacyot/ada-gnat:apt gnatmake hello_world.adb
gcc-4.6 -c hello_world.adb
gnatbind -x hello_world.ali
gnatlink hello_world.ali
$ docker run --rm -i -t -v $(pwd):/source nacyot/ada-gnat:apt ./hello_world
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing that's already notable is &lt;code&gt;end Hello_World&lt;/code&gt;. Yes, Ada, for "safety" reasons, requires every &lt;code&gt;end&lt;/code&gt; to specify what it's ending. I know it sounds like a joke, but people who created Ada were absolutely serious about it. In some cases you're allowed to skip saying what you're ending, but we're trying to write Ada the way it was meant to be written.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;

&lt;p&gt;Here's Fibonacci in Ada:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ada"&gt;&lt;code&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="nn"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;Fibonacci&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Integer&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
  &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;
    &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run --rm -i -t -v $(pwd):/source nacyot/ada-gnat:apt gnatmake fibonacci.adb
gcc-4.6 -c fibonacci.adb
gnatbind -x fibonacci.ali
gnatlink fibonacci.ali
$ docker run --rm -i -t -v $(pwd):/source nacyot/ada-gnat:apt ./fibonacci
 1
 1
 2
 3
 5
 8
 13
 21
 34
 55
 89
 144
 233
 377
 610
 987
 1597
 2584
 4181
 6765
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a lot to unpack here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;where's those extra spaces coming from? Ada thinks it's unsafe to convert &lt;code&gt;7&lt;/code&gt; to &lt;code&gt;"7"&lt;/code&gt;. In some weird idea of consistently since &lt;code&gt;-7&lt;/code&gt; converts to &lt;code&gt;-7&lt;/code&gt;, 7 converts to &lt;code&gt;7&lt;/code&gt; with extra space where plus/minus sign would go.&lt;/li&gt;
&lt;li&gt;at least Ada has loops over ranges like &lt;code&gt;for I in 1..20 loop&lt;/code&gt;, it's baffling people make languages even today which don't have that&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Integer'Image&lt;/code&gt; syntax for function in a package looks really weird, especially since we also have more familiar &lt;code&gt;.&lt;/code&gt; on the same line.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;And finally we get to the FizzBuzz, and it's surprisingly convoluted in Ada. We need to strip that extra space. Well, surely Ada would have strings in its standard library, right? You wish. It its drive for "safety", it provides fixed-width strings only.&lt;/p&gt;

&lt;p&gt;So you can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ada"&gt;&lt;code&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s2"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s2"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But not this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ada"&gt;&lt;code&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s2"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s2"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or even this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ada"&gt;&lt;code&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s2"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s2"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nope, it's not maximum string length (like with SQL &lt;code&gt;varchar&lt;/code&gt; columns), it must literally be exactly the same length.&lt;/p&gt;

&lt;p&gt;Fortunately while local variables are crazy like that, function arguments aren't so we're finally able to write a FizzBuzz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ada"&gt;&lt;code&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="nn"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;FizzBuzz&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;LStrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
  &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;First&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;' '&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;First&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Last&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;LStrip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"FizzBuzz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Fizz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Buzz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LStrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll skip all the minor weirdness like &lt;code&gt;=&lt;/code&gt; for equality check, &lt;code&gt;()&lt;/code&gt; for substring, indexing starting from 1, &lt;code&gt;S'First&lt;/code&gt; and &lt;code&gt;S'Last&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-ada"&gt;
  &lt;/a&gt;
  Should you use Ada?
&lt;/h3&gt;

&lt;p&gt;Only if you're trying to sabotage Blue Origin. Otherwise, no.&lt;/p&gt;

&lt;p&gt;If you're really exceedingly safety-obsessed, there's Rust for you.&lt;/p&gt;

&lt;p&gt;Otherwise, just about any modern properly memory-managed language (so all except C and C++) with decent TDD will do just fine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-09-ada"&gt;Code for the Ada episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ada</category>
      <category>programming</category>
    </item>
    <item>
      <title>CSS Maker: Wizards Toolkit utility</title>
      <author>Alec</author>
      <pubDate>Mon, 29 Nov 2021 17:10:23 +0000</pubDate>
      <link>https://dev.to/alecbsherman/css-maker-wizards-toolkit-utility-2f9e</link>
      <guid>https://dev.to/alecbsherman/css-maker-wizards-toolkit-utility-2f9e</guid>
      <description>&lt;p&gt;Here is a free utility so you can quickly modify existing color themes and easily create brand new color themes using CSS.&lt;/p&gt;

&lt;p&gt;Originally built for Wizards Toolkit and MaterializeCSS, this can easily be modified for &lt;em&gt;&lt;strong&gt;any&lt;/strong&gt;&lt;/em&gt; HTML/CSS library.&lt;/p&gt;

&lt;p&gt;With the use of JScolor and some fancy JavaScript you can see your color choices change the page in real-time.  The HTML page is built to show all the major elements we use of MaterializeCSS.&lt;/p&gt;

&lt;p&gt;For the video/visual version of this information see:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t4o8vOx_j80"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The basic concept is your library will have a core CSS file.  For us that’s materialize.css.  Using variables with Cascading Style Sheets is extremely powerful.  We want to override their default colors in a way that affects all the many HTML elements.&lt;/p&gt;

&lt;p&gt;So we created a wtkGlobal.css file with the global overrides.  We wanted both a Light theme and a Dark theme option so we also created a wtkLight.css and wtkDark.css.&lt;/p&gt;

&lt;p&gt;Next we wanted to overlay different color themes.  So we created wtk{SomeColorName}.css files which are nothing but a set of CSS variables.  By listing them in this order in your HTML it properly sets up everything.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;materialize.min.css (or whatever CSS framework you are using)&lt;/li&gt;
&lt;li&gt;wtk{YourColor}.css&lt;/li&gt;
&lt;li&gt;wtkLight.css or wtkDark.css&lt;/li&gt;
&lt;li&gt;wtkGlobal.css&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this utility allows you to pick any of the CSS files in the folder and see how the page will look.  This requires the CSS file to start with 'wtk' and excludes our wtkLight, wtkDark and wtkGlobal files.  You can then modify each of the main color types and see immediately what the effect is in both Light and Dark mode.  Once you have designed a color theme you like you can save it.&lt;/p&gt;

&lt;p&gt;I also created a page on the web where you can build color themes and have the CSS shown in a browser tab for you to "Save As".  The below link provides you access to this page plus all the source code and all our WTK CSS files.&lt;/p&gt;

&lt;p&gt;For full usage this utility requires PHP (but to use the online website does not).  With that you’ll be able to easily modify it for other HTML/CSS libraries like Bootstrap or whatever you’re using.  Of course any good coder can easily modify this code to work with other languages and still benefit from the JScolor and JavaScript coding for testing and making new CSS color templates.&lt;/p&gt;

&lt;p&gt;Download the free utility at:&lt;br&gt;
&lt;a href="https://wizbits.me/CSSmaker"&gt;https://wizbits.me/CSSmaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That page will also send you a link where you can generate CSS color themes without needing PHP.&lt;/p&gt;

&lt;p&gt;Brought to you by Wizards Toolkit the PHP, SQL and JavaScript low-code development library.&lt;/p&gt;

&lt;p&gt;Wizards Toolkit&lt;br&gt;
&lt;a href="https://wizardstoolkit.com"&gt;https://wizardstoolkit.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MaterializeCSS&lt;br&gt;
&lt;a href="https://materializecss.com"&gt;https://materializecss.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JScolor&lt;br&gt;
&lt;a href="https://jscolor.com"&gt;https://jscolor.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>php</category>
      <category>webdev</category>
    </item>
    <item>
      <title>LeetCode WalkThru: 'MoveZeros'</title>
      <author>Adriana DiPietro</author>
      <pubDate>Mon, 29 Nov 2021 17:09:36 +0000</pubDate>
      <link>https://dev.to/am20dipi/leetcode-walkthru-movezeros-4ocb</link>
      <guid>https://dev.to/am20dipi/leetcode-walkthru-movezeros-4ocb</guid>
      <description>&lt;p&gt;☁️ Hello Everyone ☁️&lt;/p&gt;

&lt;p&gt;This is the second installment of my series &lt;strong&gt;LeetCode WalkThru&lt;/strong&gt;. Today, we will be working from beginning to end to solve LeetCode's 'MoveZeros' problem. &lt;/p&gt;

&lt;p&gt;To get started, here is the &lt;a href="https://leetcode.com/problems/move-zeroes/"&gt;link&lt;/a&gt; to the challenge. Pull it up on your end and let's get started. &lt;/p&gt;

&lt;p&gt;☁️☁️☁️&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#breaking-down-the-instructions"&gt;
  &lt;/a&gt;
  Breaking Down the Instructions
&lt;/h2&gt;

&lt;p&gt;On the left-hand menu, LeetCode provides some instructions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Given an integer array "nums", 
move all 0's to the end of it 
while maintaining the relative 
order of the non-zero elements.

Note that you must do this in-place 
without making a copy of the array.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From these instructions we can deduce a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;"nums" is an array of integers&lt;/li&gt;
&lt;li&gt;Input = array&lt;/li&gt;
&lt;li&gt;Output = array&lt;/li&gt;
&lt;li&gt;We must maintain the order of the rest of the array items whose values do not equal 0.&lt;/li&gt;
&lt;li&gt;All zeroes, from array "nums", must be at the end of the array.&lt;/li&gt;
&lt;li&gt;We cannot make a copy of the array nums.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#looking-at-some-examples"&gt;
  &lt;/a&gt;
  Looking at Some Examples
&lt;/h2&gt;

&lt;p&gt;Here is an example input and output provided by LeetCode also on their left-hand menu:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see in this example, all of the zeroes are moved to the end of the array and the order of the remaining array items (1, 3, 12) do not switch order in relation to each other. They definitely move indices in relation to the array, but they remain ordered. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-can-we-approach-this"&gt;
  &lt;/a&gt;
  How Can We Approach This?
&lt;/h2&gt;

&lt;p&gt;Now that we know what output we are seeking, how can we approach this?&lt;/p&gt;

&lt;p&gt;Personally, and I know I've said this before, when I see the data structure "array" as an input, I automatically gear to "iteration". I do so because I want access to each element of the array, whether it is a zero or not. &lt;/p&gt;

&lt;p&gt;So, once I have iterated and retain access to each array item, I want to comb through the results to see which array item's values equal 0. And then I want to ask myself, &lt;strong&gt;if&lt;/strong&gt; an array item's value is 0, then I want to do something specifically; &lt;strong&gt;else&lt;/strong&gt; I want to do something different. &lt;/p&gt;

&lt;p&gt;Yep -- you guessed it. We want to consider using an &lt;strong&gt;if else&lt;/strong&gt; statement or something that promotes the same results -- a ternary, for example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remember this is your coding solution. Do what makes sense to you and what you like!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, at the end I either want to return the modified array with all the zeros at the back or return some sort of error message in case our input does not align with the criteria. &lt;/p&gt;

&lt;p&gt;Let's put this plan into action!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#approach-solution"&gt;
  &lt;/a&gt;
  Approach + Solution
&lt;/h2&gt;

&lt;p&gt;I am going to start by declaring a function called "moveZeroes" which takes in an array, "nums" as a parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;moveZeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our function foundation laid, let's also lay out the foundation for iteration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;moveZeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;strong&gt;for loop&lt;/strong&gt; takes a few conditions within its parentheses. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; "let i = 0" -- Executed once &lt;strong&gt;before&lt;/strong&gt; the execution of what is in the code block. Here we are declaring and assigning a variable "i" to the value of 0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; "i &amp;lt; nums.length" -- Defines the condition to be considered while executing the code block -- meaning run the code block until this condition is no longer true. While the value of "i" is less than the array's length; run the code block. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt;    "i++" -- Executed (every time) after the code block has run through. Here we are incrementing "i". We are saying move onto the next array item after the execution of the previous array item.  &lt;/p&gt;

&lt;p&gt;This is the standard, and maybe the most common way to see "for loops" in JavaScript. Like I have said before, this ensures that we can access each array item of array "nums". &lt;/p&gt;

&lt;p&gt;You may have noticed I used the term "code block" a few times above. Code block refers to the code written between the braces of the for loop. The code block enacts whatever we want to each array item. &lt;/p&gt;

&lt;p&gt;Accordingly, for our code block we want to do a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Declare and assign each array item to a variable.&lt;/li&gt;
&lt;li&gt;Declare and assign each array item's index to a variable. &lt;/li&gt;
&lt;li&gt;Remove an array item's whose values are "0". &lt;/li&gt;
&lt;li&gt;Push all of the zeros to the end of the array. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below is what this may look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;moveZeroes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// Declare variable "item" to each array item&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;// Declare variable "index" to each array item's index&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Using an if statement, pass in a condition of "item === 0"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="c1"&gt;// If the array item's value is equal to 0, use "splice" to remove that (1) array item at its index. &lt;/span&gt;
      &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// Then re-add the item to the end of the array using "push"&lt;/span&gt;
      &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we need something to return. Since the instructions said clearly not to create a copy of the array -- and honestly, our code does not call for that, we can just return the "nums" array. &lt;/p&gt;

&lt;p&gt;Our final code looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;moveZeroes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// Declare variable "item" to each array item&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;// Declare variable "index" to each array item's index&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Using an if statement, pass in a condition of "item === 0"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="c1"&gt;// If the array item's value is equal to 0, use "splice" to remove that (1) array item at its index. &lt;/span&gt;
      &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// Then re-add the item to the end of the array using "push"&lt;/span&gt;
      &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#testing-our-solution"&gt;
  &lt;/a&gt;
  Testing Our Solution
&lt;/h2&gt;

&lt;p&gt;Here are some test examples to try within your code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [0, 1, 2, 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [-33, 100, 12, 0000]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [1, 2, 4, 66, 99]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [1, 'a', 4, 0, 12]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Now, remember there are many ways to attempt to solve a coding challenge. This article is highlighting just &lt;strong&gt;one of many&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;REMEMBER:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make your code readable.&lt;/li&gt;
&lt;li&gt;Make your code scalable.&lt;/li&gt;
&lt;li&gt;Check for "edgecases".&lt;/li&gt;
&lt;li&gt;Code in a way that makes sense to you. &lt;/li&gt;
&lt;li&gt;Keep trying.&lt;/li&gt;
&lt;li&gt;Keep learning.&lt;/li&gt;
&lt;/ol&gt;







&lt;p&gt;Thank you for reading + coding along with me. Please feel free to leave comments, questions or suggestions below. Please be kind and patient with everyone as we are always learning. &lt;/p&gt;

&lt;p&gt;☁️☁️☁️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Bulding a Talwind CSS dark mode switcher using Flowbite</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Mon, 29 Nov 2021 17:05:25 +0000</pubDate>
      <link>https://dev.to/zolidev/bulding-a-talwind-css-dark-mode-switcher-5g9</link>
      <guid>https://dev.to/zolidev/bulding-a-talwind-css-dark-mode-switcher-5g9</guid>
      <description>&lt;p&gt;Disclaimer: this tutorial uses examples from the official Flowbite documentation's &lt;a href="https://flowbite.com/docs/customize/dark-mode/"&gt;dark mode guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Offering a dark version for your website is more of an expected feature rather than a nice to have nowadays. Luckily, Tailwind CSS has a dark mode functionality enabled and the components from Flowbite also support it by using the "class" option.&lt;/p&gt;

&lt;p&gt;Learn how to enable and build a &lt;a href="https://flowbite.com/docs/customize/dark-mode/"&gt;dark version switcher for Tailwind CSS and Flowbite&lt;/a&gt; by using JavaScript and the configuration file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#toggle-dark-mode-manually"&gt;
  &lt;/a&gt;
  Toggle dark mode manually
&lt;/h2&gt;

&lt;p&gt;All you need to do to enable dark mode for your Tailwind CSS project and Flowbite components is to add the following code inside your &lt;code&gt;tailwind.config.js&lt;/code&gt; file and then add the &lt;code&gt;dark&lt;/code&gt; class on your &lt;code&gt;html&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, you can also just use the "media" option to automatically set the dark or light theme based on the browser's color scheme preference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;media&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dark-mode-switcher"&gt;
  &lt;/a&gt;
  Dark mode switcher
&lt;/h2&gt;

&lt;p&gt;If you want to create a dark mode switcher for Tailwind CSS and Flowbite you'll have to add some JavaScript code and a toggle element that a user can use to change their preferences.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Toggle dark mode by checking user preference in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of your HTML:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// On page load or when changing themes, best to add inline in `head` to avoid FOUC&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will first check if you've previously set the theme color preference manually using the local storage and as a fallback it will either set the dark or light mode based on your browser color scheme preference.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element that can be interacted with to manually change the theme color:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"theme-toggle"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"theme-toggle-dark-icon"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-5 h-5 hidden"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 20 20"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"theme-toggle-light-icon"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-5 h-5 hidden"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 20 20"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"&lt;/span&gt; &lt;span class="na"&gt;fill-rule=&lt;/span&gt;&lt;span class="s"&gt;"evenodd"&lt;/span&gt; &lt;span class="na"&gt;clip-rule=&lt;/span&gt;&lt;span class="s"&gt;"evenodd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we used a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; component where we change the icon inside based on the current color scheme.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the following JavaScript inside your main file to handle the click events on the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;themeToggleDarkIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme-toggle-dark-icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;themeToggleLightIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme-toggle-light-icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Change the icons inside the button based on previous settings&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;themeToggleLightIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;themeToggleDarkIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;themeToggleBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme-toggle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;themeToggleBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// toggle icons inside button&lt;/span&gt;
    &lt;span class="nx"&gt;themeToggleDarkIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;themeToggleLightIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// if set via local storage previously&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// if NOT set via local storage previously&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This script changes the icon inside the button based on previous preferences and also handles the click events by setting the dark mode preference using local storage and also adding or removing the &lt;code&gt;dark&lt;/code&gt; class from the main &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-component-library"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS component library
&lt;/h2&gt;

&lt;p&gt;This dark mode switcher is part of a larger open source component library built with Tailwind CSS called Flowbite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sB3FIxZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itzxfhelcifuo317mhh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sB3FIxZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itzxfhelcifuo317mhh2.png" alt="Flowbite - Tailwind CSS components" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can learn more about this &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Tailwind CSS component library&lt;/a&gt; by checking out the official Flowbite documentation.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>op</category>
    </item>
    <item>
      <title>Note Catch-up</title>
      <author>loren-michael</author>
      <pubDate>Mon, 29 Nov 2021 16:57:40 +0000</pubDate>
      <link>https://dev.to/lorenmichael/note-catch-up-35g3</link>
      <guid>https://dev.to/lorenmichael/note-catch-up-35g3</guid>
      <description>&lt;p&gt;Over the Thanksgiving holiday I traveled and didn't have access to my desktop computer (I know, I know - who has a desktop anymore?) so I spent a little bit of time going back through some lessons and making notes using VSC. It helped my understanding tremendously to go back and type functions out myself. Running the notes is not possible, because I like to practice and see the progression of functions and sometimes that involves assigning the same variable multiple times. But these notes are not meant to be functional, they are meant to give me a well organized way to return to a concept and review it quickly.&lt;/p&gt;

&lt;p&gt;I highly recommend making files of notes as you're learning, it helps quite a bit with the more complicated concepts.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>flatiron</category>
    </item>
    <item>
      <title>Setting up VS Code for beginners</title>
      <author>Haris#</author>
      <pubDate>Mon, 29 Nov 2021 16:46:59 +0000</pubDate>
      <link>https://dev.to/harishash/setting-up-vs-code-for-beginners-4m03</link>
      <guid>https://dev.to/harishash/setting-up-vs-code-for-beginners-4m03</guid>
      <description>&lt;p&gt;VS code editor has arguably become the most popular tool for development. It is no doubt powerful, easy to get along with and very light. Customizing VS Code according to your needs and work can bring a massive difference in the performance of your development. But the question remains - Does it even matter how the code editor looks? Because after all it’s just a tool to get the job done. I personally think attention to details is very important, as a good looking working space or even a tool can greatly influence productivity. If I like how it looks, I’ll probably enjoy writing code even more. Also, for how long can you look at the same editor, I bet you get bored looking at the same thing all the time. &lt;/p&gt;

&lt;p&gt;So, in today’s article, I’ll present to you my top preferences to customize VS Code editor for maximum efficiency.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#theme"&gt;
  &lt;/a&gt;
  Theme
&lt;/h1&gt;

&lt;p&gt;Customizing themes according to your preference in VS Code is very well known in the dev community. Here are a few of my favourites that you can find and use for free through its marketplace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#andromeda"&gt;
  &lt;/a&gt;
  Andromeda:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ccoZohJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um71pdc2w19sdmg6drtb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ccoZohJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um71pdc2w19sdmg6drtb.png" alt="Andromeda VS Code extension" width="880" height="161"&gt;&lt;/a&gt;Andromeda is for devs who want to combine art with programming. It has one of the best UI with vibrant colors, dark background, etc. It has vivid colors and high saturation but if you like your interface to be minimal this is not the right choice for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=EliverLara.andromeda"&gt;Try Andromeda&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monokai-pro"&gt;
  &lt;/a&gt;
  Monokai Pro:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MMFulIXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wryi4hag52bci4q9yl6m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MMFulIXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wryi4hag52bci4q9yl6m.png" alt="Monokai Pro VS Code extension" width="880" height="160"&gt;&lt;/a&gt;Monokai Pro is undoubtedly a professional visual studio code theme that comes with colors. This is the one I use the most as I love colors and I’m one of those devs who love to have a plethora of colors to play with while coding. Monokai Pro is colorful but you won’t get overwhelmed with colors. So, it is bright, clean, and perfect to code on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=monokai.theme-monokai-pro-vscode"&gt;Try MonoKai Pro&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abyss"&gt;
  &lt;/a&gt;
  Abyss:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XXtYnlpN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shsvw2pxa4b7iq2njxas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXtYnlpN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shsvw2pxa4b7iq2njxas.png" alt="Abyss VS Code extension" width="880" height="164"&gt;&lt;/a&gt;This is one of the most underrated themes but I enjoy using it for some reason. This is literally like art. Very eye pleasing caring colors which fantastically classify semantics of the code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=gerane.Theme-Abyss"&gt;Try Abyss&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#material-icons"&gt;
  &lt;/a&gt;
  Material Icons:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nv3ExbJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9pp2xwnmwthx4ff3qlc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nv3ExbJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9pp2xwnmwthx4ff3qlc.png" alt="Material icons VS Code icons extension" width="880" height="164"&gt;&lt;/a&gt;I recommend it to anyone who would like their VS Code workspace to look modern, spiced up, and professional. It helps me instantly find folders without any issue and looks beautiful. Best theme for highlighting important project directories. This is the only Icon theme I’ve used and I’m enjoying it so far. Let me know your favourites down in comments and I'll give them a try.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Try Material Icons&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  Fonts
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#fira-code"&gt;
  &lt;/a&gt;
  Fira Code:
&lt;/h2&gt;

&lt;p&gt;Fonts depend on personal taste. If you’re been writing code for years there is a chance that you might not want to change but for beginners it’s common to experiment and set one for yourself. Fira is one of my favourite fonts when it comes to coding as it makes it easy for me to read the code.&lt;br&gt;
&lt;a href="https://fonts.google.com/specimen/Fira+Code"&gt;Get Fira Code&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monoid-font"&gt;
  &lt;/a&gt;
  Monoid font:
&lt;/h2&gt;

&lt;p&gt;Another favourite font is Monoid as it has extra-large punctuation marks and operators, apertures are large to help make characters more distinguishable, and ascenders and descenders are kept short and because it’s open source you can even tweak it to your tastes if you like.&lt;br&gt;
&lt;a href="https://larsenwork.com/monoid/"&gt;Get Monoid&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hack-font"&gt;
  &lt;/a&gt;
  Hack Font:
&lt;/h2&gt;

&lt;p&gt;Last but not the least, Hack. This is not the best but I like this font because it’s easy to read and is easily distinguishable.&lt;br&gt;
&lt;a href="https://sourcefoundry.org/hack/"&gt;Get Hack&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w8tQrjAy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z8d262we33os2q6s5k0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w8tQrjAy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z8d262we33os2q6s5k0.png" alt="Prettier VS Code extension" width="880" height="139"&gt;&lt;/a&gt;It is a tool that automatically makes your code more readable and consistent with your project's style guide. Prettier also integrates with your editor, so your code is tidied up every time you save your changes.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Try Prettier&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blox"&gt;
  &lt;/a&gt;
  blox:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wqi9Sp1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gpq1agbfcaij91qsmkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wqi9Sp1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gpq1agbfcaij91qsmkd.png" alt="blox VS Code extension" width="880" height="139"&gt;&lt;/a&gt;blox is another extension that I prefer as a beginner because it lets you drop code snippets. It’s aimed at fast tracking the developer workflow through the ease of adding pre-built UI components without leaving your VS code window.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=vsblox.blox"&gt;Try blox&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-preview"&gt;
  &lt;/a&gt;
  Live Preview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4D_IuLXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qntx47rzcn6c7mzrrkt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4D_IuLXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qntx47rzcn6c7mzrrkt.png" alt="Live Preview VS Code extension" width="880" height="139"&gt;&lt;/a&gt;Instead of switching between tabs/desktops everytime I want to see a change, Live preview hosts a local server where you can preview your web projects inside VS code. It has many preview features including HTML file previewing, Embedded preview, Persistent Server task with server Logging, External browser Previewing &amp;amp; Debugging, Console Output Channel, Workspace-less Previewing, and Multi-root Support.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server"&gt;Try Live Preview&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;So this wraps up my top picks to set up Visual Studio Code for Beginners. Let me know your favourite picks down in the comments. Hope y'all enjoy this article too.&lt;/p&gt;

&lt;p&gt;Happy Developing!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>vscode</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Semantics, Not Syntax; Developer empowerment using functional-first programming</title>
      <author>Kirk Shillingford</author>
      <pubDate>Mon, 29 Nov 2021 16:35:42 +0000</pubDate>
      <link>https://dev.to/kirkcodes/semantics-not-syntax-developer-empowerment-using-functional-first-programming-45oo</link>
      <guid>https://dev.to/kirkcodes/semantics-not-syntax-developer-empowerment-using-functional-first-programming-45oo</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;"It's not about syntax; it's about semantics."&lt;/em&gt; - &lt;a href="https://twitter.com/rtfeldman"&gt;Richard Feldman&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This article is just a collection of my thoughts concerning my favourite languages and why I enjoy them. For the most part, I think software developers operate like artists; our attachment or reluctance to different technologies is heavily influenced by recency, emotional connection, and personal association. We like the things we like, not necessarily the things that are "correct" if there is even some correct to be.&lt;/p&gt;

&lt;p&gt;However, in recent times I've seen a few languages spark joy for myself and other developers, and I have spent some time contemplating why that is the case; what makes these (seemingly disparate and unrelated) languages all seem to inspire the same type of zeal and interest in their users.&lt;/p&gt;

&lt;p&gt;That seeming disparity is essential. Rust, Elixir, f#, and Go could never be mistaken for each other, yet their advocates' &lt;em&gt;emotional&lt;/em&gt; response feels familiar. And in between the various quirks of function definition, platforms, object definitions, etc., there seems to be some more fantastic design ethic that draws people in.&lt;/p&gt;

&lt;p&gt;So I'd like to surface some of the ones that I've noticed and maybe explain a bit of &lt;em&gt;why&lt;/em&gt; I think they matter to us.&lt;/p&gt;

&lt;p&gt;Note: I'll be using examples from a tiny &lt;a href="https://github.com/tkshill/FSnake/blob/master/src/Snake.fs"&gt;implementation&lt;/a&gt; of the Snake Game I wrote in &lt;a href="https://fsharp.org/"&gt;F#&lt;/a&gt; here because the language exemplifies pretty much all the things I'll be speaking about today. Also, I like it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#immutability-as-default"&gt;
  &lt;/a&gt;
  Immutability as Default
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/JSjiaBMFpyrQ66VfdP/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/JSjiaBMFpyrQ66VfdP/giphy.gif" alt="gif about hating changes" width="500" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I had to put forth the single most powerful of these language semantics to influence and improve the type of programs we write, it would have to be the &lt;em&gt;decision&lt;/em&gt; to make values &lt;strong&gt;not&lt;/strong&gt; alterable by default.&lt;/p&gt;

&lt;p&gt;I say value here, not variable, because, of course, if a value cannot be mutated once initialised, it's not varying at all now. But the concept of variables seems so fundamentally baked into what programming means that the idea of working without them seems inconceivable. What does it mean to program with variables? &lt;/p&gt;

&lt;p&gt;To the computer, not much. Under the hood, languages that leverage immutability become the same variables and spaces in memory that we've become used to. But to the developer, it's a &lt;strong&gt;big deal&lt;/strong&gt; to be able to make guarantees that data can only ever be what you defined it to be the &lt;em&gt;first&lt;/em&gt; time. And if you want something new, you can use the first thing as a template for the new thing, but they are not the same.&lt;/p&gt;

&lt;p&gt;Let's look at an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;
&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StructAttribute&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Game&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Status&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;advance&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;AlreadyOver&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;EatsFood&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;newSnake&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updateSnake&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Snake&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;newFood&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createFood&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newSnake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;newSnake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newSnake&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newFood&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have the core data type for our Snake implementation, the type &lt;code&gt;Game&lt;/code&gt;, a record/object with fields Food of a kind &lt;code&gt;Food&lt;/code&gt;, Snake of type &lt;code&gt;Snake&lt;/code&gt;, Size of type &lt;code&gt;int&lt;/code&gt; and Status of type &lt;code&gt;Status&lt;/code&gt;. We'll learn what those types are a little later in the article, but what I want to focus on right now is a snippet of the &lt;code&gt;advance()&lt;/code&gt; function shown below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;advance()&lt;/code&gt; is a function that accepts a game and returns a game. I've trimmed away most of the implementation but kept the portion where advance has determined the snake has eaten a piece of food.&lt;/p&gt;

&lt;p&gt;Let's look at the order of operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;let newSnake = updateSnake game.Snake true&lt;/code&gt; is used to create a new snake based on the state of the old one.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;let newFood = createFood game.Size (newSnake.Head:: newSnake.Tail)&lt;/code&gt; creates a &lt;em&gt;new&lt;/em&gt; piece of food by passing in the size of the grid and our new snake.&lt;/li&gt;
&lt;li&gt;Finally we return &lt;code&gt;{ game with Snake = newSnake; Food = newFood }&lt;/code&gt;. Now, this &lt;em&gt;looks&lt;/em&gt; very much like a stateful update. It is changing the game fields to these new values. But what it's doing is &lt;em&gt;making a new record&lt;/em&gt;, using the values from the old game, but with these new changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The old game was unmodified. The game returned is an entirely different value. But &lt;strong&gt;the semantics of the language make it cheap, efficient, and sensible to produce new values.&lt;/strong&gt; So we don't have to worry about actions later accidentally mutating previous values.&lt;/p&gt;

&lt;p&gt;It's essential to think about this last part. It's not that we &lt;em&gt;can't&lt;/em&gt; program like this in other languages. It's just that their semantics make it less worthwhile. It's harder to track when you're mutating or not. Idiomatic methods and functions in those languages mutate. There could be a performance overhead for making new values too often. These are all &lt;em&gt;semantic barriers&lt;/em&gt; to using immutable values and disempowering the developer from this programming style, leading to more precarious code.&lt;/p&gt;

&lt;p&gt;In languages like F# and &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;, the &lt;code&gt;mutable&lt;/code&gt; keyword is an intentional indicator to the language that you intend to modify a value. In languages like &lt;a href="https://elm-lang.org/"&gt;Elm&lt;/a&gt;, you cannot do mutation at all. But either way, it makes the programmer much more &lt;em&gt;thoughtful&lt;/em&gt; about how they change states in their code. And in the field of software development, &lt;strong&gt;thoughtfulness matters&lt;/strong&gt;*.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-default-nulls"&gt;
  &lt;/a&gt;
  No Default Nulls
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ZCCERtxEH01ksB2tXu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ZCCERtxEH01ksB2tXu/giphy.gif" alt="gif of being disappointed by nothing" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won't spend too much time on this one since many, many people have expounded on the &lt;a href="https://hinchman-amanda.medium.com/null-pointer-references-the-billion-dollar-mistake-1e616534d485"&gt;dangers&lt;/a&gt; of &lt;a href="https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/"&gt;null&lt;/a&gt; &lt;a href="https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/"&gt;values&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Suffice to say, it is difficult to &lt;strong&gt;trust&lt;/strong&gt; types, typing, and functions itself in languages that do not or cannot guarantee that the function will return the type you expect, and perhaps more importantly, do not enforce that you write operations that &lt;em&gt;return&lt;/em&gt; the types you say they do.&lt;/p&gt;

&lt;p&gt;It's OK to have a function that returns &lt;code&gt;Some value&lt;/code&gt; or &lt;code&gt;Nothing&lt;/code&gt;. That's a semantically correct logical operation. Sometimes things fail. What's &lt;strong&gt;not&lt;/strong&gt; fine is if language &lt;em&gt;inserts&lt;/em&gt; a null value because you &lt;em&gt;forgot&lt;/em&gt; to return a value at all operation paths in your function. It's hard to write and use code that you cannot trust. It's hard to read and follow docs if every function can &lt;em&gt;not&lt;/em&gt; return the value it's supposed to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;changeDirection&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="n"&gt;proposedChange&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;proposedChange&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Perpendicular&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Snake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Direction&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Snake&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Direction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proposedChange&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function, &lt;code&gt;changeDirection&lt;/code&gt;, is responsible for changing the way the snake is moving. It has some guard logic for making sure the snake's direction can only change &lt;em&gt;perpendicularly&lt;/em&gt;. A snake moving up can either go left or right, but it can't, for example, reverse back into itself.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;| _ -&amp;gt; game&lt;/code&gt; is the default case for our match (switch) statement where we return the game that came in unchanged. And F# will complain if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We forget the default (or fail to account for all possible shapes of the input)&lt;/li&gt;
&lt;li&gt;We return anything but a game from this function at any point. It won't compile unless we &lt;em&gt;tell&lt;/em&gt; it that this function could return a game or something else. But then, everywhere we call this function, we would have to deal with the fact that it &lt;em&gt;might&lt;/em&gt; return a game or it might not. All our inputs have to match our outputs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that means if I say a function returns an &lt;code&gt;int&lt;/code&gt;, the language itself will ensure I'm not lying, and I'd rather not be a liar.&lt;/p&gt;

&lt;p&gt;Almost every language I know created in the last decade does not have default nullability on its functions and objects. What was meant as a convenience turned out to be a detriment, and it turns out developers prefer living without it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brevity"&gt;
  &lt;/a&gt;
  Brevity
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/X9jbyxzhco1JmR2AsR/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/X9jbyxzhco1JmR2AsR/giphy.gif" alt="gif of a short person being annoyed" width="480" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have &lt;em&gt;many&lt;/em&gt; thoughts on brevity. So many thoughts. I can't write them all because there's something wrong with not being brief about being brief.&lt;/p&gt;

&lt;p&gt;So, briefly,&lt;/p&gt;

&lt;p&gt;Programming languages and paradigm popularity ebbs and wanes. But nothing truly goes away. In the 90s and aughts, we saw C#, C++, and Java in maybe their heyday as the language &lt;em&gt;du jour&lt;/em&gt; of software development. Many times, it has been posited that the rise of &lt;em&gt;dynamic&lt;/em&gt; languages like python, ruby, and javascript was a direct response to developers feeling the friction of the overhead of the enterprise languages.&lt;/p&gt;

&lt;p&gt;Some people think that this was a resistance to the rigidity of static typing. Developers wanted more freedom and spent less time "type wrangling", opting for performing actions over defining structures.&lt;/p&gt;

&lt;p&gt;I think that's &lt;em&gt;part&lt;/em&gt; of it, and not all of it. Specifically, I don't believe the types were necessarily the problem, but more like collateral damage from incredibly verbose language syntax.&lt;/p&gt;

&lt;p&gt;Curly braces, accessibility modifiers, semicolon, semicolon, semicolon, and always everywhere type definitions made for an intimidating syntax for new developers and seemed to add to laden the burgeoning developer; the better you understood the language, the more code you seemed to have to write to express yourself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;opposite&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// Direction -&amp;gt; Direction&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Up&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Down&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Down&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Up&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Left&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Left&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a private function in F# that returns the opposite direction. F# does not make explicit return statements in its functions; everything is an expression, so the function's body is a valid return. Indentation handles defining the boundaries of the function body. Newlines define the following case in the switch. Arrows (-&amp;gt;) separate cases from results. &lt;em&gt;Mise en place&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Languages like python, F#, and Rust, in contrast to the older iterations of the enterprise languages, do their best to eliminate superfluous syntax, verbose symbols and overly elaborate exposition for every construct. They embrace whitespace as syntax; an idea which arguably does not make that much sense for compilation, but makes a massive difference for &lt;strong&gt;human readability&lt;/strong&gt;. Code people can read and parse is lexically succinct.&lt;/p&gt;

&lt;p&gt;By and large, languages are getting briefer and more expressive, relying more on intuitive whitespace for scoping.&lt;/p&gt;

&lt;p&gt;And as for the question of verbose type definitions:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-inference"&gt;
  &lt;/a&gt;
  Type inference
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/hTerI4FpPtJg4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hTerI4FpPtJg4/giphy.gif" alt="gif of two men asking if you're psychic" width="499" height="241"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a direct continuation of the pattern of brevity discussed above, recently we've seen the emergence of &lt;strong&gt;type inference&lt;/strong&gt; (the ability for a language compiler or runtime to determine and &lt;em&gt;enforce&lt;/em&gt; types based on usage).&lt;/p&gt;

&lt;p&gt;All the F# code I've shown you so far has been fully/strongly typed. Every function parameter and function return has been deduced and enforced by the type checker.&lt;/p&gt;

&lt;p&gt;Some tools, like the VSCode &lt;a href="https://ionide.io/"&gt;Ionide&lt;/a&gt; extension take advantage of this and will display the types &lt;strong&gt;for you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ualUU4vK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzeapno1rna3250q19fs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ualUU4vK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzeapno1rna3250q19fs.png" alt="image of the code with type hints" width="880" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the type comments you see here are overlaid on to the code. They're not actually being written in the file.&lt;/p&gt;

&lt;p&gt;It's hard for me to return to dynamic languages when I know I can get all the benefits of strong types and compile time guarantees without having to explicitly write all the type information.&lt;/p&gt;

&lt;p&gt;Safety meets brevity. Admittedly, type inference isn't perfect, and you lose context if you're reading the code outside of an optimized editor experience, but at that point, it's still no &lt;strong&gt;worse&lt;/strong&gt; than if the code was dynamic, and you still have the knowledge that all the logic is type safe and checks out.&lt;/p&gt;

&lt;p&gt;I never personally felt the slow down that dynamic programming enthusiasts have mentioned comes with using static types - I think I write &lt;strong&gt;working&lt;/strong&gt; code faster with strong typing - but if you are concerned with speed and expressiveness, type inference seems like an excellent way to mitigate it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abstract-data-types"&gt;
  &lt;/a&gt;
  Abstract Data Types
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/krtDmVuQGssOtMWfRg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/krtDmVuQGssOtMWfRg/giphy.gif" alt="gif of being impressed" width="480" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We've reached the final pattern I want to discuss here and I feel like I've saved the best for last; at least for me, it is my personal favourite of all the things we've discussed here and the one that has had the greatest impact on my progression as a developer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://guide.elm-lang.org/types/custom_types.html"&gt;Algebraic Data Types&lt;/a&gt; aka Custom Types aka Union and Product Types are a relatively straightforward concept with profound applications.&lt;/p&gt;

&lt;p&gt;Ultimately, programming is giving instructions to a machine to perform meaningful work. And &lt;strong&gt;modern programming involves &lt;em&gt;making abstractions&lt;/em&gt; that produce maintainable code that performs the behaviours we desire.&lt;/strong&gt; Values, functions, classes, modules and all these other namespaces allow us to define constructs and ideas that map the &lt;em&gt;real&lt;/em&gt; domain of our endeavours to a program space of data structures and logic.&lt;/p&gt;

&lt;p&gt;Algebraic Data Structures (ADTs) provide a straightforward syntax for expressing the shape of a problem with as little overhead as possible.&lt;/p&gt;

&lt;p&gt;Let's see how.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Game&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Status&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Tail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Direction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Head&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Position&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Tail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Position&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Position&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Position&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Status&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Active&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Won&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Lost&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Direction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Up&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Down&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Left&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the types representing the domain of my Snake game. The concepts, so to speak, that are meaningful to the idea of snake. What &lt;em&gt;is&lt;/em&gt; a game of snake? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the minimum amount of information necessary to play a game of snake?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are a few interesting things happening here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The data structure for the game is composed from smaller structures&lt;/li&gt;
&lt;li&gt;We can easily alias types (give them a more semantically meaningful name that's relevant on the context of our application). Like how &lt;code&gt;Food&lt;/code&gt; and the snake's &lt;code&gt;Head&lt;/code&gt; are both just positions, but we can use their aliases throughout our code for more clarity.&lt;/li&gt;
&lt;li&gt;Status and Direction are both &lt;a href="https://www.typescriptlang.org/docs/handbook/unions-and-intersections.html"&gt;Union types&lt;/a&gt;. They're similar to enums, but they're not integers or strings under the good. They're fully qualified Values that we can use in our code, like making our own primitives unique to this application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might not find this particularly exciting, saying these are &lt;em&gt;just&lt;/em&gt; fancy enums and records, but ADTs are fully unencumbered by shape:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Restart&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Dir&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nc"&gt;Direction&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Tick&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we make a &lt;code&gt;Message&lt;/code&gt; type that has two basic values that don't rely on any other data, and one that requires a Direction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Restart&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Dir&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changeDirection&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Tick&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;advance&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we consume this data type we can make decisions and access the associated data with each value, but &lt;strong&gt;not&lt;/strong&gt; mix them up. We can't use the direction in any value except the &lt;code&gt;Dir direction&lt;/code&gt; case, because the others do not have that structure.&lt;/p&gt;

&lt;p&gt;This allows us to &lt;em&gt;precisely&lt;/em&gt; model domains without wastage. It is not a trivial operation to express something like that message type in a language like Java, and requires significantly more code to do so. As a consequence, people rarely do it, opting to use more mutation, and nullable values to handle states where data is lacking, or shouldn't exist.&lt;/p&gt;

&lt;p&gt;And that causes more bugs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We shouldn't write code that squeezes our real-world domain into the primitive types of our programming languages; our programming languges should provide the tools to represent our domain precisely and without wastage.&lt;/strong&gt; The better the representation, the easier it will be to work with the data.&lt;/p&gt;

&lt;p&gt;ADTs are now a first-class feature for me in any language I want to use. The more resistance a language gives me to describing what a thing &lt;em&gt;actually&lt;/em&gt; is, the less I find myself wanting to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;If you've made it here, thank you for taking the time to read my little love letter to the patterns I enjoy, and why I think other developers enjoy them as well.&lt;/p&gt;

&lt;p&gt;We've gone this whole way without me mentioning functional programming, and that's deliberate. While almost all of these patterns saw their origins and notable iterations in the functional programming space, I've recently found myself moving away from attempting to separate the world into functional or not functional; there are just patterns that I like, and tools that implement them.&lt;/p&gt;

&lt;p&gt;F# itself has recently done the same with it's updated tagline:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;F# empowers everyone to write succinct, robust and performant code&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The goal is not to be functional or object oriented. It's not to be the most popular language or the fastest language.&lt;/p&gt;

&lt;p&gt;It's to help people write good code.&lt;br&gt;
It's to help developers express their desires.&lt;br&gt;
It's to avoid bugs, and errors.&lt;/p&gt;

&lt;p&gt;Languages that execute well on these ideas, seem to be well received. And it's not just the new languages. All the old tools and frameworks are thinking about developer empowerment. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It was never really about semicolons.&lt;/strong&gt; The things we've just talked about aren't recommendations or suggestions in style guides. They're not buried in tomes like, "Everything you need to know about X". They're baked into the language ecosystems themselves.&lt;/p&gt;

&lt;p&gt;Let me know in the comments what you think, and what language patterns bring you delight.&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>functional</category>
      <category>typescript</category>
      <category>rust</category>
    </item>
    <item>
      <title>Aprenda a usar o LinkedIn para aumentar as suas oportunidades profissionais</title>
      <author>Arthur Nascimento Assunção</author>
      <pubDate>Mon, 29 Nov 2021 16:30:50 +0000</pubDate>
      <link>https://dev.to/arthurassuncao/aprenda-a-usar-o-linkedin-para-aumentar-as-suas-oportunidades-profissionais-294g</link>
      <guid>https://dev.to/arthurassuncao/aprenda-a-usar-o-linkedin-para-aumentar-as-suas-oportunidades-profissionais-294g</guid>
      <description>&lt;p&gt;Se torne um profissional bem visto e almejado aplicando essas dicas sobre LinkdeIn.&lt;/p&gt;

&lt;p&gt;Oliver está na metade do curso de Engenharia Elétrica, tira excelentes notas e estuda muito para as provas. Sophia é da turma de Oliver, tira boas notas e estuda para as provas, porém ela tenta participar do máximo de atividades extracurriculares possível. Por fim, Emily, também da mesma turma dos anteriores, tira boas notas e estuda para as provas, porém ela tenta participar de algumas de atividades extracurriculares e, sempre que participa, escreve textos e publica no site Medium ou Dev.to, em seguida posta na rede social LinkedIn falando sobre sua experiência ao fazer a atividade extracurricular e posta o &lt;em&gt;link&lt;/em&gt; do seu texto publicado, além disso, ainda hospeda códigos de trabalhos acadêmicos, que os professores passam, em repositórios no site GitHub. Assim, ela é ativa no Github e LinkedIn.&lt;/p&gt;

&lt;p&gt;A partir dessa história, qual dos três alunos parece ter maiores chances de conseguir estágios e empregos ao longo da vida? Oliver que é um excelente aluno, Sophia que participa de todas atividades extracurriculares, mas que não divulga nada do que faz ou Emily que é boa aluna e divulga tudo que faz e participa?&lt;/p&gt;

&lt;p&gt;Obviamente, o mercado de trabalho não é exato e depende de cada processo seletivo, contudo as chances de Oliver, mesmo sendo o melhor alunos (em notas e, talvez, até conhecimento) dos três são menores que as chances das outras alunas e é bem provável que as chances de Emily sejam as maiores.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Saber e não fazer, ainda não é saber" Lao Tsé&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A frase acima é extremamente importante no mundo conectado de hoje em dia, afinal de nada adianta você ter algum conhecimento se ninguém souber disso, se você não colocá-lo em prática.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cuidado-com-as-expectativas"&gt;
  &lt;/a&gt;
  Cuidado com as expectativas
&lt;/h2&gt;

&lt;p&gt;Conseguir a primeira vaga de emprego pode ser bastante difícil, pois:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As empresas costumam ter expectativas irreais. Por exemplo, não é incomum ver cargos de nível júnior exigindo vários anos de experiência.&lt;/li&gt;
&lt;li&gt;Muitos processos de entrevista incluem avaliações de quadro branco com base em algoritmos (vaga de desenvolvedor), mesmo para funções de front-end júnior.&lt;/li&gt;
&lt;li&gt;Boas vagas de empregos para nível júnior geralmente são extremamente competitivas. Algumas chegam a receber centenas de inscrições nos primeiros dias após o anúncio.&lt;/li&gt;
&lt;li&gt;As empresas costumam não deixar claras as informações sobre suas faixas salariais, processo de entrevista e planos de treinamento.&lt;/li&gt;
&lt;li&gt;Atualmente o Brasil está passando por diversas crises e, por isso, nossa taxa de desemprego está altíssima, neste exato momento, dia 18 de novembro de 2021, a taxa é 14,1%, totalizando uns 14,4 milhões de desempregados, segundo o IBGE (2021).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#motivos-para-voc%C3%AA-confiar-neste-texto"&gt;
  &lt;/a&gt;
  Motivos para você confiar neste texto
&lt;/h2&gt;

&lt;p&gt;Ao longo da minha vida tenho seguido a área acadêmica, porém me mantenho extremamente conectado ao mundo profissional, às tecnologias que as empresas estão interessadas e gosto de ensinar aos meus alunos formas de irem mais longe. Assim eu:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Li textos relacionados ao uso de redes sociais, como LinkedIn, para aumentar as chances de alguém conseguir ser contratado;&lt;/li&gt;
&lt;li&gt;Assisti as famosas "Semana da carreira" de alguns profissionais do mercado, todas relacionadas a carreira de desenvolvedor;&lt;/li&gt;
&lt;li&gt;Sigo e segui profissionais, como recrutadores, que abordam temas como escrita de currículo, preenchimento de LinkedIn.&lt;/li&gt;
&lt;li&gt;Sigo no próprio LinkedIn diversos recrutadores;&lt;/li&gt;
&lt;li&gt;Estou em contato com profissionais da minha área;&lt;/li&gt;
&lt;li&gt;Continuo aprendendo tecnologias atuais e me mantenho muito atualizado, inclusive tenho desenvolvidos sites para a instituição onde trabalho, o IFSudesteMG;&lt;/li&gt;
&lt;li&gt;Pedi a alguns amigos que estão no mercado de trabalho para darem revisarem o texto e sugerirem melhorias;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora que você sabe que precisa mostrar ao mundo o que sabe, vamos as dicas!!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-o-que-o-mercado-de-trabalho-busca"&gt;
  &lt;/a&gt;
  1. O que o mercado de trabalho busca?
&lt;/h2&gt;

&lt;p&gt;Primeiro precisamos lembrar que cada área de trabalho é única e tem as suas próprias regras e expectativas. Mas algumas são gerais que costumam estar presente em diversas áreas do conhecimento. &lt;br&gt;
Além disso, empresas e recrutadores buscam pessoas que os ajudem a resolver seus problemas, toda empresa tem, ao menos, um produto e todo produto resolve, ao menos, um problema. Então saiba que seu perfil deve se encaixar no que eles acreditam ser a pessoa que irá ajudá-los a resolver os problemas da empresa.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Empresas buscam solucionadores de problemas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A partir disso, geralmente o que o mercado espera de você:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Conhecimento prático&lt;/strong&gt;: lembre da frase de Lao Tsé ("Saber e não fazer, ainda não é saber"), você precisa demonstrar que tem experiência prática para que as empresas se interessem por você;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Experiência verificável&lt;/strong&gt;: ter tido uma experiência é bom, mas como a empresa saberá se é real? Infelizmente, muitas pessoas mentem em seus currículos, então mostre provas do seu conhecimento;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proatividade&lt;/strong&gt;: Seja proativo, as empresas querem pessoas assim, que deem ideias, que têm mais iniciativa, ou seja, que acrescentam mais a empresa;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Criatividade&lt;/strong&gt;: as &lt;em&gt;Soft Skills&lt;/em&gt; (conhecimentos não-técnicos) estão em alta, uma delas é a criatividade, as empresas esperam que você seja mais que apenas um apertador de parafuso, afinal, na prática, haverá diversas situações novas;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Saber trabalhar em equipe&lt;/strong&gt;: Empresas são formadas de pessoas, então sempre buscam pessoas que trabalham em equipe, tente mostrar projetos onde trabalhou em equipe e dê o crédito aos seus colegas;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Usar melhores práticas&lt;/strong&gt;: toda área tem boas práticas, mostre que seus projetos usam boas práticas, escreva sobre o processo de desenvolvimento de algum projeto mostrando as boas práticas e publique.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Além do que o mercado espera, existem ideias que o mercado não espera de você, contudo aqui dependemos muito de cada área, as dicas são mais voltadas para o mercado de desenvolvimento de &lt;em&gt;software&lt;/em&gt;, mas são úteis em quase todas áreas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Formação acadêmica&lt;/strong&gt;: algumas áreas valorizam muito a formação acadêmica, mas com o mercado cheio de profissionais, ter uma formação não é um diferencial, então ter um diploma de engenheiro não é bem o que as empresas esperam, pois é algo intrínseco a sua área, ainda há áreas não regulamentadas como a computação, onde ter uma formação acadêmica não conta muito e não é obrigatório, afinal existem desenvolvedores de &lt;em&gt;software&lt;/em&gt; que não tem formação acadêmica;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Anos de carreira&lt;/strong&gt;: Ter anos de carreira não significa ser bom, nem mesmo que sua experiência foi boa. Tente detalhar melhor sua experiência e mostrar que seus anos de carreira não são só tempo, são anos aprendendo e desenvolvendo suas habilidades;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Idade&lt;/strong&gt;: É óbvio que a idade tem algum peso na hora da seleção, porém ela não costuma ser um foco das empresas;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quantos cursos ou certificados a pessoa tem&lt;/strong&gt;: Ter feito cursos e ter certificados não significa praticamente nada, eu posso fazer mil cursos e não saber nada sobre eles, por isso te digo, escreva textos sobre os conhecimentos adquiridos em cursos, crie projetos com base nos cursos e mostre que não é só um curso, é uma experiência;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então o que os &lt;strong&gt;Recrutadores&lt;/strong&gt; olham?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Linkedin&lt;/strong&gt;: Atualmente a maior rede social para divulgar seu currículo, buscar vagas ou encontrar candidatos é o LinkedIn, crie o seu e seja ativo na rede, se venda!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Conteúdos na internet&lt;/strong&gt;: Recrutadores ou gestores com vagas disponíveis podem encontrar você até mesmo por artigos (textos) na internet ou vídeos no Youtube onde você explica conceitos ou processos importantes para a sua área de atuação;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sites específicos para portfólio da sua área&lt;/strong&gt;: Algumas áreas, principalmente áreas de tecnologia, tem sites específicos para divulgar seus trabalhos, por exemplo, se você é desenvolvedor coloque projetos no Github. Já se você é designer coloque projetos no Pinterest ou Dribble.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Site pessoal como portfólio&lt;/strong&gt;: Você pode também desenvolver ou comprar um site e colocar seus projetos nele.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#2-afinal-o-que-%C3%A9-o-linkedin"&gt;
  &lt;/a&gt;
  2. Afinal, o que é o LinkedIn?
&lt;/h2&gt;

&lt;p&gt;O LinkedIn é uma rede social voltada para o mercado de trabalho, nela criamos perfis profissionais, semelhantes a currículos do mundo digital, e seguimos outros profissionais, empresas e recrutadores. Nesta rede alguns buscam vagas de emprego, outros oferecem vagas e outros agregam valor em seus currículos para, em um futuro momento, buscarem vagas melhores.&lt;/p&gt;

&lt;p&gt;Esta rede social funciona semelhante ao Facebook, mas com o foco totalmente profissional, inclusive evite assuntos que não sejam profissionais, como política, religião e outros assuntos que não agregam valor a uma discussão profissional, também evite ser polêmico, pois pode ser mal interpretado e isso será negativo para sua imagem e nome.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#21-import%C3%A2ncia-do-uso-do-linkedin"&gt;
  &lt;/a&gt;
  2.1. Importância do uso do LinkedIn
&lt;/h3&gt;

&lt;p&gt;A importância da rede é óbvia, servir de local para se candidatar a vagas de emprego e para ofertar vagas. Contudo há outras questões:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Destacar o seu perfil para ajudar a conseguir vagas e indicações;&lt;/li&gt;
&lt;li&gt;Realizar &lt;em&gt;networking&lt;/em&gt; com pessoas da sua área;&lt;/li&gt;
&lt;li&gt;Mostrar seu conhecimento e te ajudar a crescer;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#3-cria%C3%A7%C3%A3o-de-conta-no-linkedin"&gt;
  &lt;/a&gt;
  3. Criação de conta no LinkedIn
&lt;/h2&gt;

&lt;p&gt;Agora que vocÊ sabe o que é essa rede e sua importância, vamos criar uma nova conta. Para isso, primeiro, crie um LinkedIn, para isso abra o site do LinkedIn, como no &lt;em&gt;print&lt;/em&gt; abaixo e clique em &lt;code&gt;Cadastre-se agora&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9FEvCwW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/158gvbdniko113mesw4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9FEvCwW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/158gvbdniko113mesw4g.png" alt="Linkedin - Página inicial" width="880" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Preencha os campos e-mail/telefone e senha, como mostra a figura abaixo, e continue o processo de criação do currículo no LinkedIn.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMa-bl0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb1it5e0nr1v5l57jvrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMa-bl0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb1it5e0nr1v5l57jvrg.png" alt="Linkedin - Criação de conta" width="391" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora acesse seu perfil, clique em &lt;code&gt;Eu&lt;/code&gt; e depois em &lt;code&gt;Visualizar perfil&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LjRTqzTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muauo5bil60ojy339y66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LjRTqzTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muauo5bil60ojy339y66.png" alt="Linkedin - Visualizar perfil" width="269" height="187"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-exemplo-de-perfil"&gt;
  &lt;/a&gt;
  4. Exemplo de perfil
&lt;/h2&gt;

&lt;p&gt;Abaixo uma parte do meu perfil, caso queira acessar acesse em &lt;a href="https://www.linkedin.com/in/arthurassuncao/"&gt;Linkedin.com/in/arthurassuncao&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZvCNw7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2t3q2nkmknbsqi91x794.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZvCNw7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2t3q2nkmknbsqi91x794.png" alt="Linkedin - Perfil de ArthurAssuncao" width="775" height="329"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-foto-do-perfil"&gt;
  &lt;/a&gt;
  5. Foto do perfil
&lt;/h2&gt;

&lt;p&gt;Sua foto de perfil é importante, pois ela transmite algumas informações e, infelizmente, as pessoas irão tirar conclusões com base em sua foto, mesmo que não sejam informações corretas. Então ao ver uma foto a pessoa irá analisar se ela transmite seriedade, compromisso, se a fisionomia demonstra que a pessoa é colaborativa e nada arrogante e por ai vai. É óbvio que a partir de uma foto é impossível inferir essas coisas, mas as pessoas farão isso mesmo que inconscientemente. Além disso, a foto bem feita passa uma boa primeira impressão.&lt;/p&gt;

&lt;p&gt;Um site que permite analisar a foto do seu perfil é o &lt;a href="https://www.snappr.com/photo-analyzer/analyzer/"&gt;Snappr Photo Analyzer&lt;/a&gt;. Esse site de tá dicas e notas em diversos quesitos para a sua foto. Uma nota geral maior ou igual a 75 é considerada muito boa. Contudo, recomendo que não se apegue demais ao que o site informa, pois ele faz a analise de forma automática, então uma foto ruim que atenda a alguns critérios pode ser considerada boa.&lt;/p&gt;

&lt;p&gt;Veja a nota da minha foto na figura abaixo. Essa minha foto nem é a melhor do mundo e obteve nota bastante alta:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDQgfty2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/go5ta6c5n0mb6taeryu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDQgfty2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/go5ta6c5n0mb6taeryu2.png" alt="LinkedIn - Nota da foto de ArthurAssuncao no Snappr" width="880" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como melhorar as suas fotos?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Remova o fundo&lt;/strong&gt;: caso precise, use sites como o &lt;a href="https://www.remove.bg/pt-br"&gt;Remove.bg&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E abaixo umas dicas baseadas no Snappr Photo Analyzer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Sorriso&lt;/strong&gt;: faça um sorriso expressivo, sem mostrar o interior da boca;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mandíbula&lt;/strong&gt;: mantenha seu queixo reto e com boa sombra;
Olhos: feche levemente seus olhos ao sorrir;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Zoom&lt;/strong&gt;: Mostre seus ombros em sua foto, uma foto com ombros e rosto é mais adequada que apenas seu rosto;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Regra dos terços&lt;/strong&gt;: imagine a sua foto dividida em 9 quadrados (matriz 3x3) e veja se seus olhos ficam próximos as interseções dos quadrados superiores, por exemplo;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fundo&lt;/strong&gt;: mantenha um fundo neutro e sem muito brilho;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Brilho&lt;/strong&gt;: a foto precisa ser clara (brilhante), mas não muito;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Contraste&lt;/strong&gt;: deve ter um contraste ideal;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nitidez&lt;/strong&gt;: quanto maior a nitidez e qualidade da foto melhor;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Saturação&lt;/strong&gt;: saturação ideal para que a foto tenha as cores no ponto;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Temperatura da cor&lt;/strong&gt;: deve ser uma temperatura ideal, nem muito quente (vermelha) e nem muito fria (azul);&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#6-se%C3%A7%C3%A3o-t%C3%ADtulo-seu-t%C3%ADtulo-profissional"&gt;
  &lt;/a&gt;
  6. Seção Título (seu título profissional)
&lt;/h2&gt;

&lt;p&gt;A primeira coisa a fazer é alterar o &lt;code&gt;título&lt;/code&gt;, não coloque termos como &lt;code&gt;Em busca de recolocação&lt;/code&gt; ou outro termo que não agregue informação, indique qual a sua função ou a função desejada e inclua palavras-chave, veja como o meu &lt;code&gt;título&lt;/code&gt; fica.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Professor | Desenvolvedor Front-end | React | Typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perceba que indico minha colocação/cargo, sou professor, cargo afim que eu poderia trabalhar (atuo, as vezes, como desenvolvedor para a instituição que trabalho e para mim mesmo, sempre de forma não remunerada) e tecnologias que utilizo (React e Typescript), assim meu perfil é mais facilmente encontrado quando algum recrutador procura por desenvolvedores React, por exemplo.&lt;br&gt;
Ou seja, indique o que vc quer para sua carreira.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-se%C3%A7%C3%A3o-sobre"&gt;
  &lt;/a&gt;
  7. Seção Sobre
&lt;/h2&gt;

&lt;p&gt;Aqui é a sua descrição, se venda.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;É a apresentação de si;&lt;/li&gt;
&lt;li&gt;Fale sobre os benefícios de você no cargo pretendido, ou seja, se é um desenvolvedor de sites com conhecimento em testes, fale que &lt;code&gt;desenvolve sistemas confiáveis e estáveis por utilizar testes ao longo do processo de desenvolvimento&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Lembre que quem vai ler pode ser da área técnica, por isso palavras-chave e palavras técnicas são interessante, porém boa parte dos que vão acessar seu perfil serão recrutadores, eles querem pessoas que resolvam problemas;&lt;/li&gt;
&lt;li&gt;Explique os motivos pelos quias você tem conhecimento dos requisitos mais comuns para a vaga/cargo pretendida;&lt;/li&gt;
&lt;li&gt;Apresente projetos parecidos com tarefas que a vaga/cargo pretendida realiza;&lt;/li&gt;
&lt;li&gt;Mostre que é autoridade no assunto com base em números, como horas de experiência, projetos concluídos etc;&lt;/li&gt;
&lt;li&gt;Fale na língua dos RHs

&lt;ul&gt;
&lt;li&gt;Quem você é?&lt;/li&gt;
&lt;li&gt;O que você faz?&lt;/li&gt;
&lt;li&gt;Onde você quer chegar?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Detalhe bem, mas seja breve. Recrutadores podem ler dezenas de perfis todos os dias, então não há tempo para ler textos muito longos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dica, pesquise sobre o método AIDA (Atenção, Interesse, Desejo e Ação), com ele você consegue se destacar mais. &lt;br&gt;
Veja como está o meu Sobre:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2VfGeaa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtewac9ab6qnxw2twzt5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2VfGeaa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtewac9ab6qnxw2twzt5.png" alt="LinkedIn - Sobre de arthurassuncao" width="768" height="577"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perceba que tento sempre falar que tenho experiência, uso palavras-chave, indico minha capacidade por números, pois números servem como prova. Na minha visão, o meu Sobre ainda está um pouco grande, poderia ser mais direto, focado em uma área apenas. Eu poderia pegar algumas informações menos relevantes do Sobre e colocar nas experiências.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Números não mentem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#8-experi%C3%AAncias"&gt;
  &lt;/a&gt;
  8. Experiências
&lt;/h2&gt;

&lt;p&gt;Não importa o cargo, o que importa é o que você fez e quais foram seus resultados e tecnologias/conhecimentos aplicados. Explique o que fez ou faz no cargo.&lt;/p&gt;

&lt;p&gt;Veja como está a minha experiência no IFSudesteMG.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eav0r8Vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkj1n52juislc06320kg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eav0r8Vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkj1n52juislc06320kg.png" alt="LinkedIn - Experiência de ArthurAssuncao" width="768" height="727"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#9-compet%C3%AAncias"&gt;
  &lt;/a&gt;
  9. Competências
&lt;/h2&gt;

&lt;p&gt;As competências formam o que você sabe, suas habilidades, como Excel, Gestão de projetos, Desenho de telas, HTML, Liderança etc.&lt;br&gt;
Essas competências ajudarão o seu perfil a aparecer em buscas, pois cada competência é uma palavra chave, por exemplo, se você adiciona a Excel como competência, então seu perfil pode aparecer em uma busca por profissionais que sabem Excel.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#91-adicione-compet%C3%AAncias"&gt;
  &lt;/a&gt;
  9.1. Adicione Competências
&lt;/h3&gt;

&lt;p&gt;Indique quais você sabe e que são importantes para o cargo pretendido, remova competências inúteis ou pouco relevantes para o cargo, só as mantenha se você tiver poucas competências. Para isso, vá na seção &lt;code&gt;Competências e recomendações&lt;/code&gt; e clique em &lt;code&gt;Adicionar nova competência&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#92-pe%C3%A7a-recomenda%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  9.2. Peça recomendações
&lt;/h3&gt;

&lt;p&gt;Peça para amigos te indicarem competências, é possível você pedir pelo próprio LinkedIn, faça assim, envie seu perfil para um amigo, peça para ele ir na seção Competências e recomendações e marcar as competências que ele considera que você tenha, veja um &lt;em&gt;print&lt;/em&gt; da seção competências de um amigo, o Breno. Perceba que eu recomendei ele por &lt;code&gt;Go (Programming Language)&lt;/code&gt;, pois já assisti vídeos e textos sobre Go que ele publicou e o conheço há bastante tempo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9bdq3UGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhotahclmxrwgqam280l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9bdq3UGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhotahclmxrwgqam280l.png" alt="Competências e recomendações de Breno no Linkedin" width="768" height="439"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#93-consiga-recomenda%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  9.3. Consiga recomendações
&lt;/h3&gt;

&lt;p&gt;Conheço algumas formas de conseguir mais recomendações de competências fazendo o seguinte:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dê recomendações a pessoas que você reconhece tendo tais competências, assim a pessoa se sentirá contente e pensará em te devolver o favor. Isso é muito bom para ser feito com amigos de trabalho, amigos de faculdade ou colegas que são da sua área.&lt;/li&gt;
&lt;li&gt;Publique textos ou vídeos no LinkedIn, diretamente na rede social ou links do seu blog/site, e coloque palavras-chave no texto de divulgação, mostrando que tem aquelas competências, assim alguém pode ler/ver, gostar e te indicar por tais competências.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#94-testes-de-compet%C3%AAncia"&gt;
  &lt;/a&gt;
  9.4. Testes de competência
&lt;/h3&gt;

&lt;p&gt;O LinkedIn tem uma área de &lt;code&gt;teste de competência&lt;/code&gt;, basta ir na seção &lt;code&gt;Competências e recomendações&lt;/code&gt; e clique em &lt;code&gt;Fazer teste de competência&lt;/code&gt;, conforme a imagem abaixo indica. Cuidado que cada teste dura cerca de 15 minutos e tem perguntas um tanto difíceis, porém vale muito a pena, principalmente se você está no começo da carreira.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Faça testes de competência sem medo de falhar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Faça testes sem medo, pois todo mundo falha, eu preciso tirar um tempo e fazer mais testes, vou reprovar algumas vezes, mas, no final, terei passado em vários.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zOwlYwdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy1kh3nmge2w080vat6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zOwlYwdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy1kh3nmge2w080vat6n.png" alt="Linkedin - Fazer teste de competência" width="771" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Veja como ficam as competências validadas pelo teste, ou seja, as que você foi aprovado. No caso do &lt;em&gt;print&lt;/em&gt;, fui aprovado em CSS e HTML, perceba como elas diferem das outras.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GkxC4hQR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r59x7vtpf5ak11jofc5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GkxC4hQR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r59x7vtpf5ak11jofc5v.png" alt="LinkedIn - Competências" width="682" height="422"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#10-recomenda%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  10. Recomendações
&lt;/h2&gt;

&lt;p&gt;Arthur, mas você acabou de falar de recomendações, calma, acima eu abordei recomendação de competência, aqui é recomendação no sentido de QI (Quem indica), ou seja, aqui você irá solicitar recomendações de pessoas onde elas irão falar sobre como foi trabalhar com você e indicarão qual era a posição delas em relação a você. Veja abaixo um exemplo de recomendação do perfil de um Daniel, no caso eu acessei o perfil dele e fui na seção de Recomendações.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OdjyuHXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5z5fox75qsyp5w5uirr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OdjyuHXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5z5fox75qsyp5w5uirr.png" alt="LinkedIn - Recomendações" width="769" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perceba, na imagem, que você pode solicitar uma recomendação ao Daniel (a pessoa do perfil que você está acessando), pode também recomendá-lo. &lt;br&gt;
Na recomendação que Daniel recebeu temos o nome de quem recomendou, o cargo e empresa e também qual a data e relação da pessoa (Carlos) com Daniel e, obviamente, o texto da recomendação. Portanto, isso é muito importante, pois é uma espécie de indicação.&lt;/p&gt;

&lt;p&gt;Algumas considerações sobre indicações:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cada relação que você tem características diferentes para lhe avaliar, afinal um chefe pode falar sobre como você é responsável, mas pouco pode falar sobre o quanto ajuda seus companheiros, enquanto um colega de trabalho pode falar sobre o quanto você é colaborativo, mas não tanto sobre você ser responsável quanto a prazos.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Recomendações de chefes são muito relevantes, pois são figuras de autoridade e quem ver seu perfil irá aceitar esse viés.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Recomendações de colegas de trabalho são relevantes, pois são pessoas que viveram o dia a dia contigo, portanto passa credibilidade.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Recomendações de orientadores/professores podem ser relevantes pelos mesmos motivos que chefes, porém em menor grau, pois podem ser entendidas como tendenciosas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Recomendações de amigos tem menor relevância.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#11-publica%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  11. Publicações
&lt;/h2&gt;

&lt;p&gt;Publicações são conteúdos, podendo ser textos, vídeos ou carrossel (em PDF), postados na rede social e servem para aumentar o engajamento no seu perfil e, com isso, o alcance do seu nome, permitindo que você se conecte a mais pessoas e consiga mais vagas de empregos.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#111-o-que-publicar"&gt;
  &lt;/a&gt;
  11.1. O que publicar?
&lt;/h3&gt;

&lt;p&gt;Primeira coisa é saber o que publicar, te dou uma lista de conteúdos interessantes para serem publicados, seja como textos ou vídeos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conteúdo sobre um curso rápido que você realizou. Lembre de marcar o instrutor/professor do curso;&lt;/li&gt;
&lt;li&gt;Conteúdo sobre uma tecnologia ou conhecimento que você aprendeu, mesmo que sozinho;&lt;/li&gt;
&lt;li&gt;Conteúdo sobre alguma &lt;em&gt;Soft Skills&lt;/em&gt; que você tem desenvolvido, como liderança, gestão, negociação ou outra;&lt;/li&gt;
&lt;li&gt;Conteúdo sobre alguma disciplina que você tem realizado, pode ser um tema ensinado no curso, um trabalho acadêmico ou qualquer outro conhecimento válido;&lt;/li&gt;
&lt;li&gt;Processo de desenvolvimento de uma ideia ou trabalho que tem feito, para mostrar que você segue boas práticas e boas tecnologias, quando for o caso;&lt;/li&gt;
&lt;li&gt;Conteúdo sobre resolução de exercícios de alguma área de atuação, podendo até abordar possíveis questões de concursos ou de entrevistas;&lt;/li&gt;
&lt;li&gt;e muito mais.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#112-onde-publicar"&gt;
  &lt;/a&gt;
  11.2. Onde publicar
&lt;/h3&gt;

&lt;p&gt;Publique seu texto em seu blog, seu site (caso tenha), no site &lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;, ou no &lt;a href="https://dev.to/"&gt;Dev.to&lt;/a&gt; ou, mesmo, no &lt;a href="https://pingback.com/"&gt;Pingback&lt;/a&gt;.&lt;br&gt;
Para saber, blogs podem ser criados com plataformas como Blogspot, Wordpress e outras. O Medium é o site de publicação de textos mais famoso de todos, porém ele não é 100% gratuito para quem lê. O dev.to é muito reconhecido dentre os desenvolvedores de &lt;em&gt;Software&lt;/em&gt; e o Pingback têm surgido como alternativa. Assim, recomendo que, se você é programador ou pretende ser, use o Dev.to e, caso esteja em outra área do conhecimento, que use o Medium.&lt;/p&gt;

&lt;p&gt;Enquanto isso, vídeos podem ser postados no famoso Youtube, nesse caso não há o que pensar em alternativas, pois é a plataforma mais famosa.&lt;/p&gt;

&lt;p&gt;Não esqueça, aqui estamos falando da plataforma primária onde os conteúdos serão postados, pois depois você postará o &lt;em&gt;link&lt;/em&gt; desses conteúdos no seu LinkedIn.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#113-dicas-para-agregar-valor-aos-conte%C3%BAdos"&gt;
  &lt;/a&gt;
  11.3. Dicas para agregar valor aos conteúdos
&lt;/h3&gt;

&lt;p&gt;Ao criar um conteúdo, seja um texto, vídeo ou carrossel (estilo instagram), saiba que você precisa:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Falar a língua do seu público-alvo, se é no LinkedIn e quer atingir recrutadores, explique termos técnicos ao longo do texto, assim você mantém o termo (como palavra-chave) e não deixa o recrutador sem entender o texto;&lt;/li&gt;
&lt;li&gt;Usar termos que mostrem que você está antenado com o mercado. Por exemplo, atualmente as &lt;em&gt;Soft Skills&lt;/em&gt; estão em alta, mostre que você tem conhecimento sobre elas, como a Empatia, e mostre, inclusive, que você tem essa habilidade desenvolvida. Faça isso também ao postar o &lt;em&gt;link&lt;/em&gt; do seu conteúdo no LinkedIn.&lt;/li&gt;
&lt;li&gt;Usar muitas palavras-chave e termos relevantes para vagas de emprego, isso é essencialmente importante ao postar no LinkedIn, pois um recrutador ou funcionário técnico de uma empresa, perceberá que você tem conhecimento sobre diversos itens das vagas em aberto nas empresas que trabalham.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#12-projetos"&gt;
  &lt;/a&gt;
  12. Projetos
&lt;/h2&gt;

&lt;p&gt;Adicione seus projetos no LinkedIn e, caso tenha pouca ou nenhuma experiência profissional, coloque seus projetos como experiência profissional. Veja bem, não é para mentir, apenas indicar que um projeto que participou é uma forma de experiência profissional, mesmo que sem contrato e não-remunerada.&lt;/p&gt;

&lt;p&gt;Descreva bem seus projetos e técnicas usadas para facilitar o entendimento por quem acessar o seu perfil. Caso não tenha projetos, monte projetos pessoais ou para pessoas próximas. Se é um desenvolvedor, crie um site clone de um site famoso ou crie um site para uma loja de um amigo.&lt;/p&gt;

&lt;p&gt;Nesse primeiro momento, não pense tanto em ganhar dinheiro, pense na experiência, ela é mais importante.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quem está começando deve focar mais no ganho de experiência que no dinheiro.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#13-crie-uma-url-personalizada"&gt;
  &lt;/a&gt;
  13. Crie uma &lt;em&gt;URL&lt;/em&gt; personalizada
&lt;/h2&gt;

&lt;p&gt;No início do texto eu mostrei a &lt;em&gt;url&lt;/em&gt; (&lt;em&gt;link&lt;/em&gt;) do meu perfil, ela é &lt;a href="https://www.linkedin.com/in/arthurassuncao"&gt;https://www.linkedin.com/in/arthurassuncao&lt;/a&gt;, perceba que ela é personalizada, tem o meu nome de perfil sem muitos números ou caracteres aleatórios, veja os dois exemplos abaixo e me diga qual seria melhor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/arthurassuncao"&gt;https://www.linkedin.com/in/arthurassuncao&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/arthurass51482_1"&gt;https://www.linkedin.com/in/arthurass51482_1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;É claro que a primeira é melhor, portanto, ao criar sua conta altere a &lt;em&gt;url&lt;/em&gt;, tente usar a mesma &lt;em&gt;url&lt;/em&gt; (a parte que indica o usuário, como &lt;code&gt;arthurassuncao&lt;/code&gt;) que usa em outras redes sociais.&lt;br&gt;
Para fazer isso basta ir no topo do seu perfil a direita e clicar em &lt;code&gt;Editar perfil público e URL&lt;/code&gt;, como mostra a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--89MeBPZb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bxj0gvnudy39ugijltn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--89MeBPZb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bxj0gvnudy39ugijltn.png" alt="LinkedIn - Editar perfil público e URL" width="315" height="96"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na página que será aberta, altere a &lt;em&gt;url&lt;/em&gt; também no canto direito superior, como a figura abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VbZG9JFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kgs86d28og3yu9didlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VbZG9JFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kgs86d28og3yu9didlw.png" alt="LinkedIn - Alterar sua URL personalizada" width="304" height="139"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#14-usando-a-rede-social-linkedin-de-forma-assertiva"&gt;
  &lt;/a&gt;
  14. Usando a rede social LinkedIn de forma assertiva
&lt;/h2&gt;

&lt;p&gt;Se conecte (adicione) a profissionais de sua área e profissionais de recursos humanos (rh - recrutadores), principalmente profissionais ligados a empresas que você tem interesse em trabalhar.&lt;/p&gt;

&lt;p&gt;Ao se conectar a alguém, mande uma mensagem com um bom texto de apresentação, por exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Olá, sou Desenvolvedor Web com experiência em ReactJS e
penso em trabalhar em sua empresa, por isso te adicionei,
pois caso alguma vaga surja, ficarei sabendo e estarei disponível.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#15-como-encontrar-vagas"&gt;
  &lt;/a&gt;
  15. Como encontrar vagas
&lt;/h2&gt;

&lt;p&gt;Há várias formas de encontrar vagas, a forma tradicional é por meio do menu &lt;code&gt;Vagas&lt;/code&gt;, como a figura abaixo mostra.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4dJc11Kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4s3b42d9jnx5klzff5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4dJc11Kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4s3b42d9jnx5klzff5e.png" alt="LinkedIn - Menu vagas" width="819" height="638"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nesta parte do site, use o filtro, é possível filtrar até por trabalho remoto.&lt;/p&gt;

&lt;p&gt;Mas há outras formas, sugiro você &lt;strong&gt;pesquisar nas postagens&lt;/strong&gt;, pois muita gente posta vagas como postagem normal. Assim, vá no campo de busca e procure por palavras-chave de vagas que você procura. Por exemplo, um desenvolvedor Web Front-end pode pesquisar por &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;JavaScript&lt;/code&gt;, &lt;code&gt;ReactJS&lt;/code&gt; ou outro termo de vagas almejadas e marque &lt;code&gt;Publicações&lt;/code&gt;. Veja a imagem abaixo com o resultado da busca por &lt;code&gt;vaga ReactJS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Vde6-Jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jj91rkupuumwbhc1drx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Vde6-Jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jj91rkupuumwbhc1drx7.png" alt="LinkedIn - busca de vaga em publicações" width="880" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assim você irá ver publicações de vagas feitas por outros usuários.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#151-o-que-fazer-ao-encontrar-uma-vaga-em-uma-postagem"&gt;
  &lt;/a&gt;
  15.1. O que fazer ao encontrar uma vaga em uma postagem
&lt;/h3&gt;

&lt;p&gt;Ao encontrar vagas, comente na publicação, mas também mande mensagem direta com um texto de apresentação, mostrando sua experiência relacionadas a vaga. Você também pode cogitar, enviar mensagem para a pessoa perguntando sobre:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mais informações sobre a vaga;&lt;/li&gt;
&lt;li&gt;peça dicas, caso não seja um recrutador;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#16-se-candidate-se-arrisque"&gt;
  &lt;/a&gt;
  16. Se candidate, se arrisque!
&lt;/h2&gt;

&lt;p&gt;Não espere estar 100% apto a uma vaga para tentar, não tente se adequar totalmente aos requisitos de nenhuma vaga. Se você sabe o mínimo para a vaga, tente, qual a pior coisa que pode acontecer? Não ser contratado? Sem problemas, você tenta outra vaga depois.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As únicas pessoas que nunca fracassam são as que nunca tentam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sabemos que em diversas áreas as empresas exigem milhares de conhecimentos e muitos não irão ser utilizados, na computação isso é extremamente comum, então foque no título da vaga e na descrição ao invés das técnicas e tecnologias pedidas, ou seja, se você tem perfil para ser um Engenheiro eletricista e a vaga é para &lt;code&gt;Pessoa engenheira eletricista&lt;/code&gt; com uma descrição que você tem algum conhecimento, &lt;strong&gt;então se candidate, se arrisque!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Além disso, siga empresas que você poderia trabalhar, pois sempre que postarem vagas de emprego, aparecerá uma notificação, semelhante a notificação da figura abaixo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Siga empresas que tem interesse, pois você receberá notificações de vagas. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eulxksg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss95uazr8apa01iz32zn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eulxksg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss95uazr8apa01iz32zn.png" alt="LinkedIn - Notificação de vagas" width="603" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#17-erros-ortogr%C3%A1ficos-e-de-concord%C3%A2ncia"&gt;
  &lt;/a&gt;
  17. Erros ortográficos e de concordância
&lt;/h2&gt;

&lt;p&gt;Temido por todas as pessoas, o tal do Português e suas concordâncias dão medo, mas são essenciais para uma comunicação profissional, por isso peça para alguém avaliar os textos do seu perfil, pois as vezes cometemos pequenos erros de português. E se um recrutador perceber um erro em seu perfil, pode pensar que você não é tão bom quanto diz ser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#171-dica-para-verificar-ortografia"&gt;
  &lt;/a&gt;
  17.1. Dica para verificar ortografia
&lt;/h3&gt;

&lt;p&gt;Após escrever um texto, seja o seu Sobre, descrição de experiência ou mesmo uma postagem para um blog ou medium, copie o texto e cole em um editor de textos, como o Microsoft Word ou Libreoffice Writer e verifique se tem erros de ortografia.&lt;/p&gt;

&lt;p&gt;Caso queira verificar ortografia em um texto em inglês use o &lt;a href="https://www.grammarly.com"&gt;Grammarly&lt;/a&gt; ou o altere o idioma do corretor ortográfico do seu programa de &lt;em&gt;office&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#18-como-se-portar-na-rede-social-linkedin"&gt;
  &lt;/a&gt;
  18. Como se portar na rede social LinkedIn
&lt;/h2&gt;

&lt;p&gt;Como você já percebeu, o LinkedIn é uma rede social profissional, é um ambiente profissional, portanto saiba se portar adequadamente. &lt;br&gt;
Quem comete graves erros no LinkedIn, pode ter "sua cabeça pedida", ou seja, alguém pode montar um texto, marcar a pessoa que cometeu tal erro e a empresa que a pessoa trabalha, isso pode fazer com que a pessoa perca o emprego ou tenha dificuldades para conseguir um.&lt;br&gt;
Na maior parte das vezes são erros graves, como ser preconceituoso, assediar outra pessoa pelo LinkedIn, mas há uns casos onde é apenas uma opinião polêmica que alguns não aceitam, sim, temos muita gente intolerante em nosso mundo, inclusive dentre as que se dizem contra intolerância.&lt;br&gt;
Portanto, tenha polidez e fale apenas sobre assuntos estritamente profissionais. Asssim evite:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Temas polêmicos;&lt;/li&gt;
&lt;li&gt;Política, religião e outros temas sem consenso;&lt;/li&gt;
&lt;li&gt;Ser preconceituoso, isso parece óbvio, mas algumas pessoas esquecem;&lt;/li&gt;
&lt;li&gt;Assediar pessoas, LinkedIn é profissional, se quer "dar em cima" de alguém use o Facebook ou Instragram.&lt;/li&gt;
&lt;li&gt;Julgar uma situação sem conhecer a fundo o que aconteceu, isso vale para sua vida, tenha empatia;&lt;/li&gt;
&lt;li&gt;Falta de respeito. Sabemos que as vezes as pessoas podem falar coisas sem sentido ou defender o indefensável, mas nada justifica faltar com o respeito, ainda mais em uma rede social desse tipo;&lt;/li&gt;
&lt;li&gt;Outros assuntos não profissionais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por fim, não interaja (curtir, comentar ou compartilhar) com conteúdos que tirem o foco da rede. Eu costumo desfazer conexão com profissionais que ficam interagindo com postagem sobre política, por exemplo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#19-respeite-os-recrutadores"&gt;
  &lt;/a&gt;
  19. Respeite os recrutadores
&lt;/h2&gt;

&lt;p&gt;Muitas vezes esquecemos que "o outro" também é um trabalhador como nós, por isso leia as dicas abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se uma vaga tem requisitos ou descrição ruim, a culpa é de quem elaborou a vaga, não do recrutador;&lt;/li&gt;
&lt;li&gt;Se o recrutador diz não poder informar a faixa salarial, é bem provável que a gestão da empresa não permita, ou seja, não é mera má vontade;&lt;/li&gt;
&lt;li&gt;Se o recrutador te mandar um pedido de conversa, responda educadamente se você tem interesse ou não, evite ignorar ou ser mal-educado;&lt;/li&gt;
&lt;li&gt;Lembre, o recrutador ou qualquer outra pessoa envolvida no processo está ali trabalhando e seguindo regras da gestão, é uma pessoa como você.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#20-dicas-extras"&gt;
  &lt;/a&gt;
  20. Dicas Extras
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tente ficar, ao menos, 1 ano em cada empresa que trabalhar. Sabemos que alguns empregos são muito ruins, seja pela baixa valorização ou por ambientes tóxicos, mas consecutivas passagens rápidas por empresas "mancham" um currículo. Empresas costumam não ver problema em alguém que ficou 6 meses em um emprego, mas alguém que ficou menos de 12 meses em dois ou mais empregos pode ser muito mal visto, pois vão pensar que esse funcionário usa empresas como trampolim ou que saem na primeira dificuldade, deixando a empresa "na mão". Não cabe a mim dizer se é certo ou errado, mas alerto para um fenômeno que pode acontecer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências
&lt;/h2&gt;

&lt;p&gt;IBGE. Desemprego. Disponível em: &lt;a href="https://www.ibge.gov.br/explica/desemprego.php"&gt;https://www.ibge.gov.br/explica/desemprego.php&lt;/a&gt;. Acesso em 18 de nov de 2021.&lt;br&gt;
Canal Conecta. 21 dicas que vão destacar seu perfil LinkedIn. Disponível em: &lt;a href="https://canalconecta.com.br/21-dicas-que-vao-destacar-seu-perfil-linkedin"&gt;https://canalconecta.com.br/21-dicas-que-vao-destacar-seu-perfil-linkedin&lt;/a&gt;. Acesso em 18 de nov de 2021.&lt;/p&gt;

</description>
      <category>linkedin</category>
      <category>mercadodetrabalho</category>
      <category>portfólio</category>
    </item>
  </channel>
</rss>
