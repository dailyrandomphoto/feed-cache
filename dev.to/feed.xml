<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>ReactJS vs AngularJS: Which one is better for your project?</title>
      <author>Rithik Samanthula</author>
      <pubDate>Sat, 20 Nov 2021 10:21:57 +0000</pubDate>
      <link>https://dev.to/code2rithik/reactjs-vs-angularjs-which-one-is-better-for-your-project-2ca8</link>
      <guid>https://dev.to/code2rithik/reactjs-vs-angularjs-which-one-is-better-for-your-project-2ca8</guid>
      <description>&lt;p&gt;Heya Coders! What's poppin'?&lt;/p&gt;

&lt;p&gt;Today, I'll be talking about which is better: React or Angular. Feel free to share your opinions in the comments below!&lt;/p&gt;

&lt;p&gt;Let's get it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NvoQA38G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppapmyykm9580jme9na8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NvoQA38G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppapmyykm9580jme9na8.jpeg" alt="Framework meme" width="500" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt; ‚ú® Javascript is one of the most popular languages ‚Äã‚Äãamong developers today. There are many developers, newbies, and *seasoned aficionados* who build their application or project using Javascript, but still, there is confusion when choosing the right framework or library for their design. ‚ú® &lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GvFWwjJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o1yoc67mr69wdb66cdt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GvFWwjJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o1yoc67mr69wdb66cdt.jpeg" alt="Well Well Well Willy Wonka meme" width="600" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Soooo Angular and React are both popular &lt;strong&gt;but&lt;/strong&gt; developers can't really &lt;em&gt;decide&lt;/em&gt; upon WHICH is good for their project. ü§∑‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;p&gt;Most learners and students want to learn a framework that could help in getting them a good job in the market. ü§ì&lt;/p&gt;

&lt;p&gt;Alright I honestly think I'm wasting your time lets get to the point. üòÇ&lt;/p&gt;

&lt;p&gt;Let's get to the BASICS.&lt;/p&gt;

&lt;h2&gt; React &lt;/h2&gt;

&lt;p&gt;Pretty sure y'all know what React is but for those of you who don't know, React is a framework created by and maintained by Facebook in 2013. Long story short, ReactJS is used to build interactive user-interfaces. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YTd-yHB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bd20dz2e1eoshz4pza2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YTd-yHB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bd20dz2e1eoshz4pza2.gif" alt="React Spinning Gif" width="880" height="275"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt; Angular &lt;/h2&gt;

&lt;p&gt;Angular is also a JavaScript framework that was created by google and was released in 2010. It's mainly used for developing SPAs (Single-Page Applications).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VNcSNiB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdxciukxs8syuk70opw0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VNcSNiB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdxciukxs8syuk70opw0.gif" alt="Angular gif" width="650" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt; The world's voice üó£: &lt;/h2&gt;

&lt;p&gt;Lets see what Stack Overflow's AND Google Trends survey says about Angular and React! üìà&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UhqmSrsT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdf7e83u9canm7ketxa0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UhqmSrsT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdf7e83u9canm7ketxa0.png" alt="Stack Overflow Survey Result" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AND&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--njzw25uT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syew28tfsyo1pm8a6osi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--njzw25uT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syew28tfsyo1pm8a6osi.png" alt="Google Trends Survey" width="880" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can clearly see that React has more priority over Angular üò≤&lt;/p&gt;

&lt;h2&gt; What I think üß†: &lt;/h2&gt; &lt;br&gt;

&lt;h2&gt; Angular &lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Learning the Framework&lt;/strong&gt;: In order to learn Angular, you have to learn a lot of things like Typescript-in depth. There are a whole lot of other topics to learn such as directives, modules, decorators, components, services, dependency injection, pipes, and templates. So basically if you want to learn Angular, you have to learn a lot of in-depth concepts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Components and Size&lt;/strong&gt;: Angular runs on a real DOM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updates and Community Support&lt;/strong&gt;: Angular releases a new version or community update every 6 months. There are 2 major updates per year. Its current version is Angular 12.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4KR0lpgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3iawso71aojql0794d1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4KR0lpgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3iawso71aojql0794d1.jpeg" alt="and we told them" width="600" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt; React &lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Learning the Framework&lt;/strong&gt;: React is a library and has fewer concepts to learn in order to learn React. React uses JSX (JavaScript XML) which is a way of coding HTML into Javascript. You just need to learn the JSX syntax. React does the same task but in a different way. Its quicker to learn than Angular.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Components and Size&lt;/strong&gt;: React runs on a Virtual DOM which is more lightweight than a real dom. Its a javascript version of a DOM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updates and Community Support&lt;/strong&gt;: React's current version is Version 17.0.0. Making updates in React is easier than making updates in Angular since famous companies like AirBNB and Twitter run on react.&lt;/p&gt;

&lt;h1&gt;SO AT THE END OF THE DAYY üòÉ&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MuyHGPRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a50tobwl990n4x6abgit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MuyHGPRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a50tobwl990n4x6abgit.png" alt="Table" width="880" height="1058"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks Coders for reading this blog and remember...&lt;/p&gt;

&lt;h2&gt;Keep Coding Y'All üë®üèª‚Äçüíª&lt;/h2&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>angular</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>üöÄ Executing Github Gist files from Linux Shell via cURL</title>
      <author>Thomas Gotwig</author>
      <pubDate>Sat, 20 Nov 2021 09:54:11 +0000</pubDate>
      <link>https://dev.to/tgotwig/executing-github-gist-files-from-linux-shell-via-curl-10fe</link>
      <guid>https://dev.to/tgotwig/executing-github-gist-files-from-linux-shell-via-curl-10fe</guid>
      <description>&lt;p&gt;We have two different URL options to fetch a Github Gist file via cURL:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;gist.githubusercontent.com&lt;/li&gt;
&lt;li&gt;api.github.com&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second one is a bit more work, but always instant up-to-date! üåü&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gistgithubusercontentcom"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ gist.githubusercontent.com
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; https://gist.githubusercontent.com/[user]/[gist_id]/raw/[gist_file]?_&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;uuidgen&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
| bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;üåç Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But this can run a older version of the file üòñ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apigithubcom"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ api.github.com
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#fix-limitations-of-apigithubcom"&gt;
  &lt;/a&gt;
  üîß Fix limitations of api.github.com
&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;api.github.com&lt;/code&gt; comes with &lt;a href="https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting"&gt;rate-limiting&lt;/a&gt; per hour:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-I&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; https://api.github.com/users/[user] | &lt;span class="nb"&gt;grep &lt;/span&gt;x-ratelimit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;x-ratelimit-limit: 60
x-ratelimit-remaining: 59
x-ratelimit-reset: 1636928776
x-ratelimit-resource: core
x-ratelimit-used: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we can get around this strong limitation by using a &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;PAT&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-I&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; &amp;lt;user&amp;gt;:&amp;lt;pat&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
    https://api.github.com/users/[user] | &lt;span class="nb"&gt;grep &lt;/span&gt;x-ratelimit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;x-ratelimit-limit: 5000
x-ratelimit-remaining: 4999
x-ratelimit-reset: 1636928894
x-ratelimit-used: 1
x-ratelimit-resource: core
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#executing-the-gist-file"&gt;
  &lt;/a&gt;
  üöÄ Executing the Gist file!
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; &amp;lt;user&amp;gt;:&amp;lt;pat&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="s2"&gt;"https://api.github.com/gists/[gist_id]?_=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;uuidgen&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    | jq &lt;span class="nt"&gt;--raw-output&lt;/span&gt; &lt;span class="s1"&gt;'.files."&amp;lt;GIST_FILE&amp;gt;".content'&lt;/span&gt; | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;üåç Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Until now it was always up-to-date! üòä&lt;/p&gt;

</description>
      <category>bash</category>
      <category>github</category>
      <category>tutorial</category>
      <category>shell</category>
    </item>
    <item>
      <title>retry method in laravel</title>
      <author>Marcos Gad</author>
      <pubDate>Sat, 20 Nov 2021 09:23:43 +0000</pubDate>
      <link>https://dev.to/marcosgad/retry-method-in-laravel-1pin</link>
      <guid>https://dev.to/marcosgad/retry-method-in-laravel-1pin</guid>
      <description>&lt;p&gt;The retry function attempts to execute the given callback until the given maximum attempt threshold is met. If the callback does not throw an exception, its return value will be returned. If the callback throws an exception, it will automatically be retried. If the maximum attempt count is exceeded, the exception will be thrown&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;callable&lt;/span&gt; &lt;span class="nv"&gt;$callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$sleep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$when&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$attempts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Attempt 3 times while resting 1000ms in between attempts...&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Try: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$attempts&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toTimeString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="kc"&gt;PHP_EOL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;Throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Failed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/* 
Try: 1 10:57:48 Try: 2 10:57:49 Try: 3 10:57:50
Exception Failed
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with callback function true&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$attempts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="c1"&gt;// Attempt 3 times while resting 1000ms in between attempts...&lt;/span&gt;
             &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Try: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$attempts&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toTimeString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="kc"&gt;PHP_EOL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

             &lt;span class="k"&gt;Throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Failed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="cm"&gt;/* 
Try: 1 10:57:48 Try: 2 10:57:49 Try: 3 10:57:50
Exception Failed
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with callback function false&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$attempts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="c1"&gt;// Attempt 3 times while resting 1000ms in between attempts...&lt;/span&gt;
             &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Try: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$attempts&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toTimeString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="kc"&gt;PHP_EOL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

             &lt;span class="k"&gt;Throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Failed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="cm"&gt;/*
Try: 1 11:08:15
Exception Failed
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be used in real life with Http client&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://example.com/users/1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Retry in the Http client&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://example.com/users/1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you enjoy the code.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>php</category>
      <category>laravel</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Game In A Month: Serverless Leaderboards</title>
      <author>Mike Talbot</author>
      <pubDate>Sat, 20 Nov 2021 09:21:52 +0000</pubDate>
      <link>https://dev.to/miketalbot/game-in-a-month-serverless-leaderboards-16pd</link>
      <guid>https://dev.to/miketalbot/game-in-a-month-serverless-leaderboards-16pd</guid>
      <description>&lt;p&gt;I found myself out of work for the last month and decided to use my time with my partner to build a game.  We've participated in Game Jams before but never really got anything to a production state.  This time we wanted it to be different.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OxoB6rgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddhsxw1yf9lqlvhzauwr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxoB6rgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddhsxw1yf9lqlvhzauwr.gif" alt="Game Demo" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We decided to build the game in Unity and used some really nice Synty assets for the world and Malbers animations for our key rabbit characters along side some custom assets and a whole lot of level design :)&lt;/p&gt;

&lt;p&gt;We needed three key things that fall outside of the Unity stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A website to host a free preview version of the game (&lt;a href="https://wabbitsworld.com"&gt;https://wabbitsworld.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A service on that site that can share photos to Facebook that are uploaded from the game, even if from a mobile app etc&lt;/li&gt;
&lt;li&gt;A highscore table that ran in seasons and could return the top 100 scores and the position in the total leaderboard of the current player.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#leaderboards"&gt;
  &lt;/a&gt;
  Leaderboards
&lt;/h2&gt;

&lt;p&gt;Leaderboards are a non-trivial problem - even if you have a server with a database you are having to do sorts on large numbers of records - albeit that indexes can help a lot with this, it's still quite a load.  To find the relative position of a player in a million scores you need to traverse the sorted list.  If you decide, like we did, that you don't want to go to the cost of running a server and opt for serverless (in our case Firebase) then your problem intensifies.  It would be very expensive indeed to use one of the Firebase databases to try to run a leaderboard due to the pricing model and you can't benefit from in memory caching in Serverless architectures.&lt;/p&gt;

&lt;p&gt;The ideal way to run a leaderboard is to use ZSets in Redis.  Redis is fantastic at these kinds of operations and so I decided on implementing the following stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run the website as a Cloud Function in Firebase - this way I can implement an Express app to record scores and download the current top scores. I use Pug to create sharing pages for a user's images with the correct Open Graph tags so Facebook posts link through properly and show the image.&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://upstash.com"&gt;Upstash&lt;/a&gt; as a serverless Redis implementation - it has a generous free tier and the price won't get out of hand even if the game is very successful&lt;/li&gt;
&lt;li&gt;Use my cloud based Express app to query Redis for scores and to record new ones.&lt;/li&gt;
&lt;li&gt;Create a React app for the site and host that in the same Express Cloud function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also decided that I would do 14 day seasons so the leaderboard is for currently active players - not those who played months ago.  This is easy with Redis - I just add the current date / 14 * 1000 * 60 * 60 * 24 rounded to an int to the key used for the highscores.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;I'm going to start by showing you the entire code for the website (excluding the pug view).  I'm doing this because I can't quite believe how tiny it is!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase-functions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;compression&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;view engine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Facebook share page&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/shared&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shared&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;season&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HIGHSCORES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`highscores &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;season&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;REDIS_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;REDIS_PASSWORD_HERE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;REDIS_HEADER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bearer MY BEARER TOKEN=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;REDIS_BASEURL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://MY_SERVER.upstash.io/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ioredis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createRedisConnection&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redis://UPSTASH ADDRESS AND PASSWORD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Heartbeat api&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;//API to record a score&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/addscorerecord&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createRedisConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zadd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HIGHSCORES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_name`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zrank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HIGHSCORES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;groupResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// API to get the Highscore table&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/gethighscoretable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createRedisConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zrank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HIGHSCORES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;topScores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HIGHSCORES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;withscores&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topScores&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;topScores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;groupedResults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groupResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topScores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;groupedResults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_name`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;groupedResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groupedResults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// API to get the server time&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// This serves the Unity game&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;span class="c1"&gt;// Return all other paths to the index.html for React routing&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#recording-a-score"&gt;
  &lt;/a&gt;
  Recording a score
&lt;/h2&gt;

&lt;p&gt;The process of recording a score is pretty simple.  The game provides a &lt;code&gt;score&lt;/code&gt;, an &lt;code&gt;id&lt;/code&gt; for the player and the &lt;code&gt;name&lt;/code&gt; that they want displayed for their score.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; and the &lt;code&gt;score&lt;/code&gt; are placed in a ZSet with the score negated so that higher scores come first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/addscorerecord&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createRedisConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zadd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HIGHSCORES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next I record the name for the ID so we can look it up quickly and a whole record of the current score and name for the player - this latter is unnecessary in the current code, but I have a plan for it later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_name`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we use Redis magic to quickly work out the current rank of the player.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zrank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HIGHSCORES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We finally package up the response and send it to Unity as a JSON packet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#%C2%A0getting-the-highscore-table"&gt;
  &lt;/a&gt;
  ¬†Getting the highscore table
&lt;/h2&gt;

&lt;p&gt;It's not much harder to retrieve the highscore table - we get the top 100 scores and repeat the current player ranking operation.  For this to work we just need the &lt;code&gt;id&lt;/code&gt; of the player.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/gethighscoretable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createRedisConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zrank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HIGHSCORES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we request the top 100 scores including both the &lt;code&gt;score&lt;/code&gt; and the &lt;code&gt;id&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;topScores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HIGHSCORES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;withscores&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The we need to turn &lt;code&gt;id&lt;/code&gt;s into &lt;code&gt;name&lt;/code&gt;s.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topScores&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;topScores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;groupedResults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groupResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topScores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;groupedResults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_name`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;groupedResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groupedResults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see I use a pipeline operation in Redis to make the call for 100 things all at once for performance reasons.&lt;/p&gt;

&lt;p&gt;Next we just need to return the data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#calling-from-unity"&gt;
  &lt;/a&gt;
  Calling From Unity
&lt;/h2&gt;

&lt;p&gt;Unity makes it pretty easy to call these functions and use the results.  I implemented an HTTP helper first, this allows HTTP requests as Unity coroutines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Wabbit&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HttpHelp&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt; &lt;span class="n"&gt;GetJson&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UnityWebRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SendWebRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isDone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;UnityWebRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;T&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JsonUtility&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromJson&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;downloadHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt; &lt;span class="nf"&gt;PostJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UnityWebRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JsonUtility&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uploadHandler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UploadHandlerRaw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;downloadHandler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DownloadHandlerBuffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SendWebRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isDone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;UnityWebRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;downloadHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recording a score and retrieving scores use this helper function, but we have to define classes that will be translated to and from JSON, so they come first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Serializable&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScoreRecord&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Serializable&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ranking&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Serializable&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScoreEntry&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Serializable&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HighScoreTable&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rank&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ScoreEntry&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now recording a score is just a matter of using the helper with the correct class as a parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt; &lt;span class="nf"&gt;SendScore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpHelp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;PostJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://wabbitsworld.com/addscorerecord"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ScoreRecord&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PlayerInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PlayerInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PlayerInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highScore&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ranking&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JsonUtility&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromJson&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Ranking&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;currentRank&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ranking&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GotRank"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I found it was pretty easy to setup a free tiered serverless environment that combines Firebase with Upstash to allow a simple leaderboard system to be developed.  While this example doesn't cover some of the extensions you would add to avoid cheating, it shows a cheap and performant way to make simple highscore functionality.&lt;/p&gt;

&lt;p&gt;You can download the iOS and Mac versions of Wabbits from &lt;a href="https://apps.apple.com/gb/app/wabbits/id1593459956"&gt;the App Store&lt;/a&gt;.  The Droid version is awaiting approval.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n4dpo?initialpath=/OxcJpUKgqYW2kPAyNfjRr/embed&amp;amp;runonclick=0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>node</category>
      <category>serverless</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Doing editor's work for IPC144 course note</title>
      <author>Gerardo Enrique Arriaga Rendon</author>
      <pubDate>Sat, 20 Nov 2021 08:58:27 +0000</pubDate>
      <link>https://dev.to/jerryhue/doing-editors-work-for-ipc144-course-note-3851</link>
      <guid>https://dev.to/jerryhue/doing-editors-work-for-ipc144-course-note-3851</guid>
      <description>&lt;p&gt;Last week, I worked on the &lt;a href="https://github.com/Seneca-ICTOER/IPC144"&gt;IPC144 modernization&lt;/a&gt; project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-ipc144"&gt;
  &lt;/a&gt;
  What is IPC144?
&lt;/h2&gt;

&lt;p&gt;IPC144 is a course taught at Faculty of Software Development and Data Science in Seneca College, primarily given to beginners at programming through the C programming language.&lt;/p&gt;

&lt;p&gt;Most of the course work notes are publicly shared by a website. It has been noted that the previous design and feel of the website was outdated, and thus a modernization effort was brought forward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-are-we-modernizing-it"&gt;
  &lt;/a&gt;
  How are we modernizing it?
&lt;/h2&gt;

&lt;p&gt;All of the pages are written into Markdown files, and then latter processed with &lt;a href="https://github.com/facebook/docusaurus"&gt;&lt;code&gt;docusaurus&lt;/code&gt;&lt;/a&gt; to serve over the wire. Although the main purpose of &lt;code&gt;docusaurus&lt;/code&gt; is to write documentation along your programming project, the layout is general-purpose enough that we decided to use it for the IPC144 course notes.&lt;/p&gt;

&lt;p&gt;Although most of the translation from the old notes to the new design was automated by a program to generate Markdown files, there were some small details to clear out before it was time for the new students to use it.&lt;/p&gt;

&lt;p&gt;Some issues were things like typographical errors, improving semantics by providing annotations with proper graphics (by using admonitions), improving the Markdown syntax used, among other things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-contribution"&gt;
  &lt;/a&gt;
  My contribution
&lt;/h2&gt;

&lt;p&gt;My main contribution was auditing the &lt;code&gt;pointers&lt;/code&gt; page. &lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/36"&gt;Here&lt;/a&gt; you can see the issue that I opened for this particular page. Most of the work was related to the checkbox list that the issue shows. There were some details that I have yet to figure out (how to create a dark theme version of an image's pallete, for example!), but overall, I managed to complete several tasks.&lt;/p&gt;

&lt;p&gt;The resulting work culminated in the following &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/61"&gt;PR&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-lessons-learned"&gt;
  &lt;/a&gt;
  Some lessons learned
&lt;/h2&gt;

&lt;p&gt;While I did zero coding in this PR, I feel that I learned a few things regarding problem organization.&lt;/p&gt;

&lt;p&gt;A big one I would like to mention is the discovering process for a problem. There were some tasks in the issue that were more involved the more I thought about them. One, for example, was improving the tables that appeared in the page so that they do not use raw HTMl markup. While I was trying to solve that particular task, I asked myself things like "this table's layout is too complex for regular Markdown!" when working with the walkthrough tables (a table that shows the values of the variables in the code by stepping through the code line by line), and "Could we improve and simplify the design?" Thus, I ended up &lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/58"&gt;&lt;code&gt;opening an issue&lt;/code&gt;&lt;/a&gt; to spark more discussion and suggestions for improving the design of the walkthrough tables.&lt;/p&gt;

&lt;p&gt;The big lesson is: if you find out that a problem is more involved than you expected, file an issue and leave it for later! Your PR should focus on a single unit of work so that it is easier for everybody to review and evaluate. If your PR makes too many changes because it focused on too many things (fix this bug, add this feature, refactor this class), then it will be ignored in the best case, and on average it will be rejected due to a lack of focus.&lt;/p&gt;

</description>
      <category>osd600</category>
    </item>
    <item>
      <title>DJANGO WEB DEVELOPMENT IN PYTHON.</title>
      <author>felix715</author>
      <pubDate>Sat, 20 Nov 2021 08:27:53 +0000</pubDate>
      <link>https://dev.to/felix715/django-web-development-in-python-3120</link>
      <guid>https://dev.to/felix715/django-web-development-in-python-3120</guid>
      <description>&lt;p&gt;&lt;strong&gt;Learn about the basics of web development using Django to build blog applications that have the (CRUD) Create, Read, Update, Delete functionality.&lt;/strong&gt;&lt;br&gt;
Django is a widely used free, open-source, and high-level web development framework. It provides a lot of features to the developers "out of the box," so development can be &lt;br&gt;
rapid. However, websites built from it are secured,scalable, and maintainable at the same time.&lt;br&gt;
&lt;strong&gt;Aim of the Article is to build a blog application.&lt;/strong&gt;&lt;br&gt;
The aim of this article is to build a blog application where the blog content can be created and updated through an administration panel. Blog contents are displayed on the page and can be deleted if needed.&lt;br&gt;
*&lt;strong&gt;&lt;em&gt;Overall application provides&lt;/em&gt;&lt;/strong&gt;* &lt;br&gt;
       CRUD(Create,Read,Update,Delete) functionality.&lt;br&gt;
&lt;strong&gt;Required Setup&lt;/strong&gt;&lt;br&gt;
Required Setup&lt;br&gt;
1.)Git Bash: The user of all operating systems can use it. All the Django related commands and Unix commands are done through it. For downloading the Git bash(&lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt;)&lt;br&gt;
2.)Text-Editor: Any Text-Editor like Sublime Text,kite,Visual Studio Code can be used. &lt;br&gt;
3.)Python 3: The latest version of Python can be downloaded in (&lt;a href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#virtual-environment"&gt;
  &lt;/a&gt;
  Virtual Environment
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Virtual Environment&lt;/strong&gt; acts as dependencies to the Python-related projects. It works as a self-contained container or an isolated environment where all the Python-related packages and the required versions related to a specific project are installed. Since newer versions of Python, Django, or packages, etc. will roll out, through the help of a Virtual Environment, you can work with older versions that are specific to your project. In Summary, you can start an independent project related to &lt;strong&gt;Django of version 2.0&lt;/strong&gt;, whereas another independent project related to &lt;strong&gt;Django of version 3.0&lt;/strong&gt; can be started on the same computer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps-to-create-a-virtual-environment"&gt;
  &lt;/a&gt;
  Steps to create a Virtual Environment
&lt;/h3&gt;

&lt;p&gt;1.)You can create the new directory named &lt;strong&gt;'project-blog'&lt;/strong&gt; by using &lt;strong&gt;'mkdir'&lt;/strong&gt; command in your Desktop.&lt;br&gt;
2.)Change the directory to &lt;strong&gt;'project-blog'&lt;/strong&gt; by using &lt;strong&gt;'cd'&lt;/strong&gt; command.&lt;br&gt;
3.)The virtual environment is created by using &lt;strong&gt;'python -m venv env'&lt;/strong&gt;, where &lt;strong&gt;env&lt;/strong&gt; is our virtual environment shown by &lt;strong&gt;'ls'&lt;/strong&gt; command.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JuSxPh6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vy4bu2xtihdpjoax3cc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JuSxPh6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vy4bu2xtihdpjoax3cc.PNG" alt="Image description" width="562" height="106"&gt;&lt;/a&gt;&lt;br&gt;
 4.)For Activating your Virtual Environment: The Virtual Environment can be activated by using the 'source' command where the 'Scripts' folder needs to be enabled or activated.&lt;br&gt;
5.)The 'env' will be shown in the parenthesis if you've successfully activated your Virtual Environment.&lt;br&gt;
Installing the required package: You can use 'pip install django' to install Django in your specific Virtual Environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4CEy-shL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gl1oescyfpmcqa4816p.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CEy-shL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gl1oescyfpmcqa4816p.PNG" alt="Image description" width="561" height="118"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a Django Project&lt;/strong&gt;&lt;br&gt;
The first step is creating your project by using the &lt;strong&gt;'django-admin startproject project_name'&lt;/strong&gt; command, where &lt;strong&gt;'project_name'&lt;/strong&gt; is &lt;strong&gt;'django_blog'&lt;/strong&gt; in your case. Also, it will generate a lot of files inside our newly created project, which you can research further in &lt;strong&gt;Django documentation&lt;/strong&gt; if needed.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8gBBy8Zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ez74pwylw8zz9tladkm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8gBBy8Zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ez74pwylw8zz9tladkm.PNG" alt="Image description" width="555" height="55"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Change the directory to the newly created project using &lt;strong&gt;'cd'&lt;/strong&gt; command and to view the created file using &lt;strong&gt;'ls'&lt;/strong&gt; command.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xURQ2EXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ml8i9lghub6lb1nunx3w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xURQ2EXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ml8i9lghub6lb1nunx3w.PNG" alt="Image description" width="478" height="144"&gt;&lt;/a&gt;&lt;br&gt;
You can run your project by using 'python manage.py runserver'.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VY0v8Imm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xkjn4iqalxwpz7artsr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VY0v8Imm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xkjn4iqalxwpz7artsr.PNG" alt="Image description" width="555" height="85"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The project can be viewed in your favorite browser (Google Chrome, Mozilla Firefox, etc.).You can come into your browser and type 'localhost:8000' or '127.0.0.1:8000' in the URL, as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GIucWQZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqatykfz8slxqnud1amn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GIucWQZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqatykfz8slxqnud1amn.PNG" alt="Image description" width="779" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting the new Project&lt;/strong&gt;&lt;br&gt;
For creating a new project in the Django, it's always a two-step process, which is shown below.&lt;/p&gt;

&lt;p&gt;The first step is to create an app by using 'python manage.py startapp app_name' command, where app_name is 'blog' in your case. In Django, there are many apps to the single project where each app serves as single and specific functionality to the particular project.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rfDL0C9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t403dhihysbj2phxjevy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfDL0C9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t403dhihysbj2phxjevy.PNG" alt="Image description" width="605" height="109"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second step is to make our project let know about our newly created app by making changes to the &lt;strong&gt;'django_blog/settings.py'&lt;/strong&gt; &lt;strong&gt;INSTALLED_APP&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5T-MNezH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke9k1lzoncxyf9i0em6z.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5T-MNezH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke9k1lzoncxyf9i0em6z.PNG" alt="Image description" width="880" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changing in our Models&lt;/strong&gt;&lt;br&gt;
Django uses &lt;strong&gt;'SQLite'&lt;/strong&gt; as the default database, which is light and only used for small projects, which is fine for this project. It uses &lt;strong&gt;'Object Relational Mapper(ORM)'&lt;/strong&gt; which makes it really easy to work with the database. The actual database code is not written, whereas the database tables are created through the help of &lt;strong&gt;'class'&lt;/strong&gt; keyword in &lt;strong&gt;'models.py'.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inside &lt;strong&gt;'blog/models.py'&lt;/strong&gt;, you need to create a new model named &lt;strong&gt;'Post'&lt;/strong&gt;. This is a class that will become a database table afterward which currently inherits from &lt;strong&gt;'models.Model'&lt;/strong&gt;. As in a standard blog, a certain 'Post' contains a title, which will be a field called &lt;strong&gt;CharField.&lt;/strong&gt; It is a text-based column and accepts mandatory argument as &lt;strong&gt;'max_length'&lt;/strong&gt;, which happens to be 50 in your case. Also, there is another field named &lt;strong&gt;'content'&lt;/strong&gt;, which is the &lt;strong&gt;TextField&lt;/strong&gt;, which contains the detail text of the &lt;strong&gt;'Post'&lt;/strong&gt; as in a standard blog. The double underscore*&lt;em&gt;('str')&lt;/em&gt;* method is defined, which overrides the &lt;/p&gt;

&lt;p&gt;field &lt;strong&gt;'title'&lt;/strong&gt; and returns the name of actual &lt;strong&gt;'title'&lt;/strong&gt; instead of some objects.&lt;br&gt;
&lt;strong&gt;Making a Migrations&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;'python manage.py makemigrations'&lt;/strong&gt; is a first step process which reads the &lt;strong&gt;'models.py'&lt;/strong&gt; after it's creation. It creates a new folder called &lt;strong&gt;'migrations'&lt;/strong&gt; where there is a file named &lt;strong&gt;'0001_initial.py'&lt;/strong&gt;, which are portable across the database.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GEd3V4YK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-%250Auploads.s3.amazonaws.com/uploads/articles/vd0s52mvknxfi8k63e5r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GEd3V4YK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-%250Auploads.s3.amazonaws.com/uploads/articles/vd0s52mvknxfi8k63e5r.PNG" alt="Image description" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Migrating to the database&lt;/strong&gt;&lt;br&gt;
This is the second step where 'python manage.py migrate' reads the newly created folder 'migrations' and creates the database, and it evolves the database when there is a change in the model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NT7AL8gJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x38br2xcdmc1d6ja9lxh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NT7AL8gJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x38br2xcdmc1d6ja9lxh.PNG" alt="Image description" width="417" height="85"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>github</category>
      <category>django</category>
    </item>
    <item>
      <title>Creating your First CRUD Restful API with Node.JS and Hoppscotch</title>
      <author>Unclebigbay</author>
      <pubDate>Sat, 20 Nov 2021 08:13:57 +0000</pubDate>
      <link>https://dev.to/unclebigbay/creating-your-first-crud-restful-api-with-nodejs-and-hoppscotch-4lc7</link>
      <guid>https://dev.to/unclebigbay/creating-your-first-crud-restful-api-with-nodejs-and-hoppscotch-4lc7</guid>
      <description>&lt;p&gt;This full package tutorial is initially posted on Aviyel, an open source community, you can continue reading from the site to support their open source community.  &lt;a href="https://aviyel.com/post/1393/creating-your-first-crud-restful-api-with-node-js-and-hoppscotch"&gt;Click here to read on Aviyel&lt;/a&gt; &lt;/p&gt;



&lt;br&gt;
Hello, my gorgeous friend on the internet üëã,

&lt;p&gt;If you're here and want to know how to build APIs, then you're most welcome, because, in this article, I'll show you the very importance of an API and how to create your first CRUD restful API using Node.JS, Express.js, and Hoppscotch.&lt;/p&gt;

&lt;p&gt;Hey buddy, this is a project-based article, so ensure to stick till the end üòâ.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-we-will-build"&gt;
  &lt;/a&gt;
  What we will build
&lt;/h1&gt;

&lt;p&gt;Straight to the point, we are building a Todo List Backend together!!!&lt;/p&gt;

&lt;p&gt;The reason for this is that todo list is a popular web development project that you might be familiar with, and there's a good chance you‚Äôve used one before or built a todo list interface with HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;So in this article, we'll build a backend API for the popular Todo List project, and at the end of this article, you'll have a basic understanding of how API works and how to build your own APIs.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;But before we get started buddy, let's quickly address the following questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Do we really need APIs in our software?&lt;/li&gt;
&lt;li&gt;Why are we making use of Node JS?&lt;/li&gt;
&lt;li&gt;Why HoppScotch.io?&lt;/li&gt;
&lt;li&gt;What are the CRUD operations?&lt;/li&gt;
&lt;/ol&gt;


&lt;h1&gt;
  &lt;a href="#1-do-we-really-need-apis-in-our-software"&gt;
  &lt;/a&gt;
  1. Do we really need APIs in our Software?
&lt;/h1&gt;

&lt;p&gt;Yes, my friend! We do; an API is a software communication and data exchange interface that allows two applications to communicate and exchange data. For example, a frontend application such as a todo list interface written in React.js, Vue.js, Angular, or Plain HTML, CSS, and JavaScript, can connect and exchange data (such as user information and logic) with a backend application API written in C#, Python, or Node.js.&lt;/p&gt;

&lt;p&gt;One of my favorite importance of using an API for software development is that you can have multiple frontend interfaces for your project backends, such as a Web Version and a Mobile Version while making use of the same API and you don‚Äôt actually need to tamper with the frontend codebase when modifying the backend codebase or vice versa.&lt;/p&gt;



&lt;p&gt;In this tutorial, we'll focus on building the backend of our todo list application, where we'll make use of Node JS to provide a todo list functionality to any frontend technology and all this will be tested using Hoppscotch while Harperdb will serve as our todo list database.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#2-why-are-we-making-use-of-node-js"&gt;
  &lt;/a&gt;
  2. Why are we making use of Node JS?
&lt;/h1&gt;

&lt;p&gt;You must have been using the &lt;code&gt;console.log()&lt;/code&gt; and doing DOM manipulations in your JavaScript code like everyone else in the frontend on your browser, that's okay, that process is called the client-side, but you should know now that the backend application or our APIs does not run on the browser, it runs on the server-side, the question now is how do we execute JavaScript outside of the browser?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#node-to-the-rescue"&gt;
  &lt;/a&gt;
  Node to the rescue!!!
&lt;/h3&gt;

&lt;p&gt;Node or Node.js is an open-source JavaScript backend run-time environment that works outside a web browser, this means that with Node we can write and execute our JavaScript backend code on the server-side, and we can view our &lt;code&gt;console.log&lt;/code&gt; on the Node environment.&lt;/p&gt;

&lt;p&gt;Don‚Äôt be confused, I had demonstrated it somewhere in this article.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#3-why-hoppscotch"&gt;
  &lt;/a&gt;
  3. Why Hoppscotch?
&lt;/h1&gt;

&lt;p&gt;While building a backend API, we sometimes need to test them in a simple way as possible without any frontend interface, this also allows us to catch bugs as early as possible before pushing to production, this also allows the developers which is us to work independently on the APIs until the frontend guys are ready to consume them.&lt;/p&gt;

&lt;p&gt;But how do we achieve this? Through what is known as API testing tools, these tools are applications that allow us to test if our APIs functionalities are performing as expected before pushing them to production, and one of the good testing tools for API is the HOPPSCOTCH.&lt;/p&gt;

&lt;p&gt;HOPPSCOTCH formally known as the POSTWOMAN is a free super light-weight, web-based, and a progressive web application that allows us to test our API endpoints at any time and from anywhere without any complex configurations.&lt;/p&gt;

&lt;p&gt;HOPPSCOTCH is our official testing tool for this tutorial and we will be using it to test our Todo List APIs throughout this article, you can proceed to checkout how Hoppscotch works by pasting the emoji endpoint below in the Hoppscotch URL box and sending a GET request to the emoji-api endpoint or click &lt;a href="https://emoji-api.com/emojis/grinning-squinting-face?access_key=703a1b02ca24b0c6be3e02a89abb83b61bf07dc1"&gt;here&lt;/a&gt; for a prefilled URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4B9J8MO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630735711052/rdVL6x9k9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4B9J8MO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630735711052/rdVL6x9k9.png" alt="hoppscotch.io homepage" width="880" height="567"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool üòé isn‚Äôt it?&lt;/p&gt;

&lt;p&gt;We got a response of a grinning-squinting-face üòÜ from the emoji-API endpoint, Hoppscotch has just saved us the stress of writing JavaScript &lt;code&gt;fetch()&lt;/code&gt; or &lt;code&gt;axios()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Well-done buddy, you‚Äôve now come a very long way already, let‚Äôs proceed to check out what the CRUD operation is all about, let‚Äôs go thereüèÉ‚Äç‚ôÄÔ∏è!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NoMealFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-k1ORhC6_IsE/XmdOqDVKX6I/AAAAAAAAAB4/3ZOOVJEoU9I4DMYXUtd1fh0efqxV-yY2gCLcBGAsYHQ/s1600/crud.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NoMealFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-k1ORhC6_IsE/XmdOqDVKX6I/AAAAAAAAAB4/3ZOOVJEoU9I4DMYXUtd1fh0efqxV-yY2gCLcBGAsYHQ/s1600/crud.jpg" alt="Photo Source: https://www.beta-labs.in/" width="856" height="452"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Before you continue, Aviyel is partnering with  &lt;a href="https://aviyel.com/search?term=hopscotch"&gt;Hoppscotch&lt;/a&gt; to scale open source projects within communities. You can consider continuing this article on  &lt;a href="https://aviyel.com/post/1393/creating-your-first-crud-restful-api-with-node-js-and-hoppscotch"&gt;Aviyel&lt;/a&gt; official website, to support their community. &lt;a href="https://aviyel.com/post/1393/creating-your-first-crud-restful-api-with-node-js-and-hoppscotch"&gt;Click here to continue reading on Aviyel&lt;/a&gt; &lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#4-what-is-the-crud-operations"&gt;
  &lt;/a&gt;
  4. What is the CRUD operations
&lt;/h1&gt;

&lt;p&gt;The CRUD acronym stands for the four main types of SQL commands which are the Create, Read, Update, and Delete commands. These are considered important for the development of a continuous storage application. &lt;/p&gt;

&lt;p&gt;This implies that the CRUD commands allows us to perform some basic operation that enables us to carry out  help us to manipulate data in the database, these operation includes the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creation of new records - Add To-do item&lt;/li&gt;
&lt;li&gt;Reading of existing records - View all To-do items&lt;/li&gt;
&lt;li&gt;Updating of an existing record - Update To-do item&lt;/li&gt;
&lt;li&gt;Deletion of an existing record - Delete Completed To-do item&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hey buddy, now that we know about these technologies and what we‚Äôre going to build with them, tighten your seat belt as we‚Äôre going to implement the above operations in our todo list backend, Now!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GeWl-fSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1630826678523_fasten%2Byour%2Bseat%2Bbelt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GeWl-fSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1630826678523_fasten%2Byour%2Bseat%2Bbelt.gif" alt="Source: Giphy" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#setting-up-your-node-environment"&gt;
  &lt;/a&gt;
  Setting up your Node environment
&lt;/h1&gt;

&lt;p&gt;In this section, we will be setting up the JavaScript runtime environment earlier on our computer, and to start with kindly ensure to have Node.js installed before you proceed with this section, you can get it installed quickly from here while I wait for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also run &lt;code&gt;node&lt;/code&gt; &lt;code&gt;--&lt;/code&gt;&lt;code&gt;version&lt;/code&gt; to check if you have the updated version installed already.&lt;/p&gt;

&lt;p&gt;Welcome back, now that you‚Äôve installed Node.js on your computer, follow the instructions below to get your Node.js project started.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new folder and name it &lt;code&gt;todo-list-backend&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Open your &lt;code&gt;cmd&lt;/code&gt; or &lt;code&gt;git bash&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install --global yarn&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then run &lt;code&gt;yarn init&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Ignore or provide answers to the questions in the command prompt like below
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_JS2L0dS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632059206252_image.png" alt="" width="880" height="177"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can choose to ignore the questions next time by running &lt;code&gt;yarn init -y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yarn is a faster alternative to NPM which is a package manager, that allows us to download packages through our &lt;code&gt;cmd&lt;/code&gt; or &lt;code&gt;git bash&lt;/code&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#setting-up-the-server"&gt;
  &lt;/a&gt;
  Setting up the Server
&lt;/h1&gt;

&lt;p&gt;Now that you have the runtime environment setup on your computer, let‚Äôs proceed to install a few more packages on our computer that will help get our server running&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-install-express"&gt;
  &lt;/a&gt;
  1. Install Express
&lt;/h2&gt;

&lt;p&gt;Express is a Node.js framework that provides us with lots of fast features, if Angular is a JavaScript framework, then express is a node.js framework.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn add express&lt;/code&gt;  to install express in your project.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-install-nodemon"&gt;
  &lt;/a&gt;
  2. Install Nodemon
&lt;/h2&gt;

&lt;p&gt;Nodemon is a simple script monitoring package that helps us to automatically restart the runtime environment whenever there is a change in our project file, this is like an auto-refresh on a web browser.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn add nodemon&lt;/code&gt; to install nodemon in your project.&lt;/p&gt;

&lt;p&gt;Open your &lt;code&gt;package.json&lt;/code&gt; and add the following code to enable &lt;code&gt;nodemon&lt;/code&gt; in your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
  "start": "nodemon index.js"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;package.js&lt;/code&gt; should look something like below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pkcmTEgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632085846549_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pkcmTEgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632085846549_image.png" alt="" width="880" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-install-cors"&gt;
  &lt;/a&gt;
  3. Install Cors
&lt;/h2&gt;

&lt;p&gt;Because API aids sharing of resources between two applications, we need to set up a mechanism called &lt;code&gt;cors&lt;/code&gt; which allows sharing of resources from two different domains.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn add cors&lt;/code&gt; to install cors in your application&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hello-world-response"&gt;
  &lt;/a&gt;
  Hello, World Response
&lt;/h2&gt;

&lt;p&gt;Welcome to the interesting part, to this point we are good to write our first endpoint and to test our setup, we will write an endpoint that responds with the popular Hello, world text to the caller.&lt;/p&gt;

&lt;p&gt;Create an &lt;code&gt;index.js&lt;/code&gt; file and copy-paste the code below inside.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// import express
const express = require("express");
const app = express();
// set your preferred server port
const port = 3000;
// root endpoint response
app.get("/", (req, res) =&amp;gt; {
  res.send("Hello, World!");
});

app.listen(port, () =&amp;gt; {
  console.log(`Your server ‚ö° is running üèÉ‚Äç‚ôÇÔ∏è on http://localhost:${port}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;yarn start&lt;/code&gt; and If all goes well, visit or click &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; and you should have the console message in your terminal and Hello, World displayed on your browser screen like below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SulG_vMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632059496687_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SulG_vMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632059496687_image.png" alt="" width="880" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you encounter any error, trace your steps back to this point to figure out what you missed.&lt;/p&gt;

&lt;p&gt;If all works well you can proceed to play around with the code by changing the text response, I will wait for you üòâ.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#we-need-a-database"&gt;
  &lt;/a&gt;
  We need a Database
&lt;/h1&gt;

&lt;p&gt;Yes, we need a database to keep the todo items, and for this tutorial, we will be making use of the Harperdb cloud instance for our todo list application database.&lt;/p&gt;

&lt;p&gt;Follow the instruction below to set up your own Harperdb database&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Head to &lt;a href="https://studio.harperdb.io/sign-up"&gt;https://studio.harperdb.io/sign-up&lt;/a&gt; to create a free account&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJdPvEyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632061101942_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJdPvEyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632061101942_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On your dashboard click on create new Harperdb cloud instance card&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CtpkkvFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632061753946_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CtpkkvFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632061753946_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fill the instance information form and ensure to keep them safe&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gmdj1gTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632061888140_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gmdj1gTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632061888140_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on instance details except you want to upgrade your database&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L5rJChFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632062167021_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L5rJChFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632062167021_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that your instance details are correct and proceed to click on the add instance button below the add coupon button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpEfwNDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632062263308_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpEfwNDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632062263308_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wait for Harperdb to fully create your new instance, it‚Äôs okay if it takes more than 10 minutes even after refreshing, just sip your coffee ‚òï.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3dF28txW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632062733977_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3dF28txW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632062733977_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once it‚Äôs all done, click on the instance card and create a new schema named &lt;code&gt;todos&lt;/code&gt;&lt;br&gt;
Note: A schema is a collection of tables that is also similar to a database in SQL&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vfR-Ny_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632063008956_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vfR-Ny_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632063008956_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now create a table named &lt;code&gt;items&lt;/code&gt; with a hash attribute of id &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: hash attribute is the unique identifier of each item of todos we will be creating&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rktnKJnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632063166679_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rktnKJnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632063166679_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#connecting-to-harperdb-cloud-database"&gt;
  &lt;/a&gt;
  Connecting to Harperdb Cloud Database:
&lt;/h1&gt;

&lt;p&gt;At this point your Harperdb instance is ready for use, the next thing to do is to install the Node.js Client &lt;code&gt;harperive&lt;/code&gt; package which will allow you to communicate to your Harperdb cloud database from your Node.js application.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn add harperive&lt;/code&gt; to install the package in your project.&lt;/p&gt;

&lt;p&gt;Now that you‚Äôve successfully installed &lt;code&gt;harperive&lt;/code&gt; , the next step is to set up Harperdb authentication in your Node.js application, do you remember the instance URL, the admin username, and the admin password you set up while creating your Harperdb instance? That‚Äôs exactly what we need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#securing-your-project-sensitive-details"&gt;
  &lt;/a&gt;
  Securing your project sensitive details
&lt;/h1&gt;

&lt;p&gt;Because of how sensitive these details are, you need to keep the instance URL, username, and password in a secure environment that cannot be accessible by unauthorized people when you push your code to GitHub, the &lt;code&gt;.env&lt;/code&gt; file will serve as a secure environment and the package which will grant you access to this secure details from the Node.js application is the &lt;code&gt;dotenv&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn add dotenv&lt;/code&gt; to install the package in your project.&lt;/p&gt;

&lt;p&gt;With all this setup, I can now show you how to connect your Node.js application to your Harperdb cloud instance.&lt;/p&gt;

&lt;p&gt;The first thing to do is to create a &lt;code&gt;.env&lt;/code&gt; file and paste the following snippet inside&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSTANCE_URL=YOUR_INSTANCE_URL
INSTANCE_USERNAME=YOUR_INSTANCE_USERNAME
INSTANCE_PASSWORD=YOUR_INSTANCE_PASSWORD
INSTANCE_SCHEMA=YOUR_INSTANCE_SCHEMA (todo)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get your instance URL from the config section on your dashboard, the instance schema is the collection of tables you created earlier, where the instance username and password are the credentials you used while creating your database instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--acEbelwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632084125561_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--acEbelwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1632084125561_image.png" alt="" width="880" height="209"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a file name &lt;code&gt;dbconfig.js&lt;/code&gt;  and paste the code below into it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('dotenv').config();
const harperive = require('harperive');
const DB_CONFIG = {
  harperHost: process.env.INSTANCE_URL,
  username: process.env.INSTANCE_USERNAME,
  password: process.env.INSTANCE_PASSWORD,
  schema: process.env.INSTANCE_SCHEMA,
};

const Client = harperive.Client;
const db = new Client(DB_CONFIG);
module.exports = db;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since you have dotenv installed then we can make use of &lt;code&gt;process.env&lt;/code&gt; to have access to the variables in the &lt;code&gt;.env&lt;/code&gt; files and also use the harperive package to connect to our Harperdb cloud instance, which you can use to communicate to the database anywhere in your application using the exported &lt;code&gt;db&lt;/code&gt;, I will show you how it‚Äôs done shortly.&lt;/p&gt;

&lt;p&gt;Proceed to import all the packages you have installed in your &lt;code&gt;index.js&lt;/code&gt;, it should look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   // import express
const express = require("express");
const app = express();

//Parse URL-encoded bodies - Allows us to retrieve data from submitted data
app.use(express.urlencoded({ extended: true }));

// import cors
var cors = require("cors");
app.use(cors());

// import the harperdb instance
const db = require("./dbconfig");

// your preferred server port
const port = 3000;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#building-the-todo-list-create-operation"&gt;
  &lt;/a&gt;
  Building the todo list Create Operation
&lt;/h1&gt;

&lt;p&gt;Welcome, this section is where you will learn how to develop the CRUD endpoints (routes) that will allow anyone to create a new todo item in your application.&lt;/p&gt;

&lt;p&gt;Let‚Äôs break this down; in order to achieve this, a user must submit an item through a form, and our todo list will have the following property&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;todo:&lt;/strong&gt; this is what the user wants to do i.e. ‚Äúbuy bread in the evening‚Äù&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;status:&lt;/strong&gt; this is the completion status of a todo item and it is pending by default&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#what-we-need-to-achieve-this"&gt;
  &lt;/a&gt;
  What we need to achieve this
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Create a POST route, that the frontend can send data to, through a form,&lt;/li&gt;
&lt;li&gt;Find a way to retrieve the todo from the form,&lt;/li&gt;
&lt;li&gt;Validate the form submission,&lt;/li&gt;
&lt;li&gt;Prepare the todo and its completion status into a new object,&lt;/li&gt;
&lt;li&gt;Ensure to catch any errors and use asynchronous JavaScript,&lt;/li&gt;
&lt;li&gt;Send the new todo to the Harperdb cloud instance,&lt;/li&gt;
&lt;li&gt;And finally notify the frontend with success or error message&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let‚Äôs write some code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// 1. create your post route that handles creating new todo item
app.post("/add", async (req, res) =&amp;gt; {
  // 2. retrieve the todo from req.body
  // 3. Validate the todo to nsure the user does not submit an empty form
  if (!req.body.todo || req.body.todo === "") {
    res.status(400).send("Todo is required");
  } else {
    // 4. prepare the todo in an object
    const option = {
      todo: req.body.todo,
      status: "pending",
    };
    // 5. ensure to catch the error using try/catch
    try {
      // 6. if the todo is not empty
      const response = await db.insert({
        table: "items",
        records: [option],
      });
      // 7. notify the frontend or sender with the success response
      res.status(200).send(response);
    } catch (error) {
      // 7. notify the frontend or sender with the error response
      res.status(500).send(error);
    }
  }
});

// just a notification in the console
app.listen(port, () =&amp;gt; {
  console.log(`Your server ‚ö° is running üèÉ‚Äç‚ôÇÔ∏è on http://localhost:${port}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#building-the-todo-list-read-operation"&gt;
  &lt;/a&gt;
  Building the todo list Read Operation
&lt;/h1&gt;

&lt;p&gt;The READ operation is used to retrieve data from the database, and for our todo application, we are going to make use of it to retrieve all the available todo items that have been added from the Create operation endpoint.&lt;/p&gt;

&lt;p&gt;In order to retrieve all the todo items in our Harperdb cloud instance, we need to follow the steps below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a GET route&lt;/li&gt;
&lt;li&gt;Ensure to catch any errors and use asynchronous JavaScript&lt;/li&gt;
&lt;li&gt;Use the query method to select every data from a table&lt;/li&gt;
&lt;li&gt;And finally notify the frontend with success or error message
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// 1. route to retrieve all todos in the database
app.get("/todos", async (req, res) =&amp;gt; {
  // 2. use try/catch to control errors
  try {
    // 3. user query method to get all todo from the database table
    const response = await db.query("SELECT * FROM todos.items");
    // 4. send success message to the frontend
    res.status(200).send(response);
  } catch (error) {
    // 4. send error message to the frontend
    res.status(500).send("something went wrong");
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#building-the-todo-list-update-operation"&gt;
  &lt;/a&gt;
  Building the todo list Update Operation
&lt;/h1&gt;

&lt;p&gt;The UPDATE operation is used to modify or edit data in the database and for our todo list application, a user can decide to change their entry for a todo or update the status of any todo items say from &lt;code&gt;pending&lt;/code&gt; to &lt;code&gt;completed&lt;/code&gt; or as the case might be in the frontend design.&lt;/p&gt;

&lt;p&gt;In order to implement the update operation in our application, the following must be put into check:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a POST route,&lt;/li&gt;
&lt;li&gt;Setup the new todo details in an object (the hash attribute is required),&lt;/li&gt;
&lt;li&gt;Ensure to catch the errors and use async/await,&lt;/li&gt;
&lt;li&gt;Send the new todo to the backend using the update method,&lt;/li&gt;
&lt;li&gt;And finally notify the frontend with success or error message.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// 1. route to update a todo
app.post("/edit", async (req, res) =&amp;gt; {
  // 2. set the updated todo and specify the todo identifier - hash attribute
  const option = {
    id: req.body.id,
    todo: req.body.todo,
    status: req.body.status,
  };
  // 3. use try/catch to control errors
  try {
    // 4. send the updated todo
    const response = await db.update({
      table: "items",
      records: [option],
    });
    // 5. send success message to the frontend
    res.status(200).send(response);
  } catch (error) {
    // 5. send error message to the frontend
    res.status(500).send(error);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#building-the-todo-list-delete-operation"&gt;
  &lt;/a&gt;
  Building the todo list Delete Operation
&lt;/h1&gt;

&lt;p&gt;The DELETE operation allows users to remove unwanted data, and in our todo application, a user should be able to delete/remove completed items from their todo.&lt;/p&gt;

&lt;p&gt;Follow the instructions below to add a delete operation to your backend application:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a POST route that expects a parameter in its URL,&lt;/li&gt;
&lt;li&gt;Get the parameter  from the URL parameter,&lt;/li&gt;
&lt;li&gt;Ensure to catch errors and use async/await,&lt;/li&gt;
&lt;li&gt;Use the Harperdb delete method to remove the todo from the database,&lt;/li&gt;
&lt;li&gt;And finally notify the frontend with success or error message.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// 1. route to delete a todo using its id
app.post("/delete/:todo_id", async (req, res) =&amp;gt; {
  // 2. get the id from the url parameter
  const { todo_id } = req.params;
  // 3. use try/catch to control errors
  try {
    // 4. Send a delete request to the database
    const response = await db.delete({
      table: "items",
      hashValues: [todo_id],
    });
    // 5. send success message to the frontend
    res.status(200).send(response);
  } catch (error) {
    // 5. send error message to the frontend
    res.status(500).send(error);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-our-application-with-hoppscotchio"&gt;
  &lt;/a&gt;
  Testing Our Application With HoppScotch.io
&lt;/h2&gt;

&lt;p&gt;Congratulations on getting to the API testing section, you should be proud of yourself, I have created a GitHub git for the complete code of our todo list backend application HERE&lt;/p&gt;

&lt;p&gt;In this section, we will be testing our backend application using hoppscotch.io, head to hoppscotch.io, and follow the instruction below to test along.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-add-todo-route-endpoint"&gt;
  &lt;/a&gt;
  Testing the Add Todo Route Endpoint
&lt;/h2&gt;

&lt;p&gt;To ensure that a new todo item sent from the frontend to our backend application will be stored successfully in the database, we need to test the endpoint URL first by pasting the add todo URL &lt;code&gt;http://localhost:3000/add&lt;/code&gt; in the Hoppscotch URL bar as shown below. You can visit here to launch Hoppscotch&lt;/p&gt;

&lt;p&gt;The add endpoint is a post request, select the &lt;code&gt;POST&lt;/code&gt; method from the dropdown.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-o8Cob9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635407094286_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-o8Cob9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635407094286_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to add a new todo, select the body menu and select &lt;code&gt;application/json&lt;/code&gt; from the dropdown menu.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;application/json&lt;/code&gt; allows us to send data to the Node.js application from Hoppscotch, which can be retrieved through &lt;code&gt;req.body&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RKRunNqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635407417240_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RKRunNqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635407417240_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can post a new todo item by writing an object of the todo item in the Raw Request Body and clicking on the Send button to make your request to the server as shown below.&lt;/p&gt;

&lt;p&gt;Ensure to add quotes around your object properties &lt;code&gt;"&lt;/code&gt;&lt;code&gt;todo&lt;/code&gt;&lt;code&gt;"&lt;/code&gt; and &lt;code&gt;"&lt;/code&gt;&lt;code&gt;Buy bread in the evening&lt;/code&gt;&lt;code&gt;"&lt;/code&gt;, else your test would fail. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Zg5PA5K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635407846973_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Zg5PA5K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635407846973_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If all goes well, you should get a success response from the server like this, this shows that our application is able to receive new data posted through the &lt;code&gt;http://localhost:3000/add&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gd5vy2Dm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635408039851_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gd5vy2Dm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635408039851_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try to add as many todo items as you want, but ensure that the object key is &lt;code&gt;"&lt;/code&gt;&lt;code&gt;todo&lt;/code&gt;&lt;code&gt;"&lt;/code&gt; or else you will get a 404 response, which is coming from our Node.js validation logic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sdzlWxel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635408367544_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sdzlWxel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635408367544_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-getread-todo-route-endpoint"&gt;
  &lt;/a&gt;
  Testing the Get/Read Todo Route Endpoint
&lt;/h2&gt;

&lt;p&gt;In this section, I will show you how to retrieve the todo items that are stored in the database. The endpoint URL to get all todo items from the database is &lt;code&gt;http://localhost:3000/todos&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Paste the URL in the Hoppscotch URL bar and send a &lt;code&gt;GET&lt;/code&gt; request to the server.&lt;/p&gt;

&lt;p&gt;You will get a success response with an array of all the todo items that you have added previously, you should also notice that our todo application has more properties than we added initially during the &lt;code&gt;POST&lt;/code&gt; request to the server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--snARqT9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635408559216_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--snARqT9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635408559216_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;status&lt;/code&gt; property is set for new todo items in our Node.js &lt;code&gt;/add&lt;/code&gt; route while the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;__createdtime__&lt;/code&gt; and the &lt;code&gt;__updatedtime__&lt;/code&gt; are added by the Harperdb database, these are useful when you need to know when an item is been created or last updated, we will be using the &lt;code&gt;id&lt;/code&gt; property in the coming sections&lt;/p&gt;

&lt;p&gt;NOTE: If you encounter any error in this section, it is probably because you‚Äôre not sending a &lt;code&gt;GET&lt;/code&gt; request to the server.&lt;/p&gt;

&lt;p&gt;Testing the Update/Edit Route Endpoint&lt;/p&gt;

&lt;p&gt;In this section, I will show you how to update the record of an item from the database, the URL that we can use to update a todo item on our server is &lt;code&gt;http://localhost:3000/edit&lt;/code&gt; and it only accepts a &lt;code&gt;POST&lt;/code&gt; request.&lt;/p&gt;

&lt;p&gt;We can update the &lt;code&gt;todo&lt;/code&gt; or its &lt;code&gt;status&lt;/code&gt; and to achieve updating a todo item record in the database, we need to specify in the Raw Request Body the &lt;code&gt;id&lt;/code&gt; of the todo item and which property we want to update.&lt;/p&gt;

&lt;p&gt;You can send a &lt;code&gt;GET&lt;/code&gt; request to the server and copy the &lt;code&gt;id&lt;/code&gt; of the todo you wish to update in the database.&lt;/p&gt;

&lt;p&gt;I will be updating the &lt;code&gt;status&lt;/code&gt; property of the todo item to &lt;code&gt;completed&lt;/code&gt; as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--knuF0MLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635411091816_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--knuF0MLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635411091816_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ensure to send a valid &lt;code&gt;id&lt;/code&gt;, else nothing will be updated as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUB-5ceq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635411265815_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUB-5ceq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635411265815_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Proceed to send a &lt;code&gt;GET&lt;/code&gt; request on your own and see if the data is updated, if the todo item is not updated as expected, you should retrace your steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-delete-route-endpoint"&gt;
  &lt;/a&gt;
  Testing the Delete Route Endpoint
&lt;/h2&gt;

&lt;p&gt;In this section, I will show you how to remove an item from the database, and the URL to achieve this is &lt;code&gt;http://localhost:3000/delete/:id&lt;/code&gt;, this URL is quite different from other routes, it takes in a parameter called &lt;code&gt;id&lt;/code&gt;, which is the id of the todo item you wish to delete.&lt;/p&gt;

&lt;p&gt;The parameters in the route URL are retrieved in the Node.js routes with &lt;code&gt;req.params&lt;/code&gt;, your URL should look something like this &lt;br&gt;
&lt;code&gt;http://localhost:3000/delete/c7f032b1-a4a2-457b-ad50-8bb758a9fc10&lt;/code&gt;, paste the URL in the Hoppscotch URL bar and send a &lt;code&gt;POST&lt;/code&gt; request to the server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pq_aof7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635411821793_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pq_aof7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635411821793_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The server will ignore the Raw Request Body as it only retrieves data sent through the URL parameter and the todo item with the specified &lt;code&gt;id&lt;/code&gt; will be deleted from the database.&lt;/p&gt;

&lt;p&gt;Send a &lt;code&gt;GET&lt;/code&gt; request to fetch the todo items in our database and check the updated items.&lt;/p&gt;

&lt;p&gt;I will receive an empty array in my case because I only have a single todo item which I have also deleted, you will receive other todo items if you have more than two.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oajmUnut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635412284723_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oajmUnut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0C4FF1D9B70964D280682D51F8A08888FC2728AC9700156CDF9B7DB74429660D_1635412284723_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, you have learned how to set up a Node.js backend project, connect it to a database, write your backend CRUD logic and test it using Hoppscotch an API testing tool, with this knowledge you‚Äôve gained from this reading, you are good to go to kickstart your personal project and also apply it in any other backend project.&lt;/p&gt;

&lt;p&gt;Thanks for reading, I hope to see your comments and the cool things you will build going forward.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-we-installed-for-this-project"&gt;
  &lt;/a&gt;
  What we installed for this project
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;express - Node.js fast framework&lt;/li&gt;
&lt;li&gt;harperive - Helps us to connect our Node.js to Harperdb&lt;/li&gt;
&lt;li&gt;nodemon - Helps us to restart our Node.js server when there‚Äôs a change&lt;/li&gt;
&lt;li&gt;dontenv - Allows us to have access to variables in the &lt;code&gt;dot.env&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;cors - Allows two origins to share resources&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>backend</category>
      <category>node</category>
      <category>express</category>
    </item>
    <item>
      <title>Click label  to choose radio button TailwindCSS's peer class</title>
      <author>thomasvanholder</author>
      <pubDate>Sat, 20 Nov 2021 08:08:20 +0000</pubDate>
      <link>https://dev.to/thomasvanholder/click-label-to-choose-radio-button-tailwindcsss-peer-class-39nb</link>
      <guid>https://dev.to/thomasvanholder/click-label-to-choose-radio-button-tailwindcsss-peer-class-39nb</guid>
      <description>&lt;p&gt;With Tailwind's release of its Just-In-Time compiler, the &lt;code&gt;peer&lt;/code&gt; class has been &lt;a href="https://tailwindcss.com/docs/just-in-time-mode#sibling-selector-variants"&gt;introduced&lt;/a&gt;. The peer class is practical when changing an HTML element's behavior based on a previous sibling's state. Radio buttons chosen by label click are such a use-case.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-to-choose-radio-by-label-click"&gt;How to choose radio by label click&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tailwind-peer-class"&gt;Tailwind Peer class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#single-radio-button"&gt;Single radio button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiple-radio-buttons"&gt;Multiple radio buttons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-choose-radio-by-label-click"&gt;
  &lt;/a&gt;
  How to choose radio by label click
&lt;/h2&gt;

&lt;p&gt;A label click will select a radio by matching two attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;radio button: &lt;strong&gt;id&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;label: &lt;strong&gt;for&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-peer-class"&gt;
  &lt;/a&gt;
  Tailwind Peer class
&lt;/h2&gt;

&lt;p&gt;You can add peer behavior by adding two classes to the HTML.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the &lt;code&gt;peer&lt;/code&gt; class to the HTML tag you want to observe the state for.&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;peer-checked&lt;/code&gt; class, followed by the desired behavior change, to a sibling element.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#single-radio-button"&gt;
  &lt;/a&gt;
  Single radio button
&lt;/h2&gt;

&lt;p&gt;Let's start with a single radio button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7FNmIyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhrongkmz8a0tz07j77u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7FNmIyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhrongkmz8a0tz07j77u.gif" alt="Single radio" width="800" height="632"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sr-only peer"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"answer"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"answer_yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex p-5 bg-white border border-gray-300 rounded-lg cursor-pointer focus:outline-none hover:bg-gray-50 peer-checked:ring-green-500 peer-checked:ring-2 peer-checked:border-transparent"&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"answer_yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Yes&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute hidden w-5 h-5 peer-checked:block top-5 right-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 üëç
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the input radio with a class &lt;code&gt;peer&lt;/code&gt; is chosen, its sibling label and div will change:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The label gets a green border.
Due to &lt;code&gt;peer-checked:ring-green-500 peer-checked:ring-2 peer-checked:border-transparent&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The icon, initially hidden, appears.
Due to &lt;code&gt;peer-checked:block&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#multiple-radio-buttons"&gt;
  &lt;/a&gt;
  Multiple radio buttons
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V5DVuBq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e18y2g7eh1y6i2i6tgmg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5DVuBq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e18y2g7eh1y6i2i6tgmg.gif" alt="Multiple radio buttons" width="800" height="525"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A single radio button does not make much sense, so let's add in 2 other options and display the radio buttons in a grid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid grid-cols-3 gap-x-5 m-10 max-w-md mx-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sr-only peer"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"answer"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"answer_yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex p-5 bg-white border border-gray-300 rounded-lg cursor-pointer focus:outline-none hover:bg-gray-50 peer-checked:ring-green-500 peer-checked:ring-2 peer-checked:border-transparent"&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"answer_yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Yes&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute hidden w-5 h-5 peer-checked:block top-5 right-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      üëç
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sr-only peer"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"no"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"answer"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"answer_no"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex p-5 bg-white border border-gray-300 rounded-lg cursor-pointer focus:outline-none hover:bg-gray-50 peer-checked:ring-red-500 peer-checked:ring-2 peer-checked:border-transparent"&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"answer_no"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;No&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute hidden w-5 h-5 peer-checked:block top-5 right-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      üëé
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sr-only peer"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"maybe"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"answer"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"answer_maybe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex p-5 bg-white border border-gray-300 rounded-lg cursor-pointer focus:outline-none hover:bg-gray-50 peer-checked:ring-yellow-500 peer-checked:ring-2 peer-checked:border-transparent"&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"answer_maybe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Maybe&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute hidden w-5 h-5 peer-checked:block top-5 right-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      ü§î
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can combine multiple peer classes into a single document as long as a parent class (in this case, the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) acts as a separator.&lt;/p&gt;

&lt;p&gt;That's it. &lt;/p&gt;

&lt;p&gt;Purposeful radio buttons without any JS or a custom CSS class.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>6 features of tasks that can be automated üìë</title>
      <author>Lorena Ciutacu</author>
      <pubDate>Sat, 20 Nov 2021 07:52:57 +0000</pubDate>
      <link>https://dev.to/n8n/6-features-of-tasks-that-can-be-automated-5am8</link>
      <guid>https://dev.to/n8n/6-features-of-tasks-that-can-be-automated-5am8</guid>
      <description>&lt;p&gt;You're working long hours now, six in the morning to six in the afternoon. Sometimes even eight in the afternoon, six days a week. Sometimes seven days a week. It's a long hustle but it keeps you busy.&lt;/p&gt;

&lt;p&gt;Busy but unfulfilled, because many of the things you do are plain boring, repetitive, unengaging, and could probably be done (better) by a machine. If you've found your way to this article, it means you've had it with manual work and you're ready to start automating at least part of it. Congratulations, welcome to the future of work!&lt;/p&gt;

&lt;p&gt;There are plenty of things in our daily lives that surely would rather be automated than half-heartedly accomplished by a bored human who, mind you, might even make mistakes. Workflow automation platforms like n8n enable you to automate even complex tasks with no code (or a bit of JavaScript, if you insist).&lt;/p&gt;

&lt;p&gt;But how do you decide where to begin? In this post, I present to you &lt;strong&gt;six features of tasks that can (and should) be automated&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-repetitive-tasks"&gt;
  &lt;/a&gt;
  1. Repetitive tasks
&lt;/h2&gt;

&lt;p&gt;Download this from here, upload it there, write this, click that. Repeat 10 times a day, 50 times a year, until the end of time. Or until you discover automation, because tasks like this shouldn't be accomplished manually anymore.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href="https://docs.n8n.io/courses/level-one/chapter-2.html"&gt;getting your daily news&lt;/a&gt;, &lt;a href="https://docs.n8n.io/getting-started/create-your-first-workflow/daily-weather-notifications/"&gt;checking the weather&lt;/a&gt;, &lt;a href="https://n8n.io/workflows/1222"&gt;creating backups of your work&lt;/a&gt; (this is also a reminder to do it!), or &lt;a href="https://n8n.io/blog/learn-how-to-automatically-cross-post-your-content-with-n8n/"&gt;cross-posting articles on different channels&lt;/a&gt; are all activities that can be automated with no code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-boring-tasks"&gt;
  &lt;/a&gt;
  2. Boring tasks
&lt;/h2&gt;

&lt;p&gt;"My favorite part of my job is copy-pasting data from one file into a spreadsheet!", said no one ever. More likely, you wish you could be doing anything but that. If a task is unengaging, it doesn't involve decision-making, higher-order thinking, creativity, or "the human touch", then it's a good candidate for automation.&lt;/p&gt;

&lt;p&gt;For example, a common activity in sales is collecting information about companies (like the number of employees, industry, and location) from the website of a business event, in order to create contacts or leads in a CRM. Instead of manually copy-pasting data, you can create &lt;a href="https://n8n.io/blog/how-uproc-scraped-a-multi-page-website-with-a-low-code-workflow/"&gt;a workflow that does web-scraping&lt;/a&gt;, data transfer, and even &lt;a href="https://n8n.io/workflows/1055"&gt;email validation&lt;/a&gt; for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-frequent-regular-tasks"&gt;
  &lt;/a&gt;
  3. Frequent, regular tasks
&lt;/h2&gt;

&lt;p&gt;It's the end of yet another month and you need to calculate yet another budget for your business, run an inventory on your products and orders. You need to set a reminder and block a full day to get this job done‚Äìa day when you could be doing more exciting work or even take a holiday.&lt;/p&gt;

&lt;p&gt;If the task has to be done at the same time or interval and it involves the same sequence of steps, then it could be automated. In fact, we've already built &lt;a href="https://n8n.io/workflows/1207"&gt;a workflow&lt;/a&gt; for the use case mentioned above.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iEk_4Ieh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://f000.backblazeb2.com/file/n8n-website-images/5c7c9905bf8d406b9f222a375c1b8dda.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iEk_4Ieh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://f000.backblazeb2.com/file/n8n-website-images/5c7c9905bf8d406b9f222a375c1b8dda.png" alt="Workflow for creating backups on GitHub" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-rulebased-tasks"&gt;
  &lt;/a&gt;
  4. Rule-based tasks
&lt;/h2&gt;

&lt;p&gt;Most automation-friendly tasks are rule-based, meaning they follow a logical sequence of steps in the form of "if A, then B, else C". This is the kind of low-level decision-making that can be established by a human and, if you know that the process won't change, delegated to a machine.&lt;/p&gt;

&lt;p&gt;For example, filtering sales orders based on their value was a boring task that our friend &lt;a href="https://docs.n8n.io/courses/level-one/chapter-3.html"&gt;Nathan had to do for his team&lt;/a&gt;, before we taught him how to automate it. In the same way, you could &lt;a href="https://n8n.io/blog/no-code-ecommerce-workflow-automations/"&gt;automate your e-commerce business&lt;/a&gt;, for example by &lt;a href="https://n8n.io/workflows/1075"&gt;filtering positive and negative reviews&lt;/a&gt; or &lt;a href="https://n8n.io/workflows/1206"&gt;issuing invoices&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-softwarebased-tasks"&gt;
  &lt;/a&gt;
  5. Software-based tasks
&lt;/h2&gt;

&lt;p&gt;Did you know that U.S. users had &lt;a href="https://www.statista.com/statistics/267309/number-of-apps-on-mobile-phones/"&gt;on average 20 apps&lt;/a&gt; installed on their mobile? And that organizations worldwide were using &lt;a href="https://www.statista.com/statistics/1233538/average-number-saas-apps-yearly/"&gt;on average 80&lt;/a&gt; software as a service (SaaS) applications? Now think of all the tasks that you're doing daily and how many of those involve transferring or synchronizing data between different apps, without human input.&lt;/p&gt;

&lt;p&gt;For example, if you need to sync data between your CRM and a database, you can create a no-code workflow for that and let the two systems communicate with each other. Don't act as an intermediary machine, you're just making it awkward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-timeconsuming-tasks"&gt;
  &lt;/a&gt;
  6. Time-consuming tasks
&lt;/h2&gt;

&lt;p&gt;I don't know about you, but for me, the most annoying thing about boring tasks is that they are time-consuming. Fine, life and work are not always rainbows and butterflies, sparkling with creativity and meaningful activities. I can do some brainless tasks for a while if needed, but when they start taking up hours of my precious time‚Äìthat's where I draw the line and reach for n8n.&lt;/p&gt;

&lt;p&gt;For example, in one of my previous roles, I was responsible for creating reports, which involved aggregating data from different sources (Google Analytics, BigQuery, Salesforce, Postgres), calculating some custom metrics, and sending the results to management or clients. This kind of reporting could take up to two hours, every month/quarter/year‚Äìor only a few minutes once to set up &lt;a href="https://n8n.io/workflows/892"&gt;a workflow&lt;/a&gt; in n8n.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMMaYPmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://f000.backblazeb2.com/file/n8n-website-images/338ebf4b187a49f2a376b91394ea62a6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMMaYPmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://f000.backblazeb2.com/file/n8n-website-images/338ebf4b187a49f2a376b91394ea62a6.png" alt="Workflow for running inventories on Shopify orders" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, you've learned how to identify tasks that can be automated. To sum up, automatable tasks are &lt;strong&gt;repetitive, boring, regular, rule-based, software-based, and time-consuming&lt;/strong&gt;. Keep this in mind next time you're working on something, and try to automate it!&lt;/p&gt;

</description>
      <category>automation</category>
      <category>nocode</category>
      <category>productivity</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Developing My Own Node CLI Tool! And YOU can Contribute</title>
      <author>The Unfactoring Guru</author>
      <pubDate>Sat, 20 Nov 2021 07:51:41 +0000</pubDate>
      <link>https://dev.to/the_unfactoring_guru/developing-my-own-node-cli-tool-and-you-can-contribute-2164</link>
      <guid>https://dev.to/the_unfactoring_guru/developing-my-own-node-cli-tool-and-you-can-contribute-2164</guid>
      <description>&lt;h2&gt;
  &lt;a href="#i-made-a-cli-tool-and-you-can-contribute"&gt;
  &lt;/a&gt;
  I made a CLI Tool and You Can contribute!
&lt;/h2&gt;

&lt;p&gt;Basically I'm really excited about writing packages. I just created this small tool called bring-me! This basic cli tool just brings you libraries to your current working directory directly from its cdn! You can also add libraries to the repertoir of libraries you have saved for downloading later!&lt;br&gt;
Examples: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;bring-me lib jquery -d /public/js&lt;/code&gt; you will have jquery already integrated in your project!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/devasolutions"&gt;
        devasolutions
      &lt;/a&gt; / &lt;a href="https://github.com/devasolutions/bring-me"&gt;
        bring-me
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      NPM CLI tool for delivering common front-end libraries, frameworks, stylesheets, etc. for lightweight and easy development without needing them stored in node_modules or when internet connection could be a problem in the future.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
bring-me&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7c945076bd8d737b17e8ccfc5afc4ac97671a02b47a132bbc348ee68cf30a0b6/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4064657661736f6c7574696f6e732f6272696e672d6d65"&gt;&lt;img src="https://camo.githubusercontent.com/7c945076bd8d737b17e8ccfc5afc4ac97671a02b47a132bbc348ee68cf30a0b6/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4064657661736f6c7574696f6e732f6272696e672d6d65" alt="npm (scoped)"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e9662fa5103a0a1d2a5e6e282ba7cebc3da286ea7e09f68e09e8d8048f79a50f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f4064657661736f6c7574696f6e732f6272696e672d6d65"&gt;&lt;img src="https://camo.githubusercontent.com/e9662fa5103a0a1d2a5e6e282ba7cebc3da286ea7e09f68e09e8d8048f79a50f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f4064657661736f6c7574696f6e732f6272696e672d6d65" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NPM CLI tool for delivering common front-end libraries, frameworks, stylesheets, etc. for lightweight and easy development without needing them stored in node_modules or when internet connection could be a problem in the future.&lt;/p&gt;
&lt;h1&gt;
Install&lt;/h1&gt;
&lt;p&gt;Install globally with NPM
&lt;code&gt;npm install -g @devasolutions/bring-me&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or install in development
&lt;code&gt;npm install --save-dev @devasolutions/bring-me&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
Introduction&lt;/h1&gt;
&lt;p&gt;Bring-me is a CLI tool used to download popular frameworks from there CDNs so that you can use them offline when needed in mostly Front-End Development scenerios&lt;/p&gt;
&lt;p&gt;Summary:&lt;/p&gt;
&lt;p&gt;Bring-me scans a &lt;code&gt;bmconfig.json&lt;/code&gt; file inside the module's directory to get the most popular frameworks and libraries (bootstrap,bulma,jquery,lodash,phaser at the moment).&lt;/p&gt;
&lt;p&gt;bmconfig.json example:&lt;/p&gt;
&lt;div class="highlight highlight-source-json position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;[
  {
    &lt;span class="pl-ent"&gt;"url"&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-ent"&gt;"file-name"&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jquery.js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-ent"&gt;"lib-name"&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;jquery&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-ent"&gt;"format"&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;js&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-ent"&gt;"version"&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3.6.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  },
  &lt;span class="pl-ii"&gt;...&lt;/span&gt;
]&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;bmconfig.json fields:&lt;/p&gt;
&lt;p&gt;url: (contains the url of the library from cdn)
file-name: (the‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/devasolutions/bring-me"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I need people to help with creating more basic commands, fefactoring, and improving documentation. So anybody is welcome to participate!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Regards&lt;/li&gt;
&lt;li&gt;The unfactoring guru&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>npm</category>
      <category>node</category>
      <category>cli</category>
    </item>
    <item>
      <title>Django RestApis example ‚Äì GET/POST/PUT/DELETE requests to MongoDb database
</title>
      <author>Harry Nguyen</author>
      <pubDate>Sat, 20 Nov 2021 07:44:12 +0000</pubDate>
      <link>https://dev.to/harrynguyen88/django-restapis-example-getpostputdelete-requests-to-mongodb-database-2pop</link>
      <guid>https://dev.to/harrynguyen88/django-restapis-example-getpostputdelete-requests-to-mongodb-database-2pop</guid>
      <description>&lt;p&gt;&lt;a href="https://ozenero.com/django-restapis-mongodb-example-django-rest-framework-tutorial"&gt;https://ozenero.com/django-restapis-mongodb-example-django-rest-framework-tutorial&lt;/a&gt;&lt;br&gt;
In this tutorial, we‚Äôre gonna look at way to create Django RestAPIs with Get/Post/Put/Delete requests to interact with MongoDb Database using Django REST Framework.&lt;br&gt;
Read more&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Indefinite Arguments</title>
      <author>lizardkingLK</author>
      <pubDate>Sat, 20 Nov 2021 07:44:03 +0000</pubDate>
      <link>https://dev.to/lizardkinglk/indefinite-arguments-4lpe</link>
      <guid>https://dev.to/lizardkinglk/indefinite-arguments-4lpe</guid>
      <description>&lt;p&gt;When your program needs indefinite number of arguments, and let's say,&lt;/p&gt;

&lt;p&gt;i.  You are not allowed to pass a collection or an array. &lt;br&gt;
ii. You are not allowed to overload methods.&lt;/p&gt;

&lt;p&gt;Using varargs is the best option to use in this case.&lt;/p&gt;

&lt;p&gt;Before varargs was introduced in Java 5, the problem was solved by  allowing to use any of the mentioned two ways above.&lt;/p&gt;

&lt;p&gt;A varargs method can pass indefinite number of arguments with the following method definition. (In here the data type is String and args is the name of the argument)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void someMethod (String... args)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below is an use-case that used varargs to solve a problem which involved printing the sum of numbers. &lt;br&gt;
Not allowing to use overloading or passing a collection or an array. &lt;br&gt;
So we use varargs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Add {
    public void add(int... nums) {
        int sum = 0;
        String label = " ";
        for (Integer n: nums) {
            label += n + " ";
            sum += n;
        }
        label = label.trim().replace(" ", "+");
        label += String.format("=%d", sum);
        System.out.println(label);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the context of C# language we change the syntax a little bit.&lt;br&gt;
We add the keyword 'params' to define it is a varargs method.&lt;/p&gt;

&lt;p&gt;It looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void add(params int[] nums)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the same code for above problem in C# language is as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Add {
    public void add(params int[] nums) {
        int sum = 0;
        String label = " ";
        foreach (int n in nums) {
            label += n + " ";
            sum += n;
        }
        label = label.Trim().Replace(" ", "+");
        label += String.Format("={0}", sum);
        Console.WriteLine(label);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Call to your method like below in your main method.&lt;br&gt;
And again -&amp;gt; use any number of arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static void main(String[] args) {
    new Add().add(1, 2, 3);
    new Add().add(1, 2, 3, 4, 5);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learn more about varargs using the following links.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.baeldung.com/java-varargs"&gt;https://www.baeldung.com/java-varargs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>csharp</category>
      <category>oop</category>
    </item>
  </channel>
</rss>
