<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Creating Custom Pipe in Angular</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Sun, 09 Jan 2022 20:01:43 +0000</pubDate>
      <link>https://dev.to/this-is-angular/creating-custom-pipe-in-angular-2pam</link>
      <guid>https://dev.to/this-is-angular/creating-custom-pipe-in-angular-2pam</guid>
      <description>&lt;p&gt;Today we will learn how to create our own Pipe or the Custom Pipe. If you are unaware about what a Pipe is in Angular then I would recommend you to go through the previous articles I wrote on Pipe. You can start from &lt;a href="https://dev.to/this-is-angular/built-in-angular-pipes-part-1-23ec"&gt;here&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The need of custom pipe comes when the built in pipe does not meet our requirement.&lt;/p&gt;

&lt;p&gt;‚ú© So now lets see how can we create our first Pipe ‚ú©&lt;/p&gt;

&lt;p&gt;The CLI command to create a Pipe is -&lt;br&gt;
&lt;code&gt;ng generate pipe &amp;lt;pipe-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;the shorthand&lt;/em&gt; -&lt;br&gt;
&lt;code&gt;ng g p &amp;lt;pipe-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets open the command prompt in the project root and type in the below command -&lt;br&gt;
&lt;code&gt;ng g p custom-pipe-demo&lt;/code&gt;&lt;br&gt;
So here we are saying Angular to create a pipe with the name &lt;br&gt;
&lt;code&gt;custom-pipe-demo&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1WzNGUHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22kromc05e2ncezpd0rq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1WzNGUHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22kromc05e2ncezpd0rq.PNG" alt="Image description" width="721" height="85"&gt;&lt;/a&gt;&lt;br&gt;
and you will see 2 files getting created in the project -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aiJ7Fyj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vzx99bd0fqg391s34cm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aiJ7Fyj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vzx99bd0fqg391s34cm.PNG" alt="Image description" width="486" height="394"&gt;&lt;/a&gt;&lt;br&gt;
The file pointed with the red arrow is the spec file (for writing unit test). We will not talk about it right now.&lt;br&gt;
We are more interested in writing our first pipe and will work with the file pointed with yellow arrow (the second one).&lt;/p&gt;

&lt;p&gt;One more line we can see in the command prompt which tells that the &lt;code&gt;app.module.ts&lt;/code&gt; has been updated. &lt;br&gt;
If you open the app.module.ts file you will see a new line got added and its the name of our pipe.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7fVcsIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73hchtbli3u7bhw4uuqp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7fVcsIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73hchtbli3u7bhw4uuqp.PNG" alt="Image description" width="880" height="313"&gt;&lt;/a&gt;&lt;br&gt;
I will talk about modules in very details in the very next post.&lt;/p&gt;

&lt;p&gt;So lets see how the pipe looks like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'customPipeDemo'
})
export class CustomPipeDemoPipe implements PipeTransform {
  transform(value: unknown, ...args: unknown[]): unknown {
    return null;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets note our observation points -&lt;br&gt;
1Ô∏è‚É£ There is a normal typescript class &lt;code&gt;CustomPipeDemoPipe&lt;/code&gt; &lt;br&gt;
2Ô∏è‚É£ The class implements an interface &lt;code&gt;PipeTransform&lt;/code&gt;&lt;br&gt;
3Ô∏è‚É£ The Class is marked with a &lt;code&gt;@Pipe&lt;/code&gt; decorator&lt;br&gt;
4Ô∏è‚É£ The Pipe Decorator takes an object, which has the name of the pipe&lt;br&gt;
5Ô∏è‚É£ The &lt;code&gt;PipeTransform&lt;/code&gt; interface has a method called &lt;code&gt;transform&lt;/code&gt; which we need to implement (üî¥ its mandatory üî¥)&lt;br&gt;
6Ô∏è‚É£ The &lt;code&gt;transform&lt;/code&gt; method has few arguments. The signature is already provided but we need to tweak it as per our need. The first argument is the value which we need to transform and the remaining args is an array of all the pipe parameters. Remember when we used the date pipe we passed 'short'/ 'medium' etc as parameters.&lt;br&gt;
7Ô∏è‚É£ The type is unknown by default but we can change it.&lt;/p&gt;

&lt;p&gt;So now the next question what we are trying to build using the pipe. &lt;/p&gt;

&lt;p&gt;Say our project has a file picker. Once it picks a file from the system we need to show the file size in Mb by default and if we pass a unit like GB it will convert that accordingly.&lt;/p&gt;

&lt;p&gt;So lets paste the below code and modify the transform function -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  transform(fileSize: number, ...args: string[]): string {
    if (!args.length || args[0] === 'MB') {
      return (fileSize / (1024 * 1024)).toFixed(2) + 'MB';
    } else if (args[0] === 'KB') {
      return (fileSize / 1024).toFixed(2) + 'KB';
    } else {
      return (fileSize / (1024 * 1024 * 1024)).toFixed(2) + 'GB';
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the &lt;code&gt;app.component.html file&lt;/code&gt; -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zD0E3xa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3r0wnibo14bihc3x0ou.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zD0E3xa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3r0wnibo14bihc3x0ou.PNG" alt="Image description" width="478" height="286"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h3&amp;gt;Custom Pipe Demo&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{ 2000405677 | customPipeDemo : 'KB' }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets understand the code on a high level.&lt;br&gt;
The first parameter which will come to the transform function is the value that we need to transform/ alter. In this case &lt;code&gt;2000405677&lt;/code&gt;&lt;br&gt;
Then we are using the pipe operator (|) and then the name of the pipe &lt;code&gt;customPipeDemo&lt;/code&gt;&lt;br&gt;
Then we can pass an argument in this case the unit where we need to convert to in this case &lt;code&gt;KB&lt;/code&gt;&lt;br&gt;
You can pass multiple arguments also and will be received by the args array, in the transform function.&lt;/p&gt;

&lt;p&gt;In the output we will see -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MRJQ3NqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws0fzkiqdzi6j8nl3e2t.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MRJQ3NqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws0fzkiqdzi6j8nl3e2t.PNG" alt="Image description" width="295" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets see what debugger tells us -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C84jYwRh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy3nbpwcu5tf4ggksgl9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C84jYwRh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy3nbpwcu5tf4ggksgl9.PNG" alt="Image description" width="702" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see the argument &lt;code&gt;fileSize&lt;/code&gt; receives the value &lt;br&gt;
&lt;strong&gt;2000405677&lt;/strong&gt;&lt;br&gt;
The &lt;code&gt;args[]&lt;/code&gt; receives &lt;strong&gt;KB&lt;/strong&gt; as the first item in the array which we were passing in the argument.&lt;/p&gt;

&lt;p&gt;Note:&lt;br&gt;
The most important thing is the return keyword.&lt;br&gt;
After we did the transformation you can see we need to return the transformed value else nothing will be displayed in the template/ browser.&lt;/p&gt;

&lt;p&gt;That's all for now my friend üëãüèº &lt;/p&gt;

&lt;p&gt;Hope you enjoyed the reading the post.&lt;br&gt;
If yes do like comment and share.&lt;br&gt;
Coming up next is the Module in Angular. So stay tuned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>tutorials</category>
      <category>pipe</category>
    </item>
    <item>
      <title>Micro Frontends</title>
      <author>Danyson</author>
      <pubDate>Sun, 09 Jan 2022 19:14:45 +0000</pubDate>
      <link>https://dev.to/danyson/micro-front-ends-2f41</link>
      <guid>https://dev.to/danyson/micro-front-ends-2f41</guid>
      <description>&lt;p&gt;&lt;strong&gt;We all familiar with the term Micro Services&lt;/strong&gt;, lot of organizations adapted this pattern to decompose their monolith back-end applications in to seperate entities based on their functions, that can be coveniently developed, tested and deployed with lot of other services.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;While the Front-end mostly kept Monolith.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Now what if we apply this pattern of decomposing a monolith Front-end application to many pieces of Front-end applications?&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-discuss-few-scenarios"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Let's discuss few scenarios:&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A company with lot of experience on CRM applications developed with an very old legacy Native HTML, CSS and JS wants to taste the Latest Angular or React&lt;/li&gt;
&lt;li&gt;A complex food ordering and delivery company with a Front-end that handles ordering, delivery and listing restaurants with their foods needs to manage the code base complex free among various teams working on the same monolith Front-end&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;There can be a solution as mentioned by the below image from Thoughtworks latest article on Micro Front-ends&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZeAW0W4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxbrsxo86e2rce2ceeyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZeAW0W4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxbrsxo86e2rce2ceeyp.png" alt="Micro Front-ends Block Diagram" width="724" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now the question arises, how these different blocks of front end applications route among themselves?&lt;br&gt;
There is one such example as the Thoughtworks article discusses with the term as follows&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#cross-application-routing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Cross Application Routing&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zF0JQkoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puro59aehg2uzld8f3zq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zF0JQkoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puro59aehg2uzld8f3zq.png" alt="Cross Application Routing" width="622" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benifits"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Benifits:&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Adopting this pattern can lead to much smaller source code of each individual micro frontend  than that of source code of a single monolithic frontend. &lt;/li&gt;
&lt;li&gt;These smaller codebases can be  simple and easy to develop for developers. &lt;/li&gt;
&lt;li&gt;We can avoid the complexity due to unwanted coupling between components that needs to be hidden.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#possible-downsides"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Possible Downsides:&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Increased Payload size due to different JS bundles.
&lt;strong&gt;Solution:&lt;/strong&gt; &lt;em&gt;The integration team should know about the possible bottlenecks&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The situation where multiple teams working on differnt components face a co-ordination crisis&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; &lt;em&gt;An intense Test driven Production like deployment cycle must be followed before the actual production deployment&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Final thing is to consider is how we are going to manage when the Micro Frontend components gets increased in numbers?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Explore more on&lt;/strong&gt;&lt;/em&gt; &lt;a href="https://dogealgo.netlify.app/"&gt;dogealgo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://martinfowler.com/articles/micro-frontends.html"&gt;https://martinfowler.com/articles/micro-frontends.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Tiny Softbox ‚Äî Simple light box &amp; color panel</title>
      <author>Alexander Sandberg</author>
      <pubDate>Sun, 09 Jan 2022 18:30:53 +0000</pubDate>
      <link>https://dev.to/alexandersandberg/tiny-softbox-simple-light-box-color-panel-56d1</link>
      <guid>https://dev.to/alexandersandberg/tiny-softbox-simple-light-box-color-panel-56d1</guid>
      <description>&lt;p&gt;Not too long ago I made the decision to switch careers from cross-platform mobile development (React Native) to native iOS development (Swift). I will talk about why in a future post (if I ever get around to writing it).&lt;/p&gt;

&lt;p&gt;As I love learning new stuff by building things, one of the things I did to learn Swift and SwiftUI was to build an app.&lt;/p&gt;

&lt;p&gt;After &lt;a href="https://alexandersandberg.com/joining-practice/"&gt;joining Practice&lt;/a&gt; at the end of 2021, where my colleagues are mostly located in North America, I now have most of my video calls for work when it's dark outside. Due to bad lighting in my office, I made &lt;a href="https://twitter.com/alexandberg/status/1467576459178950656?s=20"&gt;a quick web app&lt;/a&gt; to fix this.&lt;/p&gt;

&lt;p&gt;I realized this would make for a perfect first app built in Swift, and a few days later of tinkering with SwiftUI (which I absolutely love, btw), &lt;a href="https://alexandersandberg.com/tiny-softbox/"&gt;&lt;strong&gt;Tiny Softbox&lt;/strong&gt;&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tTK87pdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idkiwxrohsfmmlsoer9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tTK87pdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idkiwxrohsfmmlsoer9j.png" alt="App Store screenshot of Tiny Softbox" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a very simple app, but it works very well for its purpose. And other than helping with lighting during video calls, the app can also be used for a bunch of other use cases, from photography to reading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KgQ704pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcp33h12jj6zpzne7gea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KgQ704pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcp33h12jj6zpzne7gea.png" alt="App Store screenshot of Tiny Softbox, showing off different use cases for the app" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After experimenting with free apps before (&lt;a href="https://tinyweather.app"&gt;Tiny Weather&lt;/a&gt;), I decided to make Tiny Softbox a paid app‚Äîmostly due to my curiosity for learning about the differences between publishing free vs. paid apps. I priced it at $2/‚Ç¨2, which I thought was a reasonable price considering that you get it for both macOS and iOS with a single purchase.&lt;/p&gt;

&lt;p&gt;It's currently available for Mac, iPhone, and iPad, but I'm considering making an Apple TV app as well.&lt;/p&gt;

&lt;p&gt;For the launch of Tiny Softbox, I &lt;a href="https://twitter.com/alexandberg/status/1472877106963140608?s=20"&gt;tweeted&lt;/a&gt; about it and launched it on &lt;a href="https://www.producthunt.com/posts/tiny-softbox"&gt;Product Hunt&lt;/a&gt; the day after that. The engagement was not amazing, but the feedback I got was very positive, and from the App Store impressions and sales it seems to be off to a great start.&lt;/p&gt;

&lt;p&gt;I love building tiny (but useful) apps like this and hope to find time to build many more. I have a long list of ideas. üôÇ&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://alexandersandberg.com/tiny-softbox/"&gt;&lt;strong&gt;Tiny Softbox&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This post was originally published on my website at &lt;a href="https://alexandersandberg.com/tiny-softbox-announcement/"&gt;alexandersandberg.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>macos</category>
      <category>ios</category>
      <category>swift</category>
    </item>
    <item>
      <title>7 New features In JavaScript You Should Try In 2022üî•!</title>
      <author>Tanmay Vaish</author>
      <pubDate>Sun, 09 Jan 2022 18:06:45 +0000</pubDate>
      <link>https://dev.to/tanmayvaish/7-new-features-in-javascript-you-should-try-in-2022-27bo</link>
      <guid>https://dev.to/tanmayvaish/7-new-features-in-javascript-you-should-try-in-2022-27bo</guid>
      <description>&lt;p&gt;JavaScript has been getting continous updates since 2015, every update more awesome than the otherüëå. Everytime these updates are out, programmersüßë‚Äçüíª from all around the world gets eager to test it out.&lt;/p&gt;

&lt;p&gt;So, to all the impatient programmersüßë‚Äçüíª out there, Today, I have brought bunch of cool feature proposals for you to check out this yearü§©. These made their way to the Stage 4 and are lined up to be part of the &lt;code&gt;Standard EcmaScript&lt;/code&gt; probably till June 2022üíØ.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OwBla-MP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641739259051/UtQdnm8f_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OwBla-MP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641739259051/UtQdnm8f_.png" alt="image.png" width="700" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOURCE:&lt;/strong&gt; &lt;a href="https://medium.com/geekculture/typescript-vs-javascript-e5af7ab5a331"&gt;https://medium.com/geekculture/typescript-vs-javascript-e5af7ab5a331&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#private-methods-and-accessor-for-classes"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ Private Methods and Accessor for Classes
&lt;/h2&gt;

&lt;p&gt;To full leverage OOP's (Object Oriented Programming) Data Hiding Conceptüß∞, This proposal provides any element inside a class to be private, let it be &lt;strong&gt;fields&lt;/strong&gt;, &lt;strong&gt;methods&lt;/strong&gt; or &lt;strong&gt;accessors(getter/setter)&lt;/strong&gt;ü•≥. Thus, we can easily focus on &lt;strong&gt;data security&lt;/strong&gt;üîí.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ButtonToggle&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ButtonToggle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// green - public fields are accessible from outside classes&lt;/span&gt;
&lt;span class="c1"&gt;// SyntaxError: can't be accessed or modified from outside the class&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We have used &lt;code&gt;#&lt;/code&gt; before the field to signify it as a private field.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#top-level-raw-await-endraw-"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ Top Level &lt;code&gt;await&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Till now, we have been using &lt;code&gt;await&lt;/code&gt; operator only with a &lt;code&gt;async&lt;/code&gt; (asynchronous) function. What if I tell you that you can use &lt;code&gt;await&lt;/code&gt; &lt;strong&gt;without&lt;/strong&gt; the &lt;code&gt;async&lt;/code&gt; function with this featureüò±. &lt;/p&gt;

&lt;p&gt;Yes, We can use it! &lt;strong&gt;at the top level of a module without declaration of a &lt;code&gt;async&lt;/code&gt;.üí°&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Isn't it cool?üòé&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lang&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`./messages-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mjs`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// (A)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The dynamic import in line (A) is almost as convenient as using a normal, static import since we‚Äôre using top-level await.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now the question arises that&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-would-we-need-a-raw-await-endraw-at-the-top-level-of-a-module"&gt;
  &lt;/a&gt;
  Why would we need a &lt;code&gt;await&lt;/code&gt; at the &lt;strong&gt;top level of a module&lt;/strong&gt;ü§î?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;‚úÖ Some modules contains asynchronously loaded data, thus It ensures that modules don‚Äôt access asynchronous imports before they are fully initialized.&lt;/li&gt;
&lt;li&gt;‚úÖ In addition, Asynchronous modules are handled transparently by the system: Importers do not need to know if they are asynchronous or not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, top-level await slows down initialization of importing modulesüí°. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#private-slot-checks"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ Private Slot Checks
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Did you know?&lt;/strong&gt;ü§î Private fields have a built-in &lt;code&gt;"brand check"&lt;/code&gt;, which means that if you try to access &lt;strong&gt;a private field within an object&lt;/strong&gt; that doesn't have it installed, the process &lt;strong&gt;throws an exception&lt;/strong&gt;üí°.&lt;/p&gt;

&lt;p&gt;So, to check if object has a private slot or not, &lt;code&gt;in&lt;/code&gt; operator is used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (A)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;In the code above, we are checking if object &lt;code&gt;obj&lt;/code&gt; has private slot &lt;code&gt;#name&lt;/code&gt; or not.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can use &lt;code&gt;in&lt;/code&gt; operator to check &lt;strong&gt;private fields and methods&lt;/strong&gt; as well as &lt;strong&gt;static fields and methodsüí°&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-raw-new-error-endraw-method"&gt;
  &lt;/a&gt;
  4Ô∏è‚É£ &lt;code&gt;new Error()&lt;/code&gt; method
&lt;/h2&gt;

&lt;p&gt;Errors are a great way to diagnose runtime irregularies. This proposals brings forward concept of &lt;strong&gt;chaining errors with causes&lt;/strong&gt; to  additionally help in diagnosing these runtime irregularitiesüî•.&lt;/p&gt;

&lt;p&gt;So, now we can specify the exact error that caused the current error by using &lt;code&gt;new Error&lt;/code&gt; and its subclassesüí°.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;readFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filePaths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;filePaths&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ¬∑¬∑¬∑&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="s2"&gt;`While processing &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;cause&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The property &lt;code&gt;cause&lt;/code&gt; in used to get additional information on the error.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-raw-at-endraw-function"&gt;
  &lt;/a&gt;
  5Ô∏è‚É£ &lt;code&gt;.at()&lt;/code&gt; function
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This one's a little interesting!!&lt;/strong&gt; .Till now, we have been using square brackets &lt;code&gt;[]&lt;/code&gt; for indexing purposes in JavaScript.&lt;/p&gt;

&lt;p&gt;But,  What if we use negative indices instead in this technique&lt;br&gt;
ü§î?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;

&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// (A)&lt;/span&gt;
&lt;span class="c1"&gt;// the code breaks here!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;*The code just breaks at line (A)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In contrast, Array method .at() does the same task but supports both positive and negative indicesüî•.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#regexp-match-indices"&gt;
  &lt;/a&gt;
  6Ô∏è‚É£ RegExp Match Indices
&lt;/h2&gt;

&lt;p&gt;This one is a very useful addition the &lt;em&gt;match object&lt;/em&gt;. The &lt;em&gt;match indices&lt;/em&gt; are a feature of &lt;em&gt;match objects&lt;/em&gt;. If we enable it via the regular expression flag &lt;code&gt;/d&lt;/code&gt;, they provide the &lt;strong&gt;start and end indexes&lt;/strong&gt; of where each group was capturedüî•.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fruits: mango, mangosteen, orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;mango&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// matchAll&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; [
   "mango",
   "mango",
   index: 8,
   input: 'Fruits: mango, mangosteen, orange',
   groups: undefined
 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look closelyüßê what we are going to do next. the &lt;code&gt;/mango/g&lt;/code&gt; will now be converted to &lt;code&gt;/mango/gd&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// /gd instead of the previous /g&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;mango&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; [
 "mango",
 "mango",
 groups: undefined,
 index: 8,
 indices:[]
  [8, 13],
  [8, 13]
 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Just with the addition of a &lt;code&gt;/d&lt;/code&gt; in the Regex, our &lt;em&gt;match object&lt;/em&gt; will provide us with a additional property &lt;code&gt;indices&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#objecthasown-function"&gt;
  &lt;/a&gt;
  7Ô∏è‚É£ Object.hasOwn Function
&lt;/h2&gt;

&lt;p&gt;This proposal is meant to redefine the &lt;code&gt;Object.hasOwnProperty&lt;/code&gt;, simplifying the unnecessary hassels faced by the programmerüî•.&lt;/p&gt;

&lt;p&gt;Its working it Simple! If the specified object has the specified property as its own property, the Object.hasOwn() static method returns true. If the specified property is inherited, or does not exist, the method returns falseüí°.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;has property foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was the code that we were writing till now!üîù&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;has property foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look, How much it simplified the codeüîù !! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thus, &lt;code&gt;Object.hasOwn()&lt;/code&gt; will replace &lt;code&gt;Object.hasOwnProperty&lt;/code&gt; is yearüí°! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next ‚ÅâÔ∏è
&lt;/h2&gt;

&lt;p&gt;There might be some more feature that can be added to &lt;code&gt;EcmaScript 2022&lt;/code&gt;üí°. So, Stay tuned and follow me on:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Twitter:&lt;/strong&gt; &lt;a href="https://twitter.com/tanmay_vaish"&gt;https://twitter.com/tanmay_vaish&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LinkedIn:&lt;/strong&gt; &lt;a href="https://www.linkedin.com/in/tanmay-vaish/"&gt;https://www.linkedin.com/in/tanmay-vaish/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub:&lt;/strong&gt; &lt;a href="https://github.com/tanmayVaish"&gt;https://github.com/tanmayVaish&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hashnode:&lt;/strong&gt; &lt;a href="https://hashnode.com/@tanmayVaish"&gt;https://hashnode.com/@tanmayVaish&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  Acknowledgements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/tc39/proposals/blob/main/finished-proposals.md"&gt;TC39 Page for Finished Proposals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://exploringjs.com/impatient-js/ch_new-javascript-features.html#new-in-es2022"&gt;exploringjs.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://inspiredwebdev.com/everything-new-in-es2022/#class-public-instance-fields--private-instance-fields"&gt;InspiredWebDev&lt;/a&gt; by &lt;a href="https://twitter.com/montalesi"&gt;Alberto Montalesi&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/TiVPWhEJGF8"&gt;Codedamn&lt;/a&gt; by &lt;a href="https://twitter.com/mehulmpt"&gt;Mehul Mohan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://v8.dev/features/top-level-await"&gt;v8.dev&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gist.github.com/Rich-Harris/0b6f317657f5167663b493c722647221"&gt;Top-level 'await' is a footgun&lt;/a&gt; by &lt;a href="https://twitter.com/Rich_Harris"&gt;Rich Harris&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 51: R</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Sun, 09 Jan 2022 17:40:16 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-51-r-2eao</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-51-r-2eao</guid>
      <description>&lt;p&gt;R is a language for "statistical" computing. I'm not generally a fan of the category, and think you'd be much better off using a general purpose language like Python with some "statistical" packages, but let's take a look.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;

&lt;p&gt;R is normally used in interactive environment like Jupyter Notebooks ("Jupyter" being named after Julia, Python, and R, even though it's mostly Python, Python, and Python).&lt;/p&gt;

&lt;p&gt;You can also run &lt;code&gt;R&lt;/code&gt; from command line. It starts super spammy unless you pass &lt;code&gt;-q&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ R -q
&amp;gt; print("Hello, World!")
[1] "Hello, World!"
&amp;gt;
Save workspace image? [y/n/c]: n
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, you can also write a standalone script, with &lt;code&gt;Rscript&lt;/code&gt; binary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env Rscript

print("Hello, World!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./hello.r
[1] "Hello, World!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is going on here with this output? What's the &lt;code&gt;[1]&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;R is extremely array-oriented, so much that it treats everything as an array. So &lt;code&gt;"Hello, World!"&lt;/code&gt; is really a 1-element array with &lt;code&gt;"Hello, World!"&lt;/code&gt; as its first and only element.&lt;/p&gt;

&lt;p&gt;You can see this if you create an array of all values from 200 to 300. It's going to be printed like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; seq(200,300)
  [1] 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217
 [19] 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235
 [37] 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253
 [55] 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271
 [73] 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289
 [91] 290 291 292 293 294 295 296 297 298 299 300
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anyway, this short demonstration aside, this is the actual Hello, World! program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env Rscript

cat("Hello, World!\n")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./hello2.r
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's called &lt;code&gt;cat&lt;/code&gt; because it concatenates the elements of the input, similar to Unix &lt;code&gt;cat&lt;/code&gt; command. In both cases, you can use it for just a single input, in which case the name can be fairly confusing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;We can do the classic FizzBuzz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env Rscript

for (i in seq(1, 100)) {
  if (i %% 15 == 0) {
    cat("FizzBuzz\n")
  } else if (i %% 3 == 0) {
    cat("Fizz\n")
  } else if (i %% 5 == 0) {
    cat("Buzz\n")
  } else {
    cat(i)
    cat("\n")
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That however would be completely missing the point of R. R is array-oriented, and we're operating one element at a time.&lt;/p&gt;

&lt;p&gt;Let's give it another try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env Rscript

i = seq(1, 100)
x = i
x[i %% 3 == 0] = "Fizz"
x[i %% 5 == 0] = "Buzz"
x[i %% 15 == 0] = "FizzBuzz"
cat(x, sep="\n")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's going on here?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;seq(1, 100)&lt;/code&gt; is an array of integers from 1 to 100.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;i = seq(1, 100)&lt;/code&gt; assigns that to &lt;code&gt;i&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;x = i&lt;/code&gt; might be a bit of a surprise, as it copies &lt;code&gt;i&lt;/code&gt;, it doesn't just reference the same array again&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;i %% 3&lt;/code&gt; is an array of remainders of &lt;code&gt;i&lt;/code&gt; divided by 3, so it goes in cycle &lt;code&gt;1 2 0 1 2 0&lt;/code&gt; and so on.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;i %% 3 == 0&lt;/code&gt; is an array of boolean values, so it goes in cycle &lt;code&gt;FALSE FALSE  TRUE FALSE FALSE  TRUE&lt;/code&gt; and so on&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;x[i %% 3 == 0] = "Fizz"&lt;/code&gt; assigns &lt;code&gt;"Fizz"&lt;/code&gt; to those elements of &lt;code&gt;x&lt;/code&gt; where corresponding &lt;code&gt;i %% 3 == 0&lt;/code&gt; is TRUE&lt;/li&gt;
&lt;li&gt;and analogously for &lt;code&gt;Buzz&lt;/code&gt; and &lt;code&gt;FizzBuzz&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;and finally we concatenate the results, using newline as a separator - it's called "separator" but it's also used after the final element&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;

&lt;p&gt;Let's first write a function as if R was a regular language:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env Rscript

fib = function(n) {
  if (n &amp;lt;= 2) {
    1
  } else {
    fib(n - 1) + fib(n - 2)
  }
}

for (i in seq(1, 20)) {
  cat("fib(", i, ") = ", fib(i), "\n", sep="")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./fib.r
fib(1) = 1
fib(2) = 1
fib(3) = 2
fib(4) = 3
fib(5) = 5
fib(6) = 8
fib(7) = 13
fib(8) = 21
fib(9) = 34
fib(10) = 55
fib(11) = 89
fib(12) = 144
fib(13) = 233
fib(14) = 377
fib(15) = 610
fib(16) = 987
fib(17) = 1597
fib(18) = 2584
fib(19) = 4181
fib(20) = 6765
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fibonacci-with-matrices"&gt;
  &lt;/a&gt;
  Fibonacci with matrices
&lt;/h3&gt;

&lt;p&gt;As R is supposed to be an array-oriented language, it's a reasonable expectation it would have full support for matrices like Octave, Julia and so on. However, it does not.&lt;/p&gt;

&lt;p&gt;Matrices have super painful syntax, and no matrix operations are actually defined - if you try to multiply two matrices, it will just do element-wise multiplication of their elements. There's &lt;code&gt;%*%&lt;/code&gt; for matrix multiplication, but there's no matrix exponentiation.&lt;/p&gt;

&lt;p&gt;Even Ruby has &lt;code&gt;Matrix[[1,1],[1,0]] ** 10&lt;/code&gt; in standard library, and that's not exactly a "scientific" language.&lt;/p&gt;

&lt;p&gt;All right, let's do &lt;code&gt;install.packages("matrixcalc")&lt;/code&gt; from the R repl. Annoyingly that asks me for which server from the list of 84 I want to use to download a few MBs, like it's the early 1990s and any of that matters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env Rscript

require(matrixcalc)

fib = function(n) {
  m = matrix(c(1,1,1,0), ncol=2)
  matrix.power(m, n)[1,2]
}

for (i in seq(1, 20)) {
  cat("fib(", i, ") = ", fib(i), "\n", sep="")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not amazing, but let's give it a go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./fib2.r
Loading required package: matrixcalc
fib(1) = 1
fib(2) = 1
fib(3) = 2
fib(4) = 3
fib(5) = 5
fib(6) = 8
fib(7) = 13
fib(8) = 21
fib(9) = 34
fib(10) = 55
fib(11) = 89
fib(12) = 144
fib(13) = 233
fib(14) = 377
fib(15) = 610
fib(16) = 987
fib(17) = 1597
fib(18) = 2584
fib(19) = 4181
fib(20) = 6765
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We reached another baffling thing. Why the hell did R think it's reasonable to inform me that a script loaded some package. Imagine if JavaScript was doing that and starting an app dumped 1000 entries to the console.&lt;/p&gt;

&lt;p&gt;We need to do something silly to get rid of that message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env Rscript

suppressPackageStartupMessages(require(matrixcalc))

fib = function(n) {
  m = matrix(c(1,1,1,0), ncol=2)
  matrix.power(m, n)[1,2]
}

for (i in seq(1, 20)) {
  cat("fib(", i, ") = ", fib(i), "\n", sep="")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetch-some-json"&gt;
  &lt;/a&gt;
  Fetch some JSON
&lt;/h3&gt;

&lt;p&gt;Let's get slightly out of R's comfort zone, and try to fetch some JSON data, and iterate somewhere within it.&lt;/p&gt;

&lt;p&gt;First we need &lt;code&gt;install.packages("httr")&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env Rscript

suppressPackageStartupMessages(require(httr))

# JSON looks like this:
# {
#   "temperature": "+8 ¬∞C",
#   "wind": "17 km/h",
#   "description": "Partly cloudy",
#   "forecast": [
#     {
#       "day": "1",
#       "temperature": "+7 ¬∞C",
#       "wind": "17 km/h"
#     },
#     {
#       "day": "2",
#       "temperature": "+7 ¬∞C",
#       "wind": "9 km/h"
#     },
#     {
#       "day": "3",
#       "temperature": "+8 ¬∞C",
#       "wind": "9 km/h"
#     }
#   ]
# }

url = "https://goweather.herokuapp.com/weather/London"
data = content(GET(url))

for (day in data$forecast) {
  cat("Forecast for", day$day, "is", day$temperature, "\n")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./weather.r
Forecast for 1 is +7 ¬∞C
Forecast for 2 is +7 ¬∞C
Forecast for 3 is +8 ¬∞C
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;R doesn't have dictionaries, but its arrays can have names associated with their columns, which is close enough for this. &lt;code&gt;data$forecast&lt;/code&gt; is like &lt;code&gt;data["forecast"]&lt;/code&gt; in a more usual language. &lt;code&gt;httr&lt;/code&gt; detects JSON, and converts it appropriately, which is always nice.&lt;/p&gt;

&lt;p&gt;If you try to print &lt;code&gt;data&lt;/code&gt;, it looks like a disaster (multiple empty lines preserved), but if you know the structure and you're just reading, it works well enough:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; data
$temperature
[1] "+8 ¬∞C"

$wind
[1] "17 km/h"

$description
[1] "Partly cloudy"

$forecast
$forecast[[1]]
$forecast[[1]]$day
[1] "1"

$forecast[[1]]$temperature
[1] "+7 ¬∞C"

$forecast[[1]]$wind
[1] "17 km/h"


$forecast[[2]]
$forecast[[2]]$day
[1] "2"

$forecast[[2]]$temperature
[1] "+7 ¬∞C"

$forecast[[2]]$wind
[1] "9 km/h"


$forecast[[3]]
$forecast[[3]]$day
[1] "3"

$forecast[[3]]$temperature
[1] "+8 ¬∞C"

$forecast[[3]]$wind
[1] "9 km/h"



&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#should-you-use-r"&gt;
  &lt;/a&gt;
  Should you use R?
&lt;/h3&gt;

&lt;p&gt;I'd advise against it. You're much better off with Python or Julia.&lt;/p&gt;

&lt;p&gt;R is only designed for very specific style of computing, and if you step outside that style, it starts struggling and being awkward real fast. And you'll do that a lot for any real project. Even in data science all the boring stuff like fetching data, parsing it, cleaning it up, and formatting the results generally consume more of the project than the analysis itself, and Python and Julia simply handle such parts better.&lt;/p&gt;

&lt;p&gt;I haven't done much in depth research on that, but from a quick look it doesn't look like R has any ecosystem advantage over Python or Julia. The statistical packages you'd expect are there for all of them, and for the non-statistical ones, R is quite behind.&lt;/p&gt;

&lt;p&gt;If you're a developer, all this should be clear enough, and R - or for that matter other scientific languages - have very limited appeal to developers.&lt;/p&gt;

&lt;p&gt;If you're a data scientist or a researcher, R might tempt you, but I'd strongly recommend learning a general purpose language like Python (or Julia, which is close enough to general purpose). It might be a bit more complicated, but it will give you a lot more power and flexibility than learning something an overly specialized language like R.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-51-r"&gt;Code for the R episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>r</category>
    </item>
    <item>
      <title>Discuss: Would you have one style sheet for all or make a style sheet for each page when making a basic website? </title>
      <author>Cess</author>
      <pubDate>Sun, 09 Jan 2022 17:38:37 +0000</pubDate>
      <link>https://dev.to/cesscode/would-you-have-one-style-sheet-for-all-or-make-a-style-sheet-for-each-page-when-making-a-basic-website-34e1</link>
      <guid>https://dev.to/cesscode/would-you-have-one-style-sheet-for-all-or-make-a-style-sheet-for-each-page-when-making-a-basic-website-34e1</guid>
      <description>&lt;p&gt;So i saw this question on Twitter by &lt;a class="mentioned-user" href="https://dev.to/zocodes"&gt;@zocodes&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;When making a basic website with multiple pages, would you have one style.css sheet for all or make a style sheet for each page? &lt;/p&gt;

&lt;p&gt;What do you guys think?&lt;/p&gt;

&lt;p&gt;One style sheet for each page or different style sheets for different pages?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to toggle dark mode </title>
      <author>Yigit S</author>
      <pubDate>Sun, 09 Jan 2022 17:31:34 +0000</pubDate>
      <link>https://dev.to/yigitsr/how-to-toggle-dark-mode-1p72</link>
      <guid>https://dev.to/yigitsr/how-to-toggle-dark-mode-1p72</guid>
      <description>&lt;p&gt;Hi all. In this post, I'll show you how to create a toggle button to switch between dark and light mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt; &lt;span class="na"&gt;data-theme =&lt;/span&gt;&lt;span class="s"&gt;"light"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, 
initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"styles.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;toggleDark&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"toggle"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Long Live Rock 'n Roll&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Rock and Roll ain't noise pollution!
Rock and Roll will never die!
I like that old time Rock and Roll!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="na"&gt;sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;justify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nx"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="nx"&gt;e1e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="nx"&gt;e1e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;inline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;ffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-result"&gt;
  &lt;/a&gt;
  Final Result
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Yisemiramis/embed/yLzxypB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;I hope you find this tutorial useful. See you on the next article.&lt;br&gt;
Here's the &lt;a href="https://github.com/yigitsr/toggleDark"&gt;Source Code&lt;/a&gt; on GitHub&lt;br&gt;
Here's the &lt;a href="https://www.youtube.com/watch?v=XyDIUOV0SIA"&gt;YouTube Video&lt;/a&gt; where I code it from scratch.&lt;br&gt;
Check it out on &lt;a href="https://codepen.io/Yisemiramis/full/yLzxypB"&gt;CodePen&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Follow me on&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/yigitsr"&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://codepen.io/Yisemiramis"&gt;CodePen&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/ziggywoxx"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.twitch.tv/lemmy_ace"&gt;Twitch&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.instagram.com/ziggywoxx/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 HTML Input types you are missing!</title>
      <author>Anurag Gharat</author>
      <pubDate>Sun, 09 Jan 2022 17:23:25 +0000</pubDate>
      <link>https://dev.to/anuraggharat/5-html-input-types-you-are-missing-48k2</link>
      <guid>https://dev.to/anuraggharat/5-html-input-types-you-are-missing-48k2</guid>
      <description>&lt;p&gt;Input tags in HTML are a way of getting an input from the user. The commonly used input types are text, password, email, number etc. &lt;br&gt;
But there's more to it. Here are 5 input types that every Web Developer must know!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;input type ="&lt;strong&gt;color&lt;/strong&gt;":&lt;br&gt;
You can now have a color picker in your webpage. How cool is that?? Just set type property as color in input tag. You can also pass a initial color value in value attribute.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0XenmLm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w3gusbn30nplp20ipu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0XenmLm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w3gusbn30nplp20ipu5.png" alt="HTML Input type = color" width="880" height="361"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;input type ="&lt;strong&gt;search&lt;/strong&gt;":&lt;br&gt;
Now this type is similar to regular text type but with a small difference. The input box automatically adds a cross icon after you start typing to clear the input field. This is very handy input type when you want to add a search box field.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3di1z-0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7714iz92o0zhy8r5548.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3di1z-0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7714iz92o0zhy8r5548.png" alt="HTML Input type = search" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;input type="&lt;strong&gt;tel&lt;/strong&gt;":&lt;br&gt;
Use this type when you want the user to fill a phone number. When accessed through a touch device (phone/tablet) the input type opens up a numerical keyboard.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YXKhGpKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gw8hvqc4i64tz4re10fe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YXKhGpKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gw8hvqc4i64tz4re10fe.png" alt="HTML Input type = tel" width="880" height="288"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;input type="&lt;strong&gt;datetime-local&lt;/strong&gt;": &lt;br&gt;
This input type allows user to select Time, Date, Month and Year.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btwsSxgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ipdg7tteo17p5wltjgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btwsSxgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ipdg7tteo17p5wltjgb.png" alt="HTML Input type = date and time" width="880" height="412"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;input type="&lt;strong&gt;range&lt;/strong&gt;":&lt;br&gt;
This is another alternative for numerical inputs. This allows user to input a numerical value with a slider control. Use min-max attributes to provide a valid range.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9uVv9ecj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3bdux12nin96cwo3nlt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9uVv9ecj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3bdux12nin96cwo3nlt.png" alt="HTML Input type = range" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sure you try them in your next project! Good luck!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Demystifying Blockchain Technology</title>
      <author>Narayan Subramanian</author>
      <pubDate>Sun, 09 Jan 2022 17:02:16 +0000</pubDate>
      <link>https://dev.to/ieeecsvitc/demystifying-blockchain-technology-2gj4</link>
      <guid>https://dev.to/ieeecsvitc/demystifying-blockchain-technology-2gj4</guid>
      <description>&lt;p&gt;&lt;em&gt;Overview:&lt;/em&gt;&lt;br&gt;
To thrive in this rapidly changing &amp;amp; globally competitive environment, businesses have no option but to be agile, resilient &amp;amp; innovative. This calls for digitalization of the processes which has been accelerated by COVID-19 &amp;amp; Industry 4.0.&lt;/p&gt;

&lt;p&gt;The key challenge to digitalization is Data Security &amp;amp; Transparency. To address these challenges Blockchain has emerged as a possible antidote to one of today‚Äôs most vexing online business challenges ‚Äî how to create greater trust, transparency and accountability for all who wish to transact and interact online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Takeaways&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Understanding Blockchain Technology&lt;/li&gt;
&lt;li&gt;Why use Blockchain?&lt;/li&gt;
&lt;li&gt;How does it work?&lt;/li&gt;
&lt;li&gt;What are the opportunities?&lt;/li&gt;
&lt;li&gt;When to use Blockchain?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#origin-and-history-of-blockchain"&gt;
  &lt;/a&gt;
  Origin and History of Blockchain
&lt;/h2&gt;

&lt;p&gt;In 2008, Satoshi Nakamoto (An Anonymous person/persons), first generated and implemented the first blockchain database as a infrastructure for the bitcoin, the first cryptocurrency ever created.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Satoshi Nakamoto used ‚Äòblock‚Äô and ‚Äòchain‚Äô separately in his paper in October 2008&lt;/li&gt;
&lt;li&gt;Later with time, it became a single word ‚Äòblockchain‚Äô&lt;/li&gt;
&lt;li&gt;From 2014 onward ‚Äòblockchain 2.0‚Äô is the term being referred to new applications of blockchain.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#role-of-blockchain"&gt;
  &lt;/a&gt;
  Role of Blockchain
&lt;/h2&gt;

&lt;p&gt;Industry 4.0, the cause of the fusion of physical and the virtual world has come much forward around the type of technology which have come up around advanced robotics, 3D printing, IOT, Artificial intelligence, big data etc.&lt;/p&gt;

&lt;p&gt;They are the key technologies around but the problem with this has been now when we talk of technology many of us are using it whether we are using digital I mean robotics part whether we are using data analytics it has improved the convenience speed and efficiency certainly but the key thing which we are suffering in the technology is the time of transit from between the transaction and settlement you have all the best technologies around now-a-days but the time cycle is very long it's more of a linear path then there's a duplication of efforts if you have 40 or 50 players involved in the whole supply chain each one is maintaining his own ledger then which one is the truth nobody knows it and if information is all centralized and the centralized data can be changed around so the trust is gone anybody can hack into the centralized system that's the way they lack the trust and the data security.&lt;/p&gt;

&lt;p&gt;We are moving toward digital era but people are having worrisome the more we become digital anybody can hack our data so the concept of blockchain basically avoid those issues around, this is how the blockchain come if you look in this the technology enablers which have come from industry 4.0 like IOT, robotic process, 3d printing, augmented reality, cloud, AI, cyber security of which we all are aware, but the cyber security is not serving the purpose around in many places so the blockchain which is overriding you can see it's a new way of securing a trust transferring the values and storing the data the new way means it is not centralized information. Today when I am having 50 or 60 people in the whole supply chain and every information if it is particularly dealing with funds is going to the bank if anything else is going to some other servers and those servers are centralized so anybody can hack and change it but the moment the blockchain concepts come it's a more of a distributed concept so it's not a centralized a decentralized database and the moment it is decentralized it's not easy to change so that's how the blockchain is coming into our industry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-blockchain-"&gt;
  &lt;/a&gt;
  What is Blockchain ?
&lt;/h2&gt;

&lt;p&gt;In the simplest terms, Blockchain can be described as a data structure that holds transactional records and while ensuring security, transparency, and decentralization. You can also think of it as a chain or records stored in the forms of blocks which are controlled by no single authority. A blockchain is a distributed ledger that is completely open to any and everyone on the network. Once an information is stored on a blockchain, it is extremely difficult to change or alter it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does it mean to be decentralized?&lt;/strong&gt;&lt;br&gt;
Traditional ledgers are centralized - use 3rd parties and middlemen to approve/record transactions Blockchain distributes ledgers across network or participating node ‚Äì no central authority required similar to peer-to-peer torrent file sharing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xhTWC4Rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p91r67vot6grfwnot6ro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xhTWC4Rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p91r67vot6grfwnot6ro.png" alt="Image description" width="601" height="319"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;At its core, blockchain brings together an ecosystem of partners who all choose to collaborate to address inefficiency. There are 4 tenants of the technology that everyone needs to understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shared, Immutable Visibility&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Privacy&lt;/strong&gt;: Blockchain Technology leverages years of research and 
development in cryptography.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Smart Contracts&lt;/strong&gt;: Blockchain smart contracts are not legal 
documents so don‚Äôt think of it that way.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Trust/Consensus&lt;/strong&gt;: Here again, Blockchain leverages cryptography. 
When an event is published to the ledger, the algorithms do a 
couple of things. First, the identity of the participant 
publishing the transaction is validated by other participants.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blockchain owes its name to the way it stores transaction data ‚Äì in blocks that are linked together to form a chain. Each block contains a hash &lt;strong&gt;(a digital fingerprint or unique identifier)&lt;/strong&gt;, timestamped batches of recent valid transactions, and the hash of the previous block.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9O62xPk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzgunz3tj9eiwi986yqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9O62xPk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzgunz3tj9eiwi986yqx.png" alt="Image description" width="850" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In a nutshell, here‚Äôs how blockchain allows transactions to take place:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A blockchain network  makes use of &lt;strong&gt;public and private keys&lt;/strong&gt; so as to make a digital signature ensuring security and consent.&lt;/li&gt;
&lt;li&gt;Once the authentication is ensured through these keys, the necessity for authorization arises.&lt;/li&gt;
&lt;li&gt;Blockchain allows participants of the network to perform mathematical verification and reach a consensus to agree on any particular value.&lt;/li&gt;
&lt;li&gt;While making a transfer, the sender uses their private key and announces the transaction information over the network. A block is made containing information like digital signature, timestamp, and therefore the receiver‚Äôs public key.&lt;/li&gt;
&lt;li&gt;This block of data is broadcasted through the network and therefore the validation process starts.&lt;/li&gt;
&lt;li&gt;Miners all over the network start solving the mathematical puzzle related to the transaction in order to process it. Solving this puzzle requires the miners to take a position their computing power.&lt;/li&gt;
&lt;li&gt;Upon solving the puzzle first, the miner receives rewards within the sort of bitcoins. Such quite problems is mentioned as &lt;strong&gt;proof-of-work&lt;/strong&gt; mathematical problems.&lt;/li&gt;
&lt;li&gt;Once the bulk of nodes within the network come to a consensus and comply with a standard solution, the block is time stamped and added to the prevailing blockchain. This block can contain anything from money to data to messages.&lt;/li&gt;
&lt;li&gt;After the new block is added to the chain, the prevailing copies of blockchain are updated for all the nodes on the network.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#consensus-mechanism"&gt;
  &lt;/a&gt;
  Consensus Mechanism
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Proof Of Work&lt;/strong&gt;&lt;br&gt;
Proof of work &lt;strong&gt;(PoW)&lt;/strong&gt; describes a system that requires a not-insignificant but feasible amount of effort in order to deter frivolous or malicious uses of computing power, such as sending spam emails or launching denial of service attacks. The concept was subsequently adapted to securing digital money by Hal Finney in 2004 through the idea of "reusable proof of work" using the SHA-256 hashing algorithm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TP-n_YOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onjsbezmo3vejtqo4otr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TP-n_YOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onjsbezmo3vejtqo4otr.jpg" alt="Image description" width="880" height="603"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof Of Stake&lt;/strong&gt;&lt;br&gt;
Proof-of-stake &lt;strong&gt;(PoS)&lt;/strong&gt; reduces the amount of computational work needed to verify blocks and transactions that keep the blockchain, and thus a cryptocurrency, secure. Proof-of-stake changes the way blocks are verified using the machines of coin owners. The owners offer their coins as collateral for the chance to validate blocks. Coin owners with staked coins become "validators."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-makes-blockchain-so-lucrative-to-business"&gt;
  &lt;/a&gt;
  What makes blockchain so lucrative to business?
&lt;/h2&gt;

&lt;p&gt;First of all, it reduces operational costs. The removal of intermediaries may be a boon for business because it not only reduces cost but also reduces the purpose of contact ‚Äî improving efficiency and growth.&lt;/p&gt;

&lt;p&gt;Transactions speeds also are improved to a replacement height. For businesses, it's all about efficiency if they will keep their accuracy intact. The use-cases also are in favor of business. Some companies have already shown their interest in blockchain. The Dubai Blockchain Strategy is one example, The Dubai Blockchain Strategy will help Dubai to be the first city fully powered by Blockchain and make Dubai the happiest city on earth. The strategy will be using three strategic pillars: government efficiency, industry creation, and international leadership.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iAaZj1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qfimolaegkh595v1reh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iAaZj1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qfimolaegkh595v1reh.png" alt="Image description" width="796" height="681"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-will-blockchain-disrupt-industries"&gt;
  &lt;/a&gt;
  How Will Blockchain Disrupt Industries?
&lt;/h2&gt;

&lt;p&gt;Several industries like Unilever, Walmart, Visa, etc. use blockchain technology and have gained benefits in transparency, security, and traceability. Considering the benefits blockchain offers, it will revolutionize and redefine many sectors. &lt;br&gt;
Here are the top 5 prominent industries that will be disrupted by blockchain technology in the near future:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Banking&lt;/li&gt;
&lt;li&gt;Cyber Security&lt;/li&gt;
&lt;li&gt;Supply Chain Management&lt;/li&gt;
&lt;li&gt;Healthcare&lt;/li&gt;
&lt;li&gt;Government&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HMHGAVDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43n8vjf8i4wi90par24c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HMHGAVDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43n8vjf8i4wi90par24c.png" alt="Image description" width="880" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This leads us to the end of our article &lt;strong&gt;‚ÄúDemystifying Blockchain Technology‚Äù&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Blockchain is undoubtedly important to our society. It‚Äôs an impact on the current industries. It is unparalleled. With the growth of BaaS and other improvements, it is the only time when most of the industry will start adopting blockchain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, what do you think about blockchain? Do you see the benefits?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>web3</category>
      <category>baas</category>
    </item>
    <item>
      <title>How to Become a Web Developer in 2022</title>
      <author>Elijah Trillionz</author>
      <pubDate>Sun, 09 Jan 2022 16:52:59 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/how-to-become-a-web-developer-in-2022-4cgh</link>
      <guid>https://dev.to/elijahtrillionz/how-to-become-a-web-developer-in-2022-4cgh</guid>
      <description>&lt;p&gt;Hello, welcome, and in this article am going to show you &lt;strong&gt;how to become a Web Developer in 2022&lt;/strong&gt;. There are numerous companies out there who are ready to pay a large sum of money to have a web developer in their company. You may say in 2022? I say Yes in 2022!. There are also a good number of companies and businesses that require web developers to help create a website that will represent their businesses online.&lt;/p&gt;

&lt;p&gt;Before we talk about how to become a web developer, let's quickly look at who a web developer is. If you are ready to sail with me, then let's dive right in&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-a-web-developer"&gt;
  &lt;/a&gt;
  Who is a Web Developer?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8e63E5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/03/Green-and-Monochrome-Photo-Corporate-Website-Facebook-Cover--1024x577.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8e63E5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/03/Green-and-Monochrome-Photo-Corporate-Website-Facebook-Cover--1024x577.png" alt="who" width="880" height="496"&gt;&lt;/a&gt;&lt;br&gt;
A web developer builds World Wide Web applications. In other words, someone who develops or builds websites or web applications is a web developer. The act or process involved in making these websites or web apps is known as Web Development.&lt;/p&gt;

&lt;p&gt;There are three kinds of web developers, Front-End Web Developers, Back-End Web Developers, and Full-Stack Web Developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend-web-developers"&gt;
  &lt;/a&gt;
  Front-End Web Developers
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://intellipaat.com/blog/what-is-front-end-developer/#no2"&gt;Front-end web developers&lt;/a&gt; are involved in making the visible parts (interface) of a website or web app (client-side). What visitors of the website or web app see and interact with is built and maintained by a front-end web developer.&lt;/p&gt;

&lt;p&gt;This includes the beautiful designs, animations, form fields that we see. They can also be called client-side web developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend-web-developers"&gt;
  &lt;/a&gt;
  Back-End Web Developers
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://blog.hubspot.com/website/back-end-developer"&gt;Back-end web developers&lt;/a&gt; are involved in building the unseen parts of a website or web app (server-side) i.e the server. These guys are lovers of logic, data, technical construction of websites.&lt;/p&gt;

&lt;p&gt;Let's say you fill a form in a web app and then receive a notification that the email is already registered. Now you are thinking, how did this website know my email is registered. Well, a back-end web developer figured it out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fullstack-web-developers"&gt;
  &lt;/a&gt;
  Full-Stack Web Developers
&lt;/h3&gt;

&lt;p&gt;These guys do both the work of a front-end web developer and that of a back-end web developer; they basically do everything.&lt;/p&gt;

&lt;p&gt;Okay, now you know the three kinds of web developers, I think it's time you decide which one you love most and that one you love most is what you should do. I will be referring to these three guys again, and by then you should have decided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-become-a-web-developer"&gt;
  &lt;/a&gt;
  How To Become a Web Developer?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQHCE3w0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/Untitled-design-1-1024x591.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQHCE3w0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/04/Untitled-design-1-1024x591.png" alt="how" width="880" height="508"&gt;&lt;/a&gt;To become a web developer, there are certain skills or languages that you need to be familiar with. There are languages we use to communicate with computers as web developers and these are the languages you need to learn. There are a lot of languages but you don't need to learn them all.&lt;/p&gt;

&lt;p&gt;Most times, it is at this point a lot of beginners mix essentials with inessentials and tend to miss the right path. By now you should already know what kind of web developer you want to be, and following that path is what matters and that is exactly what we will be doing now.&lt;/p&gt;

&lt;p&gt;For each of the three kinds of web development, I will show you the languages/skills required and those that are optional, I will also recommend the one you should learn how and where to learn it for free or with a paid plan depending on your budget.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#skillslanguages-to-become-a-frontend-web-developer"&gt;
  &lt;/a&gt;
  Skills/Languages To Become a Front-End Web Developer
&lt;/h3&gt;

&lt;p&gt;They include HTML, CSS, JavaScript, TypeScript, Bootstrap, Tailwind, ReactJS, VueJs, etc. Let\'s analyze where each of them belongs and what they do.&lt;/p&gt;

&lt;p&gt;Of the above, there are three basic skills to learn that almost the others require you to know before using them. Follow the order below;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-markup-languages"&gt;
  &lt;/a&gt;
  1. Markup Languages
&lt;/h4&gt;

&lt;p&gt;You will agree with me that every website or web app has a web page, and every web page contains content (well-structured content). A markup language is what web developers use to structure content on web pages. Simply put, it is what they (web developers) use to display texts, images, buttons, forms, audios, videos to the clients (visitors of the website).&lt;/p&gt;

&lt;p&gt;HTML (HyperText Markup Language) is an example of a Markup Language. HTML is the language I recommend you learn as it is most widely used. HTML5 is the latest release of HTML and a lot of companies are making use of HTML5. So you might wanna learn HTML5 as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where do I learn HTML?&lt;/strong&gt; &lt;a href="https://www.w3schools.com/html/default.asp"&gt;W3Schools has a very concise tutorial on HTML and HTML5 for free&lt;/a&gt;. Check them out. On average, it shouldn't take you more than 3 weeks to learn HTML if you can dedicate at least an hour to studying daily.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-stylesheet"&gt;
  &lt;/a&gt;
  2. StyleSheet
&lt;/h4&gt;

&lt;p&gt;As markup languages display texts, buttons, images, etc, stylesheets style these contents and make them look organized and beautiful, very beautiful.&lt;/p&gt;

&lt;p&gt;CSS (Cascading Style Sheets) is an example of a StyleSheet and it is what you should learn because it is most widely used and required by companies looking for web developers. CSS3 is the latest release of CSS and lots of websites are making use of its features, it will do you more good if you learn it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where do I learn CSS?&lt;/strong&gt; Again &lt;a href="https://www.w3schools.com/css/"&gt;W3Schools has a very concise tutorial on CSS and CSS3 for free.&lt;/a&gt; CSS is very easy to learn, it shouldn\'t take you more than a month if you dedicate 1 hour daily to learning it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-scripting-languages"&gt;
  &lt;/a&gt;
  3. Scripting Languages
&lt;/h4&gt;

&lt;p&gt;Interactions, behaviors, etc of web pages are made with scripting languages. For Example, when you click a button on a website and then something pops up. A scripting language basically automates task executions.&lt;/p&gt;

&lt;p&gt;An example is JavaScript. I will confidently recommend you learn JavaScript. It is widely used in all aspects of development i.e Web Development, Mobile Development, Desktop App Development.&lt;/p&gt;

&lt;p&gt;TypeScript is also a great option to learn along with JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where do I learn JavaScript?&lt;/strong&gt; You can &lt;a href="https://www.w3schools.com/js/default.asp"&gt;learn JavaScript at W3Schools for free&lt;/a&gt; but sincerely that will not be enough. You will need to go wide and as well as have some daily growth activities to get involved with.&lt;/p&gt;

&lt;p&gt;A lot of people say JavaScript is hard, honestly, that is as a result of the approach they used. I heard someone say He has been on JavaScript for three years. Learning JavaScript for three years? That must be frustrating.&lt;/p&gt;

&lt;p&gt;Don't get me wrong though, learning JavaScript never stops. The same way being a student never stops. But this is about the basics, that's terrible in my opinion. So if you use the wrong approach, you may fall victim to depression, confusion, etc.&lt;/p&gt;

&lt;p&gt;Learning JavaScript is tricky but it's not difficult. All you need is to follow the right path and use a good course or tutorial. You may find w3schools difficult to use, so I recommend you use &lt;a href="https://www.codecademy.com"&gt;CodeCademy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CodeCademy gives your projects and exercises to practice with as you learn JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-frameworks-amp-libraries"&gt;
  &lt;/a&gt;
  Web Frameworks &amp;amp; Libraries
&lt;/h3&gt;

&lt;p&gt;The road-map so far is thus, &lt;strong&gt;HTML =&amp;gt; CSS =&amp;gt; JavaScript&lt;/strong&gt;. Not HTML =&amp;gt; JavaScript =&amp;gt; CSS nor JavaScript =&amp;gt; CSS =&amp;gt; HTML. With the above skills you can build a fully functional static website. Exciting right?&lt;/p&gt;

&lt;p&gt;This is the point where you need to build projects with what you've learned. It will help you become better at each of these languages.&lt;/p&gt;

&lt;p&gt;You need to follow the order. When you are done with HTML, CSS, and JavaScript; then you may wanna consider some frameworks and/or libraries.&lt;/p&gt;

&lt;p&gt;There are numerous &lt;a href="https://en.wikipedia.org/wiki/Web_framework"&gt;web frameworks&lt;/a&gt; and libraries for CSS and JavaScript out there but have in mind that their primary job is to make coding easier and faster for you. You can learn web frameworks through their documentations for free. Click on any framework or library mentioned below to access their documentation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#css-frameworks"&gt;
  &lt;/a&gt;
  CSS Frameworks
&lt;/h4&gt;

&lt;p&gt;Styling a website can take days, weeks, or even months. But with CSS frameworks the duration becomes lesser and the workload becomes easier. CSS frameworks have already built-in style templates that you just need to tap into your HTML. &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt; is a better and popular option &lt;a href="https://geekflare.com/best-css-frameworks/"&gt;Here is a good list of other CSS frameworks.&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript-frameworkslibraries"&gt;
  &lt;/a&gt;
  JavaScript Frameworks/Libraries
&lt;/h4&gt;

&lt;p&gt;Libraries like &lt;a href="https://reactjs.org/docs/getting-started.html"&gt;ReactJs&lt;/a&gt;, or frameworks like &lt;a href="https://vuejs.org/v2/guide/"&gt;VueJs&lt;/a&gt; should what I'd say you consider learning. ReactJS is widely used, so you should consider learning.&lt;/p&gt;

&lt;p&gt;So far the road-map is &lt;strong&gt;HTML =&amp;gt; CSS =&amp;gt; JavaScript =&amp;gt; ReactJS&lt;/strong&gt;. With the above skills you can build a fully functional dynamic website (web application).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#skills-to-become-a-backend-web-developer"&gt;
  &lt;/a&gt;
  Skills To Become A Back-End Web Developer
&lt;/h3&gt;

&lt;p&gt;The languages popularly used for back-end development includes Python, Rust, PHP, Java, etc.&lt;/p&gt;

&lt;p&gt;If you already know JavaScript, you do not need the languages listed above to become a back-end web developer. Simply learn &lt;a href="https://nodejs.org/en/docs/"&gt;NodeJs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NodeJS is a JavaScript run-time environment that runs JavaScript on your machine rather than the web browser. With NodeJS you can build servers for your website without learning another language other than JavaScript. NodeJs is by far the easiest to learn, with dedicated 1 hr daily to learning; you will complete it in less than two weeks.&lt;/p&gt;

&lt;p&gt;Learning NodeJs is not the end, you need to learn some other NodeJS frameworks like &lt;a href="https://expressjs.com"&gt;ExpressJs&lt;/a&gt; or Fastify(&lt;a href="https://www.fastify.io"&gt;https://www.fastify.io&lt;/a&gt;). These frameworks won't take you more than a week to learn the basics.&lt;/p&gt;

&lt;p&gt;Also for the back-end, you need to learn a database language/system. You can either learn SQL or NoSQL or both (though not necessary). I recommend learning NoSQL and an example of NoSQL that you should learn is &lt;a href="https://docs.mongodb.com/"&gt;MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So to become a back-end web developer this is the roadmap &lt;strong&gt;NodeJS =&amp;gt; ExpressJS/Fastify =&amp;gt; MongoDB/MySQL&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#skills-to-become-a-fullstack-web-developer"&gt;
  &lt;/a&gt;
  Skills To Become A Full-Stack Web Developer
&lt;/h3&gt;

&lt;p&gt;To become a full-stack web developer, you basically need to know everything, and here is everything&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML =&amp;gt; CSS =&amp;gt; JavaScript =&amp;gt; ReactJS =&amp;gt; NodeJS =&amp;gt; ExpressJS =&amp;gt; MongoDB/MySQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CodeCademy offers a &lt;a href="https://www.codecademy.com/learn/paths/full-stack-engineer-career-path"&gt;premium course&lt;/a&gt; to learn everything listed above and other goodies to become a full-stack web developer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-tool-for-you"&gt;
  &lt;/a&gt;
  A tool for you
&lt;/h3&gt;

&lt;p&gt;Finally, there is a tool I made to go along with this article. It provides a roadmap for you who wants to be a web developer. It shows you what you need to learn, and in what order, and where to learn them. The resources there now, is way more than what you find in this article.&lt;br&gt;
So head there, and see for yourself. It's free to use. and it's called &lt;a href="https://devroadmap.vercel.app"&gt;devRoadMap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also contribute to the resources on &lt;a href="https://github.com/elijah-trillionz/devroadmap"&gt;GitHub&lt;/a&gt;. I hope to feature more dev roadmap on this website soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Choosing between front-end, back-end or both should be based on what you love doing. If you love designing, content structuring; do well to go for front-end dev.&lt;/p&gt;

&lt;p&gt;If you love logic, data analysis then go for back-end dev. If you love both, then full-stack is for you. Becoming the one you love is what makes programming fun for you.&lt;/p&gt;

&lt;p&gt;Alright, that's it. Thank you for reading, I will see you in the next article. Don\'t forget to hit me up and follow me on Twitter &lt;a href="https://twitter.com/elijahtrillionz"&gt;@elijahtrillionz&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>JavaScript 100 days code challenge </title>
      <author>Amir Sohel</author>
      <pubDate>Sun, 09 Jan 2022 16:52:22 +0000</pubDate>
      <link>https://dev.to/amirsohel007/javascript-100-days-code-challenge-4pmh</link>
      <guid>https://dev.to/amirsohel007/javascript-100-days-code-challenge-4pmh</guid>
      <description>&lt;p&gt;Let's solove 100 code probelms each day to keep consistency.&lt;/p&gt;

&lt;p&gt;It's just started 10 days before, I am kee adding solution here ü§üüèª&lt;/p&gt;

&lt;p&gt;GitHub Repository üê• üëáüèªüëáüèªüëáüèª&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/amirSohel007/100-code-days"&gt;https://github.com/amirSohel007/100-code-days&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;each probelm has multiple solutions. If you have some other solution in your mind then fork the repo and add your solution and raise PR for it&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#jslovers"&gt;
  &lt;/a&gt;
  JS_Lovers ‚ù§Ô∏è‚ù§Ô∏è
&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>It's never late ..to be Great </title>
      <author>kanishkakalra1425</author>
      <pubDate>Sun, 09 Jan 2022 16:29:12 +0000</pubDate>
      <link>https://dev.to/kanishkakalra1425/its-never-late-to-be-great-40p</link>
      <guid>https://dev.to/kanishkakalra1425/its-never-late-to-be-great-40p</guid>
      <description>&lt;p&gt;Hello to my lovely reader's hope you all are doing well .In this world Everyone wants to be successful in their life and I am sure that you will be successful one day but this doesn't mean that you will be successful without doing any efforts or just sitting/laying down in your bed.. for being successful  you have to do something. So now the Biggest question arrives.. how do I start? am I capable of doing this ? would it be right for me ? Trust me these are just few things which I have wrote, there so many things which you will face. To accomplish your goal you have to face many problems.. so ask yourself "If not now then when ?".."GO LITTLE ROCKSTAR" stop worrying start doing. go ahead , begin research , make roadmaps , collect all the essential and kick it off..&lt;br&gt;
As it is my first blog please forgive me and my grammatical errors and from now onwards I will write technical blogs.&lt;/p&gt;

&lt;p&gt;THANKS FOR READING #LOVEKK &lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
