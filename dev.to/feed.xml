<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CSS Pseudo-classes: Forms</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 23 Jan 2022 09:14:50 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/css-pseudo-classes-forms-5fjb</link>
      <guid>https://dev.to/dailydevtips1/css-pseudo-classes-forms-5fjb</guid>
      <description>&lt;p&gt;Yesterday we started looking at pseudo-classes that relate to links. In this article, we'll take a look at form-related pseudo-classes.&lt;/p&gt;

&lt;p&gt;I've split this up into a series of four, where this is the second part about form pseudo-states.&lt;/p&gt;

&lt;p&gt;The other parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/css-pseudo-classes-links/"&gt;Link pseudo-states&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Form pseudo-states&lt;/em&gt; (this one 💖)&lt;/li&gt;
&lt;li&gt;Element state selectors (coming soon)&lt;/li&gt;
&lt;li&gt;Other pseudo states (coming soon)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#form-pseudostates"&gt;
  &lt;/a&gt;
  Form pseudo-states
&lt;/h2&gt;

&lt;p&gt;Another significant use case for pseudo-classes is forms.&lt;br&gt;
We already had a glimpse at the &lt;code&gt;focus&lt;/code&gt; states, which can also be used on form elements.&lt;/p&gt;

&lt;p&gt;But there are some more we can leverage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:disabled&lt;/code&gt;: Element is disabled&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:enabled&lt;/code&gt;: Element is active. However, is the default case so rarely used&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:checked&lt;/code&gt;: Checkbox/radio is checked&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:indeterminate&lt;/code&gt;: Checkbox/radio is not true or false&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:placeholder-shown&lt;/code&gt;: Placeholder is active and has no value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:valid&lt;/code&gt;: Field is valid&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:invalid&lt;/code&gt;: Field is invalid&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:in-range&lt;/code&gt;: Number field is in range of options&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:required&lt;/code&gt;: Field is required&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:optional&lt;/code&gt;: Field is optional, again a default state so rarely used&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#-raw-disabled-endraw-amp-raw-enabled-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:disabled&lt;/code&gt; &amp;amp; &lt;code&gt;:enabled&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;As mentioned in the descriptive text for &lt;code&gt;:enabled&lt;/code&gt;, it's also a default state, so it's not often used. As we instead use the main selector to style on.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;:disabled&lt;/code&gt; state to indicate when a form field is disabled, and the user can't change anything in there.&lt;/p&gt;

&lt;p&gt;Let's say we have a button that is disabled until they fill out all fields, for instance.&lt;br&gt;
It's an excellent way to showcase that it's not yet valid to the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:disabled&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lightGray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;not-allowed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the difference in the following CodePen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/QWqzBbW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-checked-endraw-amp-raw-indeterminate-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:checked&lt;/code&gt; &amp;amp; &lt;code&gt;:indeterminate&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The checked and indeterminate pseudo-classes can help style checkboxes and radio buttons.&lt;/p&gt;

&lt;p&gt;The checked class will fire if the element is on, and indeterminate is funny as it targets non-binary states.&lt;/p&gt;

&lt;p&gt;What does that even mean?&lt;br&gt;
A checkbox can be on/off right, but there are rare cases where it can be neither. And that's precisely where indeterminate kicks in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: To be honest never needed for it in my life&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How can we style with the &lt;code&gt;checked&lt;/code&gt; state?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'checkbox'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="no"&gt;hotpink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using the box-shadow here as this is one of the view things that work well for checked states.&lt;/p&gt;

&lt;p&gt;If you plan to style the checkbox further, it might be best to opt for a &lt;a href="https://daily-dev-tips.com/posts/css-custom-checkbox/"&gt;custom checkbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As for the &lt;code&gt;indeterminate&lt;/code&gt;, it's not worth going into detail here as it's such a niche use-case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/indeterminate-checkboxes/"&gt;CSS-tricks has an excellent article&lt;/a&gt; on it if you wish more information.&lt;/p&gt;

&lt;p&gt;Try it out in this CodePen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/NWaeBGQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-placeholdershown-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:placeholder-shown&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Before, I dedicated a more detailed article about the &lt;a href="https://daily-dev-tips.com/posts/css-placeholder-shown-class/"&gt;CSS &lt;code&gt;:placeholder-shown&lt;/code&gt; pseudo class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It can be used to indicate which fields have their placeholder showing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:placeholder-shown&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;teal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which results in this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/mdBajOa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Try and add a value in the bottom input. It should change the appearance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#-raw-valid-endraw-raw-invalid-endraw-amp-raw-inrange-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:valid&lt;/code&gt;, &lt;code&gt;:invalid&lt;/code&gt;, &amp;amp; &lt;code&gt;:in-range&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These are validation classes and can be used to showcase a field that is not valid.&lt;/p&gt;

&lt;p&gt;Let's use an email field. It's the easiest to showcase both the invalid and the valid states.&lt;/p&gt;

&lt;p&gt;We can add a red/green border and shadow based on the validation state like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:invalid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:valid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can try it out in the below CodePen by adding a non-email and email value.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;in-range&lt;/code&gt; one is in line with these two and can be used for number fields to determine if they are in the correct range.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:in-range&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also try this one out, but pick a number between 1 and 10. (Which is the range for the number input)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/poWqZey?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-required-endraw-amp-raw-optional-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:required&lt;/code&gt; &amp;amp; &lt;code&gt;:optional&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This can be used to determine if a field is required or not. The optional state is the default state, so it is unnecessary to state this explicitly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:required&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give all required fields an orange background.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/xxXmJrp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Add Stories to your highlights on Instagram without showing it to stories</title>
      <author>Shaswat Raj</author>
      <pubDate>Sun, 23 Jan 2022 09:04:41 +0000</pubDate>
      <link>https://dev.to/sh20raj/add-stories-to-your-highlights-on-instagram-without-showing-it-to-stories-3g1g</link>
      <guid>https://dev.to/sh20raj/add-stories-to-your-highlights-on-instagram-without-showing-it-to-stories-3g1g</guid>
      <description>&lt;p&gt;Steps :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just upload a story to Instagram.&lt;/li&gt;
&lt;li&gt;Delete it and it will be stored till 30 days in Recently Deleted Section.&lt;/li&gt;
&lt;li&gt;Restore it After 24 hours.&lt;/li&gt;
&lt;li&gt;It will came to your Archive.&lt;/li&gt;
&lt;li&gt;Then Add it to your highlights.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>instagram</category>
      <category>tips</category>
      <category>tricks</category>
      <category>sh20raj</category>
    </item>
    <item>
      <title>Deep dive into React codebase [EP3: Reverse engineer the most famous React snippet]</title>
      <author>Nikita Grechino</author>
      <pubDate>Sun, 23 Jan 2022 08:26:32 +0000</pubDate>
      <link>https://dev.to/fromaline/deep-dive-into-react-codebase-ep3-reverse-engineer-the-most-famous-react-snippet-njj</link>
      <guid>https://dev.to/fromaline/deep-dive-into-react-codebase-ep3-reverse-engineer-the-most-famous-react-snippet-njj</guid>
      <description>&lt;p&gt;In &lt;a href="https://dev.to/fromaline/deep-dive-into-react-codebase-ep2-what-package-from-the-repo-is-the-most-popular-on-npm-2328"&gt;the previous episode&lt;/a&gt; we finished with the React repository setup.&lt;br&gt;
In today's episode, we'll scratch the surface of the actual source code and reverse engineer probably the most well-known React snippet.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#recall"&gt;
  &lt;/a&gt;
  Recall
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#what-we-learned-in-the-previous-episodes"&gt;
  &lt;/a&gt;
  What we learned in the previous episodes
&lt;/h3&gt;

&lt;p&gt;The React monorepo contains a lot of &lt;strong&gt;React-related packages&lt;/strong&gt;, including React core, renderers, reconciler, utility packages, devtools, and testing utilities. &lt;br&gt;
Some of them (like &lt;code&gt;react&lt;/code&gt;, &lt;code&gt;react-dom&lt;/code&gt; and &lt;code&gt;react-reconciler&lt;/code&gt;) are more relevant for developing a good understanding of React source code as &lt;strong&gt;a library for building UI in browser environment&lt;/strong&gt;.&lt;br&gt;
Others are related to more advanced stuff, like testing, tooling, or React Native, and only relevant if we would explore &lt;strong&gt;React with its toolset&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Knowing all this, we are ready to dive straight into the code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#finding-the-right-approach"&gt;
  &lt;/a&gt;
  Finding the right approach
&lt;/h2&gt;

&lt;p&gt;It's hard to come up with the right approach for exploring React codebase, mainly because it's tremendously huge and complex in its current state.&lt;br&gt;
I've already tried to do it a couple of times head-first without an approximate understanding or a plan of how to do it.&lt;br&gt;
This time, we'll try it another way.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#plan-for-today"&gt;
  &lt;/a&gt;
  Plan for today
&lt;/h3&gt;

&lt;p&gt;We'll try to discover the codebase in the most logical way, I could come up with. We won't do the *"start with the &lt;code&gt;package.json&lt;/code&gt;, find an entry &lt;code&gt;index.js&lt;/code&gt; file and move from there"*because it's extremely hard to not get lost this way. &lt;br&gt;
Instead, we'll start with the simplest React code, which most of us have seen dozens of times, and reverse engineer it with the help of the real React source code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This approach &lt;strong&gt;keeps things simple&lt;/strong&gt;, follows a gentle learning curve and allows you to start with the most practical and intriguing stuff. It's similar to how we create production-ready code, starting with the outline of a solution and going into details on demand. Simply put, we forge our own path from the basics to the final destination, not the other way around.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: It's an experimental approach, thus I don't know whether it actually works well in scale.&lt;br&gt;
So if you like it and it works for you, leave a comment to let me know, that I should continue using it. &lt;br&gt;
Or if it's the other way around for you, leave a comment on what was wrong and I'll try to design a better approach, based on your feedback. &lt;br&gt;
Thanks in advance 🙏🏻&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#materials-for-the-episode"&gt;
  &lt;/a&gt;
  Materials for the episode
&lt;/h3&gt;

&lt;p&gt;I set up &lt;a href="https://github.com/fromaline/deep-dive-into-react-codebase"&gt;a repository on GitHub&lt;/a&gt; for this series. We'll explore, experiment, and play around there.&lt;br&gt;
It's a monorepo (yeah, like the React repository), so it will contain a directory for each episode from now on.&lt;br&gt;
Clone the repo to your local machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/fromaline/deep-dive-into-react-codebase.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or open it in your favorite online code editor, like &lt;a href="https://gitpod.io/#https://github.com/fromaline/deep-dive-into-react-codebase"&gt;Gitpod&lt;/a&gt; or &lt;a href="https://githubbox.com/fromaline/deep-dive-into-react-codebase"&gt;CodeSandbox&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-setup"&gt;
  &lt;/a&gt;
  Our setup
&lt;/h3&gt;

&lt;p&gt;In the repo you'll find a directory for the current episode, called &lt;code&gt;ep3&lt;/code&gt; with the simplest possible React setup. It's just an &lt;em&gt;html&lt;/em&gt; page, where &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; is added through &lt;code&gt;unpkg&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/react@17.0.0/umd/react.development.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/react-dom@17.0.0/umd/react-dom.development.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script  &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;em&gt;js&lt;/em&gt; file with a well-known setup, that you can find in virtually any React web application source code in some way or another.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Such a simple setup declutters our experience of investigation. It removes complexity, that modern frontend tooling, like &lt;em&gt;webpack&lt;/em&gt; and &lt;em&gt;babel&lt;/em&gt; introduce for the convenience of end-users. But we don't want to be just end-users, we aspire to develop in-depth understanding, thus we don't need these tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-up-and-running"&gt;
  &lt;/a&gt;
  Get up and running
&lt;/h3&gt;

&lt;p&gt;Now we need to spin up the &lt;code&gt;index.html&lt;/code&gt; in the browser. &lt;br&gt;
I use &lt;a href="https://www.npmjs.com/package/http-server"&gt;&lt;code&gt;http-server&lt;/code&gt;&lt;/a&gt;, but you may use your favorite one, like &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;&lt;code&gt;live-server&lt;/code&gt;&lt;/a&gt; from VSCode or Python &lt;a href="https://docs.python.org/3/library/http.server.html"&gt;&lt;code&gt;http.server&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http-server episodes/ep3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing, that we see is an error like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Uncaught SyntaxError: Unexpected token '&amp;lt;' index.js:1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K7dei-G0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z46qjkg9g0p1z1wb0m2u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K7dei-G0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z46qjkg9g0p1z1wb0m2u.png" alt="error in jsx" width="566" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This error occurred because we use JSX without an appropriate tool, like &lt;em&gt;Babel&lt;/em&gt; to compile it. So we need to &lt;strong&gt;"compile" JSX ourselves&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What Babel does internally is pretty straightforward. It replaces JSX with calls to React.createElement or other function if it was explicitly specified with special annotation syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @jsx React.createElement&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So after the transpilation phase happened the code looks like plain old JavaScript. You may double-check it in &lt;a href="https://babeljs.io/repl#?browsers=defaults&amp;amp;build=&amp;amp;builtIns=false&amp;amp;corejs=3.6&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=MYewdgzgLgBApgDwIYFsAOAbOMC8MA8AJgJYBuAfABJwYYgwDuIAThoQIT4D0JFQA&amp;amp;debug=false&amp;amp;forceAllTransforms=true&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=false&amp;amp;fileSize=true&amp;amp;timeTravel=false&amp;amp;sourceType=module&amp;amp;lineWrap=true&amp;amp;presets=react&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.16.11&amp;amp;externalPlugins=&amp;amp;assumptions=%7B%7D"&gt;Babel REPL&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n4LKAip_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2jawb9w0nwzj5frr36t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n4LKAip_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2jawb9w0nwzj5frr36t.png" alt="screenshot of the browser with the example" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Now we see our &lt;code&gt;Hello world&lt;/code&gt; example and may finally go on!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reverse-engineering"&gt;
  &lt;/a&gt;
  Reverse engineering
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#the-goal"&gt;
  &lt;/a&gt;
  The goal
&lt;/h3&gt;

&lt;p&gt;Our goal for today's and the next episode is to grasp how &lt;code&gt;react-dom&lt;/code&gt; mounts the tree of React components to the real DOM. It's important to understand this process, because it's the first thing, that you initialize in React app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-hypothesis"&gt;
  &lt;/a&gt;
  The hypothesis
&lt;/h3&gt;

&lt;p&gt;Let's form a hypothesis to start with. &lt;br&gt;
I assume from my understanding of how real DOM works, that &lt;code&gt;react-dom&lt;/code&gt; traverses a tree of React components (virtual DOM), formed by &lt;code&gt;react&lt;/code&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then &lt;code&gt;react-dom&lt;/code&gt; creates a real DOM structure, based on the virtual DOM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then &lt;code&gt;react-dom&lt;/code&gt; mounts the result in provided container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#test-the-hypothesis"&gt;
  &lt;/a&gt;
  Test the hypothesis
&lt;/h3&gt;

&lt;p&gt;Now we'll test the hypothesis and find out whether we were right or not.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-raw-reactcreateelement-endraw-does-and-how-it-works"&gt;
  &lt;/a&gt;
  What &lt;code&gt;React.createElement&lt;/code&gt; does and how it works?
&lt;/h4&gt;

&lt;p&gt;First of all, let's check out how &lt;code&gt;React.createElement&lt;/code&gt; actually works and what it returns. We already know, that it relates to the &lt;code&gt;react&lt;/code&gt; package, thus let's check the &lt;code&gt;packages/react&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// packages/react/index.js&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here it is, so then find the place from where it's exported.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// packages/react/src/React.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;__DEV__&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;createElementWithValidation&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createElementProd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, &lt;code&gt;createElement&lt;/code&gt;'s value differs, based on &lt;code&gt;__DEV__&lt;/code&gt; global variable, which in turn defines whether code was compiled in so-called &lt;em&gt;development mode&lt;/em&gt; or not.&lt;/p&gt;

&lt;p&gt;Based on the name of these two functions and the meaning of the &lt;code&gt;__DEV__&lt;/code&gt; variable, I assume, that the &lt;code&gt;createElementWithValidation&lt;/code&gt; does additional validation to provide meaningful error messages and warnings in &lt;em&gt;development mode&lt;/em&gt;. And &lt;code&gt;createElementProd&lt;/code&gt; is probably more performant and generally tailored towards production use.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-raw-createelementwithvalidation-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;createElementWithValidation&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;Firstly let's check the former assumption by introducing an error in our React app. We provide a null value instead of the actual valid type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now we see a typical React warning and can easily trace where it was initialized.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E5DMNs5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7aqb84jg60gpgyouwu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E5DMNs5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7aqb84jg60gpgyouwu1.png" alt="Warning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: null. from react.development.js:245" width="880" height="110"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The place, where it was initially called is our &lt;code&gt;createElementWithValidation&lt;/code&gt; function, so click on the &lt;code&gt;react.development.js:2240&lt;/code&gt; to see the actual code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vD7_kyWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axgg2987b3hvzx3od8jz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vD7_kyWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axgg2987b3hvzx3od8jz.png" alt="trace warning" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It becomes clear from this code snippet, that our first assumption is near the truth. &lt;code&gt;createElementWithValidation&lt;/code&gt; checks whether provided &lt;code&gt;type&lt;/code&gt; is valid and if not throws different warnings, based on what exactly is wrong with provided type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: You may ask, why is there such weird statement in the code?&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React.createElement: type is invalid...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Simply put, it's a block statement, but without &lt;code&gt;if&lt;/code&gt; condition. &lt;br&gt;
&lt;code&gt;if&lt;/code&gt; statement was stripped out by webpack, because it's a development build, thus all warnings and errors must show up.&lt;br&gt;
This topic is a bit out of scope of the article, for more info check out &lt;a href="https://twitter.com/fromaline/status/1484949311897096192"&gt;my Twitter thread&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now let's remove the error and observe what else happens inside this function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createElementWithValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;validType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isValidElementType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// We warn in this case but don't throw. We expect the element creation to&lt;/span&gt;
  &lt;span class="c1"&gt;// succeed and there will likely be errors in render.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;validType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// warnings, but no returns!&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first interesting bit here is how error handling is implemented, there is even a comment about it right after the &lt;code&gt;validType&lt;/code&gt; variable.&lt;br&gt;
React developers don't throw an exception in case the type is invalid, instead, they proceed but expect some errors in the render.&lt;br&gt;
We know that render in React is handled by renderers, in our case&lt;code&gt;react-dom&lt;/code&gt;. &lt;br&gt;
So from this, we can assume, that there are some validations regarding React components and appropriate warnings inside &lt;code&gt;react-dom&lt;/code&gt; itself. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: It's an interesting assumption because it implies, that output of the &lt;code&gt;react&lt;/code&gt; package is not valid all the time and renderers need to validate, what they get from it on its own.&lt;br&gt;
We'll definitely test this assumption in one of the next articles.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's continue with the function. After the initial check, it calls the more general-purpose &lt;code&gt;createElement&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, this fact probably indicates, that there is a single &lt;code&gt;createElement&lt;/code&gt; function, which actually creates the element. And &lt;code&gt;createElementWithValidation&lt;/code&gt; and &lt;code&gt;createElementProd&lt;/code&gt; are only wrappers, that add some extra functionality. &lt;br&gt;
We'll test this assumption after we are done with current observations.&lt;/p&gt;

&lt;p&gt;Here we see the check against null with type coercion and the useful comment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The result can be nullish if a mock or a custom function is used.&lt;/span&gt;
&lt;span class="c1"&gt;// TODO: Drop this when these are no longer allowed as the type argument.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This snippet shows, that &lt;code&gt;element&lt;/code&gt; can be null or even undefined if "a mock or a custom function" is used. &lt;br&gt;
It's hard to say for sure now, how custom function can be used here, because &lt;code&gt;createElement&lt;/code&gt;is hardcoded, but we definitely will figure it out later.&lt;br&gt;
&lt;em&gt;Sidenote: Right now I can't fully understand what's the &lt;code&gt;TODO&lt;/code&gt; part means. My initial guess is, that this check could be removed, whenever null or undefined won't be allowed as a value of the element.&lt;br&gt;
If you have a better idea of what it means, write it in the comments section! I would be grateful.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next thing is a validation of child keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Skip key warning if the type isn't valid since our key validation logic&lt;/span&gt;
&lt;span class="c1"&gt;// doesn't expect a non-string/function type and can throw confusing errors.&lt;/span&gt;
&lt;span class="c1"&gt;// We don't want exception behavior to differ between dev and prod.&lt;/span&gt;
&lt;span class="c1"&gt;// (Rendering will throw with a helpful message and as soon as the type is&lt;/span&gt;
&lt;span class="c1"&gt;// fixed, the key warnings will appear.)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;validateChildKeys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the actual snippet, we can conclude, that key validation only happens, if the initially provided element's type was valid. From the first two sentences of the comment it becomes more obvious what's the reason behind such behavior. &lt;code&gt;validateChildKey&lt;/code&gt; doesn't expect a non-string/function type and as a result can throw confusing errors, that would differ from the production version.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: it's a bit mind-blowing for me, that key validation logic requires the type of the element to be valid because at first glance they seem mostly unrelated.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the third sentence of the comment we again see, that proper error handling is expected from a renderer, instead of the &lt;code&gt;react&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Finally, functions ends with some other validation and a return statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;validateFragmentProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;validatePropTypes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we see a simple return and two separate validations before it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Fragment's&lt;/em&gt; props validation&lt;/li&gt;
&lt;li&gt;General element's props validation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we can conclude, that &lt;a href="https://www.npmjs.com/package/prop-types"&gt;prop-types&lt;/a&gt; validation happens here and props validation is handled differently if the element is &lt;em&gt;fragment&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now let's check what &lt;code&gt;createElementProd&lt;/code&gt; does and how it differs from &lt;code&gt;createElementWithValidation&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-raw-createelementprod-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;createElementProd&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;Let's get back to our &lt;code&gt;packages/react/src/React.js&lt;/code&gt; and trace from where &lt;code&gt;createElementProd&lt;/code&gt; is exported.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// packages/react/src/React.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;__DEV__&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;createElementWithValidation&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createElementProd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use the standard feature of modern IDEs to find where &lt;code&gt;createElementProd&lt;/code&gt; is implemented or just check the imports at the beginning of the file. I'll use the later method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// packages/react/src/React.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createElement&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;createElementProd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ReactElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact &lt;code&gt;createElementProd&lt;/code&gt; is just an &lt;a href="https://twitter.com/fromaline/status/1485147294559350787"&gt;import alias&lt;/a&gt; for the &lt;code&gt;createElement&lt;/code&gt; functions.&lt;br&gt;
So out initial assumption regarding &lt;code&gt;createElementWithValidation&lt;/code&gt; and &lt;code&gt;createElementProd&lt;/code&gt; was nearly correct, but not quite.&lt;br&gt;
In reality, the case is even simpler: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We just have a single &lt;code&gt;createElement&lt;/code&gt; function, that is used in the production environment.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;createElementWithValidation&lt;/code&gt; function adds additional validation to provide meaningful warnings and it's used in the development environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#-raw-createelement-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;createElement&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;With our new knowledge about this whole create-element situation, we just need to figure out what &lt;code&gt;createElement&lt;/code&gt; returns to understand how elements are created in both the prod and dev environment.&lt;br&gt;
To do this let's jump to &lt;code&gt;createElement&lt;/code&gt; function from its call inside &lt;code&gt;createElementWithValidation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N2Fq5K66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3qcaewr6w3i9ndv5bhm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N2Fq5K66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3qcaewr6w3i9ndv5bhm.png" alt="createElement function" width="880" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And put a debugger breakpoint right after the return statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B7U8xP6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w16rpyksjteywzkk9wv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B7U8xP6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w16rpyksjteywzkk9wv6.png" alt="return inside createElement" width="880" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we see what we get from the &lt;code&gt;React.createElement&lt;/code&gt; call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ref&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;props&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;children&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_owner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's fix the inaccurate part of the hypothesis to reflect our new knowledge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tweak-the-hypothesis"&gt;
  &lt;/a&gt;
  Tweak the hypothesis
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I assume from my understanding of how real DOM works, that &lt;code&gt;react-dom&lt;/code&gt; traverses a tree of React components (virtual DOM), formed by &lt;code&gt;react&lt;/code&gt; package.&lt;/p&gt;


&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
 &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;In reality the tree of React components looks more like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$$typeof&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ref&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;props&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;children&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_owner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_self&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_source&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where we were wrong in the original version?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;children&lt;/code&gt; is not separate property, instead, it's a property inside &lt;code&gt;props&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If there is only one child, it's passed without wrapping array. At least if the only child is a text.&lt;/li&gt;
&lt;li&gt;React components have a couple of other properties &lt;em&gt;(we have yet to figure out what are they about)&lt;/em&gt;, more specifically:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$$typeof&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_owner&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_store&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_self&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But overall the first part of our hypothesis was pretty accurate! We just broaden it and fix minor issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;It was a long journey and we learned a ton today! &lt;br&gt;
In the next episode, we are going to continue with our hypothesis. More precisely we'll try to find out what exactly &lt;code&gt;react-dom&lt;/code&gt; does with virtual DOM and how the render actually works. &lt;br&gt;
So I'm looking forward to seeing you in the next episode!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-we-learned-today"&gt;
  &lt;/a&gt;
  What we learned today
&lt;/h3&gt;

&lt;p&gt;IMO, the main thing, that we learned today has nothing to do with React's inner workings. It is rather the approach we can take to understand how some code works under the hood. &lt;br&gt;
So, I hope you'll apply it yourself!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-am-looking-forward-to-similar-content"&gt;
  &lt;/a&gt;
  I am looking forward to similar content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/fromaline"&gt;Follow me on Twitter&lt;/a&gt; for:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fromaline/status/1484449170283024387"&gt;Daily JS/TS tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fromaline/status/1484285901672955912"&gt;Weekly in-depth threads about React source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fromaline/status/1482611926488297473"&gt;Announcements about new articles I make&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/fromaline"&gt;Follow me here on dev.to&lt;/a&gt; to read this weekly series. I am going to post the next episode on January 30 (next Sunday!).&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Best programming tools for every beginner</title>
      <author>SnowBit</author>
      <pubDate>Sun, 23 Jan 2022 08:21:48 +0000</pubDate>
      <link>https://dev.to/codewithsnowbit/best-programming-tools-for-every-beginner-41g3</link>
      <guid>https://dev.to/codewithsnowbit/best-programming-tools-for-every-beginner-41g3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello Folks 👋
&lt;/h3&gt;

&lt;p&gt;What's up friends, this is &lt;strong&gt;SnowBit&lt;/strong&gt; here. I am a young passionate and self-taught developer and have an intention to become a successful developer.&lt;/p&gt;

&lt;p&gt;Today, I am here with a cool list of tools that every newbie should use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-and-hosting-replit"&gt;
  &lt;/a&gt;
  Coding and Hosting - &lt;a href="https://replit.com/"&gt;Repl.it&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eE17czyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0jvserc7su91i9g512u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eE17czyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0jvserc7su91i9g512u.png" alt="Replit" width="880" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is an online platform where you as a new developer can code in different languages and frameworks (JavaScript, React, Python).&lt;/li&gt;
&lt;li&gt;You can even collaborate in real-time with your friend/mate just like in Google Docs.&lt;/li&gt;
&lt;li&gt;It also works as a hosting platform, your site deploys with a unique URL that works as a live preview for your site and even you can share it.&lt;/li&gt;
&lt;li&gt;You can even try for &lt;a href="https://glitch.com/"&gt;Glitch&lt;/a&gt; and &lt;a href="https://codepen.io/"&gt;Codepen&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sites-to-learn"&gt;
  &lt;/a&gt;
  Sites to learn
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;br&gt;
It is a good platform to learn following topics: 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzegVcpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isyizinet7f9nrph4qyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzegVcpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isyizinet7f9nrph4qyi.png" alt="list" width="774" height="1098"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://scrimba.com/"&gt;Scrimba.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is the best platform to learn HTML, CSS, JavaScript, TypeScript, React and many more.&lt;/p&gt;

&lt;p&gt;The cool thing about &lt;strong&gt;Scrimba&lt;/strong&gt; is its interactive screencast, basically, you get to teach in a live code editor where you can edit the code whenever you wish. It's hard to explain check out their demo, you'll love it: &lt;a href="https://scrimba.com/scrim/czvKPPsw"&gt;Scrimba Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gRqhvtL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spglinum2gu2wtt6ig0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gRqhvtL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spglinum2gu2wtt6ig0l.png" alt="Scrimba.com" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design-figma"&gt;
  &lt;/a&gt;
  Design - &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is the best tool for designers to collaborate UI/UX design. Nothing to say more try once 🙂.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oo-xrnez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drb57s2oq6bpcjnbr2ha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oo-xrnez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drb57s2oq6bpcjnbr2ha.png" alt="Figma" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-apis-insomnia"&gt;
  &lt;/a&gt;
  Testing APIs - &lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Postman is a popular tool for testing APIs, but it looks a bit complicated for a newbie. Try giving a chance on Insomnia which has a very simple and well-designed interface. Here, you can perform &lt;code&gt;GET/POST/PUT/DELETE&lt;/code&gt; requests.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw3v9vDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcsm3rlyplh7g4hv6omq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw3v9vDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcsm3rlyplh7g4hv6omq.png" alt="Insomnia" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-challenges-codewars"&gt;
  &lt;/a&gt;
  Coding Challenges - &lt;a href="https://www.codewars.com/"&gt;Codewars&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To sharpen your skills, master them and learn new tricks to keep up with competent programmers, there is where Codewars comes in. &lt;br&gt;
It provides various small tests in almost common computer languages. Tests are categorized on the basis of difficulty level. It is fun to solve them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8ffUVCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf03ppv9og3pe8ndg90u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8ffUVCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf03ppv9og3pe8ndg90u.png" alt="codewars" width="880" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, this was a quick list of programming tools for every beginner. If you know some more tools, feel free to share them in comments&lt;/p&gt;




&lt;p&gt;Thank you for reading, have a nice day!&lt;br&gt;
&lt;strong&gt;Your appreciation is my motivation 😊&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on Twitter - &lt;a href="https://twitter.com/codewithsnowbit"&gt;@codewithsnowbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subscribe to me on YouTube - &lt;a href="https://www.youtube.com/channel/UCNTKqF1vhFYX_v0ERnUa1RQ?view_as=subscriber&amp;amp;sub_confirmation=1"&gt;Code With SnowBit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@jeshoots?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;JESHOOTS.COM&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Adding Google Authentication Feature.</title>
      <author>Kirti </author>
      <pubDate>Sun, 23 Jan 2022 08:13:11 +0000</pubDate>
      <link>https://dev.to/kirtisingh3008/adding-google-authentication-feature-25a4</link>
      <guid>https://dev.to/kirtisingh3008/adding-google-authentication-feature-25a4</guid>
      <description>&lt;p&gt;Hey everyone! In this article, we will be adding a new feature &lt;strong&gt;Google AUTH&lt;/strong&gt; to our login Form.&lt;br&gt;
Let's start with basics install a react app using the below commands in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;google_auth&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;google_auth&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's quickly install a very popular package  &lt;em&gt;react-google-login&lt;/em&gt;  to display a “Log in with Google” button which will help us in retrieving information about the user and will also handle displaying a google login prompt.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now after that write these lines of code in the App.js file i have added the explanation to each line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;GoogleLogin&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-google-login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// importing library&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// Function for displaying response in console&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profileObj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* It takes some props as clientId , ButtonText
      onSuccess , onFailure, cookiePolicy= {single_host_origin} */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GoogleLogin&lt;/span&gt;
         &lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;
         &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Login with Google&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
         &lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;displayResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nx"&gt;onFailure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;displayResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nx"&gt;cookiePolicy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;single_host_origin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, as you can see the clientId is yet not there, so for that go to "Google API console" and in there add a new project, just add your project name and done.&lt;br&gt;
Now switch to the project which you just added. Go to credentials.&lt;br&gt;
After that go to &lt;strong&gt;configure consent screen&lt;/strong&gt; and after that click on &lt;strong&gt;"External"&lt;/strong&gt; after that click on create.&lt;br&gt;
Now it will ask you to fill in some more details like application name(not the same as your project's name). You have to also enter the support email id and after that just keep on clicking save and next.&lt;br&gt;
Now, go back to the credentials tab again and click on create credentials. Here click on &lt;strong&gt;Create OAuth client ID&lt;/strong&gt; and in there add application type to be Web application and add URI to where you want to use your google login.&lt;br&gt;
Yuhuu!!! we generated our keys.&lt;br&gt;
Now, simply copy and paste the code in the code editor where clientID ="Our Above steps result".&lt;/p&gt;

&lt;p&gt;Now, just run your react app and click on the login button you will see something like this &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1OVam-3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4az8nbfnzqkarmb90c2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1OVam-3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4az8nbfnzqkarmb90c2.jpg" alt="Working" width="880" height="890"&gt;&lt;/a&gt;&lt;br&gt;
and after you log in with any of the accounts it will display it in the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C80ZUme2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibcr11i0z459qus869z3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C80ZUme2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibcr11i0z459qus869z3.png" alt="Working" width="880" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have attached the GitHub code for the same.&lt;br&gt;
&lt;a href="https://github.com/kirtisingh3008/web-dev/tree/main/google_auth"&gt;Github&lt;/a&gt;&lt;br&gt;
Thank You!!!🙂🙂&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Pug HTML for beginners | All-time-dev?</title>
      <author>All-time-dev</author>
      <pubDate>Sun, 23 Jan 2022 08:03:28 +0000</pubDate>
      <link>https://dev.to/alltimedev/what-is-pug-html-for-beginners-all-time-dev-5d38</link>
      <guid>https://dev.to/alltimedev/what-is-pug-html-for-beginners-all-time-dev-5d38</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-pug-html-for-beginners-alltimedev"&gt;
  &lt;/a&gt;
  What is Pug HTML for beginners | All-time-dev?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1iE2JuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gputhzsk5gtp8ej3n2ct.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1iE2JuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gputhzsk5gtp8ej3n2ct.jpg" alt="Pug HTML" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, we are going to know about PUG which is a very important topic for you if you are a backend developer we will know the history of PUG, what is a pug and its uses what are template engines, and more. So, if you are interested and if you like our today's post then share it with your developer friends. So, that they can also gain some knowledge about PUG.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-pug"&gt;
  &lt;/a&gt;
  What is PUG?
&lt;/h2&gt;

&lt;p&gt;Pug is a template engine for NODE JS means that if you write any PUG code then it will compile into HTML and its syntax will become simple which will help you understand your code better and eventually, it will increase productivity while coding and it also helps in writing reusable HTML code and it also helps in pulling data from a database while using an API from Rapid Apis or any other site but if you don't know what is a template Engine then it enables you to use Static template files on your web app. At Runtime means Node JS which is a JS(JavaScript) runtime. In this case, Pug which is a template engine will replace the variables in the file with actual values and will transform the file into an HTML file which helps you to design an HTML page and will also help you make it dynamic easily if you are using NODE JS and Mongo DB. So, simple Pug is a template engine for NODE JS which helps you to write HTML in the backend for a better understanding of code and easy reusability, and if you are thinking that if I am writing Node JS then can we only use PUG with Node JS then no we can also use with PHP, Python and several other languages and different languages have there different template engines like Python have its own template engine named Mako and JavaScript also has its own template engine named Jade/Pug, ejs (Embedd JavaScript)and some template engines also supports more than one language like Mustache which supports Ruby, JavaScript, Python, Erlang, Objective-C, Go, Lua, Scala, Node JS, Python, Java, .Net, Android, C++, C, C# and more and there is a important fact about Pug is that its old name was Jade which was changed into pug due to a trademark.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-5-tools-which-are-integrable-with-pug"&gt;
  &lt;/a&gt;
  Top 5 tools which are integrable with Pug
&lt;/h2&gt;

&lt;p&gt;Pug is very awesome and it has some integrable with some tools that you can use to increase your productivity and to use it for more uses like creating backend, for generating HTML websites, charting and more. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Lad which is a Node JS framework&lt;/li&gt;
&lt;li&gt;Node JS which is JavaScript Runtime&lt;/li&gt;
&lt;li&gt;Prepros which is a compiler&lt;/li&gt;
&lt;li&gt;Squido which is a HTML website generator&lt;/li&gt;
&lt;li&gt;Anychart for charting&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#popular-companies-using-pug"&gt;
  &lt;/a&gt;
  Popular companies using Pug
&lt;/h2&gt;

&lt;p&gt;As Pug is very popular for serving dynamic content with Node JS then there are a lot of companies who is using Pug for growing their business like -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Glovo&lt;/li&gt;
&lt;li&gt;Coursera&lt;/li&gt;
&lt;li&gt;1mg&lt;/li&gt;
&lt;li&gt;Chiper&lt;/li&gt;
&lt;li&gt;Shimo website&lt;/li&gt;
&lt;li&gt;Barogo&lt;/li&gt;
&lt;li&gt;Accenture&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Top 10 template engines rather than Pug&lt;br&gt;
Pug is a very popular JavaScript template engine but there some more template engines which are even more better than Pug. Now, I will tell only the names of those template engines but if you want a complete post on that topic then you can comment below. I will definitely create a post on that topic.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mustache. &lt;/li&gt;
&lt;li&gt;Underscore Templates&lt;/li&gt;
&lt;li&gt;Embedded JS Templates&lt;/li&gt;
&lt;li&gt;HandlebarsJS. &lt;/li&gt;
&lt;li&gt;NunJucks&lt;/li&gt;
&lt;li&gt;UnderScore JS&lt;/li&gt;
&lt;li&gt;Webix&lt;/li&gt;
&lt;li&gt;Hogan.JS&lt;/li&gt;
&lt;li&gt;Swig&lt;/li&gt;
&lt;li&gt;Marko&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, these are some of the popular template engines rather than Pug HTML that you can use as an alternative all of them are very good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-using-pug-better-than-using-html-and-react"&gt;
  &lt;/a&gt;
  Is using Pug better than using HTML and React?
&lt;/h2&gt;

&lt;p&gt;Many people have doughts that why should we use Pug instead of just using HTML which every web developer already knows instead of learning template engines which is new for us then the simple answer is that Pug is more powerful and provides features like conditions, loops, included, mixins like SASS that we can render on reference data or whenever when the users inputs data and it natively supports JavaScript as it is both a JavaScript library and also a JavaScript template engine and an important reference that I have given you in the introduction is that, Pug is important to make website dynamic then yes its very important as if you want to make a website dynamic then at that time you must need Pug to serve dynamic content with NODE JS. So, in this case using Pug with Node JS will be better idea then using HTML with it. but if we choose to use Pug instead of React that's not a good idea as React JS is not only a template engine like Pug JS it is also framework that you can use to create web apps frontend and everyone knows that if you want to create a web app then the best stack is MERN STACK which includes React with Node JS, Express JSand Mongo DB. So, in this case if you want to create a web app then I would recommend using React JS. &lt;/p&gt;

&lt;p&gt;To continue reading the post visit &lt;a href="https://all-time-devlopment.blogspot.com/2022/01/what-is-pug-html-for-beginners-all-time.html"&gt;https://all-time-devlopment.blogspot.com/2022/01/what-is-pug-html-for-beginners-all-time.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Financing your open source project</title>
      <author>VORG</author>
      <pubDate>Sun, 23 Jan 2022 08:00:48 +0000</pubDate>
      <link>https://dev.to/vorg/financing-your-open-source-project-4i2l</link>
      <guid>https://dev.to/vorg/financing-your-open-source-project-4i2l</guid>
      <description>&lt;p&gt;Funding doesn’t mean your open source project is no longer pure. Financing means you want to take your project further.&lt;/p&gt;

&lt;p&gt;The best form of financing for an open source project is a DAO. But ICO makes people feel that it is purely for making money. Therefore, most DAO tools are not suitable.&lt;/p&gt;

&lt;p&gt;Here is a DAO tool built for developers: &lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt; is a decentralized DAO registry based on Ethereum.&lt;/p&gt;

&lt;p&gt;You can create your unique DAO on &lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt; and get an associated unique domain name. At the same time, you can raise funds as needed by increasing capital and expanding shares on &lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The trading of shares can be completed on &lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt;, and the currency medium of the transaction is &lt;em&gt;Ether&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can refer to &lt;a href="https://dev.to/vorg/vorg-decentralized-company-and-domain-name-registry-599a"&gt;VORG: Decentralized company and domain name registry&lt;/a&gt; to learn how to build a DAO, increase capital and shares, trade, and configure domain names.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>web3</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Snippets</title>
      <author>Wahid Abduhakimov</author>
      <pubDate>Sun, 23 Jan 2022 07:57:20 +0000</pubDate>
      <link>https://dev.to/wahidd/snippets-236g</link>
      <guid>https://dev.to/wahidd/snippets-236g</guid>
      <description>&lt;p&gt;Code snippets in vscode are used to speedup your coding speed. You can create code snippets for frequently used code blocks of any programming language. &lt;/p&gt;

&lt;p&gt;Watch the video below to learn how to create C# code snippets in no time. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hKBoupCziWI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>csharp</category>
      <category>dotnet</category>
      <category>coding</category>
    </item>
    <item>
      <title>Introduction to Modern Data Architecture (formerly Lake House)</title>
      <author>Adit Modi</author>
      <pubDate>Sun, 23 Jan 2022 07:39:43 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-modern-data-architecture-formerly-lake-house-29g6</link>
      <guid>https://dev.to/aws-builders/introduction-to-modern-data-architecture-formerly-lake-house-29g6</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Organizations have been building data lakes to analyze massive amounts of data for deeper insights into their data. To do this, they bring data from multiple silos into their data lake, and then run analytics and AI/ML directly on it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is common for these organizations to also have data stored in specialized data stores, such as a NoSQL database, a search service, or a data warehouse, to support different use cases. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To efficiently analyze all of the data spread across the data lake and other data stores, businesses often move data in and out of data lake and between these data stores. This data movement can get complex and messy as the data grows in these stores. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To address this, businesses need a data architecture that not only allows building scalable, cost-effective data lakes but also supports simplified governance and data movement between various data stores. We refer to this as a lake house architecture. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lake house is a modern data architecture that integrates a data lake, a data warehouse, and other purpose-built data stores while enabling unified governance and seamless data movement.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DHehW4bV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lui5dzxmu1yfinjvetfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DHehW4bV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lui5dzxmu1yfinjvetfl.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Architecture Options for Building an Analytics Application on AWS&lt;/strong&gt; is a Series containing different articles that cover the key scenarios that are common in many analytics applications and how they influence the design and architecture of your analytics environment in AWS. These series present the assumptions made for each of these scenarios, the common drivers for the design, and a reference architecture for how these scenarios should be implemented.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;As shown in the following diagram, with a lake house approach, organizations can store their data in a data lake and also be able to use purpose-built data stores that work with the data lake. This approach allows access to all of their data to make better decisions with agility.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vvh4q8_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8nn87cjaam6yr5ua58q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vvh4q8_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8nn87cjaam6yr5ua58q.png" alt="Image description" width="554" height="410"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Modern data architecture&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In a lake house design, there are three different patterns for data movement. They can be described as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Inside-out data movement&lt;/strong&gt;: A subset of data in a data lake is sometimes moved to a data store, such as an Amazon OpenSearch Service cluster or an Amazon Neptune cluster, to support specialized analytics, such as search analytics, building knowledge graphs, or both. This pattern is what we consider an inside-out data movement. For example, enterprises send information from structured sources (relational databases), unstructured sources (metadata, media, or spreadsheets) and other assets first to a data lake that is moved to Amazon Neptune to build a knowledge graph.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Outside-in data movement&lt;/strong&gt;: Organizations use data stores that best fit their applications and later move that data into a data lake for analytics. For instance, to maintain game state, player data, session history, and leaderboards, a gaming company right chooses Amazon DynamoDB as the data store. This data can later be exported to a data lake for additional analytics to improve the gaming experience for its players. We refer to this kind of data movement as outside-in.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Around the perimeter&lt;/strong&gt;: In addition to the preceding two patterns, there are scenarios where the data is moved from one specialized data store to another. For example, enterprises might copy customer profile data from their relational database to a NoSQL database to support their reporting dashboards. This data movement is often considered as around the perimeter.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#characteristics"&gt;
  &lt;/a&gt;
  Characteristics
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Scalable data lake&lt;/strong&gt;: A data lake is at the center of a well-architected lake house design. A data lake should be able to scale easily to petabytes and exabytes as data grows. Use a scalable, durable data store that provides the fastest performance at the lowest cost, supports multiple ways to bring data in and has a good partner ecosystem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data diversity&lt;/strong&gt;: Applications generate data in many formats. A data lake should support diverse data types — structured, semi-structured, or unstructured.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Schema management&lt;/strong&gt;: A lake house design should support schema on read for a data lake with no strict source data requirement. The choice of storage structure, schema, ingestion frequency, and data quality should be left to the data producer. A data lake should also be able to incorporate changes to the structure of the incoming data, which is referred to as schema evolution. In addition, schema enforcement helps businesses ensure data quality by preventing writes that do not match the schema.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Metadata management&lt;/strong&gt;: Data should be self-discoverable with the ability to track lineage as data flows through tiers within the data lake. A comprehensive data catalog that captures the metadata and provides a query-able interface for all data assets is recommended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;**Unified governance: A lake house design should have a robust mechanism for centralized authorization and auditing. Configuring access policies in the data lake and across all the data stores can be extremely complex and error prone. Having a centralized location to define the policies and enforce them is critical to a secure lake house architecture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Transactional semantics&lt;/strong&gt;: In a data lake, data is often ingested nearly continuously from multiple sources and is queried concurrently by multiple analytic engines. Having atomic, consistent, isolated, and durable (ACID) transactions is pivotal to keeping data consistent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reference-architecture"&gt;
  &lt;/a&gt;
  Reference architecture
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JRarOnuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xnfh0epr2katsu4t4qp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JRarOnuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xnfh0epr2katsu4t4qp.png" alt="Image description" width="800" height="584"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Modern data architecture reference architecture&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#configuration-notes"&gt;
  &lt;/a&gt;
  Configuration notes
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To organize data for efficient access and easy management:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The storage layer can store data in different states of consumption readiness, including raw, trusted-conformed, enriched, and modeled. It’s important to segment your data lake into landing, raw, trusted, and curated zones to store data depending on its consumption readiness. Typically, data is ingested and stored as is in the data lake (without having to first define schema) to accelerate ingestion and reduce time needed for preparation before data can be explored.&lt;/li&gt;
&lt;li&gt;Partition data with keys that align to common query criteria.&lt;/li&gt;
&lt;li&gt;Convert data to an open columnar file format, and apply compression. This will lower storage usage, and increase query performance.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose the proper storage tier based on data temperature. Establish a data lifecycle policy to automatically delete old data to meet your retention requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Decide on a location for data lake ingestion (that is, an S3 bucket). Select a frequency and isolation mechanism that meets your business needs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Depending on your ingestion frequency or data mutation rate, schedule file compaction to maintain optimal performance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use AWS Glue crawlers to discover new datasets, track lineage, and avoid a data swamp.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Manage access control and security using AWS Lake Formation, IAM role setting, AWS KMS, and AWS CloudTrail.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No need to move data between a data lake and the data warehouse for the data warehouse to access it. Amazon Redshift Spectrum can directly access the dataset in the data lake.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For more, refer to the Derive Insights from AWS Lake House whitepaper.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Hope this guide gives you an Introduction to Modern data architecture (formerly Lake House), explains the Characteristics, Reference Architecture and Configuration Notes for Modern data architecture.&lt;/p&gt;

&lt;p&gt;Let me know your thoughts in the comment section 👇&lt;br&gt;
And if you haven't yet, make sure to follow me on below handles:&lt;/p&gt;

&lt;p&gt;👋 &lt;strong&gt;connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🤓 &lt;strong&gt;connect with me on &lt;a href="https://twitter.com/adi_12_modi"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🐱‍💻 &lt;strong&gt;follow me on &lt;a href="https://github.com/AditModi"&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
✍️ &lt;strong&gt;Do Checkout &lt;a href="https://aditmodi.hashnode.dev"&gt;my blogs&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Like, share and follow me 🚀 for more content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-user-aditmodi-"&gt;
  &lt;/a&gt;
  &lt;div class="ltag__user ltag__user__id__497987"&gt;
  
    .ltag__user__id__497987 .follow-action-button {
      background-color: #000000 !important;
      color: #fa6c00 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/aditmodi" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/aditmodi"&gt;Adit Modi&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/aditmodi"&gt;Cloud Engineer | AWS Community Builder | 8x AWS Certified | 3x Azure Certified | Author of Cloud Tech , DailyDevOps &amp;amp; BigDataJournal | DEV moderator&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/analytics-lens/modern-data-architecture.html"&gt;Reference Guide&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>datascience</category>
      <category>cloud</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Create Cache Memory using Redis in Express JS </title>
      <author>Sandeep</author>
      <pubDate>Sun, 23 Jan 2022 07:05:28 +0000</pubDate>
      <link>https://dev.to/deepakjaiswal/create-cache-memory-using-redis-in-express-js-3lmg</link>
      <guid>https://dev.to/deepakjaiswal/create-cache-memory-using-redis-in-express-js-3lmg</guid>
      <description>&lt;p&gt;hello all developers we create a Redis store to make server to best response to the client. Redis can maximize the response time of fetching data through server like express.&lt;/p&gt;

&lt;p&gt;so , Redis is a super fast and efficient in-memory, key–value cache (hashing the data) and store. It’s also known as a data structure server, as the keys can contain strings, lists, sets, hashes and other data structures. keys will be unique.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm install redis&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const redis = require('redis');
//by default port 6379 and host localhost or 127.0.0.1 
const client = redis.createClient();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const redis = require('redis');
const client = redis.createClient();

client.on('connect', function() {
  console.log('Connected!');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so make sure you can install redis in your system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const redis = require('redis');
const client = redis.createClient();
const axios = require('axios');
const express = require('express');

const app = express();
const USERS_API = 'Your Api Url';

app.get('/cached-users', async (req, res) =&amp;gt; {

    const data=await client.get('users')


   try{
      if (data) {
        console.log('Users retrieved from Redis storage');
        res.status(200).send(JSON.parse(data));
      } else {
        axios.get(`${USERS_API}`).then(function (response) {
          const users = response.data;
          //client.setEx('key',seconds,data)
          client.setEx('users', 400, JSON.stringify(users));
          console.log('Users retrieved from the API');
          res.status(200).send(users);
        });
      }
    });
  } catch (err) {
    res.status(500).send({ error: err});
  }
});

const PORT = 5000;
app.listen(PORT, () =&amp;gt; {
  console.log(`Server started at port: ${PORT}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5gaxYyr7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx21te26cyw2gxlf83zu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gaxYyr7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx21te26cyw2gxlf83zu.png" alt="Image description" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>react</category>
      <category>devops</category>
    </item>
    <item>
      <title>The Complete React Roadmap</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 23 Jan 2022 06:12:38 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/the-complete-react-roadmap-1ho4</link>
      <guid>https://dev.to/ruppysuppy/the-complete-react-roadmap-1ho4</guid>
      <description>&lt;p&gt;Learning &lt;strong&gt;React&lt;/strong&gt; can be &lt;em&gt;confusing at first&lt;/em&gt;, sometimes even &lt;em&gt;downright scary&lt;/em&gt;! This article aims to put forth a &lt;strong&gt;complete roadmap&lt;/strong&gt; to learn &lt;strong&gt;React&lt;/strong&gt; so that you have a &lt;em&gt;clear path moving forward&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h1&gt;

&lt;p&gt;There are some &lt;em&gt;pre-requisites&lt;/em&gt; to learning &lt;strong&gt;React&lt;/strong&gt;, without which, you will &lt;em&gt;find yourself struggling hard&lt;/em&gt;. So it is &lt;em&gt;highly advisable&lt;/em&gt; to master the following skills first, before diving into learning &lt;strong&gt;React&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;HTML&lt;/strong&gt; - You need to be well acquainted with the &lt;em&gt;basic tags&lt;/em&gt; and the &lt;em&gt;attributes&lt;/em&gt; they accept. No need to be an &lt;strong&gt;HTML&lt;/strong&gt; master, &lt;em&gt;just the basics would do&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS&lt;/strong&gt; - Unless you want to create &lt;em&gt;bland websites&lt;/em&gt; like this
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MmkPAt5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r20uu4s8euo42szzl4wa.png" alt="Image description" width="616" height="469"&gt;
You should definitely spend some time going through the basics (namely &lt;code&gt;selectors&lt;/code&gt;, &lt;code&gt;box-model&lt;/code&gt;, &lt;code&gt;flexbox&lt;/code&gt;, &lt;code&gt;grid layout&lt;/code&gt;, and &lt;code&gt;responsive design&lt;/code&gt;) of &lt;strong&gt;CSS&lt;/strong&gt; too.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript&lt;/strong&gt; - Since &lt;strong&gt;React&lt;/strong&gt; runs on top of &lt;strong&gt;JavaScript&lt;/strong&gt;, you do need a &lt;em&gt;solid foundation&lt;/em&gt; to ease up the process of learning &lt;strong&gt;React&lt;/strong&gt;. As a barebones, you would need &lt;code&gt;variables&lt;/code&gt;, &lt;code&gt;conditional statements&lt;/code&gt;, &lt;code&gt;loops&lt;/code&gt;, &lt;code&gt;DOM manipulation&lt;/code&gt;, and &lt;code&gt;event triggering&lt;/code&gt;.
Learning the &lt;strong&gt;ES6+&lt;/strong&gt; features such as the &lt;code&gt;spread&lt;/code&gt; &amp;amp; &lt;code&gt;rest operators&lt;/code&gt;, and &lt;code&gt;arrow functions&lt;/code&gt; would come in handy too.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Setting up a React Project&lt;/strong&gt;: Before you can start learning &lt;strong&gt;React&lt;/strong&gt;, quite evidently you would need to set up a &lt;strong&gt;React Project&lt;/strong&gt;, which is a &lt;em&gt;highly tedious task&lt;/em&gt;. Luckily we have &lt;em&gt;awesome tools&lt;/em&gt; like the &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;&lt;code&gt;create-react-app&lt;/code&gt;&lt;/a&gt; &lt;em&gt;to get the job done&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Get Acquainted with JSX&lt;/strong&gt;: Typically &lt;strong&gt;React&lt;/strong&gt; code is written &lt;strong&gt;JSX&lt;/strong&gt; (&lt;strong&gt;JavaScript XML&lt;/strong&gt;). You can opt to not use it, using only &lt;code&gt;React.createElement&lt;/code&gt; calls only, but there is no point in making your &lt;em&gt;life miserable doing it&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwFyGx0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10x8niyw6rczvnbh1mib.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwFyGx0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10x8niyw6rczvnbh1mib.gif" alt="Ain't Nobody got time for that" width="500" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should be familiar with the differences between &lt;strong&gt;JSX&lt;/strong&gt; and &lt;strong&gt;HTML&lt;/strong&gt;, like every &lt;code&gt;element&lt;/code&gt; &lt;em&gt;must contain a closing tag&lt;/em&gt;, the events are in &lt;strong&gt;Camel Case&lt;/strong&gt; (&lt;code&gt;onClick&lt;/code&gt; as opposed to &lt;code&gt;onclick&lt;/code&gt;), and the ability to use &lt;strong&gt;JS&lt;/strong&gt; inside the code directly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Types of Components&lt;/strong&gt;: Although recently, there is a push toward using &lt;strong&gt;Functional Component&lt;/strong&gt; for all purposes as they are more &lt;em&gt;intuitive&lt;/em&gt; and &lt;em&gt;easier to code&lt;/em&gt;, you should have a &lt;em&gt;basic understanding&lt;/em&gt; of &lt;strong&gt;Class Components&lt;/strong&gt; too to ensure when you work on a &lt;code&gt;legacy code base&lt;/code&gt;, you don't end up looking like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JDnrOJO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37ohqeuojcuq10yjp6zg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JDnrOJO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37ohqeuojcuq10yjp6zg.gif" alt="run away" width="483" height="325"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Props vs State&lt;/strong&gt;: &lt;code&gt;Props&lt;/code&gt; allows us to &lt;em&gt;pass data from one component to another&lt;/em&gt;, but if used inappropriately, it can lead to &lt;code&gt;prop chaining&lt;/code&gt;, a &lt;em&gt;highly undesired practice&lt;/em&gt; in &lt;strong&gt;React&lt;/strong&gt; projects, which we will &lt;em&gt;fix later down the &lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;State&lt;/code&gt; allows you to &lt;em&gt;store data&lt;/em&gt; between the component &lt;strong&gt;re-renders&lt;/strong&gt;. Updating the &lt;code&gt;state&lt;/code&gt; &lt;strong&gt;re-renders&lt;/strong&gt; the component and &lt;em&gt;every child&lt;/em&gt; accepting the &lt;code&gt;state&lt;/code&gt; data as a prop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lists and Keys&lt;/strong&gt;: Often while dealing with a lot of &lt;strong&gt;dynamic data&lt;/strong&gt;, you be required to render &lt;code&gt;lists&lt;/code&gt; of &lt;strong&gt;data&lt;/strong&gt;. Make sure you add &lt;code&gt;key&lt;/code&gt; to allow &lt;strong&gt;React&lt;/strong&gt; to &lt;em&gt;keep track of the elements&lt;/em&gt; and &lt;em&gt;optimally re-render them&lt;/em&gt;, instead of &lt;em&gt;re-rendering them every time something changes&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Component Life Cycle&lt;/strong&gt;: The &lt;strong&gt;Class Components&lt;/strong&gt; has &lt;strong&gt;life cycle&lt;/strong&gt; methods such as &lt;code&gt;componentDidMount()&lt;/code&gt; and &lt;code&gt;componentWillUnmount()&lt;/code&gt;, which can also be emulated by the &lt;code&gt;useEffect&lt;/code&gt; &lt;strong&gt;Hook&lt;/strong&gt; in &lt;strong&gt;Functional Components&lt;/strong&gt;. These &lt;strong&gt;life cycle&lt;/strong&gt; methods run at &lt;em&gt;specific time&lt;/em&gt;, making them useful for &lt;em&gt;certain tasks&lt;/em&gt;, such as an &lt;strong&gt;API call&lt;/strong&gt; on &lt;code&gt;componentDidMount()&lt;/code&gt; or &lt;strong&gt;timer cleanups&lt;/strong&gt; during &lt;code&gt;componentWillUnmount()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#intermediate"&gt;
  &lt;/a&gt;
  Intermediate
&lt;/h1&gt;

&lt;p&gt;Let's now dive into the Intermediate &lt;strong&gt;React&lt;/strong&gt; topics&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g7tvqlu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ef8cu8g7242nvgm0o9sy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g7tvqlu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ef8cu8g7242nvgm0o9sy.gif" alt="let's do it" width="500" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Styling&lt;/strong&gt;: Till now your Application would end up looking &lt;em&gt;pretty basic&lt;/em&gt;. Let's fix it right now. There are &lt;em&gt;hundreds of choices to style the application&lt;/em&gt;, but unless you are using some library such as &lt;strong&gt;Material UI&lt;/strong&gt;, &lt;strong&gt;Chakra UI&lt;/strong&gt;, &lt;strong&gt;Semantic UI&lt;/strong&gt;, I would highly suggest using &lt;strong&gt;CSS&lt;/strong&gt; or &lt;strong&gt;SCSS modules&lt;/strong&gt;, which gives you complete power of &lt;strong&gt;CSS&lt;/strong&gt; with the addition of keeping the &lt;em&gt;styling scoped to just one file&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;No more to worry about using the same class name twice and accidentally overriding it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hooks&lt;/strong&gt;: &lt;strong&gt;Hooks&lt;/strong&gt; were a &lt;em&gt;recent addition&lt;/em&gt; in &lt;strong&gt;React 16.8&lt;/strong&gt; and it totally changed the &lt;strong&gt;React Ecosystem&lt;/strong&gt;. &lt;strong&gt;Hooks&lt;/strong&gt; introduced features from &lt;strong&gt;Class Components&lt;/strong&gt; into &lt;strong&gt;Functional Components&lt;/strong&gt;, making it possible to use &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;lifecycle methods&lt;/code&gt;, &lt;code&gt;context&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt;s in &lt;strong&gt;Functional Components&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Often people avoid learning the &lt;em&gt;difficult concepts&lt;/em&gt; such as &lt;code&gt;memo&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt;, but that's a bad idea as if you are building anything of &lt;strong&gt;real-world significance&lt;/strong&gt;, your application will definitely &lt;em&gt;rely heavily&lt;/em&gt; on these. Moreover using &lt;code&gt;context&lt;/code&gt; allows you to avoid the &lt;code&gt;prop chaining&lt;/code&gt; issue discussed previously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; also allows you to create custom hooks to cater to your personal need, which you should also look into.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Portals&lt;/strong&gt;: Occasionally you will run into edge cases where, you &lt;em&gt;styling elements&lt;/em&gt; such as &lt;strong&gt;modal&lt;/strong&gt; to &lt;em&gt;render on top of elements further down the &lt;strong&gt;DOM&lt;/strong&gt; tree&lt;/em&gt; becomes a nightmare. In such cases, &lt;strong&gt;Portals&lt;/strong&gt; are there to help you out, they allow you to render elements outside the default &lt;strong&gt;React Root Element&lt;/strong&gt;, making it &lt;em&gt;far easier to not only style&lt;/em&gt;, but even &lt;em&gt;group elements together&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lazy Loading&lt;/strong&gt;: &lt;strong&gt;Lazy loading&lt;/strong&gt; is a &lt;em&gt;design pattern&lt;/em&gt; commonly used in &lt;strong&gt;web design&lt;/strong&gt; and &lt;strong&gt;development&lt;/strong&gt; to &lt;em&gt;defer initialization of an object&lt;/em&gt; until &lt;em&gt;the point at which it is needed&lt;/em&gt;. It can contribute to &lt;strong&gt;efficiency&lt;/strong&gt; in the program's operation &lt;em&gt;if properly and appropriately used&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Luckily implementing &lt;strong&gt;Lazy Loading&lt;/strong&gt; in &lt;strong&gt;React&lt;/strong&gt; is a walk in the park. All you need is the &lt;code&gt;Suspense&lt;/code&gt; &lt;strong&gt;Component&lt;/strong&gt; and familiarity with the &lt;code&gt;import()&lt;/code&gt; function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#advanced"&gt;
  &lt;/a&gt;
  Advanced
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Found everything on the list a piece of cake?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1W5x_PC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owd4d5ohci60p2w6hrw7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1W5x_PC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owd4d5ohci60p2w6hrw7.gif" alt="Easy" width="498" height="364"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Put your knowledge to the test with these &lt;em&gt;advanced skills&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Webpack &amp;amp; Babel&lt;/strong&gt;: None of the &lt;strong&gt;JSX&lt;/strong&gt; you write can be &lt;em&gt;understood by a browser&lt;/em&gt;, so it has to be &lt;code&gt;transpiled&lt;/code&gt; into regular &lt;strong&gt;JS&lt;/strong&gt; for Browser to execute it. The transpilation process is handled by &lt;strong&gt;Babel&lt;/strong&gt; and bundling everything into a single file is done by &lt;strong&gt;Webpack&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To truly understand &lt;em&gt;how everything fits in&lt;/em&gt;, you need to build a &lt;strong&gt;React App&lt;/strong&gt; from scratch, check out &lt;a href="https://dev.to/ruppysuppy/create-react-app-from-scratch-like-a-pro-de0"&gt;this article&lt;/a&gt; to know how to do it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;: &lt;strong&gt;Testing&lt;/strong&gt; is something very few people actually enjoy doing, as it falls under the category of &lt;strong&gt;"dark work"&lt;/strong&gt;, where the things you &lt;em&gt;doesn't make any visible changes&lt;/em&gt;. But for large applications, it is of &lt;em&gt;crucial importance&lt;/em&gt; as &lt;em&gt;a small change might end up breaking the entire application&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;: This is simply &lt;em&gt;one of the core skills you must possess&lt;/em&gt;. &lt;strong&gt;TypeScript&lt;/strong&gt; is a superset of &lt;strong&gt;JavaScript&lt;/strong&gt;, which adds the important, &lt;em&gt;yet optional&lt;/em&gt;, &lt;strong&gt;strict type system&lt;/strong&gt; and is the language of choice for any &lt;strong&gt;large scale React application&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's all you need to know about &lt;strong&gt;React&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6iRT9CmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp6lmupohw1uvmmj26vk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6iRT9CmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp6lmupohw1uvmmj26vk.gif" alt="Phew" width="500" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ecosystem"&gt;
  &lt;/a&gt;
  Ecosystem
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;But what about the React Router, or perhaps something for state management?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Glad you asked! Let's dive into the &lt;strong&gt;React Tools&lt;/strong&gt; that are worth diving into. You can check these out as soon as you are done with the basics of &lt;strong&gt;React&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Routing&lt;/strong&gt;: Since &lt;strong&gt;React&lt;/strong&gt; is a &lt;em&gt;library&lt;/em&gt; and not a &lt;em&gt;framework&lt;/em&gt;, it doesn't ship with its own routing, but &lt;strong&gt;React Router&lt;/strong&gt; is a library that's worth looking into.&lt;/p&gt;

&lt;p&gt;If you are using an &lt;strong&gt;SSG&lt;/strong&gt; (&lt;strong&gt;Static Site Generation&lt;/strong&gt;) or SSR (&lt;strong&gt;Server Side Rendering&lt;/strong&gt;) like &lt;strong&gt;Gatsby&lt;/strong&gt; or &lt;strong&gt;Next.js&lt;/strong&gt;, then you would already have a routing built-in, without requiring any additional libraries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;State Management&lt;/strong&gt;: &lt;strong&gt;State Management&lt;/strong&gt; tools like &lt;strong&gt;Context API&lt;/strong&gt; is a nice feature of &lt;strong&gt;React&lt;/strong&gt;, but falls short in the case of &lt;em&gt;large scale applications&lt;/em&gt;. In such cases, using a library like &lt;strong&gt;Redux&lt;/strong&gt; or the &lt;em&gt;innumerable ones&lt;/em&gt; available on &lt;code&gt;npm&lt;/code&gt; would be a better idea&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cross-Platform&lt;/strong&gt;: If you want to use the same logic as your &lt;strong&gt;Web App&lt;/strong&gt; in a &lt;strong&gt;Mobile Application&lt;/strong&gt; and &lt;strong&gt;Desktop Application&lt;/strong&gt; too, &lt;strong&gt;React Native&lt;/strong&gt; and &lt;strong&gt;Electron&lt;/strong&gt; (or preferably &lt;strong&gt;Tauri&lt;/strong&gt;) would be great tools to look into. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Styling&lt;/strong&gt;: If you don't want to write custom styling for your application, &lt;strong&gt;Material UI&lt;/strong&gt;, &lt;strong&gt;Chakra UI&lt;/strong&gt;, or &lt;strong&gt;Semantic UI&lt;/strong&gt; might be worth a look. It can &lt;em&gt;drastically reduce the effort required&lt;/em&gt; as they come with &lt;strong&gt;pre-built components&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;That's the &lt;strong&gt;Complete React Roadmap&lt;/strong&gt;. Hope that helps you plan out your journey to become a ground-breaking &lt;strong&gt;React Developer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Developing!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Did I miss something? Share it in the comments below 👇&lt;/p&gt;

&lt;p&gt;Want to see an &lt;strong&gt;Advanced React Project&lt;/strong&gt; built from scratch? Check out&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ruppysuppy"&gt;
        ruppysuppy
      &lt;/a&gt; / &lt;a href="https://github.com/ruppysuppy/Crypto-Crowdfund"&gt;
        Crypto-Crowdfund
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🤑💰 Crowdfunding Platform backed by Ethereum Blockchain to bring your creative projects to life
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Need a &lt;strong&gt;Top Rated Front-End Development Freelancer&lt;/strong&gt; to chop away your development woes? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Personal Website&lt;/a&gt; and &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to connect? Reach out to me on &lt;a href="https://www.linkedin.com/in/tapajyoti-bose/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a &lt;strong&gt;Digital Nomad&lt;/strong&gt; in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for &lt;strong&gt;Weekly new Tidbits&lt;/strong&gt; on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Add a VSC Command Palette to Your Website!</title>
      <author>Harsh Singh</author>
      <pubDate>Sun, 23 Jan 2022 04:38:49 +0000</pubDate>
      <link>https://dev.to/harshhhdev/adding-a-command-palette-to-your-website-5cpp</link>
      <guid>https://dev.to/harshhhdev/adding-a-command-palette-to-your-website-5cpp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-well-be-making-today"&gt;
  &lt;/a&gt;
  What We'll Be Making Today
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gb10bh7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mypz69jp0mbuedusxx2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gb10bh7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mypz69jp0mbuedusxx2.gif" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://4zsur.sse.codesandbox.io/"&gt;Live Demo 🚀&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wait-what"&gt;
  &lt;/a&gt;
  Wait, what?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; has an amazing feature called the command palette, which gives you access to the entire application's functionality. It's a productivity hack and saves us a lot of tension.&lt;/p&gt;

&lt;p&gt;Similar to &lt;a href="https://code.visualstudio.com/"&gt;VSC&lt;/a&gt;, &lt;a href="https://monkeytype.com"&gt;MonkeyType&lt;/a&gt; is an open-source, minimalistic, and customisable typing test. It's designed to be accessed from just your keyboard, eliminating the need to switch back and forth with your mouse.&lt;/p&gt;

&lt;p&gt;I really love the command palette feature on their website too, which allows you to tweak settings easily. Today, we're going to be making something similar to that in Next.js/React.&lt;/p&gt;

&lt;p&gt;Looks cool right? Let's get into the tutorial.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  🚀 Getting Started
&lt;/h1&gt;

&lt;p&gt;The boring part of setting up a &lt;a href="https://nextjs.org/docs/getting-started"&gt;Next.js project&lt;/a&gt; which you probably know how to do.&lt;/p&gt;

&lt;p&gt;Feel free to skip to &lt;a href=""&gt;Creating Our Command Palette&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://www.npmjs.com/package/npx"&gt;npx&lt;/a&gt; or &lt;a href="https://yarnpkg.com/"&gt;yarn&lt;/a&gt;, create a new &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt; or &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Next.js (flags for TypeScript are optional)&lt;/span&gt;

npx create-next-app@latest palette &lt;span class="nt"&gt;--ts&lt;/span&gt;
&lt;span class="c"&gt;# ...using yarn&lt;/span&gt;
yarn create next-app palette &lt;span class="nt"&gt;--typescript&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create React App (flags for TypeScript are optional)&lt;/span&gt;

npx create-react-app palette &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;span class="c"&gt;# ...using yarn&lt;/span&gt;
yarn create react-app palette &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since I'm in love with it, I'll be doing this project in &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt; with &lt;a href="https://typescriptlang.org"&gt;TypeScript&lt;/a&gt; - however, the procedure for implementing this in other &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; frameworks shouldn't be too different. &lt;/p&gt;

&lt;p&gt;Now let's go to our terminal and run &lt;code&gt;yarn dev&lt;/code&gt;. Our development server should be started on &lt;a href="http://localhost:3000"&gt;localhost:3000&lt;/a&gt;. Nice!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  💡 Project Setup
&lt;/h1&gt;

&lt;p&gt;Alright, now in our &lt;code&gt;styles/globals.css&lt;/code&gt; file let's add some basic styles to make our page slightly less ugly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e9edf1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#323b45&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Fira&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's go to &lt;code&gt;styles/Home.module.css&lt;/code&gt; and create some starter styles for our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100vh&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Let's go to &lt;code&gt;pages/index.tsx&lt;/code&gt; and remove some junk there. Let's also import our custom monospace font using &lt;a href="https://nextjs.org/docs/api-reference/next/head"&gt;next-head&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Command Palette&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
          &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'https://fonts.googleapis.com/css2?family=Fira+Code&amp;amp;display=swap'&lt;/span&gt;
          &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Press Space For a Command Palette&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our page should now look somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wu5lk0rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/150664950-a78c6034-8144-4903-8605-15c72aadd5ae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wu5lk0rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/150664950-a78c6034-8144-4903-8605-15c72aadd5ae.png" alt="image" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-the-palette"&gt;
  &lt;/a&gt;
  🎨 Building the Palette
&lt;/h1&gt;

&lt;p&gt;Cool! So let's start building out our command palette.&lt;/p&gt;

&lt;p&gt;Create a new file, &lt;code&gt;components/Palette.tsx&lt;/code&gt; and open it up.&lt;/p&gt;

&lt;p&gt;Inside it, let's define the basic structure of our command palette.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Palette&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'dialog'&lt;/span&gt; &lt;span class="na"&gt;aria&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'true'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* Search Icon */&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;
            &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Type to Search...'&lt;/span&gt;
            &lt;span class="na"&gt;spellCheck&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'false'&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
            &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'https://github.com/harshhhdev'&lt;/span&gt;
            &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'norefferer'&lt;/span&gt;
           &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* GitHub Icon */&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
             GitHub
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save it, and import this component into the main file.&lt;/p&gt;

&lt;p&gt;If you check our browser now, the grotesque default styles make me want to vomit. Let's go back to our &lt;code&gt;styles/Home.module.css&lt;/code&gt; file and add in some extra styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.palette&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#323b45&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8%&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.options&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt; &lt;span class="nb"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.options&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.options&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar-thumb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#939faf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.search&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#939faf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.search&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#939faf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.option&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.625rem&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#939faf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#323b45&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.875rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.option&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.option&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#323b45&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#939faf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.option&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.625rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! We can now add these styles to our components accordingly. &lt;/p&gt;

&lt;p&gt;While we're at it, let's also download some icons from &lt;a href="https://react-icons.github.io/react-icons/"&gt;React Icons&lt;/a&gt;, and import them up top.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Palette&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;palette&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'dialog'&lt;/span&gt; &lt;span class="na"&gt;aria&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'true'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FaSearch&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
             &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;
             &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Type to Search...'&lt;/span&gt;
             &lt;span class="na"&gt;spellCheck&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'false'&lt;/span&gt;
             &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
              &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'https://github.com/harshhhdev'&lt;/span&gt;
              &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'norefferer'&lt;/span&gt;
              &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
             &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FaGithub&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
               GitHub
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Phew, that sure looks better. Now let's create multiple links using an array and map it onto the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://hxrsh.in/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Portfolio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FaUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://github.com/harshhhdev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GitHub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FaGithub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://twitter.com/harshhhdev/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Twitter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FaTwitter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under &lt;code&gt;div.options&lt;/code&gt;, let's map the array onto an option element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; 
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'norefferer'&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;icon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and with that, woo-hoo! Our command line's visual aspect is finished 🎉 It should look something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ftpWU8y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/150659528-0b5acc35-925a-4f3f-8d9f-9d58a2e89fd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftpWU8y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/150659528-0b5acc35-925a-4f3f-8d9f-9d58a2e89fd9.png" alt="image" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#searching"&gt;
  &lt;/a&gt;
  🔎 Searching
&lt;/h1&gt;

&lt;p&gt;Let's get the search working. To start off, let's create a filter function which filters our array using a search query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;optionText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;optionText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Now let's get our search bar input and filter the results using some React hooks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create another function, called changeHandler, which will be called when we type something onto the search bar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changeHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FormEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, let's create a new array of objects being passed through the filter function which returns an array of objects with keywords.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredResults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, instead of mapping &lt;code&gt;Options&lt;/code&gt;, let's map &lt;code&gt;filteredResults&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;filteredResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; 
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'norefferer'&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;icon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The search should be working perfectly now! Give yourself a pat on the back if you made it this far.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keyboard-navigation"&gt;
  &lt;/a&gt;
  💻 Keyboard Navigation
&lt;/h1&gt;

&lt;p&gt;One of the crucial characteristics of our command palette should be the ability to navigate it using only the keyboard.&lt;/p&gt;

&lt;p&gt;For this, we'll be using a handy React hook called &lt;a href="https://github.com/dealroom/react-arrow-key-navigation-hook"&gt;react-arrow-key-navigation-hook&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you're using &lt;a href="https://typescriptlang.org"&gt;TypeScript&lt;/a&gt;, unfortunately, this project does not come with type definitions. Either make your own type definitions, turn off library checks in &lt;code&gt;tsconfig.json&lt;/code&gt;, or just create a file called &lt;code&gt;nav.d.ts&lt;/code&gt; paste in &lt;code&gt;declare module 'react-arrow-key-navigation-hook'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After we've done that, we can import it into our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useArrowKeyNavigationHook&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-arrow-key-navigation-hook&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// ...inside the Palette component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parentRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useArrowKeyNavigationHook&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;selectors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a,input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's assign the ref into our &lt;code&gt;wrapper&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;parentRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! We should now be able to navigate through our command palette using just our arrow keys.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#toggle-states"&gt;
  &lt;/a&gt;
  Toggle States
&lt;/h1&gt;

&lt;p&gt;As we prepare to wrap up, we need to add in toggling functionality to our palette. &lt;/p&gt;

&lt;p&gt;Let's create another state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOpen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we close, we also need to reset our &lt;code&gt;searchQuery&lt;/code&gt;. To do this, let's create a toggle function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;setOpen&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's add an event listener to our document inside the &lt;code&gt;useEfffect&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we add a document listener for the "space" key being pressed. When it's pressed, we simply toggle the state of the command palette.&lt;/p&gt;

&lt;p&gt;We should now be able to toggle the state of our palette with the Space key. Nice! However, we also want it so that when the click outside the palette, it should close. &lt;/p&gt;

&lt;p&gt;You can create your own hook for this following &lt;a href="https://www.30secondsofcode.org/react/s/use-click-outside"&gt;this tutorial&lt;/a&gt;, however, for the sake of this tutorial I'll just use &lt;a href="https://github.com/zhaluza/react-detect-click-outside"&gt;react-detect-click-outside&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boundary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDetectClickOutside&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;onTriggered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's assign our &lt;code&gt;boundary&lt;/code&gt; to our &lt;code&gt;contents&lt;/code&gt; element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;boundary&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and viola! The div should work.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;That's it! There are libraries which do this for you, but nothing's as good as building your own from scratch as it leaves you limitless for customising it the way you want!&lt;/p&gt;

&lt;p&gt;Now for those looking for some extra fun or learning something extra, here are some additions you could add to this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Animations using &lt;a href="https://framer.com/motion"&gt;Framer Motion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Create sub-menus using React hooks&lt;/li&gt;
&lt;li&gt;Add a radio button functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's it! Feel free to checkout the live demo on &lt;a href="https://codesandbox.io/s/command-palette-react-4zsur"&gt;CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/4zsur"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>css</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
