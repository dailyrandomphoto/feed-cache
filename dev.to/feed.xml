<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 10 Vscode Theme</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 11:11:48 +0000</pubDate>
      <link>https://dev.to/gw78ah/top-10-vscode-theme-40ae</link>
      <guid>https://dev.to/gw78ah/top-10-vscode-theme-40ae</guid>
      <description>&lt;p&gt;Looking for a new Visual Studio Code theme?&lt;/p&gt;
&lt;span&gt;Developers can be finicky about what themes round out their perfect code editor and IDE setups. Picking the right theme after getting the nuts-and-bolts functionality down pat can top off a customized coding environment. Luckily for Visual Studio Code users, there are some 5,000 options to choose from in the VS Code Marketplace. That's a lot, though, so we are kindly helping you make your decision by presenting the top theme extensions as measured by the number of installations. Here's a summary of the current extensions that have been installed more than 1 million times, of which there are six:&lt;/span&gt;&lt;br&gt;&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/top-10-vs-code-themes/&amp;amp;ved=2ahUKEwimjZP13-vyAhUChuYKHRKkBtIQFnoECAYQAQ&amp;amp;usg=AOvVaw3o3mOOtWb6qQgnkASjEGXG"&gt;Top Vscode Themes&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>20 Best CSS3 Library For Developers.</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 11:02:48 +0000</pubDate>
      <link>https://dev.to/gw78ah/20-best-css3-library-for-developers-lf</link>
      <guid>https://dev.to/gw78ah/20-best-css3-library-for-developers-lf</guid>
      <description>&lt;p&gt;Beautiful CSS was once a time-consuming task for web developers. The CSS libraries have made it easier, quicker, and more efficient to create responsive websites and web apps.&lt;br&gt;Are you still searching for the best CSS libraries available? Are you curious to find out which library is best? This article contains 20 top CSS libraries that will inspire you.&lt;br&gt;&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwi2tZmq3-vyAhUjieYKHVWMAFMQFnoECAoQAQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Build a good looking &lt;input&gt; with Tailwind CSS</title>
      <author>Siddharth Chaudhary (he/him)</author>
      <pubDate>Sat, 09 Oct 2021 11:02:33 +0000</pubDate>
      <link>https://dev.to/sidcraftscode/build-a-good-looking-input-with-tailwind-css-384</link>
      <guid>https://dev.to/sidcraftscode/build-a-good-looking-input-with-tailwind-css-384</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Tailwind CSS is a utility based framework. Which is great in many ways. However, Tailwind CSS does not have a default set of components for you to get started with.&lt;/p&gt;

&lt;p&gt;This is a series that will show you how to build various common UI components with Tailwind CSS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today, we're going to be learning how to make a (good looking) text input with Tailwind CSS&lt;/p&gt;

&lt;p&gt;First, we can start by creating an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter some text..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should definitely add some margins to the element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"m-2"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter some text..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, our input looks pretty blank.&lt;br&gt;
This is because Tailwind CSS removes default browser styles. We can give our input a default look by installing the &lt;code&gt;@tailwindcss/forms&lt;/code&gt; plugin. Use npm or yarn to install the plugin in your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Using npm
npm install @tailwindcss/forms

# Using Yarn
yarn add @tailwindcss/forms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add the plugin to your tailwind.config.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// tailwind.config.js
module.exports = {
  theme: {
    // ...
  },
  plugins: [
    require('@tailwindcss/forms'),
    // ...
  ],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should give our input a border radius&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"rounded-lg m-2"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter some text..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The border is pretty dark, so we should give it a lighter shade of gray.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border-gray-300 rounded-lg m-2"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter some text..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/inpu&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would also be nice to add some shadow to our &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"shadow-sm border-gray-300 rounded-lg m-2"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter some text..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can add the focus styles. We change the ring-width to 2 when it is focused and change the border and ring colors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"shadow-sm border-gray-300 rounded-lg m-2 focus:ring-2 focus:ring-indigo-200 focus:border-indigo-400"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter some text..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what our input should look like now 👇 &lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/chaudhs769/embed/KKvKpyW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading, and I'll be releasing some more posts soon!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>tailwindcss</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Announcing a new series: Building good looking UI components with Tailwind CSS</title>
      <author>Siddharth Chaudhary (he/him)</author>
      <pubDate>Sat, 09 Oct 2021 11:02:19 +0000</pubDate>
      <link>https://dev.to/sidcraftscode/announcing-a-new-series-building-good-looking-ui-components-with-tailwind-css-4ko3</link>
      <guid>https://dev.to/sidcraftscode/announcing-a-new-series-building-good-looking-ui-components-with-tailwind-css-4ko3</guid>
      <description>&lt;p&gt;Tailwind CSS is a utility based framework. Which is great in many ways. However, Tailwind CSS does not have a default set of components for you to get started with.&lt;/p&gt;

&lt;p&gt;I have decided to build a series that will show you how to build good looking UI components with Tailwind CSS&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
    </item>
    <item>
      <title>7 Best Tools For Developers - They Can't Live Without It</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 10:33:34 +0000</pubDate>
      <link>https://dev.to/gw78ah/7-best-tools-for-developers-they-can-t-live-without-it-1cb4</link>
      <guid>https://dev.to/gw78ah/7-best-tools-for-developers-they-can-t-live-without-it-1cb4</guid>
      <description>&lt;p&gt; &lt;span&gt;The&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;best tools for developers &lt;/b&gt;&lt;span&gt;are a priority for them to work. As a developer, he always works with code editors, browsers, terminals, etc. to improve his productivity. VS Code is one of the best editors, every developer would like to work with it. I've also listed the&lt;/span&gt;&lt;span&gt; &lt;/span&gt;VS Code extensions for JS &lt;span&gt;that are useful for a developer. And browser extensions are also a great way to improve productivity and I've also listed&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;Chrome extensions for a developer&lt;/b&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;If you are a junior programmer, this will give you an idea the improve your coding skills, and if you are a senior developer, you are still learn something new from it. Extensions are one the &lt;b&gt;best tools for developers.&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;Let's see the best tools for developers.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/7-best-tools-for-developers-they-cant-live-without-it/"&gt;7 Best Tools For Developers - They Can't Live Without It&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>AI project For Beginners</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 10:19:08 +0000</pubDate>
      <link>https://dev.to/gw78ah/ai-project-for-beginners-2eg8</link>
      <guid>https://dev.to/gw78ah/ai-project-for-beginners-2eg8</guid>
      <description>&lt;p&gt;Artificial Intelligence has made a significant impact on our daily lives. Every time you scroll through social media, open Spotify, or do a quick Google search, you are using an application of AI. The AI industry has expanded massively in the past few years and is predicted to grow even further, reaching around 126 billion U.S. dollars by 2025. Multinational companies like IBM, Accenture, and Apple are actively hiring AI practitioners. The median salary of an AI engineer as of 2021 is $171, 715 that can go over $250,000.&lt;/p&gt;
&lt;p&gt;The field of AI is vast, and there are many areas within the industry that you can choose to specialise. Say , if you are intrigued by facial recognition systems and image generation, you can choose to work in the field of computer vision. If you’d like to build models that can converse with people and learn human language, you can work in the field of NLP (Natural Language Processing).&lt;/p&gt;
&lt;p&gt;There is a lot of work being done today for the advancement of Artificial Intelligence. Companies need AI specialists who can build and deploy scalable models to meet growing industry demands. It isn’t tough to get started in the field of AI. While there is the complexity involved in building machine learning models from scratch, most AI jobs in the industry today don’t require you to know the math behind these models. Many companies require individuals who can build AI solutions, scale them, and deploy them for the end-user. Many high-level libraries and frameworks can help you do this without an in-depth knowledge of how the models work. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/artificial-intelligence-project-for-beginners/"&gt;Artificial Intelligence Project For Beginners 2021&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 10:18:19 +0000</pubDate>
      <link>https://dev.to/gw78ah/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-2ada</link>
      <guid>https://dev.to/gw78ah/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-2ada</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!&lt;/h3&gt;
&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!✌🏻&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;img alt="Increase Your Performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftNfvGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JavaScript is truly an awesome language💛 to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.🚀&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These approaches will definitely help you in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the number of LOC(lines of code),&lt;/li&gt;
&lt;li&gt;Coding Competitions,&lt;/li&gt;
&lt;li&gt;Hackathons or&lt;/li&gt;
&lt;li&gt;Other time bound tasks.⏱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these JavaScript Hacks uses techniques from ECMAScript6(ES2015) onwards, though the latest version is ECMAScript11(ES2020).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: All below tricks have been tested on the Console of Google Chrome. &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/top-20-javascript-tips-and-tricks/"&gt;Top 20 JavaScript tips and tricks to increase your Speed and Efficiency &lt;/a&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Creative Food Delivery Landing Page</title>
      <author>Adom Shafi</author>
      <pubDate>Sat, 09 Oct 2021 10:09:08 +0000</pubDate>
      <link>https://dev.to/adom_shafi_17/creative-food-delivery-landing-page-4e8l</link>
      <guid>https://dev.to/adom_shafi_17/creative-food-delivery-landing-page-4e8l</guid>
      <description>&lt;p&gt;Food Delivery Landing Page is a modern web template for your business. You can download the bootstrap file and launch your food delivery business easily.&lt;/p&gt;

&lt;p&gt;Full View - &lt;a href="https://bootstraptemplate.net/downloads/food-delivery-landing-page/"&gt;https://bootstraptemplate.net/downloads/food-delivery-landing-page/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get UI HUT Lifetime access and use "SOP10" for a 10% discount.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#webtemplate-webdesign"&gt;
  &lt;/a&gt;
  webtemplate #webdesign
&lt;/h1&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>devops</category>
    </item>
    <item>
      <title>Serverless Integration, Zero Code</title>
      <author>Michael Walmsley</author>
      <pubDate>Sat, 09 Oct 2021 10:03:40 +0000</pubDate>
      <link>https://dev.to/walmsles/serverless-integration-zero-code-3i39</link>
      <guid>https://dev.to/walmsles/serverless-integration-zero-code-3i39</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The words of Farah Campbell and Ben Kehoe on "The Serverless Mindset" has inspired me to level up my thinking and approach to Serverless integration. &lt;/p&gt;

&lt;p&gt;So let me share my journey to zero code integration with you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For my first foray into zero code integration, I decided to keep things simple and play with the classic integration pattern of sending data via an API into an SQS queue for downstream processing.  Most serverless websites will have you build an architecture like this, an API gateway triggering a Lambda that pushes to the SQS queue for downstream processing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pTgzSa0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upguplizspa6ubpucpxi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTgzSa0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upguplizspa6ubpucpxi.jpg" alt="Simple Classic Lambda Integration Architecture (with code)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pattern is easy to build, deploy and get working with any of the main Serverless frameworks; my weapon of choice is the Serverless Framework from Serverless Inc.  The Serverless Framework focuses on deploying Lambda functions and makes this task quick and easy. For example, to build the Lambda processor pushing to SQS looks something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;sqs&lt;/span&gt;

&lt;span class="nx"&gt;frameworkVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;
  &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
  &lt;span class="nx"&gt;lambdaHashingVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20201221&lt;/span&gt;

&lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;apiPushSQS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api_push_sqs&lt;/span&gt;
    &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
          &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;THE_QUEUE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;Ref&lt;/span&gt; &lt;span class="nx"&gt;downstreamSQS&lt;/span&gt;

&lt;span class="nx"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="nx"&gt;downstreamSQS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;SQS&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Queue&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Building out the pattern is simple, and the framework focuses on Lambda functions and their events which makes building and deploying quick and easy.  I managed to do this in minutes and felt productive; the instant win had my endorphins flowing, and I was conquering it!  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But is this the ideal serverless solution?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am sure Ben Kehoe would say, "If you came along to my talk today to hear about Lambda, you are in the wrong place", and these words are echoing in my head right now as I write this and think how I can do this without code. &lt;/p&gt;

&lt;p&gt;We all know the AWS API Gateway supports direct, native integrations with many services, and I have designed many systems around these patterns. Still, I have never actually built one using the Serverless framework; until now.  &lt;/p&gt;

&lt;p&gt;To achieve direct integrations from API gateway to other Services involves understanding how to configure the Integration request, and there are choices as to how we can go about this.  I started by configuring the API via the console and followed one of the few blog articles I could find on this topic to set it up, which you can look at &lt;a href="https://medium.com/@pranaysankpal/aws-api-gateway-proxy-for-sqs-simple-queue-service-5b08fe18ce50"&gt;here&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;This article allowed me to see the steps I needed to complete:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the SQS Queue&lt;/li&gt;
&lt;li&gt;Create the IAM Policy allowing API Gateway to use the sqs:SendMessage action on my SQS Queue.&lt;/li&gt;
&lt;li&gt;Create the role to attach the policy to and enable API gateway to assume the role.&lt;/li&gt;
&lt;li&gt;Create the API and define a POST method that we can use to map the incoming request through to the SQS queue.&lt;/li&gt;
&lt;li&gt;Integrate the API resource with our SQS Queue and create an integration mapping template to transform the incoming payload for our forwarding request to the SQS service.&lt;/li&gt;
&lt;li&gt;Deploy and Test the API&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Continue with me on my journey to complete these steps and end up with the following architecture, which uses zero-code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8HbuuS8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbdv7d8fs489cyb533us.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8HbuuS8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbdv7d8fs489cyb533us.jpg" alt="Zero-Code Serverless.yml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To achieve a zero-code solution, we need to learn about the native AWS language of Velocity Templates and understand how data flows through the API Gateway service.  As Ben and Farrah would say - writing code is easy, but being genuinely serverless takes work, and it's not always the work we want to do or is fun to do, but we need to challenge ourselves to leverage the cloud services and write less code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-api-gateway-data-flow-works"&gt;
  &lt;/a&gt;
  How the API Gateway Data flow works
&lt;/h2&gt;

&lt;p&gt;A quick high-level look at an API gateway request for a v1 REST API looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cl06kviF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/401fkrejoihzh0dibyvv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cl06kviF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/401fkrejoihzh0dibyvv.png" alt="AWS API Gateway Data Flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each client request goes through the following stages for a simple un-authenticated request:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Method Request &lt;/li&gt;
&lt;li&gt;Integration Request - where transformations occur for the integration request to SQS&lt;/li&gt;
&lt;li&gt;Backend Service (Simple Queue Service in this case)&lt;/li&gt;
&lt;li&gt;Integration Response - where transformations occur for the integration response from SQS&lt;/li&gt;
&lt;li&gt;Method Response - Mapping of integration Response to Method response for the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that we know the steps for the API request through the gateway, we can start setting this up using the Serverless framework because that's my current go-to for deploying serverless solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-sqs-queue"&gt;
  &lt;/a&gt;
  Create the SQS Queue
&lt;/h2&gt;

&lt;p&gt;Creating the SQS queue is the easiest part of this solution. First, add the following to the resources section of the serverless YAML file.  I prefer not to provide the QueueName when setting up SQS; this allows the serverless framework to name the resources using the usual naming standard of serviceName-stage-resourceName-randomString.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;sqsQueue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;SQS&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Queue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-the-iam-policy-and-role"&gt;
  &lt;/a&gt;
  Create the IAM Policy and Role
&lt;/h2&gt;

&lt;p&gt;To create the IAM Role and Policy, we cannot use the standard IAM methods for the Serverless Framework since these focus on setting up IAM Roles and Policies for functions in your solution.  This time there are no functions or Lambdas at all!&lt;br&gt;
Add the role and policy details into the Serverless YAML file in the resources section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWGCpcxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc45qsy3wgn8pm7qweqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWGCpcxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc45qsy3wgn8pm7qweqh.png" alt="IAM Role and Policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lines 23 - 34&lt;/strong&gt; enable API gateway to assume the role &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lines 35 - 44&lt;/strong&gt; define the actions allowed by the policy&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 44&lt;/strong&gt; uses Cloudformation intrinsic function !GetAtt to get the Arn of the SQS Queue we create in the stack.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-the-rest-api"&gt;
  &lt;/a&gt;
  Create the Rest API
&lt;/h2&gt;

&lt;p&gt;To create the Rest API, we need to create an AWS::Apigateway::Rest resource.  Usually, the Serverless Framework would make this for you under the covers as it creates functions triggered by HTTP events.  In the configuration for the RestApi, I have used &lt;code&gt;${self:custom.resourcePrefix}&lt;/code&gt; for the "Name", which is a variable I set up to use for the naming of Services throughout my Serverless YAML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1xUHVrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pcsliy8zt4bmbo8229v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1xUHVrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pcsliy8zt4bmbo8229v.png" alt="Create AWS RestApi"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-the-api-resources-and-integrate-to-our-sqs"&gt;
  &lt;/a&gt;
  Create the API Resources and Integrate to our SQS
&lt;/h2&gt;

&lt;p&gt;We create the  API method using the "AWS::ApiGateway::Method" resource, which needs to look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5C4GWehL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmoe5x1iwlng85mvowst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5C4GWehL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmoe5x1iwlng85mvowst.png" alt="AWS API Method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating the API  method and integration is where all the work is in building out our zero-code solution and will break this down into the following steps for clarity:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the API Method and Responses (lines 60 - 70)&lt;/li&gt;
&lt;li&gt;Create the integration - the easy bits (lines 71 - 79)&lt;/li&gt;
&lt;li&gt;Create the Integration Request (lines 80 - 84)&lt;/li&gt;
&lt;li&gt;Create the Integration Response (lines 85 - 99)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#create-the-api-method"&gt;
  &lt;/a&gt;
  Create the API Method
&lt;/h3&gt;

&lt;p&gt;Creating the Method resource is the easy bit.  We set up the API Method on line 60 and Method responses on lines 64 - 69.  The HTTP status codes returned by the Integration response must be configured in the Method responses so that the API gateway will not throw an error and return an "HTTP 500 internal server error". &lt;/p&gt;

&lt;p&gt;On &lt;strong&gt;line 61&lt;/strong&gt;, we use "!GetAtt apiGw.RootResourceId" to obtain the actual Id for the RestApi.&lt;/p&gt;

&lt;p&gt;On &lt;strong&gt;line 62&lt;/strong&gt;, we use "!Ref apiGw" to retrieve the RestApiId for our REST API. &lt;/p&gt;

&lt;p&gt;We have to use these Cloudformation intrinsic functions here since we want the values after AWS has created them during the stack deployment.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-the-integration-the-easy-bits"&gt;
  &lt;/a&gt;
  Create the integration - the easy bits
&lt;/h3&gt;

&lt;p&gt;I will break this down by the lines to make it easier to follow and explain each step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 71&lt;/strong&gt; defines the HTTP Method API gateway will use when calling the Integration endpoint; in this case, we want to use POST since we are sending data to SQS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 72&lt;/strong&gt; defines the type of integration; in this case, we are doing a direct service integration, so will use "AWS".  Using AWS means using an internal integration that allows us to transform the payload rather than "AWS_PROXY", which will proxy the request directly to the integration service leaving the body untouched.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 73&lt;/strong&gt; defines the IAM Role the API Gateway will assume while performing the integration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 74&lt;/strong&gt; defines the URI of the action we want to invoke.  The Uri action we need to invoke will look like "arn:aws:API gateway:us-east-1:sqs:path/1234567890/the_queue_name", so we are using the Cloudformation intrinsic function "Join" to create this for us.&lt;/p&gt;

&lt;p&gt;Once we have these attributes configured, we have defined the core details on the service we are integrating, the "How".&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-the-integration-request"&gt;
  &lt;/a&gt;
  Create The Integration Request
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Line 80&lt;/strong&gt; defines the PassthroughBehaviour - I like to use "NEVER" so that if we receive an unexpected request "Content-Type", then API gateway will respond with an &lt;code&gt;HTTP 415 error - Unsupported Media Type&lt;/code&gt;, which I think is desirable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 81 - 82&lt;/strong&gt; defines the request parameters we send to SQS; we will map our request into &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; values when sending our POST to SQS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lines 83 - 84&lt;/strong&gt; define how we will transform the incoming body and send it to SQS; this is a simple VTL template setting the &lt;code&gt;Action=SendMessage&lt;/code&gt; and &lt;code&gt;MessageBody=$input.JSON($)&lt;/code&gt;, which is the JSON body of the request to be sent to the SQS queue. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-the-integration-response"&gt;
  &lt;/a&gt;
  Create the Integration Response
&lt;/h3&gt;

&lt;p&gt;So far, we have created the API, formed the integration request and sent it to SQS; now, we have to deal with the SQS service response and map a response back to our caller using the "IntegrationResponses" attribute.  The value expected here is a MAP of HTTP status codes and VTL template snippets to transform the HTTP response we get from SQS.  In this demo, I have mapped the following response codes - 200, 404 to responses that will look something like the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP 200 Response&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We use a VTL template to transform the SQS response into a payload that we want to return rather than the entire integration payload.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;request_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ea87ccb1-92d3-51ff-b9f0-956ad19844d7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;173689a1-6b40-492e-9e6c-338c13b70f16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accepted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;HTTP 404 Response&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error_code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error_message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unable to complete Request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-and-test-the-api"&gt;
  &lt;/a&gt;
  Deploy and Test the API
&lt;/h2&gt;

&lt;p&gt;After creating the SQS Queue and a new REST API, we need to deploy our API to a stage so our clients can call the API.&lt;br&gt;
Lines 101 - 108 define the Stage Deployment of our API and will make the API available.&lt;br&gt;
Important Note: This resource will only work for the first deployment; any change to your REST API will not deploy as part of a stack update.  I searched far and wide for a solution to this behaviour and landed on the need to run a post-stack update API deployment using the console or AWS CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="nx"&gt;apigateway&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;deployment&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;region&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;region&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-wrapup"&gt;
  &lt;/a&gt;
  The Wrap-Up
&lt;/h2&gt;

&lt;p&gt;Writing a Zero-Code Serverless integration has been an evolving journey, and I have shared the details of where I ended up in this article.  I have learned a lot about AWS along the way and encourage you to explore and try code-less integrations in your solutions as a way of levelling up your journey to serverless nirvana.  What I have shared today is not production-ready - I am still exploring these patterns to make them more resilient and reliable for live use.&lt;/p&gt;

&lt;p&gt;Check out the real working Serverless Solution (No code included) on my GitHub repository &lt;a href="https://github.com/walmsles/zero-code-api-sqs"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>architecture</category>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 09:42:14 +0000</pubDate>
      <link>https://dev.to/gw78ah/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-4fcp</link>
      <guid>https://dev.to/gw78ah/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-4fcp</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Get list of All Environment Variables' key Used in a Golang Module or Project</title>
      <author>kuldeep_singh</author>
      <pubDate>Sat, 09 Oct 2021 09:29:32 +0000</pubDate>
      <link>https://dev.to/mavensingh/how-to-get-list-of-all-environment-variables-used-in-a-module-or-project-19l2</link>
      <guid>https://dev.to/mavensingh/how-to-get-list-of-all-environment-variables-used-in-a-module-or-project-19l2</guid>
      <description>&lt;p&gt;In this article we're about to write a program which helps us to get the all environment variables which is used in your project.&lt;/p&gt;

&lt;p&gt;Why I created this program?&lt;br&gt;
So recently in my current company we've decided to separate the modules which is not dependent on anycode, because the project structure was become larger that's why we decided to separate modules.&lt;/p&gt;

&lt;p&gt;We moved code successfully but now comes problem how will you gonna get how many environment variables that separated module needed to run without causing any runtime issue.&lt;/p&gt;

&lt;p&gt;So we decided to write a script to get the list of used environment variables used in that module.&lt;/p&gt;

&lt;p&gt;How we are going to achieve this let's see the steps we needed to get the list of environment variables from module&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We're about to use command line argument which is going to be 
path of the module or project&lt;/li&gt;
&lt;li&gt;Reading module repository recursively using the filepath.Walk() 
function and only extracting the golang files full path.&lt;/li&gt;
&lt;li&gt;Here comes the main part, we're going to use regular expression 
for that because we know pattern of accessing environment 
variables in golang which is os.Getenv() function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So let's start Writing Code Now:&lt;/p&gt;

&lt;p&gt;Step 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

    dirPath := os.Args[1]

    if &amp;amp;dirPath == nil {
        fmt.Println("Argument can't be nil..")
        os.Exit(2)
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 2.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
err := filepath.Walk(dirPath,
        func(path string, d os.FileInfo, err error) error {
            if err != nil {
                return err
            }

            f := strings.Split(d.Name(), ".")
            if f[len(f)-1] == "go" {
                dir = append(dir, path)
            }
            return nil
        })
    if err != nil {
        fmt.Println("Error to open directries..")
        return
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 3.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
for _, f := range dir {
        file, err := os.Open(f)
        if err != nil {
            e := ErrorArray{
                Err:  err,
                File: f,
            }
            ErrArr = append(ErrArr, e)
        }

        scanner := bufio.NewScanner(file)
        scanner.Split(bufio.ScanLines)
        for scanner.Scan() {
            re := regexp.MustCompile(`os.Getenv(.*)`)
            en := re.FindString(scanner.Text())
            if len(en) == 0 {
                continue
            }
            if strings.Contains(en, "+") {
                n := strings.Split(en, "+")
                for _, v := range n {
                    if strings.Contains(v, "os.Getenv") {
                        str := Replaced(v)
                        _, exists := MapArr[str]
                        if exists {
                            MapArr[str]++
                            continue
                        }
                        MapArr[str] = 1
                    }

                }
                continue
            } else if strings.Contains(en, ",") {
                n := strings.Split(en, ",")
                for _, v := range n {
                    if strings.Contains(v, "os.Getenv") {
                        str := Replaced(v)
                        _, exists := MapArr[str]
                        if exists {
                            MapArr[str]++
                            continue
                        }
                        MapArr[str] = 1
                    }

                }
                continue
            }
            str := Replaced(en)
            _, exists := MapArr[str]
            if exists {
                MapArr[str]++
                continue
            }
            MapArr[str] = 1
        }
        file.Close()
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If Have Any Queries Then Lemme Know&lt;br&gt;
Read More : &lt;a href="https://kdsingh4.blogspot.com/2021/10/how-to-get-list-of-all-environment.html"&gt;https://kdsingh4.blogspot.com/2021/10/how-to-get-list-of-all-environment.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also Subscribe My Channel To Support Me : &lt;a href="https://www.youtube.com/channel/UCXhmNqWQ50zitqIdTgS7s8Q"&gt;https://www.youtube.com/channel/UCXhmNqWQ50zitqIdTgS7s8Q&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Tips to become a great programmer</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 09:07:47 +0000</pubDate>
      <link>https://dev.to/gw78ah/tips-to-become-a-great-programmer-3im1</link>
      <guid>https://dev.to/gw78ah/tips-to-become-a-great-programmer-3im1</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
