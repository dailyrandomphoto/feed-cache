<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>you need to relax a little developers</title>
      <author>open devs</author>
      <pubDate>Sat, 20 Feb 2021 10:52:57 +0000</pubDate>
      <link>https://dev.to/opendevs_2020/you-need-to-relax-a-little-developers-4l6c</link>
      <guid>https://dev.to/opendevs_2020/you-need-to-relax-a-little-developers-4l6c</guid>
      <description>&lt;p&gt;hello friends, you know what is the best thing about vs-code? you can configure it the way you want &amp;amp; develop something to expand upon it. well in that context, today we at &lt;a href="https://opendevs.in"&gt;opendevs&lt;/a&gt; are introducing a new product: &lt;a href="https://marketplace.visualstudio.com/items?itemName=open-devs.relax-a-little"&gt;relax a little&lt;/a&gt;. as the name suggests, this free extension tells you to relax in a way that you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gLAa7I0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AmdRirRdIsRC2-DRumw-sNQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gLAa7I0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AmdRirRdIsRC2-DRumw-sNQ.png" alt="relax a little marketplace listing"&gt;&lt;/a&gt;&lt;em&gt;relax a little marketplace listing&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-what-do-you-mean-in-a-way-you-want-" class="anchor"&gt;
  &lt;/a&gt;
  Wait, What do you mean in a way you want ü§î?
&lt;/h2&gt;

&lt;p&gt;well like a good but strict friend it can remind you to take a break from all the coding youŒì√á√ñre doing &amp;amp; tell you to drink a little water or tell you to stop typing for a while, or straight up make the coding so uncolored that you have to take a break... but it asks you every detail about it first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-use-it-" class="anchor"&gt;
  &lt;/a&gt;
  How can I use it üìú?
&lt;/h2&gt;

&lt;p&gt;just configure it using the various ways available to make it more stubborn than you are so, itŒì√á√ñll take care of the rest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-can-i-configure-%E2%9A%99" class="anchor"&gt;
  &lt;/a&gt;
  What exactly can I configure ‚öô?
&lt;/h2&gt;

&lt;p&gt;whatever you want:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#at-what-time-you-want-to-take-a-break" class="anchor"&gt;
  &lt;/a&gt;
  at what time you want to take a break
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMPTr4Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ADlqxj9by1ogldhPmAcfxIQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMPTr4Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ADlqxj9by1ogldhPmAcfxIQ.png" alt="minutes till break setting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minutes-till-break-setting" class="anchor"&gt;
  &lt;/a&gt;
  minutes till break setting
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhwA3O6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A3JJeZHIoSfmmY-_jXD0igQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhwA3O6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A3JJeZHIoSfmmY-_jXD0igQ.png" alt="break duration minutes setting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#break-duration-minutes-setting" class="anchor"&gt;
  &lt;/a&gt;
  break duration minutes setting
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G02sc870--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ai4Xh4rZI4QCCCJUwdbXoCw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G02sc870--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ai4Xh4rZI4QCCCJUwdbXoCw.png" alt="wind down duration minutes setting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#at-what-rate-colors-will-change" class="anchor"&gt;
  &lt;/a&gt;
  at what rate colors will change?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DIoDkl2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYJhLMrCSYNy4ISyQu0y5Gw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIoDkl2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYJhLMrCSYNy4ISyQu0y5Gw.png" alt="color change frames setting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#color-change-frames-setting" class="anchor"&gt;
  &lt;/a&gt;
  color change frames setting
&lt;/h3&gt;

&lt;p&gt;if you forget to drink sufficient water (like us), then at what duration it should tell you for a little water break:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qU86xnsT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AaqOCUNhByLFlR8Y1jdT_KA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qU86xnsT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AaqOCUNhByLFlR8Y1jdT_KA.png" alt="minutes till water break setting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minutes-till-water-break-setting" class="anchor"&gt;
  &lt;/a&gt;
  minutes till water break setting
&lt;/h3&gt;

&lt;p&gt;finally, our motivation behind it is to not put 1000 blocking notifications on your screen as &lt;a href="https://github.com/Microsoft/vscode/issues/63460"&gt;we know how much some of you hate annoying popups&lt;/a&gt;, we did our homework:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ASQ-kfe9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ar63m-tYNFCYRHhNTnDCrnw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ASQ-kfe9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ar63m-tYNFCYRHhNTnDCrnw.png" alt="blocking notification setting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also, each feature can individually be turned off, so you are good at your water amount or are saving water for the environment you can tell the extension so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpRPHfep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AZiQ8AabvsWxXvSaqx_oCjQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpRPHfep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AZiQ8AabvsWxXvSaqx_oCjQ.png" alt="commands available"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-demo" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/open-devs/relax-a-little#-demo"&gt;Full Demo&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-story-or-motivation-behind-this" class="anchor"&gt;
  &lt;/a&gt;
  What's the story or motivation behind this‚ùì
&lt;/h2&gt;

&lt;p&gt;well on a fine lockdown Sunday we were working on some freelancing work, we were at it for a few hours at that point in time not realizing how much time has passed, one of us remember sitting at our laptop after morning break and when he looked out of the window next, people were taking their dogs out for evening stroll ü§¶‚Äç‚ôÇÔ∏èü§¶‚Äç. we knew we had to do something about it &amp;amp; we definitely show some of our friends having the same issue. we added this extension to our roadmap.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-can-simply-ignore-these-notifications-no-use-to-me" class="anchor"&gt;
  &lt;/a&gt;
  I can simply ignore these notifications, no use to me üòë
&lt;/h2&gt;

&lt;p&gt;if you want you can contact us &amp;amp; we might give you a call from time to time (on skype or other free platforms of course) but thatŒì√á√ñs all we can do right? after all self-control is the key thing to learn while being a developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-i-contribute-to-make-it-better-" class="anchor"&gt;
  &lt;/a&gt;
  Can I contribute to make it better üòé ?
&lt;/h2&gt;

&lt;p&gt;of course, you can we will love it for you to come up with ideas to improve fellow developers' health without being disruptive to their work &amp;amp; then implement those great ideas with us or fix some critical issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-there-some-ideas-you-have-in-mind-that-i-can-develop-as-of-now-" class="anchor"&gt;
  &lt;/a&gt;
  Are there some ideas you have in mind that I can develop as of now ü§©?
&lt;/h2&gt;

&lt;p&gt;we do want to have a theme changer feature in it in near future to change the theme based on the time of the day, we also want to include some random quotes in breaks to make it fun to look at, of course, all of these features should be individually turn off-able.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c3VJxebx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A4aMS8SsV3Hj05yH30Ml6DQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c3VJxebx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A4aMS8SsV3Hj05yH30Ml6DQ.png" alt="[https://www.buymeacoffee.com/opendevs](https://www.buymeacoffee.com/opendevs)"&gt;&lt;/a&gt;&lt;em&gt;&lt;a href="https://www.buymeacoffee.com/opendevs"&gt;https://www.buymeacoffee.com/opendevs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-save-on-all-those-medicine-costs-amp-give-this-project-an-at-github-amp-visual-studio-marketplace-or-buy-us-a-coffee" class="anchor"&gt;
  &lt;/a&gt;
  so save on all those medicine üíä costs &amp;amp; give this project an ‚≠ê at &lt;a href="https://github.com/open-devs/relax-a-little"&gt;github&lt;/a&gt; &amp;amp; &lt;a href="https://marketplace.visualstudio.com/items?itemName=open-devs.relax-a-little"&gt;visual studio marketplace&lt;/a&gt; or buy us a coffee?
&lt;/h3&gt;

</description>
      <category>vscode</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 useful javascript tricks</title>
      <author>Ratul</author>
      <pubDate>Sat, 20 Feb 2021 10:10:41 +0000</pubDate>
      <link>https://dev.to/ratuloss/5-useful-javascript-tricks-4kp8</link>
      <guid>https://dev.to/ratuloss/5-useful-javascript-tricks-4kp8</guid>
      <description>&lt;p&gt;In this post, I will show you 5 awesome javascript tricks which will make your life more easier. And will help you to become a better developer. So if you are interested, continue reading.&lt;/p&gt;

&lt;h1&gt;Trick-1: Remove duplicates from an Array!&lt;/h1&gt;

&lt;p&gt;This trick is pretty simple. Suppose I have an array which is containing number, strings and booleans. And in this array I want to make sure, that there's no duplicate item. So how do you do do that?&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ratul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filtered__array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filtered__array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [ 1, 2, 3, true, false, 'Ratul', 5 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Simple!&lt;/p&gt;



&lt;h1&gt;Trick-2: Turn a Decimal Number to a Normal number&lt;/h1&gt;

&lt;p&gt;This one is a pretty straight forward trick. Let me show you.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;23.6565&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Isn't it so simple!&lt;/p&gt;



&lt;h1&gt;Trick-3: Getting the Last Value of an Array!&lt;/h1&gt;

&lt;p&gt;Suppose you have an array of something. Now if you want to have the last item of the array, how will you do that?&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;last_Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;last_Item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we go! Now if you put -2 instead of -1, you will get the last two values of the array and then if you give -3 instead of -2, you will get the value of last three index's and so on.&lt;/p&gt;



&lt;h1&gt;Trick-4: Get a random index value from an array.&lt;/h1&gt;

&lt;p&gt;Suppose we are doing a lottery programme. We have an array which is containing the names of the prticipants. Now we want only one user randomly from the array to decide a winner.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ratul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;George&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;july&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Padrik&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;G&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;winner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;winner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// july was the winner üòä&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;h1&gt;Trick-5: Detect the most lengthy word in an array&lt;/h1&gt;

&lt;p&gt;Create an array and add some different strings. Now print the most lengthy string of this array.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pine-apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack-fruit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;most_lengthy_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;most_lengthy_string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;most_lengthy_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;most_lengthy_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Simple! So let me explain you what's going on here. Firstly we have array which is containing some strings. And After that, I have created a variable which is containing an empty string. And now, to detect the most lengthy string in this array, I need to take a look at all of the array items So I have looped through the array. And if the array's item length is greater that the length of our "most_lengthy_string" The we are reassigning the value of the variable and after all I am just printing out the variable. That's all!&lt;/p&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Thanks for reading this article. Hope you enjoyed that. If you have any doubt regarding that post, please let me know. And make sure you follow me to recieve all the informational posts just like that.&lt;/p&gt;

&lt;h1&gt;:)&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Solution: Roman to Integer</title>
      <author>seanpgallivan</author>
      <pubDate>Sat, 20 Feb 2021 09:52:58 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-roman-to-integer-567f</link>
      <guid>https://dev.to/seanpgallivan/solution-roman-to-integer-567f</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/roman-to-integer/discuss/1074149"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-13-easy-roman-to-integer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/roman-to-integer/"&gt;Leetcode Problem #13 (&lt;em&gt;Easy&lt;/em&gt;): Roman to Integer&lt;/a&gt;
&lt;/h4&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Roman numerals are represented by seven different symbols: &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;em&gt;Symbol&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;Value&lt;/em&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;I&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;V&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;5&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;X&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;10&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;L&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;50&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;C&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;100&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;D&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;500&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;M&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;1000&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;For example, &lt;code&gt;2&lt;/code&gt; is written as &lt;code&gt;II&lt;/code&gt; in Roman numeral, just two one's added together. &lt;code&gt;12&lt;/code&gt; is written as &lt;code&gt;XII&lt;/code&gt;, which is simply &lt;code&gt;X + II&lt;/code&gt;. The number &lt;code&gt;27&lt;/code&gt; is written as &lt;code&gt;XXVII&lt;/code&gt;, which is &lt;code&gt;XX + V + II&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not &lt;code&gt;IIII&lt;/code&gt;. Instead, the number four is written as &lt;code&gt;IV&lt;/code&gt;. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as &lt;code&gt;IX&lt;/code&gt;. There are six instances where subtraction is used:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;em&gt;&lt;code&gt;I&lt;/code&gt; can be placed before &lt;code&gt;V&lt;/code&gt; (&lt;code&gt;5&lt;/code&gt;) and &lt;code&gt;X&lt;/code&gt; (&lt;code&gt;10&lt;/code&gt;) to make &lt;code&gt;4&lt;/code&gt; and &lt;code&gt;9&lt;/code&gt;.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;em&gt;&lt;code&gt;X&lt;/code&gt; can be placed before &lt;code&gt;L&lt;/code&gt; (&lt;code&gt;50&lt;/code&gt;) and &lt;code&gt;C&lt;/code&gt; (&lt;code&gt;100&lt;/code&gt;) to make &lt;code&gt;40&lt;/code&gt; and &lt;code&gt;90&lt;/code&gt;.&lt;/em&gt; &lt;/li&gt;
&lt;li&gt; &lt;em&gt;&lt;code&gt;C&lt;/code&gt; can be placed before &lt;code&gt;D&lt;/code&gt; (&lt;code&gt;500&lt;/code&gt;) and &lt;code&gt;M&lt;/code&gt; (&lt;code&gt;1000&lt;/code&gt;) to make &lt;code&gt;400&lt;/code&gt; and &lt;code&gt;900&lt;/code&gt;.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Given a roman numeral, convert it to an integer.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Input:&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;s = "III"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:*&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Input:&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;s = "IV"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Output:&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Input:&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;s = "IX"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Output:&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 4:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Input:&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;s = "LVIII"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Output:&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Explanation:&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;L = 50, V= 5, III = 3.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 5:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Input:&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;s = "MCMXCIV"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Output:&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;1994&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Explanation:&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;M = 1000, CM = 900, XC = 90 and IV = 4.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 15&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;s&lt;/code&gt; contains only the characters &lt;code&gt;('I', 'V', 'X', 'L', 'C', 'D', 'M')&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is guaranteed that &lt;code&gt;s&lt;/code&gt; is a valid roman numeral in the range &lt;code&gt;[1, 3999]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The only really tricky thing about counting in roman numerals is when a numeral is used as a subtractive value rather than an additive value. In &lt;strong&gt;"IV"&lt;/strong&gt; for example, the value of &lt;strong&gt;"I"&lt;/strong&gt;, &lt;strong&gt;1&lt;/strong&gt;, is subtracted from the value of &lt;strong&gt;"V"&lt;/strong&gt;, &lt;strong&gt;5&lt;/strong&gt;. Otherwise, you're simply just adding the values of all the numerals.&lt;/p&gt;

&lt;p&gt;The one thing we should realize about the subtractive numerals is that they're identifiable because they appear &lt;em&gt;before&lt;/em&gt; a larger number. This means that the easier way to iterate through roman numerals is from right to left, to aid in the identifying process.&lt;/p&gt;

&lt;p&gt;So then the easy thing to do here would be to iterate backwards through &lt;strong&gt;S&lt;/strong&gt;, look up the value for each letter, and then add it to our answer (&lt;strong&gt;ans&lt;/strong&gt;). If we come across a letter value that's smaller than the largest one seen so far, it should be subtracted rather than added.&lt;/p&gt;

&lt;p&gt;The standard approach would be to use a separate variable to keep track of the highest value seen, but there's an easier trick here. Since numbers generally increase in a roman numeral notation from right to left, any subtractive number must also be smaller than our current &lt;strong&gt;ans&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So we can avoid the need for an extra variable here. We do run into the case of repeated numerals causing an issue (ie, &lt;strong&gt;"III"&lt;/strong&gt;), but we can clear that by multiplying &lt;strong&gt;num&lt;/strong&gt; by any number between &lt;strong&gt;2&lt;/strong&gt; and &lt;strong&gt;4&lt;/strong&gt; before comparing it to &lt;strong&gt;ans&lt;/strong&gt;, since the numerals jump in value by increments of at least &lt;strong&gt;5x&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Once we know how to properly identify a subtractive numeral, it's a simple matter to just iterate backwards through &lt;strong&gt;S&lt;/strong&gt; to find and &lt;strong&gt;return&lt;/strong&gt; the &lt;strong&gt;ans&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Javascript and Python both operate with objects / disctionaries quite quickly, so we'll use a lookup table for roman numeral values.&lt;/p&gt;

&lt;p&gt;Java and C++ don't deal with objects as well, so we'll use a switch case to function much the same way.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;roman&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;V&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;L&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;D&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;romanToInt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;roman&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;roman&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'V'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'L'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;romanToInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;roman&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;romanToInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'I'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'V'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'X'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'L'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'C'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'M'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;romanToInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'V'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'L'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>The current state of local Laravel development</title>
      <author>Andrew Schmelyun</author>
      <pubDate>Sat, 20 Feb 2021 08:59:00 +0000</pubDate>
      <link>https://dev.to/aschmelyun/the-current-state-of-local-laravel-development-4if2</link>
      <guid>https://dev.to/aschmelyun/the-current-state-of-local-laravel-development-4if2</guid>
      <description>&lt;p&gt;Right now there's a lot of options when it comes to working with Laravel on a local development environment. Where there used to be only a handful of options, there's now over a &lt;em&gt;half dozen&lt;/em&gt; officially supported ones.&lt;/p&gt;

&lt;p&gt;In this article, I'm going to try and give a brief synopsis of each of them, provide some pros and cons, and include a basic high-level overview of what you'll need to get started with each.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to skip ahead to a particular area?&lt;/strong&gt; Here's a list of the methods we'll be talking about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#localServer"&gt;Install a server stack locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vagrantHomestead"&gt;Vagrant and Homestead&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#artisanServe"&gt;artisan serve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sail"&gt;Sail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#valet"&gt;Valet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#laradock"&gt;Laradock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customDocker"&gt;Roll your own Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alright, let's dive right into it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-a-server-stack-locally" class="anchor"&gt;
  &lt;/a&gt;
  Install a server stack locally &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The old tried and true, installing a full LAMP stack directly on your local development hardware. On a Linux (and to some extent, MacOS) machine, it's not &lt;em&gt;that&lt;/em&gt; difficult. For Windows users who aren't using WSL however, it can be a little complex if you're not using a pre-built software like WAMP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I like about this method:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's the fastest response time since you're running directly on the machine&lt;/li&gt;
&lt;li&gt;The full stack is ready to go as soon as your computer boots up&lt;/li&gt;
&lt;li&gt;You have the full resources from your machine available to the software stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What I don't like:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upgrading your OS can break things like Apache or MySQL&lt;/li&gt;
&lt;li&gt;It can be difficult to get multiple sites running at the same time&lt;/li&gt;
&lt;li&gt;Hardware differences between local and production environments can potentially cause deployment issues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Despite the negatives, this is still a solid way of creating a local Laravel development environment. Getting started can take a bit of time, but it's a pretty straightforward process. You'll be installing Apache, MySQL, and PHP, setting up vhosts rules pointing to a local domain name, and finally enabling the PHP extensions that your application requires.&lt;/p&gt;

&lt;p&gt;The best tutorials I've found for this method are as follows for each OS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;MacOS&lt;/strong&gt;: &lt;a href="https://getgrav.org/blog/macos-bigsur-apache-multiple-php-versions"&gt;https://getgrav.org/blog/macos-bigsur-apache-multiple-php-versions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Windows&lt;/strong&gt;: &lt;a href="https://gist.github.com/sutlxwhx/cb1c124d560c5a2d21fe94ca25aed1e1"&gt;https://gist.github.com/sutlxwhx/cb1c124d560c5a2d21fe94ca25aed1e1&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Linux&lt;/strong&gt;: &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04"&gt;https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After running through the installation and setup process, all you'll have to do is ensure your Laravel app is under the correct path that you set in your web server config, and you should be good to go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vagrant-and-homestead" class="anchor"&gt;
  &lt;/a&gt;
  Vagrant and Homestead &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Homestead is an &lt;strong&gt;official Vagrant box&lt;/strong&gt; released by Laravel to help you get a local, containerized environment set up fast. If you're unfamiliar, &lt;a href="https://vagrantup.com"&gt;Vagrant&lt;/a&gt; is an application that helps you provision and manage virtual machines, capable of replicating the full stack of software required by your application. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I like about this method:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creates isolation between your local hardware and software, and what's required by your application&lt;/li&gt;
&lt;li&gt;Easy to get started with a handful of commands&lt;/li&gt;
&lt;li&gt;Can provision a portion of your system resources, ensuring that your application doesn't use anything in excess&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What I don't like:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Even small virtual machines take up a proportionately large amount of system resources&lt;/li&gt;
&lt;li&gt;Response time can be delayed since the filesystem is separated by a virtualization layer&lt;/li&gt;
&lt;li&gt;Vagrant has largely fallen out of favor in most applications for Docker and other modern containerization software&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although some may consider that Vagrant is outdated, being replaced by more modern containerization software, it's still a battle-tested enterprise solution that's been powering and deploying production applications for over a decade. &lt;/p&gt;

&lt;p&gt;To get started, all you'll have to do is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.vagrantup.com/docs/installation"&gt;Install Vagrant&lt;/a&gt; for your OS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;Install VirtualBox&lt;/a&gt; for your OS as a provider to Vagrant&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git clone https://github.com/laravel/homestead.git ~/Homestead&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create the &lt;strong&gt;Homestead.yaml&lt;/strong&gt; config file with &lt;code&gt;bash init.sh&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://laravel.com/docs/8.x/homestead#configuring-homestead"&gt;Configure and launch&lt;/a&gt; the Vagrant box with Homestead&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, your Laravel application should be available to your browser at &lt;code&gt;localhost&lt;/code&gt;. There's also a variety of optional services that are brought up with the virtual machine and exposed to your local system (like &lt;strong&gt;MongoDB, Mailhog, and Minio&lt;/strong&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#artisan-serve" class="anchor"&gt;
  &lt;/a&gt;
  artisan serve  &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This method follows a similar path as the local server stack, as far as requirements goes, except that essentially you can skip over installing a web server.&lt;/p&gt;

&lt;p&gt;You will need to have both &lt;strong&gt;PHP and MySQL&lt;/strong&gt; (or your database of choice) installed on your local machine. Behind the scenes it's using PHP's built-in &lt;a href="https://www.php.net/manual/en/features.commandline.webserver.php"&gt;web server&lt;/a&gt; to power the command and expose the default port of &lt;code&gt;:8000&lt;/code&gt; to your local machine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I like about this method:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It couldn't be much simpler to get the development server started&lt;/li&gt;
&lt;li&gt;No installation or configuration of a local web server (like Apache)&lt;/li&gt;
&lt;li&gt;Very resource-light&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What I don't like:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Response time for large requests can be pretty long&lt;/li&gt;
&lt;li&gt;The web server runs one single-threaded process, so applications will stall if a request is blocked.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my opinion, if you're just running a single local instance of a development application, this method should work well for you. Combined with something like &lt;a href="https://ngrok.com/"&gt;Ngrok&lt;/a&gt; or Beyond Code's &lt;a href="https://beyondco.de/docs/expose/introduction"&gt;Expose&lt;/a&gt; for domain masking of your development port, and you're good to go.&lt;/p&gt;

&lt;p&gt;To use this method, all you have to do is open a terminal and &lt;code&gt;cd&lt;/code&gt; to the project directory of your Laravel app. Once there, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan serve
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Optionally, you can specify the port like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan serve &lt;span class="nt"&gt;--port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;8808
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should be notified that a local Laravel development server has been started at &lt;code&gt;127.0.0.1:8000&lt;/code&gt; (unless you specified a different port). Open it up in your browser, and you're off!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sail" class="anchor"&gt;
  &lt;/a&gt;
  Sail  &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The newest addition to the &lt;em&gt;official&lt;/em&gt; local Laravel development family, Sail is a command-line interface that helps you set up, configure, and interact with a default Docker dev environment.&lt;/p&gt;

&lt;p&gt;You have the choice of either installing Sail alongside an existing application, or using it to bring up a brand new Laravel app. Sail allows you to run PHP, Composer, npm, and artisan commands &lt;strong&gt;without having to have anything installed on your local machine&lt;/strong&gt; except Docker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I like about this method:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Zero dependencies need to be installed besides Docker&lt;/li&gt;
&lt;li&gt;Multiple applications can be running at the same time&lt;/li&gt;
&lt;li&gt;Easily build files for production with the &lt;code&gt;sail:publish&lt;/code&gt; artisan command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What I don't like:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Response time for local Docker instances can be notoriously slow, especially on MacOS (although it's being worked on)&lt;/li&gt;
&lt;li&gt;Because of its aim toward simplicity, Sail can be a little difficult for newcomers to customize out of the box&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That being said, it's a fantastic place to start if you've always wanted to try out Docker, or just don't want to have any dependencies installed on your local system. Using this, you can get a full stack web server up and running in minutes.&lt;/p&gt;

&lt;p&gt;If you'd like to try it out for yourself, it's pretty straightforward. For existing applications, just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require laravel/sail &lt;span class="nt"&gt;--dev&lt;/span&gt;
php artisan sail:install
./vendor/bin/sail up
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And if you'd like to use Sail to create a new application from scratch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; https://laravel.build/my-app | bash
&lt;span class="nb"&gt;cd &lt;/span&gt;my-app &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./vendor/bin/sail up
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Both of those options will spin up a network of Docker containers using &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;, and expose your application to &lt;code&gt;localhost:80&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#valet" class="anchor"&gt;
  &lt;/a&gt;
  Valet  &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note: This option is just for MacOS users.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://laravel.com/docs/8.x/valet"&gt;Laravel Valet&lt;/a&gt; is a slick, fast, and resource-light development environment that combines Nginx and DnsMasq to proxy all requests to &lt;code&gt;.test&lt;/code&gt; domain names, pointing them to sites available at a predetermined path on your machine.&lt;/p&gt;

&lt;p&gt;There's still a few dependencies required, but not as much as a full web server stack. You'll need &lt;strong&gt;Brew, PHP, and Composer&lt;/strong&gt; to get started, as well as some kind of local database (e.g. MySQL or PostgreSQL). Laravel's official docs recommends using &lt;a href="https://dbngin.com/"&gt;DBngin&lt;/a&gt; to get that set up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I like about this method:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's blazing fast, as everything is running on your local machine like the first method&lt;/li&gt;
&lt;li&gt;Very little system resources are used for the web server, averaging around 7MB of RAM&lt;/li&gt;
&lt;li&gt;Comes with a wealth of commands to manage your local sites and even switch versions of PHP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What I don't like:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extensive PHP requests can still take up system resources and bog down your machine&lt;/li&gt;
&lt;li&gt;Does not come with any database management out of the box&lt;/li&gt;
&lt;li&gt;Automatically proxies all &lt;code&gt;.test&lt;/code&gt; domains, so you're unable to use that domain on an application not using Valet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Valet might be slowly getting replaced by newer containerization methods like Homestead and Sail, but it's still a &lt;em&gt;powerful&lt;/em&gt; tool to bring up and manage Laravel apps in development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laradock" class="anchor"&gt;
  &lt;/a&gt;
  Laradock &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Branded as a "full PHP development environment for Docker", &lt;a href="https://laradock.io"&gt;Laradock&lt;/a&gt; is a powerful and feature-rich set of configuration files for local Laravel development with Docker.&lt;/p&gt;

&lt;p&gt;This package has been around for a few years, and as such has become one of the de-facto standards used to create both local dev environments and assist in production deployments of Laravel apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I like about this method:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Contains pretty much &lt;em&gt;any&lt;/em&gt; service you could possibly use in a Laravel application, out of the box&lt;/li&gt;
&lt;li&gt;Configured for both local and production environments, allowing you to easily deploy your application to a server running Docker&lt;/li&gt;
&lt;li&gt;Includes step-by-step documentation for setting up xDebug&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What I don't like:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Like with Sail, response time can vary and tends to be on the slower side when compared with other methods in this article&lt;/li&gt;
&lt;li&gt;Tends to be a little bloated, as it's grown over time and expanded beyond just Laravel&lt;/li&gt;
&lt;li&gt;Can be difficult to customize, especially for Docker beginners&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href="https://laradock.io/getting-started/"&gt;documentation for Laradock&lt;/a&gt; is... extensive, to say the least. However it pretty much boils down to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Docker for your OS&lt;/li&gt;
&lt;li&gt;Use git to clone the Laradock repo&lt;/li&gt;
&lt;li&gt;Copy the &lt;code&gt;env-example&lt;/code&gt; file to &lt;code&gt;.env&lt;/code&gt; in your project root&lt;/li&gt;
&lt;li&gt;Modify the new &lt;code&gt;.env&lt;/code&gt; file with services you want&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you've completed those steps, it should be as simple as running this command from your project root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt; nginx mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As described in their docs, when bringing up a container like &lt;code&gt;nginx&lt;/code&gt;, it's dependent on the &lt;strong&gt;php-fpm&lt;/strong&gt; service. There's no need to specify php-fpm in the up command, as it'll be brought up alongside automatically.&lt;/p&gt;

&lt;p&gt;From there, you'll just have to dig through the documentation and learn to use whatever services your Laravel application depends on. There's separate areas for &lt;a href="https://laradock.io/documentation/#use-redis"&gt;caching with redis&lt;/a&gt;, &lt;a href="https://laradock.io/documentation/#use-traefik"&gt;setting up Traefik&lt;/a&gt;, or &lt;a href="https://laradock.io/documentation/#run-artisan-commands"&gt;running artisan commands&lt;/a&gt;. It might take some time to get fully set up to your liking, but once you do it's a powerful environment with zero local dependencies necessary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roll-your-own-docker-setup" class="anchor"&gt;
  &lt;/a&gt;
  Roll your own Docker setup  &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Our last, and my personal favorite, method for getting a local Laravel development set up, making your own with Docker! &lt;/p&gt;

&lt;p&gt;All of the tools above anticipate a generic application's needs and try to wrap it up in a simplistic package for ease of use and access. They're fantastic options, and definite time-savers, &lt;em&gt;if&lt;/em&gt; your aim is to get a local environment set up as quickly and painlessly as possible.&lt;/p&gt;

&lt;p&gt;However, as a full-stack developer who runs side projects from development through to deployment, I really wanted an excuse to dive into the deeper parts of Docker and create a local environment that would fit my needs perfectly. &lt;/p&gt;

&lt;p&gt;That's why I made &lt;a href="https://github.com/aschmelyun/docker-compose-laravel"&gt;docker-compose-laravel&lt;/a&gt;, and it's what I use as the basis for development environments in all of my Laravel projects. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I like about this method:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gives you the power to know exactly what services are being used in your local Docker environment&lt;/li&gt;
&lt;li&gt;Full control and customization of your Dockerfiles and docker-compose.yml files&lt;/li&gt;
&lt;li&gt;Can easily be set up for both local development and production environments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What I don't like:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requires time and effort to learn a new technology before being able to use it&lt;/li&gt;
&lt;li&gt;Debugging issues with Docker containers can often be frustrating&lt;/li&gt;
&lt;li&gt;If using volumes on a non-Linux filesystem, response time for PHP can be fairly slow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using a combination of resources such as the &lt;a href="https://docs.docker.com/get-started/overview/"&gt;Docker documentation&lt;/a&gt; and guides like &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-laravel-nginx-and-mysql-with-docker-compose"&gt;this one&lt;/a&gt; from DigitalOcean, I was able to piece together an environment that both made sense to me and also matched the services that I needed in my applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's all for now!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are the seven most talked about methods of getting a local Laravel development environment set up. There's a lot of options out there, and hopefully this guide might help you narrow down one that works best for you!&lt;/p&gt;

&lt;p&gt;If you have any questions about this, or any other web development topics at all, please feel free to reach out to me on &lt;a href="https://twitter.com/aschmelyun"&gt;Twitter&lt;/a&gt; or let me know in the comments below.&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Vim .. best code editor ?</title>
      <author>Bek Brace</author>
      <pubDate>Sat, 20 Feb 2021 08:58:35 +0000</pubDate>
      <link>https://dev.to/bekbrace/vim-best-code-editor-g4h</link>
      <guid>https://dev.to/bekbrace/vim-best-code-editor-g4h</guid>
      <description>&lt;p&gt;Vim, a text editor for writing code where you navigate around the screen with your keyboard instead of a mouse.&lt;br&gt;
It's based on the original Unix text editor VI which was created by Bill Joy in 1976, &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GWmiWgWS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkv3gps2hn3mkk46n87j.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWmiWgWS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkv3gps2hn3mkk46n87j.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;then VI improved or VIM followed it in 1991; but why would you ever want to use a keyboard-based text editor in 2021 if you have a lot of easy to use mouse-based IDEs ?&lt;/p&gt;

&lt;p&gt;When you write code everyday, your fingers should be glued to the keyboard at all times, every time you touch your productivity declines; and learning to code with VIM is like learning to play an instrument, it will be painful at first but that pain will lead to more precise and productive code editing in the future.&lt;/p&gt;

&lt;p&gt;VIM runs in the terminal and it's installed on almost every machine, and at some point you'll likely find yourself accidently dropped into VIM with no way to escape - which is a joke I always heard in my classes , if you want to mess with someone who doesn't know VIM, let them enter nonsense/crap in VIM editor on their machine, but they don't know how unpredictable it is to escape the main page - in other words, shut down VIM.&lt;/p&gt;

&lt;p&gt;If you find yourself there you can quit VIM by typing :q that will close and modify the file, or if it has been modified and saved, you can use :q! to discard any other changes, or :wq to save and quit VIM peacefully.&lt;/p&gt;

&lt;p&gt;You can open a file in VIM like so :&lt;/p&gt;

&lt;p&gt;terminal &amp;gt; vim bek.py&lt;/p&gt;

&lt;p&gt;You can toggle between different modes &lt;br&gt;
Normal mode, where you can navigate with your H J K L keys&lt;/p&gt;

&lt;p&gt;H -&amp;gt; Left&lt;br&gt;
J -&amp;gt; Up&lt;br&gt;
K -&amp;gt; Down&lt;br&gt;
L -&amp;gt; Right&lt;/p&gt;

&lt;p&gt;You have INSERT mode, you can access it by hitting i for insert, logical right?&lt;br&gt;
You have COMMMAND mode, and for that to happen you can hit on :&lt;br&gt;
And VISUAL mode by hitting v &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R9q65oOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1za92be38tqkwf422hgc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9q65oOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1za92be38tqkwf422hgc.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If there is a character you want to delete, you can hit (x) [ Delete Character ]&lt;br&gt;
Or, double (d) to quickly delete an entire line.&lt;br&gt;
To undo it, hit (u) to Undo it. &lt;br&gt;
To add line number, got to command mode by hitting semicolon : then type set number, and now you can navigate any line with :(number), so to got to line 5 -&amp;gt; :5 and so on.&lt;/p&gt;

&lt;p&gt;While navigating the document, if you want to modify something, you can hit (i) for insert mode , modify what you want then hit (Esc) button to exit to normal mode.&lt;/p&gt;

&lt;p&gt;If you want to copy and paste code, you can paste from system clipboard using (+p). &lt;br&gt;
To save the changes, you can hit (:w) to save it, then run the program directly using (:!) followed by the command we want to run, in this example it will be:&lt;br&gt;
terminal &amp;gt; :! python bek.py &lt;/p&gt;

</description>
      <category>vim</category>
      <category>javascript</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to increase your rendering performance by 70% in Vue.js</title>
      <author>Matheus Gomes üë®‚Äçüíª</author>
      <pubDate>Sat, 20 Feb 2021 03:53:42 +0000</pubDate>
      <link>https://dev.to/matheusgomes062/how-to-increase-your-rendering-performance-by-70-in-vue-js-4dia</link>
      <guid>https://dev.to/matheusgomes062/how-to-increase-your-rendering-performance-by-70-in-vue-js-4dia</guid>
      <description>&lt;p&gt;Hello everyone! üòú&lt;/p&gt;

&lt;p&gt;How you are guys doing? Hope you are fine and well!&lt;/p&gt;

&lt;p&gt;So, today I will teach you about functional components and it's an application in the vue.js framework. And most important, how to increase your rendering performance!&lt;/p&gt;

&lt;p&gt;Let's begin with an explanation on ...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-functional-component" class="anchor"&gt;
  &lt;/a&gt;
  What is a functional component? ü§®
&lt;/h2&gt;

&lt;p&gt;A functional component is a component that holds no state (stateless - no reactive data) and no instance (instanceless - no &lt;code&gt;this&lt;/code&gt; context).&lt;/p&gt;

&lt;p&gt;We can mark components as &lt;code&gt;functional&lt;/code&gt; to use them as a functional component. It will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---7OxNhj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ULbpGa8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---7OxNhj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ULbpGa8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's use it in a real case, something like a GitHub card with a profile pic and a tech section, where the person writes a summary about their learning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TESm9Wmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FiJA1YY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TESm9Wmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FiJA1YY.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How we can turn it into a functional component?&lt;/p&gt;

&lt;p&gt;First we add the &lt;code&gt;functional&lt;/code&gt; mark:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZeAxmnOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/v8A7pZi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZeAxmnOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/v8A7pZi.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now comes the tricky part, we would see errors if we run this code, it happens because we do not have the Vue instance, so we cannot use the keyword &lt;code&gt;this&lt;/code&gt; and it's auto bindings. But how we can solve this then? Well, as a functional component we have access to the "context" parameter. In this case, context will give us access to the props key, so we can use it in the code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sJGEDXvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CCPXHxP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJGEDXvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CCPXHxP.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, you just have created your first vue functional component! A step further to optimizing your project!üéâüéâüéâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#diving-deep-into-the-context" class="anchor"&gt;
  &lt;/a&gt;
  Diving deep into the context üòé
&lt;/h2&gt;

&lt;p&gt;The context argument is an object with the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;props&lt;/strong&gt;: Object of props&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;children&lt;/strong&gt;: An array of the VNode children&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;slots&lt;/strong&gt;: A function returning a slots object&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;scopedSlots&lt;/strong&gt;: (v2.6.0+) An object that exposes passed-in scoped slots. Also exposes normal slots as functions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;data&lt;/strong&gt;: The entire data object, passed to the component as the 2nd argument of createElement.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;parent&lt;/strong&gt;: A reference to the parent component&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;listeners&lt;/strong&gt;: (v2.3.0+) An object containing parent-registered event listeners. This is an alias to data.on&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;injections&lt;/strong&gt;: (v2.3.0+) if using the inject option, this will contain resolved injections.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#another-example" class="anchor"&gt;
  &lt;/a&gt;
  Another example ü¶ñ
&lt;/h2&gt;

&lt;p&gt;Now that we know the fundamentals, let's put them into practice!&lt;/p&gt;

&lt;p&gt;I'm going to show you how we can use the click event with a functional component:&lt;/p&gt;

&lt;p&gt;Ou parent component is calling our component like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gbnb3RSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/y4JTj2C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gbnb3RSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/y4JTj2C.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use this click event at the functional component we need to make some changes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GBlw_Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CvYKNBi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GBlw_Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CvYKNBi.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We added the &lt;code&gt;@click="listeners.click"&lt;/code&gt; so the functional component could "listen" to the parent "click", as we don't have the &lt;code&gt;this&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;A better way to do this is to use &lt;code&gt;v-on="listeners"&lt;/code&gt;, because click events (and keypress) are integrated in such a way that we don't need to bind them manually. But if a component has a custom caller, we need to bind them manually and explicitly, like &lt;code&gt;@click.stop="listeners.contact"&lt;/code&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#70-more-performance-%F0%9F%8F%8E" class="anchor"&gt;
  &lt;/a&gt;
  70% more performance üèé
&lt;/h2&gt;

&lt;p&gt;Why? Why this works so much better than the normal components? And why hassle to work with something so strict?&lt;/p&gt;

&lt;p&gt;Well, the answer is basically...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because functional components do not have a state, they do not require extra initialization for things like Vue‚Äôs reactivity system.&lt;/p&gt;

&lt;p&gt;Functional components will still react to changes like new props being passed in, but within the component itself, there is no way for it to know when its data has changed because it does not maintain its own state.&lt;/p&gt;

&lt;p&gt;I have seen benchmarks pointing to something between 40% and 70% increase in performance using functional components.&lt;/p&gt;

&lt;p&gt;We can see a benchmark test here: &lt;a href="https://codesandbox.io/s/vue-template-yterr?fontsize=14"&gt;https://codesandbox.io/s/vue-template-yterr?fontsize=14&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-it" class="anchor"&gt;
  &lt;/a&gt;
  When to use it? ü•∏
&lt;/h2&gt;

&lt;p&gt;Well, let's put it in this way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you are using v-for, maybe the items inside the loop are a great fit to be a functional component.&lt;/li&gt;
&lt;li&gt;A component which is simply presentational is also a great candidate to be a functional component because it doesn't need a state.&lt;/li&gt;
&lt;li&gt;A ‚Äúhigher-order component‚Äù is used to wrap markup or basic functionality around another component.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#ending" class="anchor"&gt;
  &lt;/a&gt;
  ENDING ü•≥
&lt;/h1&gt;

&lt;p&gt;Well, that's it for today, I think that functional components are something to be used on a great scale. I, myself will be using it right now!&lt;/p&gt;

&lt;p&gt;Thank you for reading and have a great day!&lt;/p&gt;

&lt;p&gt;Links and articles:&lt;br&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/vuejs-functional-components"&gt;https://www.digitalocean.com/community/tutorials/vuejs-functional-components&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.twilio.com/blog/react-choose-functional-components"&gt;https://www.twilio.com/blog/react-choose-functional-components&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/functional-components-vs-class-components-in-react/#:%7E:text=Functional%20components%20are%20basic%20JavaScript,mainly%20responsible%20for%20rendering%20UI"&gt;https://www.freecodecamp.org/news/functional-components-vs-class-components-in-react/#:~:text=Functional%20components%20are%20basic%20JavaScript,mainly%20responsible%20for%20rendering%20UI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/js-dojo/vue-js-functional-components-what-why-and-when-439cfaa08713"&gt;https://medium.com/js-dojo/vue-js-functional-components-what-why-and-when-439cfaa08713&lt;/a&gt;&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>vue</category>
      <category>performance</category>
      <category>functional</category>
    </item>
    <item>
      <title>Build an E-Commerce Website with MERN Stack - Part 6 (Redux Actions and Auth Components)</title>
      <author>Kumar Shubham</author>
      <pubDate>Sat, 20 Feb 2021 02:50:39 +0000</pubDate>
      <link>https://dev.to/shubham1710/build-an-e-commerce-website-with-mern-stack-part-6-redux-actions-and-auth-components-2m6l</link>
      <guid>https://dev.to/shubham1710/build-an-e-commerce-website-with-mern-stack-part-6-redux-actions-and-auth-components-2m6l</guid>
      <description>&lt;p&gt;Hello friends! So, this is the sixth part of the MERN Stack series. In the first four parts, we discussed the backend part of our application in complete detail ‚Äî from setting up the routes to accepting payments via stripe, we did all the backend work in those four parts. Then in the fifth part, we started building our frontend side, setting up the Redux actions and store.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;: I will publish the complete detailed version of all the articles on the Medium website. Here I will give an overview and give the codes for the various pages part by part.&lt;br&gt;
So, &lt;a href="https://js.plainenglish.io/lets-build-a-mern-stack-e-commerce-web-app-f26613a344e1?sk=126218dc75272a595e35d9f72cbe165e"&gt;please click here to go to Medium and read it in completion&lt;/a&gt;. &lt;em&gt;(These are friend links so do not worry about paywall)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, let‚Äôs start to build the reducer files first. We would create a folder inside the client folder which we would name as reducers. Inside this folder, we would create six files ‚Äî index, authReducer, itemReducer, errorReducer, cartReducer and orderReducer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authreducer" class="anchor"&gt;
  &lt;/a&gt;
  authReducer
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
    USER_LOADING,
    USER_LOADED,
    AUTH_ERROR,
    LOGIN_SUCCESS,
    LOGIN_FAIL,
    LOGOUT_SUCCESS,
    REGISTER_SUCCESS,
    REGISTER_FAIL
} from '../actions/types';

const initialState = {
    token: localStorage.getItem('token'),
    isAuthenticated: null,
    isLoading: false,
    user: null
}

export default function(state=initialState, action){
    switch(action.type){
        case USER_LOADING:
            return {
                ...state,
                isLoading: true
            };
        case USER_LOADED:
            return{
                ...state,
                isAuthenticated: true,
                isLoading: false,
                user: action.payload
            }
        case LOGIN_SUCCESS:
        case REGISTER_SUCCESS:
            localStorage.setItem('token',action.payload.token);
            return{
                ...state,
                ...action.payload,
                isAuthenticated: true,
                isLoading: false
            };
        case AUTH_ERROR:
        case LOGIN_FAIL:
        case LOGOUT_SUCCESS:
        case REGISTER_FAIL:
            localStorage.removeItem('token');
            return{
                ...state,
                token: null,
                user: null,
                isAuthenticated: false,
                isLoading: false
            };
        default:
            return state;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#itemreducer" class="anchor"&gt;
  &lt;/a&gt;
  itemReducer
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { GET_ITEMS, ADD_ITEM, UPDATE_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types';

const initialState = {
    items: [],
    loading: false
}

export default function(state=initialState, action){
    switch(action.type){
        case GET_ITEMS:
            return{
                ...state,
                items: action.payload,
                loading: false
            }

        case ADD_ITEM:
            return{
                ...state,
                items: [action.payload, ...state.items]
            }

        case DELETE_ITEM:
            return{
                ...state,
                items: state.items.filter(item =&amp;gt; item._id!==action.payload)                
            };

        case UPDATE_ITEM:
            const { id, data } = action.payload;
            return{
                ...state,
                items: state.items.map(item =&amp;gt; {
                    if(item._id===id){
                        item = data;
                    }
                })
            }

        case ITEMS_LOADING:
            return{
                ...state,
                loading: true
            }

        default:
            return state;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#errorreducer" class="anchor"&gt;
  &lt;/a&gt;
  errorReducer
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';

const initialState = {
    msg: {},
    status: null,
    id: null
}

export default function(state=initialState, action){
    switch(action.type){
        case GET_ERRORS:
            return{
                msg: action.payload.msg,
                status: action.payload.status,
                id: action.payload.id
            };

        case CLEAR_ERRORS:
            return{
                msg: {},
                status: null,
                id: null
            };

        default:
            return state;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cartreducer" class="anchor"&gt;
  &lt;/a&gt;
  cartReducer
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { GET_CART, ADD_TO_CART, DELETE_FROM_CART, CART_LOADING } from '../actions/types';

const initialState = {
    cart: null,
    loading: false
}

export default function(state=initialState, action){
    switch(action.type){
        case GET_CART:
            return {
                ...state,
                cart: action.payload,
                loading: false
            }

        case ADD_TO_CART:
            return {
                ...state,
                cart: action.payload
            }

        case DELETE_FROM_CART:
            return {
                ...state,
                cart: action.payload
            }

        case CART_LOADING:
            return {
                ...state, 
                loading: true
            }

        default:
            return state;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#orderreducer" class="anchor"&gt;
  &lt;/a&gt;
  orderReducer
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { GET_ORDERS, CHECKOUT, ORDERS_LOADING } from '../actions/types';

const initialState = {
    orders: [],
    loading: false
}

export default function(state=initialState, action){
    switch(action.type){
        case GET_ORDERS:
            return{
                ...state,
                orders: action.payload,
                loading: false
            }

        case CHECKOUT:
            return{
                ...state,
                orders: [action.payload, ...state.orders]
            }

        case ORDERS_LOADING:
            return{
                ...state,
                loading: true
            }

        default:
            return state;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#index-combining-reducers" class="anchor"&gt;
  &lt;/a&gt;
  index (Combining Reducers)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { combineReducers } from 'redux';
import itemReducer from './itemReducer';
import errorReducer from './errorReducer';
import authReducer from './authReducer';
import cartReducer from './cartReducer';
import orderReducer from './orderReducer';

export default combineReducers({
    item: itemReducer,
    error: errorReducer,
    auth: authReducer,
    cart: cartReducer,
    order: orderReducer
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we have finished all the redux work. Now, we can focus on building components for our application.&lt;/p&gt;

&lt;p&gt;So, we will deal with the components needed for authentication in this part and will deal with all the other components in the next part of the series.&lt;/p&gt;

&lt;p&gt;First of all, we would create a folder called components inside the client folder. Since we will keep all the authentication components separate from the rest of our components, so will make another folder named auth inside the components folder.&lt;/p&gt;

&lt;p&gt;Both of our Login and Register will be modal based which would be displayed in the Navbar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loginmodal" class="anchor"&gt;
  &lt;/a&gt;
  loginModal
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from 'react';
import {
    Button,
    Modal,
    ModalHeader,
    ModalBody,
    Form,
    FormGroup,
    Label,
    Input,
    NavLink,
    Alert
} from 'reactstrap';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import { login } from '../../actions/authActions';
import { clearErrors } from '../../actions/errorActions';

class LoginModal extends Component {
    state = {
        modal: false,
        email: '',
        password: '',
        msg: null
    };

    static propTypes = {
        isAuthenticated: PropTypes.bool,
        error: PropTypes.object.isRequired,
        login: PropTypes.func.isRequired,
        clearErrors: PropTypes.func.isRequired
    }

    componentDidUpdate(prevProps) {
        const { error, isAuthenticated } = this.props;
        if(error !== prevProps.error){
            // Check for login error
            if(error.id === 'LOGIN_FAIL'){
                this.setState({msg: error.msg.msg});
            }
            else{
                this.setState({msg:null});
            }
        }

        // If authenticated, close modal
        if(this.state.modal){
            if(isAuthenticated){
                this.toggle();
            }
        }
    }

    toggle = () =&amp;gt; {
        // Clear errors
        this.props.clearErrors();
        this.setState({
            modal: !this.state.modal
        });
    }

    onChange = (e) =&amp;gt; {
        this.setState({[e.target.name]:e.target.value});
    }

    onSubmit = (e) =&amp;gt; {
        e.preventDefault(); 

        const {email, password} = this.state;
        const user = {email, password};

        // Attempt to login
        this.props.login(user);
    }

    render(){
        return(
            &amp;lt;div className="container"&amp;gt;
                &amp;lt;Button color="success" className="btn btn-sm"&amp;gt;&amp;lt;NavLink onClick={this.toggle} href="#"&amp;gt;&amp;lt;span className="text-dark"&amp;gt;&amp;lt;b&amp;gt;Login&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/NavLink&amp;gt;&amp;lt;/Button&amp;gt;
                &amp;lt;Modal
                    isOpen={this.state.modal}
                    toggle={this.toggle}
                &amp;gt;
                    &amp;lt;ModalHeader toggle={this.toggle}&amp;gt;
                        Login
                    &amp;lt;/ModalHeader&amp;gt;
                    &amp;lt;ModalBody&amp;gt;
                        {this.state.msg ? (&amp;lt;Alert color="danger"&amp;gt;{this.state.msg}&amp;lt;/Alert&amp;gt;):null}
                        &amp;lt;Form onSubmit={this.onSubmit}&amp;gt;
                            &amp;lt;FormGroup&amp;gt;
                                &amp;lt;Label for="email"&amp;gt;Email&amp;lt;/Label&amp;gt;
                                &amp;lt;Input
                                    type="email"
                                    name="email"
                                    id="email"
                                    placeholder="Email"
                                    className="mb-3"
                                    onChange={this.onChange}
                                /&amp;gt;
                                &amp;lt;Label for="password"&amp;gt;Password&amp;lt;/Label&amp;gt;
                                &amp;lt;Input
                                    type="password"
                                    name="password"
                                    id="password"
                                    placeholder="Password"
                                    className="mb-3"
                                    onChange={this.onChange}
                                /&amp;gt;
                                &amp;lt;Button
                                    color="dark"
                                    style={{marginTop: '2rem'}}
                                    block
                                &amp;gt;Login&amp;lt;/Button&amp;gt;
                            &amp;lt;/FormGroup&amp;gt;
                        &amp;lt;/Form&amp;gt;
                    &amp;lt;/ModalBody&amp;gt;
                &amp;lt;/Modal&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
}

const mapStateToProps = (state) =&amp;gt; ({
    isAuthenticated: state.auth.isAuthenticated,
    error: state.error
});

export default connect(mapStateToProps,{login, clearErrors})(LoginModal);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#registermodal" class="anchor"&gt;
  &lt;/a&gt;
  registerModal
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from 'react';
import {
    Button,
    Modal,
    ModalHeader,
    ModalBody,
    Form,
    FormGroup,
    Label,
    Input,
    NavLink,
    Alert
} from 'reactstrap';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import { register } from '../../actions/authActions';
import { clearErrors } from '../../actions/errorActions';

class RegisterModal extends Component {
    state = {
        modal: false,
        name: '',
        email: '',
        password: '',
        msg: null
    };

    static propTypes = {
        isAuthenticated: PropTypes.bool,
        error: PropTypes.object.isRequired,
        register: PropTypes.func.isRequired,
        clearErrors: PropTypes.func.isRequired
    }

    componentDidUpdate(prevProps) {
        const { error, isAuthenticated } = this.props;
        if(error !== prevProps.error){
            // Check for register error
            if(error.id === 'REGISTER_FAIL'){
                this.setState({msg: error.msg.msg});
            }
            else{
                this.setState({msg:null});
            }
        }

        // If authenticated, close modal
        if(this.state.modal){
            if(isAuthenticated){
                this.toggle();
            }
        }
    }

    toggle = () =&amp;gt; {
        // Clear errors
        this.props.clearErrors();
        this.setState({
            modal: !this.state.modal
        });
    }

    onChange = (e) =&amp;gt; {
        this.setState({[e.target.name]:e.target.value});
    }

    onSubmit = (e) =&amp;gt; {
        e.preventDefault();  

        const { name, email, password } = this.state;

        // Crete user object
        const newUser = { name, email, password};

        // Attempt to register
        this.props.register(newUser);


    }

    render(){
        return(
            &amp;lt;div className="container"&amp;gt;
                &amp;lt;Button color="info" className="btn btn-sm"&amp;gt;&amp;lt;NavLink onClick={this.toggle} href="#"&amp;gt;&amp;lt;span className="text-dark"&amp;gt;&amp;lt;b&amp;gt;Register&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/NavLink&amp;gt;&amp;lt;/Button&amp;gt;
                &amp;lt;Modal
                    isOpen={this.state.modal}
                    toggle={this.toggle}
                &amp;gt;
                    &amp;lt;ModalHeader toggle={this.toggle}&amp;gt;
                        Register
                    &amp;lt;/ModalHeader&amp;gt;
                    &amp;lt;ModalBody&amp;gt;
                        {this.state.msg ? (&amp;lt;Alert color="danger"&amp;gt;{this.state.msg}&amp;lt;/Alert&amp;gt;):null}
                        &amp;lt;Form onSubmit={this.onSubmit}&amp;gt;
                            &amp;lt;FormGroup&amp;gt;
                                &amp;lt;Label for="name"&amp;gt;Name&amp;lt;/Label&amp;gt;
                                &amp;lt;Input
                                    type="text"
                                    name="name"
                                    id="name"
                                    placeholder="Name"
                                    className="mb-3"
                                    onChange={this.onChange}
                                /&amp;gt;
                                &amp;lt;Label for="email"&amp;gt;Email&amp;lt;/Label&amp;gt;
                                &amp;lt;Input
                                    type="email"
                                    name="email"
                                    id="email"
                                    placeholder="Email"
                                    className="mb-3"
                                    onChange={this.onChange}
                                /&amp;gt;
                                &amp;lt;Label for="password"&amp;gt;Password&amp;lt;/Label&amp;gt;
                                &amp;lt;Input
                                    type="password"
                                    name="password"
                                    id="password"
                                    placeholder="Password"
                                    className="mb-3"
                                    onChange={this.onChange}
                                /&amp;gt;
                                &amp;lt;Button
                                    color="dark"
                                    style={{marginTop: '2rem'}}
                                    block
                                &amp;gt;Register&amp;lt;/Button&amp;gt;
                            &amp;lt;/FormGroup&amp;gt;
                        &amp;lt;/Form&amp;gt;
                    &amp;lt;/ModalBody&amp;gt;
                &amp;lt;/Modal&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
}

const mapStateToProps = (state) =&amp;gt; ({
    isAuthenticated: state.auth.isAuthenticated,
    error: state.error
});

export default connect(mapStateToProps,{register, clearErrors})(RegisterModal);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#logout" class="anchor"&gt;
  &lt;/a&gt;
  Logout
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component, Fragment } from 'react';
import { logout } from '../../actions/authActions';
import { connect } from 'react-redux';
import {NavLink, Button} from 'reactstrap';
import PropTypes from 'prop-types';

export class Logout extends Component {
    static propTypes = {
        logout: PropTypes.func.isRequired
    }

    render() {
        return (
            &amp;lt;div&amp;gt;
                &amp;lt;Fragment&amp;gt;
                    &amp;lt;Button color="danger" className="btn btn-sm"&amp;gt;&amp;lt;NavLink onClick={this.props.logout} href="#"&amp;gt;&amp;lt;span className="text-light"&amp;gt;&amp;lt;b&amp;gt;Logout&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/NavLink&amp;gt;&amp;lt;/Button&amp;gt;
                &amp;lt;/Fragment&amp;gt;
            &amp;lt;/div&amp;gt;
        )
    }
}

export default connect(null,{logout})(Logout);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, this is all for this part. We have finished off the Redux part and also built out the components needed for the authentication.&lt;/p&gt;

&lt;p&gt;In the next part which will be the final one, we will be building the rest of the components and will finish off this series. I hope it helped you learn something and was exciting for you.&lt;/p&gt;

&lt;p&gt;To read the complete tutorial, please &lt;a href="https://js.plainenglish.io/lets-build-a-mern-stack-e-commerce-web-app-f26613a344e1?sk=126218dc75272a595e35d9f72cbe165e"&gt;move to Medium and read the complete article&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>IDOM - It's React, but in Python</title>
      <author>Ryan Morshead</author>
      <pubDate>Sat, 20 Feb 2021 01:16:31 +0000</pubDate>
      <link>https://dev.to/rmorshea/idom-it-s-react-but-in-python-39g1</link>
      <guid>https://dev.to/rmorshea/idom-it-s-react-but-in-python-39g1</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/idom-team/idom"&gt;IDOM&lt;/a&gt; is a new declarative Python package for building highly interactive user interfaces.&lt;/p&gt;

&lt;p&gt;IDOM takes inspiration from &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, and wherever possible, attempts to achieve parity with the features it copies more directly. Nowhere is this more evident than the version of React's often lauded &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;"Hooks"&lt;/a&gt; that IDOM implements in Python.&lt;/p&gt;

&lt;p&gt;At a glance, the similarities between IDOM and React are rather striking. Below is a React component which defines a simple &lt;code&gt;Counter&lt;/code&gt; displaying the number of times a button has been clicked:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Click count: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And this is the same component implemented in Python using IDOM:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;idom&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"onClick"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;set_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
            &lt;span class="s"&gt;"Click me!"&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Click count: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Which, when displayed in your browser, should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9d81QXSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/click-counter.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9d81QXSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/click-counter.gif" alt="click-counter-example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-idom" class="anchor"&gt;
  &lt;/a&gt;
  Why Do We Need IDOM?
&lt;/h2&gt;

&lt;p&gt;Over the &lt;a href="https://www.npmtrends.com/react-vs-angular-vs-vue"&gt;past 5 years&lt;/a&gt; front-end developers seem to have concluded that programs written with a &lt;a href="https://www.youtube.com/watch?v=yGh0bjzj4IQ"&gt;declarative&lt;/a&gt; style or framework tend to be easier to understand and maintain than those done imperatively. Put more simply, mutable state in programs can quickly lead to unsustainable complexity. This trend is largely evidenced by the &lt;a href="https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190"&gt;rise&lt;/a&gt; of Javascript frameworks like &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; and &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; which describe the logic of computations without explicitly stating their control flow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJ9On4eO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJ9On4eO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/" alt="npm download trends"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what does this have to do with Python and IDOM? Well, because browsers are the de facto "operating system of the internet", even back-end languages like Python have had to figure out clever ways to integrate with them. While standard &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; APIs are well suited to applications built using HTML templates, modern browser users expect a higher degree of interactivity than this alone can achieve.&lt;/p&gt;

&lt;p&gt;A variety of Python packages have since been created to help solve this problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/jupyter-widgets/ipywidgets"&gt;IPyWidgets&lt;/a&gt; - Adds interactive widgets to &lt;a href="https://jupyter.org/"&gt;Jupyter Notebooks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://plotly.com/dash/"&gt;Dash&lt;/a&gt; - Allows data scientists to produces enterprise-ready analytic apps&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.streamlit.io/"&gt;Streamlit&lt;/a&gt; - Turns simple Python scripts into interactive dashboards&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.bokeh.org/"&gt;Bokeh&lt;/a&gt; - An interactive visualization library for modern web browsers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However they each have drawbacks that can make them difficult to use.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Restrictive ecosystems&lt;/strong&gt; - UI components developed for one framework cannot be easily ported to any of the others because their APIs are either too complex, undocumented, or are structurally inaccesible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Imperative paradigm&lt;/strong&gt; - IPyWidgets and Bokeh have not embraced the same declarative design principles pioneered by front-end developers. Streamlit and Dash on the otherhand, are declarative, but fall short of the features provided by React or Vue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Limited layouts&lt;/strong&gt; - At their initial inception, the developers of these libraries were driven by the visualization needs of data scientists so the ability to create complex UI layouts may not have been a primary engineering goal.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A future article will address specific comparisons to each of the projects mentioned above, but for now, we'll just focus on IDOM and its solutions to these problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ecosystem-independence" class="anchor"&gt;
  &lt;/a&gt;
  Ecosystem Independence
&lt;/h2&gt;

&lt;p&gt;IDOM has a flexible set of core abstractions that allow it to interface with its peers. At the time of writing, both Jupyter and Dash are supported, while Streamlit and Bokeh are in the works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/idom-team/idom-jupyter"&gt;idom-jupyter&lt;/a&gt; (try it now with &lt;a href="https://mybinder.org/v2/gh/idom-team/idom-jupyter/main?filepath=notebooks%2Fintroduction.ipynb"&gt;Binder&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/idom-team/idom-dash"&gt;idom-dash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By providing well defined interfaces and straighforward protocols, IDOM makes it easy to swap out any part of the stack with an alternate implementation if you want to. For example, if you need a different web server for your application, IDOM already has 3 options to choose from or, use as blueprints to create your own:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sanic-org/sanic"&gt;Sanic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pallets/flask"&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tornadoweb/tornado"&gt;Tornado&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can even target your usage of IDOM in your production-grade applications with IDOM's Javascript &lt;a href="https://github.com/idom-team/idom-client-react"&gt;React client library&lt;/a&gt;. Just install it in your front-end app and connect to a back-end websocket that's serving up IDOM models. IDOM's own &lt;a href="https://idom-docs.herokuapp.com/docs/index.html"&gt;documentation&lt;/a&gt; acts as a prime example for this targeted usage - most of the page is static HTML, but embedded in it are interactive examples that feature live views being served from a web socket:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8K1YHgVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/live-examples-in-docs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8K1YHgVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/live-examples-in-docs.gif" alt="live-examples-in-docs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declarative-components" class="anchor"&gt;
  &lt;/a&gt;
  Declarative Components
&lt;/h2&gt;

&lt;p&gt;IDOM, by adopting the hook design pattern from React, inherits many of its aesthetic and functional characteristics. For those unfamiliar with hooks, user interfaces are composed of basic &lt;a href="https://en.wikipedia.org/wiki/HTML_element"&gt;HTML elements&lt;/a&gt; that are constructed and returned by special functions called "components". Then, through the magic of hooks, those component functions can be made to have state. Consider the component below which displays a basic representation of an &lt;a href="https://en.wikipedia.org/wiki/AND_gate"&gt;AND-gate&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;idom&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;AndGate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;input_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toggle_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;use_toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;input_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toggle_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;use_toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"onClick"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;toggle_1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"onClick"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;toggle_2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;input_1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; AND &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;input_2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; = &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;input_1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;input_2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;use_toggle&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toggle_state&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;old_state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;old_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toggle_state&lt;/span&gt;

&lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AndGate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_iHp0nF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/and-gate.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_iHp0nF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/and-gate.gif" alt="and-gate-demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a very high level summary of how it works... the first time a view of the component above is rendered, the &lt;code&gt;AndGate&lt;/code&gt; function is called where its initial &lt;code&gt;state&lt;/code&gt; for &lt;code&gt;input_1&lt;/code&gt; and &lt;code&gt;input_2&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;. The function then returns a series of HTML elements with callbacks that respond to client-side events. Machinery behind the scenes subsequently realizes that declaration and displays two checkbox buttons with the text &lt;code&gt;False AND False = False&lt;/code&gt;. Later, when a user clicks the now visible checkbox buttons, client-side events are triggered, the associated callbacks respond by inverting the old &lt;code&gt;state&lt;/code&gt; from &lt;code&gt;False&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;, and a re-render of the component is scheduled. When re-rendering, the function is again called, this time though, where &lt;code&gt;input_1&lt;/code&gt; and &lt;code&gt;input_2&lt;/code&gt; have been updated to reflect the new &lt;code&gt;state&lt;/code&gt;, thus causing the displayed text to change.&lt;/p&gt;

&lt;p&gt;In the code above, consider the fact that it never explicitely describes how to evolve the frontend view when events occur. Instead, it declares that, given a particular state, this is how the view should look. It's then IDOM's responsibility to figure out how to bring that declaration into being. This behavior of defining outcomes without stating the means by which to achieve them is what makes components in IDOM and React "declarative". For comparison, a hypothetical, and a more imperative approach to defining the same interface might look similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_and_gate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"input_1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"input_2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;output_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;update_output_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toggle_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"input_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"input_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;update_output_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"onClick"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;toggle_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"onClick"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;toggle_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;output_text&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_output_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{input_1} AND {input_2} = {output}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;input_1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"input_1"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;input_2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"input_2"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"input_1"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"input_2"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make_and_gate&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this imperative incarnation there are several disadvantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Refactoring is difficult&lt;/strong&gt; - Functions are much more specialized to their particular usages in &lt;code&gt;make_and_gate&lt;/code&gt; and thus cannot be easily generalized. By comparison, &lt;code&gt;use_toggle&lt;/code&gt; from the declarative implementation could be applicable to any scenario where boolean indicators are toggled on and off.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No clear static relations&lt;/strong&gt; - There is no one section of code through which to discern the basic structure and behaviors of the view. This issue is exemplified by the fact that we must call &lt;code&gt;update_output_text&lt;/code&gt; from two different locations. Once in the body of &lt;code&gt;make_and_gate&lt;/code&gt; and again in the body of the callback &lt;code&gt;toggle_input&lt;/code&gt;. This means that, to understand what the &lt;code&gt;output_text&lt;/code&gt; might contain, we must also understand all the business logic that surrounds it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Referential links cause complexity&lt;/strong&gt; - To evolve the view, various callbacks must hold references to all the elements that they will update. At the outset this makes writing programs difficult since elements must be passed up and down the call stack wherever they are needed. Considered further though, it also means that a function layers down in the call stack can accidentally or intentionally impact the behavior of ostensibly unrelated parts of the program.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#virtual-document-object-model" class="anchor"&gt;
  &lt;/a&gt;
  Virtual Document Object Model
&lt;/h2&gt;

&lt;p&gt;To communicate between their back-end Python servers and Javascript clients, IDOM's peers take an approach that aligns fairly closely with the &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;Model-View-Controller&lt;/a&gt; design pattern - the controller lives server-side (though not always), the model is what's synchronized between the server and client, and the view is run client-side in Javascript. To draw it out might look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ho0pYRrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/mvc-flow-diagram.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ho0pYRrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/mvc-flow-diagram.svg" alt="mvc-flow-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By contrast, IDOM uses something called a Virtual Document Object Model (&lt;a href="https://idom-docs.herokuapp.com/docs/specifications.html#vdom-mimetype"&gt;VDOM&lt;/a&gt;) to construct a representation of the view. The VDOM is constructed on the Python side by components then, as it evolves, IDOM's layout computes VDOM-diffs and wires them to its Javascript client where it is ultimately displayed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F38_pqLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/idom-flow-diagram.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F38_pqLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/idom-flow-diagram.svg" alt="idom-flow-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This process, in addition to drastically reducing complexity, means that Python developers with just a little bit of HTML and CSS knowledge can easily create elabortate interfaces because they have complete control over the view. Of course many users probably don't care about the details and just want high level components, but for those who do, it's easy to distribute their creations for others to use in Python packages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-javascript-components" class="anchor"&gt;
  &lt;/a&gt;
  Custom Javascript Components
&lt;/h2&gt;

&lt;p&gt;If you're thinking critically about IDOM's use of a virtual DOM, you may have thought...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Isn't wiring a virtual representation of the view to the client, even if its diffed, expensive?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And yes, while the performance of IDOM is sufficient for most use cases, there are inevitably scenarios where this could be an issue. Thankfully though, just like its peers, IDOM makes it possible to seemlesly integrate &lt;a href="https://idom-docs.herokuapp.com/docs/javascript-components.html"&gt;Javascript components&lt;/a&gt;. They can be &lt;a href="https://github.com/idom-team/idom-react-component-cookiecutter"&gt;custom built&lt;/a&gt; for your use case, or you can just leverage the existing Javascript ecosystem without any extra work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;idom&lt;/span&gt;

&lt;span class="n"&gt;material_ui&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"@material-ui/core"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"loading..."&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;DisplaySliderEvents&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;material_ui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Slider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"step"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"min"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"max"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"defaultValue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"valueLabelDisplay"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"auto"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"onChange"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;set_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;idom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DisplaySliderEvents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gClO6nro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/material-ui-slider.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gClO6nro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://rmorshea.github.io/articles/2021/idom-react-but-its-python/material-ui-slider.gif" alt="material-ui-slider-demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-take-away" class="anchor"&gt;
  &lt;/a&gt;
  The Take Away
&lt;/h2&gt;

&lt;p&gt;Building highly interactive web applications as a Python developer has historically been a great challenge. However IDOM changes that. Knowing just basic HTML, CSS, and Python, you can make everything from &lt;a href="https://idom-docs.herokuapp.com/docs/examples.html#slideshow"&gt;slideshows&lt;/a&gt; to &lt;a href="https://idom-docs.herokuapp.com/docs/examples.html#simple-dashboard"&gt;dashboards&lt;/a&gt; and use it wherever you need it, whether that's in a &lt;a href="https://github.com/idom-team/idom-jupyter"&gt;Jupyter Notebook&lt;/a&gt; or an existing web application.&lt;/p&gt;

&lt;p&gt;To learn more check out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/idom-team/idom"&gt;the source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://idom-docs.herokuapp.com/docs/installation.html"&gt;installation instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://idom-docs.herokuapp.com/docs/getting-started.html"&gt;understanding components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://idom-docs.herokuapp.com/docs/examples.html"&gt;interactive examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://idom-docs.herokuapp.com/docs/index.html"&gt;and much more&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>react</category>
      <category>declarative</category>
    </item>
    <item>
      <title>What's the difference between a coupled, decoupled and headless CMS?</title>
      <author>Melanie Phillips</author>
      <pubDate>Sat, 20 Feb 2021 00:47:49 +0000</pubDate>
      <link>https://dev.to/melaniephillips/what-s-the-difference-between-a-coupled-decoupled-and-headless-cms-g7a</link>
      <guid>https://dev.to/melaniephillips/what-s-the-difference-between-a-coupled-decoupled-and-headless-cms-g7a</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iXspEgDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkz22jhk3iphga3f0r3e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iXspEgDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkz22jhk3iphga3f0r3e.jpg" alt="Alt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was listening to a conference talk recently that started using the term 'decoupled' CMS. I'd only ever heard of traditional and headless, so I did some curiosity research.&lt;/p&gt;

&lt;p&gt;As usual, this article will serve future me if I forget what the difference is but hopefully it will also help anyone with the same question.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-traditional-cms" class="anchor"&gt;
  &lt;/a&gt;
  What is a traditional CMS?
&lt;/h2&gt;

&lt;p&gt;A traditional CMS is one where the front-end (presentation) and back-end (database) are stored in the same place and are heavily dependant on each other. An example would be a traditional WordPress site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-decoupled-cms" class="anchor"&gt;
  &lt;/a&gt;
  What is a decoupled CMS?
&lt;/h2&gt;

&lt;p&gt;It turns out what I thought was a headless CMS is actually a decoupled CMS. A decoupled CMS is when, for example, you have a site where the front-end and back-end are housed separately. The front end uses API calls to get the database information from the back-end and then displays it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-headless-cms" class="anchor"&gt;
  &lt;/a&gt;
  What is a headless CMS?
&lt;/h2&gt;

&lt;p&gt;A headless CMS is a type of decoupled CMS. The main difference is that a decoupled CMS typically has a front-end and a back-end, where a headless CMS is a content-only database with an API that can be called. It should be designed in a way that the content from the database can be ingested and displayed by a variety of methods/technologies (to a website, to an app, etc.) through API calls. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-one-to-choose-for-a-project" class="anchor"&gt;
  &lt;/a&gt;
  Which one to choose for a project?
&lt;/h2&gt;

&lt;p&gt;For basic sites and blogs, there is nothing wrong with a traditional CMS system. The major downside is that your project is tied to a specific technology and isn't as future-proof as a decoupled CMS could be. Out of the box, a traditional CMS is less work if you know what you're doing, but more work if you have to make major front-end changes in the future. &lt;/p&gt;

&lt;p&gt;For more complicated sites that need longevity, a decoupled CMS is a good way to go. While it may be more work at the beginning, it's more flexible and easier to adapt in the long-term. This is also a better option if you or your team like to experiment with different technologies.&lt;/p&gt;

&lt;p&gt;For projects that require information to be ingested by multiple presentation methods, a headless CMS is probably the best route to take. If a website is part of the project, then that can be built and pulled via the API but so can all the other delivery methods your project may require.&lt;/p&gt;

&lt;p&gt;Photo credit: &lt;span&gt;Photo by &lt;a href="https://unsplash.com/@devano23?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Devon Janse van Rensburg&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/devices?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>wordpress</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How Do People Not Realize Devs are Creative?! Allow Me to Demonstrate. </title>
      <author>michelledev</author>
      <pubDate>Fri, 19 Feb 2021 23:43:24 +0000</pubDate>
      <link>https://dev.to/michelledev3/how-do-people-not-realize-devs-are-creative-allow-me-to-demonstrate-3671</link>
      <guid>https://dev.to/michelledev3/how-do-people-not-realize-devs-are-creative-allow-me-to-demonstrate-3671</guid>
      <description>&lt;p&gt;True or False. &lt;strong&gt;Developers are highly creative and intuitive.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I feel like most of the world (outside of IT or software people) would answer false.&lt;br&gt;
Not me, no way. I answer truthfully. Let me know your thoughts.&lt;/p&gt;

&lt;p&gt;Web developers are very &lt;strong&gt;creative&lt;/strong&gt; but in different ways. They use their minds logically, formulating code, and have to utilize their creative minds because development and programming are not a straight path from A to Z. Workarounds have to be used, more often than not, or sometimes code has to be implemented by writing new code. I think writing code that &lt;em&gt;creatively&lt;/em&gt; implements functionality rather than logical mathematic code or performs a simple function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Front-end developers&lt;/em&gt; use their &lt;strong&gt;left-side creative brain&lt;/strong&gt; to implement design into functional website pages or front-end applications. They use inventive thinking to create things that look good and also adhere to a path that visually designs this feature function in a specific way.  Think of this as code manipulation that includes and the visual elements, a stream-lined and user-friendly fashion that doesn't rely on an editor or a designer.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Time Management&lt;/em&gt;, we know we have a forever growing list, and our projects are always a P1, but web devs use their creativity with their time. Time management requires the skill to code effectively creatively; think of it creatively and manage to code. We have to think way outside of the box and get creative because time waits for no dev. &lt;br&gt;
Code inspiration and project research are a foundation for a web developer, are linked closely, and reflect the designer responsibilities how are always looked at as the &lt;em&gt;creative on the team&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;UX and design&lt;/em&gt; is a big portion of the job that overlaps designer and dev responsibilities. One of the biggest key takeaways is understanding the UX and design, which we can all agree are both considered highly creative minds. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Back-end devs&lt;/em&gt; use their &lt;em&gt;creative mind&lt;/em&gt; to figure out how a system is used, how it can grow, and plan for future code development. &lt;br&gt;
&lt;strong&gt;Creativity&lt;/strong&gt; is a &lt;strong&gt;key factor&lt;/strong&gt; for devs coding or program choices. Most of us are proficient in multiple program languages (my goal, truly). But with knowing different languages, we have to think they what language or program would work best for this task. &lt;strong&gt;We need to balance judgment and creativity&lt;/strong&gt;‚Äîno small feat. &lt;br&gt;
Devs troubleshoot, problem-solve by nature, and yes, you guessed it, it is naturally creative. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Great devs&lt;/em&gt; practice sometimes hourly problem solving that demands a creative mind and approach to developing solutions for a problem or task.&lt;/p&gt;

&lt;p&gt;Wouldn‚Äôt you agree that most devs are creative? Too often, developers are stereotyped as focus, serious, head-down, hoodie up just let me code persona, when in fact we are multi-faceted in our talents.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Code On!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>discuss</category>
      <category>javascript</category>
      <category>webassembly</category>
    </item>
    <item>
      <title>BUILD THE REST API USING PYTHON DJANGO - PART 1 üêç </title>
      <author>Codespresso</author>
      <pubDate>Fri, 19 Feb 2021 22:08:59 +0000</pubDate>
      <link>https://dev.to/codespresso/build-the-rest-api-using-python-django-part-1-1334</link>
      <guid>https://dev.to/codespresso/build-the-rest-api-using-python-django-part-1-1334</guid>
      <description>&lt;p&gt;Table Of Contents&lt;br&gt;
        * ü§ì&lt;a href="#intro"&gt;INTRODUCTION&lt;/a&gt;&lt;br&gt;
        * üì¶&lt;a href="#api"&gt;WHAT IS AN API&lt;/a&gt;&lt;br&gt;
        * üï∏&lt;a href="#http"&gt;SEMANTICS OF HTTP METHODS&lt;/a&gt;&lt;br&gt;
        * ü§î&lt;a href="#methods"&gt;HTTP METHODS&lt;/a&gt;&lt;br&gt;
        * ü§†&lt;a href="#django"&gt;ABOUT DJANGO &amp;amp; DJANGO REST FRAMEWORK&lt;/a&gt;&lt;br&gt;
        * ‚ñ∂&lt;a href="#started"&gt;GETTING STARTED&lt;/a&gt;&lt;br&gt;
        * üôè&lt;a href="#thank-you"&gt;THANK YOU&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  ü§ì INTRODUCTION &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Hello, my dear hackers! I hope you are all having a great end of the working week. Today we are starting the new series where we are going to learn how to use Python and Django Rest Framework to build the REST &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface.&lt;/p&gt;

&lt;p&gt;This series requires you to be in a good mood, be prepared to read, and have fun, we learn together! üéâ &lt;/p&gt;

&lt;p&gt;Please feel free to connect with me via &lt;a href="https://twitter.com/lazar_dev"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.instagram.com/codespressoweb/"&gt;Instagram&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/lazar-stankovic-44a199177/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's do this!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ynRrAHj5SWAu8RA002/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ynRrAHj5SWAu8RA002/giphy.gif" alt="happy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-api" class="anchor"&gt;
  &lt;/a&gt;
  üì¶ WHAT IS AN API &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;An API stands for an application programming interface. It represents a set of definitions and protocols for building and integrating application software. In other words, it is a way to programmatically interact with a separate software component or resource.&lt;br&gt;
Web services were originally designed to communicate using &lt;strong&gt;SOAP&lt;/strong&gt; or Simple Object Access Protocol. Which is a messaging protocol that sends XML documents over HTTP. But, today, most web-based APIs use the REST - Representational State Transfer - as an architectural style.&lt;/p&gt;

&lt;p&gt;You might ask what the REST actually is?&lt;/p&gt;

&lt;p&gt;REST was formally introduced in 2000 by &lt;a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#fig_5_8"&gt;Roy Fielding in his doctoral dissertation&lt;/a&gt; where he explains the REST architecture in the following manner:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Representational State Transfer (REST) style is an abstraction of the architectural elements within a distributed hypermedia system. REST ignores the details of component implementation and protocol syntax in order to focus on the roles of components, the constraints upon their interaction with other components, and their interpretation of significant data elements. It encompasses the fundamental constraints upon components, connectors, and data that define the basis of the Web architecture, and thus the essence of its behavior as a network-based application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Benefits of using the REST architecture:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;performance in component interactions, which can be the dominant factor in user-perceived performance and network efficiency;&lt;/li&gt;
&lt;li&gt;scalability&lt;/li&gt;
&lt;li&gt;simplicity of a uniform interface&lt;/li&gt;
&lt;li&gt;modifiability of components to meet changing needs (even while the application is running);&lt;/li&gt;
&lt;li&gt;visibility of communication between components by service agents;&lt;/li&gt;
&lt;li&gt;portability of components by moving program code with the data;&lt;/li&gt;
&lt;li&gt;reliability in the resistance to failure at the system level in the presence of failures within components, connectors, or data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%95%B8-semantics-of-http-methods" class="anchor"&gt;
  &lt;/a&gt;
  üï∏ SEMANTICS OF HTTP METHODS &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Since we are building REST API, specifically HTTP-based REST APIs, the basic structure of the REST APIs is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a base URI, for example &lt;a href="http://my-api.example.com/"&gt;http://my-api.example.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;standard &lt;a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods"&gt;HTTP request methods&lt;/a&gt; (GET, POST, PUT and DELETE)&lt;/li&gt;
&lt;li&gt;a media type that defines state transition data elements. The current representation tells the client how to compose requests for transitions to all the next available application states.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http-methods" class="anchor"&gt;
  &lt;/a&gt;
  ü§î HTTP METHODS &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#get" class="anchor"&gt;
  &lt;/a&gt;
  GET
&lt;/h3&gt;

&lt;p&gt;The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#head" class="anchor"&gt;
  &lt;/a&gt;
  HEAD
&lt;/h3&gt;

&lt;p&gt;The HEAD method asks for a response identical to that of a GET request, but without the response body.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#post" class="anchor"&gt;
  &lt;/a&gt;
  POST
&lt;/h3&gt;

&lt;p&gt;The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#put" class="anchor"&gt;
  &lt;/a&gt;
  PUT
&lt;/h3&gt;

&lt;p&gt;The PUT method replaces all current representations of the target resource with the request payload.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delete" class="anchor"&gt;
  &lt;/a&gt;
  DELETE
&lt;/h3&gt;

&lt;p&gt;The DELETE method deletes the specified resource.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#patch" class="anchor"&gt;
  &lt;/a&gt;
  PATCH
&lt;/h3&gt;

&lt;p&gt;The PATCH method is used to apply partial modifications to a resource.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-django-amp-django-rest-framework" class="anchor"&gt;
  &lt;/a&gt;
  ü§† ABOUT DJANGO &amp;amp; DJANGO REST FRAMEWORK &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It‚Äôs free and open source.&lt;br&gt;
Django REST framework is a powerful and flexible toolkit for building Web APIs. Some reasons you might want to use the REST framework:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Web browsable API is a huge usability win for your developers.&lt;/li&gt;
&lt;li&gt;Authentication policies including packages for OAuth1a and OAuth2.&lt;/li&gt;
&lt;li&gt;Serialization that supports both ORM and non-ORM data sources.&lt;/li&gt;
&lt;li&gt;Customizable all the way down - just use regular function-based views if you don't need the more powerful features.&lt;/li&gt;
&lt;li&gt;Extensive documentation, and great community support.&lt;/li&gt;
&lt;li&gt;Used and trusted by internationally recognized companies including Mozilla, Red Hat, Heroku, and Eventbrite.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUu94Ep1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0ogplq9y9rw9rl9y7ss.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUu94Ep1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0ogplq9y9rw9rl9y7ss.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't give up, we are getting somewhere!&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%96%B6-getting-started" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∂ GETTING STARTED &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#requirements" class="anchor"&gt;
  &lt;/a&gt;
  REQUIREMENTS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; - v3.9.2&lt;br&gt;
&lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; - v12.2 (pgAdmin 4 -optional)&lt;br&gt;
Django - v3.1.7&lt;br&gt;
Django Rest Framework - v3.12.2&lt;br&gt;
psycopg2 - v2.8.6&lt;/p&gt;

&lt;p&gt;You will also need the IDE of your choice, I am using the &lt;a href="https://www.jetbrains.com/pycharm/"&gt;Jet Brains PyCharm Community Edition&lt;/a&gt; and I strongly recommend it!&lt;/p&gt;

&lt;p&gt;‚ùó You should probably add Python to your Environment variables if you don't have it already&lt;/p&gt;

&lt;p&gt;So, this is what you need to be familiar with, of course, an actual topic of the REST paradigm, as well as HTTP, is much, much broader. Because of that, I &lt;strong&gt;encourage&lt;/strong&gt; you to read a little bit more about it. Here are some useful links:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#fig_5_8"&gt;REST&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP"&gt;HTTP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next chapter, we are going to &lt;strong&gt;create the project&lt;/strong&gt;, setup &lt;strong&gt;Django&lt;/strong&gt; and &lt;strong&gt;Django rest framework&lt;/strong&gt;, and start writing our models, views, serializers, etc...&lt;/p&gt;

&lt;p&gt;Stay tuned! üöÄ&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thank-you-for-reading" class="anchor"&gt;
  &lt;/a&gt;
  üôè THANK YOU FOR READING!&lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;References:&lt;br&gt;
School notes...&lt;br&gt;
School books...&lt;/p&gt;

&lt;p&gt;Please leave a comment, tell me about you, about your work, comment your thoughts, connect with me! &lt;/p&gt;

&lt;p&gt;‚òï SUPPORT ME AND KEEP ME FOCUSED!&lt;br&gt;
&lt;a href="https://ko-fi.com/Z8Z33D1HJ"&gt;&lt;img height="36" src="https://res.cloudinary.com/practicaldev/image/fetch/s--IT81Gxvw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi4.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a nice time hacking! üòä&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>django</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>A Personal Git Repo as a Knowledge Base Wiki</title>
      <author>Adam B</author>
      <pubDate>Fri, 19 Feb 2021 20:28:15 +0000</pubDate>
      <link>https://dev.to/adam_b/a-personal-git-repo-as-a-knowledge-base-wiki-j51</link>
      <guid>https://dev.to/adam_b/a-personal-git-repo-as-a-knowledge-base-wiki-j51</guid>
      <description>&lt;p&gt;While it's not something that everyone likes to do, I've always found it essential to write notes. There are the project-specific notes that only have relevance within a particular workplace and are of course confidential, but then the stacks of notes that cover everything from the content of the training course you last went on to "what's the command-line way to add a new project again?" - and that second category is the one we're going to discuss here. &lt;/p&gt;

&lt;p&gt;Besides good old pen and paper I've tried all sorts, with tools like Evernote, Keep, the original Catch Notes (RIP), and Apple Notes each having very different levels of support for formatting, embedding, and crucially, portability of stored data. The latter becomes especially significant if the service closes down, or if (in the case of Apple Notes) you hand back the computer at the end of a job. As I looked at the pages of pencilled notes I'd written while following an online tutorial recently, I realised that a more unified and durable approach would be extremely useful. A solution flashed into my head while updating the wiki for a personal project on Bitbucket - why not have a private repo consisting entirely of Markdown notes, rather than code?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits" class="anchor"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Markdown is familiar to a large proportion of developers, is easy to write, and widely-supported - but also fairly readable even as plain text without a parser.&lt;/li&gt;
&lt;li&gt;Markdown has great support for inserting the kinds of things we so often need - code snippets, links, tables, and multi-level bullet lists - with minimal effort, allowing you to concentrate on the content.&lt;/li&gt;
&lt;li&gt;Using a Git repo makes it easy to quickly sync the notes across machines.&lt;/li&gt;
&lt;li&gt;This approach removes the reliance on proprietary sites. As each copy of the repo is just the same as any other, even the loss of your online Git account is not catastrophic. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-structure" class="anchor"&gt;
  &lt;/a&gt;
  Basic Structure
&lt;/h2&gt;

&lt;p&gt;The root of the repo has an &lt;code&gt;index.md&lt;/code&gt; file, with each overall topic being contained in a folder - and each of these also contains an &lt;code&gt;index.md&lt;/code&gt;. If it's a big enough topic, there might be an extra level, but the aim is &lt;em&gt;just organised enough&lt;/em&gt; without having a crazy directory tree structure.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LqPQZ44y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymebjvcjr5juagswzq8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LqPQZ44y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymebjvcjr5juagswzq8m.png" alt="Directory structure of repo shown in VS Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The root &lt;code&gt;index.md&lt;/code&gt; contains links to the index files in each folder. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kYLxbMyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj7vjwqbvmxw0d0y6s7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kYLxbMyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj7vjwqbvmxw0d0y6s7x.png" alt="Main index file of repo shown with preview in VS Code"&gt;&lt;/a&gt;&lt;br&gt;
Those index files, in turn, link to other &lt;code&gt;.md&lt;/code&gt; files within their own directories for each article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#article-content" class="anchor"&gt;
  &lt;/a&gt;
  Article Content
&lt;/h2&gt;

&lt;p&gt;The beauty of this being your &lt;em&gt;private&lt;/em&gt; repo is that you're not beholden to any particular standard - you can be free to write in as formal or as loose a way as you'd like. At some times you might have nothing but a raw text braindump, at others you may have topics that you can write on in a more structured way. The point that is central is that you write in the way that works &lt;em&gt;for you&lt;/em&gt;, in the terms that make it the most useful for the way you read, think, and recall. &lt;/p&gt;

&lt;p&gt;Code snippets (with the original spacing preserved) and shell commands can be inserted easily, as can links to external resources that might be useful for each topic. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bEeoKNTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rz28t5f47h450mg2c8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bEeoKNTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rz28t5f47h450mg2c8s.png" alt="Code snippet shown as part of a Markdown document"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dVuHGtEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5yftac1b6to2vzscqb9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dVuHGtEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5yftac1b6to2vzscqb9.png" alt="Link block shown as part of a Markdown document"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, now that everyone has a camera in their pocket, diagrams can be sketched, photographed, and included as inline images, rather than being laboriously reproduced with a computerised drawing tool.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RlauCGvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udyl2jj5svcaut7pvf2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlauCGvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udyl2jj5svcaut7pvf2q.png" alt="Sketched diagram shown as part of a Markdown document"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As an aside, if you need to copy/paste formatted text from other document formats, &lt;a href="https://puppypaste.com/"&gt;PuppyPaste&lt;/a&gt; is a very handy tool which will convert the formatting to the Markdown equivalent, which you can then copy/paste/edit as necessary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading" class="anchor"&gt;
  &lt;/a&gt;
  Reading
&lt;/h2&gt;

&lt;p&gt;The main online Git sites will support the viewing of Markdown files, but if you want to view them outside of this framework then a small amount of extra work is needed. As web browsers don't generally have native support for Markdown files, you can't get the benefit of using one as a viewer directly, but some very kind people have provided solutions to this. Someone recommended &lt;a href="https://dynalon.github.io/mdwiki/#!index.md"&gt;MDwiki&lt;/a&gt; and having used it, I will too.&lt;/p&gt;

&lt;p&gt;Simply download the HTML file into the root of your repo, and rename it to &lt;code&gt;index.html&lt;/code&gt;. Pointing a web server at this folder (I wrote an absolutely minimal one with Node.js and Express) makes it an HTML web-browsable wiki.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8BTZpOd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5keln5vc4037wzlmdtlr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8BTZpOd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5keln5vc4037wzlmdtlr.png" alt="HTML-translated version of MD wiki, shown in browser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uses-and-conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Uses and Conclusion
&lt;/h2&gt;

&lt;p&gt;I now have copies of my own repo on a Windows desktop, Mac laptop, and a USB flash drive, as well as on Bitbucket. A quick &lt;code&gt;git pull&lt;/code&gt; on each grabs the latest changes as needed, and after that the notes are available even if there is no network available. I'll be continually adding to it and think that this is a solid way of preserving the jewels picked up along my development journey. I hope some of you find this approach useful too! &lt;/p&gt;

</description>
      <category>productivity</category>
      <category>writing</category>
      <category>markdown</category>
      <category>documentation</category>
    </item>
  </channel>
</rss>
