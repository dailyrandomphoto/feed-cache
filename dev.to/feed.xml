<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Brute Force Tool 🔓 WordPress , Joomla , DruPal , OpenCart , Magento</title>
      <author>Meow404</author>
      <pubDate>Fri, 07 May 2021 05:45:12 +0000</pubDate>
      <link>https://dev.to/penucuricode/brute-force-tool-wordpress-joomla-drupal-opencart-magento-339o</link>
      <guid>https://dev.to/penucuricode/brute-force-tool-wordpress-joomla-drupal-opencart-magento-339o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---MmPEo5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rjswiau1dqsplfssewn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---MmPEo5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rjswiau1dqsplfssewn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple brute force script&lt;br&gt;
[1] WordPress (Auto Detect Username)&lt;br&gt;
[2] Joomla&lt;br&gt;
[3] DruPal&lt;br&gt;
[4] OpenCart (Coming Soon)&lt;br&gt;
[5] Magento&lt;br&gt;
[6] All (Auto Detect CMS)&lt;/p&gt;

&lt;p&gt;Usage&lt;br&gt;
Short Form  Long Form   Description&lt;br&gt;
-l           --list          websites list&lt;br&gt;
-p           --passwords     Passwords list&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
perl bprute.pl -l list.txt -p passwords.txt&lt;/p&gt;

&lt;p&gt;Installation Linux&lt;br&gt;
git clone &lt;a href="https://github.com/penucuriCode/bprute.git"&gt;https://github.com/penucuriCode/bprute.git&lt;/a&gt;&lt;br&gt;
cd bprute&lt;br&gt;
perl bprute.pl -l list.txt -p passwords.txt&lt;/p&gt;

&lt;p&gt;Installation Android&lt;br&gt;
Download Termux&lt;/p&gt;

&lt;p&gt;cpan install LWP::UserAgent&lt;br&gt;
cpan install HTTP::Request&lt;br&gt;
git clone &lt;a href="https://github.com/penucuriCode/bprute"&gt;https://github.com/penucuriCode/bprute&lt;/a&gt;&lt;br&gt;
cd bprute&lt;br&gt;
perl bprute.pl -l list.txt -p passwords.txt &lt;/p&gt;

&lt;p&gt;Installation Windows&lt;br&gt;
Download Perl&lt;br&gt;
Download bprute&lt;br&gt;
Extract bprute into Desktop&lt;br&gt;
Open CMD and type the following commands:&lt;br&gt;
cd Desktop/bprute-master/&lt;br&gt;
perl bprute.pl -l list.txt -p passwords.txt&lt;/p&gt;

&lt;p&gt;Current version is 2.1 What's New&lt;br&gt;
• speed up&lt;br&gt;
• Bug fixes&lt;/p&gt;

</description>
      <category>performance</category>
      <category>perl</category>
    </item>
    <item>
      <title>Download YouTube Videos Using Python - Your Own YouTube Downloader</title>
      <author>Siddharth Chandra</author>
      <pubDate>Fri, 07 May 2021 05:40:06 +0000</pubDate>
      <link>https://dev.to/siddharth2016/download-youtube-videos-using-python-your-own-youtube-downloader-3ohf</link>
      <guid>https://dev.to/siddharth2016/download-youtube-videos-using-python-your-own-youtube-downloader-3ohf</guid>
      <description>&lt;p&gt;Do you find it troublesome to always look for a YouTube video downloader with your privacy at risk? Downloading a YouTube video using an external extension might be maddening because of the mouse click ads and other issues while using that extension.&lt;/p&gt;

&lt;p&gt;So, why not we create our own bot that can download any YouTube video with just simply running a Python script? Everything would be in our control then, awesome, right?&lt;/p&gt;

&lt;p&gt;In this article, we are going to see how we can make a Python script to automate the YouTube video downloading activity.&lt;/p&gt;

&lt;p&gt;After going through this article, you can say &lt;code&gt;NO&lt;/code&gt; to all those annoying ads, privacy issues, authorisation to different extensions and can finally have total control.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-are-we-going-to-use"&gt;
  &lt;/a&gt;
  What Are We Going To Use?
&lt;/h3&gt;

&lt;p&gt;We are going to use Python and one of its amazing 3rd party library, &lt;a href="https://pypi.org/project/pytube/"&gt;pytube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To install pytube:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pytube
Collecting pytube
  Downloading pytube-10.7.2-py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;42 kB&lt;span class="o"&gt;)&lt;/span&gt;
     |████████████████████████████████| 42 kB 3.4 MB/s 
Installing collected packages: pytube
Successfully installed pytube-10.7.2
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More on pytube:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pytube is a very serious, lightweight, dependency-free Python library (and command-line utility) for downloading YouTube Videos.&lt;/li&gt;
&lt;li&gt;pytube is a lightweight library written in Python. It has no third-party dependencies and aims to be highly reliable.&lt;/li&gt;
&lt;li&gt;pytube also makes pipelining easy, allowing you to specify callback functions for different download events, such as &lt;code&gt;on progress&lt;/code&gt; or &lt;code&gt;on complete&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finally, pytube also includes a command-line utility, allowing you to quickly download videos right from the terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for both progressive &amp;amp; DASH streams.&lt;/li&gt;
&lt;li&gt;Support for downloading complete playlist.&lt;/li&gt;
&lt;li&gt;Easily register &lt;code&gt;on_download_progress&lt;/code&gt; &amp;amp; &lt;code&gt;on_download_complete&lt;/code&gt; callbacks.&lt;/li&gt;
&lt;li&gt;Command-line interfaced included.&lt;/li&gt;
&lt;li&gt;Caption track support.&lt;/li&gt;
&lt;li&gt;Outputs caption tracks to &lt;code&gt;.srt&lt;/code&gt; format (SubRip Subtitle).&lt;/li&gt;
&lt;li&gt;Ability to capture thumbnail URL.&lt;/li&gt;
&lt;li&gt;Extensively documented source code.&lt;/li&gt;
&lt;li&gt;No third-party dependencies (written in pure Python).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On a high level, to download a video using the library in a script, we'll need to first import the YouTube class from the library, and pass it an argument of the video URL. Then we can download different streams present on that YouTube object.&lt;/p&gt;

&lt;p&gt;Now, let's move on to use this information to build our first YouTube video downloader.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-the-streams"&gt;
  &lt;/a&gt;
  Get The Streams
&lt;/h3&gt;

&lt;p&gt;First, we will make a simple script to get all the available streams for the given YouTube video URL. Open a file name it whatever you like with the &lt;code&gt;.py&lt;/code&gt; extension, let's say for our case we name it &lt;code&gt;pytube_demo.py&lt;/code&gt;, add the following code in it and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./pytube_demo.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;

&lt;span class="n"&gt;video_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter YouTube Video URL: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;youtube_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;youtube_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you hit run, when the terminal prompts you to enter a video URL, enter this &lt;code&gt;https://www.youtube.com/watch?v=fibIyvTleqc&lt;/code&gt;, it is one of my favourite songs &lt;code&gt;Daydreamer&lt;/code&gt; by &lt;code&gt;AURORA&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: You can enter any YouTube video URL here, what we are going to explore further doesn't depend on which URL you enter.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Enter YouTube Video URL: https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;fibIyvTleqc
&lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"18"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"360p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.42001E"&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"mp4a.40.2"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"True"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"137"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1080p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.640028"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"248"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1080p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"136"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"720p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.4d401f"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"247"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"720p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"135"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"480p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.4d401e"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"244"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"480p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"134"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"360p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.4d401e"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"243"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"360p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"133"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"240p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.4d4015"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"242"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"240p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"160"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"144p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.4d400c"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"278"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"144p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"140"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio/mp4"&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"128kbps"&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"mp4a.40.2"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"249"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio/webm"&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"50kbps"&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"opus"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"250"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio/webm"&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"70kbps"&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"opus"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"251"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio/webm"&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"160kbps"&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"opus"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audio"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, we got a list of &lt;code&gt;Stream&lt;/code&gt; objects, each stream object giving us information about different aspects of a video.&lt;/p&gt;

&lt;p&gt;If we see &lt;code&gt;res&lt;/code&gt; attribute of stream object, we see that we have &lt;code&gt;360p&lt;/code&gt;, &lt;code&gt;1080p&lt;/code&gt;, &lt;code&gt;720p&lt;/code&gt;, &lt;code&gt;480p&lt;/code&gt;, &lt;code&gt;240p&lt;/code&gt; and &lt;code&gt;144p&lt;/code&gt; with different &lt;code&gt;vcodec&lt;/code&gt; attribute. This &lt;code&gt;res&lt;/code&gt; represents the resolution of a video, we can select any stream of desired resolution to download.&lt;/p&gt;

&lt;p&gt;Also, notice that we have only audio option streams available as well to download.&lt;/p&gt;

&lt;p&gt;Next, we will create a filter for video resolution and to keep it simple we will not dive into audio downloadable streams.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filter-stream-based-on-resolution"&gt;
  &lt;/a&gt;
  Filter Stream Based On Resolution
&lt;/h3&gt;

&lt;p&gt;Update the code in the &lt;code&gt;pytube_demo.py&lt;/code&gt; file to the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./pytube_demo.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_stream_for_res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Filter on the basis of a given resolution. Return a list of filtered streams.
    """&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolution&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;

&lt;span class="n"&gt;video_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter YouTube Video URL: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;youtube_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;video_res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Enter YouTube Video Resolution for &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;youtube_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;req_stream_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_stream_for_res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;youtube_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;video_res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req_stream_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hit run and we can see following output in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Enter YouTube Video URL: https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;fibIyvTleqc
Enter YouTube Video Resolution &lt;span class="k"&gt;for &lt;/span&gt;AURORA - Daydreamer &lt;span class="o"&gt;(&lt;/span&gt;Audio&lt;span class="o"&gt;)&lt;/span&gt;: 720p
&lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"136"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"720p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"avc1.4d401f"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"247"&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video/webm"&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"720p"&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"25fps"&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vp9"&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we take the video URL and creates the &lt;code&gt;YouTube&lt;/code&gt; object, then we take custom input from the user while displaying the title of the video using &lt;code&gt;youtube_obj.title&lt;/code&gt;. After receiving the resolution, say &lt;code&gt;720p&lt;/code&gt;, we call the function &lt;code&gt;get_stream_for_res&lt;/code&gt; that filters the given list of streams on the given resolution. At last, we can see the output, it contains 2 stream objects in a list, both objects have different values for some attributes but have the same resolution.&lt;/p&gt;

&lt;p&gt;Without diving deep on what all other attribute means, let's just simply take the first element of the list and download the video.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download-stream-based-on-resolution"&gt;
  &lt;/a&gt;
  Download Stream Based On Resolution
&lt;/h3&gt;

&lt;p&gt;Now update the code to the following to download the YouTube video (complete script):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./pytube_demo.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_stream_for_res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolution&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;

&lt;span class="n"&gt;video_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter YouTube Video URL: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;youtube_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;video_res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Enter YouTube Video Resolution for &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;youtube_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;req_stream_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_stream_for_res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;youtube_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;video_res&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;req_stream_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"YouTube Video &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;youtube_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; Downloaded With Resolution &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;video_res&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run the above script, we get the following output and a downloaded video:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Enter YouTube Video URL: https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;fibIyvTleqc
Enter YouTube Video Resolution &lt;span class="k"&gt;for &lt;/span&gt;AURORA - Daydreamer &lt;span class="o"&gt;(&lt;/span&gt;Audio&lt;span class="o"&gt;)&lt;/span&gt;: 720p
YouTube Video AURORA - Daydreamer &lt;span class="o"&gt;(&lt;/span&gt;Audio&lt;span class="o"&gt;)&lt;/span&gt; Downloaded With Resolution 720p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we check our directory where we ran the script, we can find the downloaded video.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What Next?
&lt;/h3&gt;

&lt;p&gt;Well, that's it from me. If you followed this and ran the final script, you would be seeing a downloaded video in your working directory.&lt;/p&gt;

&lt;p&gt;You can take it to the next level by creating a UI for this utility. You can host this as a service that would be strictly private to you.&lt;/p&gt;

&lt;p&gt;What are you waiting for then? Use Tkinter, PyQT, Kivy, Flask or Django and make a UI with more functions like a select option for audio and video, for video resolution and for audio ABR, etc. and say &lt;code&gt;NO&lt;/code&gt; to all those annoying ads, privacy issues, several authorisations to different extensions and have total control over your downloaded videos.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>application</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Express JS Hello World</title>
      <author>Youssef Allali</author>
      <pubDate>Fri, 07 May 2021 05:21:36 +0000</pubDate>
      <link>https://dev.to/youssefallalix/express-js-hello-world-10ph</link>
      <guid>https://dev.to/youssefallalix/express-js-hello-world-10ph</guid>
      <description>&lt;h1&gt;
  &lt;a href="#install-nodejs-and-npm"&gt;
  &lt;/a&gt;
  Install NodeJS and NPM
&lt;/h1&gt;

&lt;p&gt;First thing we need to do is prepare an environnement for Express to run. We are going to &lt;a href="https://nodejs.org/en/download/"&gt;install NodeJS&lt;/a&gt; and follow the installation instructions.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MmahXzPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kb3sxu4jc7rh9hh1f8r5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MmahXzPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kb3sxu4jc7rh9hh1f8r5.jpeg" alt="Web capture_7-5-2021_2217_nodejs.org"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#prepare-a-workspace-and-start-a-project"&gt;
  &lt;/a&gt;
  Prepare a workspace and start a project
&lt;/h1&gt;

&lt;p&gt;Once we have installed Node.js and Node Package Manager (NPM) on our machine, let's open up a terminal window (or CMD, on Windows) in the desired folder or use the following command to create a folder and use it as a workspace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir ./hello_world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ./hello_world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we are ready to start our first application, to do that, type in the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What it basically does is create a file named &lt;code&gt;package.json&lt;/code&gt; that contains all the information about our project and its dependencies.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-express"&gt;
  &lt;/a&gt;
  Install Express
&lt;/h1&gt;

&lt;p&gt;Next, we need to install express module using NPM via the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install express --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all we need is to create our main script, we'll be naming it &lt;code&gt;index.js&lt;/code&gt; since that's the default name (other conventional names can be &lt;code&gt;app.js&lt;/code&gt; or &lt;code&gt;server.js&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We can create a new empty file from the terminal using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's open our newly created file in any IDE or text editor (&lt;code&gt;Notepad&lt;/code&gt;, &lt;code&gt;Notepad++&lt;/code&gt;, &lt;code&gt;Atom&lt;/code&gt; ...) but I would recommend using a sophisticated IDE like &lt;code&gt;VS Code&lt;/code&gt; and let's type in the following lines in order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line would tell our app to import the module we are using (express).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = express();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This second line let us define express as a function&lt;/p&gt;

&lt;p&gt;After that we need to define something called "a route" to the root of our website that will let us send an HTTP request to our server and GET a response that says &lt;code&gt;Hello World!&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/', (req, res) =&amp;gt; {
  res.send('Hello World!');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last thing we need to do is instruct our app to be listening on a port, for example port 3000:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.listen(3000)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#run-the-server-app"&gt;
  &lt;/a&gt;
  Run the server app
&lt;/h1&gt;

&lt;p&gt;Now let's head back to our terminal window and type in the following command which will compile our code and start our server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ node ./index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#check-if-it-works"&gt;
  &lt;/a&gt;
  Check if it works
&lt;/h1&gt;

&lt;p&gt;Finally, we can load &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; in a browser to see the result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQIT4CzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02e946etr2y67u925f6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQIT4CzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02e946etr2y67u925f6p.png" alt="Hello World Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>express</category>
      <category>node</category>
      <category>npm</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Creating  a Node Server Without Express</title>
      <author>Yoshio Hasegawa</author>
      <pubDate>Fri, 07 May 2021 04:45:37 +0000</pubDate>
      <link>https://dev.to/yoshiohasegawa/creating-a-node-server-without-express-5dg9</link>
      <guid>https://dev.to/yoshiohasegawa/creating-a-node-server-without-express-5dg9</guid>
      <description>&lt;p&gt;&lt;em&gt;This article is meant to be a very simple introduction to the client-server model and, show you how to create a simple server using Node. Before we start looking at code showing how to create a server, it's important to first understand what a server is.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-server"&gt;
  &lt;/a&gt;
  What is a server?
&lt;/h1&gt;

&lt;p&gt;A server is simply "something" that stores assets and, provides those assets when requested (usually by your browser). An example of this is when you open your browser   and, you visit your favorite website. Let's say your favorite website is &lt;a href="https://www.mountain-forecast.com/"&gt;https://www.mountain-forecast.com/&lt;/a&gt;. When you type in the URL, or web address, of your favorite website into your search bar and press enter, you are sending an HTTP request to a server. That server receives your request and sends you back the appropriate assets. These assets are usually a collection of files (HTML documents, images, CSS stylesheets and, JavaScript files).&lt;/p&gt;

&lt;p&gt;In the previous paragraph, I used some terminology that should be defined in more detail...&lt;/p&gt;

&lt;p&gt;I mentioned that a server is simply "something"... More specifically, &lt;strong&gt;a server is either software, hardware or, a combination of both working together.&lt;/strong&gt; The hardware is usually a computer that physically stores the assets to be served, in memory. The software is usually a system that describes how web users (the clients) are able to access the stored assets. &lt;/p&gt;

&lt;p&gt;HTTP is an abbreviation that stand for Hypertext Transfer Protocol. &lt;strong&gt;HTTP is essentially a procedure or system of rules for how data is transferred on the World Wide Web.&lt;/strong&gt; Any sort of data can be transferred as long as both ends can read the data. Some important points regarding HTTP are that, HTTP is connectionless. This means that after making a request and receiving a response, the client and the server are no longer connected. Next, HTTP is stateless. This means that the client and the server only know about each other during the current request. Once the request is fulfilled, they no longer know about each other until another request is made. Finally, there is something called the Transport Layer. The Transport Layer is a collection of methods or transport protocols, known as the internet protocol suite, that simply defines how data is sent from one place to another. More specifically, this suite of protocols defines how the data is formatted, addressed, transmitted, routed and received. The best-known transport protocol is the Transmission Control Protocol (TCP).&lt;/p&gt;

&lt;p&gt;Now that we know a little about the client-server model and HTTP, it's time to start looking as some code!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-server-with-node"&gt;
  &lt;/a&gt;
  Creating a server with Node
&lt;/h1&gt;

&lt;p&gt;To create a server with NodeJS we will be using the built-in Node module &lt;code&gt;http&lt;/code&gt;. This module allows Node to transfer data over the Hypertext Transfer Protocol.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Localhost&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;127.0.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;We created our simple server!&amp;lt;/p&amp;gt;
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server running at http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We first start by defining a &lt;code&gt;hostname&lt;/code&gt;  and &lt;code&gt;port&lt;/code&gt;. The hostname, or IP address, 127.0.0.1 is simply localhost. In principle, this means that you are communicating with your own computer. The port is a communication endpoint. You can have multiple web servers running on your machine by using different ports for the same IP address. &lt;/p&gt;

&lt;p&gt;Next we create our server with the &lt;code&gt;createServer()&lt;/code&gt; method. This method takes a callback function as a parameter. This callback function receives 2 parameters itself, a &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt; object. The request object contains information about the request coming from the client. The response is what is sent back to the client.&lt;/p&gt;

&lt;p&gt;In this example we simply set an HTTP status code of 200 (OK), set the HTTP headers to "text/html" so that the client knows we are responding with HTML code, write HTML code within the response and, end the response. &lt;/p&gt;

&lt;p&gt;Finally, we start our server with the &lt;code&gt;listen()&lt;/code&gt; method. This method takes a port and host as parameters to know where to start the server. This method also takes a callback function as a parameter that simply runs after the server is started. In this example we console log information about the server upon start. &lt;/p&gt;

&lt;p&gt;We have successfully created a Node server without Express!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mo6WmAf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3hc8f4r7uriwwohp0ko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mo6WmAf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3hc8f4r7uriwwohp0ko.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope this gives a good starting point for understanding how web servers work and, how the client-server model works. The client-server model is simply a system design for communicating data across the World Wide Web. It uses HTTP to transfer data and, relies on a client and server to exist on either end. This article is meant to give a very basic introduction but, I encourage you to dive deeper into this technology by conducting further research. There is a lot of interesting information to learn within this topic!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#contact"&gt;
  &lt;/a&gt;
  Contact
&lt;/h3&gt;

&lt;p&gt;If you have any questions or comments please feel free to reach out!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub: &lt;a href="https://github.com/yoshiohasegawa"&gt;yoshiohasegawa&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;LinkedIn: &lt;a href="https://www.linkedin.com/in/yoshiohasegawa/"&gt;yoshiohasegawa&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>http</category>
      <category>servers</category>
    </item>
    <item>
      <title>Monaco Editor + Svelte Kit</title>
      <author>Lawrence Chen</author>
      <pubDate>Fri, 07 May 2021 04:44:36 +0000</pubDate>
      <link>https://dev.to/lawrencecchen/monaco-editor-svelte-kit-572</link>
      <guid>https://dev.to/lawrencecchen/monaco-editor-svelte-kit-572</guid>
      <description>&lt;p&gt;Here's the gist:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;monaco&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;editorWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor/esm/vs/editor/editor.worker?worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;jsonWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor/esm/vs/language/json/json.worker?worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;cssWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor/esm/vs/language/css/css.worker?worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;htmlWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor/esm/vs/language/html/html.worker?worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;tsWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor/esm/vs/language/typescript/ts.worker?worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;divEl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;monaco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IStandaloneCodeEditor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Monaco&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
        &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MonacoEnvironment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;getWorker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;_moduleId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;jsonWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;less&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cssWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;handlebars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;razor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;htmlWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;typescript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;tsWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;editorWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="nx"&gt;Monaco&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Monaco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;divEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function x() {&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;console.log("Hello world!");&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;bind:this=&lt;/span&gt;&lt;span class="s"&gt;{divEl}&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-screen"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#key-points"&gt;
  &lt;/a&gt;
  Key points
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Don't do &lt;code&gt;module.default&lt;/code&gt; like the &lt;a href="https://kit.svelte.dev/faq"&gt;FAQ&lt;/a&gt; tells you to&lt;/li&gt;
&lt;li&gt;With Vite, you &lt;a href="https://github.com/vitejs/vite/discussions/1791#discussioncomment-321046"&gt;don't need to configure workers with your bundler&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>svelte</category>
      <category>vscode</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Perling and Curling</title>
      <author>Felipe Gasper</author>
      <pubDate>Fri, 07 May 2021 04:36:06 +0000</pubDate>
      <link>https://dev.to/fgasper/perling-and-curling-2i10</link>
      <guid>https://dev.to/fgasper/perling-and-curling-2i10</guid>
      <description>&lt;p&gt;Most of us probably know &lt;a href="https://curl.se/"&gt;curl&lt;/a&gt; as a quick and easy way to send HTTP requests from the command line.&lt;/p&gt;

&lt;p&gt;That tool, though, is just an interface to the curl project’s real gold: the libcurl API. Using this API, applications in all sorts of languages have easy access to the awesome power that libcurl provides. This article will discuss how to use that power in Perl.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-quick-example"&gt;
  &lt;/a&gt;
  A Quick Example
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Net::Curl::Easier;

my $easy = Net::Curl::Easier-&amp;gt;new(
    url =&amp;gt; 'http://perl.org',
    followlocation =&amp;gt; 1,
)-&amp;gt;perform();

print $easy-&amp;gt;head(), $easy-&amp;gt;body();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s talk about what just happened.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Net::Curl::Easier"&gt;Net::Curl::Easier&lt;/a&gt; is a thin wrapper around &lt;a href="https://metacpan.org/pod/Net::Curl"&gt;Net::Curl&lt;/a&gt;’s “easy” interface—&lt;a href="https://curl.se/libcurl/c/libcurl-easy.html"&gt;“easy” is what libcurl calls it!&lt;/a&gt;—that smooths over some rough edges in Net::Curl.&lt;/p&gt;

&lt;p&gt;(Full disclosure: I am Net::Curl::Easier’s maintainer.)&lt;/p&gt;

&lt;p&gt;Once we create our “Easier” object, having given it the proper URL and told it to follow HTTP redirects (&lt;code&gt;followlocation&lt;/code&gt; refers to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Location"&gt;HTTP’s &lt;code&gt;Location&lt;/code&gt; header&lt;/a&gt;), we run &lt;code&gt;perform()&lt;/code&gt; on the Easier object.&lt;/p&gt;

&lt;p&gt;After that, we print the HTTP response headers and body, and we’re done!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-not-just-use-httptiny"&gt;
  &lt;/a&gt;
  Why not just use &lt;a href="https://metacpan.org/pod/HTTP::Tiny"&gt;HTTP::Tiny&lt;/a&gt;?
&lt;/h1&gt;

&lt;p&gt;Indeed. Well, error reporting, for one. Consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Net::Curl::Easier-&amp;gt;new(
    url =&amp;gt; 'http://blahblah',
)-&amp;gt;perform();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run this you’ll probably just see &lt;code&gt;Couldn't resolve host name&lt;/code&gt; printed to standard error. But if you dig deeper you’ll see something nifty:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Net::Curl::Easier;
use Data::Dumper;

eval {
    Net::Curl::Easier-&amp;gt;new(
        url =&amp;gt; 'http://blahblah',
    )-&amp;gt;perform();
};
print Dumper $@;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It turns out that that error isn’t just a string; it’s an exception &lt;em&gt;object&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In large systems I often want to handle certain failure types differently from others. HTTP::Tiny’s errors are just strings, so type-specific failure handling with HTTP::Tiny entails &lt;em&gt;parsing strings&lt;/em&gt;, which is brittle. What if someone decides to reword some error message for clarity, thus breaking my string parser?&lt;/p&gt;

&lt;p&gt;With Net::Curl I can look for specific numeric error codes, documentation for which &lt;a href="https://curl.se/libcurl/c/libcurl-errors.html"&gt;the curl project itself maintains&lt;/a&gt;. This is much more robust.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-care-what-else-you-got"&gt;
  &lt;/a&gt;
  Don’t care. What else you got?
&lt;/h1&gt;

&lt;p&gt;OK. How about this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my $easy = Net::Curl::Easier-&amp;gt;new(
    username =&amp;gt; 'hal',
    userpwd =&amp;gt; 'itsasecret',
    url =&amp;gt; 'imap://mail.example.com/INBOX/;UID=123',
)-&amp;gt;perform();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I just queried … an email inbox?!?&lt;/p&gt;

&lt;p&gt;Curl doesn’t just speak HTTP; it speaks many other protocols including IMAP, LDAP, SCP, and MQTT. To see the full list of protocols that your curl supports, run &lt;code&gt;curl --version&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  Concurrency
&lt;/h1&gt;

&lt;p&gt;Curl can also run concurrent queries. To do that I recommend using &lt;a href="https://metacpan.org/pod/Net::Curl::Promiser"&gt;Net::Curl::Promiser&lt;/a&gt;. (Full disclosure: I also maintain this module.)&lt;/p&gt;

&lt;p&gt;Example, assuming use of &lt;a href="http://metacpan.org/pod/Mojolicious"&gt;Mojolicious&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Net::Curl::Easier;
use Net::Curl::Promiser::Mojo;
use Mojo::Promise;

my $easy1 = Net::Curl::Easier-&amp;gt;new(
    url =&amp;gt; 'http://perl.org',
    followlocation =&amp;gt; 1,
);

my $easy2 = Net::Curl::Easier-&amp;gt;new(
    username =&amp;gt; 'hal',
    userpwd =&amp;gt; 'itsasecret',
    url =&amp;gt; 'imap://mail.example.com/INBOX/;UID=123',
);

my $easy3 = Net::Curl::Easier-&amp;gt;new(
    username =&amp;gt; 'hal',
    userpwd =&amp;gt; 'itsasecret',
    url =&amp;gt; 'scp://tty.example.com/path/to/file',
);

my $promiser = Net::Curl::Promiser::Mojo-&amp;gt;new();

Mojo::Promise-&amp;gt;all_settled(
    $promiser-&amp;gt;add_handle($easy1)-&amp;gt;then( sub {
        print $easy1-&amp;gt;head(), $easy1-&amp;gt;body();
    } ),
    $promiser-&amp;gt;add_handle($easy2)-&amp;gt;then( sub {
        # ... whatever you want with the IMAP result
    } ),
    $promiser-&amp;gt;add_handle($easy3)-&amp;gt;then( sub {
        # ... whatever you want with the SCP result
    } ),
)-&amp;gt;wait();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just grabbed a web page, queried a mailbox, and downloaded a file via SCP, all in parallel!&lt;/p&gt;

&lt;p&gt;Net::Curl::Promiser also works natively with&lt;br&gt;
&lt;a href="http://metacpan.org/pod/AnyEvent"&gt;AnyEvent&lt;/a&gt; and&lt;br&gt;
&lt;a href="http://metacpan.org/pod/IO::Async"&gt;IO::Async&lt;/a&gt;, should those be of greater interest to you. It also provides a convenience layer for custom &lt;a href="https://perldoc.perl.org/perlfunc#select-RBITS%2CWBITS%2CEBITS%2CTIMEOUT"&gt;select&lt;/a&gt;-based event loops, in case that’s how you roll.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#other-modules"&gt;
  &lt;/a&gt;
  Other Modules
&lt;/h1&gt;

&lt;p&gt;Some alternatives to modules presented above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://metacpan.org/pod/AnyEvent::YACurl"&gt;AnyEvent::YACurl&lt;/a&gt;: A newer library than Net::Curl that simplifies the interface a bit. It assumes use of &lt;a href="https://metacpan.org/pod/AnyEvent"&gt;AnyEvent&lt;/a&gt;, though, so if you’re not using AE then this may not be for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://metacpan.org/pod/WWW::Curl"&gt;WWW::Curl&lt;/a&gt;: The library of which Net::Curl is a fork. It lacks access to libcurl’s advanced multi interface.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://metacpan.org/pod/Net::Curl::Simple"&gt;Net::Curl::Simple&lt;/a&gt;: A wrapper by Net::Curl’s original author. It provides some of the same conveniences as Net::Curl::Promiser and Net::Curl::Easier but uses callbacks rather than promises.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h1&gt;

&lt;p&gt;Curl exposes an awesome breadth of functionality, of which the above examples have just scratched the surface. Check it out!&lt;/p&gt;

</description>
      <category>perl</category>
      <category>programming</category>
    </item>
    <item>
      <title>Infrastructure as Code in 3 minutes</title>
      <author>Davide Benvegnù</author>
      <pubDate>Fri, 07 May 2021 04:33:55 +0000</pubDate>
      <link>https://dev.to/n3wt0n/infrastructure-as-code-in-3-minutes-4h1h</link>
      <guid>https://dev.to/n3wt0n/infrastructure-as-code-in-3-minutes-4h1h</guid>
      <description>&lt;p&gt;&lt;strong&gt;Infrastructure as Code&lt;/strong&gt; is becoming more and more important in the DevOps Context, due to the many &lt;strong&gt;benefits&lt;/strong&gt; it brings.&lt;/p&gt;

&lt;p&gt;Today I have for you a &lt;strong&gt;&lt;em&gt;quick intro&lt;/em&gt;&lt;/strong&gt; to the topic, so you can understand what it is and why more and more companies and developers are looking into adopting it.&lt;/p&gt;

&lt;p&gt;I will not go into specific languages and tools but let me know in the comment section below if you'd like me to create another post, video, or a series about specific implementations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fE4gY-SydKo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/fE4gY-SydKo"&gt;Link to the video: https://youtu.be/fE4gY-SydKo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h3&gt;

&lt;p&gt;Infrastructure as Code (&lt;strong&gt;IaC&lt;/strong&gt;) is the management of infrastructure (networks, virtual machines, load balancers, and so on so forth) in a &lt;strong&gt;descriptive model&lt;/strong&gt;, using the same versioning as DevOps team uses for source code.&lt;/p&gt;

&lt;p&gt;Like the principle that the same source code generates the same binary, an &lt;strong&gt;IaC model generates the same environment every time&lt;/strong&gt; it is applied.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h3&gt;

&lt;p&gt;Thanks to this, Infrastructure as Code &lt;strong&gt;solves&lt;/strong&gt; the problem of "&lt;em&gt;environment drift&lt;/em&gt;".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without IaC&lt;/strong&gt;, teams must maintain the settings of &lt;strong&gt;individual deployment environments&lt;/strong&gt;. Over time, each environment ends up having a &lt;strong&gt;unique configuration&lt;/strong&gt; that cannot be reproduced automatically. &lt;strong&gt;Inconsistency&lt;/strong&gt; among environments can cause issues during deployments, and administration and maintenance of infrastructure involves manual processes which are hard to track and &lt;strong&gt;contribute to errors&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With IaC&lt;/strong&gt;, instead, teams make changes to the environment description and version the &lt;strong&gt;configuration model&lt;/strong&gt;, which is typically in &lt;strong&gt;well-documented code&lt;/strong&gt; formats. The release pipeline executes the model to configure target environments. If the team needs to make changes, they &lt;strong&gt;edit the source, not the target&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, IaC enables DevOps teams to test applications in &lt;strong&gt;production-like environments&lt;/strong&gt; early in the development cycle. These teams expect to provision multiple test environments reliably and on demand. Infrastructure represented as code can also be validated and tested to prevent common deployment issues. At the same time, the cloud &lt;strong&gt;dynamically provisions&lt;/strong&gt; and tears down environments based on IaC definitions.&lt;/p&gt;

&lt;p&gt;Teams who implement IaC can deliver &lt;strong&gt;stable environments rapidly and at scale&lt;/strong&gt;. They avoid manual configuration of environments and &lt;strong&gt;enforce consistency&lt;/strong&gt; by representing the desired state of their environments via code. &lt;/p&gt;

&lt;p&gt;Infrastructure deployments with IaC are &lt;strong&gt;repeatable&lt;/strong&gt; and prevent runtime issues caused by configuration drift or missing dependencies.&lt;/p&gt;

&lt;p&gt;DevOps teams can work together with a &lt;strong&gt;unified set of practices&lt;/strong&gt; and tools to deliver applications and their supporting infrastructure rapidly, reliably, and at scale.&lt;/p&gt;

&lt;p&gt;These are the reasons why &lt;strong&gt;IaC is a key DevOps practice&lt;/strong&gt; and is used in conjunction with continuous delivery.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;We should now have a clearer understanding of what Infrastructure as Code is, and of the benefits it provides.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below if you have any question about IaC and, as I've mentioned before, if you'd like me to make another post or video about a specific tool or framework for Infrastructure as Code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fE4gY-SydKo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>iac</category>
      <category>infra</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>KCFinder path finder using python3</title>
      <author>Meow404</author>
      <pubDate>Fri, 07 May 2021 04:30:28 +0000</pubDate>
      <link>https://dev.to/penucuricode/kcfinder-path-finder-using-python3-2o0i</link>
      <guid>https://dev.to/penucuricode/kcfinder-path-finder-using-python3-2o0i</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jYdN6I4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v6r3pj9eyb8wi3velt3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jYdN6I4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v6r3pj9eyb8wi3velt3.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PREREQUISITES&lt;br&gt;
Python 3.x&lt;br&gt;
pip3&lt;br&gt;
git&lt;/p&gt;

&lt;p&gt;PYTHON 3 PREREQUISITES&lt;br&gt;
aiohttp&lt;br&gt;
asyncio&lt;/p&gt;

&lt;p&gt;Installation&lt;br&gt;
$ git clone &lt;a href="https://github.com/penucuriCode/kcfinder"&gt;https://github.com/penucuriCode/kcfinder&lt;/a&gt;&lt;br&gt;
$ cd kcfinder&lt;br&gt;
$ pip3 install -r requirements.txt&lt;br&gt;
$ python exploit.py&lt;/p&gt;

&lt;p&gt;Update Wordlist&lt;br&gt;
$ apt install wget&lt;br&gt;
$ python update.py&lt;/p&gt;

&lt;p&gt;Note&lt;br&gt;
Error 403 = Firewall in Website&lt;br&gt;
Error 500 = Server not Responding / Connection Error&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>40 Free design resources you need to check in 2021</title>
      <author>Dev Write Ups</author>
      <pubDate>Fri, 07 May 2021 03:26:22 +0000</pubDate>
      <link>https://dev.to/devwriteups/40-free-design-resources-you-need-to-check-in-2021-4ol7</link>
      <guid>https://dev.to/devwriteups/40-free-design-resources-you-need-to-check-in-2021-4ol7</guid>
      <description>&lt;p&gt;At one time graphic designers required costly programming and surprisingly more exorbitant pictures to make a triumphant visual mission. In any case, because of a large group of free online assets, anybody can plan great visual stories effortlessly. For your need we've curated best and many Design resources you need to check to making amazing content on web. &lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Table Of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#fonts"&gt;Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#colors"&gt;Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#free-mockups"&gt;Free Mockups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#illustrations"&gt;Illustrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stock-images"&gt;Stock Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#free-videos-and-gifs"&gt;Stock videos and gifs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  Fonts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#befonts"&gt;
  &lt;/a&gt;
  &lt;a href="https://befonts.com/"&gt;beFonts &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Create your own remix. Change the hairdos, tops, and pants and many things. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DD7cGuEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619709796302/_nkKgv4Sg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DD7cGuEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619709796302/_nkKgv4Sg.png" alt="Screenshot 2021-04-29 at 20-52-03 Free Font Lists - Befonts - Download free fonts.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free Fonts are here! High quality design resources for free. And helps introduce first time customers to your products with free font downloads and allow them to try before they buy, it also allows your existing customer to get a free font treat every day!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-foundry"&gt;
  &lt;/a&gt;
  &lt;a href="https://open-foundry.com/"&gt; Open Foundry&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYxaMeR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750469825/wJAjLD0kg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYxaMeR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750469825/wJAjLD0kg.png" alt="Screenshot 2021-04-30 at 08-10-53 Open Foundry.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fonts, Curated and Open-Source&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fontpair"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.fontpair.co/"&gt;Fontpair&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xi_HQ-WY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619709862608/K9KtioRC5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xi_HQ-WY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619709862608/K9KtioRC5.png" alt="Screenshot 2021-04-29 at 20-54-08 Free Google Font pairs for your next creative project - fontpair.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free Google Font pairs for your next creative project. &lt;br&gt;
 typography community dedicated to helping creators use beautiful, free, open-source typography&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#awwwards-font-collections"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.awwwards.com/awwwards/collections/free-fonts/"&gt;Awwwards Font collections&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A selection of complimentary typography for your web projects. Best free fonts for designers.  &lt;/p&gt;




&lt;p&gt;Subscribe to our  &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#colors"&gt;
  &lt;/a&gt;
  Colors
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#huesnap"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.huesnap.com/"&gt;HueSnap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fHpa6-nO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619709891422/WkcHNa3dYZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fHpa6-nO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619709891422/WkcHNa3dYZ.png" alt="Screenshot 2021-04-29 at 20-54-40 HueSnap.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create beautiful color palettes to share and inspire others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adobe-colours"&gt;
  &lt;/a&gt;
  &lt;a href="https://color.adobe.com/explore"&gt;Adobe Colours&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hpy2j2ia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750882616/NKRPvFUya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hpy2j2ia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750882616/NKRPvFUya.png" alt="Screenshot 2021-04-30 at 08-17-15 Color palette, the color scheme for artists Adobe Color.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pigment"&gt;
  &lt;/a&gt;
  &lt;a href="https://pigment.shapefactory.co/"&gt;Pigment&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tEOvBoMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750643140/TUFQQAANh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tEOvBoMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750643140/TUFQQAANh.png" alt="Screenshot 2021-04-30 at 08-13-55 Pigment by ShapeFactory Simple Color Palette Generator.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coolors"&gt;
  &lt;/a&gt;
  &lt;a href="https://coolors.co"&gt;Coolors&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Im7HKQbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750740576/ua-YIsI5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Im7HKQbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750740576/ua-YIsI5u.png" alt="Screenshot 2021-04-30 at 08-15-07 Coolors - The super fast color schemes generator .png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create the perfect palette or get inspired by thousands of beautiful color schemes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#colourhunt"&gt;
  &lt;/a&gt;
  &lt;a href="https://colorhunt.co/"&gt;Colourhunt&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNFT8WoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750794663/rP84JFi7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNFT8WoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750794663/rP84JFi7r.png" alt="Screenshot 2021-04-30 at 08-16-09 Color Hunt - Color Palettes for Designers and Artists.png"&gt;&lt;/a&gt;&lt;br&gt;
Color Hunt is a free and open platform for color inspiration with thousands of trendy hand-picked color palettes &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#free-videos-and-gifs"&gt;
  &lt;/a&gt;
  Free Videos  and GIFs
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#animaticons"&gt;
  &lt;/a&gt;
  &lt;a href="https://animaticons.co/"&gt;Animaticons&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLIoWJiY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619749327651/3tAaS-Le1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLIoWJiY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619749327651/3tAaS-Le1.png" alt="Screenshot 2021-04-30 at 07-51-59 Animaticons - Beautiful, customizable animated GIF icons.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beautiful, customizable GIFS. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coverrr"&gt;
  &lt;/a&gt;
  &lt;a href="https://coverr.co/"&gt;Coverrr&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cjf6gISb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619751087018/MXm0ruUpO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cjf6gISb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619751087018/MXm0ruUpO.png" alt="Screenshot 2021-04-30 at 08-20-22 Free Stock Footage Royalty Free Videos for Download Coverr.png"&gt;&lt;/a&gt;&lt;br&gt;
Beautiful Free Stock Video Footage&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#videezy"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.videezy.com/"&gt;Videezy&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T3xBw1Wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710796696/b-jJfits-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T3xBw1Wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710796696/b-jJfits-.png" alt="Screenshot 2021-04-29 at 21-09-15 Stock footage motion graphics for everyone .png"&gt;&lt;/a&gt;&lt;br&gt;
 Free HD Stock Footage &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#videvo"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.videvo.net/stock-video-footage/"&gt;Videvo&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ifv_kauQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710941064/Kp7x01ud5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ifv_kauQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710941064/Kp7x01ud5.png" alt="Screenshot 2021-04-29 at 21-10-31 Free Stock Video Footage Download 4K HD Clips.png"&gt;&lt;/a&gt;&lt;br&gt;
Free Stock Video Footage Download 4K HD Clips&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#free-mockups"&gt;
  &lt;/a&gt;
  Free Mockups
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#shotsnapp"&gt;
  &lt;/a&gt;
  &lt;a href="https://shotsnapp.com/"&gt;Shotsnapp&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L4r5MqRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619711050534/fH5Cc1iAI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L4r5MqRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619711050534/fH5Cc1iAI.png" alt="Screenshot 2021-04-29 at 21-12-55 shotsnapp - Create beautiful mockup presentation.png"&gt;&lt;/a&gt;&lt;br&gt;
Create beautiful device mockup images for your app or website design. Share it everywhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screely"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.screely.com/"&gt;Screely &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nCcS94S3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619711062843/-XcLa1JOZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nCcS94S3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619711062843/-XcLa1JOZ.png" alt="Screenshot 2021-04-29 at 21-12-18 Screely - Generate Website Mockups.png"&gt;&lt;/a&gt;&lt;br&gt;
Generate Website Mockups Instantly Without Complicated Software&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ionicons"&gt;
  &lt;/a&gt;
  &lt;a href="https://ionicons.com/"&gt;Ionicons&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zfHQSD1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619709613592/YRRq4iJex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfHQSD1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619709613592/YRRq4iJex.png" alt="Screenshot 2021-04-29 at 20-50-03 Ionicons The premium icon pack for Ionic Framework.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Premium designed icons for use in web, iOS, Android, and desktop apps. Support for SVG and web font. Completely open source. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-noun-project"&gt;
  &lt;/a&gt;
  &lt;a href="https://thenounproject.com/"&gt;The Noun Project&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Free icons and stock images&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Es3F6xUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710731936/rxm8Ns6pd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Es3F6xUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710731936/rxm8Ns6pd.png" alt="Screenshot 2021-04-29 at 21-07-47 Noun Project Free Icons Stock Photos for Everything.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design-bundle-free-resources"&gt;
  &lt;/a&gt;
  &lt;a href="https://designbundles.net/free-design-resources"&gt;Design Bundle Free resources&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MpLx8lU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619709515333/PEcwITdJS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MpLx8lU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619709515333/PEcwITdJS.png" alt="Screenshot 2021-04-29 at 20-48-07 Free Design Resources Download Free Graphics, SVGs, Icons + More .png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you will find premium and free svgs and design elements available for instant download – no strings attached.&lt;/p&gt;




&lt;p&gt;Subscribe to our &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#illustrations"&gt;
  &lt;/a&gt;
  Illustrations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#undraw"&gt;
  &lt;/a&gt;
  &lt;a href="https://undraw.co/illustrations"&gt;Undraw&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4FEV8dzL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710193928/ixy7V7ZoGn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4FEV8dzL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710193928/ixy7V7ZoGn.png" alt="Screenshot 2021-04-29 at 20-59-42 Illustrations unDraw.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open source illustrations or any idea you can imagine and create.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lukaszadam-illustrations"&gt;
  &lt;/a&gt;
  &lt;a href="https://lukaszadam.com/illustrations"&gt;Lukaszadam Illustrations&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W4izZEb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710267303/rwG_1c0tN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4izZEb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710267303/rwG_1c0tN.png" alt="Screenshot 2021-04-29 at 21-00-52 Free Illustrations [+77 Free SVG Illustrations] Commercial Use.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free SVG illustration images in different shapes &amp;amp; styles. Free for commercial and personal use under the CC0 license (MIT license). No attribution required. Open source illustrations. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#freebies-supply"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.toBuild%20your%20own%20amazing%20illustrations"&gt;Freebies supply&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mtG-f7is--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750299384/EeDfbDR1C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mtG-f7is--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750299384/EeDfbDR1C.png" alt="Screenshot 2021-04-30 at 08-07-41 Freebie Supply - Free resources for designers.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The freshest design resources for Adobe XD, Figma, Sketch, Photoshop and Adobe Illustrator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-peeps"&gt;
  &lt;/a&gt;
  &lt;a href="https://openpeeps.com/"&gt;Open Peeps&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ANJvODNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710355564/_2Sre1Z6X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ANJvODNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710355564/_2Sre1Z6X.png" alt="Screenshot 2021-04-29 at 21-02-00 Open Peeps, Hand-Drawn Illustration Library.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A hand-drawn illustration library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#humaaans"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.humaaans.com/"&gt;Humaaans&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GNiTeruw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619709685005/h-C56HH8_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GNiTeruw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619709685005/h-C56HH8_.png" alt="Screenshot 2021-04-29 at 20-50-37 Humaaans Mix- -Match illustration library.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mix-&amp;amp;-match illustrations of people with a design library. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manypixelco"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.manypixels.co/gallery"&gt;Manypixel.co &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w6hmyOMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619749741612/nL3UpTtPN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w6hmyOMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619749741612/nL3UpTtPN.png" alt="Screenshot 2021-04-30 at 07-58-44 Free to Use Clip Art Images Vector Illustrations ManyPixels.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Discover new illustrations every week. Use them on landing pages,&lt;br&gt;
blog posts, newsletters, social media graphics and more!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ira-design"&gt;
  &lt;/a&gt;
  &lt;a href="https://iradesign.io/"&gt;Ira Design&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ECp2LhB5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750215746/m0QCluJxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ECp2LhB5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750215746/m0QCluJxz.png" alt="Screenshot 2021-04-30 at 08-06-45 IRA Design by Creative Tim.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build your own amazing illustrations&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#freshfolks"&gt;
  &lt;/a&gt;
  FreshFolks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ihHZbll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619749783677/_pNdEvLAm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ihHZbll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619749783677/_pNdEvLAm.png" alt="Screenshot 2021-04-30 at 07-59-26 Fresh Folk.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An illustration library of people and objects&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#illustrationsco"&gt;
  &lt;/a&gt;
  &lt;a href="https://illlustrations.co/"&gt;illustrations.co&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eesxLUD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619749848277/RVv-TYaU1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eesxLUD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619749848277/RVv-TYaU1.png" alt="Screenshot 2021-04-30 at 08-00-37 illlustrations - open source illustrations kit.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Designed 100 awesome illustrations during 100 days of illustration challenge (Now added more than 120+ illustrations). You can download all illustrations completely free and use these to design awesome - landing pages, mobile app or presentations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vivijs"&gt;
  &lt;/a&gt;
  &lt;a href="https://webkul.github.io/vivid/"&gt;ViviJS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nG_DII3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750156122/Q-jFcxeVv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nG_DII3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750156122/Q-jFcxeVv.png" alt="Screenshot 2021-04-30 at 08-05-50 Free Open Source SVG Icons Set Pack and Library [100+ Icons] - Vivid js.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ready to use Free and Open Source SVG Icons Pack JavaScript Library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#icons8-free-illustrations"&gt;
  &lt;/a&gt;
  &lt;a href="https://icons8.com/illustrations"&gt;Icons8 free illustrations&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-lJlPGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619749918238/lVfqMIS43v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-lJlPGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619749918238/lVfqMIS43v.png" alt="Screenshot 2021-04-30 at 08-01-50 Free Clip Art Images Vector Illustrations For Your Website.png"&gt;&lt;/a&gt;&lt;br&gt;
Free vector illustrations&lt;br&gt;
to enhance your project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interfacer"&gt;
  &lt;/a&gt;
  &lt;a href="https://interfacer.xyz/"&gt;Interfacer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QiiAcb1a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750114740/TI7ZRZL6E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QiiAcb1a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750114740/TI7ZRZL6E.png" alt="Screenshot 2021-04-30 at 08-05-04 300+ free design resources.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interfacer is a collection of high quality free Design Resources created by the most talented and awesome people on the Internet. You can use all of them in commercial projects. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#absurd-design"&gt;
  &lt;/a&gt;
  &lt;a href="https://absurd.design/"&gt;Absurd Design&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---aWitxI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619749985252/TDXLu7nEB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---aWitxI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619749985252/TDXLu7nEB.png" alt="Screenshot 2021-04-30 at 08-02-55 Absurd Design - Free Surrealist Illustrations and Vector Art.png"&gt;&lt;/a&gt;&lt;br&gt;
absurd illustrations that make sense&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opendoodles"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.opendoodles.com/"&gt;OpenDoodles&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9W85QG6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750016327/PJjAsTL15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9W85QG6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619750016327/PJjAsTL15.png" alt="Screenshot 2021-04-30 at 08-03-28 Open Doodles - Free sketchy illustrations.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Free Set of Open-Source Illustrations!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#stock-images"&gt;
  &lt;/a&gt;
  Stock Images
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#stocksnap"&gt;
  &lt;/a&gt;
  &lt;a href="https://stocksnap.io/"&gt;StockSnap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GgLVjhA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619751496031/VnpOZfSzY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GgLVjhA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619751496031/VnpOZfSzY.png" alt="Screenshot 2021-04-30 at 08-26-48 Free Stock Photos and Images.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free stock photos and images&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-old-stock"&gt;
  &lt;/a&gt;
  &lt;a href="https://nos.twnsnd.co/"&gt;New old stock&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWG1mAQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710543523/OMLb9RpdU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWG1mAQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710543523/OMLb9RpdU.png" alt="Screenshot 2021-04-29 at 21-03-53 New Old Stock.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vintage free stock images&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#picjumbo"&gt;
  &lt;/a&gt;
  &lt;a href="https://picjumbo.com/"&gt;PicJumbo&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ENsO6PYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710603326/-P70LZ5Vc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ENsO6PYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710603326/-P70LZ5Vc.png" alt="Screenshot 2021-04-29 at 21-05-00 picjumbo Free Stock Photos.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download free stock photos, backgrounds and free high-resolution images for personal and commercial use&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nappy"&gt;
  &lt;/a&gt;
  &lt;a href="https://nappy.co"&gt;Nappy&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IkDjYZu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710714592/3X5ZvLk2D.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkDjYZu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619710714592/3X5ZvLk2D.png" alt="Screenshot 2021-04-29 at 21-05-55 Nappy Beautifully Diverse Stock Photos.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beautiful photos of Black and Brown people, for free. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#burst"&gt;
  &lt;/a&gt;
  &lt;a href="https://burst.shopify.com/"&gt;Burst&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E6yjX3fb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619751538254/aOx_gel8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E6yjX3fb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619751538254/aOx_gel8o.png" alt="Screenshot 2021-04-30 at 08-27-36 Free Stock Photos High-Res Images for Websites Commercial Use.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free stock photos for websites and commercial use&lt;br&gt;
Download free, high-resolution images&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#foodiesfeed"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.foodiesfeed.com/"&gt;FoodiesFeed&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DRGF3mLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619751577228/NoWijFo66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DRGF3mLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619751577228/NoWijFo66.png" alt="Screenshot 2021-04-30 at 08-28-07 Free food pictures – Foodiesfeed.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#focastock"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.toLink"&gt;FocaStock&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gotMtxmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619751681026/_7_voI4eB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gotMtxmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619751681026/_7_voI4eB.png" alt="Screenshot 2021-04-30 at 08-31-02 FOCA Stock - Free photos, videos, and templates.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free photos, videos, and templates for commercial use&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kaboom-pics"&gt;
  &lt;/a&gt;
  &lt;a href="https://kaboompics.com/"&gt;Kaboom Pics&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--892OMYeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619751676017/lddKg_QnN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--892OMYeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619751676017/lddKg_QnN.png" alt="Screenshot 2021-04-30 at 08-30-46 Free stock photos - Kaboompics.png"&gt;&lt;/a&gt;&lt;br&gt;
FREE STOCK PHOTOGRAPHY + COLOR PALETTES&lt;/p&gt;




&lt;p&gt;Thank Your for seeing this post. Let me know in the comments if you want to add something. 😀&lt;/p&gt;

&lt;p&gt;Thank you For Reading🤩 Subscribe to our  &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;

</description>
      <category>css</category>
      <category>design</category>
      <category>resources</category>
    </item>
    <item>
      <title>Jamstack and Serverless with Jason Lengstorf</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 07 May 2021 03:21:25 +0000</pubDate>
      <link>https://dev.to/devteam/jamstack-and-serverless-with-jason-lengstorf-3jdl</link>
      <guid>https://dev.to/devteam/jamstack-and-serverless-with-jason-lengstorf-3jdl</guid>
      <description>&lt;p&gt;On &lt;time&gt;April 21st&lt;/time&gt;, Jason Lengstorf (VP of Developer Experience at Netlify and DEV Community member) joined &lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
 and me on the Walkthrough Wednesday stream to discuss Jamstack, serverless, and Jamstack Explorers.&lt;/p&gt;

&lt;p&gt;We used Netlify's serverless functions to quickly set up an API to grab DEV posts with the DEV API.&lt;/p&gt;

&lt;p&gt;Thanks again for joining us, Jason! 😎 I had a great time pairing with you on the stream.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Watch the Walkthrough Wednesday with Jason and catch up on what you missed:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dXr0iJE10tQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Take a look at the repository we created and worked on.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nickytonline"&gt;
        nickytonline
      &lt;/a&gt; / &lt;a href="https://github.com/nickytonline/fun-with-jason"&gt;
        fun-with-jason
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Walkthrough Wednesdays with Jason Lengstorf: DEV API project using serverless&lt;/h1&gt;
&lt;p&gt;We talked Jamstack, serverless, and I got to have some fun and pair with Jason. We used Netlify's serverless functions to quickly set up an API to grab DEV posts with the DEV API, i.e. this repository.&lt;/p&gt;
&lt;p&gt;Thanks again for coming on the stream Jason! 😎&lt;/p&gt;
&lt;p&gt;
    &lt;a href="https://www.youtube.com/watch?v=dXr0iJE10tQ" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/f58637dc8c500399005776b4c8d44c07be4ef132bf19cdde69e2af098e33905d/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f64587230694a45313074512f302e6a7067" alt="Walkthrough Wednesdays Project with Jason Lengstorf"&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Installation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install the Netlify CLI, &lt;code&gt;npm install netlify-cli -g&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;ntl dev&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;A browser will open at &lt;a href="http://localhost:8888" rel="nofollow"&gt;http://localhost:8888&lt;/a&gt; with a message saying "Not Found". That's OK. 😅
&lt;/li&gt;
&lt;li&gt;Navigate to &lt;a href="http://localhost:8888/api/posts" rel="nofollow"&gt;http://localhost:8888/api/posts&lt;/a&gt;. A list of posts from DEV will load.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Play with the API&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Load posts for a specific user by adding their username to the API call, e.g. &lt;a href="http://localhost:8888/api/posts/nickytonline" rel="nofollow"&gt;http://localhost:8888/api/posts/nickytonline&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fork this and have some fun!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Before and After Calling API with On-demand Builders Enabled&lt;/h2&gt;

&lt;p&gt;In this example we query the posts for DEV community member &lt;a href="https://dev.to/coffeecraftcode" rel="nofollow"&gt;coffeecraftcode&lt;/a&gt;. The initial call comes…&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nickytonline/fun-with-jason"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#on-this-stream-we-covered"&gt;
  &lt;/a&gt;
  On this stream, we covered:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cli/cli#installation"&gt;GitHub CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.netlify.com/cli/get-started/"&gt;Netlify CLI&lt;/a&gt; and how to quickly deploy and update our API&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/configure-builds/on-demand-builders/"&gt;Netlify On-demand builders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.forem.com/api/"&gt;The DEV API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://explorers.netlify.com/"&gt;Jamstack Explorers&lt;/a&gt; - We forgot to cover this one, but Christina gave it a shoutout at the end of the stream. It's really good. I did the NEXT.js course with &lt;a class="mentioned-user" href="https://dev.to/cassidoo"&gt;@cassidoo&lt;/a&gt;
 a little while back. 😎&lt;/li&gt;
&lt;/ul&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/nFFguNjdeotwc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/nFFguNjdeotwc/giphy.gif" alt="Amy Poehler slouching in a seat in a theater putting both her hands out as if to say cool!"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Thanks again for coming on the stream, Jason!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#you-can-also-find-the-three-of-us-all-over-the-web-here"&gt;
  &lt;/a&gt;
  You can also find the three of us all over the web here:
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__88635"&gt;
  
    .ltag__user__id__88635 .follow-action-button {
      background-color: #0030b3 !important;
      color: #ffffff !important;
      border-color: #0030b3 !important;
    }
  
    &lt;a href="/jlengstorf" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oIpIYcbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2LRVCYj---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/88635/4bff9730-fc39-4480-bf6a-af1e4fd8217a.jpeg" alt="jlengstorf image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/jlengstorf"&gt;Jason Lengstorf&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/jlengstorf"&gt;⚡️ a.k.a. Blitz Jackson
📺 live coding on LearnWithJason.dev
📝 blogging at http://lengstorf.com
🥑 Dev Experience at Netlify
⏳ previously at Gatsby, IBM

he/him&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jlengstorf"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jason.af/"&gt;Website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__user ltag__user__id__9597"&gt;
  
    .ltag__user__id__9597 .follow-action-button {
      background-color: #fb4881 !important;
      color: #ffffff !important;
      border-color: #fb4881 !important;
    }
  
    &lt;a href="/nickytonline" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmhzwLSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zhsA-ZEm--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/9597/68d6245f-3152-4ed2-a245-d015fca4160b.jpeg" alt="nickytonline image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/nickytonline"&gt;Nick Taylor (he/him)&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/nickytonline"&gt;Lead software engineer at Forem. Caught the live coding bug on Twitch at livecoding.ca&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/nickytonline"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://livecoding.ca"&gt;livecoding.ca&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtube.iamdeveloper.com"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__user ltag__user__id__129358"&gt;
  
    .ltag__user__id__129358 .follow-action-button {
      background-color: #f0065c !important;
      color: #ffffff !important;
      border-color: #f0065c !important;
    }
  
    &lt;a href="/coffeecraftcode" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuBMmi-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--u8pzDZEU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/129358/190252c3-ce2d-4df8-b4b1-b42f7ae7d08a.png" alt="coffeecraftcode image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/coffeecraftcode"&gt;Christina Gorton&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/coffeecraftcode"&gt;Open Source Community Manager, Technical Writer,  Developer, and Instructor. 
Courses on LinkedIn, Egghead, Design+Code, and Skillshare. 

https://egghead.io/instructors/christina-gorton/?af=1c6fpu&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/coffeecraftcode"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope to see you on future DEV streams! If you're interested in pairing, fill out &lt;a href="https://iamdeveloper.com/pair"&gt;this form&lt;/a&gt;. Christina and I would love to tackle an issue with you that the whole community could learn from.&lt;/p&gt;

&lt;p&gt;P.S. &lt;a href="https://twitch.tv/thepracticaldev"&gt;Follow DEV on Twitch&lt;/a&gt; to be notified when future streams begin and catch old streams on &lt;a href="https://www.youtube.com/c/thepracticaldevteam"&gt;YouTube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devstream</category>
      <category>pairprogramming</category>
      <category>serverless</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>Why use Next.js + Strapi?</title>
      <author>Ruben Marcus</author>
      <pubDate>Fri, 07 May 2021 02:59:14 +0000</pubDate>
      <link>https://dev.to/rubenmarcus/why-use-next-js-strapi-16b1</link>
      <guid>https://dev.to/rubenmarcus/why-use-next-js-strapi-16b1</guid>
      <description>&lt;p&gt;At this article I will show you the advantages of doing a website with Strapi in the backend and Next.js in the frontend&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-of-all-what-is-headless-cms"&gt;
  &lt;/a&gt;
  First of all… What is Headless CMS?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tk_zsBLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcmwucc3i3zgy5l9mcpu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tk_zsBLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcmwucc3i3zgy5l9mcpu.jpg" alt="Headless x Traditional CMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In short, it is a content management system like WordPress, Drupal or Contentful in which content management is separate from the presentation layer (Front-end).&lt;/p&gt;

&lt;p&gt;The main advantage of this approach is that it is tech independent, which means that the website (can be made in SPA frameworks or as you wish), native apps or can be created using the tools or tech you want.&lt;/p&gt;

&lt;p&gt;The main disadvantage is that you need to manage two or more web applications instead of one. (Which can be a disadvantage, depending on the formation of your team.)&lt;/p&gt;

&lt;p&gt;There are CMS that come as Headless standard (API-based), and some that are GIT-based, and generate static websites.&lt;/p&gt;

&lt;p&gt;And others that are also based on API but that do not come in this architecture by default and it is necessary to use plugins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The advantage of being Headless and API-based by default is that:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you have a source of information and can make many applications for different devices from it.&lt;/li&gt;
&lt;li&gt;The fact that it is a core functionality of the CMS, indicates that the chance of support and updates to the Headless API are greater, whereas if it is a plugin the chance of not being supported may be more likely.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to know more about Headless CMS,than  take a look here: &lt;a href="//https:%20/headlesscms.org"&gt;https: /headlesscms.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-strapi"&gt;
  &lt;/a&gt;
  Why use Strapi?
&lt;/h2&gt;

&lt;p&gt;Strapi is an Open Source CMS, made in Node.js and MongoDb, it also supports MYSQL, MariaDB, SQLite and PostgreSQL.&lt;/p&gt;

&lt;p&gt;Comes with easy deployment to AWS, Digital Ocean , Heroku and many other cloud services.&lt;/p&gt;

&lt;p&gt;It has rich documentation and several tutorials on how to use the CMS.&lt;/p&gt;

&lt;p&gt;It is possible to install &lt;a href="https://strapi.io/documentation/3.0.0-beta.x/installation/cli"&gt;locally via CLI&lt;/a&gt; or using &lt;a href="https://github.com/strapi/strapi-docker"&gt;Docker&lt;/a&gt;, or using online services such as &lt;a href="https://strapi.io/documentation/3.0.0-beta.x/installation/platformsh"&gt;Platform.sh&lt;/a&gt; or &lt;a href="https://strapi.io/documentation/3.0.0-beta.x/installation/digitalocean-one-click"&gt;Digital Ocean&lt;/a&gt;, or wherever you want.&lt;/p&gt;

&lt;p&gt;It is possible to do unit tests with Jest, or other test frameworks, since Strapi has a configurable webpack.&lt;/p&gt;

&lt;p&gt;Strapi, also has webhooks to trigger actions for other applications.&lt;/p&gt;

&lt;p&gt;Strapi's architecture is very simple and well-founded, it explains how to write plugins, how to model the Strapi API, how to manage the content to be exported.&lt;/p&gt;

&lt;p&gt;Strapi's learning curve might be between low and medium, it depends on the developer's knowledge with Node.js and the concept of CMS Headless, if the developer has any doubts he can take a look at the existing examples, tutorials or documentation.&lt;/p&gt;

&lt;p&gt;It is possible to restrict JWT apis calls to Strapi user groups.&lt;/p&gt;

&lt;p&gt;Internationalization is only possible with a workaround, creating fields suffixed by languages&lt;/p&gt;

&lt;p&gt;The main competitor of Strapi in the Node.js world is Ghost, and OpenSource is Directus (made in PHP), also WordPress with its Rest Api that since version 4.7 is part of the WordPress Core and no longer made by plugin.&lt;/p&gt;

&lt;p&gt;Of these 4 Open Source options, I consider Strapi the better, because you understand how simple it is to manage and extend it.&lt;/p&gt;

&lt;p&gt;WordPress in addition to security issues, has a different base concept than Strapi. You can achieve the same goal as Strapi, but by making more settings and using various plugins.&lt;/p&gt;

&lt;p&gt;Ghost presents a somewhat similar scenario, but often to do the same thing you do on Strapi you will need more work for the same thing. &lt;/p&gt;

&lt;p&gt;Ghost is very good on the security side, but on the content side, Strapi is simpler and more complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://directus.io/"&gt;Directus&lt;/a&gt; is one of the CMS that presents, a proposal very similar to Strapi, but its stack is made in PHP, and has bug reports critical by users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-nextjs"&gt;
  &lt;/a&gt;
  Why Next.js?
&lt;/h2&gt;

&lt;p&gt;With the rise of SPAS frameworks, going from Angular.js, React, Angular 2+ and Vue,a major faced problem from apps rendered on the client,face it is the issue of SEO.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frameworks like Next.js come to solve this problem.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Rendering the application via SSR (Server Side Rendering) or SSG (Static Site Generation),than the search engine can read the content of your page, and render it for show in its results.&lt;/p&gt;

&lt;p&gt;But the benefits go beyond that. Next.js increases the loading performance of your application. &lt;/p&gt;

&lt;p&gt;In a basic test on Google LightHouse (we will address this soon), an application with create-react-app x a Next.js SSR application, had a first meaningful paint with 87% less time than a React CSR application (Client-side Rendering), this is due to Next.js already render part of your application on the Server, bringing the content on the screen before loading everything on the client.&lt;/p&gt;

&lt;p&gt;It has a folder and links scheme that also allows the lazy-loading of modules, as well as automatic code-splitting.&lt;/p&gt;

&lt;p&gt;You can choose which pages you will render on the server and which you will render statically, making it a Hybrid app.&lt;/p&gt;

&lt;p&gt;Next.js supports AMP (Acellerated Mobile Pages): Where it wont render anything from Node.js and React, and only pages in AMP format.&lt;/p&gt;

&lt;p&gt;Next.js also supports the entire range of CSS universe, from preprocessors such as SASS, LESS and Stylus, as well as CSS Modules, Styled Components, CSS-in-JS, TailWind CSS, Bootstrap etc.&lt;/p&gt;

&lt;p&gt;Next.js has a very strong focus on performance, and has tools for you to measure that. (This will be the subject of a separate article).&lt;/p&gt;

&lt;p&gt;We are able to use Next.js also with TypeScript, assuring how we handle our application data using interfaces and types.&lt;/p&gt;

&lt;p&gt;Inside Next.js you can also do DynamicImports, using the ES2020 syntax, and generating components dynamically.&lt;/p&gt;

&lt;p&gt;These are some benefits of Next.js, in addition to solving and helping us with the SEO problems of the SPA frameworks, it gives us the entire React ecosystem, to be able to work, in addition to helping us, with a lean structure and a very rich documentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;some companies using Next.js&lt;/strong&gt;: GoDaddy,Netflix,Marvel,Invision App, Tencent, Tiktok, Uber, Trip.com, HostGator, Auth0, Binance, Staples, TicketMaster, Playstation, IGN, AT&amp;amp;T, Hulu, Twitch, Nike, Lego, Material UI, Expo, Ferrari, Avocode, Styled Components, Volvo, The Economist,Workable, Vodafone, Coinmarketcap, Monday, Elastic, History Channel , A&amp;amp;E Tv, Lifetime, Hackernoon, Spotify, Pier, DAZN, Apify,CloudBees, Deno,Crazygames.com&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-x-nuxt-x-angular-universal-x-other-react-ssr-frameworks"&gt;
  &lt;/a&gt;
  Next.js x Nuxt x Angular Universal x other React SSR Frameworks:
&lt;/h2&gt;

&lt;p&gt;There are other frameworks, which compete directly with Next.js &lt;/p&gt;

&lt;p&gt;The idea is not to make a comparison between them. But basically each one follows a tool, be it Nuxt.js with Vue, or Angular with Angular Universal.&lt;/p&gt;

&lt;p&gt;The idea is not to make a comparison here, because that would be a theme for an entire article, just to give an idea that there are other options on the market.&lt;/p&gt;

&lt;p&gt;Within the React ecosystem there are other ways to achieve the same goal, either with &lt;a href="https://github.com/jaredpalmer/after.js"&gt;After.js&lt;/a&gt;, &lt;a href="https://github.com/jaredpalmer/razzle"&gt;Razzle&lt;/a&gt; or &lt;a href="https://github.com/alexnm/react-ssr"&gt;React-SSR&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-witn-nextjs-strapi-boilerplates"&gt;
  &lt;/a&gt;
  Starting witn Next.js + Strapi: Boilerplates
&lt;/h2&gt;

&lt;p&gt;Boilerplates are ready to use codes that allow us to start an application without having to configure it from scratch.&lt;/p&gt;

&lt;p&gt;They are very useful to go out coding our application without wasting time with installations and configurations.&lt;/p&gt;

&lt;p&gt;Below I will mention some that I think are good to start in the Next.js and Strapi universe:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/strapi/strapi-starter-react-blog"&gt;Strapi Next.js Blog Boilerplate&lt;/a&gt; (made by the Strapi team)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vercel/next.js/tree/canary/examples/cms-strapi"&gt;Next.js Strapi Example&lt;/a&gt; (made by the Next.js team)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://strapi.io/documentation/"&gt;Strapi Documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nextjs.org/docs"&gt;Next.js documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/strapi/10-reasons-why-you-should-use-a-headless-cms-cea598880dc7"&gt;10 Reasons you should use a Headless CMS&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>strapi</category>
      <category>headless</category>
    </item>
    <item>
      <title>Project 70 of 100 - Rick Redux</title>
      <author>James Hubert</author>
      <pubDate>Fri, 07 May 2021 02:48:39 +0000</pubDate>
      <link>https://dev.to/jwhubert91/project-70-of-100-rick-redux-4oan</link>
      <guid>https://dev.to/jwhubert91/project-70-of-100-rick-redux-4oan</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey! I'm on a mission to make 100 React.js projects ending May 31st. Please follow my dev.to profile or my &lt;a href="https://www.twitter.com/jwhubert91"&gt;twitter&lt;/a&gt; for updates and feel free to reach out if you have questions. Thanks for your support!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Link to today's deployed app: &lt;a href="https://100-react-projects-day-70-redux-rick-ranker.netlify.app/"&gt;Link&lt;/a&gt;&lt;br&gt;
Link to the repo: &lt;a href="https://github.com/jwhubert91/100daysofreact/tree/master/day-70-redux-rick-ranker"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;Today was another day of interacting with Redux at the most basic level. For those curious about my process or how I come up with these nearly useless project ideas, I do an hour a day of online programming coursework and follow it with an hour where I'm free to build whatever I can think of to practice the day's concepts.&lt;/p&gt;

&lt;p&gt;Right now I'm in the final segment of &lt;a href="https://scrimba.com/learn/react"&gt;Bob Ziroll's React Bootcamp on Scrimba&lt;/a&gt;, which I highly recommend if you're interested in learning React. I also highly recommend Scrimba for anyone learning web development.&lt;/p&gt;

&lt;p&gt;Anyway, on to the project. Today I built a web application from Create React App that embedded a Youtube video of the famous &lt;a href="https://en.wikipedia.org/wiki/Rickrolling"&gt;Rick Roll&lt;/a&gt; music video. The goal was to build a little application that interacted with a totally basic vanilla Javascript implementation of Redux for storing state. The actual Redux functionality was almost identical to &lt;a href="https://dev.to/jwhubert91/project-69-of-100-basic-redux-subscriber-16n6"&gt;yesterday's project&lt;/a&gt; except that it includes functionality for changing the title of the video, which changes the way the reducer looks.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-redux"&gt;
  &lt;/a&gt;
  Setting up Redux
&lt;/h2&gt;

&lt;p&gt;Here I'll walk you through what that Redux file looks like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, we have to &lt;strong&gt;import Redux&lt;/strong&gt; (after installing it with &lt;code&gt;npm i redux&lt;/code&gt;) and include it in the file.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// require redux&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redux&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Second, we need to set up our &lt;strong&gt;actions&lt;/strong&gt;. These tell our reducer (more on that later) what to do when it interacts with state. Notice this formally creates and at the same time restricts the ways in which we can interact with the application's state.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// define actions&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;upVote&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UPVOTE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;downVote&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOWNVOTE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RENAME&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Next, we create a &lt;strong&gt;state object&lt;/strong&gt; just to put some initial values. This isn't a required part of using Redux, but it makes our lives easier in this particular application.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create state object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Never Gonna Give You Up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;After defining our actions, it's time to &lt;strong&gt;create the reducer&lt;/strong&gt;. This is the function that receives as an argument a previously-defined action, which typically has a payload, or data, that all together tell the reducer exactly how it should retrieve data from state to deliver that data in a meaningful way to components using the data.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create reducer&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UPVOTE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;votes&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOWNVOTE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;votes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RENAME&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;After our actions and reducer are set up, we can &lt;strong&gt;create a store&lt;/strong&gt;, which uses the built-in &lt;code&gt;createStore()&lt;/code&gt; method from the redux package. This, as the method says, creates a special store that has a lot of built in functionality that comes with the redux package. It's kind of like a really buffed-up version of the native React state.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create store from reducer&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Then, we need to &lt;strong&gt;subscribe&lt;/strong&gt; to changes in the store. This is one of those pre-built redux methods I mentioned earlier that is available on redux stores. This method provides a callback that you can use to interact with the data in the store, as it is changed.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// subscribe to store changes and console.log() them&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;free&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;exporting&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
// export&lt;br&gt;
export {upVote,downVote,rename,store};&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
##Interacting with our Reducer, and the Store
The next part of this project is to build out functionality in our React components that allows the user to interact with state. I *know for a fact* that I am not using Redux in the React way. I'm pretty sure there's even a special library for using Redux in React that I'm not using here. But remember what I said about using tech from my courses in that day's projects? Yeah, so we'll hopefully get to the React uses tomorrow.

OK- with warnings out of the way, here was my solution for interacting with Redux in other components. In my Control component, which is a JSX component that appears below the embedded Youtube video and has the buttons and votes readout, I have upvote and downvote buttons. In order for these buttons to interact with the store from our Redux file and actually use the actions we built to get data from the reducer, we have to bring in the store and our `upVote` and `downVote` functions: 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
import React,{useState,useEffect} from 'react'&lt;br&gt;
import {store,upVote,downVote} from '../redux'&lt;/p&gt;

&lt;p&gt;function Contol() {&lt;br&gt;
  const [videoState,setVideoState] = useState({})&lt;/p&gt;

&lt;p&gt;useEffect(() =&amp;gt; {&lt;br&gt;
    setVideoState(setVideoState(store.getState()))&lt;br&gt;
  }, [])&lt;/p&gt;

&lt;p&gt;store.subscribe(() =&amp;gt; {&lt;br&gt;
    setVideoState(store.getState())&lt;br&gt;
  })&lt;/p&gt;

&lt;p&gt;const handleUpVote = () =&amp;gt; {&lt;br&gt;
    store.dispatch(upVote())&lt;br&gt;
  }&lt;/p&gt;

&lt;p&gt;const handleDownVote = () =&amp;gt; {&lt;br&gt;
    store.dispatch(downVote())&lt;br&gt;
  }&lt;/p&gt;

&lt;p&gt;return(...)&lt;br&gt;
...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
As you can see I handle up and down votes with their own handler functions which call `store.dispatch()` to dispatch the actions and trigger a change in the store, which the subscriber has access to, and when changes are detected there I save those changes in a local state variable for use in this component. 

Here is how the component uses it, in the JSX:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
  return (&lt;br&gt;
    &lt;/p&gt;
&lt;br&gt;
      &lt;br&gt;
        &lt;h3&gt;Votes: {videoState ? videoState.votes : 0}&lt;/h3&gt;
&lt;br&gt;
      &lt;br&gt;
      &lt;br&gt;
        Vote Down 👎&lt;br&gt;
        Vote Up 👍&lt;br&gt;
      &lt;br&gt;
    &lt;br&gt;
  )&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
Above you can see that we are using the votes from state, and the two actions we imported from our redux file.

Next, I built the edit functionality into the `TitleEdit` component. For that, I only imported the store and my rename action. I also used an isEditing boolean flag to display either an input or the title in plain text. If the user clicks 'Save' after editing, we trigger the rename action in the `handleRename()` function.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
import React,{useState} from 'react'&lt;br&gt;
import {store,rename} from '../redux'&lt;/p&gt;

&lt;p&gt;function TitleEdit() {&lt;br&gt;
  const [isEditing,setIsEditing] = useState(false)&lt;br&gt;
  const [currentName,setCurrentName] = useState("Never Gonna Give You Up")&lt;/p&gt;

&lt;p&gt;store.subscribe(() =&amp;gt; {&lt;br&gt;
    const storeObject = store.getState()&lt;br&gt;
    setCurrentName(storeObject.name)&lt;br&gt;
  })&lt;/p&gt;

&lt;p&gt;const handleRename = () =&amp;gt; {&lt;br&gt;
    store.dispatch(rename(currentName))&lt;br&gt;
  }&lt;/p&gt;

&lt;p&gt;function handleEditClick() {&lt;br&gt;
    isEditing &amp;amp;&amp;amp; (&lt;br&gt;
      // was editing, now save and go back to normal&lt;br&gt;
      handleRename()&lt;br&gt;
    )&lt;br&gt;
    setIsEditing(prevState =&amp;gt; !prevState)&lt;br&gt;
  }&lt;br&gt;
  return(...)&lt;br&gt;
...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
Now here is the JSX:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
return (&lt;br&gt;
    &lt;/p&gt;
&lt;br&gt;
      &lt;h1&gt;
&lt;br&gt;
        {isEditing ? &lt;br&gt;
          &lt;br&gt;
            
              type="text" &lt;br&gt;
              placeholder="Enter new title"&lt;br&gt;
              value={currentName}&lt;br&gt;
              className="form-control"&lt;br&gt;
              onChange={e =&amp;gt; setCurrentName(e.currentTarget.value)}&lt;br&gt;
            &amp;gt;&lt;br&gt;
           :&lt;br&gt;
         &lt;span&gt;{currentName}{' '}&lt;/span&gt;&lt;br&gt;
        }&lt;br&gt;
      
        onClick={handleEditClick} &lt;br&gt;
        className="btn btn-light btn-sm"&lt;br&gt;
      &amp;gt;&lt;br&gt;
        {isEditing ? "Save" : "Edit"}&lt;br&gt;
      &lt;br&gt;
      &lt;/h1&gt;
&lt;br&gt;
    &lt;br&gt;
  )



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;


And that is my fully interactive custom made Redux state. If you're interested in this subject, I highly recommend you read more about it [here](https://www.youtube.com/watch?v=oHg5SJYRHA0), where it is handled in more detail.

**If you like projects like this and want to stay up to date with more, check out my Twitter [@jwhubert91](https://twitter.com/jwhubert91), I follow back! See you tomorrow for another project.**
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>100daysofcode</category>
    </item>
  </channel>
</rss>
