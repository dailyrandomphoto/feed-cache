<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>F# for Linux People</title>
      <author>Tosh</author>
      <pubDate>Tue, 18 Jan 2022 02:10:40 +0000</pubDate>
      <link>https://dev.to/carpenoctemdev/f-for-linux-people-42m8</link>
      <guid>https://dev.to/carpenoctemdev/f-for-linux-people-42m8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#f-for-linux-people"&gt;
  &lt;/a&gt;
  F# for Linux People
&lt;/h1&gt;

&lt;p&gt;&lt;small&gt;Originally published 2021-12-16 on my blog at &lt;a href="https://carpenoctem.dev"&gt;carpenoctem.dev&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Everything you need to start hacking F# on Linux!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why"&gt;Why this page exists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation &amp;amp; Initial Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#versions"&gt;.NET Versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#projects-and-solutions"&gt;Projects and Solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#startup"&gt;Slow Startup Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tools"&gt;Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#packages"&gt;Package Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fsi"&gt;FSI - F# Interactive &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#standalone"&gt;Standalone Executables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#templates"&gt;Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim"&gt;Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vscode"&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gui"&gt;GUI Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-this-page-exists"&gt;
  &lt;/a&gt;
  &lt;a&gt;Why this page exists&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;People learning the F# language today are blessed with excellent books, blogs, quality official online documentation, and other resources.  However, these resources tend to assume that the student is either using Windows, familiar with .NET development with C#, or using a particular IDE/Editor. &lt;/p&gt;

&lt;p&gt;Often, something that "just works" on Windows with Visual Studios may take some creativity to get working on Linux.  Sometimes (though not often) it doesn't work at all.&lt;/p&gt;

&lt;p&gt;The goal of this article is to fill that gap by documenting my own experience of learning F# as a Linux-centric developer who has not programmed on Windows or .NET for 15+ years.  It will not cover the language itself, but rather the tooling, ecosystem and things that confused me along the way. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-amp-initial-configuration"&gt;
  &lt;/a&gt;
  &lt;a&gt;Installation &amp;amp; Initial Configuration&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To install F#, you need to install the &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/install/linux"&gt;official .NET SDK from Microsoft&lt;/a&gt;, which includes F#.  Don't worry, it is open source under the MIT license, and it runs beautifully on Linux.&lt;/p&gt;

&lt;p&gt;Thankfully, installing the .NET SDK is trivial: Microsoft maintains official package repositories for Ubuntu, Debian, CentOS/RHEL, Fedora, OpenSUSE, SLES, and Alpine.  Arch Linux has a &lt;a href="https://wiki.archlinux.org/title/.NET"&gt;community maintained package&lt;/a&gt;.  There is also manual installer for distros not listed here.  Furthermore, note that if you use VS Code, you likely already have the correct repository.&lt;/p&gt;

&lt;p&gt;They even support ARM, so get your Raspberry Pi's ready! &lt;/p&gt;

&lt;p&gt;Once you have configured one of these official repositories, you'll need to install a packaged named &lt;code&gt;dotnet-sdk-6.0&lt;/code&gt; or similar.  On Ubuntu, it's just:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install dotnet-sdk-6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There is also &lt;code&gt;dotnet-runtime-6.0&lt;/code&gt;, which allows you to run .NET applications but not build them.  Useful for servers and docker images.  (There is also way to build standalone binaries which do not even require the runtime. See the &lt;a href="#standalone"&gt;Standalone Executable&lt;/a&gt; section below).&lt;/p&gt;

&lt;p&gt;That's it! You should have the &lt;code&gt;dotnet&lt;/code&gt; command line tool installed on your system. You won't need to run any other sudo commands.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dotnet&lt;/code&gt; tool is your one-stop-shop for managing your .NET installation, installing packages, creating projects, and so on.  It is similar to npm for node.  However, &lt;code&gt;dotnet&lt;/code&gt; handles multiple versions of the SDK and runtime seamlessly, so you do not need a separate 'version manager' like nvm, rvm, perlbrew, or virtualenv.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#after-installation"&gt;
  &lt;/a&gt;
  After Installation
&lt;/h5&gt;

&lt;p&gt;After installation, put something similar to this in your &lt;code&gt;.bash_profile&lt;/code&gt;, &lt;code&gt;.zshrc&lt;/code&gt;, or other shell initialization file:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export DOTNET_CLI_TELEMETRY_OPTOUT=1

if [ -d "$HOME/.dotnet/tools" ]; then
    export PATH=$HOME/.dotnet/tools:$PATH
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The first line prevents the &lt;code&gt;dotnet&lt;/code&gt; command line tool from sending Microsoft anonymized usage information.  No, it is not cool that this is opt-out instead of opt-in, but at least it is supposedly anonymized, and not hidden or obfuscated. &lt;/p&gt;

&lt;p&gt;The rest sets up your path to include the &lt;code&gt;~/.dotnet/tools&lt;/code&gt; directory, where various tools you install via &lt;code&gt;dotnet tool install&lt;/code&gt; are located. More on this later.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#what-about-mono"&gt;
  &lt;/a&gt;
  What About Mono?
&lt;/h5&gt;

&lt;p&gt;No doubt you've heard of the open source implementation of the .NET Framework started by Miguel de Icaza in 2004. &lt;/p&gt;

&lt;p&gt;Mono still exists and is not deprecated.  In fact, Mono is used by the &lt;a href="https://docs.unity3d.com/Manual/overview-of-dot-net-in-unity.html"&gt;Unity gaming engine&lt;/a&gt;.  &lt;a href="https://dotnet.microsoft.com/en-us/apps/xamarin"&gt;Xamarin&lt;/a&gt;, the .NET-based platform for developing iOS and Android applications, also uses Mono (although they may be switching to the official .NET soon).  Mono will also likely be used indefinitely by pre-existing free software such as &lt;a href="https://wiki.gnome.org/Apps/Tomboy"&gt;Tomboy&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;However, &lt;strong&gt;you should use the official .NET SDK from Microsoft for F#&lt;/strong&gt;.  The official .NET SDK is more complete and up-to-date, especially for F# developers.  Furthermore, the official SDK dominates F# developer mindshare, meaning that third party F# libraries will likely be written for the official SDK.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-versions"&gt;
  &lt;/a&gt;
  &lt;a&gt;.NET Versions&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you just want to start hacking F#, all you need to know is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;.NET 6 is the current version of the .NET platform, and F# 6 is the current version of the F# language. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, eventually you will want to know some of the history of .NET, because libraries and projects you find online will target various older versions, and you need to understand what's going on. Come back to this section when you do.&lt;/p&gt;

&lt;p&gt;Click here for a brief and probably wrong history of .NET versions&lt;/p&gt;

&lt;p&gt;In the beginning, 2001 to be specific, there was &lt;strong&gt;.NET Framework&lt;/strong&gt; (yes, 'Framework' is part of the name).  It was proprietary and Windows-only, and remains so to this day, though some parts were open sourced. &lt;/p&gt;

&lt;p&gt;In 2014, Microsoft released &lt;strong&gt;.NET Core&lt;/strong&gt; as a separate, alternative implementation of .NET.  It was cross-platform and open source under the MIT license.  It proved immensely popular and revitalized interest in .NET.  There were several versions of .NET Core, with 3.1 released in December 2019. &lt;/p&gt;

&lt;p&gt;Around this time, the decision was made to consolidate .NET Core and .NET Framework.  In November 2020, .NET Core was renamed &lt;strong&gt;.NET&lt;/strong&gt;, and MS announced .NET Framework would no longer be developed.  The first version of &lt;strong&gt;.NET&lt;/strong&gt; was 5, not 4, to avoid confusion with the existing .NET Framework 4.x.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;(Yes, it's just ".NET", with no suffix or prefix.  This has made it difficult to differentiate whether one is talking about .NET in general (which may include Framework), or more specifically the recent releases from Microsoft ü§∑üèº).&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;And that's how you end up with ".NET 6", the current version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minor Caveats 1&lt;/strong&gt;. Although .NET &lt;em&gt;Framework&lt;/em&gt; is no longer actively developed and version 4.8 will be its final version, it will continue to exists indefinitely because the last versions are installed by default on Windows 10 and various versions Windows Server. You may encounter older code, or code written by Windows-only developers targeting these versions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minor Caveat 2&lt;/strong&gt;.  There's also something called &lt;strong&gt;.NET Standard&lt;/strong&gt;.  Unlike the others, .NET Standard is merely a specification, and not a software package you can download and install.  It seems to be an earlier attempt to unify the different frameworks.  Specifically, if you can build a .NET library that targets .NET Standard, it will run on both .NET Framework &lt;em&gt;and&lt;/em&gt; .NET Core and .NET.  With the consolidation of the various versions, the .NET Standard specification was deprecated.  However, if you find a project targeting .NET Standard, it should work on current versions unmodified.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#projects-and-solutions"&gt;
  &lt;/a&gt;
  &lt;a&gt;Projects and Solutions&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In .NET, a Project is basically a compile-able unit of source code.  An executable console application Project might be created with:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new console -lang 'F#' -o YourFirstApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And a library might be created with:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new classlib -lang "F#" -o MyFirstLib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;However, in the world of .NET, there is a higher level of organization called the Solution.  Solutions contain Projects, and Projects within Solutions can reference each other.  This makes it easy share libraries between different executables.  Also, in .NET, your tests should exist as a separate project.&lt;/p&gt;

&lt;p&gt;Here's an example of creating a Solution with a console application referencing a library:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Create the solution
dotnet new sln -o MySolution
cd MySolution

dotnet new classlib -lang "F#" -o src/MyLib
dotnet new console -lang "F#" -o src/App

# Adding projects to a solution
dotnet sln add src/MyLib/MyLib.fsproj
dotnet sln add src/App/App.fsproj

# Reference the library from the console app
dotnet add src/App/App.fsproj reference src/MyLib/MyLib.fsproj

dotnet run --project App
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#slow-startup-time"&gt;
  &lt;/a&gt;
  &lt;a&gt;Slow Startup Time&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you are acustomed to interpretted languages such as Python, you will notice that &lt;code&gt;dotnet run&lt;/code&gt; seems &lt;em&gt;very&lt;/em&gt; slow...  a simple Hello World application will take over 2 seconds to launch!  Don't worry, compiled applications will start up much quicker, but it is quite annoying during development.&lt;/p&gt;

&lt;p&gt;Unfortunately, there is no way to reduce startup time significantly.  &lt;/p&gt;

&lt;p&gt;Two possible remedies are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;dotnet watch run&lt;/code&gt; so that the application is run every time you save a change in a source file.&lt;/li&gt;
&lt;li&gt;Do you experimental coding in FSI. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  &lt;a&gt;Tools&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;dotnet&lt;/code&gt; cli tool can be used to install various tools.  You can either install them globally (in &lt;code&gt;~/.dotnet/tools&lt;/code&gt;) or locally, within a project or solution.  Global installations are more conveninent during development (less typing), but local installations make more sense when you are using CI/CD.  It is ok to have a tool installed both locally and globally.&lt;/p&gt;

&lt;p&gt;Regardless, one tool you'll definitely want to configure is the Paket package management software:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet tool install paket --global
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Assuming you added &lt;code&gt;~/.dotnet/tools&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt; as mentioned above, you should be able to run &lt;code&gt;paket&lt;/code&gt; now in your shell.&lt;/p&gt;

&lt;p&gt;Installing locally in a solution or project involves an extra step:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new tool-manifest
dotnet tool install paket
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To run the locally installed tool, you'll need to run it as &lt;code&gt;dotnet paket&lt;/code&gt;.  There is no need to mess with your &lt;code&gt;$PATH&lt;/code&gt; in this case.  Be sure to also add the newly generated manifest file &lt;code&gt;.config/dotnet-tools.json&lt;/code&gt; to git. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#package-management"&gt;
  &lt;/a&gt;
  &lt;a&gt;Package Management&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;.NET has a public repository of packages called &lt;a href="https://www.nuget.org/"&gt;NuGet&lt;/a&gt;.  It is akin to pip for Python, npm for Node.js, CPAN for Perl, etc. &lt;/p&gt;

&lt;p&gt;NuGet packages are installed at the Project level (as opposed to the Solution level) with a command like:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet add package Giraffe 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Then you can reference any module/namespace provided by the package with &lt;code&gt;open&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;open Giraffe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;One important note, from an open source perspective: unlike repositories for other languages, packages on NuGet may not be FOSS.  For example, &lt;a href="https://www.nuget.org/packages/IronPdf/"&gt;IronPDF&lt;/a&gt; is completely closed-source and proprietary, yet it is distributed via NuGet.  Therefore, please check out the package's license carefully before using a random package off of NuGet!&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#paket"&gt;
  &lt;/a&gt;
  Paket
&lt;/h5&gt;

&lt;p&gt;Paket is an alternative dependency manager for .NET, written in F#.  It can use NuGet packages, as well as point directly to Github repos and URLs.  See their &lt;a href="https://fsprojects.github.io/Paket/faq.html#I-do-not-understand-why-I-need-Paket-to-manage-my-packages-Why-can-t-I-just-use-NuGet-exe-and-packages-config"&gt;FAQ&lt;/a&gt; for why you may want to use Paket over the native package management built into &lt;code&gt;dotnet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All examples in this section will assume you've installed Paket globally (see the &lt;a href="#tools"&gt;Tools&lt;/a&gt; section).  If you want to use a local paket, change all calls of &lt;code&gt;paket&lt;/code&gt; below to &lt;code&gt;dotnet paket&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Paket can be configured at the Solution level or the Project level.  Let's start with a solution:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new sln -o PaketTest1
cd PaketTest1
dotnet new console -o App1 -lang 'F#'
dotnet sln add App1/App1.fsproj
paket init 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;code&gt;paket init&lt;/code&gt; creates a &lt;code&gt;paket.dependencies&lt;/code&gt; file (which you should add to your git repo).  After initialization, the first thing you must do is open &lt;code&gt;paket.dependencies&lt;/code&gt; and fix the &lt;code&gt;framework&lt;/code&gt; line to point to the correct version, if necessary. For example, with Paket 6.2.1, the &lt;code&gt;init&lt;/code&gt; command creates the following:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source https://api.nuget.org/v3/index.json

storage: none
framework: net5.0, netstandard2.0, netstandard2.1 # WRONG! 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You need to change the framework line to &lt;code&gt;net6.0&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source https://api.nuget.org/v3/index.json

storage: none
framework: net6.0 # CORRECTED
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I have no idea why Paket does not specify the correct framework by default.  It might be that Paket is not updated for .NET 6.0 at the time of writing, though I had similar problems during .NET 5.0.&lt;/p&gt;

&lt;p&gt;After fixing the dependencies file, you must install the &lt;code&gt;FSharp.Core&lt;/code&gt;, which includes the standard libraries for F#: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;paket add FSharp.Core
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;code&gt;FSharp.Core&lt;/code&gt; is not installed by default because Paket can be used for C# applications as well.  You can install any other NuGet package with the &lt;code&gt;add&lt;/code&gt; subcommand, shown below with an optional version number:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;paket add Suave --version 2.5.6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;After installing these packages, the &lt;code&gt;paket.dependencies&lt;/code&gt; file will look like:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source https://api.nuget.org/v3/index.json

storage: none
framework: net6.0
nuget FSharp.Core
nuget Suave 2.5.6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can edit this file directly, but make sure to run &lt;code&gt;paket update&lt;/code&gt; to tell Paket of your changes. You will also notice a few new files: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;paket.lock&lt;/code&gt; contains the dependency tree as discussed earlier. &lt;/li&gt;
&lt;li&gt;Within Projects will be a new &lt;code&gt;paket.references&lt;/code&gt; file.  This is a simple text file containing a list of packages used by that project. If you change this file, you will need to run &lt;code&gt;paket update&lt;/code&gt; to propagate the changes to your .fsproj file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Paket directly in Projects&lt;/strong&gt;. Paket can also be initialized in a bare Project, without a solution:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new console -o PaketTest2 -lang 'F#'
cd PaketTest2
paket init
### FIX paket.dependencies as described above
paket add FSharp.Core
paket add Suave
dotnet run 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In this case, the dependencies, lock, and reference files will all be created in the same directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fsi-f-interactive"&gt;
  &lt;/a&gt;
  &lt;a&gt;FSI - F# Interactive &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;F# comes with a REPL called FSI or F# interactive, which can be launched with &lt;code&gt;dotnet fsi&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ dotnet fsi                                                                             

Microsoft (R) F# Interactive version 12.0.0.0 for F# 6.0
Copyright (c) Microsoft Corporation. All Rights Reserved.

For help type #help;;

&amp;gt; printfn "Hello, %s" "World";;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/tools/fsharp-interactive/"&gt;Official Doc&lt;/a&gt; is adequate so I won't go into too much more.&lt;/p&gt;

&lt;p&gt;A couple things to know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;F# scripts should have the &lt;code&gt;fsx&lt;/code&gt; file extension.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;#load "file.fsx"&lt;/code&gt; syntax allows you to load other fsx files.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;#r "..."&lt;/code&gt; syntax allows you to load packages.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;;;&lt;/code&gt; is used to terminate statements, or groups of statements. &lt;/li&gt;
&lt;li&gt;You can use the shebang &lt;code&gt;#!/usr/bin/env -S dotnet fsi&lt;/code&gt; and run it like any other script on your system.&lt;/li&gt;
&lt;li&gt;Ctrl-D quits the REPL.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#using-nuget-with-fsi"&gt;
  &lt;/a&gt;
  Using NuGet with FSI
&lt;/h5&gt;

&lt;p&gt;NuGet packages can be loaded during an FSI session like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#r "nuget: Suave";;

// and then use it as usual:
open Suave;; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h5&gt;
  &lt;a href="#using-paket-with-fsi"&gt;
  &lt;/a&gt;
  Using Paket with FSI
&lt;/h5&gt;

&lt;p&gt;For the same reason you may want to use Paket in regular F# code (for example, version consistency across multiple scripts), you may want to use it within FSX scripts.  To be honest, this was not easy to figure out on Linux, and in fact, my problems with getting Paket working on Linux is what prompted me to write this entire article.&lt;/p&gt;

&lt;p&gt;First, you need to get the package &lt;code&gt;FSharp.DependencyManager.Paket&lt;/code&gt; onto your system.  The easiest way to do that is in FSI:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#r "nuget: FSharp.DependencyManager.Paket";;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, there will be a cached copy of the package in the &lt;code&gt;~/.nuget/packages&lt;/code&gt; directory.  We need to pass this to the &lt;code&gt;--compilertool&lt;/code&gt; option of fsi (you will need to adjust it for your unix username and version of paket):&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet fsi --compilertool:"/home/YOURUSERNAME/.nuget/packages/fsharp.dependencymanager.paket/6.2.1/lib/netstandard2.0"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I recommend having an alias like below, and updating it whenever you update paket:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias fsi='dotnet fsi --compilertool:"/home/YOURUSERNAME/.nuget/packages/fsharp.dependencymanager.paket/6.2.1/lib/netstandard2.0"'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, if you run FSI within a Solution or Project, you will be able to load the package according to the versions in &lt;code&gt;paket.lock&lt;/code&gt;, assuring version consistency between multiple Projects and FSX scripts:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#r "paket: nuget Suave";; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; - There is an bug that prevents multiple users on your machine from loading NuGet and Paket packages in this way.&lt;br&gt;
The cause of this bug is that the packages are stored in &lt;code&gt;/tmp/nuget&lt;/code&gt; and &lt;code&gt;/tmp/script-packages&lt;/code&gt; with the permission 775, preventing other users (not in the same group) from creating new subdirectories.  To workaround this, simply remove these directories (or maybe permission them correctly) if switching users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#standalone-executables"&gt;
  &lt;/a&gt;
  &lt;a&gt;Standalone Executables&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;F# applications can be compiled into standalone, self-contained binaries.  They can be distributed just like statically compiled applications written in C, Rust, or Go.  Of course, these binaries will tend to be large because they include the .NET runtime (a Hello World application comes in at around 65M).  This may be a consideration if the target environment is constrained (maybe an embedded device) or if you want to create dozens of of individual applications. &lt;/p&gt;

&lt;p&gt;In order to build self-contained applications, add the lines highlighted below: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Project Sdk="Microsoft.NET.Sdk"&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net5.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;!-- FROM HERE.... --&amp;gt;
    &amp;lt;PublishSingleFile&amp;gt;true&amp;lt;/PublishSingleFile&amp;gt;
    &amp;lt;SelfContained&amp;gt;true&amp;lt;/SelfContained&amp;gt;
    &amp;lt;RuntimeIdentifier&amp;gt;linux-x64&amp;lt;/RuntimeIdentifier&amp;gt;
    &amp;lt;PublishReadyToRun&amp;gt;true&amp;lt;/PublishReadyToRun&amp;gt;
    &amp;lt;!-- TO HERE --&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And then run:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Your binary will be available in &lt;code&gt;bin/Debug/net5.0/linux-x64/publish/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more information, see &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/deploying/single-file#publish-a-single-file-app---sample-project-file"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#templates"&gt;
  &lt;/a&gt;
  &lt;a&gt;Templates&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;dotnet&lt;/code&gt; CLI tool uses Templates to initialize new projects and other components.  They are akin to various project scafolding systems like &lt;code&gt;create-react-app&lt;/code&gt; for React.&lt;/p&gt;

&lt;p&gt;To see a list of templates installed on your machine, run &lt;code&gt;dotnet new --list&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Template Name                                 Short Name           Language    Tags                                               
--------------------------------------------  -------------------  ----------  ---------------------------------------------------
Console Application                           console              [C#],F#,VB  Common/Console                                     
Class library                                 classlib             [C#],F#,VB  Common/Library                                     
Gtk Application                               gtkapp               [C#]        Gtk/GUI App                                        
Gtk Dialog                                    gtkdialog            [C#]        Gtk/UI                                             
Gtk Widget                                    gtkwidget            [C#]        Gtk/UI                                             
Gtk Window                                    gtkwindow            [C#]        Gtk/UI                                             
MSTest Test Project                           mstest               [C#],F#,VB  Test/MSTest                                        
NUnit 3 Test Item                             nunit-test           [C#],F#,VB  Test/NUnit                                         
NUnit 3 Test Project                          nunit                [C#],F#,VB  Test/NUnit                                         
xUnit Test Project                            xunit                [C#],F#,VB  Test/xUnit                                         
MVC ViewImports                               viewimports          [C#]        Web/ASP.NET                                        
Razor Component                               razorcomponent       [C#]        Web/ASP.NET                                        
MVC ViewStart                                 viewstart            [C#]        Web/ASP.NET                                        
Razor Page                                    page                 [C#]        Web/ASP.NET                                        
Blazor Server App                             blazorserver         [C#]        Web/Blazor                                         
Blazor WebAssembly App                        blazorwasm           [C#]        Web/Blazor/WebAssembly                             
ASP.NET Core Empty                            web                  [C#],F#     Web/Empty                                          
ASP.NET Core Web App (Model-View-Controller)  mvc                  [C#],F#     Web/MVC                                            
ASP.NET Core Web App                          webapp               [C#]        Web/MVC/Razor Pages                                
Razor Class Library                           razorclasslib        [C#]        Web/Razor/Library                                  
... and a whole lot more
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The "Short Name" is what you pass to &lt;code&gt;dotnet new&lt;/code&gt;. The Language column specifies the default language of the template and the availability of other languages.  To create a Class Library, therefore, you would need to run &lt;code&gt;dotnet new classlib --lang 'F#' -o MyClassLib&lt;/code&gt;, because otherwise it would default to C#.&lt;/p&gt;

&lt;p&gt;Also note that most of the templates that come default are for C# only.  That's ok, since the core use cases (&lt;code&gt;console&lt;/code&gt;, &lt;code&gt;classlib&lt;/code&gt;, and testing) are covered, and the F# community has developed templates for &lt;a href="https://github.com/dotnet/templating/wiki/Available-templates-for-dotnet-new#f-templates"&gt;other use cases&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In order to install, say, the Expecto testing framework template, you would run:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new -i "Expecto.Template::*"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The template list (&lt;code&gt;dotnet new --list&lt;/code&gt;) will show you that the Short Name for this template is unsurprisingly 'expecto', so you would run something like the following to create your testing project:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new expecto -o AwesomeTestProj
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that you do not need to specify &lt;code&gt;--lang 'F#'&lt;/code&gt; here because it F# is the default (and only) language for this template.&lt;/p&gt;

&lt;p&gt;When you install a template using &lt;code&gt;--install&lt;/code&gt;, they are installed in &lt;code&gt;~/.templateengine&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Under the hood, Templates are just specially tagged NuGet packages.  To find out the underlying package for a Template, run &lt;code&gt;dotnet new -u&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  &lt;a&gt;Git&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The following lines may be useful in your .gitignore:&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Dd]ebug/&lt;br&gt;
[Rr]elease/&lt;br&gt;
x64/&lt;br&gt;
[Bb]in/&lt;br&gt;
[Oo]bj/&lt;br&gt;
.paket/&lt;br&gt;
paket-files/&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#vim"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  &lt;a&gt;Vim&lt;/a&gt;&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;If you are a Vim/NeoVim user, you will be happy to know that F# support is surprisingly good.  With the help of the F# Language Server plugin &lt;a href="https://github.com/ionide/Ionide-vim"&gt;Ionide-Vim&lt;/a&gt;, you can get access to contextual code completion (called 'Intellisense' in Visual Studios), diagnostics, and much more. &lt;/p&gt;

&lt;p&gt;On NeoVim, the built-in LSP client works without modification.  On Vim, you will need &lt;a href="https://github.com/autozimu/LanguageClient-neovim"&gt;LanguageClient-neovim&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  &lt;a&gt;Visual Studio Code&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Visual Studio Code, unsurprisingly, has excellent support for F# through &lt;a href="https://ionide.io/Editors/Code/getting_started.html"&gt;Ionide&lt;/a&gt;.  Simply &lt;code&gt;Ctrl-Shift-X&lt;/code&gt; to the extension management screen to install.&lt;/p&gt;

&lt;p&gt;You can also impress the kids by using FSI through a "Notebook" interface with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode"&gt;.NET Interactive Notebooks&lt;/a&gt; extension.  After installation, press &lt;code&gt;Ctrl-Shift-P&lt;/code&gt; and select ".NET Interface: Create new blank notebook", choose "Create as &lt;code&gt;.ipynb&lt;/code&gt;" then "F#". &lt;/p&gt;

&lt;p&gt;&lt;em&gt;TODO: Figure out how to get VS Code to recognize Paket&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gui-development"&gt;
  &lt;/a&gt;
  &lt;a&gt;GUI Development&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Your only real choice for GUI development with F#/.NET on Linux is &lt;a href="https://github.com/GtkSharp/GtkSharp"&gt;GTK#&lt;/a&gt;.  (&lt;em&gt;I've gotten feedback on Twitter that this statement may be a bit harsh, will update when I dive a bit deeper into other options&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Despite investing heavily in Open Source for the .NET itself, Microsoft has never seriously supported GUI development on Linux.  You &lt;em&gt;could&lt;/em&gt; run old WinForm applications using Mono, and there are some efforts to run UWP applications on Linux.  However, development tools for libraries are largely these tied to Visual Studios and Windows.&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>dotnet</category>
      <category>linux</category>
    </item>
    <item>
      <title>I'm doing 90% maintenance and 10% development, is this normal?</title>
      <author>Fa'rath Shba üöÄ</author>
      <pubDate>Tue, 18 Jan 2022 01:45:02 +0000</pubDate>
      <link>https://dev.to/farathshba/im-doing-90-maintenance-and-10-development-is-this-normal-1foe</link>
      <guid>https://dev.to/farathshba/im-doing-90-maintenance-and-10-development-is-this-normal-1foe</guid>
      <description>&lt;p&gt;During one of my internships I found I spent a lot of time doing bug fixes. You have to realize that as an entry level employee you aren't going to get the sexiest work, you're going to get the grunt work no one else wants. It's unfortunate, but it's how it is at every job.&lt;/p&gt;

&lt;p&gt;Additionally, you have to realize that to a company, having code that works is more important than having code that is clean. From your company's perspective, you changing the existing structure is money wasted on redoing something that is already done and potentially introducing even more errors. Usually these types of companies aren't computer/software companies so no sufficiently high manager has the technical background to know that sometimes you need to do these major overhauls. That said, if your company is run by technically competent people and they understand the value of good code, you may get more leeway, although sometimes you need to choose your battles (the main purpose of a business is still to make money, after all).&lt;/p&gt;

&lt;p&gt;That said, you are not unreasonable in wanting to be able to leave your mark on the software and wanting more meaningful work. It is also unfortunate that you have to deal with so many projects at once while fielding requests from so many different managers.&lt;/p&gt;

&lt;p&gt;As a programmer, it is a fact of life that you will spend more time maintaining and modifying other people's code than you will writing your own from scratch. If this is a problem for you then perhaps you should stick to developing as a hobby and pursue a different career. If you are OK with maintaining code, but you feel you are not being used effectively or are being overwhelmed, then that is a matter you need to discuss with your manager. If your problems are more serious than that or if you feel like your managers don't know how to effectively manage your skill set then it would be a good idea to consider finding a position at a different company. Given your stated low salary, this is probably your best course of action.&lt;/p&gt;

</description>
      <category>development</category>
      <category>maintenance</category>
      <category>coding</category>
    </item>
    <item>
      <title>Getting Started in Web Dev</title>
      <author>The Jared Wilcurt</author>
      <pubDate>Tue, 18 Jan 2022 01:33:03 +0000</pubDate>
      <link>https://dev.to/thejaredwilcurt/getting-started-in-web-dev-2med</link>
      <guid>https://dev.to/thejaredwilcurt/getting-started-in-web-dev-2med</guid>
      <description>&lt;p&gt;These are the top items to look in to if you are interested in getting started in Web Development (mostly front-end).&lt;/p&gt;

&lt;p&gt;This page is meant to be a resource of the &lt;strong&gt;most common&lt;/strong&gt; things I end up linking to people as they are learning web dev. It should be short so it doesn't overwhelm people.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mandatory-knowledge"&gt;
  &lt;/a&gt;
  Mandatory Knowledge
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=EqzUcMzfV1w"&gt;2022 Web Dev Getting Started/Career Guide Video&lt;/a&gt;&lt;/strong&gt; - MANDATORY WATCHING&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://marksheet.io"&gt;MarkSheet&lt;/a&gt;&lt;/strong&gt; - HTML/CSS/Sass&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://JSFiddle.net"&gt;JSFiddle&lt;/a&gt;&lt;/strong&gt; - Use this when you are having trouble getting code to work and need help from someone&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://CodePen.io"&gt;CodePen&lt;/a&gt;&lt;/strong&gt; - Create an account. Use this for stuff you want to keep track of, or to search for existing examples.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://freecodecamp.com"&gt;Free Code Camp&lt;/a&gt;&lt;/strong&gt; - Bootstrap, JS, and more&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://caniuse.com"&gt;Can I Use&lt;/a&gt;&lt;/strong&gt; - Tells you what browser support specific web features have.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developers.google.com/web/tools/chrome-devtools"&gt;Learn Chrome Dev Tools&lt;/a&gt;&lt;/strong&gt; - Basically the same for other browsers as well.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://www.vikingcodeschool.com/posts/why-learning-to-code-is-so-damn-hard"&gt;Why learning to code is so damn hard&lt;/a&gt;&lt;/strong&gt; - important write up&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#javascript-books"&gt;
  &lt;/a&gt;
  JavaScript Books
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript: The Good Parts&lt;/strong&gt; - Book. Pay for it on Amazon, pirate it, or just get it from your local library.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You Don't Know JS&lt;/a&gt;&lt;/strong&gt; - Free online book&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://eloquentjavascript.net"&gt;Eloquent JavaScript&lt;/a&gt;&lt;/strong&gt; - Free online book&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://exploringjs.com"&gt;ExploringJS&lt;/a&gt;&lt;/strong&gt; - Several free online books that stick close to the ES spec&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://javascript.info"&gt;JavaScript.info&lt;/a&gt;&lt;/strong&gt; - Online JS resource, little easier to read than MDN&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-vuejs"&gt;
  &lt;/a&gt;
  Getting Started with Vue.js
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;a href="https://jsfiddle.net/mnc0ekyw/"&gt;JSFiddle.net&lt;/a&gt;, then follow the official &lt;a href="https://vuejs.org/v2/guide"&gt;Getting Started&lt;/a&gt; guide.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.vuemastery.com"&gt;Vue Mastery&lt;/a&gt; (Intro to Vue is free, advanced classes are not, but they have free weekends occasionally you can look out for)&lt;/li&gt;
&lt;li&gt;Anything from Maximilian Schwarzm√ºller is good:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=nyJSd6V2DRI&amp;amp;list=PL55RiY5tL51p-YU-Uw90qQH419BM4Iz07"&gt;Vue.js - Getting Started&lt;/a&gt; (Free)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=2CSr2vBApSI&amp;amp;list=PL55RiY5tL51pT0DNJraU93FhMzhXxtDAo"&gt;Vue.js &amp;amp; Vuex (Basics)&lt;/a&gt; (Free)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/vuejs-2-the-complete-guide/?couponCode=YOUTUBE_2"&gt;Udemy Course: Vue + Router + Vuex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sarah Drasner is one of the core members of the Vue team, she has a decent course on &lt;a href="https://frontendmasters.com/courses/vue"&gt;Intro to Vue&lt;/a&gt;, and is an expert in web animation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codesandbox.io/s/vue"&gt;CodeSandbox.io/s/vue&lt;/a&gt; - Like JSFiddle but for large webpack based projects.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#css-fun-time"&gt;
  &lt;/a&gt;
  CSS Fun Time
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://marksheet.io"&gt;MarkSheet&lt;/a&gt;&lt;/strong&gt; - HTML/CSS/Sass&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://www.jqueryuk.com/2015/videos/mdo-ular-css"&gt;CSS Fundementals&lt;/a&gt;&lt;/strong&gt; - Conference Talk from Bootstrap creator&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://www.dontfeartheinternet.com"&gt;CSS Layout Basics&lt;/a&gt;&lt;/strong&gt; - CSS Tutorial&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://flukeout.github.io"&gt;CSS Sushi&lt;/a&gt;&lt;/strong&gt; - CSS Selector game&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://flexboxgame.com"&gt;Flexbox Game&lt;/a&gt;&lt;/strong&gt; - Interactive CSS Flexbox Tutorial&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://flexboxfroggy.com"&gt;Flexbox Froggies&lt;/a&gt;&lt;/strong&gt; - CSS Flexbox Game&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://www.flexboxdefense.com"&gt;Flexbox Tower Defence&lt;/a&gt;&lt;/strong&gt; - CSS Flexbox Game&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://cssgridgarden.com"&gt;CSS Grid Garden&lt;/a&gt;&lt;/strong&gt; - CSS Grids Game&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://gridbyexample.com/video"&gt;Grid By Example&lt;/a&gt;&lt;/strong&gt; - CSS Grids Video Tutorials&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://wtfhtmlcss.com"&gt;WTF HTML &amp;amp; CSS&lt;/a&gt;&lt;/strong&gt; - Common issues people run into with HTML/CSS and their solutions&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;strong&gt;Photo credit:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unsplash.com/photos/l2ioLM9iOuY"&gt;Rocket - Maciej Ruminkiewicz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>css</category>
      <category>resources</category>
    </item>
    <item>
      <title>How Satellite-X Increases Developer Productivity</title>
      <author>Adrian Jones</author>
      <pubDate>Tue, 18 Jan 2022 01:07:13 +0000</pubDate>
      <link>https://dev.to/canuckaholic/how-satellite-x-increases-developer-productivity-1i8j</link>
      <guid>https://dev.to/canuckaholic/how-satellite-x-increases-developer-productivity-1i8j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#welcome-to-satellitex"&gt;
  &lt;/a&gt;
  WELCOME TO SATELLITE-X
&lt;/h1&gt;

&lt;p&gt;Satellite-X is a private company that offers consumers personal satellites. The purchase of a personal, private satellite includes launching it into a stable low-earth orbit, and a 5 year guarantee for it to remain in orbit and functional. Satellite-X is popular with the super rich who never want to be without the internet, and who like to scan the planet for places to build their next mansion.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e8lCUSit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pgyt5ffkppglomvl51l.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e8lCUSit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pgyt5ffkppglomvl51l.jpeg" alt="Image description" width="700" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-satellites"&gt;
  &lt;/a&gt;
  Personal Satellites?!?
&lt;/h2&gt;

&lt;p&gt;Okay, so in case you haven't guessed it already, Satellite-X is a fictional company. I happen to work for a very non-fictional company though called &lt;a href="https://codezero.io/"&gt;CodeZero&lt;/a&gt;, and we make a developer platform for Kubernetes, which includes a CLI tool and an installable desktop application. In our experience our platform can lead to a 10x increase in developer productivity. One of our challenges has been, however, explaining to people - technical and non-technical alike - just how this boost in productivity is achieved.&lt;/p&gt;

&lt;p&gt;I had the idea of using a mock company to illustrate how using CodeZero during a typical product development life cycle can greatly shorten the developer feedback loop and lead to a significant increase in velocity. Let me know if this invented company and use cases works for you as a way to communicate some pretty technical concepts. I'd love to get your feedback.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h2&gt;

&lt;p&gt;I came up with two use cases to explore the workflow for both a front-end and a back-end developer. One developer will solve their problem using CodeZero‚Äôs &lt;a href="https://codezero.io/platform/teleport"&gt;teleport&lt;/a&gt; tool, which allows you to test local code that relies on calling services running in a Kubernetes cluster. The other developer will solve their problem using CodeZero‚Äôs &lt;a href="https://codezero.io/platform/intercept"&gt;intercept&lt;/a&gt; tool, which allows you to route remote in-cluster traffic to a service running locally.&lt;/p&gt;

&lt;p&gt;Let's meet the developers:&lt;/p&gt;

&lt;p&gt;Samantha, or Sam, is a front-end developer at Satellite-X. She works on the company‚Äôs web application, called SatelliteVision, that consumers use to control and manage their satellites. With the app, users can tell a satellite camera to point at specific coordinates and take pictures, turn on and off their internet broadcast, and send messages into space for any listening aliens.&lt;/p&gt;

&lt;p&gt;Roger is a back-end developer at Satellite-X. He works on the company‚Äôs proprietary satellite navigation system that is responsible for keeping satellites in orbit, at least until the end of their warranty period, and making sure all the personal satellites don‚Äôt crash into each other (or other company satellites, or space trash).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  ARCHITECTURE
&lt;/h1&gt;

&lt;p&gt;Satellite-X recognizes that security is paramount to its clientele, and so every satellite includes its own on-board infrastructure consisting of a high availability Kubernetes cluster. Satellite-X also has a robust microservice architecture running in the cloud (on earth) that coordinates with all of the satellites and runs the SatelliteVision app.&lt;/p&gt;

&lt;p&gt;The details of the infrastructure are as follows:&lt;/p&gt;

&lt;p&gt;TerraFirma Application: The earth-bound software application consists of the SatelliteVision web app and a number of back-end microservices, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An API service to handle requests from the SatelliteVision app.&lt;/li&gt;
&lt;li&gt;A service to interface with the satellites in orbit.&lt;/li&gt;
&lt;li&gt;A security service. The security software came bundled with the motherboards used in each satellite. The software‚Äôs documentation is in Russian, but it works flawlessly so it continues to be used, although no developer wants to touch it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Satellite Application: Every satellite runs its own microservice architecture. Notable services include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A sensor service.&lt;/li&gt;
&lt;li&gt;A navigation service that makes decisions on the trajectory of the satellite.&lt;/li&gt;
&lt;li&gt;A thruster engine service that controls the satellite‚Äôs speed and direction.&lt;/li&gt;
&lt;li&gt;A service to talk to the TerraFirma application and receive software updates.&lt;/li&gt;
&lt;li&gt;A security service. The satellite part of the Russian-made software.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTJCVCOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7pctyf65l6p7hv0dzog.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTJCVCOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7pctyf65l6p7hv0dzog.jpeg" alt="Image description" width="700" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#frontend-use-case"&gt;
  &lt;/a&gt;
  FRONT-END USE CASE
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;A new version of the SatelliteVision app was released recently, and it was quickly discovered that it shipped with a severe bug: When a customer using SatelliteVision instructed one of their satellites to take a picture, the app was instead sending a request to the API to delete the last picture it took. Customer complaints were piling in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1z-WQHhY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0aajkga1y0rzyp3f95mz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1z-WQHhY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0aajkga1y0rzyp3f95mz.jpeg" alt="Image description" width="700" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  The Setup
&lt;/h2&gt;

&lt;p&gt;Sam is assigned the task of fixing the bug as soon as possible. She checks out the main production branch from Git for the SatelliteVision application, and gets ready to fix the code. Running the web app‚Äôs front-end code locally in a browser is straightforward, it‚Äôs just HTML, CSS, and JavaScript, but it needs to talk to a fully functional back-end to work. Before CodeZero, Sam had to run mock services locally for all the required back-end services, and tell her locally running front-end code to talk to them. All the services are in Docker containers, so it wasn‚Äôt the end of the world, but there was always some back-end service that failed to start for some reason, and the security service was infamous for being especially finicky.&lt;/p&gt;

&lt;p&gt;Today, though, Sam has the CodeZero &lt;a href="https://codezero.io/platform/desktop"&gt;Desktop&lt;/a&gt; application installed on her machine. And she has a development profile ready to go for teleporting into the Kubernetes namespace that is running the production TerraFirma application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;The CodeZero Desktop app is already running on her machine (she rarely closes it), so she clicks on the tray icon to open the dropdown menu. She hovers over the Configuration menu option to make sure she is pointing to the correct cluster, but she notices that she is in the wrong workspace. Using the tray menu she quickly switches to the SatelliteVision workspace, and then selects the ‚Äúfront-end-dev-teleport‚Äù option from the available development profiles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--chA75J2Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/logj55pmviu34gbzfulr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--chA75J2Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/logj55pmviu34gbzfulr.jpeg" alt="Image description" width="700" height="227"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sam opens up the Desktop dashboard UI and sees her teleport session starting up. Once the UI updates to show the teleport session running as expected, she opens up her terminal application and runs the yarn command to start up the web app‚Äôs front-end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vjUf9p70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prjb9440jhet9q5hv0pz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vjUf9p70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prjb9440jhet9q5hv0pz.jpeg" alt="Image description" width="700" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Debugging locally in her browser, she discovers that someone mistakenly changed the ‚Äútake picture‚Äù button‚Äôs action to send a DELETE request to the API instead of a POST. She fixes the behavior and then tests it. Since she is teleported into the production cluster, any actions she takes in the locally running web interface will apply to live systems, but this is what she wants ‚Äî Sam wants to ensure her changes will work once deployed. She wants to know this fix will work on real satellites. She double checks that she is logged into Satellite-X‚Äôs test account, selects a satellite, and directs it to take a picture of the Himalayas.&lt;/p&gt;

&lt;p&gt;Nothing happens.&lt;/p&gt;

&lt;p&gt;At least the last picture taken with this satellite wasn‚Äôt deleted, but a new picture wasn‚Äôt taken. Sam goes back to the JavaScript that runs when the button is clicked and finds the error: a missing await on an asynchronous call. This bug might not have resulted in an error if she was running the back-end code locally, but with the latency inherent in communicating with an orbiting satellite, it certainly manifested in Sam‚Äôs test. She fixes the code and tests again.&lt;/p&gt;

&lt;p&gt;Success! On her screen she sees a high-res satellite image of the Everest base camp.&lt;/p&gt;

&lt;p&gt;As a final step, Sam commits her code and creates a pull request to the main branch. Once merged it will trigger their CI/CD pipeline to automatically deploy. All in, Sam‚Äôs turnaround to identify the bug, fix it, test it, and deploy the fix to production: 15 minutes. This would have taken significantly longer without CodeZero.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend-use-case"&gt;
  &lt;/a&gt;
  BACK-END USE CASE
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;When the satellite navigation system software was originally written, its collision detection algorithm was set to monitor for objects of a certain size. Objects under the specified size were not considered a threat to damaging the satellite, and objects meeting or exceeding the specified size would trigger evasive maneuvers. Recently, some bit of space debris from an old exploded satellite collided with one of Satellite-X‚Äôs satellites and damaged one of its solar panels, and it is believed that the object was smaller than the current threshold.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  The Setup
&lt;/h3&gt;

&lt;p&gt;Roger is assigned the task of updating the navigation system microservice to look for and avoid smaller objects. The code change is trivial ‚Äî it‚Äôs just some simple math ‚Äî but it needs to be tested in an environment that is as close to production as possible. Roger learned early on in his time at Satellite-X that code running successfully in a satellite simulator on earth is not the same as code running on a real satellite in space.&lt;/p&gt;

&lt;p&gt;Before CodeZero, Roger had limited options for replicating a satellite‚Äôs deployment environment. So a typical development cycle would consist of develop &amp;amp; test in simulator -&amp;gt; deploy to satellite -&amp;gt; test -&amp;gt; repeat if unsuccessful. A deployment to a live satellite takes about 40 minutes, so if the feedback loop had to be repeated a number of times, it could easily take Roger all day to get out a small change.&lt;/p&gt;

&lt;p&gt;Now Roger has the CodeZero CLI installed on his workstation. With this tool he can reduce the feedback loop significantly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h3&gt;

&lt;p&gt;The collision detection system is fairly straightforward. Sensors on the satellite continuously scan the surrounding space for objects within 500km or closer. When an object is detected the sensor service passes on the telemetry data to the navigation service, which calculates the object‚Äôs trajectory, size, and speed. Objects of a certain size on a collision trajectory cause the navigation service to tell the thruster engine service to initiate an evasive maneuver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V_om3qNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3bd36u7e5tawcxrp6c1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V_om3qNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3bd36u7e5tawcxrp6c1.jpeg" alt="Image description" width="700" height="170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing Roger does is log into the company‚Äôs intranet and download the kubeconfig file for a cluster running on one of their test satellites. He then launches his terminal application and sets his Kubernetes context to this cluster. Next Roger grabs the latest code for the navigation microservice and gets it running locally.&lt;/p&gt;

&lt;p&gt;Roger wants to direct all communications coming from the sensor service on the satellite to the navigation service he‚Äôs running locally. He runs a CodeZero CLI command to intercept all traffic destined for the navigation service. He sees the telemetry data from the in-cluster sensor service begin streaming to his service running locally, and this local service in turn communicating back up to the thruster engine service running in-cluster on the satellite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bqJbrLfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjnw6mjt814twb16ucae.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bqJbrLfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjnw6mjt814twb16ucae.jpeg" alt="Image description" width="700" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Roger switches to his IDE, makes some small changes to the navigation service‚Äôs collision detection algorithm to look for smaller objects, and moves on to testing. He could wait for objects to inadvertently get in the way of his satellite, but luckily the satellite is equipped with a program for rendering debris in front of the cameras to accommodate what Roger needs to test. He launches the program and objects of various sizes start appearing in front of the satellite‚Äôs cameras.&lt;br&gt;
The sensor service on the satellite does its job, scanning the objects that appear, but because of Roger‚Äôs intercept, it sends its data to his locally running navigation service instead of the service running in-cluster. An object appears in line with the satellite that used to be under the size threshold.&lt;/p&gt;

&lt;p&gt;The satellite doesn‚Äôt change course. And according to the data it should have triggered an evasive maneuver. Test failed.&lt;br&gt;
Over the course of the next 30 minutes Roger tweaks the collision detection algorithm repeatedly, testing after each change, until he finally nails it. What he thought was simple math turned out to be not that simple when running in a real-world scenario.&lt;/p&gt;

&lt;p&gt;Satisfied with the new code, Roger closes the intercept session, commits his code, and creates a pull request. Once merged a new deployment will be triggered to this satellite‚Äôs cluster including the updated navigation microservice. Eventually this update will get pushed out to all the company‚Äôs satellites.&lt;/p&gt;

&lt;p&gt;All in, Roger‚Äôs time to develop, test, and finally deploy the change to the satellite: 1.5 hours. If he had had to deploy the code changes to the satellite‚Äôs cluster each time before testing (each time being a 40 minute operation), this exercise would have taken Roger all day.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h1&gt;

&lt;p&gt;What do you think? My hope is that the front-end and back-end developer use cases demonstrate some scenarios under which CodeZero can really save developers a lot of time and frustration. Even though I described fictional scenarios, my hope is that you can identify some comparable workflows in your own development feedback loop, and now have some clear insight into just how powerful CodeZero‚Äôs tools can be. By removing the deploy step from each iteration, the productivity gains can be tremendous. Especially if you are deploying your code into outer space. ;-)&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>developers</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Automating Godot game releases to itch.io</title>
      <author>Jeremy Kahn</author>
      <pubDate>Tue, 18 Jan 2022 00:21:13 +0000</pubDate>
      <link>https://dev.to/jeremyckahn/automating-godot-game-releases-to-itchio-1a96</link>
      <guid>https://dev.to/jeremyckahn/automating-godot-game-releases-to-itchio-1a96</guid>
      <description>&lt;p&gt;If you're a game developer, you most likely want to spend your time actually designing and developing your game. Unfortunately, a lot of time goes into not-so-interesting manual administrative tasks. One of those tasks is publishing new builds. What if this work could be completely automated away and happen as you work on your game, in the background? With workflow automation tools like &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;, this is not only possible, but free to use and easy to achieve!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-goal"&gt;
  &lt;/a&gt;
  The goal
&lt;/h2&gt;

&lt;p&gt;Me and my friend &lt;a href="https://github.com/lstebner"&gt;Luke&lt;/a&gt; are building &lt;a href="https://rainbowcow-studio.itch.io/farmhand-go"&gt;Farmhand Go!&lt;/a&gt;, a Godot game that's based around making in-game money by growing and harvesting crops with timed actions. What we wanted was for every merge to the &lt;code&gt;main&lt;/code&gt; Git branch to initiate a release to &lt;a href="https://rainbowcow-studio.itch.io/farmhand-go"&gt;https://rainbowcow-studio.itch.io/farmhand-go&lt;/a&gt;, where the game lives and can be played. We also wanted our Discord channel to be automatically notified of the new release as soon as it's available.&lt;/p&gt;

&lt;p&gt;With a little elbow grease, we came up with this GitHub Action that does all of this for us:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The rest of this article will discuss how we got this set up, and how you can have something similar for your Godot games!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;In order to set up this automation, you will need your GitHub repo and itch.io page already published. If you want the optional Discord notification functionality, you will need to have your server and relevant channel set up as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-it-up"&gt;
  &lt;/a&gt;
  Setting it up
&lt;/h2&gt;

&lt;p&gt;In the Git repo, your Godot project needs to have an &lt;code&gt;export_presets.cfg&lt;/code&gt; file at its root. In Farmhand Go!, the actual Godot project is at &lt;code&gt;./project&lt;/code&gt; rather than the repo root, but your setup may vary. Be sure that &lt;code&gt;export_presets.cfg&lt;/code&gt; is not in your &lt;code&gt;.gitignore&lt;/code&gt; (&lt;a href="https://github.com/godotengine/godot-demo-projects/issues/329"&gt;it is by default&lt;/a&gt;), or that it is &lt;a href="https://github.com/godotengine/godot-demo-projects/issues/329#issuecomment-763625011"&gt;at least present for when the actual Godot export occurs&lt;/a&gt;. This is what our committed &lt;code&gt;export_presets.cfg&lt;/code&gt; looks like:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once that's set up, you'll need your modified version of the YAML file from above. Here's a more generic version you can use: &lt;a href="https://gist.github.com/jeremyckahn/ff4f0e409f089ec36bdecb5a5adb6819"&gt;https://gist.github.com/jeremyckahn/ff4f0e409f089ec36bdecb5a5adb6819&lt;/a&gt;. You'll just need to replace the following stubbed values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NAME-OF-YOUR-GAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NAME-OF-YOUR-USER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These occur in a few places in this file, so I recommend using your editor's Find and Replace feature and carefully reviewing the changes. Move this file to your repo's &lt;code&gt;.github/workflows/&lt;/code&gt; directory, and name it whatever you'd like. For Farmhand Go!, it's &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As written, this automation will run whenever a commit is pushed, either directly or via Pull Request merge, to the &lt;code&gt;main&lt;/code&gt; branch. If you want to use a different branch for this automation, change the &lt;code&gt;branches&lt;/code&gt; value towards the top of the file.&lt;/p&gt;

&lt;p&gt;Once that's in place, you will need an API key for itch.io and optionally a webhook URL for Discord. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-itchio-api-key"&gt;
  &lt;/a&gt;
  The itch.io API key
&lt;/h3&gt;

&lt;p&gt;To create your itch.io API key, go to your settings in itch.io:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRY0f8Um--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh92k0lqgxc9l2nk8mih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRY0f8Um--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh92k0lqgxc9l2nk8mih.png" alt="Itch.io API key creation step 1" width="880" height="1267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, in the left-hand nav, go to "API keys"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mDJ2lHLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txcgrcu3jdvqlelc28x5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDJ2lHLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txcgrcu3jdvqlelc28x5.png" alt="Itch.io API key creation step 2" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Input your password, and then click "Generate new API key." You should now have a screen that looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uE5JwHGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x68qg21274s814t5mam8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uE5JwHGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x68qg21274s814t5mam8.png" alt="Itch.io API key creation step 2" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you're done here! Copy the new key and head over to the Settings page for your game's GitHub repo and click on "Secrets" in the left-hand nav:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qnsnyg0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a65fd6ia1l9ruipt2zqz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qnsnyg0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a65fd6ia1l9ruipt2zqz.png" alt="GitHub secret creation step 1" width="880" height="745"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, click "New Repository Secret." For "Name," put &lt;code&gt;BUTLER_API_KEY&lt;/code&gt;. For the value, paste in the key that you copied from itch.io. Click "Add secret," and you should now have a screen that looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uCJTau_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8kvxaoswm8i6c5b0fra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCJTau_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8kvxaoswm8i6c5b0fra.png" alt="GitHub secret creation step 2" width="880" height="318"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-discord-webhook-url-optional"&gt;
  &lt;/a&gt;
  The Discord webhook URL (optional)
&lt;/h3&gt;

&lt;p&gt;In your Discord server, go to "Server Settings":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zokNqH0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyd47uh1rwa5or451lb1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zokNqH0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyd47uh1rwa5or451lb1.png" alt="Discord webhook creation step 1" width="880" height="1539"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the left-hand nav, click "Integrations":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAKlZmHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpsytypaho9m7ygy5dfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAKlZmHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpsytypaho9m7ygy5dfb.png" alt="Discord webhook creation step 2" width="880" height="1217"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click "Webhooks:"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nKrhMm3p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3ciue0a0pkuq7a5j4oh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nKrhMm3p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3ciue0a0pkuq7a5j4oh.png" alt="Discord webhook creation step 3" width="880" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click "New Webhook" and fill out the form appropriately. Here's how ours looks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lv9RpZh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hix1lhvd4y3gdlwxefm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lv9RpZh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hix1lhvd4y3gdlwxefm.png" alt="Discord webhook creation step 4" width="880" height="716"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click "Copy Webhook" to copy the URL to your clipboard, and then "Save Changes" at the bottom. We're done here!&lt;/p&gt;

&lt;p&gt;Flip back to your GitHub repo's Secrets page, and create a new secret named &lt;code&gt;DISCORD_WEBHOOK&lt;/code&gt; with the webhook URL from Discord as the value. Your Secrets page should now look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XuBZoK28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfqx36cf7udxizjods9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XuBZoK28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfqx36cf7udxizjods9t.png" alt="GitHub secret creation step 3" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that all the necessary GitHub secrets are in place, all that's left to do is commit &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt; to your &lt;code&gt;main&lt;/code&gt; branch via PR. Starting with this commit and going forward on the &lt;code&gt;main&lt;/code&gt; branch, all commits will trigger a GitHub Action that deploys your web game to itch.io and notifies your community of the new release:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--01AzlT3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhbo959wcuu69h80tls0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--01AzlT3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhbo959wcuu69h80tls0.png" alt="Successful release deployment" width="880" height="808"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MVN60i7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9qltc4qi56x2awq48iy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MVN60i7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9qltc4qi56x2awq48iy.png" alt="Successful release notification" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! You can customize this workflow to your liking, perhaps by changing the Discord messaging or adding additional build targets. For the latter, I recommend looking at the Action that I learned from in order to see how to support Linux, Mac, and Windows builds: &lt;a href="https://github.com/RudyMis/Bubbles/blob/master/.github/workflows/godot-ci.yml"&gt;https://github.com/RudyMis/Bubbles/blob/master/.github/workflows/godot-ci.yml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do you think? How do you think this automation could be improved? Please share your thoughts in the comments. Thanks for reading, and have fun with developing your Godot games!&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>godot</category>
      <category>github</category>
      <category>automation</category>
    </item>
    <item>
      <title>What are the toughest communication challenges in software development?</title>
      <author>Ben Halpern</author>
      <pubDate>Mon, 17 Jan 2022 23:50:40 +0000</pubDate>
      <link>https://dev.to/ben/what-are-the-toughest-communication-challenges-in-software-development-2kk2</link>
      <guid>https://dev.to/ben/what-are-the-toughest-communication-challenges-in-software-development-2kk2</guid>
      <description>&lt;p&gt;The job would be a lot different if it were just you and the code. In your experience, what parts of the communication challenge are particularly tough in software?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>How Moti is the shortest way to create universal animation based on reanimated 2</title>
      <author>Abdelhalim Ahmed</author>
      <pubDate>Mon, 17 Jan 2022 22:51:28 +0000</pubDate>
      <link>https://dev.to/abdelhalimahmed/how-moti-is-the-shortest-way-to-create-universal-animation-based-on-reanimated-2-19m4</link>
      <guid>https://dev.to/abdelhalimahmed/how-moti-is-the-shortest-way-to-create-universal-animation-based-on-reanimated-2-19m4</guid>
      <description>&lt;p&gt;Today I would like to share my experience with Moti animation and create a Wave indicator using reanimated 2 and Moti.&lt;br&gt;
final code: &lt;a href="https://snack.expo.dev/@abdelhalimahmed/live-wave-animation"&gt;https://snack.expo.dev/@abdelhalimahmed/live-wave-animation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wux56-8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4l09lx4ubtbdzdmtbyz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wux56-8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4l09lx4ubtbdzdmtbyz.gif" alt="Image description" width="169" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h2&gt;

&lt;p&gt;What's the¬†Moti?&lt;br&gt;
Briefly, it helps you create universal animations "works on all platforms" in a much simpler way, powered by Reanimated 2, for more details check references on the bottom.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#situation"&gt;
  &lt;/a&gt;
  Situation:
&lt;/h2&gt;

&lt;p&gt;In my current job, I got a task with a little animation like the above demo and I was thinking what's the easiest way to do it, actually, my first glance is creating it using &lt;a href="https://github.com/lottie-react-native/lottie-react-native"&gt;Lottie&lt;/a&gt;, but I said why? let's do it with Reanimated 2 which it's my favorite performant animation library in the meantime.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;hint: I used styled-components, but you can use any preferred UI library&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1- I created a static dot component with fixed height and width with half border-radius "Circle"&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const Dot = styled.View'&lt;br&gt;
  width: 20px;&lt;br&gt;
  height: 20px;&lt;br&gt;
  border-radius: 10px;&lt;br&gt;
  background-color: green;&lt;br&gt;
';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2- Add array with length 3 which contain Animated view waves with the same style of Dot and positioning 'absolute'&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const Wave = styled(Animated.View)'&lt;br&gt;
  width: 20px;&lt;br&gt;
  height: 20px;&lt;br&gt;
  border-radius: 10px;&lt;br&gt;
  background-color: green;&lt;br&gt;
';&lt;br&gt;
{Array.from({ length: 3 }, (_, i) =&amp;gt; (&lt;br&gt;
  &amp;lt;Wave &lt;br&gt;
    style={StyleSheet.absoluteFillObject}&lt;br&gt;
    key={i} /&amp;gt;&lt;br&gt;
))};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3- Animation Part:¬†&lt;br&gt;
‚Ää-‚ÄäCreate animation value using "useSharedValue" that's contains the init value of "0" and will be "1" after triggering the animation.¬†&lt;br&gt;
‚Ää-‚ÄäAnimation style using "useAnimationStyle" that's contain the scaling value and opacity value with "interpolate" to map [0,1] to target value based on animation "scale | opacity" for example the scaling will be from "1x" -&amp;gt; "5x" so we will "interpolate" the animation value from [0,1] -&amp;gt; [1,5]¬†‚Ä¶etc&lt;br&gt;
‚Ää-‚Äätrigger the animation inside "useEffect".&lt;br&gt;
&lt;code&gt;&lt;br&gt;
const animationValue = useSharedValue(0); &lt;br&gt;
const animatedStyle = useAnimatedStyle(() =&amp;gt; { &lt;br&gt;
  return { &lt;br&gt;
    transform: [{ &lt;br&gt;
      scale: interpolate(animationValue.value, [0, 1], [1, 5]) &lt;br&gt;
    }], &lt;br&gt;
    opacity: interpolate(animationValue.value, [0, 1], [0.7, 0]), &lt;br&gt;
  }; &lt;br&gt;
}); &lt;br&gt;
useEffect(() =&amp;gt; { &lt;br&gt;
  animationValue.value = &lt;br&gt;
    withDelay(&lt;br&gt;
      index * 400, &lt;br&gt;
      withRepeat( &lt;br&gt;
        withTiming(&lt;br&gt;
          1, &lt;br&gt;
          { duration: 2000, easing: Easing.out(Easing.ease) }&lt;br&gt;
        ), &lt;br&gt;
        -1, &lt;br&gt;
        false &lt;br&gt;
      ) &lt;br&gt;
    ); &lt;br&gt;
}, [index, animationValue]);&lt;br&gt;
&amp;lt;Wave &lt;br&gt;
  style={[StyleSheet.absoluteFillObject, animatedStyle]} &lt;br&gt;
  key={index} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's IT¬†üî•ü•≥&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;But one Second!, where is the Moti Here?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay, After I finished the task and when streaming youtube I found Catalin Miron "who's building awesome animation using react native, I recommend checking his channel" released a new video very close to my animation challenge but he used the Motie!, so I mapped his code to fit my challenge and the result is awesome! with a few lines of my code!.&lt;br&gt;
so with easily, the wave view comes from Moti components with animations properties like "from" that's mean the start point of the animation view, "animate" that's the endpoint animation is done, "transition" the type and options for animation you want.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import {View} from '@motify/components';&lt;br&gt;
const Wave = styled(View)'&lt;br&gt;
  width: 20px; &lt;br&gt;
  height: 20px; &lt;br&gt;
  border-radius: 10px; &lt;br&gt;
  background-color: green; &lt;br&gt;
';&lt;br&gt;
&amp;lt;Wave&lt;br&gt;
  key={index} &lt;br&gt;
  from={{opacity: 0.7, scale: 1}} &lt;br&gt;
  animate={{opacity: 0, scale: 5}} &lt;br&gt;
  transition={{ &lt;br&gt;
    type: 'timing',&lt;br&gt;
    duration: 2000, &lt;br&gt;
    easing: Easing.out(Easing.ease), &lt;br&gt;
    delay: index * 400, &lt;br&gt;
    loop: true, &lt;br&gt;
    repeatReverse: false &lt;br&gt;
  }} &lt;br&gt;
  style={[StyleSheet.absoluteFillObject]} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References üìö
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=XkoFvsscsHo"&gt;https://www.youtube.com/watch?v=XkoFvsscsHo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UCTcH04SRuyedaSuuQVeAcdg"&gt;https://www.youtube.com/channel/UCTcH04SRuyedaSuuQVeAcdg&lt;/a&gt;&lt;br&gt;
&lt;a href="https://moti.fyi/"&gt;https://moti.fyi/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.swmansion.com/react-native-reanimated/docs/"&gt;https://docs.swmansion.com/react-native-reanimated/docs/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#did-you-like-it-clap-and-follow%C2%A0"&gt;
  &lt;/a&gt;
  Did you like it? Clap, and Follow!¬†üëè
&lt;/h2&gt;

&lt;p&gt;if you see something wrong or have an improvement please leave a comment and surely if you need a help with your React Native app feel free to contact me¬†;), I will be happy to discuss it.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>animation</category>
      <category>reanimated2</category>
      <category>moti</category>
    </item>
    <item>
      <title>100 d√≠as de c√≥digo: 54, continuando con la creaci√≥n de mi sitio web.</title>
      <author>Daro</author>
      <pubDate>Mon, 17 Jan 2022 22:47:35 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-54-continuando-con-la-creacion-de-mi-sitio-web-ki3</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-54-continuando-con-la-creacion-de-mi-sitio-web-ki3</guid>
      <description>&lt;p&gt;¬°Hey hey hey!&lt;/p&gt;

&lt;p&gt;Hola a todos, hoy he decidido avanzar con mi pagina personal, realmente me entusiasma pero hoy no he podido avanzar mucho por temas familiares. &lt;/p&gt;

&lt;p&gt;La secci√≥n principal ha tomado algo de forma ya que le he agregado estilos y he practicado algo de typescript aunque no he conseguido resultados mas altos en mi velocidad que los de la semana pasada. He estado realizando los test y aprendiendo en &lt;a href="https://www.typingstudy.com/"&gt;esta pagina&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He estado pensando que podr√≠a retomar mi estudio de typescript y aprender alg√∫n framework de css pero aun no he decidido realmente y estoy enfocado en avanzar con mi pagina.&lt;/p&gt;

&lt;p&gt;Espero que tengas mucho √©xito con tus proyectos y animo con todo. ¬°Tu puedes!&lt;/p&gt;

&lt;p&gt;Adi√≥s mundo.&lt;/p&gt;

&lt;p&gt;Foto de &lt;a href="https://unsplash.com/@andyjh07?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Andy Holmes&lt;/a&gt; en &lt;a href="https://unsplash.com/s/photos/100-days?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>First DEV post! Pumped!!</title>
      <author>Toke Malaolu</author>
      <pubDate>Mon, 17 Jan 2022 22:40:57 +0000</pubDate>
      <link>https://dev.to/thepineapple/first-dev-post-pumped-1lfn</link>
      <guid>https://dev.to/thepineapple/first-dev-post-pumped-1lfn</guid>
      <description>&lt;p&gt;I cannot believe I am typing this...&lt;/p&gt;

&lt;p&gt;Here goes...&lt;/p&gt;

&lt;p&gt;I was introduced to programming by a friend, November 2021. I had no prior knowledge about it so I was scared. Did i have the brain capacity to understand any of the languages? I didn't think so&lt;/p&gt;

&lt;p&gt;Fast forward to today, I am currently waiting on a Programming scholarship worth $2,000 (hopefully i get it) and I am taking an HTML and CSS course on Scrimba and it has been such an exciting journey.&lt;/p&gt;

&lt;p&gt;Here I am today, typing this and I am super excited to join this amazing community. I hope to learn from you one way or another.&lt;/p&gt;

&lt;p&gt;Signing out,&lt;br&gt;
the-pineapple &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
      <category>programming</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 57: Scala</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Mon, 17 Jan 2022 22:14:31 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-57-scala-7c1</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-57-scala-7c1</guid>
      <description>&lt;p&gt;Scala is one of the JVM languages trying to dethrone Java. Currently Kotlin is leading this race by a lot, but Scala, Clojure, and Groovy are all quite popular, with JRuby being somewhat behind them in the race.&lt;/p&gt;

&lt;p&gt;This post is about Scala 2. Scala 3 is currently being developed, which plans to make fundamental changes to the language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run it without separate compilation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ scala hello.scala
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;The FizzBuzz is very reasonable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="c1"&gt;// FizzBuzz in Scala&lt;/span&gt;
&lt;span class="nf"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FizzBuzz"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Buzz"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fizz"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#unicode"&gt;
  &lt;/a&gt;
  Unicode
&lt;/h3&gt;

&lt;p&gt;Just like Kotlin, Clojure, and Groovy, Scala string handling is also broken for any data involving characters outside Unicode Basic Plane. It's broken on JVM, and so every language using it directly has broken string handling. JRuby is the only major JVM language which had courage to fix it, and pay performance price for that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;strings&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"≈π√≥≈Çw"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"üí©"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"Length of $s is ${s.length}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ scala unicode.scala
Length of Hello is 5
Length of ≈π√≥≈Çw is 4
Length of üí© is 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the upside, Scala has nice string interpolation. Of course with its own unique syntax, as that's one thing which every language uses different syntax for, with no consensus emerging so far.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;

&lt;p&gt;On the upside, we don't need pointless &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On the downside, we need to declare types for both arguments and return values, type inference is completely failing us here. There's some limited type inference, but in this case it would give us &lt;code&gt;error: recursive method fib needs result type&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"fib($n) = ${fib(n)}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ scala fib.scala
fib(1) = 1
fib(2) = 1
fib(3) = 2
fib(4) = 3
fib(5) = 5
fib(6) = 8
fib(7) = 13
fib(8) = 21
fib(9) = 34
fib(10) = 55
fib(11) = 89
fib(12) = 144
fib(13) = 233
fib(14) = 377
fib(15) = 610
fib(16) = 987
fib(17) = 1597
fib(18) = 2584
fib(19) = 4181
fib(20) = 6765
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#types"&gt;
  &lt;/a&gt;
  Types
&lt;/h3&gt;

&lt;p&gt;Scala just like Haskell has extremely complicated type system, featuring type classes. By the way this is one of the features which is getting full rewrite in Scala 3, so presumably Scala devs are not too happy with its state.&lt;/p&gt;

&lt;p&gt;Let's try to define a function like this, in a way that would allow valid combinations (like &lt;code&gt;Int&lt;/code&gt; + &lt;code&gt;Int&lt;/code&gt;, or &lt;code&gt;String&lt;/code&gt; + &lt;code&gt;String&lt;/code&gt;), but not invalid combinations (like &lt;code&gt;Int&lt;/code&gt; + &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;Double&lt;/code&gt; + &lt;code&gt;HttpRequest&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"${a} + ${b} = ${a + b}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first step is to make this function generic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"${a} + ${b} = ${a + b}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This won't work - as &lt;code&gt;+&lt;/code&gt; is not defined for every type. Scala gives a completely meaningless error message (&lt;code&gt;required: String; incompatible interpolation method s&lt;/code&gt;) for this, but it's no big deal.&lt;/p&gt;

&lt;p&gt;What works is defining a type class (spelled a &lt;code&gt;trait&lt;/code&gt; in Scala, but documentation still refers to it as a "type class") &lt;code&gt;Additive&lt;/code&gt;. Then defining various instances of &lt;code&gt;Additive[...]&lt;/code&gt;. Then passing &lt;code&gt;Additive&lt;/code&gt; as an implicit parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;AdditiveInt&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;AdditiveDouble&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;AdditiveString&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="n"&gt;additive&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"${a} + ${b} = ${additive.plus(a, b)}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How does it compare with other languages with complex type systems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Crystal managed to figure it out with zero type annotations&lt;/li&gt;
&lt;li&gt;Scala managed to do this, with very heavy annotations&lt;/li&gt;
&lt;li&gt;Haskell almost works, with very heavy annotations and a few language extensions, but then in the end it doesn't (this is largely because Haskell string is not a real type, it's just a list of characters, and Haskell is bad at type classes over such composite types)&lt;/li&gt;
&lt;li&gt;OCaml doesn't even try&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#simple-types"&gt;
  &lt;/a&gt;
  Simple Types
&lt;/h3&gt;

&lt;p&gt;For simple immutable classes, Scala supports &lt;code&gt;case class&lt;/code&gt; shortcut, very similar to Kotlin's &lt;code&gt;data class&lt;/code&gt;. It defines common basic operations like &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;.toString()&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt; and so on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;30.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;40.0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;30.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;40.0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"len of ${c} is ${c.length()}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ scala point.scala
false
true
false
len of Point(30.0,40.0) is 50.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is all fine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generic-point-type"&gt;
  &lt;/a&gt;
  Generic Point Type
&lt;/h3&gt;

&lt;p&gt;So let's define a generic Point type that can take be &lt;code&gt;Point[Int]&lt;/code&gt; or &lt;code&gt;Point[Double]&lt;/code&gt; or such, and always implement &lt;code&gt;+&lt;/code&gt;. This can be done, but it's quite convoluted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;AdditiveInt&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;AdditiveDouble&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;AdditiveString&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="n"&gt;additive&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;+&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;additive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;x&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;additive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;y&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;AdditivePoint&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="n"&gt;additive&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Additive&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"${a} + ${b} = ${additive.plus(a, b)}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;250.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;170.0&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"much"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wow"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ scala typeclasses2.scala
Point(4,6)
Point(300,60) + Point(120,9) = Point(420,69)
Point(6.0,250.0) + Point(0.9,170.0) = Point(6.9,420.0)
Point(foo,much) + Point(bar,wow) = Point(foobar,muchwow)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What Scala has is definitely among the most complicated type systems ever, and we're really just barely scratching the surface here.&lt;/p&gt;

&lt;p&gt;One important advantage Scala has over Haskell is that if type system really doesn't like what you're doing, you can just declare something as &lt;code&gt;Any&lt;/code&gt; and do all the type checking at runtime. Haskell is fundamentalist about type checking, and if type checker doesn't like your perfectly valid code, there's nothing you can do about that.&lt;/p&gt;

&lt;p&gt;What Scala notably lacks is union types, which are extremely necessary for such basic things like parsing JSON. Scala 3 plans to add union types. And speaking of parsing JSON...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#libraries"&gt;
  &lt;/a&gt;
  Libraries
&lt;/h3&gt;

&lt;p&gt;Scala doesn't come with any JSON library, which in this day and age, is ridiculous.&lt;/p&gt;

&lt;p&gt;It looks like there are two popular package managers for Scala - Scala-specific &lt;code&gt;sbt&lt;/code&gt; and more generic &lt;code&gt;gradle&lt;/code&gt;. Both are convoluted enough that I'll just pass on this whole mess to keep this post reasonable size.&lt;/p&gt;

&lt;p&gt;That's not a Scala specific issue, the whole JVM world suffers from extremely convoluted package management, and lacks anything comparable to &lt;code&gt;rubygems&lt;/code&gt; or &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is sort of acceptable for bigger projects, as all that &lt;code&gt;sbt&lt;/code&gt; or &lt;code&gt;gradle&lt;/code&gt; setup will be a tiny part, but for small ones, it's a huge pain.&lt;/p&gt;

&lt;p&gt;This might have been acceptable 10 years ago, nobody should accept this today.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functional-programming"&gt;
  &lt;/a&gt;
  Functional Programming
&lt;/h3&gt;

&lt;p&gt;Basic functional programming patterns work just as you'd expect it. There's implicit arguments &lt;code&gt;_&lt;/code&gt;, similar to Perl's &lt;code&gt;$_&lt;/code&gt; or Kotlin's &lt;code&gt;it&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;alist&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;alist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;map&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;alist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;map&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;alist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;alist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#jvm-interoperability"&gt;
  &lt;/a&gt;
  JVM Interoperability
&lt;/h3&gt;

&lt;p&gt;Scala can call any JVM code, so in theory, it should have access to the entire JVM ecosystem, right? Well, in practice if you actually try to do that, it will look like ass:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.awt._&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.awt.event._&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.swing._&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;clicks&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;JFrame&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;setLayout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;GridLayout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;setSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;l&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;JLabel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;setHorizontalAlignment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SwingConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;CENTER&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;JButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"click me"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;addActionListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ActionListener&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;actionPerformed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ActionEvent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;clicks&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;setText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"${clicks} clicks"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;

&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;setVisible&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qFZ3x_m4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybxk66s1scimvcoq1zkm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qFZ3x_m4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybxk66s1scimvcoq1zkm.png" alt="Click Counter" width="412" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in practice you'll be using Scala wrappers, &lt;a href="https://github.com/scala/scala-swing"&gt;like this one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How bad is it when you don't have a Scala wrapper depends on a library, but Java and Scala diverge semantically far more than let's say Java and Kotlin.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-scala"&gt;
  &lt;/a&gt;
  Should you use Scala?
&lt;/h3&gt;

&lt;p&gt;I'd recommend against it.&lt;/p&gt;

&lt;p&gt;If you don't need JVM, Scala is not for you. Scala is a ridiculously overcomplicated language, in particular with a ridiculously overcomplicated type system, somehow still lacking basic functionality like parsing JSON or modern package manager, with a terrible track record of breaking backwards compatibility (and Scala 3 coming soon to break it even harder), highly fragmented ecosystem, and apparently a lot of maintainer drama on top of it (I didn't look too closely at that).&lt;/p&gt;

&lt;p&gt;If you specifically need something that runs on a JVM, it's a closer call, but I'd still not recommend it. Scala can use JVM libraries, but due to semantic mismatch, it will be quite awkward. And apparently the biggest JVM ecosystem - Android - isn't even really supported by Scala. For the "better Java" role Scala was aiming at, Kotlin just does it much better. If you're more flexible about your JVM language, one of Clojure, Groovy, or JRuby might be a better choice.&lt;/p&gt;

&lt;p&gt;On the other hand, if you need something that runs on a JVM, but you don't care about Android, and not actually need to use too many JVM libraries (only the popular ones that mostly have Scala wrappers), and you actively want Scala's ridiculously overcomplicated type systems, and aren't terribly bothered by backwards compatibility issues, and so on - then Scala might actually work for you. I don't expect that to be too many people.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-57-scala"&gt;Code for the Scala episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>scala</category>
      <category>java</category>
    </item>
    <item>
      <title>Using NodeJS APIs in Electron with React</title>
      <author>Ryosuke</author>
      <pubDate>Mon, 17 Jan 2022 21:26:52 +0000</pubDate>
      <link>https://dev.to/whoisryosuke/using-nodejs-apis-in-electron-with-react-54g6</link>
      <guid>https://dev.to/whoisryosuke/using-nodejs-apis-in-electron-with-react-54g6</guid>
      <description>&lt;p&gt;Looking how to use NodeJS modules (like &lt;code&gt;exec&lt;/code&gt; to execute CLI commands) or Electron APIs (like &lt;code&gt;dialog&lt;/code&gt; to open the native PC‚Äôs file dialog to select files)?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The short answer?&lt;/strong&gt; use the IPC Renderer to create a ‚Äúpub/sub‚Äù event channel between the ‚Äúmain‚Äù and ‚Äúrenderer‚Äù.&lt;/p&gt;

&lt;p&gt;This seems simple enough (if you know Electron buzz words), but there‚Äôs not a lot of great examples out there that explicitly show how to do this kind of stuff unless you dig. I had to go through the Electron Discord to find a secret gist that finally had a proper example that worked for me.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÑπÔ∏è I‚Äôll be using &lt;strong&gt;&lt;a href="https://github.com/electron-react-boilerplate/electron-react-boilerplate"&gt;electron-react-boilerplate&lt;/a&gt;&lt;/strong&gt; throughout this article as the basis for any code. You can clone this project and follow along - all files I reference will be relative to that project.&lt;/p&gt;

&lt;p&gt;Also note - I tried using &lt;strong&gt;&lt;a href="https://www.electronforge.io/"&gt;Electron Forge&lt;/a&gt;&lt;/strong&gt; and it didn‚Äôt work out of the box - requiring &lt;a href="https://www.electronforge.io/config/plugins/webpack#node-integration"&gt;a lot of configuration&lt;/a&gt; to get it on par with &lt;strong&gt;electron-react-boilerplate&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#my-journey-through-webpack-hell"&gt;
  &lt;/a&gt;
  My Journey through Webpack Hell
&lt;/h1&gt;

&lt;p&gt;As someone who has built Electron apps before, I thought I knew how to use NodeJS. I literally built an app that the user can input CLI commands and run them (using the &lt;code&gt;exec&lt;/code&gt; method in the &lt;code&gt;child_process&lt;/code&gt; module). &lt;strong&gt;&lt;a href="https://github.com/whoisryosuke/entourage/blob/main/app/components/BlockContent/CommandBlock.tsx#L2-L25"&gt;You can see in my project,&lt;/a&gt;&lt;/strong&gt; I use NodeJS directly inside my React component. &lt;strong&gt;&lt;em&gt;Normally&lt;/em&gt;&lt;/strong&gt; this wouldn‚Äôt be possible - even in NextJS-land you‚Äôre forced to use &lt;a href="https://nextjs.org/docs/basic-features/data-fetching"&gt;special methods to fetch data from the server-side&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I figured Electron was different from frameworks like NextJS. &lt;strong&gt;I was wrong.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I cloned the latest version of &lt;strong&gt;&lt;a href="https://github.com/electron-react-boilerplate/electron-react-boilerplate"&gt;electron-react-boilerplate&lt;/a&gt;&lt;/strong&gt;, I tried doing this again only to get an error about &lt;code&gt;child_process&lt;/code&gt; being missing. This led me down a hole of incorrect StackOverflow answers that kept insisting that I do things like add &lt;code&gt;nodeIntegrations: true&lt;/code&gt; to my Forge config, changing &lt;code&gt;import&lt;/code&gt; to &lt;code&gt;require&lt;/code&gt;, or update my Webpack config to &lt;code&gt;null&lt;/code&gt; out when importing Node modules in the frontend. None of these worked, and the module would not import, despite any configuration.&lt;/p&gt;

&lt;p&gt;This simply emphasized the ‚Äú&lt;strong&gt;renderer&lt;/strong&gt;‚Äù process (or ‚Äú&lt;em&gt;frontend&lt;/em&gt;‚Äù) with React didn‚Äôt have access to the same modules as the ‚Äú&lt;strong&gt;main&lt;/strong&gt;‚Äù (or ‚Äú&lt;em&gt;backend&lt;/em&gt;‚Äù) process. But what does that mean?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-electron-works"&gt;
  &lt;/a&gt;
  How Electron Works
&lt;/h1&gt;

&lt;p&gt;Electron has 2 main processes: &lt;strong&gt;Main&lt;/strong&gt; and &lt;strong&gt;Renderer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A ‚Äú&lt;strong&gt;main&lt;/strong&gt;‚Äù process that runs ‚Äú&lt;strong&gt;server-side&lt;/strong&gt;‚Äù - on the NodeJS platform. This process is responsible for the ‚Äúbackend‚Äù of the app, such as rendering the actual app window and piping the HTML inside ‚Äî or speaking to native platform APIs (like making the actually close using Electron‚Äôs &lt;code&gt;app.quit()&lt;/code&gt;). Here we can use dependencies such as NodeJS APIs and Electron APIs, as well as any library that requires it to be server-side (like a SQLite adapter to read from a DB ‚Äî &lt;code&gt;const sqlite = require('sqlite')&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;A ‚Äú&lt;strong&gt;renderer&lt;/strong&gt;‚Äù process runs the ‚Äú&lt;strong&gt;frontend&lt;/strong&gt;‚Äù of your app. This includes an HTML page to render, as well as any CSS or JS required inside of it. We can also use libraries like React or Angular, since they‚Äôre also JS and render in an HTML page. Here we can use any frontend dependencies that we install in our &lt;code&gt;package.json&lt;/code&gt;, like Yup for validating form input (e.g. &lt;code&gt;import yup from 'yup&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Both of these processes are often bundles separately, usually through a library like Webpack or Parcel. The &lt;code&gt;main.js&lt;/code&gt; file will run first, then run the &lt;code&gt;renderer.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Understanding the distinction between these two will help understand how to create a secure Electron app, similar to working with apps on the web, to avoid exploits like XSS.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-node-inside-react"&gt;
  &lt;/a&gt;
  How to use Node inside React?
&lt;/h1&gt;

&lt;p&gt;So if you want to do something like query a DB, or open the native file system dialog ‚Äî how does React run these commands on demand?&lt;/p&gt;

&lt;p&gt;The answer is to use &lt;a href="https://www.electronjs.org/docs/latest/api/ipc-main"&gt;IPC in Electron&lt;/a&gt;. This is a system that uses pub/sub events to transmit data to and from the ‚Äúmain‚Äù (or backend) to the ‚Äúrenderer‚Äù (or frontend).&lt;/p&gt;

&lt;p&gt;Inside the &lt;strong&gt;main&lt;/strong&gt; process (or &lt;code&gt;main.js&lt;/code&gt;), we add a &lt;code&gt;handle()&lt;/code&gt; method from IPC Main to ‚Äúlisten‚Äù for events (in this case &lt;code&gt;blender:version&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/main/main.ts&lt;/span&gt;
&lt;span class="nx"&gt;ipcMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blender:version&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;running cli&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blenderExecutable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;checkMacBlender&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// If MacOS, we need to change path to make executable&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkVersionCommand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;blenderExecutable&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; -v`&lt;/span&gt;

    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkVersionCommand&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also inside the &lt;strong&gt;main&lt;/strong&gt; process, we pass in a &lt;code&gt;preload.js&lt;/code&gt; script to load alongside the &lt;strong&gt;renderer&lt;/strong&gt; process. This is included with &lt;strong&gt;electron-react-boilerplate&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/main/main.ts&lt;/span&gt;
&lt;span class="nx"&gt;webPreferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preload.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code inside our preload script will be available to our React code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/main/preload.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;contextBridge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ipcRenderer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;contextBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exposeInMainWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;blenderVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blenderPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;ipcRenderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blender:version&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blenderPath&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this does is ‚Äúexpose‚Äù our object (in this case, methods like &lt;code&gt;blenderVersion()&lt;/code&gt;) to the global &lt;code&gt;window&lt;/code&gt; under the &lt;code&gt;electron&lt;/code&gt; property. This allows us to call &lt;code&gt;window.electron&lt;/code&gt; &lt;strong&gt;anywhere inside our app‚Äôs frontend&lt;/strong&gt; and find any property/method from the preload script. For example, we‚Äôd call &lt;code&gt;window.electron.blenderVersion()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Inside any React file&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getVersion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blenderFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;VersionData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use IPC API to query Electron's main thread and run this method&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;electron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blenderVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blenderFile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we call that method, the IPC Renderer inside the preload script runs (or &lt;code&gt;invoke()&lt;/code&gt;) the function we put in the main process. So the frontend uses the ‚ÄúAPI‚Äù you define in &lt;code&gt;preload.js&lt;/code&gt; - and the backend uses the event names in &lt;code&gt;preload.js&lt;/code&gt; (aka &lt;code&gt;blender:version&lt;/code&gt;) to run the right function for the event.&lt;/p&gt;

&lt;p&gt;Using this architecture, you can essentially create an API of sorts (similar to &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;API routes in NextJS&lt;/a&gt;) to create a secure communication channel between the &lt;strong&gt;frontend&lt;/strong&gt; (renderer aka React) and &lt;strong&gt;backend&lt;/strong&gt; (main process aka Electron/Node).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/whoisryosuke/blender-hub2/commit/86cb4f7b62c05fe831a50462679cc115d7f6e41a"&gt;You can see a full working version of this example in this commit.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-do-all-this-work"&gt;
  &lt;/a&gt;
  Why do all this work?
&lt;/h1&gt;

&lt;p&gt;For &lt;strong&gt;&lt;em&gt;security&lt;/em&gt;&lt;/strong&gt;! That‚Äôs why.&lt;/p&gt;

&lt;p&gt;The problem with frontend code is that the user can edit it and change it.&lt;/p&gt;

&lt;p&gt;For example, if we have a shopping cart with products, we‚Äôd normally store the product prices in the React state. This is ok, but what if the user changes the price to &lt;strong&gt;\$0&lt;/strong&gt;? Ideally, the request should get handled by a ‚Äúserver‚Äù (or separate computer/process the user has no control over) ‚Äî then the results get passed back to the frontend. This way, we can do things &lt;strong&gt;on the server&lt;/strong&gt; like check the product price and confirm it matches the source of truth (usually a DB).&lt;/p&gt;

&lt;p&gt;In Electron, this is similar. &lt;strong&gt;We do&lt;/strong&gt; need to use NodeJS APIs to do actions like accessing the filesystem using &lt;code&gt;fs&lt;/code&gt; ‚Äî but &lt;strong&gt;we don‚Äôt&lt;/strong&gt; want the user to be able to access these APIs directly. Dangerous things could happen, like the app could be &lt;strong&gt;hijacked&lt;/strong&gt; and &lt;strong&gt;exploited&lt;/strong&gt; by a 3rd party script. If that malicious script is allowed to run any command, it could &lt;strong&gt;delete files on user‚Äôs computer&lt;/strong&gt; (or worse).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.electronjs.org/docs/latest/tutorial/security"&gt;You can learn more about &lt;strong&gt;security in Electron&lt;/strong&gt; her*&lt;em&gt;e.&lt;/em&gt;*&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-typescript-support"&gt;
  &lt;/a&gt;
  Adding Typescript support
&lt;/h1&gt;

&lt;p&gt;The only issue with this IPC bridge is that our APIs aren‚Äôt explicit to Typescript. They‚Äôre passed to the &lt;code&gt;window&lt;/code&gt; under the hood by the context bridge, so TS isn‚Äôt able to know that &lt;code&gt;window.electron&lt;/code&gt; exists.&lt;/p&gt;

&lt;p&gt;We can work around this by creating a global Typescript definition file. We can place this anywhere in the frontend project and anytime we add new methods/parameters to IPC bridge (aka &lt;code&gt;window.electron&lt;/code&gt;) ‚Äî we also add the proper types to that file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DialogFileData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;declare&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * We define all IPC APIs here to give devs auto-complete
   * use window.electron anywhere in app
   * Also note the capital "Window" here
   */&lt;/span&gt;
  &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;electron&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;showDialog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DialogFileData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;blenderVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;blenderFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;// Add any additional "APIs" here&lt;/span&gt;

    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// window.electron = window.electron || {};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see &lt;a href="https://github.com/whoisryosuke/blender-hub2/blob/main/src/renderer/common/global.d.ts"&gt;an example of this file here&lt;/a&gt; on Github.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#open-file-dialog"&gt;
  &lt;/a&gt;
  Open File Dialog
&lt;/h2&gt;

&lt;p&gt;This method when run, opens the native ‚Äú&lt;strong&gt;Open File...&lt;/strong&gt;‚Äù dialog. You‚Äôd assign this to a button, then use the &lt;code&gt;filePaths&lt;/code&gt; returned as needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ipcMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dialog:open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showOpenDialog&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;openFile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the &lt;code&gt;preload.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;contextBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exposeInMainWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;showDialog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ipcRenderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dialog:open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside React you access the method we exposed using &lt;code&gt;window.electron&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Returned from the Electron Dialog API `showOpenDialog`
 * @see: https://www.electronjs.org/docs/latest/api/dialog
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DialogFileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Did user cancel dialog?
   */&lt;/span&gt;
  &lt;span class="na"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Array of file paths that user selected
   */&lt;/span&gt;
  &lt;span class="na"&gt;filePaths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DialogFileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;electron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showDialog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user files&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-an-extra-window"&gt;
  &lt;/a&gt;
  Create an extra window
&lt;/h2&gt;

&lt;p&gt;One common thing you might encounter when creating an Electron app is the need to create another window, usually something different than the main app (like a setting screen).&lt;/p&gt;

&lt;p&gt;Creating a window in Electron is pretty easy. You use the &lt;code&gt;BrowserWindow&lt;/code&gt; class to define a new window (like the size or icon), load the HTML file, then have it show using the callback. The beauty of this, we can call it anytime ‚Äî like on demand when our frontend asks (via IPC):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/main/main.ts&lt;/span&gt;
&lt;span class="c1"&gt;// Add this near top of file&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createSecondWindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;windowUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newWindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;728&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// icon: getAssetPath('icon.png'),&lt;/span&gt;
    &lt;span class="na"&gt;webPreferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preload.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;newWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolveHtmlPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;windowUrl&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="nx"&gt;newWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready-to-show&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;newWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Place this where your IPC handles/connects are&lt;/span&gt;
&lt;span class="nx"&gt;ipcMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new:window&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;windowUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createSecondWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;windowUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we create a method on the IPC bridge to connect the frontend (React) to backend (Electron main renderer):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/main/preload.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;contextBridge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ipcRenderer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;contextBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exposeInMainWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;newWindow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;windowUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ipcRenderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new:window&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;windowUrl&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then in React, we can just use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;electron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There‚Äôs one problem with this: unless we edit the Webpack config of the project, we only generate 1 HTML file - &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-how-do-i-make-another-html-file-react-app"&gt;
  &lt;/a&gt;
  But how do I make another HTML file / React app?
&lt;/h3&gt;

&lt;p&gt;It‚Äôs a long process of editing the Webpack configuration for both the production and development renderer, adding new &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.ejs&lt;/code&gt; entrypoints for the window, and maybe a little extra minor configuration.&lt;/p&gt;

&lt;p&gt;We can work around this by passing query parameters instead of a whole new file. At the top level of the React app: we‚Äôll grab the query parameters, parse them, then render a window based on what gets passed. It‚Äôll work kind of like a ‚Äúrouter‚Äù, with a big switch statement changing between React components that represent each window and it‚Äôs content.&lt;/p&gt;

&lt;p&gt;So rather than call to a new HTML file, we add a query parameter to &lt;code&gt;index.html&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;electron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.html?window=settings&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then inside our React app, we check for the query parameter &lt;a href="https://stackoverflow.com/a/38401579"&gt;using a global variable Electron exposes to browser:&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Returns:&lt;/span&gt;
&lt;span class="c1"&gt;// ?window=settings&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can parse this using a library like &lt;a href="//npmjs.com/package/query-string"&gt;query-string&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;query-string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Window Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using this, inside our &lt;code&gt;App.tsx&lt;/code&gt;, we can render different windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;query-string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SettingsWindow&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./settings&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MainWindow&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./settings&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;settings&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Settings&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MainWindow&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with the magic of React, you can put a real router (like React Router) inside each window, and each would have it‚Äôs own navigation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.electronjs.org/docs/latest/api/ipc-main"&gt;ipcMain | Electron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.electronjs.org/docs/latest/api/dialog"&gt;dialog | Electron&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Official docs - not really helpful...&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gist.github.com/whoisryosuke/ab0ee89e878c48947fe7fd8eedb8431f"&gt;Dialog Invoke Example&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Great example&lt;/li&gt;
&lt;li&gt;Shoutout to Electron Discord, found it there&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/whoisryosuke/blender-hub2/tree/dialog-example"&gt;GitHub - whoisryosuke/blender-hub2 at dialog-example&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Integrated into React&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codeburst.io/build-a-todo-app-with-electron-d6c61f58b55a"&gt;Build a Todo App with Electron&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Good breakdown of options for local storage (electron-store vs Node‚Äôs &lt;code&gt;fs&lt;/code&gt; filesystem)&lt;/li&gt;
&lt;li&gt;Also shows app folder for each platform (Mac/Win/Linux)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/38401579"&gt;How to get Query Parameters in Electron&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Advanced JavaScript Series - Part 6.1: Everything in JS is an Object!? Primitive, Non-Primitive Types</title>
      <author>Pranav</author>
      <pubDate>Mon, 17 Jan 2022 21:21:14 +0000</pubDate>
      <link>https://dev.to/pranav016/advanced-javascript-series-part-61-everything-in-js-is-an-object-primitive-non-primitive-types-1d8c</link>
      <guid>https://dev.to/pranav016/advanced-javascript-series-part-61-everything-in-js-is-an-object-primitive-non-primitive-types-1d8c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction-
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are two types of datatypes in JavaScript namely the primitive and non-primitive data-types.&lt;/li&gt;
&lt;li&gt;Primitive data types means that are immutable, cannot be further broken down since they are the smallest unit any data can be in. Non-primitive are opposite to this and can consist of different primitive types.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FFnTzQrh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiq8n9z3hsbimcdy17kb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FFnTzQrh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiq8n9z3hsbimcdy17kb.png" alt="DataTypes" width="591" height="516"&gt;&lt;/a&gt; &lt;br&gt;
&lt;em&gt;Credits- &lt;a href="https://www.naukri.com/learning/articles/javascript-data-types-with-examples/"&gt;Deepali&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#primitive-type-includes"&gt;
  &lt;/a&gt;
  Primitive type includes-
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;BigInt&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#nonprimitive-types-includes"&gt;
  &lt;/a&gt;
  Non-Primitive Types includes-
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;You must be wondering what about arrays and functions? Well, in JavaScript both arrays and functions are a form of object even though when we do &lt;code&gt;typeof&lt;/code&gt; on a function it returns &lt;code&gt;function&lt;/code&gt; but it is an object. Check these examples to understand better.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code-1"&gt;
  &lt;/a&gt;
  Code 1-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function a(){
  console.log("hello world")
}

a.hi = "hi"
console.log(a.hi)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output-1"&gt;
  &lt;/a&gt;
  Output 1-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"hi"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You can see here how a function is behaving like an object. How we were able to add a new property to the function.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#code-2"&gt;
  &lt;/a&gt;
  Code 2-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;typeof []
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output-2"&gt;
  &lt;/a&gt;
  Output 2-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'object'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You can see here how an array is returning &lt;code&gt;object&lt;/code&gt; as its type.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;But in real, everything in JavaScript behaves as an object. Check out this &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects"&gt;documentation&lt;/a&gt; and see how &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt; and many more are listed as built-in objects in JavaScript.&lt;/li&gt;
&lt;li&gt;Let's see this with the help of an example.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(true.toString())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'true'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can see how a boolean value is acting like an object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is because behind the scenes, JS adds a wrapper to it and the code becomes &lt;code&gt;console.log(Boolean(true).toString())&lt;/code&gt; and as we know everything acts like an object hence we are able to call the &lt;code&gt;toString()&lt;/code&gt; function from &lt;code&gt;Boolean&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-an-array-is-an-object-how-would-we-differentiate-incase-we-need-to"&gt;
  &lt;/a&gt;
  If an array is an object, how would we differentiate incase we need to-
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are many different functions available in JS that help us differentiate the types from one anther.&lt;/li&gt;
&lt;li&gt;For example, in JS a new function was introduced that helps differentiate array from objects. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x=[1,2,3]
Array.isArray(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me-
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Pranav016"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/pranav-mendiratta/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#appendix"&gt;
  &lt;/a&gt;
  Appendix-
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-1-behind-the-scenes-javascript-engine-ats-hidden-classes-garbage-collection-3ajj"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 1&lt;/strong&gt;: Behind the scenes (JavaScript Engine, ATS, Hidden Classes, Garbage Collection)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-1-execution-context-and-call-stack-l1o"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 2&lt;/strong&gt;: Execution Context and Call Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-3-weird-js-behavior-strict-mode-and-hoisting-26a3"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 3&lt;/strong&gt;: Weird JS behavior, Strict Mode and Hoisting, Temporal Dead Zone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-41-global-function-and-block-scope-lexical-vs-dynamic-scoping-20pg"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 4.1&lt;/strong&gt;: Global, Function and Block Scope, Lexical vs Dynamic Scoping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-42-scope-chains-and-their-working-lexical-and-variable-environments-19d5"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 4.2&lt;/strong&gt;: Scope Chains and their working, Lexical and Variable Environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-5-iife-this-keyword-in-jstricky-eg-call-apply-bind-curryingfunctional-prog-98c"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 5&lt;/strong&gt;: IIFE &amp;amp; 'this' keyword in JS(tricky Eg.), call(), apply(), bind(), Currying(Functional Prog)&lt;/a&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References-
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
