<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What's new in PreviewDevice 0.8.0</title>
      <author>Anton Paliakou</author>
      <pubDate>Sat, 18 Sep 2021 15:32:12 +0000</pubDate>
      <link>https://dev.to/toni777772/what-s-new-in-previewdevice-0-8-0-5dc0</link>
      <guid>https://dev.to/toni777772/what-s-new-in-previewdevice-0-8-0-5dc0</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/Toni77777/PreviewDevice"&gt;PreviewDevice&lt;/a&gt; is a library with type-safe syntax sugar for preview device on SwiftUI. &lt;br&gt;
If you don't know what is the library, I recomment read this &lt;a href="https://tonidevblog.com/posts/meet-previewdevice/"&gt;article&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-new-in-080-gogogo"&gt;
  &lt;/a&gt;
  What's new in 0.8.0? Go-go-go
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#added-support-new-apple-devices"&gt;
  &lt;/a&gt;
  Added support new Apple devices:
&lt;/h3&gt;

&lt;p&gt;iPhones: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPhone 13 mini (&lt;code&gt;Device.iphone13Mini&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;iPhone 13 (&lt;code&gt;Device.iphone13&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;iPhone 13 Pro (&lt;code&gt;Device.iphone13Pro&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;iPhone 13 Pro Max (&lt;code&gt;Device.iphone13ProMax&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apple Watch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple Watch Series 7 - 41mm (&lt;code&gt;Device.watchSeries7_41mm&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Apple Watch Series 7 - 45mm (&lt;code&gt;Device.watchSeries7_45mm&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;iPads:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPad 9th generation (&lt;code&gt;Device.ipad_9Gen&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;iPad mini 6th generation (&lt;code&gt;Device.ipadMini6&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#preview-on-device-with-orientation-and-color-schemes"&gt;
  &lt;/a&gt;
  Preview on device with orientation and color schemes.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Available iOS 15+ OSX 12+,  macCatalyst 15+, tvOS 15+, watchOS 8.0+&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="nv"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="nv"&gt;colorSchemes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do you like the library? Click the star on &lt;a href="https://github.com/Toni77777/PreviewDevice"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading! See you soon. 👋&lt;/p&gt;

</description>
      <category>ios</category>
      <category>swift</category>
      <category>swiftui</category>
      <category>preview</category>
    </item>
    <item>
      <title>The Complete Guide to Full Stack Solana Development with React, Anchor, Rust, and Phantom</title>
      <author>fenilmodi00</author>
      <pubDate>Sat, 18 Sep 2021 15:32:02 +0000</pubDate>
      <link>https://dev.to/fenilmodi00/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-4doe</link>
      <guid>https://dev.to/fenilmodi00/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-4doe</guid>
      <description>&lt;p&gt;Building Full Stack dapps with React, Solana, Anchor, and Phantom wallet.&lt;/p&gt;

&lt;p&gt;In The Complete Guide to Full Stack Ethereum Development I did a deep dive into how to build a full stack dapp on Ethereum, which can also be applied to other EVM compatible chains like Polygon, Avalanche, and Ethereum Layer 2's.&lt;/p&gt;

&lt;p&gt;In this guide, I want to dive into Solana to show you how to build a full stack dapp. I also want to introduce the the ecosystem and the developer tooling to you to hopefully help you get up and running building your own ideas and applications going forward.&lt;/p&gt;

&lt;p&gt;Solana developer overview&lt;br&gt;
As someone who just started learning Solidity and its ecosystem about 6 months ago, I kind of assumed it couldn't be that much harder to get up and running with. I was wrong.&lt;/p&gt;

&lt;p&gt;Parts of the developer tooling are really nice and polished (the Solana CLI and Anchor), while the rest of the ecosystem, and even the documentation for Anchor (which to be fair, is very new), leaves a decent amount to be desired.&lt;/p&gt;

&lt;p&gt;That being said, once you get the hang of everything it quickly becomes much easier to understand how to start implementing your own ideas and begin experimenting.&lt;/p&gt;

&lt;p&gt;One of the keys to finding answers is to be vigilant about searching across all of Google, Github, and especially the various Discord servers for Anchor (project Serum) and Solana. The developers in those channels have been extremely helpful, especially Armani Ferrante who created the Anchor framework&lt;/p&gt;

&lt;p&gt;Project overview&lt;br&gt;
The tooling we'll be using today includes:&lt;/p&gt;

&lt;p&gt;Solana Tool Suite - This includes a really polished and well documented CLI for interacting with the Solana network.&lt;/p&gt;

&lt;p&gt;Anchor Framework - Anchor is actually a life saver for me, and I'm almost certain I would not have been able to get over the hump of building anything without it. It is the Hardhat of Solana development and more, and I love it. It also offers a DSL on top of Rust so that you do not need a deep understanding of the language to get started, though I am still trying to learn Rust as it will probably be useful to build anything non-trivial, even with the DSL. A good free place to learn Rust is The Rust Book.&lt;/p&gt;

&lt;p&gt;solana/web3.js - A Solana version of web3.js that seems to work pretty well, but the documentation was almost unusable for me&lt;/p&gt;

&lt;p&gt;React - The client-side framework&lt;/p&gt;

&lt;p&gt;I will leave off all of the in depth details around how Solana itself works, as other people can cover this better than me. Instead I'll try to just focus on building something and sharing the details that you need to be know to accomplish this, along with things I think are of utmost importance.&lt;/p&gt;

&lt;p&gt;If you want to learn more about Solana and how it works, here are a few good pieces:&lt;/p&gt;

&lt;p&gt;Solana Docs Introduction&lt;/p&gt;

&lt;p&gt;ok so what the fuck is the deal with solana anyway&lt;/p&gt;

&lt;p&gt;Solana Summer&lt;/p&gt;

&lt;p&gt;In this guide we'll focus mainly on project setup, testing, and front end client integration for building out a couple of types of applications, mainly focused on CRUD operations (without the delete of course), which I found to be somewhat undocumented (integration with client applications).&lt;/p&gt;

&lt;p&gt;We'll also learn how to airdrop tokens to our own development accounts using the Solana CLI, and deploy our apps to both a local network as well as a live test network.&lt;/p&gt;

&lt;p&gt;We won't be focusing on NFTs in this guide, but maybe I will focus on doing that in a future guide. For now, if you're interested in building an NFT marketplace on Solana, I recommend checking out Metaplex.&lt;/p&gt;

&lt;p&gt;Prerequisites&lt;br&gt;
This tutorial covers how to build a full stack app on Solana, but does not go into how to install all of the individual dependencies.&lt;/p&gt;

&lt;p&gt;Instead, I will list the dependencies and link to the documentation for how to install them, as each project will be able to explain and document these things better than I ever could, as well as keep them up to date.&lt;/p&gt;

&lt;p&gt;Node.js - I recommend installing Node using either nvm or fnm&lt;/p&gt;

&lt;p&gt;Solana Tool Suite - You can see the installation instructions here. note - I had a very hard time getting everything working on an M1 Mac, mainly solana-test-validator and cargo-build-bpf. I finally figured it out, and posted my solution here. I'm sure at some point this will be fixed and work out of the box.&lt;/p&gt;

&lt;p&gt;Anchor (including the Mocha installation) - Anchor installation was pretty straight-forward for me. You can find the installation instructions here.&lt;/p&gt;

&lt;p&gt;Solana browser wallet - I recommend Phantom, which is what I have tested this app with.&lt;/p&gt;

&lt;p&gt;Getting Started&lt;br&gt;
Before we get started building, let's take a look at the Solana CLI.&lt;/p&gt;

&lt;p&gt;Solana CLI&lt;br&gt;
The main things we'll be doing with the Solana CLI will be configuring our network (between localhost and a developer testnet) as well as airdropping tokens into our wallets, pretty much everything else we'll be doing with the Anchor CLI.&lt;/p&gt;

&lt;p&gt;For instance, we can check the current network (and other) configuration with this command:&lt;br&gt;
solana config get&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  output
&lt;/h1&gt;

&lt;p&gt;Config File: /Users/user/.config/solana/cli/config.yml&lt;br&gt;
RPC URL: &lt;a href="https://api.devnet.solana.com"&gt;https://api.devnet.solana.com&lt;/a&gt;&lt;br&gt;
WebSocket URL: wss://api.devnet.solana.com/ (computed)&lt;br&gt;
Keypair Path: /Users/user/.config/solana/id.json&lt;br&gt;
Commitment: confirmed&lt;br&gt;
If you do not have a Keypair path, set one up by following the instructions here&lt;/p&gt;

&lt;p&gt;We can change the network like so:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-to-localhost"&gt;
  &lt;/a&gt;
  set to localhost
&lt;/h1&gt;

&lt;p&gt;solana config set --url localhost&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-to-devnet"&gt;
  &lt;/a&gt;
  set to devnet
&lt;/h1&gt;

&lt;p&gt;solana config set --url devnet&lt;br&gt;
This is important as you will need to be aware of which network you are using as you're building, testing, and deploying your programs. You also need to be sure your wallet is using the same network that your local environment is using when testing, something I'll cover.&lt;/p&gt;

&lt;p&gt;We'll be starting by developing on a localhost network, then switching to the devnet network.&lt;/p&gt;


&lt;p&gt;We can also use the CLI to see our current local wallet address:&lt;br&gt;&lt;br&gt;
solana address&lt;br&gt;&lt;br&gt;
And then get the full details about an account:&lt;br&gt;&lt;br&gt;
solana account &lt;/p&gt;
&lt;br&gt;&lt;br&gt;
Next let's airdrop some tokens. To do so, first switch to the local network, as this is where we will be working to start off with:&lt;br&gt;&lt;br&gt;
solana config set --url localhost&lt;br&gt;&lt;br&gt;
Next, start the local network. This is going to be a local Solana node that we can deploy to for testing:&lt;br&gt;&lt;br&gt;
solana-test-validator&lt;br&gt;&lt;br&gt;
Once the local network is running, you can airdrop tokens to your account. With the network running, open a separate window and run the following command:&lt;br&gt;&lt;br&gt;
solana airdrop 100&lt;br&gt;&lt;br&gt;
You can the check the balance of your wallet:&lt;br&gt;&lt;br&gt;
solana balance

&lt;h1&gt;
  &lt;a href="#or"&gt;
  &lt;/a&gt;
  or
&lt;/h1&gt;


&lt;p&gt;solana balance &lt;/p&gt;
&lt;br&gt;&lt;br&gt;
You should now have a balance 100 SOL in your wallet. With that, we can get started building.

</description>
    </item>
    <item>
      <title>Github - the developer world continues...</title>
      <author>sai bhargav</author>
      <pubDate>Sat, 18 Sep 2021 15:23:12 +0000</pubDate>
      <link>https://dev.to/choppalibhargav/github-the-developer-world-continues-3hpb</link>
      <guid>https://dev.to/choppalibhargav/github-the-developer-world-continues-3hpb</guid>
      <description>&lt;p&gt;so hey there we are meeting again today so as i told in previous blog now we will discuss about the rest of the topics so lets jump into it&lt;br&gt;
as we discussed in previous blog most known git commands now we are curious about the less known git commands &lt;/p&gt;

&lt;p&gt;less known git commands :&lt;/p&gt;

&lt;p&gt;1.Git Stash&lt;/p&gt;

&lt;p&gt;One of the most delightful git commands is git stash. It keeps all your changes both to tracked files and in your working tree, stashing them away so that you can use them later. Git stash is temporary storage. With it, you can continue working where you left off whenever you are ready. Hence, you will have a clean working tree and can start working on something new. Also, note that git stash will never touch your untracked and ignored files.&lt;/p&gt;

&lt;p&gt;2.Git Rebase&lt;/p&gt;

&lt;p&gt;The git rebase command is used for moving or combining a range of commits to a new base commit. In other words, it can change the basis of the present branch from one commit to another and make the branch look like it was generated from another commit. Note that even if the branch looks identical, it is made of entirely new commits.&lt;br&gt;
This command is primarily used for keeping a linear project history.&lt;/p&gt;

&lt;p&gt;3.Git Diff&lt;/p&gt;

&lt;p&gt;The git diff command is used for comparing the changes committed in Git. This command will help you take two input data groups outputting the modifications between them. When you execute this command, it runs a diff function on the data source of Git. You can use it in compound with the git status and the git log commands.&lt;/p&gt;

&lt;p&gt;4.Git Reset&lt;/p&gt;

&lt;p&gt;Git reset is another powerful command which allows undoing your changes easily. This command is generally used for returning the entire working tree to the last committed state. It will discard a private branch commits or throw away the changes that have not been committed. The git reset command will also help you to unstage a file in Git.&lt;br&gt;
Generally, in Git every command allows undoing some changes, but only git reset and git checkout can be used for manipulating either individual files or commits.&lt;/p&gt;

&lt;p&gt;5.Git Blame&lt;/p&gt;

&lt;p&gt;Git blame is simply a great tracking command. It is aimed at showing the author information of every line of your project’s latest modified file. Hence, you can use it to find the author’s name and email address, or the commit hash of the last modified source file.&lt;/p&gt;

&lt;p&gt;6.Git-am&lt;/p&gt;

&lt;p&gt;The next rarely used but super-useful command is git-am. You can use it for applying a series of patches from a mailbox. It allows splitting mail messages in a mailbox onto commit log message, authorship information, and patches. Git-am applies all of them to the current branch.&lt;/p&gt;

&lt;p&gt;7.Git Cherry-pick&lt;/p&gt;

&lt;p&gt;Git cherry-pick is robust and not a famous command at the same time. It represents an act of picking a commit from a branch and applying it to another one. It can be related to the powerful Git tools used for undoing changes. Let’s say you have accidentally made a commit in the wrong branch. This command will let you switch to the desired branch and cherry-pick your commit to the place it should belong.&lt;/p&gt;

&lt;p&gt;What is git branching&lt;/p&gt;

&lt;p&gt;Branching is a feature available in most modern version control systems. Instead of copying files from directory to directory, Git stores a branch as a reference to a commit. In this sense, a branch represents the tip of a series of commits—it's not a container for commits this is like parent child relation where the child branch will inherit the parent when the work is done it will merge into parent to create a unified branch.&lt;/p&gt;

&lt;p&gt;So the last part is commit messages&lt;/p&gt;

&lt;p&gt;what is commit message&lt;/p&gt;

&lt;p&gt;The commit command is used to save changes to a local repository after staging in Git. However, before you can save changes in Git, you have to tell Git which changes you want to save as you might have made tons of edits to keep the record of what are the work you have done we do commit messages.&lt;/p&gt;

&lt;p&gt;what are good commit messages:&lt;/p&gt;

&lt;p&gt;1.feat: The new feature you're adding to a particular application&lt;br&gt;
2.fix: A bug fix&lt;br&gt;
3.style: Feature and updates related to styling&lt;br&gt;
4.refactor: Refactoring a specific section of the codebase&lt;br&gt;
5.test: Everything related to testing&lt;br&gt;
6.docs: Everything related to documentation&lt;br&gt;
7.chore: Regular code maintenance.[ You can also use emojis to represent commit types]&lt;/p&gt;

&lt;p&gt;so these are some commit messages so whenever we commit changes it is a best practice to write commit messages which helps us and others to understand.&lt;/p&gt;

&lt;p&gt;so this is it for todays blog i hope you enjoyed well and got some grasp of good knowledge so lets meet in another blog with some information.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Add new fields in Jquery</title>
      <author>MOHSIN ALI SOOMRO</author>
      <pubDate>Sat, 18 Sep 2021 15:16:53 +0000</pubDate>
      <link>https://dev.to/mohsinalisoomro/add-new-fields-in-jquery-147g</link>
      <guid>https://dev.to/mohsinalisoomro/add-new-fields-in-jquery-147g</guid>
      <description>&lt;h1&gt;
  &lt;a href="#here-is-the-code-snapshot"&gt;
  &lt;/a&gt;
  Here is the code Snapshot
&lt;/h1&gt;

&lt;p&gt;Simple Form with classes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0hPrAfb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei2kwdnk6hvdmuxwznm7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0hPrAfb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei2kwdnk6hvdmuxwznm7.png" alt="show"&gt;&lt;/a&gt;&lt;br&gt;
The div that copy on each time&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SEMsiC6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm8wlyfmi8jk8mrxxqur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEMsiC6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm8wlyfmi8jk8mrxxqur.png" alt="code-snapshot"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>EBC - Everything But Code</title>
      <author>Amy Hudspith</author>
      <pubDate>Sat, 18 Sep 2021 15:11:19 +0000</pubDate>
      <link>https://dev.to/huddlespith/ebc-everything-but-code-2lef</link>
      <guid>https://dev.to/huddlespith/ebc-everything-but-code-2lef</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-to-everything-but-code"&gt;
  &lt;/a&gt;
  Welcome to Everything But Code!
&lt;/h2&gt;

&lt;p&gt;This is going to be a series of posts covering what I feel are the most important/useful topics in programming that aren't writing the actual code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-surely-the-code-is-the-most-important-thing"&gt;
  &lt;/a&gt;
  &lt;em&gt;But surely the code is the most important thing?&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;True! Having the slickest workflow means nothing if the code you end up writing doesn't work. But I think that having a good setup can help you to write code more efficiently and accurately, which will ultimately lead to better code!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ok-but-i-already-have-a-setup-why-should-i-read-this"&gt;
  &lt;/a&gt;
  &lt;em&gt;Ok, but I already have a setup, why should I read this?&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;It is easy to get comfortable with a particular way of coding, and you may think it won't be worth the time adjusting to a new system, especially if you don't know for certain that it will lead to an improvement. I would encourage you to give any concepts you read here a long think before trying so that you spend that precious time on solutions you do feel could improve your coding. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0yeah-but-i-know-i-have-the-best-setup-i-spent-ages-researching-it-4-years-ago"&gt;
  &lt;/a&gt;
   &lt;em&gt;Yeah, but, I know I have the best setup, I spent ages researching it 4 years ago!&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;You are probably right that your setup was the best for you ... 4 years ago. But in the four following years not only will new systems and technologies have been created, but you will also have changed. I feel that it is worth having a look at your setup every so often to ensure it is still the best for you that it possibly can.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hold-up-im-a-complete-newbie-can-we-slow-down"&gt;
  &lt;/a&gt;
  &lt;em&gt;Hold up, I'm a complete newbie, can we slow down?&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Absolutely! Several of the posts in this series may be discussing things that you have never heard of before. Don't expect yourself to read through everything in one weekend and come out with the best setup ever; take your time and slowly introduce things to your workflow over time. This will allow you to adjust much more easily to each thing you introduce and give you the time and space to make sure you understand how each new introduction works with the systems you already have in place. &lt;/p&gt;

</description>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Map, filter, and reduce method in JavaScript</title>
      <author>Aryan Sharma</author>
      <pubDate>Sat, 18 Sep 2021 15:11:00 +0000</pubDate>
      <link>https://dev.to/sharmaryan/map-filter-and-reduce-method-in-javascript-2d2l</link>
      <guid>https://dev.to/sharmaryan/map-filter-and-reduce-method-in-javascript-2d2l</guid>
      <description>&lt;p&gt;I see a lot of peoples are getting confused when it comes to map, filter, and reduce method in JavaScript. Let's understand these array methods, one by one. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-map-method"&gt;
  &lt;/a&gt;
  1. Map() method
&lt;/h2&gt;

&lt;p&gt;Whenever we apply map method on an existing array we will get a new array, because of this our original array remain the same, its value will not change.&lt;/p&gt;

&lt;p&gt;In simple words we can say that, with the help of map method we can transform an array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have a look at the syntax of the map method.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l3aomG0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jECu5VIAQNk0S%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l3aomG0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jECu5VIAQNk0S%3Fformat%3Djpg%26name%3Dlarge" alt="map method syntax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array:&lt;/strong&gt; This is the original array on which we want to perform map method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;callback:&lt;/strong&gt; This is the function that will be called for every element of the original Array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;value:&lt;/strong&gt; It is value we get from original array and can make changes to it. We will understand it with the help of an example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index:&lt;/strong&gt; It is the index of the value, it is optional.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;array:&lt;/strong&gt; It is the original array, it gives the same array on each iteration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's understand with example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bjA2rS4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_irJD2VgAIkX0c%3Fformat%3Djpg%26name%3Dmedium" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bjA2rS4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_irJD2VgAIkX0c%3Fformat%3Djpg%26name%3Dmedium" alt="map method example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, first we have created an array name originalArr with some numbers. And after that we are console logging the value in originalArr. &lt;br&gt;
Now we are using map method over originalArr to get multiple of 2 of each element in the originalArr.&lt;/p&gt;

&lt;p&gt;On the other hand, map method will return all the values to the array name newArr by multiplying them with 2.&lt;/p&gt;

&lt;p&gt;Now we will check the originalArr, it will remain the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-filter-method"&gt;
  &lt;/a&gt;
  2. Filter() method
&lt;/h2&gt;

&lt;p&gt;This method is used for filtering out the values from an Array based on some logic.&lt;/p&gt;

&lt;p&gt;What I mean by this:&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
Consider this array of numbers,&lt;/p&gt;

&lt;p&gt;const numberOneToHundred = [1,2,3,.....,100];&lt;/p&gt;

&lt;p&gt;someone says get all the even number from this given array, or&lt;br&gt;
get all the numbers that are greater than 50,&lt;br&gt;
or get all the numbers which are divisible by 10.&lt;br&gt;
So in all of the above examples we are using filter method to get all the values from an array based on some logic.&lt;/p&gt;

&lt;p&gt;First we see the syntax and then we move on the example of the filter method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nNC06U26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jEyI0VQAMcxGS%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nNC06U26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jEyI0VQAMcxGS%3Fformat%3Djpg%26name%3Dlarge" alt="filter method syntax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Filter method example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R0FgxEI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jG4inVEAc9qKO%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R0FgxEI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jG4inVEAc9qKO%3Fformat%3Djpg%26name%3Dlarge" alt="filter method example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, we have an array of age of all members in the family, now we will look after for those people only who are above 18.&lt;/p&gt;

&lt;p&gt;So filter method will filter out all the values which are greater than 18 and return a new array to the whoCanDriveCar variable.&lt;br&gt;
And the original array will remain the same, filter method will return a newly created array.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-reduce-method"&gt;
  &lt;/a&gt;
  3. Reduce() method
&lt;/h2&gt;

&lt;p&gt;We use reduce method where we want to come up with a single value from a given array.&lt;/p&gt;

&lt;p&gt;When you look at the meaning of reduce you will find that to make something smaller or less, so that is what reduce() method is doing.&lt;/p&gt;

&lt;p&gt;For example: On applying reduce method on an array of numbers, we can find out the sum of all the digits, and come up with the single value. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cY_UVDO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jO1pTVIAM-f3k%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cY_UVDO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jO1pTVIAM-f3k%3Fformat%3Djpg%26name%3Dlarge" alt="reduce method syntax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;reduce method example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PkBi5IRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jTTl0VIAI6-KI%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PkBi5IRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jTTl0VIAI6-KI%3Fformat%3Djpg%26name%3Dlarge" alt="reduce method example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, we are getting sum of the values in the numbers array. In the callback method we have two parameters: accumulator, and value. What accumulator is doing in the above code is, it is storing the result on each iteration of the reduce method on callback function.&lt;br&gt;
The second argument in the reduce method is initialValue of the accumulator, which in this case is initialised with 0.&lt;br&gt;
So what actually happened here, from a given array, we come up with a single value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is my first post, if I miss something, then please let me know, your feedback will be really helpful. &lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Getting started with React Ink</title>
      <author>Anish De</author>
      <pubDate>Sat, 18 Sep 2021 15:02:57 +0000</pubDate>
      <link>https://dev.to/anishde12020/getting-started-with-react-ink-36po</link>
      <guid>https://dev.to/anishde12020/getting-started-with-react-ink-36po</guid>
      <description>&lt;p&gt;Have you ever wondered if you can use React for the command-line interface (CLI)? Yes, you can!!! React is not only used for web development but also for making Android and iOS apps &lt;a href="https://reactnative.dev/"&gt;(React Native)&lt;/a&gt; and VR Apps &lt;a href="https://github.com/facebookarchive/react-360#readme"&gt;(React 360)&lt;/a&gt; and a lot more!!! &lt;a href="https://github.com/vadimdemedes/ink"&gt;React Ink&lt;/a&gt; is used to build CLI apps with React and it is very easy to get started so let us get started.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-react-ink-project"&gt;
  &lt;/a&gt;
  Creating a React Ink Project
&lt;/h1&gt;

&lt;p&gt;For this example, I am going to be using &lt;a href="https://codesandbox.io/"&gt;CodeSandBox&lt;/a&gt; but you can use anything you wish to as long you have Node v10 or higher and npm installed.&lt;/p&gt;

&lt;p&gt;To get started we will firstly make a new directory and move into it (note that you shouldn't do this if you are using a cloud IDE like codesandbox or stackblitz)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir react-ink
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd react-ink
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to create an ink app and we can do that using &lt;a href="https://github.com/vadimdemedes/create-ink-app"&gt;&lt;code&gt;create-ink-app&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-ink-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using an older version of npm, you might not have npx installed, in that case, you can install the &lt;code&gt;create-ink-app&lt;/code&gt; cli and use that.&lt;br&gt;
To install the cli, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g create-ink-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can just run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;create-ink-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now pat yourself on the back, you have successfully created a React Ink project. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#playing-around-with-the-started-code"&gt;
  &lt;/a&gt;
  Playing around with the started code
&lt;/h1&gt;

&lt;p&gt;This is how our directory structure should look like - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3OiLREe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631959617867/3aTrdqVMQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3OiLREe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631959617867/3aTrdqVMQ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us look at these files one by one&lt;/p&gt;

&lt;p&gt;First we have &lt;code&gt;ui.js&lt;/code&gt;. This is where you will write your React code. This is what we should be seeing in the file right now -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stranger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all, React is imported. Text is a JSX Component that is used to show any text in the CLI. Here the App takes in a prop, name and says "Hello, " if the name is supplied or else it would say "Hello, Stranger". Also, notice how the name is styled with a green text color. Now you might ask from where is the name prop coming? If you see &lt;code&gt;cli.js&lt;/code&gt;, you will find the answer.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cli.js&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env node
&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;importJsx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;import-jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;meow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ui&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;importJsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ui&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cli&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;meow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
    Usage
      $ sandbox

    Options
        --name  Your name

    Examples
      $ sandbox --name=Jane
      Hello, Jane
`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the App component is being imported using a special &lt;code&gt;importJSX&lt;/code&gt; command. &lt;a href="https://www.npmjs.com/package/meow"&gt;Meow&lt;/a&gt; is a library that allows us to make interactive CLIs. Here look at the &lt;code&gt;render&lt;/code&gt; statement. A React element is being created where the App Element is passed as the first argument (ie the JSX part of the element) and then &lt;code&gt;cli.flags&lt;/code&gt; is an arrow of props that will be passed into the element. This is where the name prop is coming from!!!&lt;/p&gt;

&lt;p&gt;Now if we run &lt;code&gt;node cli.js&lt;/code&gt;, the code will be run. Running it with no arguments will yield the following result -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node cli.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K9MFH0ZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631960251325/adxkMN0J6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9MFH0ZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631960251325/adxkMN0J6.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let us pass in the name flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node cli.js --name=&amp;lt;yourName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace yourName with your name and see the output&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LXCt6MLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631960380982/DNUy3vYvU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXCt6MLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631960380982/DNUy3vYvU.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Codesandbox - &lt;/p&gt;

&lt;p&gt;Use the terminal to run the file and ignore the browse preview&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/hardcore-greider-i6kjn"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h1&gt;

&lt;p&gt;React Ink supports typescript as well and that is awesome so let us take a look at it. To start a react-ink project with typescript, we need to pass in the typescript flag.&lt;/p&gt;

&lt;p&gt;Firstly let us make a directory and move into it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir react-ink-ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd react-ink-ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us create a typescript React Ink project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-ink-app --typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using an older version of npm, you might not have npx installed, in that case, you can install the &lt;code&gt;create-ink-app&lt;/code&gt; cli and use that.&lt;br&gt;
To install the cli, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g create-ink-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can just run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;create-ink-app --typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time the directory structure is significantly different - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DPpC9-Fq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631961299423/nMcCOkwz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DPpC9-Fq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631961299423/nMcCOkwz0.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a source folder where all the typescript files are stored. Whenever we run &lt;code&gt;npm start&lt;/code&gt;, the typescript is compiled into javascript and the output is stored in the &lt;code&gt;dist&lt;/code&gt; folder. Most of the other things are the same. Keep in mind that the &lt;code&gt;cli.js&lt;/code&gt; file in the &lt;code&gt;dist&lt;/code&gt; folder is the main executable file.&lt;/p&gt;

&lt;p&gt;Codesandbox - &lt;/p&gt;

&lt;p&gt;Use the terminal to run the file and ignore the browse preview&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/billowing-https-qkx6h"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#symlink"&gt;
  &lt;/a&gt;
  Symlink
&lt;/h1&gt;

&lt;p&gt;One thing you might have noticed is that when you run &lt;code&gt;create-ink-app&lt;/code&gt;, it links the project. What is exactly happening? A symlink is created which allows you to run a command that invoked the cli.js file of this specific project. If you run your directory name as a command, you will see the same result as &lt;code&gt;node cli.js&lt;/code&gt; or &lt;code&gt;node dist/cli.js&lt;/code&gt; in the case of typescript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PuRmnlP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631962074043/jUNFZANdV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PuRmnlP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631962074043/jUNFZANdV.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Github - A Developer World</title>
      <author>sai bhargav</author>
      <pubDate>Sat, 18 Sep 2021 15:00:43 +0000</pubDate>
      <link>https://dev.to/choppalibhargav/github-a-developer-world-36m2</link>
      <guid>https://dev.to/choppalibhargav/github-a-developer-world-36m2</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;whenever you hear this word 'github' from a developer or your friends so a question pops up in your head 'what is github' 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;What is Github?&lt;/p&gt;

&lt;p&gt;Github is a provider of internet hosting for software development and version control using Git. It offers the distributed version control and source code management functionality of Git, plus its own features. so normally it helps developers to learn and contribute their work in internet.so this is the work of github and you might heard the word repository&lt;/p&gt;

&lt;p&gt;What is repository?&lt;/p&gt;

&lt;p&gt;A repository contains all of your project's files and each file's revision history. You can discuss and manage your project's work within the repository.&lt;br&gt;
    so this is repository it helps us to keep record of our work.&lt;/p&gt;

&lt;p&gt;what are alternatives of github?&lt;/p&gt;

&lt;p&gt;Top 5 Alternatives To GitHub&lt;br&gt;
    Bitbucket.&lt;br&gt;
    GitLab.&lt;br&gt;
    Google Cloud Source Repositories.&lt;br&gt;
    Phabricator.&lt;br&gt;
    RhodeCode.&lt;br&gt;
so these are the alternatives which I explored which quite well function but they are less popular mostly in github most of the opensouce contribution are done. Now you quite well know about github and its uses now you might be curious what are the commands in github.&lt;/p&gt;

&lt;p&gt;What are top git commands are used always?&lt;/p&gt;

&lt;p&gt;Top Git Commands for Developers :&lt;/p&gt;

&lt;p&gt;1.Git Init&lt;br&gt;
2.Git Clone&lt;br&gt;
3.Git Branch&lt;br&gt;
4.Git Checkout&lt;br&gt;
5.Git Add&lt;br&gt;
6.Git Commit&lt;br&gt;
7.Git Push&lt;br&gt;
8.Git Pull&lt;br&gt;
9.Git Diff&lt;br&gt;
10.Git Stash&lt;br&gt;
11.Git Status&lt;br&gt;
12.Git Log&lt;br&gt;
13.Git Merge&lt;/p&gt;

&lt;p&gt;Let's jump in and look at each of them in detail.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Init&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The git init command is usually the first command you’d run in any new project that is not already a Git repository (also commonly called repo).&lt;/p&gt;

&lt;p&gt;It can be used to convert an existing, un-versioned folder into a Git repository. Also, you can use it to initialize an empty repo.&lt;/p&gt;

&lt;p&gt;Using Git Init Command&lt;/p&gt;

&lt;p&gt;cd into the directory you want to initialize.&lt;/p&gt;

&lt;p&gt;Then, run this command.&lt;/p&gt;

&lt;p&gt;$ git init&lt;/p&gt;

&lt;p&gt;This will transform the current directory into a Git repository. A .git sub-directory will be added. This will allow you to start recording multiple versions of your project.&lt;/p&gt;

&lt;p&gt;Note: Running git init on an already initialized directory will not override any of your settings.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Clone&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The git clone command is used to download the source code from a remote repository (like GitHub, Bitbucket, or GitLab).&lt;/p&gt;

&lt;p&gt;Using Git Clone Command&lt;/p&gt;

&lt;p&gt;$ git clone (&lt;a href="https://url-of-the-repository"&gt;https://url-of-the-repository&lt;/a&gt;)&lt;br&gt;
When you clone a repo, the code is automatically downloaded to your local machine.&lt;/p&gt;

&lt;p&gt;As a convenience, the downloaded version is linked to the origin (the repository from where you downloaded). I say this is a convenience because when you’re collaborating on the same project, you’d want to push your changes (more on that below) to a single repo.&lt;/p&gt;

&lt;p&gt;But sometimes, people wouldn’t want to have this link. If your use case is similar, run&lt;/p&gt;

&lt;p&gt;$ git remote rm origin&lt;br&gt;
This will disassociate the downloaded current repository from the origin.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Branch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Branch is one of the most important functionalities of Git. This allows teams to work on the same code base in parallel. It enables teams to create Git Workflows and make their workflows more efficient.&lt;/p&gt;

&lt;p&gt;Say, you’re working on “Feature A”. And your teammate is working on “Feature B”. By creating a separate branch for each feature, both of you can work on the same code base in parallel without having to worry about conflicts (at least while you’re writing the code).&lt;/p&gt;

&lt;p&gt;You can use this command to create a new branch, view existing branches, or delete a branch.&lt;/p&gt;

&lt;p&gt;Using Git Branch to create a new branch&lt;/p&gt;

&lt;p&gt;$ git branch (branch-name)&lt;br&gt;
This command will create a new branch only in your local system. If you want this to be visible to all the members in the repo, you’ll still have to push the branch.&lt;/p&gt;

&lt;p&gt;To push a newly created branch, run git push -u (remote) (branch-name)&lt;/p&gt;

&lt;p&gt;Command to view all branches&lt;/p&gt;

&lt;p&gt;$ git branch&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;$ git branch --list&lt;br&gt;
Git command to delete a branch&lt;/p&gt;

&lt;p&gt;$ git branch -d (branch-name)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Checkout&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A mistake I often made when I first started learning git commands was forgetting to switch to the new branch I just created. Yes, after you create a branch, you’ll have to switch to it with another command. That’s where the Git Checkout command comes in.&lt;/p&gt;

&lt;p&gt;Using Git Checkout Command&lt;/p&gt;

&lt;p&gt;$ git checkout (branch-name)&lt;br&gt;
This will automatically switch you to the branch name you mentioned in the command.&lt;/p&gt;

&lt;p&gt;However, when switching from one branch to another, you need to keep two things in mind:&lt;/p&gt;

&lt;p&gt;If you made some changes in the previous branch, you will have to first commit and push them (I’ll cover this command below) to your remote repo.&lt;br&gt;
The branch you want to switch must be present in your local system. If not, you can pull them (covered below).&lt;br&gt;
If you’re as lazy as I am, I’m sure you’d want one single command that will both create a new branch and automatically switch to it.&lt;/p&gt;

&lt;p&gt;The below command does exactly that.&lt;/p&gt;

&lt;p&gt;$ git checkout -b (branch-name)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Add&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Every time you create a new file, delete it, or make a change, you’ll have to tell Git to track it and add it to the staging area. Otherwise, the files you made changes to wouldn’t be added when you try to push your changes.&lt;/p&gt;

&lt;p&gt;Using Git Add Command&lt;/p&gt;

&lt;p&gt;$ git add (file-name)&lt;br&gt;
This command will add only a single file to your next commit. If you want to add all the files to which changes were made, you can use&lt;/p&gt;

&lt;p&gt;$ git add -A&lt;br&gt;
It’s important to remember that using git add will not make any changes in the remote repository. Your changes will be recorded only when you commit them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Commit&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Think of Git Commit command like a checkpoint in your development process.&lt;/p&gt;

&lt;p&gt;It’s commonly used to save your changes. Maybe after completing a specific work item assigned to you in your agile tool.&lt;/p&gt;

&lt;p&gt;Every time you commit your code changes, you’ll also include a message to briefly describe the changes you made. This helps other team members quickly understand what was added, changed, or removed.&lt;/p&gt;

&lt;p&gt;Using Git Commit Command&lt;/p&gt;

&lt;p&gt;$ git commit -a&lt;br&gt;
This will commit all the changes in the directory you’re working in. Once this command is run, you’ll be prompted to enter a commit message.&lt;/p&gt;

&lt;p&gt;Alternatively, you can enter the commit message in the command itself and skip the additional step where you’ll be prompted to enter the commit message.&lt;/p&gt;

&lt;p&gt;To do this, run the following git command:&lt;/p&gt;

&lt;p&gt;$ git commit -am “(commit-message)”&lt;br&gt;
Note: The git commit command saves the changes only in your local repository. It does not push to the remote origin and make your changes accessible for others to collaborate.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Push&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To make all your committed changes available to your teammates, you’ll have to push them to the remote origin.&lt;/p&gt;

&lt;p&gt;Using Git Push Command&lt;/p&gt;

&lt;p&gt;$ git push (remote) (branch-name)&lt;br&gt;
It’s important to remember that git push command will upload only the changes you’ve committed.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Pull&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, you’d want to have the latest updates from teammates as well!&lt;/p&gt;

&lt;p&gt;The git pull command allows you to fetch all the changes that your teammates pushed and automatically merge them into your local repo.&lt;/p&gt;

&lt;p&gt;Using Git Pull Command&lt;/p&gt;

&lt;p&gt;$ git pull (remote)&lt;br&gt;
In many cases, you will run into conflict because you had changed a line in a file that another teammate added. In such cases, you need to resolve the conflicts manually.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Diff&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Git Diff is my go-to command when I want to quickly see the difference between my current branch and another branch (usually the branch I’m merging into).&lt;/p&gt;

&lt;p&gt;Using Git Diff Command&lt;/p&gt;

&lt;p&gt;$ git diff&lt;br&gt;
This will show you any uncommitted changes in your local repo.&lt;/p&gt;

&lt;p&gt;To compare two branches&lt;/p&gt;

&lt;p&gt;$ git diff branch1..branch2&lt;br&gt;
This will show all the file differences between the two branches.&lt;/p&gt;

&lt;p&gt;To compare a file from two branches&lt;/p&gt;

&lt;p&gt;$ git diff branch1 branch2 ./path/to/file.txt&lt;br&gt;
This command will show a comparison of the changes made to file file.txt across the branches branch1 and branch2.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Stash&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Git Stash temporarily shelves your work, so you can switch to another branch, work on something else, and then come back to this at a later time.&lt;/p&gt;

&lt;p&gt;It’s perfect if you need to work on something else and you’re midway through a code change, but aren’t ready to commit the code.&lt;/p&gt;

&lt;p&gt;Using Git Stash Save Command&lt;/p&gt;

&lt;p&gt;$ git stash save “(stash-message)”&lt;br&gt;
This will stash your changes with the message you entered. This can be helpful when you want to come back and restore your stash, especially when you have several stashes.&lt;/p&gt;

&lt;p&gt;However, this will only stash your tracked files that you added using git add. If you want to include the untracked files as well, run&lt;/p&gt;

&lt;p&gt;$ git stash save -u&lt;br&gt;
Using Git Stash List Command&lt;/p&gt;

&lt;p&gt;When you want to view all the stashed code, you can view them using this command. Once you stash your code, git will assign a stash id, so you can restore a specific stashed code later.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;$ git stash list&lt;br&gt;
This might show the following&lt;/p&gt;

&lt;p&gt;stash@{0}: On master: Stashed with message1&lt;br&gt;
stash@{1}: On master: Stashed with message2&lt;br&gt;
Using Git Stash Apply Command&lt;/p&gt;

&lt;p&gt;This will automatically restore and apply the topmost stash in the stack.&lt;/p&gt;

&lt;p&gt;$ git stash apply&lt;br&gt;
If you want to restore a specific stash that you want to apply, using the above example, you can simply run git stash apply stash@{1}.&lt;/p&gt;

&lt;p&gt;Note: When you use git stash apply, the stashed version will be applied to your current working branch. However, it will not delete the stash from the stack.&lt;/p&gt;

&lt;p&gt;Using Git Stash Pop Command&lt;/p&gt;

&lt;p&gt;To automatically also delete the stash from the stack, the git stash pop command is used.&lt;/p&gt;

&lt;p&gt;If you want to do it for a specific stash in the stack, run git stash pop stash@{0}.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Status&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When you’re feeling a bit lost with what’s happened in your repo (yes, it can happen) the Git Status command can tell you all the information you’ll need to know.&lt;/p&gt;

&lt;p&gt;Using Git Status Command&lt;/p&gt;

&lt;p&gt;$ git status&lt;br&gt;
This can give you information such as:&lt;/p&gt;

&lt;p&gt;Your current branch&lt;br&gt;
Whether your current branch is up to date&lt;br&gt;
If there’s anything in the branch that needs to be committed, pushed, or pulled.&lt;br&gt;
If you have any files that are either staged or not staged.&lt;br&gt;
And if you have any files that are created, modified, or deleted.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Log
While git status gave you nearly all the information you’d have needed, it wouldn’t give you the information about the commit history for the repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is where the git log command comes into the picture.&lt;/p&gt;

&lt;p&gt;Using Git Log Command&lt;/p&gt;

&lt;p&gt;$ git log&lt;br&gt;
This displays the entire commit history. If your commit history is large, it’ll show only a portion of it and you can hit [space] to scroll or type q to quit.&lt;/p&gt;

&lt;p&gt;If you want to view only the last 3 commit history, you can use the following command: git log -n 3.&lt;br&gt;
To condense the commit history into a single line and view them, run git log --oneline. This is the easiest way to get a high level overview of all the commit history. It might still be a bit too much if you’ve got a lot of commits.&lt;br&gt;
If you want to view the commit history by a specific author, run git log --author"(author-username)".&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Merge
Once you’re done with development inside your feature branch and tested your code, you can merge your branch with the parent branch. This could be either a develop branch or a master branch depending on the git workflow you follow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When running a git merge command, you first need to be on the specific branch that you want to merge with your feature branch.&lt;/p&gt;

&lt;p&gt;Let’s see how to use the git merge command with an example.&lt;/p&gt;

&lt;p&gt;Using Git Merge Command&lt;/p&gt;

&lt;p&gt;Imagine you’re currently in your feature branch called feature1 and you’re ready to merge it to the develop branch.&lt;/p&gt;

&lt;p&gt;We must first switch to the develop branch using the checkout command.&lt;/p&gt;

&lt;p&gt;$ git checkout develop&lt;br&gt;
Before merging, you must make sure that you update your local develop branch. This is important because your teammates might’ve merged into the develop branch while you were working on your feature. We do this by running the pull command.&lt;/p&gt;

&lt;p&gt;$ git pull&lt;br&gt;
If there are no conflicts while pulling the updates, you can finally merge your feature1 branch into the develop branch.&lt;/p&gt;

&lt;p&gt;We do this by using the git merge command followed by the branch name that we want to merge into our current branch.&lt;/p&gt;

&lt;p&gt;this is enough i will write more on next blog if i  write here it will be overwhelming so thankyou for keeping up with me so lets meet on next blog.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Matrizes ou Arrays Multidimensionais</title>
      <author>ananopaisdojavascript</author>
      <pubDate>Sat, 18 Sep 2021 14:56:59 +0000</pubDate>
      <link>https://dev.to/ananopaisdojavascript/matrizes-ou-arrays-multidimensionais-6be</link>
      <guid>https://dev.to/ananopaisdojavascript/matrizes-ou-arrays-multidimensionais-6be</guid>
      <description>&lt;h2&gt;
  &lt;a href="#alerta"&gt;
  &lt;/a&gt;
  ⚠️ ALERTA!!!! ⚠️
&lt;/h2&gt;

&lt;p&gt;Matrizes não são algo que vemos com frequência no JS. Coloquei aqui mais por conhecimento mesmo e porque elas existem.&lt;/p&gt;

&lt;p&gt;As matrizes são vetores de duas ou mais dimensões (&lt;strong&gt;&lt;em&gt;arrays&lt;/em&gt;&lt;/strong&gt; multidimensionais) que também guardam elementos do mesmo tipo. Essa funcionalidade não existe no JS, porém podemos criá-la da seguinte forma: fazendo um &lt;strong&gt;&lt;em&gt;array&lt;/em&gt;&lt;/strong&gt; principal e, dentro, colocar outros &lt;strong&gt;&lt;em&gt;arrays&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exemplo"&gt;
  &lt;/a&gt;
  Exemplo
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numeros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numeros&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O resultado aparece assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*

"1,2,3,4,5

6,7,8,9,10"

*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#e-como-eu-fa%C3%A7o-para-mostrar-um-determinado-elemento-dessa-matriz"&gt;
  &lt;/a&gt;
  E como eu faço para mostrar um determinado elemento dessa matriz?!
&lt;/h3&gt;

&lt;p&gt;É só fazer assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numeros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numeros&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numeros&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;É melhor explicar:&lt;/p&gt;

&lt;p&gt;A matriz &lt;code&gt;numeros&lt;/code&gt; consiste em dois vetores com cinco elementos cada. O primeiro índice entre colchetes refere-se ao &lt;strong&gt;índice do vetor (linha)&lt;/strong&gt;, enquanto que o segundo índice refere-se ao &lt;strong&gt;elemento que está dentro desse vetor (coluna)&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#como-fa%C3%A7o-para-percorrer-e-mostrar-todos-os-elementos-da-matriz"&gt;
  &lt;/a&gt;
  Como faço para percorrer e mostrar todos os elementos da matriz?
&lt;/h3&gt;

&lt;p&gt;Vamos usar o laço &lt;code&gt;for of.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;numeros&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ou podemos usar &lt;code&gt;for in&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;numeros&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E aí? Gostaram? Até a próxima anotação! 😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>0 downtime is hell, so prepare in advance</title>
      <author>Eduard Romanyuk</author>
      <pubDate>Sat, 18 Sep 2021 14:43:23 +0000</pubDate>
      <link>https://dev.to/eduardromanyuk/0-downtime-is-hell-so-prepare-in-advance-5pd</link>
      <guid>https://dev.to/eduardromanyuk/0-downtime-is-hell-so-prepare-in-advance-5pd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Quick introduction to what is blue-green deployment with some useful links at the end&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preamble"&gt;
  &lt;/a&gt;
  Preamble
&lt;/h2&gt;

&lt;p&gt;Some time ago my team lead said me prepare a document about "0 downtime" deployment for developers usage. I knew something about it and thought that it would be easy task for me, but after some research I understand that it is about an endless rabbit hole. And if you want to implement "0 downtime" deployment you need to be very very cautious and better double-check everything. This post just a warning for you my dear friend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bluegreen-deployment"&gt;
  &lt;/a&gt;
  Blue-green deployment
&lt;/h2&gt;

&lt;p&gt;I will not lie to you. It is the only technique I know, so let's check its basic idea. &lt;a href="https://martinfowler.com/bliki/BlueGreenDeployment.html"&gt;Martin Fowler article&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Blue-green deployment is an application release model that gradually transfers user traffic from a previous version of an app or microservice to a nearly identical new release—both of which are running in production.&lt;/p&gt;

&lt;p&gt;The old version can be called the blue environment while the new version can be known as the green environment. Once production traffic is fully transferred from blue to green, blue can standby in case of rollback.&lt;br&gt;
© &lt;a href="https://www.redhat.com/en/topics/devops/what-is-blue-green-deployment"&gt;RedHat&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds pretty easy, but the hardest part of this it is making incompatible changes in compatible way (remember that you try to run previous and current version at the same time). So wherever you have separate layers you need to think about compatibility (client-server, server-database, etc.)&lt;/p&gt;

&lt;p&gt;I will not give you any practical advice, because I have only theoretical knowledge about this topic yet. So check more experienced authors by the links below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-materials"&gt;
  &lt;/a&gt;
  Useful materials
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/bliki/BlueGreenDeployment.html"&gt;Blue-green deployment @ Martin Fowler blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.redhat.com/en/topics/devops/what-is-blue-green-deployment"&gt;What is blue green deployment? @ RedHat blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spring.io/blog/2016/05/31/zero-downtime-deployment-with-a-database"&gt;Zero Downtime Deployment with a Database @ Spring Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LQI19ngeLsA"&gt;Zero downtime deployment with Kubernetes, Spring Boot and Flyway @ DevOps Days YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.braintreepayments.com/blog/safe-operations-for-high-volume-postgresql/"&gt;Safe Operations For High Volume PostgreSQL @ braintreepayments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gocardless.com/blog/zero-downtime-postgres-migrations-the-hard-parts/"&gt;Zero-downtime Postgres migrations - the hard parts @ gocardless&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#afterword"&gt;
  &lt;/a&gt;
  Afterword
&lt;/h2&gt;

&lt;p&gt;Hope this post was useful for you guys. Feel free to share any feedback or thoughts.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>postgres</category>
      <category>0downtime</category>
    </item>
    <item>
      <title>5chan - The 4chan clone with NextJs</title>
      <author>Navin Kodag</author>
      <pubDate>Sat, 18 Sep 2021 14:35:42 +0000</pubDate>
      <link>https://dev.to/100lvlmaster/5chan-the-4chan-clone-with-nextjs-3969</link>
      <guid>https://dev.to/100lvlmaster/5chan-the-4chan-clone-with-nextjs-3969</guid>
      <description>&lt;p&gt;This the continuation of the 5chan project : we've already discussed the Design and API&lt;br&gt;
So for the final step I'll create the frontend.&lt;/p&gt;

&lt;p&gt;The flow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New user opens homepage / app&lt;/li&gt;
&lt;li&gt;Gets assigned a random user id until clears data&lt;/li&gt;
&lt;li&gt;Generate random Avatars using @dicebar/avatars&lt;/li&gt;
&lt;li&gt;Can create posts / delete own posts&lt;/li&gt;
&lt;li&gt;Look through posts timeline&lt;/li&gt;
&lt;li&gt;Reply to posts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we'll init a nextjs app and install the dependencies we'll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chakra-UI - Components&lt;/li&gt;
&lt;li&gt;swr - Data fetching&lt;/li&gt;
&lt;li&gt;zustand - state management&lt;/li&gt;
&lt;li&gt;@dicebear/avatars - generating avatars

&lt;ul&gt;
&lt;li&gt;formik - manage, validate post create form
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Get the nextjs app template&lt;/span&gt;
npx create-next-app 5chan &lt;span class="nt"&gt;--typescript&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;5chan
pnpm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="c"&gt;# The chakra-ui UI library, icons for chakra-ui &amp;amp; swr &lt;/span&gt;
pnpm add @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4 @chakra-ui/icons swr zustand @dicebear/avatars @dicebear/micah formik
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g8a1lzp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/WN7mXLD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g8a1lzp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/WN7mXLD.png" alt="setup-project.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To setup chakra-ui, you'll have to wrap the app with ChakraProvider like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The types.ts for consistent structures:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// types.ts&lt;/span&gt;
&lt;span class="c1"&gt;//User State&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UserStore&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// User Object&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Posts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;UpdatedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;DeletedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Post Reply&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;UpdatedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;DeletedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Generating random user and avatar data then storing them in LocalStorage for later use :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//user.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;customAlphabet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nanoid/async&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createAvatar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@dicebear/avatars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@dicebear/micah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;currentUid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nanoid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;customAlphabet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0123456789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nanoid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;avatar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;dataUri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;avatar&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The great thing about zustand is that you don't have the wrap the entire app inside a context to use it. It can stay away from the UI code as small stores. So it's easy to use.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//stores.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zustand&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserStore&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now the API requests to &lt;code&gt;POST&lt;/code&gt;&amp;amp; &lt;code&gt;GET&lt;/code&gt; replies:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//replies.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchReplies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postReply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Reply&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_URL&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/v1/replies`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`POST`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The API calls for &lt;code&gt;POST&lt;/code&gt;ing, &lt;code&gt;GET&lt;/code&gt; ing &amp;amp; &lt;code&gt;DELETE&lt;/code&gt;ing  posts:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchPostById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_URL&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/v1/posts`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`POST`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deletePost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`DELETE`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I6G-wrbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/jIv6pfqKiIvHPYZO6y/giphy.gif%3Fcid%3Decf05e47j5ul5m7839tdh6yoq8eex6vruvzvwij1xryb0ky7%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I6G-wrbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/jIv6pfqKiIvHPYZO6y/giphy.gif%3Fcid%3Decf05e47j5ul5m7839tdh6yoq8eex6vruvzvwij1xryb0ky7%26rid%3Dgiphy.gif%26ct%3Dg" alt="phew.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OK now comes the final boring part, designing the UI. but it's ok we only have three pages to code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Index page - intro, how to use.&lt;/li&gt;
&lt;li&gt;Home page  - timeline of posts, discussions.&lt;/li&gt;
&lt;li&gt;Posts page : dynamic page according to post id.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may design them however you want but if you still want to look over the code you can find the source code at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; layout

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/100lvlmaster/5chan/blob/master/layout/container.tsx"&gt;container.tsx&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; components

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/100lvlmaster/5chan/blob/master/components/post_form_button.tsx"&gt;post_form_button.tsx&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;pages

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/100lvlmaster/5chan/blob/master/pages/index.tsx"&gt;index.tsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/100lvlmaster/5chan/blob/master/pages/home.tsx"&gt;home.tsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;posts

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/100lvlmaster/5chan/blob/master/pages/posts/%5Bid%5D.tsx"&gt;[id].tsx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's about all we need right now.&lt;br&gt;
After running the project and deploying it. &lt;br&gt;
Here are the screenshots ✨✨&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_AmMEPdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/qWE4dkN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_AmMEPdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/qWE4dkN.png" alt="homepage.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4wCOSz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/wF8Qxmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4wCOSz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/wF8Qxmb.png" alt="timelinepage.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEYQbdHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/6luHMRA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEYQbdHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/6luHMRA.png" alt="postpage.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-source-code-of-this-project-lies-at-httpsgithubcom100lvlmaster5chango"&gt;
  &lt;/a&gt;
  The source code of this project lies at: &lt;a href="https://github.com/100lvlmaster/5chan-go"&gt;https://github.com/100lvlmaster/5chan-go&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can find me at:&lt;br&gt;
Website &lt;br&gt;
&lt;a href="https://100lvlmaster.in"&gt;https://100lvlmaster.in&lt;/a&gt;&lt;br&gt;
Github&lt;br&gt;
&lt;a href="https://github.com/100lvlmaster"&gt;https://github.com/100lvlmaster&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>typescript</category>
      <category>4chan</category>
      <category>react</category>
    </item>
    <item>
      <title>HTTP Refresher: Things You Should Know About HTTP</title>
      <author>Anish Kumar</author>
      <pubDate>Sat, 18 Sep 2021 14:35:34 +0000</pubDate>
      <link>https://dev.to/anishkumar/http-refresher-things-you-should-know-about-http-2bhi</link>
      <guid>https://dev.to/anishkumar/http-refresher-things-you-should-know-about-http-2bhi</guid>
      <description>&lt;p&gt;HTTP(Hyper Text Transfer Protocol) is one of many protocols used for transferring data (think of html pages, text, images, videos and much more) across machines.  There are other application layer protocols like &lt;a href="https://en.wikipedia.org/wiki/File_Transfer_Protocol"&gt;FTP&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"&gt;SMTP&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol"&gt;DHCP&lt;/a&gt; etc. &lt;/p&gt;

&lt;p&gt;HTTP was invented alongside HTML to create the first interactive, text-based web browser: the original World Wide Web. In this article, we'll be covering the key concepts related to HTTP, which all developers should be aware of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-basics"&gt;
  &lt;/a&gt;
  Understanding the basics
&lt;/h2&gt;

&lt;p&gt;Let's start with basics  i.e. understanding how data transfer takes place and overall anatomy of HTTP messages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#osi-model"&gt;
  &lt;/a&gt;
  OSI Model
&lt;/h3&gt;

&lt;p&gt;The OSI (Open Systems Interconnection) is a conceptual framework used to describe the functions of a networking system. It thus helps to see how information is transferred across a network. Here's a diagram depicting various &lt;a href="https://www.comparitech.com/net-admin/osi-model-explained/"&gt;networking layers&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k5qdr5or--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631948742808/hzelI0mq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k5qdr5or--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631948742808/hzelI0mq5.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Application Layer&lt;/strong&gt;:  It's the layer that user interacts with. This layer uses protocols like HTTP and FTP.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Presentation Layer&lt;/strong&gt; : This layer prepares and translates data from the network format to the application format or vice versa. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Session Layer&lt;/strong&gt;: It's the layer responsible for establishing, maintaining, and ending connections between different applications. Typically you’ll see protocols such as NetBios, NFS, RPC, and SQL operating on this layer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Transport Layer&lt;/strong&gt;:  It is the layer responsible for transferring data between end systems and hosts. It dictates what gets sent where, and how much of it gets sent. At this level, you see protocols like TCP, UDP, and SPX.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Network Layer&lt;/strong&gt;: It has the job of dealing with most of the routing within a network. In simple terms, the Network Layer determines how a packet travels to its destination. Protocols like TCP/IP, AppleTalk, and IPX operate at this layer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data Link Layer&lt;/strong&gt;: The data link provides for the transfer of data frames between hosts connected to the physical link.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Physical Layer&lt;/strong&gt;: It is the hardware layer of the OSI model which includes network elements such as hubs, cables, ethernet, and repeaters. For example, this layer is responsible for executing electrical signal changes like making lights light up.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#http-messages"&gt;
  &lt;/a&gt;
  HTTP messages
&lt;/h3&gt;

&lt;p&gt;As mentioned above, HTTP operates in application layer i.e. the layer user directly interacts with. Some key points regarding this protocol:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; HTTP follows the classical &lt;a href="https://en.wikipedia.org/wiki/Client%E2%80%93server_model"&gt;client-server model&lt;/a&gt;. A client opens a connection to issue a request and then waits for the server to respond.&lt;/li&gt;
&lt;li&gt;HTTP is a &lt;a href="https://en.wikipedia.org/wiki/Stateless_protocol"&gt;stateless protocol&lt;/a&gt; i.e. each request has isolated and independent lifecycle. HTTP is not session-less though. For example, HTTP cookies allow the use of stateful sessions.&lt;/li&gt;
&lt;li&gt;HTTP, which is an application layer protocol, rides on top of &lt;a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol"&gt;TCP (Transmission Control Protocol)&lt;/a&gt;: a transport layer protocol.&lt;/li&gt;
&lt;li&gt;HTTP is &lt;a href="https://stackoverflow.com/questions/393407/why-http-protocol-is-designed-in-plain-text-way"&gt;text based protocol&lt;/a&gt; i.e data transmission takes place using text format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http-requestresponse-anatomy"&gt;
  &lt;/a&gt;
  HTTP request/response anatomy
&lt;/h2&gt;

&lt;p&gt;An HTTP request can consist of four parts: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Request method&lt;/li&gt;
&lt;li&gt;URL&lt;/li&gt;
&lt;li&gt;Request headers&lt;/li&gt;
&lt;li&gt;Request body&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the possible HTTP request methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;GET&lt;/strong&gt; requests a specific resource in its entirety&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HEAD&lt;/strong&gt; requests a specific resource without the body content&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt; adds content, messages, or data to a new page under an existing web resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PUT&lt;/strong&gt; directly modifies an existing web resource or creates a new URI if need be&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DELETE&lt;/strong&gt; gets rid of a specified resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;TRACE&lt;/strong&gt; shows users any changes or additions made to a web resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;OPTIONS&lt;/strong&gt; shows users which HTTP methods are available for a specific URL&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CONNECT&lt;/strong&gt; converts the request connection to a transparent TCP/IP tunnel&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PATCH&lt;/strong&gt; partially modifies a web resource&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An HTTP request is just a series of lines of text that follow the HTTP protocol. A GET request might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /hello.txt HTTP/1.1
User-Agent: curl/7.63.0 libcurl/7.63.0 OpenSSL/1.1.l zlib/1.2.11
Host: www.example.com
Accept-Language: en
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the server receives the request, It may respond with some data. A sample HTTP response would like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTP/1.1 200 OK
Date: Wed, 30 Jan 2019 12:14:39 GMT
Server: Apache
Last-Modified: Mon, 28 Jan 2019 11:17:01 GMT
Accept-Ranges: bytes
Content-Length: 12
Vary: Accept-Encoding
Content-Type: text/plain

Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#http-and-security-concern"&gt;
  &lt;/a&gt;
  HTTP and security concern
&lt;/h3&gt;

&lt;p&gt;As stated earlier, HTTP uses text format for data transmission. The problem is this data is not encrypted, so it can be intercepted by third parties to gather data being passed between the two systems. This issue can be addressed using HTTPS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-https"&gt;
  &lt;/a&gt;
  What is HTTPS?
&lt;/h3&gt;

&lt;p&gt;The S in HTTPS stands for "secure." HTTPS uses &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS&lt;/a&gt; (or SSL) to encrypt HTTP requests and responses, so in the example above, instead of the text, an attacker would see a bunch of seemingly random characters.&lt;/p&gt;

&lt;p&gt;Instead of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /hello.txt HTTP/1.1
User-Agent: curl/7.63.0 libcurl/7.63.0 OpenSSL/1.1.l zlib/1.2.11
Host: www.example.com
Accept-Language: en
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The attacker would see something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t8Fw6T8UV81pQfyhDkhebbz7+oiwldr1j2gHBB3L3RFTRsQCpaSnSBZ78Vme+DpDVJPvZdZUZHpzbbcqmSW1+dkughdkhkuyi2u3gsJGSJHF/FNUjgH0BmVRWII6+T4MnDwmCMZUI/orxP3HGwYCSIvyzS3MpmmSe4iaWKCOHQ==
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-tls-encrypts-http-messages"&gt;
  &lt;/a&gt;
  How TLS encrypts HTTP messages
&lt;/h3&gt;

&lt;p&gt;TLS uses a technology called &lt;a href="https://www.geeksforgeeks.org/public-key-encryption/"&gt;public key encryption&lt;/a&gt;. In a nutshell:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; There are two keys, a public key and a private key.&lt;/li&gt;
&lt;li&gt; The public key is shared with client devices via the server's SSL certificate. &lt;/li&gt;
&lt;li&gt; When a client opens a connection with a server, the two devices use the public and private key to agree on new keys, called session keys, to encrypt further communications between them.&lt;/li&gt;
&lt;li&gt;All HTTP requests and responses are then encrypted with these session keys, so that anyone who intercepts communications can only see a random string of characters, not the plaintext.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find a great article on encryption &lt;a href="https://www.cloudflare.com/learning/ssl/what-is-encryption/"&gt;here&lt;/a&gt; if that interests you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evolution-of-http"&gt;
  &lt;/a&gt;
  Evolution of HTTP
&lt;/h2&gt;

&lt;p&gt;The protocol was developed by Tim Berners-Lee and his team between 1989-1991.  The first version: HTTP/0.9 is also referred to as one line protocol. Only &lt;code&gt;GET&lt;/code&gt; request type was supported back then. HTTP/0.9 was very limited and both browsers and servers quickly extended it to be more versatile, resulting in HTTP/1.0. &lt;/p&gt;

&lt;p&gt;HTTP/1.0 brought in quite a few novelties. It introduced concepts of status code, multiple request types(&lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;), request/response headers etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lack-of-persistence"&gt;
  &lt;/a&gt;
  Lack of Persistence
&lt;/h3&gt;

&lt;p&gt;HTTP/1.0 required to open up a new TCP connection for each request (and close it immediately after the response was sent). &lt;br&gt;
TCP connection in turn uses a &lt;strong&gt;three-way handshake&lt;/strong&gt; to establish a reliable connection. The connection is full duplex(two way connection), and both sides synchronize (SYN) and acknowledge (ACK) each other. The exchange of these four flags is performed in three steps—SYN, SYN-ACK, and ACK—as shown in Figure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQl31b5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631954774758/pBBcHQFCG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQl31b5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631954774758/pBBcHQFCG.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For better performance, it was crucial to reduce these round-trips between client and server. HTTP/1.1 solved this with &lt;strong&gt;persistent connections&lt;/strong&gt;. What's a persistent connection? It's a (network communication) channel that remains open for further HTTP requests and responses rather than closing after a single exchange.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#keepalive-header"&gt;
  &lt;/a&gt;
  Keep-Alive header
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;keep-alive&lt;/code&gt; header was added to HTTP 1.0 to facilitate persistent connection. If the client supports &lt;code&gt;keep-alive&lt;/code&gt;, it adds an additional header to the request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Connection: keep-alive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, when the server receives this request and generates a response, it also adds a header to the response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Connection: keep-alive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following this, the connection is not dropped, but is instead kept open. When the client sends another request, it uses the same connection. This will continue until either the client or the server decides that the conversation is over, and one of them drops the connection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#http11"&gt;
  &lt;/a&gt;
  HTTP/1.1
&lt;/h2&gt;

&lt;p&gt;HTTP/1.1 Introduced critical performance optimizations and feature enhancements. Major offerings are listed below:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#persistent-and-pipelined-connections"&gt;
  &lt;/a&gt;
  Persistent and pipelined connections
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Persistence:&lt;/strong&gt; In HTTP 1.1, all connections are considered persistent unless declared otherwise. The HTTP persistent connections do not use separate &lt;code&gt;keep-alive&lt;/code&gt; messages, they just allow multiple requests to use a single connection by default.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pipelining:&lt;/strong&gt; is the process of sending successive requests, over the same persistent connection, without waiting for the answer. This avoids latency of the connection.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The image below illustrates difference between short lived, persistent and pipelined connections.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s3rqqSAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631975902031/_irYKYWhD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s3rqqSAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631975902031/_irYKYWhD.png" alt="Screen Shot 2021-09-18 at 8.06.58 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;** Head of line blocking*&lt;em&gt;: Even though pipelining reduces number of requests and re-uses same connection, it still requires the responses to arrive in order. Which means if the first request takes too long to be responded, subsequent requests remain blocked. This is called "Head of line blocking". HTTP/2.0 sloves this using **binary framing&lt;/em&gt;* without sacrificing parallelism. More on this is discussed ahead in this article.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#chunked-transfers-encoding"&gt;
  &lt;/a&gt;
  Chunked transfers encoding
&lt;/h3&gt;

&lt;p&gt;Pipelining makes it difficult for the client to determine where one response ends and the next response begins, particularly during pipelined HTTP operation. This is a serious problem when &lt;code&gt;Content-Length&lt;/code&gt; cannot be used due to streaming. To solve this problem, HTTP 1.1 introduced a chunked transfer coding that defines a last-chunk bit. The last-chunk bit is set at the end of each response so that the client knows where the next response begins.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compression-and-decompression"&gt;
  &lt;/a&gt;
  Compression and Decompression
&lt;/h3&gt;

&lt;p&gt;HTTP/1.1 introduced headers that allow transfer of compressed data over the network. It can be done with the help of &lt;code&gt;Accept-Encoding&lt;/code&gt; and &lt;code&gt;Content-Encoding&lt;/code&gt; headers. Here's summary of how it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client issues request with &lt;code&gt;Accept-Encoding&lt;/code&gt; header to let server understand the compression schemes it supports:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /encrypted-area HTTP/1.1
Host: www.example.com
Accept-Encoding: gzip, deflate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; If server supports any these compression schemes, it can choose to compress the content and respond with it along with &lt;code&gt;Content-Encoding&lt;/code&gt; header:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTP/1.1 200 OK
Date: mon, 26 June 2016 22:38:34 GMT
Server: Apache/1.3.3.7 (Unix)  (Red-Hat/Linux)
Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT
Accept-Ranges: bytes
Content-Length: 438
Connection: close
Content-Type: text/html; charset=UTF-8
Content-Encoding: gzip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;HTTP/1.1 Also introduced following concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Virtual hosting:&lt;/strong&gt; a server with a single IP Address hosting multiple domains&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cache support:&lt;/strong&gt; faster response and great bandwidth savings by adding cache support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http20"&gt;
  &lt;/a&gt;
  HTTP/2.0
&lt;/h2&gt;

&lt;p&gt;HTTP/2 is a major revision of the HTTP protocol. It was derived from the earlier experimental &lt;a href="https://en.wikipedia.org/wiki/SPD"&gt;SPDY&lt;/a&gt; protocol, originally developed by Google. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#http2-is-binary-instead-of-textual"&gt;
  &lt;/a&gt;
  HTTP2 is &lt;strong&gt;binary&lt;/strong&gt;, instead of textual
&lt;/h3&gt;

&lt;p&gt;At the core of all performance enhancements of HTTP/2 is the new binary framing layer, which dictates how the HTTP messages are encapsulated and transferred between the client and server. Following are the critical terms associated with framing layer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Frame&lt;/strong&gt;: The &lt;strong&gt;smallest unit of communication&lt;/strong&gt; in HTTP/2, each containing a frame header, which at a minimum identifies the stream to which the frame belongs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Message&lt;/strong&gt;: A complete &lt;strong&gt;sequence of frames&lt;/strong&gt; that map to a logical request or response message.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stream&lt;/strong&gt;: A bidirectional flow of bytes within an established connection, which may carry &lt;strong&gt;one or more messages&lt;/strong&gt; in it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ffvUsYF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631958924830/WqtNgMwdi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ffvUsYF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631958924830/WqtNgMwdi.png" alt="Screen Shot 2021-09-18 at 3.24.57 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The image below illustrates how an HTTP/1.x message compares to HTTP/2.0 message (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages"&gt;Source&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69y1HhTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631975935565/hzKruDE2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69y1HhTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631975935565/hzKruDE2l.png" alt="Screen Shot 2021-09-18 at 8.07.06 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiplexing"&gt;
  &lt;/a&gt;
  Multiplexing
&lt;/h3&gt;

&lt;p&gt;In HTTP/2.0, client and server can break down an HTTP message into independent frames, interleave them, and then reassemble them on the other end. This is called multiplexing. It can be understood better by the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZ4gyarN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631959233801/4_jJaIYKd1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZ4gyarN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631959233801/4_jJaIYKd1.png" alt="Screen Shot 2021-09-18 at 3.30.27 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parallelism-one-connection-per-origin"&gt;
  &lt;/a&gt;
  Parallelism: One connection per origin
&lt;/h3&gt;

&lt;p&gt;With the new binary framing mechanism in place, HTTP/2 no longer needs multiple TCP connections to multiplex streams in parallel; each stream is split into many frames, which can be interleaved and prioritized. As a result, all HTTP/2 connections are persistent, and only one connection per origin is required, which offers numerous performance benefits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#server-push"&gt;
  &lt;/a&gt;
  Server push
&lt;/h3&gt;

&lt;p&gt;Another powerful new feature of HTTP/2 is the ability of the server to send multiple responses for a single client request. That is, in addition to the response to the original request, the server can push additional resources to the client without the client having to request each one explicitly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-of-http-http30"&gt;
  &lt;/a&gt;
  Future of HTTP: HTTP/3.0
&lt;/h2&gt;

&lt;p&gt;HTTP/3.0 is the upcoming major version of HTTP. So far the underlying transport layer mechanism behind HTTP has been TCP.  HTTP/3.0 changes that, even though the core semantics remain unchanged.&lt;/p&gt;

&lt;p&gt;The fundamental difference between HTTP/2 and HTTP/3 is that HTTP/3 runs over &lt;a href="https://en.wikipedia.org/wiki/QUIC"&gt;QUIC&lt;/a&gt;, and QUIC runs over connectionless &lt;a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol"&gt;UDP&lt;/a&gt; instead of the connection-oriented TCP.&lt;/p&gt;

&lt;p&gt;Another significant different is HTTP/3.0 mandates secure transfer of data. HTTP/3 includes encryption that borrows heavily from TLS but isn’t using it directly. This change is because HTTP/3 differs from HTTPS/TLS in terms of what it encrypts: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;With the older HTTPS/TLS protocol, only the data itself is protected by TLS, leaving a lot of the transport metadata visible. &lt;/li&gt;
&lt;li&gt;In HTTP/3 both the data and the transport protocol are protected. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Most browsers do not support h2c (HTTP/2 without TLS), which means opting for HTTP/2.0 pretty much needs you to opt for TLS if you're hosting a website. Here's a relevant &lt;a href="https://stackoverflow.com/questions/46788904/why-do-web-browsers-not-support-h2c-http-2-without-tls"&gt;stackoverlow thread&lt;/a&gt; on why browsers act this way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The diagram below illustrates fundamental difference between HTTP/3.0 and it's predecessor(&lt;a href="https://ably.com/topic/http-2-vs-http-3"&gt;source&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LqlgHL8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631965955142/AiWibfxf4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LqlgHL8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631965955142/AiWibfxf4.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x"&gt;https://www.developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.en.wikipedia.org/wiki/HTTP_compression"&gt;https://www.en.wikipedia.org/wiki/HTTP_compression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.greenlanemarketing.com/resources/articles/seo-101-http-vs-http2/"&gt;https://www.greenlanemarketing.com/resources/articles/seo-101-http-vs-http2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/http2"&gt;https://developers.google.com/web/fundamentals/performance/http2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.okta.com/books/api-security/tls/how/"&gt;https://developer.okta.com/books/api-security/tls/how/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;This article has been originally published at &lt;a href="https://stackfull.dev/http-refresher-things-you-should-know-about-http"&gt;StackFull.dev&lt;/a&gt;. If you enjoyed reading this, you may want to opt for my &lt;a href="https://stackfull.dev"&gt;newsletter&lt;/a&gt;. It would let me reach out to you whenever I publish a new thought!&lt;/p&gt;

</description>
      <category>server</category>
      <category>http</category>
      <category>networking</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
