<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Vue.js vs. React ‚Äî Not Your Usual Comparison</title>
      <author>Coders Helper</author>
      <pubDate>Sat, 31 Jul 2021 13:01:31 +0000</pubDate>
      <link>https://dev.to/learntocode/vue-js-vs-react-not-your-usual-comparison-4j86</link>
      <guid>https://dev.to/learntocode/vue-js-vs-react-not-your-usual-comparison-4j86</guid>
      <description>&lt;p&gt;¬†From the moment I started learning React, I completely fell in love with it.&lt;/p&gt;

&lt;p&gt;I can create beautiful UIs just with JavaScript? Suddenly, I had the power of JavaScript inside HTML and CSS?&lt;/p&gt;

&lt;p&gt;I absolutely loved it. Amazing.&lt;/p&gt;

&lt;p&gt;I used the tool for years, but I couldn‚Äôt help myself from observing the Vue.js hype. Apparently, every developer that uses it loves it so much!&lt;/p&gt;

&lt;p&gt;How‚Äôs that possible? I love React, but sometimes it makes me frustrated; why is there much less frustration in the Vue.js world?&lt;/p&gt;

&lt;p&gt;I‚Äôve started Vue on a commercial project a few months ago and completely moved from React.&lt;/p&gt;

&lt;p&gt;I was a bit sad when I found out that I had moved from my beloved tool.&lt;/p&gt;

&lt;p&gt;But those frameworks are just tools; we should never make strict career decisions based on them.&lt;/p&gt;

&lt;p&gt;It‚Äôs the front-End world ‚Äî all the tools will vanish soon; new ones will come quickly.&lt;/p&gt;
&lt;p&gt;Now, after tons of experience in frontend development and frameworks like Vue.js, React, and Ember.js ‚Äî let me explain why I find Vue.js the best.&lt;/p&gt;
&lt;p&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/14-vs-code-shortcuts-to-supercharge-your-productivity/"&gt;Vue.js vs. React ‚Äî Not Your Usual Comparison&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;






</description>
    </item>
    <item>
      <title>Valid Mountain Array ‚Äî Solution and Approch in Java</title>
      <author>Rubleen Kaur</author>
      <pubDate>Sat, 31 Jul 2021 12:59:48 +0000</pubDate>
      <link>https://dev.to/rubleen1903/valid-mountain-array-solution-and-approch-in-java-p6g</link>
      <guid>https://dev.to/rubleen1903/valid-mountain-array-solution-and-approch-in-java-p6g</guid>
      <description>&lt;p&gt;I have started practising for my interviews on Leetcode and thought of sharing each problem and the approach i use for solving them through these blogs.&lt;br&gt;
The first problem I chose is Valid Mountain Array and is an easy problem as compared to the one‚Äôs i‚Äôve come across on leetcode.Each and every problem has an algorithmic approach one needs to understand before moving ahead with coding the solution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The problem we are going to discuss : &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#valid-mountain-array"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/valid-mountain-array/"&gt;Valid Mountain Array&lt;/a&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRXLE1qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msa2cd5o39euiea4n92z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRXLE1qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msa2cd5o39euiea4n92z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Given an array of integers arr, return true if and only if it is a valid mountain array.&lt;br&gt;
Recall that arr is a mountain array if and only if:&lt;br&gt;
*&lt;code&gt;arr.length &amp;gt;= 3&lt;/code&gt;&lt;br&gt;
*There exists some i with 0 &amp;lt; i &amp;lt; arr.length - 1 such that:&lt;br&gt;
*&lt;code&gt;arr[0] &amp;lt; arr[1]&lt;/code&gt; &amp;lt; ... &amp;lt; &lt;code&gt;arr[i - 1] &amp;lt; arr[i]&lt;/code&gt;&lt;br&gt;
*&lt;code&gt;arr[i] &amp;gt; arr[i + 1]&lt;/code&gt; &amp;gt; ... &amp;gt; &lt;code&gt;arr[arr.length - 1]&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach-"&gt;
  &lt;/a&gt;
  Approach :
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X52zsvfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqc26lqap9c67thua5l7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X52zsvfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqc26lqap9c67thua5l7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I solved it using two variables which were used to check the given conditions.&lt;br&gt;
Do go through the above images to get a detailed approach and alogirthm how the problem was solved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-in-java-"&gt;
  &lt;/a&gt;
  Solution in Java !
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// 941. Valid Mountain Array
// Easy
// Given an array of integers arr, return true if and only if it is a valid mountain array.

// Recall that arr is a mountain array if and only if:

// arr.length &amp;gt;= 3
// There exists some i with 0 &amp;lt; i &amp;lt; arr.length - 1 such that:
// arr[0] &amp;lt; arr[1] &amp;lt; ... &amp;lt; arr[i - 1] &amp;lt; arr[i]
// arr[i] &amp;gt; arr[i + 1] &amp;gt; ... &amp;gt; arr[arr.length - 1]

//Solution in java

class Solution {
    public boolean validMountainArray(int[] arr) {
        int i = 0;
        int j = arr.length - 1;
        int n = arr.length - 1;
        while (i + 1 &amp;lt; n &amp;amp;&amp;amp; arr[i] &amp;lt; arr[i+1]) {
            i++;
        }

        while (j &amp;gt; 0 &amp;amp;&amp;amp; arr[j] &amp;lt; arr[j-1]) {
            j--;
        }

        return (i &amp;gt; 0 &amp;amp;&amp;amp; i == j &amp;amp;&amp;amp; j &amp;lt; n);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope the solution was easy to understand !If you still have any doubts feel free to reach out to me at Linkedin! I am attaching my linkedin id below, connect or follow to support and asks your doubts there !&lt;br&gt;
Happy Coding! üê±‚Äçüíª&lt;br&gt;
Connect and Follow on &lt;a href="https://www.linkedin.com/in/rubleenkaur2201/"&gt;Linkedin&lt;/a&gt; and &lt;a href="https://github.com/rubleen1903"&gt;Github&lt;/a&gt; to show support !&lt;/p&gt;

</description>
      <category>java</category>
      <category>algorithms</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to create a blog for your Next.js and ChakraUI website</title>
      <author>Muhammad  Ahmad</author>
      <pubDate>Sat, 31 Jul 2021 12:04:58 +0000</pubDate>
      <link>https://dev.to/m_ahmad/how-to-create-a-blog-for-your-next-js-and-chakraui-website-3co8</link>
      <guid>https://dev.to/m_ahmad/how-to-create-a-blog-for-your-next-js-and-chakraui-website-3co8</guid>
      <description>&lt;p&gt;I have been writing on &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt; for more than 1 year. I really like to write articles on dev.to but now I wanted to write posts on my &lt;a href="https://my-portfolio-ma-ahmad.vercel.app"&gt;portfolio website&lt;/a&gt;. &lt;br&gt;
So I created a blog where I'll be writing new articles and showing my dev.to posts.&lt;br&gt;
I'll guide you how you can create similar blog for your Next.js website.&lt;/p&gt;

&lt;p&gt;Live demo: &lt;a href="https://my-portfolio-ma-ahmad.vercel.app/blog"&gt;posts-list&lt;/a&gt;&lt;br&gt;
Github repo: &lt;a href="https://github.com/MA-Ahmad/myPortfolio"&gt;https://github.com/MA-Ahmad/myPortfolio&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-packages-required"&gt;
  &lt;/a&gt;
  1. Packages required
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Syntax highlighting - &lt;a href="https://www.npmjs.com/package/prismjs"&gt;prismjs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Syntax highlighter for markdown code blocks - &lt;a href="https://www.npmjs.com/package/remark-prism"&gt;remark-prism&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Load the frontmatter - &lt;a href="https://www.npmjs.com/package/gray-matter"&gt;gray-matter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Unified processor to parse and serialize Markdown - &lt;a href="https://www.npmjs.com/package/remark"&gt;remark&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Serialize Markdown as HTML - &lt;a href="https://www.npmjs.com/package/remark-html"&gt;remark-html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#2-create-a-mdx-file"&gt;
  &lt;/a&gt;
  2. Create a mdx file
&lt;/h3&gt;

&lt;p&gt;See mdx file sample here &lt;a href="https://github.com/MA-Ahmad/myPortfolio/blob/main/data/posts/how-to-create-a-blog-for-your-nextjs-portfolio-website.mdx"&gt;mdx-file&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-create-a-blog-page"&gt;
  &lt;/a&gt;
  3. Create a &lt;a href="https://github.com/MA-Ahmad/myPortfolio/blob/main/pages/blog.tsx"&gt;Blog&lt;/a&gt; page
&lt;/h3&gt;

&lt;p&gt;Show all local and dev.to posts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://dev.to/api/articles?username=m_ahmad&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;mdx/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;markdownWithMeta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mdx`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdownWithMeta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;localPosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;published_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;published_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;comments_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comments_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;public_reactions_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;public_reactions_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;tag_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devtoPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;localPosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;devtoPosts&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;notFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-create-a-blog-detail-page"&gt;
  &lt;/a&gt;
  4. Create a &lt;a href="https://github.com/MA-Ahmad/myPortfolio/blob/main/pages/blog/%5Bslug%5D.tsx"&gt;blog detail&lt;/a&gt; page
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get paths of all blog posts
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;devData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllBlogs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devtoPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;devData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;mdx/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;devtoPaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;localPaths&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getAllBlogs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://dev.to/api/articles?username=m_ahmad&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`Error fetching... Status code: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;markdown to html code
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;markdownToHtml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;remark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prism&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Select the right blog and convert it to html
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;devData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllBlogs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectedBlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;devData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blogObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;remarkContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectedBlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`https://dev.to/api/articles/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;selectedBlog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;blogObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;remarkContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;markdownToHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blogObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body_markdown&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;markdownWithMeta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mdx`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdownWithMeta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;blogObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;remarkContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;markdownToHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;devData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;notFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;articleContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;remarkContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;blogDetails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;blogObj&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-create-a-custom-stylesheet-to-handle-dark-and-light-theme"&gt;
  &lt;/a&gt;
  5. Create a &lt;a href="https://github.com/MA-Ahmad/myPortfolio/blob/main/components/ui/prism.tsx"&gt;custom stylesheet&lt;/a&gt; to handle dark and light theme
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#blog-page"&gt;
  &lt;/a&gt;
  Blog page
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DICiuWUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsvqtm2b7gxter0x7jt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DICiuWUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsvqtm2b7gxter0x7jt9.png" alt="blog"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building An Automated Screenshot Service On Netlify In ~140 Lines Of Code</title>
      <author>Arghya Ghosh</author>
      <pubDate>Sat, 31 Jul 2021 11:37:34 +0000</pubDate>
      <link>https://dev.to/uiuxarghya/building-an-automated-screenshot-service-on-netlify-in-140-lines-of-code-3ik1</link>
      <guid>https://dev.to/uiuxarghya/building-an-automated-screenshot-service-on-netlify-in-140-lines-of-code-3ik1</guid>
      <description>&lt;p&gt;This blog post is adapted from: &lt;a href="https://www.zachleat.com/web/screenshots/"&gt;https://www.zachleat.com/web/screenshots/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea is pretty simple: a service that will accept a URL as input and return a static screenshot image of that URL to embed and use on other web sites. The &lt;a href="https://github.com/11ty/api-screenshot/blob/d7fd9c74389e14601a3a3a3a45805a1e59d9de51/functions/screenshot.js"&gt;code is pretty simple too, about 140 lines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having a service for these images is important as the Eleventy docs use a lot of visuals from Built With Eleventy sites around the web‚Äîit wouldn‚Äôt be feasible to generate these manually.&lt;/p&gt;

&lt;p&gt;The end result looks something like this (&lt;a href="https://www.11ty.dev/docs/"&gt;11ty.dev/docs&lt;/a&gt; is shown):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1RV4ws5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627726826737/zbgX2MaQ_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1RV4ws5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627726826737/zbgX2MaQ_.png" alt="Screenshot of 11ty.dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the URL for the above image is &lt;code&gt;https://v1.screenshot.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2Fdocs%2F/small/9:16/bigger/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can see this &lt;a href="https://www.11ty.dev/#built-with-eleventy"&gt;live&lt;/a&gt; in &lt;a href="https://www.11ty.dev/docs/starter/"&gt;production&lt;/a&gt; now in a &lt;a href="https://www.11ty.dev/docs/tutorials/"&gt;few&lt;/a&gt; different &lt;a href="https://www.11ty.dev/authors/smthdotuk/"&gt;places&lt;/a&gt; on the Eleventy docs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#decisions-decisions"&gt;
  &lt;/a&gt;
  DECISIONS, DECISIONS
&lt;/h2&gt;

&lt;p&gt;I think there were a few architecture decisions that went into this service that are worth documenting, so here goes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;This is now a separate repo and project from the main 11ty.dev site. This is important as it decouples our On-demand Builder cache for this service away from the main web site, which deploys with a much higher frequency.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is best used with lower priority images, things that live further down the page (dare I say, below the imaginary fold). Works great with &lt;code&gt;&amp;lt;img loading="lazy"&amp;gt;&lt;/code&gt;. ‚ö†Ô∏è ABSOLUTELY not for use with HERO IMAGES or on something that might be eligible for your LCP!!! (&lt;em&gt;I warned you with three exclamation marks.&lt;/em&gt;)&lt;br&gt;
-Best paired with preconnect: &lt;code&gt;&amp;lt;link href="https://v1.screenshot.11ty.dev" rel="preconnect" crossorigin&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sizing options are limited to improve cache hits. Currently we only offer 11 different image combinations for each URL. This will likely increase over time as we add additional options, like sizes or aspect ratios or maybe even a no-JavaScript mode. We want cache hits to make these things fast and reduce the request count to external web sites.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I added an Open Graph size (you know, for those cards that show up on social media posts). I‚Äôm currently playing around with this as a way to do super-lazy custom Open Graph images for every page. Each page can have an Open Graph image that‚Äôs a screenshot of itself!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One negative of generating these in a serverless function is that image formats are a bit harder to manage. This means that only JPEG is supported for now. Especially with the &lt;a href="https://www.npmjs.com/package/chrome-aws-lambda"&gt;version of Puppeteer that barely fits in a serverless bundle&lt;/a&gt;, I‚Äôm still trying to figure out how to bundle it with &lt;code&gt;sharp&lt;/code&gt; and &lt;code&gt;eleventy-img&lt;/code&gt; too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The entire thing is versioned using &lt;a href="https://docs.netlify.com/domains-https/custom-domains/multiple-domains/#branch-subdomains"&gt;Netlify Branch subdomains&lt;/a&gt;: e.g. &lt;code&gt;https://v1.screenshot.11ty.dev&lt;/code&gt;. If I want to change the API later I‚Äôll bump it to &lt;code&gt;v2&lt;/code&gt; and just leave the old branch as-is. Of particular note is that &lt;a href="https://screenshot.11ty.dev"&gt;https://screenshot.11ty.dev&lt;/a&gt; (without the version) redirects via an HTTP 301 to &lt;code&gt;v1&lt;/code&gt; and will do so permanently. Don‚Äôt rely on this redirect (for performance reasons).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update (July 30, 2021): The other issue I noticed with using Puppeteer in a Lambda is that emoji are not available to the rendered content. So if a site is using Emoji they do not render. It looks like &lt;a href="https://jurgen.si/posts/lambda-headless-chrome-emojis/"&gt;Matic Jurgliƒç may have a workaround to solve this&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-happens-if-a-site-is-super-slow-or-is-currently-down"&gt;
  &lt;/a&gt;
  WHAT HAPPENS IF A SITE IS SUPER SLOW OR IS CURRENTLY DOWN?
&lt;/h2&gt;

&lt;p&gt;Netlify Functions have a 10 second execution limit. If the site doesn‚Äôt render in 10 seconds, we show a fallback image by default. Currently this is a low-contrast 11ty logo using the same image size as the requested screenshot (via SVG &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes).&lt;/p&gt;

&lt;p&gt;We don‚Äôt use a HTTP 500 status code on errors. In Firefox, the fallback image didn‚Äôt render when an error code was used. Because we aren‚Äôt using a HTTP 500 status code, the On-demand Builder will cache the fallback image for this request. This is good to prevent a bunch of re-requests to slow sites that don‚Äôt make the cutoff (or have a different error) but also means if a request had an outlier response time then the fallback image will continue to be used until the On-demand Builder cache is invalidated with a new build.&lt;/p&gt;

&lt;p&gt;We include the real error message in a custom &lt;code&gt;x-error-message&lt;/code&gt; HTTP Header, if you want more insight into why a screenshot failed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-i-use-your-instance-for-my-site"&gt;
  &lt;/a&gt;
  CAN I USE YOUR INSTANCE FOR MY SITE?
&lt;/h2&gt;

&lt;p&gt;Um‚Ä¶ I‚Äôm not sure yet. For now I‚Äôd recommend just self hosting it. You can click this button to do it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.netlify.com/start/deploy?repository=https://github.com/11ty/api-screenshot"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gq_bfuxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/11ty/api-screenshot/"&gt;full source code is available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demos"&gt;
  &lt;/a&gt;
  DEMOS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#small-375px-viewport-width"&gt;
  &lt;/a&gt;
  SMALL (375PX VIEWPORT WIDTH)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D1z4-xrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727425912/GKUg2cAfq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D1z4-xrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727425912/GKUg2cAfq.png" alt="Screenshot of 11ty.dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://v1.screenshot.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2Fdocs%2F/small/9:16/larger/&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#medium-650px-viewport-width"&gt;
  &lt;/a&gt;
  MEDIUM (650PX VIEWPORT WIDTH)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PMRXIIrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727491442/4PjrDbC51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PMRXIIrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727491442/4PjrDbC51.png" alt="Screenshot of 11ty.dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://v1.screenshot.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2Fdocs%2F/medium/9:16/larger/&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#large-1024px-viewport-width"&gt;
  &lt;/a&gt;
  LARGE (1024PX VIEWPORT WIDTH)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aN1bL-W_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727571195/2VuGV_GRH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aN1bL-W_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727571195/2VuGV_GRH.png" alt="Screenshot of 11ty.dev"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;https://v1.screenshot.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2Fdocs%2F/large/1:1/larger/&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-graph-1200%C3%97630"&gt;
  &lt;/a&gt;
  OPEN GRAPH (1200√ó630)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Coxvzwjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727577959/PZI5fvsTP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Coxvzwjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727577959/PZI5fvsTP.png" alt="Screenshot of 11ty.dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://v1.screenshot.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2Fdocs%2F/opengraph/&lt;/code&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>netlify</category>
      <category>eleventy</category>
      <category>serverless</category>
    </item>
    <item>
      <title>My Story completing 1 year at an early stage startup (Part 1)</title>
      <author>Aashir Aamir Khan</author>
      <pubDate>Sat, 31 Jul 2021 11:33:51 +0000</pubDate>
      <link>https://dev.to/justaashir/my-story-completing-1-year-at-an-early-stage-startup-part-1-jb0</link>
      <guid>https://dev.to/justaashir/my-story-completing-1-year-at-an-early-stage-startup-part-1-jb0</guid>
      <description>&lt;p&gt;When you are just doing your daily work, and your eyes land on the created_date of the file and what looked like yesterday have been 6 months or more‚Ä¶ üò≥&lt;/p&gt;

&lt;p&gt;That‚Äôs how time flows at an exciting fast-forward workplace, fast enough that you don‚Äôt feel like feeling it but you still feel it.&lt;/p&gt;

&lt;p&gt;This post is all about me sharing how I started and now have completed 1 year at ü•ù Kiwify.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ebZvCvup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o7uenmthgs2c6fcp480.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ebZvCvup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o7uenmthgs2c6fcp480.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[August 2020]: So, I was just¬†sitting around surfing the web around. Tailwind was my new love those days (We're married now üòÇ). I had completed my first internship where I learned VueJS on the job.&lt;/p&gt;

&lt;p&gt;I was looking for side hustle ideas, and trying out basic stuff like started a¬†&lt;a href="https://twitter.com/remoteworkjar"&gt;remote job board&lt;/a&gt;¬†(Dead now) with my friend.&lt;/p&gt;

&lt;p&gt;I was searching for jobs to post on my job board. This is how the lazy process looked like:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Go to Google&lt;/em&gt;: Search for "X Company Jobs" or "X Technology Jobs" and then handpick them.&lt;/p&gt;

&lt;p&gt;On that day, I searched for "TailwindCSS jobs" and found out an Upwork posting, and ohhhh man glad till this day that I clicked it. The title was something like¬†"VueJS &amp;amp; TailwindCSS Developer needed to create dashboard screens"&lt;/p&gt;

&lt;p&gt;When I read the description, it was like the description was written for me and was calling me "Come, baby, Come!" &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_U6B_jP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/694/0%2ApHlLpSVhqmv6kDfT.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_U6B_jP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/694/0%2ApHlLpSVhqmv6kDfT.gif" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was exactly what I wanted/had experience. It was quite basic work, like for 1--2 weeks maybe. as they were providing the Figma templates and TailwindUI.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fun Fact: Another reason to apply for job was to get access to TailwindUI (even if I don't complete the project LMAO), as I was thinking about creating¬†&lt;a href="https://tailwindcssuikit.com/"&gt;https://tailwindcssuikit.com/&lt;/a&gt;¬†and didn't had budget to check out TailwindUI just for inspiration. It's $250 to get access&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I only had to do was:&lt;br&gt;
‚Üí Convert Figma to TailwindCSS &amp;amp; Vue&lt;/p&gt;

&lt;p&gt;All looked good, I was convinced that I really want this. So next step was to apply for it. Hahaha üòÇ¬†Most Interesting part.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#upwork-drama"&gt;
  &lt;/a&gt;
  Upwork Drama
&lt;/h2&gt;

&lt;p&gt;If you know Upwork, and how I knew Upwork was that they're quite strict with profile approval. You've to submit information, and it takes like 1--2 days, to allow you to bid on projects.&lt;/p&gt;

&lt;p&gt;So my first try was to find the client outside of Upwork, for example, reach out on Twitter and convince. But it's quite hard to find the right person without much info, So had no luck + The client was super underground with very little info online... (is now a superstar that people now recognize on the streets of Brazil)&lt;/p&gt;

&lt;p&gt;So, anyway. I sent the profile for approval and even if got approved the day after, the chances are that the job will be closed.&lt;/p&gt;

&lt;p&gt;Whhhhhhaaattt, It got approved after 5 mins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yYdmWqCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/960/0%2A-1HH6DuIAQv6Wnny.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yYdmWqCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/960/0%2A-1HH6DuIAQv6Wnny.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what I did was to put my heart out to write the cover letter and answer three questions:&lt;/p&gt;

&lt;p&gt;‚Üí Tell us about your previous project with Nuxt/Tailwind&lt;/p&gt;

&lt;p&gt;‚Üí Share the project's link&lt;/p&gt;

&lt;p&gt;‚Üí Why you're applying for this job&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One interesting thing about me talking out my mind/heart, What I'm doing here, in this post too. I'll not try to refactor into better sentences and grammar e.t.c\&lt;br&gt;
I believe it makes my writing unique, cause it feels like someone is speaking to you and not proof-readed piece gone through revisions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I applied for the job..., and I got a reply back after 3 hours.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h_yvE-Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/52/0%2AMniS3YcUgBtQntL1%3Fq%3D20" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_yvE-Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/52/0%2AMniS3YcUgBtQntL1%3Fq%3D20" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had a nice chat, they also asked me if you'll be up for a full-time position too if we offer and hourly rates e.t.c and then gone for the day...&lt;/p&gt;

&lt;p&gt;Came back another day, gave me Figma, talked a bit, and started the contract üòÇüöÄ (Like WTF?)&lt;/p&gt;

&lt;p&gt;So my first goal was completed, I got access to TailwindUI. I was more than happy.&lt;/p&gt;

&lt;p&gt;I did the work, there were some small iterations but I was told it's good and the code will be reviewed (It was the first time, someone would review my code like critique it).&lt;/p&gt;

&lt;p&gt;Another Side of the Mega Drama: My Big Mistake&lt;/p&gt;

&lt;p&gt;As I was 16 years old, at that time (Now 17). I did a big mistake... I made an account in my name and when the contract was awarded ‚Üí They asked for video call / ID Verification. Which I would not be able to verify.&lt;/p&gt;

&lt;p&gt;So we moved out of Upwork... (If I would've been at the client's place, I wouldn't be that calm about my behavior at that time... and wouldn't co-operate this much how I was co-operated too. It was all my learning phase..)&lt;/p&gt;

&lt;p&gt;One of my many mistakes&lt;/p&gt;

&lt;p&gt;Thinking anything as a jump-off didn't care about what they were doing. What I all did was to make wrong assumptions, and cared all about finishing the project / my win then their win / didn't tried to build the connection/trust.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Connection/Trust matters more than anything&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I repaired my mistakes later, that's why I'm this far... You can't be successful/happy being stubborn, always be learning / keep learning.&lt;/p&gt;

&lt;p&gt;So we shifted from Upwork ‚Üí WhatsApp ‚Üí Slack. I worked with so many amazing people who have built some amazing stuff, and have tens of years of experience. The thing I picked was, that I know nothing and that helped me to keep learning from these people.&lt;/p&gt;

&lt;p&gt;The next part of the story is about, how I built the connections, my love for my work, care about everything, and then picking up the role of Head of Product.&lt;/p&gt;

&lt;p&gt;Key Takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Never ever make assumptions, without trying. (For example, If I would've decided Upwork would never approve me, or this job would've been filled. I would've never gotten it. What I did was that I applied to it, and kept all things at side)&lt;/li&gt;
&lt;li&gt;  Speak your heart out, be honest&lt;/li&gt;
&lt;li&gt;  Always learning, Ask for feedback. Keep improving. Realize early that the person you're talking to knows a lot more than you and how you can learn from them.&lt;/li&gt;
&lt;li&gt;  Age is just a number.&lt;/li&gt;
&lt;li&gt;  There's a big advantage getting early in the company, you get more opportunities and the best fast-forward hardcore space to learn in the first 6--7 months (But it can be hard if you like the calm normal day working).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading :) Follow me on¬†&lt;a href="https://twitter.com/justaashir"&gt;Twitter&lt;/a&gt;¬†to get update about Part 2&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks to¬†&lt;a href="https://medium.com/@lucastomioka/1-the-principle-of-above-and-beyond-115d88ecf71e"&gt;Lucas&lt;/a&gt;, for motivating me to write again after this whole year.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>All About CSS - 01. Inline Styles, External Styles and much more.</title>
      <author>Modern Web</author>
      <pubDate>Sat, 31 Jul 2021 11:33:21 +0000</pubDate>
      <link>https://dev.to/kunaal438/all-about-css-01-inline-styles-external-styles-and-much-more-39ni</link>
      <guid>https://dev.to/kunaal438/all-about-css-01-inline-styles-external-styles-and-much-more-39ni</guid>
      <description>&lt;p&gt;Hello, welcome. From today, we'll start learning CSS. And in today's article you'll learn, What is CSS ? How to write CSS?&lt;/p&gt;

&lt;p&gt;If you haven't read previous web development articles on HTML. You can follow &lt;a href="https://dev.to/kunaal438/series/13784"&gt;this&lt;/a&gt; series to learn everything about HTML.&lt;/p&gt;

&lt;p&gt;So, without wasting more time let's start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-css"&gt;
  &lt;/a&gt;
  What is CSS
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--of_IzJMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8pdi4p9sxerkyp6gpw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--of_IzJMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8pdi4p9sxerkyp6gpw8.png" alt="image 1"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Well, CSS stands for Cascading Style sheets. This is a language (not programming language) which is used to style websites. And you can actually see power of CSS with this example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ng4y2SLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j9zi6b13undo8ryfdgs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ng4y2SLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j9zi6b13undo8ryfdgs.png" alt="CSS 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS can make a website beautiful or make it terrible.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h1&gt;

&lt;p&gt;Let's see now, How can we start using CSS to make our websites beautiful. There are lot of ways in which you can style an element of web page. Let's see them in detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-inline-styles"&gt;
  &lt;/a&gt;
  1. Inline Styles
&lt;/h3&gt;

&lt;p&gt;Inline styles refer to when you style your elements individually. using &lt;code&gt;style&lt;/code&gt; attribute. Let's see an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: red;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Red colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: blue;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blue colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: green;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Green colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;color is CSS property which is used to set text's color. We'll discuss about CSS properties in detail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXa6M0PG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q7s2h4ffadzsfpxppei.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXa6M0PG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q7s2h4ffadzsfpxppei.PNG" alt="Capture-3"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-style-tag"&gt;
  &lt;/a&gt;
  2. Style Tag
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;br&gt;
yes, you guessed right. This is an HTML tag which is used to style elements. This is a more efficient way to style element and use CSS. &lt;code&gt;style&lt;/code&gt; tag always use inside &lt;code&gt;head&lt;/code&gt; tag. Let's see an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Red colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blue colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Green colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsEuyAAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41o5cqd8efhomiyucnot.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsEuyAAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41o5cqd8efhomiyucnot.PNG" alt="Capture-4"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;It'll be little confusing for you at first. But, let's understand it.&lt;/p&gt;

&lt;p&gt;Up until now, we just seeing how we can implement CSS style to HTML. But to start with &lt;code&gt;style&lt;/code&gt; tag or &lt;code&gt;external styles&lt;/code&gt;. We have to understand. How we write CSS.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#css-syntax"&gt;
  &lt;/a&gt;
  CSS Syntax
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;selector&lt;/code&gt; - selector means html elements like &lt;code&gt;p, div, h1&lt;/code&gt; or classes like &lt;code&gt;.para, .heading,  .container&lt;/code&gt; or can be ids. CSS selectors define which element(s) we want to style. There are lot's of Selectors and we'll cover them all in upcoming articles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;property&lt;/code&gt;: Property is CSS property. It could be &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;width, height&lt;/code&gt; or any Valid CSS property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;value&lt;/code&gt; : And the last we have values. These are the valid values for CSS properties. For example, CSS property &lt;code&gt;color&lt;/code&gt; can have the value &lt;code&gt;red&lt;/code&gt; but cannot have the value &lt;code&gt;khfashfkashfkas&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And last thing. You have to make sure where is bracket is opening and closing, And you have to use colons&lt;code&gt;:&lt;/code&gt; and semi-colons &lt;code&gt;;&lt;/code&gt;. Yes this is hard to keep up with colons, brackets and all. But that's how programming is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--05XlyUsE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pics.me.me/programming-student-forgets-semi-colon-in-code-semi-colon-im-about-to-45947507.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05XlyUsE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pics.me.me/programming-student-forgets-semi-colon-in-code-semi-colon-im-about-to-45947507.png" alt="Semi colon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-external-style-sheets"&gt;
  &lt;/a&gt;
  3. External style sheets
&lt;/h3&gt;

&lt;p&gt;After "inline styles" and "style tag". We have another way to use CSS to style our elements. And in my opinion this is the best way.&lt;/p&gt;

&lt;p&gt;External Style sheets refers to when you have a separate CSS file for all your elements. And you link that external file to your HTML file.&lt;/p&gt;

&lt;p&gt;Let's see how this works.&lt;br&gt;
First you have to make a separate file with extension &lt;code&gt;.css&lt;/code&gt;. For example I made a file named &lt;code&gt;style.css&lt;/code&gt; in the same folder where i have &lt;code&gt;index.html&lt;/code&gt;. Then,&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#stylecss"&gt;
  &lt;/a&gt;
  Style.css
&lt;/h6&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h6&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Red colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blue colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Green colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsEuyAAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41o5cqd8efhomiyucnot.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsEuyAAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41o5cqd8efhomiyucnot.PNG" alt="Capture-4"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Things to notice here,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In &lt;code&gt;style.css&lt;/code&gt; file. We are using same CSS syntax but we are not using &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; tag because this tag is only for HTML files.&lt;/li&gt;
&lt;li&gt;To link our CSS file in &lt;code&gt;index.html&lt;/code&gt;, we are using &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag. Link tag is used to link an external CSS file to HTML file. Link tag is self closing tag. And it has some attributes to keep in mind.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;href&lt;/code&gt; - This specifies the file path.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rel&lt;/code&gt; - stands for relation. Id defines what relation or what this file actually is for.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;
  &lt;a href="#selectors"&gt;
  &lt;/a&gt;
  Selectors
&lt;/h1&gt;

&lt;p&gt;In above examples, we used &lt;code&gt;p&lt;/code&gt; to select element. But if you notice it styled all our p elements. What if we want to style a specific element.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;p&gt;Through classes you can select specific element in css. Let's see how. To use this, you have to use &lt;code&gt;class&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Red colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blue colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Green colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  Css
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.red&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwpIXFvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wdghiu0585z3qftiylw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwpIXFvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wdghiu0585z3qftiylw.PNG" alt="Capture-5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see all the &lt;code&gt;p&lt;/code&gt; elements have color green except the first one which has a class &lt;code&gt;red&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Remember, to select any class in CSS you always have to type &lt;code&gt;.&lt;/code&gt; at the beginning. This tells the browser that this is a class selector.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ids"&gt;
  &lt;/a&gt;
  Ids
&lt;/h3&gt;

&lt;p&gt;Same as classes, we have id. The idea behind Id is, we can use same class for multiple elements but we should use a unique id for a single element. It's totally up to you that you want to use id for multiple element or not. But it is not a good practice.&lt;/p&gt;

&lt;p&gt;to create id we use &lt;code&gt;id&lt;/code&gt; attribute. And to select it in the CSS we type &lt;code&gt;#&lt;/code&gt; before the actual id name.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Red colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blue colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Green colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#stylecss"&gt;
  &lt;/a&gt;
  Style.css
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.red&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#blue&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_d9v7eR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ameqrdf4b1fq7ql4213q.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_d9v7eR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ameqrdf4b1fq7ql4213q.PNG" alt="Capture-3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see some CSS properties.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;width&lt;/code&gt; : As name suggests, this specifies element's width. The value for this could be in &lt;code&gt;%&lt;/code&gt; or &lt;code&gt;px&lt;/code&gt;. Example - &lt;code&gt;width: 100px;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;height&lt;/code&gt; : This specifies element's height. Valid Values are same as &lt;code&gt;width&lt;/code&gt; properties.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;color&lt;/code&gt; : This specifies font/text color. Values could be in hexadecimal codes, or rgb mode, or you can common color name. Example - &lt;code&gt;color: rgb(0, 0, 0);&lt;/code&gt; or &lt;code&gt;color: black;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;font-size&lt;/code&gt; : This is used to change/set fonts size. Values can be in &lt;code&gt;px&lt;/code&gt;. Example - &lt;code&gt;font-size: 20px;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;background-color&lt;/code&gt; : This is used to set background color. Valid values are same as &lt;code&gt;color&lt;/code&gt; property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;border&lt;/code&gt; : This is used to define border of the element. It is used like this.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;thickness&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;thickness&lt;/code&gt; : It is the thickness of the border. vale could be in px. Like &lt;code&gt;20px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border type&lt;/code&gt;: It specifies which type of border we want. Value could be &lt;code&gt;solid | dotted | dashed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border color&lt;/code&gt;: It is used to set border's color.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are lot of CSS property, that we'll discuss in future. But if you to know more. You should &lt;a href="https://www.w3schools.com/w3css/defaulT.asp"&gt;checkout this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And I also have some articles which covers CSS advance topics so you read them too.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-transform-everything-you-need-for-a-good-developer-4obc"&gt;CSS Transform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/all-about-css-before-and-after-element-css-pseudo-elements-5g1n"&gt;CSS pusedo elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/display-flex-complete-guide-on-css-flex-box-2021-5bi2"&gt;CSS Flex Box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/media-query-everything-you-need-for-responsive-design-b8g"&gt;CSS Media Query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-position-everything-you-need-for-good-developer-pfh"&gt;CSS Positions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, that's sit for today. I hope you understood each and everything. If you have any doubt feel free to ask me in comments.&lt;/p&gt;

&lt;p&gt;If you like, you can subscribe my &lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;youtube channel&lt;/a&gt;.I create awesome web development tutorials. You can also watch tutorial on &lt;a href="https://www.youtube.com/watch?v=fOKgHld96mU"&gt;Youtube Clone&lt;/a&gt; by me.&lt;/p&gt;

&lt;p&gt;Thanks For reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Nextless.js - Next JS SaaS Boilerplate Template with Serverless backend</title>
      <author>Remi W.</author>
      <pubDate>Sat, 31 Jul 2021 11:29:54 +0000</pubDate>
      <link>https://dev.to/ixartz/nextless-js-next-js-saas-boilerplate-template-with-serverless-backend-34l5</link>
      <guid>https://dev.to/ixartz/nextless-js-next-js-saas-boilerplate-template-with-serverless-backend-34l5</guid>
      <description>&lt;p&gt;Recently, I was building my own SaaS product and it took me 5 months to build it from scratch, which was way more time than I expected at the beginning. It wasn't an easy journey, but I finally did it! üéâ&lt;/p&gt;

&lt;p&gt;Here is some of my learning to build a SaaS product in 2021.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-site-generator"&gt;
  &lt;/a&gt;
  Static Site Generator
&lt;/h2&gt;

&lt;p&gt;You heard it correctly, you can build a SaaS with Static Site Generator (SSG). I made this first SaaS in Next JS in static mode (next export). So, I can host the frontend on any static hosting: cheap, fast, highly scalable, easy to maintain, secure, etc. No need to have a dynamic server to serve your UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ui-components"&gt;
  &lt;/a&gt;
  UI components
&lt;/h2&gt;

&lt;p&gt;The frontend is fully built in React and TypeScript styled with Tailwind CSS. I made everything:&lt;/p&gt;

&lt;p&gt;üî• Landing Page&lt;br&gt;
üî• Authentication&lt;br&gt;
üî• Dashboard&lt;br&gt;
üî• Forms&lt;br&gt;
üî• User Settings&lt;br&gt;
üî• Table&lt;/p&gt;

&lt;p&gt;The components paradigm definitively makes your UI more modular and more reusable.&lt;/p&gt;

&lt;p&gt;You don't need to hire a UI/UX designer anymore for a micro-SaaS!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-experience-build-for-developers"&gt;
  &lt;/a&gt;
  Developer Experience, build for developers
&lt;/h2&gt;

&lt;p&gt;As a passionate developer, I love using tools helping me to be a better engineer:&lt;/p&gt;

&lt;p&gt;‚ù§Ô∏è Type checking with TypeScript&lt;br&gt;
‚ù§Ô∏è Linter with ESLint&lt;br&gt;
‚ù§Ô∏è Code formatter with Prettier&lt;br&gt;
‚ù§Ô∏è Editor configuration for VSCode&lt;br&gt;
‚ù§Ô∏è Local development and Debugging session&lt;/p&gt;

&lt;p&gt;Maybe one day, with GitHub Copilot, you don't need to code anymore ;) But, for now, Developer Experience is extremely important to write high-quality code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fully-serverless"&gt;
  &lt;/a&gt;
  Fully Serverless
&lt;/h2&gt;

&lt;p&gt;For this project, I was a solo developer, I need to get help from the right tools. And, Serverless is one of them. It really makes your code ready for production:&lt;/p&gt;

&lt;p&gt;üöÄ One command deployment for backend&lt;br&gt;
üöÄ Infrastructure as code, also deploy in one command&lt;br&gt;
üöÄ Highly scalable with Serverless&lt;br&gt;
üöÄ Low maintenance: no server maintenance, no Docker, no Kubernetes&lt;/p&gt;

&lt;p&gt;Because it's Serverless, I only pay based on my traffic.&lt;/p&gt;

&lt;p&gt;You don't need to hire a DevOps engineer anymore for a small SaaS!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stripe-integration"&gt;
  &lt;/a&gt;
  Stripe integration
&lt;/h2&gt;

&lt;p&gt;Like any SaaS product, you need to accept subscriptions. Accepting payment is difficult, it's even more difficult to build a subscription with recurring payment.&lt;/p&gt;

&lt;p&gt;Stripe is one of the best solutions you can find on the market. Even that, it wasn't an easy integration: webhooks, reading documentation, code example, asking questions, testing, etc.&lt;/p&gt;

&lt;p&gt;Here is the result, now my users can easily subscribe to any plan. They can also have access to a self-serve customer portal where they can update, upgrade, cancel, pause, resume, manage their plan.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextlessjs-next-js-saas-starter"&gt;
  &lt;/a&gt;
  Nextless.js, Next JS SaaS starter
&lt;/h2&gt;

&lt;p&gt;It's only a showcase of what I've done recently. But, in a couple of weeks, I'll share more details on what I have learned by building my first SaaS product.&lt;/p&gt;

&lt;p&gt;Here is the link to my first SaaS: &lt;a href="https://postmage.com"&gt;PostMage for generating social image&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find more information on the tech stack at &lt;a href="https://nextlessjs.com"&gt;Nextless.js SaaS Boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oq_SrpAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nextlessjs.com/assets/images/hero-image.png" alt="Next JS SaaS Boilerplate Starter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have learned so much about Next JS, web development, frontend development, React, Tailwind CSS, TypeSript Serverless, Stripe, AWS, Infrastructure by building my first SaaS product. I'll definitely share my experience with tutorials, blog posts, etc. Stay tuned.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>How to create a popup menu in React that closes on clicking outside</title>
      <author>Kunal Bagaria</author>
      <pubDate>Sat, 31 Jul 2021 11:17:06 +0000</pubDate>
      <link>https://dev.to/kb24x7/how-to-create-a-popup-menu-in-react-34hh</link>
      <guid>https://dev.to/kb24x7/how-to-create-a-popup-menu-in-react-34hh</guid>
      <description>&lt;p&gt;So here you are, you want to make your popup in your website but you can't find a good tutorial on how to do that. Fear not, your friendly neighborhood react developer is here to save the day.&lt;/p&gt;

&lt;p&gt;First things first, we are gonna use an external npm module to make things easier.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add react-click-away-listener&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i react-click-away-listener&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Now, on to the syntax:&lt;/p&gt;

&lt;p&gt;You can find additional docs here: &lt;a href="https://www.npmjs.com/package/react-click-away-listener/v/0.4.2"&gt;Link&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ClickAwayListener&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-click-away-listener&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPopup&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* The option to open the popup */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* The popup itself */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ClickAwayListener&lt;/span&gt; &lt;span class="na"&gt;onClickAway&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;popup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Items of the Popup&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Items of the Popup&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Items of the Popup&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ClickAwayListener&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you have it, that's basically how you can make a click away listening popup in react. I have excluded the styling portion for this article, but I'll be sure to write up on it soon.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>cra</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How does it long to Learn Python 	</title>
      <author>Fastrak Technology</author>
      <pubDate>Sat, 31 Jul 2021 10:09:34 +0000</pubDate>
      <link>https://dev.to/georgelucas3214/how-does-it-long-to-learn-python-44bc</link>
      <guid>https://dev.to/georgelucas3214/how-does-it-long-to-learn-python-44bc</guid>
      <description>&lt;p&gt;Overall, it can take somewhere in the range of five to 10 weeks to learn the essentials of Python programming, including object-situated programming, fundamental Python sentence structure, information types, circles, factors, and capacities. Eventually, however, how long it requires to learn Python relies upon how much experience you have with programming dialects, web improvement, information science, and other related fields. &lt;br&gt;
In a Python course like Brain stations, you'll learn center ideas like libraries, word references, and records, which are required information for an information centered job. The right preparing will give you a key comprehension of Python, which thus empowers you to learn more mind boggling AI and information science ideas pushing ahead. Learning Python, however, is generally simple. &lt;br&gt;
However it's thick, with a multitude of libraries to learn and encode through, Python's linguistic structure is significantly basic, and its ideas are moderately direct. The simple punctuation makes for fast learning and adds to a by and large intuitive and smoothed out coding experience. That truly facilitates the responsibility on your mind as you dive into greater and more intricate activities. &lt;br&gt;
Python is additionally an exceptionally adaptable language. It is utilized in a wide range of sorts of tasks and by numerous huge associations, including Facebook, NASA, Reddit, and Amazon. Enormous organizations love its force and versatility, so the language can be required to keep on ascending in popularity all throughout the planet. There's not really a tech work that you can't make a difference Python to, which will make you more important to any business or customer. &lt;br&gt;
Python's hearty cluster of libraries smoothest out the coding cycle monstrously since you can just info activity from the library into your code. Shockingly better, since Python is open source, the rundown of libraries and assets is continually developing. As Python gains much greater popularity, clients will discover more adaptable libraries that will assist them with writing code in less time and smooth out existing substance.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React JSX in Depth</title>
      <author>Himanshu Kanojiya</author>
      <pubDate>Sat, 31 Jul 2021 09:57:10 +0000</pubDate>
      <link>https://dev.to/himanshukanojiya/react-jsx-in-depth-3dhj</link>
      <guid>https://dev.to/himanshukanojiya/react-jsx-in-depth-3dhj</guid>
      <description>&lt;p&gt;&lt;strong&gt;Prerequisite:&lt;/strong&gt; Basic knowledge of React&lt;/p&gt;

&lt;p&gt;Did you know in React, it is not required to create a component using only JSX? You can use React createElement function as well for building the Components. &lt;/p&gt;

&lt;p&gt;Then, why do people use it most in their React App? Let's deep dive, and understand more about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-jsx-in-react"&gt;
  &lt;/a&gt;
  What is JSX in React?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
    &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;Hey, I am Himanshu&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;

)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const hOneHeading = &amp;lt;h1&amp;gt;Hey, I am Himanshu&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0AmFH9BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0u1vlvb8gp1n7de7iluo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0AmFH9BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0u1vlvb8gp1n7de7iluo.gif" alt="confuse"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JSX (JavaScript XML) is a syntax extension to JavaScript that gives visual aid to developers by allowing them to write HTML types of codes in JavaScript, and it helps to describe &lt;strong&gt;"what the User Interface should look like and how it should be"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After that, React Engine will convert those JSX into React function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;React.createElement(component, props, ...children)  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Technical Terms, JSX is syntactic sugar in React that provides React.createElement(component, props, ...children) function after converting from JSX.&lt;/p&gt;

&lt;p&gt;So, Instead of writing long and long React.createElement function to create the UI, React team developed JSX to build UI using something that we are used to, which is HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MB0S2uI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7adj26ujrq1y83wiefgj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MB0S2uI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7adj26ujrq1y83wiefgj.gif" alt="Smart Person"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see the breakdown of the JSX converting process to React.createElement function:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSX Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1 className:"topBarHeading"&amp;gt;I am Himanshu&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;compiles to&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;React.createElement("h1",{className:"topBarHeading",
"I am Himanshu"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-expressions-into-jsx-as-we-do-in-template-literals"&gt;
  &lt;/a&gt;
  Adding Expressions into JSX as we do in template literals:
&lt;/h3&gt;

&lt;p&gt;Well, in the end, JSX is JavaScript too. So, adding expressions in JSX is easy because it uses almost the same syntax approach as we use in template literals. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const userName = "Himanshu";
const whoLoggedIn = &amp;lt;h1&amp;gt;{userName}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the curly braces, you can put almost any valid expressions like variables, inline condition checks, perform functions calls, etc. As we see earlier, after compilation, JSX becomes the regular JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Expressions inside curly braces {} always get evaluated. Also, these curly braces give a signal to React that we are using javascript expressions here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-attributes-to-jsx-elements"&gt;
  &lt;/a&gt;
  Adding Attributes to JSX elements
&lt;/h3&gt;

&lt;p&gt;In HTML, we can add many attributes to specify more about the tag, like adding a class attribute, id attribute, src attribute, etc. &lt;/p&gt;

&lt;p&gt;In React, we can do the same with JSX elements, but the only difference is that JSX is closer to JavaScript than to HTML, so HTML attributes become camelCase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const element = &amp;lt;div tabIndex = "0"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As the &lt;strong&gt;"class"&lt;/strong&gt; is a reserved keyword in JavaScript, it becomes &lt;strong&gt;className&lt;/strong&gt;, &lt;strong&gt;"for"&lt;/strong&gt; is reserved for loop, it becomes &lt;strong&gt;htmlFor&lt;/strong&gt;, and some other attributes like &lt;strong&gt;tabindex&lt;/strong&gt; become &lt;strong&gt;tabIndex&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-children-elements-as-we-do-in-html"&gt;
  &lt;/a&gt;
  Adding Children elements as we do in HTML
&lt;/h3&gt;

&lt;p&gt;Well, creating nested tags in HTML, we all mostly do in our projects, and in React, we can do the same thing as we do in HTML, so here is the way to do the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sampleComponent(){
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;h1&amp;gt;Hey, I am himanshu&amp;lt;/h1&amp;gt;
            &amp;lt;p&amp;gt;Taskmaster...A JS Master&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        )
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#did-you-know-the-jsx-feature-in-react-prevents-xss-crosssitescripting-attack-injections-attacks"&gt;
  &lt;/a&gt;
  Did you know the JSX feature in React prevents XSS (Cross-site-Scripting Attack) injections Attacks?
&lt;/h3&gt;

&lt;p&gt;How? What happens under the hood?&lt;br&gt;
Well, by default, React DOM escapes any value before rendering them on the screen, which means that whatever value (can be malicious code) you give in the input field will be converted to a string by JSX. Also, if you display the input on the screen, then those inputs will be shown as it is on-screen in text format unless you specified those explicitly in the code.&lt;/p&gt;

&lt;p&gt;This feature in React makes our React-based app safer from XSS (Cross-Site-Scripting attacks).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#specifying-react-element-type-using-name-casing"&gt;
  &lt;/a&gt;
  Specifying React Element type using Name Casing
&lt;/h3&gt;

&lt;p&gt;Whenever you create a custom component in your project, always start your component name with a capital case. It will help the ReactJS engine in several ways like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Help React Engine to easily distinguish which tag is an HTML tag or custom component. Otherwise, some weird things can happen.&lt;/li&gt;
&lt;li&gt;Help you to spot which is the custom component or not.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, Built-in HTML tags in JSX represent in lowercase, and user-defined custom components represent in Capital Case casing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function exampleOfNameCasing(){
return (
    &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;Himanshu kanojiya&amp;lt;/h1&amp;gt;
        &amp;lt;CustomComponent&amp;gt;I am JS Task Master&amp;lt;/CustomComponent&amp;gt;
    &amp;lt;/div&amp;gt;
)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#accessing-internal-components-from-a-module-using-dot-notation"&gt;
  &lt;/a&gt;
  Accessing internal components from a module using dot notation:
&lt;/h3&gt;

&lt;p&gt;In many cases in the future, you can have or need to build a single module that exports many React components. Well, wrapping multiple React components in a module is a convenient way to encapsulate all React components, and access them as per need &amp;amp; requirements.&lt;/p&gt;

&lt;p&gt;Let's see how we can do this, and access them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyParentComponents = {
    userName:function(name){
        return &amp;lt;h1&amp;gt;User Name: {name}&amp;lt;/h1&amp;gt;
}

function myApp(){
    return (
        &amp;lt;MyParentComponents.userName name="Himanshu" /&amp;gt;
)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you have a question like, how the object has been written in JSX format or will it be accessible, will it work as component initialization format? &lt;/p&gt;

&lt;p&gt;Yes, It will work because the userName function can be accessed using dot notation as we access object property in JavaScript. The other fact is that the userName function is React component, so it is valid to do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some don't's while using this:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;As it works like JavaScript objects, never use general expressions to access internal components (MyParentComponents[userName], instead, save it to individual variables first, then use it like below:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function doThis(){
    const componentFromModule = MyParentComponents["userName
"]
    return &amp;lt;MyParentComponents.userName name="Himanshu" /&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, that's it for JSX, and now let's understand about the props &amp;amp; another several things about JSX:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can also pass JavaScript expressions as a prop by using curly braces. For an example: , as it is in curly braces, it will be evaluated first, and then it becomes 6&lt;/li&gt;
&lt;li&gt;You can not use if-else and loop in expression, as these are not valid expressions, so put in the surrounding code.&lt;/li&gt;
&lt;li&gt;You can use the ternary conditional operator in the JSX.&lt;/li&gt;
&lt;li&gt;Instead of loops, you can use higher-order functions like map, reduce, filter, etc.&lt;/li&gt;
&lt;li&gt;You can use the spread operator to pass an object as a prop. For an example: &amp;lt;Hm numbers = {...numbers}&lt;/li&gt;
&lt;li&gt;Booleans, null, and undefined don't render&lt;/li&gt;
&lt;li&gt;Props come as JavaScript Objects in the function signature.&lt;/li&gt;
&lt;li&gt;Suppose you have to write JSX between the opening and closing tag, then that content between those tags is passed as a special prop which is the props.children, and you can access them in the parent component as well. Example:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example:

function ParentComp(props){
    return (
        return &amp;lt;h1&amp;gt;{props.children}&amp;lt;/h1&amp;gt;
)};

function ChildComp(){
    return (
        &amp;lt;ParentComp&amp;gt;I am Hero&amp;lt;/ParentComp&amp;gt;
)}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to Add Visual Studio Code Browser Preview Extension</title>
      <author>Mudacumura Brunoblaise</author>
      <pubDate>Sat, 31 Jul 2021 09:45:36 +0000</pubDate>
      <link>https://dev.to/brunoblaise/how-to-add-visual-studio-code-browser-preview-extension-3k2i</link>
      <guid>https://dev.to/brunoblaise/how-to-add-visual-studio-code-browser-preview-extension-3k2i</guid>
      <description>&lt;p&gt;Sometimes, it is hard to switch between your browser and your editor this is a huge problem for people who like to share screens or do record screens for videos not only them but even us who don't do it. It is not easy since it involves switching between browser and editor, so today it will be a history starting from now no more pain let try to get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open vscode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;and go to extension or just click &lt;strong&gt;ctrl + shift + x&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Search for Browser Preview it should look like this and then install&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3Zf_SeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627723921734/xX9kXRujr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3Zf_SeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627723921734/xX9kXRujr.png" alt="Desktop screensh (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now click ctrl + shift + p to open command palette &lt;/p&gt;

&lt;p&gt;search for Browser Preview and then click enter it should look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ww162SIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627724144365/DSvODAp3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ww162SIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627724144365/DSvODAp3n.png" alt="Desktop screensh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a conclusion&lt;/strong&gt;, I am happy to see this extension because it is going to make life much easy and I am super happy to see what you can do with it and I am posting every day about pern stack and some other technologies. Thank you and have a nice day.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>browserpreviewextension</category>
    </item>
    <item>
      <title> How to create a custom Toggle Switch using CSS</title>
      <author>Karan Kumar</author>
      <pubDate>Sat, 31 Jul 2021 09:43:15 +0000</pubDate>
      <link>https://dev.to/karankmr/how-to-create-a-custom-toggle-switch-using-css-4pmi</link>
      <guid>https://dev.to/karankmr/how-to-create-a-custom-toggle-switch-using-css-4pmi</guid>
      <description>&lt;p&gt;Let's create a simple customized toggle switch using CSS. Initially when I was trying to create this, I founded it very confusing because many developers have created this button but none of explain it how is this working.&lt;/p&gt;

&lt;p&gt;So after struggling a little bit, I've learned how to create this and I want to share with you all.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#prerequisite-knowledge"&gt;
  &lt;/a&gt;
  Prerequisite Knowledge
&lt;/h5&gt;

&lt;p&gt;Basics of &lt;a href="https://www.w3schools.com/html/"&gt;HTML&lt;/a&gt;, &lt;a href="https://www.w3schools.com/css/default.asp"&gt;CSS&lt;/a&gt; (specially &lt;a href="https://www.w3schools.com/css/css_pseudo_elements.asp"&gt;Pseudo Elements&lt;/a&gt;)&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbdabFku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxuuxtbm3mngkihryyfh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbdabFku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxuuxtbm3mngkihryyfh.gif" alt="Button working" title="Button Working"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we all know when we assign a label to a input, we can target the input by clicking on label too.&lt;/p&gt;

&lt;p&gt;That's what we are going to take advantage of and by this we can convert our label into custom switch which will act same as checkbox.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's Start
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iLS98d2Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1mjtyh3t3cxyvt4hfto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iLS98d2Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1mjtyh3t3cxyvt4hfto.png" alt="Workflow" title="Our Workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are the steps that we are going to follow in order to create this button.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-create-html-structure"&gt;
  &lt;/a&gt;
  1. Create HTML structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---KhoZu3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm6vcdku9nr1z7tm6y3q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---KhoZu3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm6vcdku9nr1z7tm6y3q.gif" alt="Structure" title="HTML Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this stages we will create the html elements which are input checkbox and a label that is assigned to it but its inner content should be empty.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#reference-code-is-given-below"&gt;
  &lt;/a&gt;
  Reference code is given below.
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"switch"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"switch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"switch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#2-hide-the-input-element"&gt;
  &lt;/a&gt;
  2. Hide the input element
&lt;/h3&gt;

&lt;p&gt;Now we will hide the input element as I said earlier we will make the switch with label element so we don't need the checkbox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"checkbox"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#3-style-the-button-body"&gt;
  &lt;/a&gt;
  3. Style the button body
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UErfDn-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kifogy5ormokei9qbnoh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UErfDn-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kifogy5ormokei9qbnoh.png" alt="Button Body" title="Button Body"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will create the body of switch or the outer part in which ball will move.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#reference-code-is-given-below"&gt;
  &lt;/a&gt;
  Reference code is given below.
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#477a85&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#477a8550&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#4-create-the-toggle-ball"&gt;
  &lt;/a&gt;
  4. Create the toggle ball
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yv2JLskA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzjn47hmo6anqd3z133m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yv2JLskA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzjn47hmo6anqd3z133m.png" alt="Toggle Ball" title="Toggle Ball"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we'll create the toggle ball using pseudo element &lt;code&gt;::after&lt;/code&gt;.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#reference-code-is-given-below"&gt;
  &lt;/a&gt;
  Reference code is given below.
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e8f5f7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this stage our 80% of work is done, now we just have to add the animation to make our switch work.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-adding-animation"&gt;
  &lt;/a&gt;
  5. Adding animation
&lt;/h3&gt;

&lt;p&gt;As we know when we toggle the label, checkbox also get toggled.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now we'll add the condition, when checkbox gets checked our ball should be shifted to the right.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NYUqaXbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fb0768h558qmbfn26l23.gif" alt="Slide Animation" title="Slide Animation"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;   &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To Change the background on button toggle
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEpw5-eV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5cry6m25h64fo5pv1ek.gif" alt="Background transition" title="Background transition"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
   &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#243d42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now If want a more smooth magnetic effect. When ball get active it its width should increase for a moment. &lt;em&gt;A element gets active when we click on it.&lt;/em&gt; We can do this by using &lt;code&gt;:active&lt;/code&gt; selector.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;    &lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="nd"&gt;:active:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;160px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#output-preview"&gt;
  &lt;/a&gt;
  Output Preview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lPrqiUJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yffrjipmf0e9w4d9hzxw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lPrqiUJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yffrjipmf0e9w4d9hzxw.gif" alt="Output" title="Output"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#try-demo"&gt;
  &lt;/a&gt;
  Try Demo
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/karan-kmr/embed/ZEKoGBr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#find-me-on"&gt;
  &lt;/a&gt;
  Find Me On
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/karancodes/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_XJadsNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38dkuuvtufkyoxggelag.png" alt="@karancodes Instagram Profile"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>switch</category>
      <category>toggle</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
