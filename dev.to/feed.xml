<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>EC2 AMI</title>
      <author>Ajit Singh</author>
      <pubDate>Mon, 05 Jul 2021 04:13:03 +0000</pubDate>
      <link>https://dev.to/this-is-learning/ec2-ami-b97</link>
      <guid>https://dev.to/this-is-learning/ec2-ami-b97</guid>
      <description>&lt;p&gt;In the last tutorial we created lots of EC2 instances for auto scaling but what if we want our EC2 instances configured already before adding them to our ASG. This is where AMI comes in an AMI stands for Amazon Machine Image. It allows you to customize your EC2 instance. With an AMI you can add your on configured software, config, monitoring and operating system.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-does-an-ami-work-"&gt;
  &lt;/a&gt;
  How does an AMI work ?
&lt;/h1&gt;

&lt;p&gt;If you create your own AMI then AWS saves all the configurations and software in an EBS snapshot in such a way that it can start an EC2 instance can be configured from that AMI. After that we can launch our EC2 instances from these AMI. These are available to use in a region and can be copied across regions to take advantage of global presence of AWS.&lt;/p&gt;

&lt;p&gt;We were already using AMI from the first time we created an EC2 instance. Where we selected Amazon Linux 2 AMI in the second step while creating an EC2 instance. These are three types of AMI available on AWS.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Public AMI provided by AWS &lt;/li&gt;
&lt;li&gt;Marketplace AMI which we saw in the &lt;a href="https://dev.to/this-is-learning/start-an-instance-on-aws-ec2-hands-on-2hb3"&gt;second part&lt;/a&gt; of this series where AMI with preconfigured software. &lt;/li&gt;
&lt;li&gt;Private AMI: AMI which we build and maintain ourselves.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So you can see AMI are very powerful we can get preconfigured EC2 instances from it. Which can be put behind a load balancer and an ASG to get a group of preconfigured servers where we can deploy our apps. Next up we will do a Hands on how to create an AMI.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloudnative</category>
      <category>cloud</category>
    </item>
    <item>
      <title>MATLAB MONDAYSüí•- Crash Course part-2</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 05 Jul 2021 03:53:18 +0000</pubDate>
      <link>https://dev.to/aatmaj/matlab-mondays-crash-course-part-2-2ol1</link>
      <guid>https://dev.to/aatmaj/matlab-mondays-crash-course-part-2-2ol1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-all-this-monday-let-us-learn-prebaked-matlab-functions-which-we-can-just-use-off-the-shelf-after-that-we-will-learn-the-loop-in-matlab"&gt;
  &lt;/a&gt;
  Welcome all! ‚ù§Ô∏è‚Äçüî• This Monday let us learn pre-baked MATLAB functions which we can just use off the shelf. After that we will learn the loop in MATLAB.ü§ü
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;In built Functions in MATLAB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MATLAB supports standered mathematical functions like sin, cos, log, exponentiation, square root, and many more.&lt;br&gt;
However, unlike many languages, input for these functions can be an integer or even an matrix vectors.&lt;br&gt;
Many MATLAB functions take in multiple inputs and return multiple outputs. eg. the min function can take in an array of numbers and output both, the smallest number and the position of the smallest number.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CIGZ_X9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ppw8z00p8mjxwob6hnd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CIGZ_X9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ppw8z00p8mjxwob6hnd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, the function plot takes in two matrices and plots their values. The plot connects all the points represented by the x,y pairs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkIXe1ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57t4pvhadx7ad0lciz82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkIXe1ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57t4pvhadx7ad0lciz82.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another similer function is scatter() which generates the scatterplot of the functions.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfhWglqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i44d8kzajd7xo0jf9s89.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfhWglqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i44d8kzajd7xo0jf9s89.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 MATLAB contains loads of other functions, whose documentation can be found out &lt;a href="https://in.mathworks.com/help/matlab/elementary-math.html?s_tid=CRUX_lftnav"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One more valuable function is rand(), which returns a random value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt; x=rand()

x =

    0.8147
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Program control statements&lt;/strong&gt;&lt;br&gt;
MATLAB has the for loop syntax as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
 &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the running variable i assumes values from 0,99&lt;br&gt;
Python equivalent of this statement is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="c1"&gt;#function
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a sample program-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_WREDWG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrcivocu7cnwsmjzonzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_WREDWG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrcivocu7cnwsmjzonzk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The if else statement has the following syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
 &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Python equivalent is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a sample&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

    &lt;span class="mf"&gt;3.1416&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;While loop&lt;/strong&gt;&lt;br&gt;
 MATLAB also has the while loop with syntax as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;
&lt;span class="n"&gt;statement&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For an infinite loop,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
 &lt;span class="n"&gt;statement&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is an example which uses while loop- the Collatz conjuncture&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that % operator in python is replaced by the mod() function in MATLAB mod(a,b) is equivalent to a%b&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;That's all for this week. üèÜ Your comments really motivate me, so for any suggestions or doubts, please comment below üëá, and I will be happy to help üôÇ üéóÔ∏è Follow me for updates...&lt;br&gt;
Also, you can gmail me for any suggestion or help üôå&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/aatmajmhatre/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mtLmTxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/linkedin-%25230077B5.svg%3F%26style%3Dfor-the-badge%26logo%3Dlinkedin%26logoColor%3Dwhite" alt="LinkedIn"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aatmaj.mhatre@gmail.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C75QF96b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gmail-D14836%3Fstyle%3Dfor-the-badge%26logo%3Dgmail%26logoColor%3Dwhite" alt="Gmail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bye for now üñê&lt;br&gt;
Meet you all soonüëç&lt;/p&gt;

&lt;p&gt;‚ûï‚ûñ‚úñÔ∏è‚ûó&lt;/p&gt;

</description>
      <category>matlab</category>
    </item>
    <item>
      <title>Stepping into AI world</title>
      <author>Param3103</author>
      <pubDate>Mon, 05 Jul 2021 03:09:43 +0000</pubDate>
      <link>https://dev.to/param3103/stepping-into-ai-world-3434</link>
      <guid>https://dev.to/param3103/stepping-into-ai-world-3434</guid>
      <description>&lt;p&gt;As I began my journey into the world of machine learning in python, I was totally lost on what should I do. Machine Learning has been the latest craze in the world of programming and I was eager to step my foot into this newest world in the realm of programming.&lt;/p&gt;

&lt;p&gt;AI is set to be the next craze in the next 50 years or so and my curiosity helped me churn out some possible resources I could need to understand this bleak idea to me.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cs50.harvard.edu/ai/2020/"&gt;CS50's Introduction to Artificial Intelligence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I first came across this link above, in which Andrew Ng &lt;em&gt;(He is awesome by the way)&lt;/em&gt; , a very renowned machine learning expert, shares on the mathematical and conceptual logic and understanding of the machine learning algorithms. I found this very educational as it was here I first was able to relate machine learning problems to optimisation.&lt;/p&gt;

&lt;p&gt;Hereafter, I went to the &lt;em&gt;Elements of AI&lt;/em&gt; course.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.elementsofai.com/"&gt;Elements of AI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this course, I was able to get a better grasp of the fundamental logic and reasoning behind machine learning algorithms.&lt;/p&gt;

&lt;p&gt;I thought now I was ready to dive into the programming part of machine learning. However, the courses I found either only talked about the code with no explanation about the concept or showed the code after explaining the concepts. It was only until I saw this video series by &lt;em&gt;CodeBasics&lt;/em&gt; that I was really able to piece things together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLeo1K3hjS3us_ELKYSj_Fth2tIEkdKXvV"&gt;Data Science Full Course For Beginners- CodeBasics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He explained the machine learning algorithms, explained the logic behind each line of code he was writing and what steps he was taking to use the ml model. Shout out to him and to all other beginners out there, I would recommend you to follow him.&lt;/p&gt;

&lt;p&gt;After looking at his videos, I thought it was time I began my first ml project. More about it in the next post!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>ai</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What I learned from my last Programming Project</title>
      <author>Menard Maranan</author>
      <pubDate>Mon, 05 Jul 2021 02:01:47 +0000</pubDate>
      <link>https://dev.to/menard_codes/what-i-learned-from-my-last-programming-project-3gce</link>
      <guid>https://dev.to/menard_codes/what-i-learned-from-my-last-programming-project-3gce</guid>
      <description>&lt;p&gt;For the last few days, I've been studying Next.js, and to compliment my learning journey, I decided to create a project (a blogging website where users can create account, write blogs, read other's blogs, etc.). My intent for starting that project is to better learn Next.js by doing, and also for fun, but it turns out that I learned more than what I am expecting. I discovered more flaws of my knowledge and skills, and I am writing those down here.&lt;/p&gt;

&lt;p&gt;Before that Next.js journey, I just know React.js, Firebase, and a little bit of some other technologies (like express.js, GraphQL, etc.). So I decided to expand my knowledge and started the #100DaysOfChallenge and shared my progress in my &lt;a href="https://twitter.com/menard_codes"&gt;twitter&lt;/a&gt; account.&lt;/p&gt;

&lt;p&gt;Fast forward on the last 3 days, I decided to take on a project that's been brewing in my mind while reading things about Next.js. But before I do any coding, I did some planning, and designed my blogsite in Figma, and oh, I also did specified some basic requirements or features I want to implement (turns out I haven't implemented all of 'em) and just throw them all into my kanban board (yah, I don't know how to use it properly, yet).&lt;/p&gt;

&lt;p&gt;Even though I know how important a good plan is, I'm just too anxious to jump straight into coding, because these ideas just keep flooding in my head, so long story short is, I did just code right away (with fingers crossed things will work out as I intended to, but you know what happened), and yeah, here is when I encountered all sorts of problem.&lt;/p&gt;

&lt;p&gt;Fast forward again to today, I just finished the first iteration of the project, I reminisced of the things I did and reflected on all of my mistakes ('cause man that codebase is so unorganized, messy, and buggy, not to mention hard to maintain, so yeah, THAT SHOULD NOT HAPPEN AGAIN... hopefully). I'm not going to write it creatively, and I'll just throw a list of my realizations.&lt;/p&gt;

&lt;p&gt;So I'll put it this way:&lt;/p&gt;

&lt;p&gt;"If I'm going to do the blog site again, what whould I do (before jumping straight into coding)?"&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I should have a better plan

&lt;ul&gt;
&lt;li&gt;Must clearly define the software requirements&lt;/li&gt;
&lt;li&gt;USER STORIES&lt;/li&gt;
&lt;li&gt;Utilize the V-Model (Verification and Validation Model)&lt;/li&gt;
&lt;li&gt;Should have a product roadmap&lt;/li&gt;
&lt;li&gt;Agile Methodology, and Software Development Lifecycle&lt;/li&gt;
&lt;li&gt;Should have learned and used Docker and DevOps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Since I already mentioned DevOps, I should have learned testing, and I should have written tests (because it turns out my project got TONS of bugs along the way, and yeah, that's the problem with just jumping right into the code too quickly... I'm just getting excited, LOL, but that won't happen again... I hope).&lt;/li&gt;
&lt;li&gt;Outsource or just use open source CSS frameworks (because that ate up much of my time, well not much, but almost ALL of my development time)

&lt;ul&gt;
&lt;li&gt;Should have used CSS pre-processor (SCSS) too.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I should have better managed and structured my Data:

&lt;ul&gt;
&lt;li&gt;I should have designed first the Data-Model of my database (it's on firebase-firestore, yah, the NO-SQL thing), because it turns out I got a hard time retrieving data in my project from firestore, especially the relational ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I should have studied and utilized different software architectural designs, because it turns out that my code base became extremely unorganized and unstructured too quickly, that it's so hard to maintain.&lt;/li&gt;
&lt;li&gt;I should also have better utilized the uses of Data Structures and Algorithms, to better optimize my code, and lessen the resources I use.

&lt;ul&gt;
&lt;li&gt;I saw where I can use things like Dynamic Programming, Divide and Conquer, etc. on my code base, but, yeah, I haven't did that.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I should have used Git version control better, and with it, GitHub (because it turned out that I haven't used git branches when developing new features, and it's hard to backtrack from different versions, and turned out that my master branch got tons of bugs, which should not have happened, because it's just like I haven't used Git... Never gonna happen again).&lt;/li&gt;
&lt;li&gt;I should have better used the principles of OOP and Functional Programming. I did used their principles at several parts of my codebase, but not to their full extent, and that's my BIG mistake. In the end, my code base became a mixture of spaghetti code, some FP based codes, and a sprinkle of OOP (should've never did that, I regret that, *face palm).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So this are just the things at the top of my head, and this blog have no edits or drafts, I just write what comes to my head.&lt;/p&gt;

&lt;p&gt;These are the reflections of many of my mistakes and failures, and I'll use this learning to better manage and develop my future projects.&lt;/p&gt;

&lt;p&gt;Till' next time!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Freezed in Flutter</title>
      <author>Khadga shrestha</author>
      <pubDate>Mon, 05 Jul 2021 01:47:28 +0000</pubDate>
      <link>https://dev.to/kodega2016/freezed-in-flutter-b1n</link>
      <guid>https://dev.to/kodega2016/freezed-in-flutter-b1n</guid>
      <description>&lt;p&gt;So here we need a lot of data classes while developing a flutter application. So  &lt;a href="https://pub.dev/packages/freezed"&gt;freezed &lt;/a&gt; is one of the packages which is used to generate data class and union class.&lt;br&gt;
Also, it can be used to serialize and deserialize the JSON data.&lt;/p&gt;

&lt;p&gt;So let's integrate freezed in our flutter application.&lt;br&gt;
First of all, let's create a flutter project using our own command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter create freezed_demo 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that add the following dependencies in the pubspec. yaml file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;freezed: which is the actual code generator that will generate different methods and fields.&lt;/li&gt;
&lt;li&gt;builld_runner: the tools to generate the code.&lt;/li&gt;
&lt;li&gt;freezed_annotation: a package that contains annotations for freezed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we need to add *&lt;em&gt;freezed *&lt;/em&gt; and *&lt;em&gt;builld_runner *&lt;/em&gt; in the dev_dependencies section because it is needed while developing an app that will not be available in the production codes. And **freezed_annotation **to the dependencies section. so after that the resulting pubspec.yaml looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.2
  freezed_annotation: ^0.14.2

dev_dependencies:
  flutter_test:
    sdk: flutter
  build_runner: ^2.0.5
  freezed: ^0.14.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter pub get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's dive into defining a data class using the freezed class.&lt;br&gt;
To define a class in freezed we do not need to define the properties but instead of that, we need to define factory constructor.&lt;br&gt;
We need to annotate that define class to freezed. so our class looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'package:freezed_annotation/freezed_annotation.dart';
part 'user.freezed.dart';

@freezed
class User with _$User {
  const User._();

  factory User({
    required String name,
    required String email,
    @Default(true) bool isActive,
  }) = _User; 
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we need to annotate the Person class with @freezed annotation and also define part of that freezed class which means the generated code(We need to run build runner for that) will be the part of the Person class. Here we can assign a default value using Default(value)&lt;br&gt;
So now let's run the build_runner so that part file of the defined class will be generated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter pub run build_runner build
//In case of dart only
pub run build_runner build otherwise
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use the Person.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var person = Person(name: 'Khadga', email: 'admin@admin.com');
print(person.name); // Khadga
print(person.email); // admin@admin.com
print(person.isActive)//true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use copyWith copy the property of the object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var newPerson=person.copyWith(name:'Sakar Subedi');
print(newPerson.name);//Sakar Subedi
print(person.email); // admin@admin.com
print(person.isActive)//true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is how we define data class using Freezed so let's jump into the  &lt;a href="https://kotlinlang.org/docs/sealed-classes.html"&gt;Union class&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'package:explore_freezed/user.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

part 'result.freezed.dart';

@freezed
class Result with _$Result {
  const Result._();

  factory Result.initial() = _Initial;
  factory Result.success(User user) = _Success;
  factory Result.loading() = _Loading;
  factory Result.error([String? err]) = _Error;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As before after adding this code we need to run our build_runner also we can watch the code changes and generate codes. Now, look at how we can use the generated union class in our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; _currentState.when(
              initial: () {
               // return some widgets
              },
              success: (user) {
                // return some widgets
              },
              loading: () {
                // return some widgets
              },
              error: (err) {
                 // return some widgets
              },
  ),
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we need to implement each subclass of the Result so that no condition will be missed.&lt;/p&gt;

&lt;p&gt;Freezed class also used with  &lt;a href="https://pub.dev/packages/json_serializable"&gt;json_serializable &lt;/a&gt; to deserialize the JSON data to the Data class.&lt;br&gt;
so let's add json_serializable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dev_dependencies:
  flutter_test:
    sdk: flutter
  build_runner: ^2.0.5
  freezed: ^0.14.2
  json_serializable: ^4.1.3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we need to add a part file for json_serializable in the data class and add the FromJson method which will deserialize the JSON data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';

part 'user.g.dart';

@freezed
class User with _$User {
  const User._();

  factory User({
    required String name,
    required String email,
    @Default(true) bool isActive,
  }) = _User;

  factory User.fromJson(Map&amp;lt;String, dynamic&amp;gt; map) =&amp;gt; _$UserFromJson(map);

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use the fromJson method to deserialize data as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; var _decoded = {'name': 'Khadga Shrestha', 'email': 'admin@admin.com'};
 var _user = User.fromJson(_decoded);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for now.&lt;br&gt;
You can check more about freezed at  &lt;a href="https://pub.dev/packages/freezed"&gt;https://pub.dev/packages/freezed&lt;/a&gt; &lt;br&gt;
The code repo for this article&lt;br&gt;
&lt;a href="https://github.com/kodega2016/explore_freezed"&gt;https://github.com/kodega2016/explore_freezed&lt;/a&gt; &lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
    </item>
    <item>
      <title>Your complete guide to Heap data structure!</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 05 Jul 2021 00:38:08 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/your-complete-guide-to-heap-data-structure-20nl</link>
      <guid>https://dev.to/ayabouchiha/your-complete-guide-to-heap-data-structure-20nl</guid>
      <description>&lt;p&gt;Hi, I'm Aya Bouchiha, in this beautiful day, I'm going to explain the Heap data structure.&lt;br&gt;
#day_22&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#definition-of-heap"&gt;
  &lt;/a&gt;
  Definition of Heap
&lt;/h2&gt;

&lt;p&gt;Heap: is a &lt;strong&gt;complete binary tree&lt;/strong&gt; (&lt;a href="https://dev.to/ayabouchiha/part-2-binary-tree-in-data-structure-5bgf"&gt;types of a binary tree&lt;/a&gt;)  (&lt;em&gt;which each node has at most two children and All the leaves should lean towards the left&lt;/em&gt;) where the root node is compared with its children and arrange accordingly.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-of-complete-binary-tree"&gt;
  &lt;/a&gt;
  Example of complete binary tree
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PeAHOp8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoszkp1y8lpgr16w7sh0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PeAHOp8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoszkp1y8lpgr16w7sh0.jpg" alt="complete binary tree in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-of-incomplete-binary-tree"&gt;
  &lt;/a&gt;
  Example of incomplete binary tree
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S1HZ7Iix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br3gqablukvoktyj18ka.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S1HZ7Iix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br3gqablukvoktyj18ka.jpg" alt="binary tree in data structure Aya Bouchiha Heap"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#types-of-heap"&gt;
  &lt;/a&gt;
  Types of Heap
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#1-maxheap"&gt;
  &lt;/a&gt;
  1. Max-heap
&lt;/h3&gt;

&lt;p&gt;The key of every node is smaller than or equal its parent &lt;br&gt; &lt;br&gt;
&lt;code&gt;arr[parent] &amp;gt;= arr[i]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-of-maxheap"&gt;
  &lt;/a&gt;
  Example of max-heap
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lNFjf0Bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibg7sxp6y969mmk3vzgc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNFjf0Bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibg7sxp6y969mmk3vzgc.jpg" alt="max heap in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-minheap"&gt;
  &lt;/a&gt;
  2. Min-heap
&lt;/h3&gt;

&lt;p&gt;The key of every node is greater  than or equal its parent &lt;br&gt;&lt;br&gt;
&lt;code&gt;arr[parent] &amp;lt;= arr[i]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-of-minheap"&gt;
  &lt;/a&gt;
  Example of min-heap
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--waCNVUzG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0j6kwk58xi6opt81v6f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--waCNVUzG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0j6kwk58xi6opt81v6f.jpg" alt="min heap un data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#application-of-heap"&gt;
  &lt;/a&gt;
  Application of Heap
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Heap sort algorithm&lt;/li&gt;
&lt;li&gt;Order statistics Getting The minimum value or the maximum value in a constant time&lt;/li&gt;
&lt;li&gt;Graph algorithms like Prim's Algorithm and Dijkstra's algorithm&lt;/li&gt;
&lt;li&gt;Priority Queue&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#space-and-time-complexity-of-heap"&gt;
  &lt;/a&gt;
  Space and Time complexity of Heap
&lt;/h2&gt;

&lt;p&gt;The space complexity of the heap is O(n)&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;insertion (push)&lt;/th&gt;
&lt;th&gt;deletion (pop)&lt;/th&gt;
&lt;th&gt;peek&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O(log n)&lt;/td&gt;
&lt;td&gt;O(log n)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#heap-array-implementation"&gt;
  &lt;/a&gt;
  Heap array implementation
&lt;/h2&gt;

&lt;p&gt;let's take this example of max-heap:&lt;br&gt;
the index of each node is between parentheses &lt;strong&gt;( )&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          15(0)
      /          \
 (1) 9            13 (2)
    /  \         /
(3)5  (4)7   (5)11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the implementation can be done by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; making the root the first element in the array &lt;code&gt;arr[0] = root&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Parent node: &lt;code&gt;arr[(i - 1) // 2]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Left-child: &lt;code&gt;arr[2 * i + 1]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Right-child: &lt;code&gt;arr[2 * i + 2]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MinHeap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getLeftChildNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getRightChildNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasParent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# cheking if a node has a parent
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasLeftChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# cheking if a node has a left child
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLeftChildNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasRightChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# cheking if a node has a right child
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getRightChildNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getMinValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""
            time complexity =&amp;gt; O(1)
        """&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#insertion-push-in-heap"&gt;
  &lt;/a&gt;
  Insertion (push) in Heap
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-approach-of-insertion"&gt;
  &lt;/a&gt;
  1. Approach of insertion
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Increase the size of the heap to add a new element&lt;/li&gt;
&lt;li&gt;The heap is a complete binary tree that's why the new element should lean towards the left, which means, in array representation, we insert the element at the end of the array.&lt;/li&gt;
&lt;li&gt;Heap must satisfy the heap-order property, that's why  we should &lt;strong&gt;&lt;em&gt;Heapify&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;bubble up&lt;/em&gt;&lt;/strong&gt; the new element, Heapify or bubbling up is swapping the new element with its parent until 

&lt;ul&gt;
&lt;li&gt;its parent is greater than or equal to it in a max-heap.&lt;/li&gt;
&lt;li&gt;its parent is smaller than or equal to it in min-heap.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-explanation-of-insertion"&gt;
  &lt;/a&gt;
  1. Explanation of insertion
&lt;/h3&gt;

&lt;p&gt;For better understanding, let's take an example:&lt;br&gt;
¬† we want to insert 1 in this min-heap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        3 (0)
      /   \
 (1) 5     10 (2)
   / 
  9 (3)  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Insert the new Element at the end of the array
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         3 (0)
       /   \
 (1)  5     10 (2)
    /  \ 
(3)9 (4)1 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Bubble up the new element&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Since 1 &amp;lt; 5, swap them, so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         3 (0)
       /   \
 (1)  1     10 (2)
    /  \ 
(3)9 (4)5 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;newElementIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# 4
&lt;/span&gt;  &lt;span class="c1"&gt;# the index of the parent of the new element
&lt;/span&gt;  &lt;span class="n"&gt;ParentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newElementIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# (4-1)//2 = 1 
&lt;/span&gt;  &lt;span class="c1"&gt;# 1 &amp;lt; 5 
&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;newElementIdx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ParentIdx&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
      &lt;span class="c1"&gt;# swap(1, 5)
&lt;/span&gt;      &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;newElementIdx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ParentIdx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ParentIdx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;newElementIdx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the array will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Hence 1 &amp;lt; 3, swap them, so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         1 (0)
       /   \
 (1)  3     10 (2)
    /  \ 
(3)9 (4)5 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we'll do the same process for 1 and 3 like  (1 and 5) so the array will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-implementation-of-insertion-in-python"&gt;
  &lt;/a&gt;
  3. Implementation of insertion in python
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#the-implementation-of-bubble-up-or-heapify-function-in-python"&gt;
  &lt;/a&gt;
  the implementation of bubble up or heapify function in python
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bubbleUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;parentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parentIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;parentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
        &lt;span class="c1"&gt;# Loops until it reaches a leaf node
&lt;/span&gt;        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]):&lt;/span&gt; 
            &lt;span class="c1"&gt;# Swap the elements
&lt;/span&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-implementation-of-insert-function-in-python"&gt;
  &lt;/a&gt;
  the implementation of insert function in python
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# insert the element at the end
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="c1"&gt;# bubble up the new element
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bubbleUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deletion-in-heap"&gt;
  &lt;/a&gt;
  Deletion in Heap
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-approach-of-deletion"&gt;
  &lt;/a&gt;
  1. Approach of Deletion
&lt;/h3&gt;

&lt;p&gt;The standard deletion operation on Heap is deleting the root which is the maximum value of the max-heap, and the minimum value of the in-heap.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decrease the size of the heap to delete the element&lt;/li&gt;
&lt;li&gt;Swap the root  with the last element&lt;/li&gt;
&lt;li&gt;Pop (&lt;em&gt;delete&lt;/em&gt;) last element of the array &lt;/li&gt;
&lt;li&gt;Heap must satisfy the heap-order property, that's why  we should &lt;strong&gt;&lt;em&gt;bubble-down&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;(also known as heapify, percolate-down, sift-down, sink-down, trickle-down, heapify-down, cascade-down, extract-min or extract-max, or  down-heap)&lt;/em&gt; the new element, bubble-down is swapping the new element with one of its children until 

&lt;ul&gt;
&lt;li&gt;the child is smaller than or equal to it in a max-heap.&lt;/li&gt;
&lt;li&gt;the child is greater than or equal to it in a min-heap.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-explanation-of-deletion"&gt;
  &lt;/a&gt;
  1. Explanation of deletion
&lt;/h3&gt;

&lt;p&gt;For better understanding, let's take an example:&lt;br&gt;
¬† we want to delete 3 in this min-heap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        3 (0)
      /   \
 (1) 5     10 (2)
   / 
  9 (3)  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Swap the root with the last element
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         9 (0)
       /   \
 (1)  5     10 (2)
    /  
(3)3 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Delete the last element and decrease the size of the array
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         9 (0)
       /   \
 (1)  5     10 (2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so the array will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Bubble down the root&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Since 9 &amp;gt; 5, swap them, so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         5 (0)
       /   \
 (1)  9     10 (2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-implementation-of-deletion-in-python"&gt;
  &lt;/a&gt;
  3. Implementation of deletion in python
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#bubble-down-implementation-in-python"&gt;
  &lt;/a&gt;
  Bubble down implementation in python
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bubbleDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# the index of the root =&amp;gt; 0
&lt;/span&gt;        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

            &lt;span class="n"&gt;leftChildIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLeftChildNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;rightChildIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getRightChildNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;#  if the node has not any child 
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasLeftChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasRightChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="c1"&gt;# if the node has only a left child
&lt;/span&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasRightChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="c1"&gt;# the smallest variable will be the index of the left child
&lt;/span&gt;                &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;leftChildIndex&lt;/span&gt;
            &lt;span class="c1"&gt;# if the node has only a right child
&lt;/span&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasLeftChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="c1"&gt;# the smallest variable will be the index of the right child
&lt;/span&gt;                &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rightChildIndex&lt;/span&gt;
            &lt;span class="c1"&gt;# if the node has 2 children
&lt;/span&gt;            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# the smallest variable will be the smallest value of the 2 children
&lt;/span&gt;                &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rightChildIndex&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rightChildIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;leftChildIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;leftChildIndex&lt;/span&gt;            
            &lt;span class="c1"&gt;# if the node's value is greater than its one of children
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                &lt;span class="c1"&gt;# swap the node with its child
&lt;/span&gt;                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="c1"&gt;# the i variable will be the index of the smallest value of the two children
&lt;/span&gt;                &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallest&lt;/span&gt;
            &lt;span class="c1"&gt;# if the node's value is smaller than its one of children
&lt;/span&gt;            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#delete-implementation-in-python"&gt;
  &lt;/a&gt;
  delete implementation in python
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# if the size the heap is one or the heap is empty(size = 0)
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="c1"&gt;# replace last element with the root
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;# decrease the size of heap
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# delete last element
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bubbleDown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#heap-implementation-in-python-final-code"&gt;
  &lt;/a&gt;
  Heap implementation in python (Final code)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MinHeap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getLeftChildNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getRightChildNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasParent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# cheking if a node has a parent
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasLeftChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# cheking if a node has a left child
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLeftChildNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasRightChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# cheking if a node has a right child
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getRightChildNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getMinValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""
            time complexity =&amp;gt; O(1)
        """&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# insert the element at the end
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="c1"&gt;# bubble up the new element
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bubbleUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bubbleUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;parentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parentIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;parentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
        &lt;span class="c1"&gt;# Loops until it reaches a leaf node
&lt;/span&gt;        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]):&lt;/span&gt; 
            &lt;span class="c1"&gt;# Swap the elements
&lt;/span&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParentNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# if the size the heap is one or the heap is empty(size = 0)
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="c1"&gt;# replace last element with the root
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;# decrease the size of heap
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# delete last element
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bubbleDown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bubbleDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# the index of the root =&amp;gt; 0
&lt;/span&gt;        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

            &lt;span class="n"&gt;leftChildIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLeftChildNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;rightChildIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getRightChildNodeIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;#  if the node has not any child 
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasLeftChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasRightChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="c1"&gt;# if the node has only a left child
&lt;/span&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasRightChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="c1"&gt;# the smallest variable will be the index of the left child
&lt;/span&gt;                &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;leftChildIndex&lt;/span&gt;
            &lt;span class="c1"&gt;# if the node has only a right child
&lt;/span&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasLeftChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="c1"&gt;# the smallest variable will be the index of the right child
&lt;/span&gt;                &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rightChildIndex&lt;/span&gt;
            &lt;span class="c1"&gt;# if the node has 2 children
&lt;/span&gt;            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# the smallest variable will be the smallest value of the 2 children
&lt;/span&gt;                &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rightChildIndex&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rightChildIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;leftChildIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;leftChildIndex&lt;/span&gt;            
            &lt;span class="c1"&gt;# if the node's value is greater than its one of children
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                &lt;span class="c1"&gt;# swap the node with its child
&lt;/span&gt;                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="c1"&gt;# the i variable will be the index of the smallest value of the two children
&lt;/span&gt;                &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallest&lt;/span&gt;
            &lt;span class="c1"&gt;# if the node's value is smaller than its one of children
&lt;/span&gt;            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;my_heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinHeap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;my_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#      1
#    /  \ 
#   2     4
#  / \   /
# 10  3  5
&lt;/span&gt;&lt;span class="n"&gt;my_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;my_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;my_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#      2
#    /  \ 
#   3     4
#  / \   
# 10  5  
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMinValue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/array-representation-of-binary-heap/"&gt;https://www.geeksforgeeks.org/array-representation-of-binary-heap/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.devgenius.io/how-to-implement-a-binary-heap-javascript-d3a0c54112fa"&gt;https://blog.devgenius.io/how-to-implement-a-binary-heap-javascript-d3a0c54112fa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.section.io/engineering-education/heap-data-structure-python/"&gt;https://www.section.io/engineering-education/heap-data-structure-python/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Heap_(data_structure)#:~:text=In%20computer%20science%2C%20a%20heap,to%20the%20key%20of%20C."&gt;https://en.wikipedia.org/wiki/Heap_(data_structure)#:~:text=In%20computer%20science%2C%20a%20heap,to%20the%20key%20of%20C.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dM_JHpfFITs"&gt;https://www.youtube.com/watch?v=dM_JHpfFITs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NEtwJASLU8Q"&gt;https://www.youtube.com/watch?v=NEtwJASLU8Q&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;if you have any suggestions for the next posts or any questions you can contact me in &lt;a href="https://telegram.me/AyaBouchiha"&gt;telegram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding :)&lt;br&gt;
#day_22&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Making a Mock Service for all the mock data</title>
      <author>Michaela Hoffman</author>
      <pubDate>Sun, 04 Jul 2021 23:40:56 +0000</pubDate>
      <link>https://dev.to/michaelahoffman/making-a-mock-service-for-all-the-mock-data-14dp</link>
      <guid>https://dev.to/michaelahoffman/making-a-mock-service-for-all-the-mock-data-14dp</guid>
      <description>&lt;p&gt;In this part of the tutorial I‚Äôm going to be making a mock service to house all my animal details. In the previous part of the mock data series I made a second set of classes for animals and identified the need to move them out to a single location.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-magic"&gt;
  &lt;/a&gt;
  Making Magic
&lt;/h2&gt;

&lt;p&gt;Here is where the magic happens with this process. When I‚Äôve identified duplicated data and move it to a central location not only does my code become more consistent and simplified but it is also more maintainable.&lt;/p&gt;

&lt;p&gt;It is true that I am often working in prototype code so it really doesn‚Äôt ‚Äúmatter‚Äù that I have some duplication going on. Or even that the code isn‚Äôt maintainable because it‚Äôs all a prototype right now anyway.&lt;/p&gt;

&lt;p&gt;I‚Äôm always pushing to make my code easier to fold into the process. I don‚Äôt want to spend time/effort/energy on writing the code just so someone else has to come back and rewrite it because I‚Äôm leaving it in a weird hard coded prototype state.&lt;/p&gt;

&lt;p&gt;Don‚Äôt get me wrong. I totally started there where everything was hard coded and sometimes at first pass I leave things hard coded until I know what I want to do with the experience. Then I go back through and clean it up so that the interaction design can be tested and fully experienced in the coded prototype.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-my-service"&gt;
  &lt;/a&gt;
  Creating my service
&lt;/h2&gt;

&lt;p&gt;First thing I need to do is get my service created.&lt;/p&gt;
&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng g s animal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now that I have that created I am going to strip out my classes and interfaces from the other components and move them into the service. As I do this I combine them to make a single class eliminating the duplication.&lt;/p&gt;

&lt;p&gt;This is going to make more sense when you look at the full code file on github but now I‚Äôve got one file that combines all the data from both spots. &lt;/p&gt;

&lt;p&gt;Here is a peek below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface IAnimal {
      guid: string;
      name: string;
      type: string;
      description: string;
      numberAtZoo: number;
      photo: string;
      animalInResidence: IAnimalInResidence[];
      food: IFood[];
      habitats: IHabitat[];
}

export interface IAnimalInResidence {
      name: string;
      personality: string;
      age: number;
}

export interface IFood {
      foodName: string;
}

export interface IHabitat {
      habitatName: string;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#newing-up-my-animal-instances"&gt;
  &lt;/a&gt;
  Newing up my animal instances
&lt;/h2&gt;

&lt;p&gt;First, I‚Äôm going to export a new abstract class in my AnimalService file. I want to be able to create this base class that will be extended by the mock service and not be instantiated which is where the abstract class is particularly useful.&lt;/p&gt;

&lt;p&gt;Within this abstract class I call the getAll method to return all my animals from my mock data set. &lt;/p&gt;

&lt;p&gt;I then called the abstract method get which takes an id and then returns an observable of type IAnimal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export abstract class AnimalService {
  abstract getAll(): Observable&amp;amp;lt;IAnimal[]&amp;gt;;

  abstract get(id: string): Observable&amp;amp;lt;IAnimal&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extending-my-abstract-class"&gt;
  &lt;/a&gt;
  Extending my abstract class
&lt;/h3&gt;

&lt;p&gt;Now that I‚Äôve got my abstract class in place I want to extend the service to handle my mock data so I export a second class called the MockAnimalService and extend the Animal Service.¬†&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class MockAnimalService extends AnimalService { ‚Ä¶ }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this class I call the getAll method and return my 3 new animals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class MockAnimalService extends AnimalService {
  getAll(): Observable&amp;amp;lt;IAnimal[]&amp;gt; {
    return of([
      new Animal1(),
      new Animal2(),
      new Animal3()
    ]);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, I call the get method and pass in my guid. When I return the data from the get all method I then use the pipe() function to combine multiple functions. I then call map and get all the animals. I then use find to locate the animal with that guid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;get(guid: string): Observable&amp;amp;lt;IAnimal&amp;gt; {
    return this.getAll()
      .pipe(
        map(x =&amp;gt; x.find(a =&amp;gt; a.guid === guid))
      );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This has now made the guid accessible for me to use in the URL and link to the correct animal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#routing-to-the-animal"&gt;
  &lt;/a&gt;
  Routing to the animal
&lt;/h2&gt;

&lt;p&gt;This part is pretty straight forward but I want to include it anyway just in case it is helpful.&lt;/p&gt;

&lt;p&gt;In my routing.module I add the following to the routes variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{path: 'animals/:guid', component: AnimalComponent}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And within the animal list view I added the [routerLink] to grab that guid and build the route for me.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a [routerLink]="['/animals', animal.guid]"&amp;gt;{{animal.name}} &amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inside-the-animalcomponentts"&gt;
  &lt;/a&gt;
  Inside the animal.component.ts
&lt;/h2&gt;

&lt;p&gt;Now it comes to the fun part. Building out my animal detail view by binding all the animal detail attributes in my mock data to the view.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;main class="animal-wrapper"&amp;gt;
  &amp;amp;lt;h1&amp;gt;{{animal.name}}&amp;amp;lt;/h1&amp;gt;
  &amp;amp;lt;h3&amp;gt;{{animal.type}}&amp;amp;lt;/h3&amp;gt;
  &amp;amp;lt;p&amp;gt;{{animal.description}}&amp;amp;lt;/p&amp;gt;

  &amp;amp;lt;h5 *ngFor="let foodItem of animal.food"&amp;gt;{{foodItem.name}}&amp;amp;lt;/h5&amp;gt;

  &amp;amp;lt;h5 *ngFor="let habitat of animal.habitats"&amp;gt;{{location.name}}&amp;amp;lt;/h5&amp;gt;

    ...

&amp;amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once I've got the attributes and properties from my mock service in place I'm ready to test my prototype. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-wrap-up"&gt;
  &lt;/a&gt;
  To Wrap Up
&lt;/h2&gt;

&lt;p&gt;In this series I walked through how I take my designs from clickable prototypes into full code prototypes. This has helped my clients and projects immerse themselves in the final experience quicker. We are able to get this into someones hands much quicker than full development and test out some of the more difficult to prototype experiences. &lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>design</category>
    </item>
    <item>
      <title>Como melhorar seus testes t√©cnicos</title>
      <author>Fabr√≠cia Diniz</author>
      <pubDate>Sun, 04 Jul 2021 23:06:37 +0000</pubDate>
      <link>https://dev.to/feministech/como-melhorar-seus-testes-tecnicos-5e68</link>
      <guid>https://dev.to/feministech/como-melhorar-seus-testes-tecnicos-5e68</guid>
      <description>&lt;p&gt;Pelo menos 1 vez por m√™s eu corrijo testes t√©cnicos de pessoas que querem entrar na empresa que eu trabalho e com frequ√™ncia analiso os pontos fortes e fracos dos testes de pessoas que eu indico. &lt;strong&gt;Muitas vezes os crit√©rios que desqualificam algu√©m n√£o s√£o necessariamente t√©cnicos&lt;/strong&gt;, e vendo as pessoas cometendo os mesmos erros repetidamente eu gostaria de dar a minha contribui√ß√£o e trazer alguns pontos de aten√ß√£o na hora de fazer um teste t√©cnico para maximizar suas chances de conseguir um emprego. &lt;br&gt;
&lt;em&gt;Lembrando que existem empresas que v√£o sim dar muito mais peso ao aspecto t√©cnico, ent√£o n√£o posso prometer que seguindo esse artigo voc√™ vai conseguir passar com certeza.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#readme"&gt;
  &lt;/a&gt;
  README
&lt;/h2&gt;

&lt;p&gt;A primeira coisa que me faz olhar um projeto com bons olhos √© o README. Ele √© o ponto de acesso das pessoas ao seu projeto e portanto deve ter um bom descritivo das tecnologias usadas e de como rodar o projeto localmente. Na hora de escrever o README voc√™ precisa ter em mente que a pessoa que vai avaliar o seu projeto provavelmente n√£o tem as mesmas configura√ß√µes de ambiente que voc√™ e n√£o vai querer perder tempo descobrindo quais as configura√ß√µes corretas, seu projeto n√£o roda e pronto e voc√™ pode n√£o passar para a pr√≥xima fase por conta disso.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mE0m7a9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8uvl8t9mzcij1y5soaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mE0m7a9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8uvl8t9mzcij1y5soaz.png" alt="Exemplo de README com instru√ß√µes de instala√ß√£o"&gt;&lt;/a&gt;&lt;em&gt;Exemplo de instru√ß√µes de instala√ß√£o&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Uma coisa que me ajudou quando eu submeti o meu √∫ltimo teste t√©cnico foi envi√°-lo antes para um amigo, que tentou rodar tudo seguindo o que estava no README. Ele n√£o conseguiu rodar o projeto por falta de informa√ß√µes a respeito das vers√µes dos frameworks e linguagens utilizados e apontou diversas outras inconsist√™ncias no meu projeto, que eu tive a chance de corrigir antes de submeter para a empresa (e conseguir a vaga).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#itens-que-n%C3%A3o-podem-faltar"&gt;
  &lt;/a&gt;
  Itens que n√£o podem faltar
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Descri√ß√µes das tecnologias utilizadas e suas respectivas vers√µes&lt;/strong&gt;: um c√≥digo que roda em uma vers√£o de um framework pode n√£o rodar em outra por isso √© sempre importante especificar todas as vers√µes utilizadas

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;pontos b√¥nus&lt;/strong&gt;: adicionar um &lt;code&gt;requirements.txt&lt;/code&gt; ou algo do tipo que permita que a pessoa instale todas as depend√™ncias de uma vez s√≥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Link para o reposit√≥rio do teste OU explica√ß√£o b√°sica de como o projeto funciona&lt;/strong&gt;: facilita a vida da pessoa que vai corrigir, bem. Basta a pessoa pegar o seu reposit√≥rio e ela j√° vai ter tudo que precisa para corrigir, aposto que pelo menos um tiquinho de simpatia da pessoa voc√™ j√° ganha.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#reposit%C3%B3rio"&gt;
  &lt;/a&gt;
  Reposit√≥rio
&lt;/h2&gt;

&lt;p&gt;Deixe o reposit√≥rio o mais limpo e organizado poss√≠vel. Exclua arquivos que n√£o est√£o sendo utilizados (tipo alguns arquivos autom√°ticos gerados pelo framework que n√£o sejam √∫teis), &lt;em&gt;pelo amor da deusa&lt;/em&gt; n√£o suba a pasta node_modules pro reposit√≥rio se voc√™ fizer algo em JS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2AERxzwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cpq4dichhopbzjietll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2AERxzwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cpq4dichhopbzjietll.png" alt="Estrutura de pastas de um reposit√≥rio no github, a primeira pasta se chama .idea"&gt;&lt;/a&gt;&lt;em&gt;Nesse repo aqui eu esqueci de adicionar a pasta .idea ao gitignore, acabei subindo o que n√£o devia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Como &lt;em&gt;baby-dev&lt;/em&gt; eu apanhei um bocado para entender qual a forma certa de organizar as pastas em um projeto, quais responsabilidades deveriam ficar isoladas onde, essas coisas. A dica que eu posso dar nesse caso √© o que funciona para mim: &lt;strong&gt;desenhe a sua solu√ß√£o&lt;/strong&gt;, no papel mesmo. Eu normalmente desenho de onde os dados v√™m, qual o caminho que eles percorrem, que modifica√ß√µes s√£o feitas e onde eles ser√£o utilizados, de forma que fique mas f√°cil visualizar que trechos de c√≥digo est√£o fazendo o que e quais crit√©rios eu poderia usar para dividi-los em arquivos diferentes.&lt;/p&gt;

&lt;p&gt;Um ponto dif√≠cil para quem est√° come√ßando a pouco tempo na programa√ß√£o, aprendendo por tutoriais e v√≠deos no youtube, √© que normalmente nesses conte√∫dos mais b√°sicos as responsabilidades ficam todas num arquivo s√≥ ou n√£o s√£o separadas da forma que acontece em projetos maiores, o que pode levar ao seu projeto ficar com alto acoplamento e acabar perdendo pontos. &lt;/p&gt;

&lt;p&gt;O desenho do fluxo dos dados ajuda a agrupar m√©todos do mesmo tipo em pastas descritivas. A l√≥gica que estamos tentando desenvolver √© a seguinte: se algu√©m precisar trabalhar no meu reposit√≥rio e quiser alterar um m√©todo que faz X, a pessoa consegue saber onde fazer isso sem ter que procurar em v√°rias pastas? Se ela precisar alterar algo na visualiza√ß√£o dos dados √© f√°cil de saber onde est√£o os arquivos que cuidam da visualiza√ß√£o? Lembrando que cada linguagem de programa√ß√£o e cada framework tem a sua forma pr√≥pria de organizar os arquivos, ent√£o √© importante se atentar a isso tamb√©m.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#arquivos"&gt;
  &lt;/a&gt;
  Arquivos
&lt;/h2&gt;

&lt;p&gt;Escreva c√≥digos leg√≠veis e concisos. Mas Fabr√≠cia como eu sei que o meu c√≥digo est√° leg√≠vel e conciso? Vamos dar uma entrada no &lt;a href="https://amzn.to/3jIFYuw"&gt;Clean Code&lt;/a&gt; aqui. A resposta √©: &lt;strong&gt;d√™ nomes significativos para as suas vari√°veis&lt;/strong&gt;, se tiver uma vari√°vel &lt;code&gt;x&lt;/code&gt; ou &lt;code&gt;string&lt;/code&gt; em algum lugar voc√™ j√° n√£o tem um c√≥digo t√£o leg√≠vel. Na hora de nomear as vari√°veis procure usar nomes que representem o que elas s√£o, por exemplo &lt;code&gt;taxa&lt;/code&gt; ou &lt;code&gt;inputTelefone&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Falando em &lt;code&gt;inputTelefone&lt;/code&gt;, escolha uma forma de nomear as suas vari√°veis e m√©todos e se atenha a ela por todo o c√≥digo, de prefer√™ncia aquela que for uma boa pr√°tica para a linguagem escolhida. Se for camelCase, mantenha camelCase, se for snake_case, mantenha snake_case, misturar duas ou mais formas diferentes passa a impress√£o de que voc√™ n√£o est√° dando a devida aten√ß√£o ao seu c√≥digo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const student_name = "Olivia";
const findRegisterByName = () =&amp;gt; {...};

# N√£o fa√ßa isso, consist√™ncia √© tudo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mesmo que voc√™ n√£o domine a fundo a tecnologia, existem alguns aspectos de organiza√ß√£o que pessoas de qualquer n√≠vel podem aplicar e passar um ar mais profissional. Nem todas as empresas pensam o processo de contrata√ß√£o da mesma forma, mas existe a linha de pensamento de que √© mais f√°cil ensinar hard skills para uma pessoa rec√©m-contratada do que ensin√°-la certas soft skills, ent√£o se voc√™ se mostra uma pessoa organizada, que escreve c√≥digos leg√≠veis e concisos, voc√™ pode estar √† frente de pessoas que s√£o melhores tecnicamente mas que n√£o t√™m o mesmo cuidado com o material que est√£o apresentando.&lt;br&gt;
&lt;em&gt;Eu inclusive j√° recebi esse feedback, que existiam outras pessoas no processo seletivo que eram melhores do que eu tecnicamente mas o meu c√≥digo era leg√≠vel e muito bem organizado, ent√£o eu acabei sendo contratada.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Usar uma &lt;strong&gt;ferramenta de linter&lt;/strong&gt; tamb√©m pode contar pontos a seu favor, uma vez que muitas empresas as usam e √© outro ponto que mostra o seu cuidado com a padroniza√ß√£o do c√≥digo.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#testes"&gt;
  &lt;/a&gt;
  Testes
&lt;/h2&gt;

&lt;p&gt;Eu sei, nem todo mundo domina testes, especialmente iniciantes na √°rea. Ent√£o eu vou dar uma dica: teste como voc√™ espera que o sistema se comporte frente a um usu√°rio. Pense como algu√©m usando o seu programa, se a pessoa clicar em determinado bot√£o o que ela deve ver? Se alguma informa√ß√£o errada for inserida, como o programa responde a isso? Que informa√ß√µes podem ser checadas na tela para indicar que a p√°gina carregou corretamente? No backend, teste se as informa√ß√µes est√£o sendo retornadas no formato esperado, incluindo mensagens de erro, de acordo com os cen√°rios de sucesso e fracasso na requisi√ß√£o. Dessa forma voc√™ demonstra escrever um c√≥digo de mais f√°cil manuten√ß√£o e tamb√©m mostra que tem conhecimento em algo t√£o importante quanto testes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test("N√£o deve matricular aluno sem CPF v√°lido", () =&amp;gt; {
    const requisicaoMatricula = {
        aluno: {
            nome: "Ana Maria",
            cpf: "213.345.654-10"
        }
    };
    expect(() =&amp;gt; matriculaAluno.execute(requisicaoMatricula)).toThrow(new Error("CPF inv√°lido"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Aqui testamos uma situa√ß√£o de erro, esperando (expect) que seja lan√ßado (toThrow) o erro espec√≠fico (CPF inv√°lido)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Saber o que voc√™ quer testar ajuda na hora de procurar como escrever o c√≥digo que vai fazer tudo isso. Tendo uma ideia do que precisa ser feito, o que resta √© se debru√ßar em documenta√ß√µes e exemplos e tentar traduzir aquilo para a sua situa√ß√£o. Uma coisa que me ajuda muito √© ver projetos reais e analisar como os testes foram implementados, isso facilita e muito o trabalho de escrever testes quando voc√™ n√£o sabe muito bem por onde come√ßar.&lt;/p&gt;

&lt;p&gt;Eu passei em duas entrevistas sem escrever testes, mas eu com certeza perdi v√°rios pontos por n√£o t√™-los feito. Se voc√™ vai optar por n√£o escrever testes, se fa√ßa um grande favor e teste manualmente mesmo todos os casos extremos, com os inputs mais mirabolantes que voc√™ puder pensar. Dessa forma pelo menos voc√™ garante que a coisa est√° funcionando mesmo e evita perder ainda mais pontos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pontos-de-melhoria"&gt;
  &lt;/a&gt;
  Pontos de melhoria
&lt;/h2&gt;

&lt;p&gt;Pessoalmente eu gosto de incluir no README do projeto uma se√ß√£o de pontos de melhoria que eu faria no projeto. Gosto de fazer isso porque normalmente n√≥s n√£o temos tempo suficiente para fazer o teste t√©cnico da melhor forma poss√≠vel, por qualquer motivo que seja, e mostrar que voc√™ tem ci√™ncia dos pontos que podem ser melhorados passa a ideia de que voc√™ est√° ciente de como o seu projeto poderia ficar bem melhor. Eu vejo como uma forma de dizer &lt;em&gt;"esse projeto n√£o representa o meu melhor e eu tenho ci√™ncia desse, desse e desse aspectos que eu poderia melhorar se eu tivesse mais tempo para trabalhar na solu√ß√£o."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Um outro aspecto que pode ser interessante mencionar √© o que foi priorizado em detrimento do qu√™. Recentemente eu entrevistei uma pessoa cujo projeto tinha sido avaliado como sendo de n√≠vel j√∫nior por n√£o ter testes e mais alguns outros detalhes. Na hora da entrevista a pessoa mencionou trabalhar a anos em um determinada empresa e falou sobre diversas experi√™ncias de trabalho. Certamente n√£o era o que eu estava esperando. Perguntei sobre os testes e ela me disse que havia feito a escolha de n√£o fazer testes para priorizar outro aspecto da aplica√ß√£o e em seguida discorreu sobre a import√¢ncia que ela via nos testes e seus estudos sobre Desenvolvimento Orientado a Testes. Ou seja, essa pessoa poderia n√£o ter passado na etapa de avalia√ß√£o por n√£o ter implementado testes, mas ela sabia da import√¢ncia deles e escolheu n√£o implement√°-los porque estava trabalhando em tempo integral na √©poca e preferiu focar em finalizar mais requisitos do teste t√©cnico.&lt;/p&gt;

&lt;p&gt;Mas claro que se voc√™ acha que deu o seu melhor e que n√£o tem nada que voc√™ melhoraria, voc√™ n√£o precisa incluir esse t√≥pico.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#facilite-a-vida-da-pessoa-que-vai-corrigir"&gt;
  &lt;/a&gt;
  Facilite a vida da pessoa que vai corrigir
&lt;/h2&gt;

&lt;p&gt;Essa dica eu aprendi vendo testes t√©cnicos de outras pessoas. Em um teste espec√≠fico a pessoa criou um container docker para que quem fosse corrigir n√£o precisasse instalar as depend√™ncias na pr√≥pria m√°quina. Em outro a pessoa subiu o projeto em um Heroku/Netlify da vida e possibilitou que n√≥s test√°ssemos o projeto sem precisar rodar ele localmente.&lt;/p&gt;

&lt;p&gt;Eu reconhe√ßo que essas atitudes n√£o s√£o muito triviais e podem consumir um tempo que voc√™ n√£o tem. At√© porque n√£o adianta nada subir o projeto no Heroku se vai estar tudo quebrando porque n√£o sobrou tempo para consertar. Ent√£o o que eu recomendo √©: pega um projetinho que voc√™ j√° tenha e tira um fim de semana para tentar fazer esses processos. Se voc√™ precisar, documente o passo a passo. Fazendo isso uma vez e sabendo o "caminho das pedras" na hora do teste t√©cnico voc√™ s√≥ precisa seguir o seu passo a passo e a coisa sai mais r√°pido do que se voc√™ tivesse que aprender na hora.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o
&lt;/h2&gt;

&lt;p&gt;Existem diversos aspectos n√£o diretamente relacionados com linguagens de programa√ß√£o que podem ser observados para te dar alguma vantagem frente a outros concorrentes para uma vaga. Nesse artigo eu quis trazer alguns pontos de aten√ß√£o e algumas dicas para deixar os seus testes t√©cnicos ainda melhores e mais atraentes para as pessoas avaliadoras.&lt;/p&gt;

&lt;p&gt;Espero ter conseguido ajudar e como sempre sinta-se a vontade para deixar mais dicas nos coment√°rios.&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>beginners</category>
      <category>testing</category>
    </item>
    <item>
      <title>Azure AD concepts; Part one - All about entities üîë</title>
      <author>Yaser Adel Mehraban </author>
      <pubDate>Sun, 04 Jul 2021 22:30:46 +0000</pubDate>
      <link>https://dev.to/yashints/part-one-all-about-entities-2b2n</link>
      <guid>https://dev.to/yashints/part-one-all-about-entities-2b2n</guid>
      <description>&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/app-objects-and-service-principals#application-registration"&gt;Application registration, service principal&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview"&gt;system-assigned managed identity, user-assigned managed identity&lt;/a&gt;, Enterprise Application, these are just a few concepts in Microsoft Identity Platform which helps businesses protect their applications and provide authentication and authorization using Azure Active Directory (aka AAD).&lt;/p&gt;

&lt;p&gt;There are many scenarios which can be covered using these concepts and although Microsoft has a ton of documentation around these, people get confused simply because of sheer amount of information to digest. So the point of these series is to get people to understand these concepts and apply them in their products developed on top of Azure AD without having to get information overload. In this post we will cover the basics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;p&gt;Before we start going through these concepts, it's worth mentioning we're assuming our readers already know about a few concepts such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/authentication/overview-authentication"&gt;Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/authentication-vs-authorization"&gt;Authorization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/authentication/concept-mfa-howitworks"&gt;Multi-Factor authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/what-is-single-sign-on"&gt;Single sign-on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we go into Azure AD topics, we need to be on the same page with a few standards which are widely used in our industry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#openid-connect"&gt;
  &lt;/a&gt;
  OpenID Connect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://openid.net/connect/"&gt;OpenID Connect (aka OIDC)&lt;/a&gt; is an authentication protocol which makes things simple when it comes to authenticating a user or device. It leverages a trusted identity provider for authentication, and deals with applications in which users will sign into. For more information please refer to &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/auth-oidc"&gt;our documentation here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oauth-20"&gt;
  &lt;/a&gt;
  OAuth 2.0
&lt;/h2&gt;

&lt;p&gt;While OIDC deals with authentication, it relies on &lt;a href="https://oauth.net/2/"&gt;OAuth 2.0&lt;/a&gt; for authorization which allows a user to grant limited access to an application to its protected resources. This protocol is designed to work with HTTP protocol and separates the role of client from the resource owner. Again for more information please refer to &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/auth-oauth2"&gt;our documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we know enough about these concepts, let's dip our toes into the ocean.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#service-principal"&gt;
  &lt;/a&gt;
  Service Principal
&lt;/h2&gt;

&lt;p&gt;Microsoft identity platform allows accessing resources to entities by a security principal which in case of a user is called &lt;em&gt;User Principal&lt;/em&gt; and in terms of an application is called &lt;em&gt;Security Principal&lt;/em&gt;. This object defines the access policy and permissions for the application in your tenant. This object is responsible for enabling core features such as authentication and authorization. There are different types of service principal, application, managed identity and legacy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-registration"&gt;
  &lt;/a&gt;
  Application Registration
&lt;/h2&gt;

&lt;p&gt;First off, we need to emphasize something, don't get this confused with a web or console application. Since OAuth 2.0 and OpenID Connect work allow your applications to deal with users, Microsoft Identity Platform is restricting the identity and access management only for registered applications. This is where application registration comes into place, think of it as an entity representing your own application. This entity is registered in your tenant (Azure Active Directory instance dedicated to your organization) and you have full control over it.&lt;/p&gt;

&lt;p&gt;Through this app registration you get to specify which type of application will be using this to perform authentication, what type of scenarios are going to be covered (Client Credentials flow, Authorization Code flow, etc), whether it's a single tenant app or a multi tenant one, etc. All of these are called identity configuration.&lt;/p&gt;

&lt;p&gt;Your app registration has two entities associated to it behind the scenes, &lt;em&gt;Application Object&lt;/em&gt; and a &lt;em&gt;Service Principal Object&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-object"&gt;
  &lt;/a&gt;
  Application Object
&lt;/h3&gt;

&lt;p&gt;This object hold all the configuration of your application such as its name, and it's properties such as a callback URL, logout URL, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managed-identity"&gt;
  &lt;/a&gt;
  Managed Identity
&lt;/h2&gt;

&lt;p&gt;Managed identities are created to allow organizations and specifically developers to enable authentication and authorization without the need to have any credentials in place. This will simplify and secure the application implementation and mitigates many security risks which is caused by credentials leaked either by being committed to source code or being shared with many people. Just bare in mind that managed identities are designed to grant access to Azure Resources, meaning you can't use a managed identity to secure an application hosted outside Azure.&lt;/p&gt;

&lt;p&gt;There are two types of managed identities, system assigned and user assigned. System assigned are created and destroyed with the service they belong to, whereas user assigned are independent services which have their own lifecycle and can be assigned to multiple cloud resources. You can see all of these in the below picture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zcq3uTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d728peyhxhyhmntr8ih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zcq3uTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d728peyhxhyhmntr8ih.png" alt="Azure Active Directory Security Principal types"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enterprise-application"&gt;
  &lt;/a&gt;
  Enterprise Application
&lt;/h2&gt;

&lt;p&gt;And at last we have to talk about Enterprise Applications, these applications are generally representing applications that are created by other organizations and are accessible for you to subscribe to or use. Some are free to use whereas some you have to pay for. Something worth mentioning is that you would have an enterprise application even for your own apps. You can view a list of these applications from the &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/saas-apps/"&gt;Azure App Gallery&lt;/a&gt;. Once you have added the application to your tenant it will appear in your enterprise application menu in your Azure AD blade.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--quIoidKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lf6nyr44xhbqt7ykao6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--quIoidKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lf6nyr44xhbqt7ykao6.png" alt="Enterprise Applications in Azure Active Directory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There are multiple different concepts when it comes to Azure Active Directory and using it for authentication and authorization of your applications. In this post we reviewed a few of the terms which are used in many different scenarios and saw what they are and when the come into picture. Hopefully now you have the background to delve into our next series of posts which cover scenarios and how to implement them using these entities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#up-next"&gt;
  &lt;/a&gt;
  Up next
&lt;/h2&gt;

&lt;p&gt;There are many different scenarios which can be addressed using Azure AD. Here are a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A single page application (aka SPA) consuming a REST API both hosted on &lt;a href="https://azure.microsoft.com/en-au/services/app-service/"&gt;Azure App Services&lt;/a&gt; (using two separate app registration)&lt;/li&gt;
&lt;li&gt;A SPA consuming an &lt;a href="https://azure.microsoft.com/en-au/services/functions/"&gt;Azure Function&lt;/a&gt; (using app registration and managed identity)&lt;/li&gt;
&lt;li&gt;A SPA consuming an API hosted on &lt;a href="https://azure.microsoft.com/en-au/services/api-management/"&gt;Azure API Management&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A multi-tenant API with a allowed list of tenants (using app registration and managed identity)&lt;/li&gt;
&lt;li&gt;Device code flow for input constraint devices such as Smart TV&lt;/li&gt;
&lt;li&gt;Using managed identity to access protected resources with EasyAuth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the upcoming series we will tackle each of these in turn, so stay tuned.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>showdev</category>
      <category>aad</category>
      <category>oauth</category>
    </item>
    <item>
      <title>LikedList Questions: Reverse a Linked List - Iterative version</title>
      <author>Kathan Vakharia</author>
      <pubDate>Sun, 04 Jul 2021 22:21:12 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/likedlist-questions-reverse-a-linked-list-iterative-version-5gk9</link>
      <guid>https://dev.to/kathanvakharia/likedlist-questions-reverse-a-linked-list-iterative-version-5gk9</guid>
      <description>&lt;p&gt;In this series of posts, I will discuss coding questions on the &lt;code&gt;LinkedList&lt;/code&gt; Data structure.&lt;br&gt;
The posts in this series will be organized in the following way,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Question Link ‚ùì&lt;/li&gt;
&lt;li&gt;Possible Explanation üìù&lt;/li&gt;
&lt;li&gt;Documented C++ Code üßπ&lt;/li&gt;
&lt;li&gt;Time and Space Complexity Analysis ‚åõüåå&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-question"&gt;
  &lt;/a&gt;
  The Question
&lt;/h2&gt;

&lt;p&gt;Given the &lt;code&gt;head&lt;/code&gt; of a singly linked list, reverse the list, and return the reversed list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/problems/reverse-linked-list/"&gt;https://leetcode.com/problems/reverse-linked-list/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° Give yourself at least 15-20 mins to figure out the solution :)&lt;/p&gt;

&lt;p&gt;üíÅüèª‚Äç‚ôÇÔ∏è Tip: You need to be good at pointer manipulations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;We will go through every node and make it point to its preceding node. The idea is fairly simple, it's all about &lt;strong&gt;pointer manipulations&lt;/strong&gt; and how you will do it. Here's the algorithm,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initialize three pointers, &lt;code&gt;prev = null&lt;/code&gt;,  &lt;code&gt;nex = null&lt;/code&gt;,  &lt;code&gt;cur = head&lt;/code&gt;. At every iteration &lt;code&gt;cur&lt;/code&gt; will point to the &lt;em&gt;current&lt;/em&gt; node, &lt;code&gt;prev&lt;/code&gt; will point to its &lt;em&gt;preceding&lt;/em&gt; node and nex will point to its &lt;em&gt;succeeding&lt;/em&gt; node.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;while cur ‚â† null&lt;/em&gt; i.e until we haven't reversed every node

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;nex = cur&lt;/em&gt; ( Before we change &lt;code&gt;cur's&lt;/code&gt; next, take hold of its succeeding node )&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;cur ‚Üí next = prev&lt;/em&gt; ( Reverse the link )&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;prev = cur&lt;/em&gt; (Update &lt;code&gt;prev&lt;/code&gt; for following iteration )&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;cur = nex&lt;/em&gt;  (Update &lt;code&gt;cur&lt;/code&gt; for following iteration )&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Make &lt;code&gt;head = prev&lt;/code&gt; ( prev points to the first node of reversed linked list )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's a dry run on a list of &lt;strong&gt;5&lt;/strong&gt; elements to make things more clear, &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqdNMVol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0br4kednpluc4g85qlk9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqdNMVol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0br4kednpluc4g85qlk9.jpg" alt="Dry run of algorithm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  C++ Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#definition-of-linkedlist"&gt;
  &lt;/a&gt;
  Definition of LinkedList
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Definition for singly-linked list.&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;reverseList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;//while cur is pointing to a node&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//get access to the node ahead&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;//break the forward link&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;//moving prev ahead&lt;/span&gt;
            &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;//updating current node&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;//After the loop, prev will be pointed to the required node&lt;/span&gt;
        &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complexity-analysis"&gt;
  &lt;/a&gt;
  Complexity Analysis
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#time-complexity-on"&gt;
  &lt;/a&gt;
  Time Complexity: O(n)
&lt;/h3&gt;

&lt;p&gt;We are traveling every node.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-complexity-o1"&gt;
  &lt;/a&gt;
  Space Complexity: O(1)
&lt;/h3&gt;

&lt;p&gt;We didn't use any extra space.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° Can you think of a &lt;em&gt;recursive&lt;/em&gt; solution? I will answer this in the next post.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>algorithms</category>
      <category>cpp</category>
      <category>codenewbie</category>
      <category>linkedlist</category>
    </item>
    <item>
      <title>Drops #04: Desmistificando ponteiros no Golang!</title>
      <author>William Queiroz</author>
      <pubDate>Sun, 04 Jul 2021 21:13:14 +0000</pubDate>
      <link>https://dev.to/wnqueiroz/drops-04-desmistificando-ponteiros-no-golang-3kj9</link>
      <guid>https://dev.to/wnqueiroz/drops-04-desmistificando-ponteiros-no-golang-3kj9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdu√ß√£o
&lt;/h2&gt;

&lt;p&gt;E ae dev, tudo bem com voc√™?&lt;/p&gt;

&lt;p&gt;Agora que FINALMENTE finalizei o MBA, aproveitei o tempo livre para dedic√°-lo aos estudos do &lt;a href="https://golang.org/"&gt;Golang&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Confesso que eu estou apaixonado pela linguagem - ainda dando os primeiros passos claro - mas creio que j√° d√° pra compartilhar uma parada muito massa da linguagem (e como ela implementa) que s√£o os ponteiros!&lt;/p&gt;

&lt;p&gt;Bora pro post?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#afinal-o-que-%C3%A9-um-ponteiro"&gt;
  &lt;/a&gt;
  Afinal, o que √© um ponteiro?
&lt;/h2&gt;

&lt;p&gt;Um ponteiro (ou apontador) nada mais √© do que uma vari√°vel que, ao inv√©s de armazenar um valor (true, "hello world"), ela armazena um endere√ßo que est√° alocado na mem√≥ria.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mem%C3%B3ria"&gt;
  &lt;/a&gt;
  Mem√≥ria
&lt;/h2&gt;

&lt;p&gt;Vamos entender a imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i8PFLJdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lett8q04nv0fmxt2nljq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8PFLJdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lett8q04nv0fmxt2nljq.png" alt="Representa√ß√£o da Mem√≥ria"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basicamente, bem a grosso modo, a mem√≥ria √© constitu√≠da por elementos que armazenam informa√ß√µes.&lt;/p&gt;

&lt;p&gt;O endere√ßo √© uma posi√ß√£o onde os dados ser√£o colocados (geralmente expressos em n√∫meros hexadecimais). Eles podem conter apenas uma √∫nica informa√ß√£o.&lt;/p&gt;

&lt;p&gt;O dado, por sua vez, √© a informa√ß√£o presente em cada posi√ß√£o na mem√≥ria.&lt;/p&gt;

&lt;p&gt;Quando criamos uma vari√°vel, ela recebe um endere√ßamento na mem√≥ria e atrav√©s dessa vari√°vel podemos armazenar valores que ser√£o alocados nesse endere√ßo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MRkE0cif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqmkyw516ell7v88kop3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MRkE0cif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqmkyw516ell7v88kop3.png" alt="Cria√ß√£o de vari√°vel x mem√≥ria"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aqui podemos ler o seguinte: &lt;/p&gt;

&lt;p&gt;A vari√°vel &lt;code&gt;a&lt;/code&gt; que possui o endere√ßo de mem√≥ria &lt;code&gt;0xc000192020&lt;/code&gt; est√° armazenando o dado &lt;code&gt;10&lt;/code&gt; na posi√ß√£o deste endere√ßo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ponteiros-no-go"&gt;
  &lt;/a&gt;
  Ponteiros no Go
&lt;/h2&gt;

&lt;p&gt;√â muito simples definir um ponteiro, basta adicionar o &lt;code&gt;*&lt;/code&gt; junto ao tipo do ponteiro que estamos criando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// output: &amp;lt;nil&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üí° O tipo do ponteiro indica qual √© o tipo de dado que esse ponteiro ir√° manipular. No caso acima, criamos um ponteiro que pode "apontar" para endere√ßos na mem√≥ria de vari√°veis que armazenam dados do tipo inteiro.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No Go temos o conceito de &lt;em&gt;zero value&lt;/em&gt; que, ao definir uma vari√°vel sem atribuir um valor para ela, o Go ir√° atribuir um valor padr√£o para essa vari√°vel. Cada tipo possui o seu valor padr√£o (&lt;code&gt;0&lt;/code&gt; para &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; para &lt;code&gt;bool&lt;/code&gt;...), no caso do nosso ponteiro, o &lt;em&gt;zero value&lt;/em&gt; ser√° &lt;code&gt;nil&lt;/code&gt; dado que n√£o atribu√≠mos nenhum valor para ele. Ou melhor dizendo: nenhum endere√ßo!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;E como podemos definir um endere√ßo para o ponteiro?&lt;/em&gt; ü§î&lt;/p&gt;

&lt;p&gt;Primeiro, criaremos outra vari√°vel no nosso c√≥digo, e ent√£o, vamos atribuir o endere√ßo dela para o ponteiro dessa forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="c"&gt;// atribuindo o endere√ßo de i para o ponteiro&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// output: algo como 0xc000192020&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üí° O &lt;code&gt;&amp;amp;&lt;/code&gt; usado antes da vari√°vel, indica que queremos obter o endere√ßo na mem√≥ria daquela vari√°vel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A representa√ß√£o gr√°fica do que fizemos aqui est√° na imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FaN1mD97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9faqss4csmdj27fl2n0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FaN1mD97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9faqss4csmdj27fl2n0q.png" alt="Atribui√ß√£o de endere√ßo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° Note que o ponteiro que criamos, tamb√©m possui o seu pr√≥prio endere√ßo na mem√≥ria!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Beleza, entendi! At√© aqui o ponteiro j√° t√° "apontando" pra um endere√ßo... mas como eu fa√ßo pra saber o que esse endere√ßo a√≠ t√° armazenando?&lt;/em&gt; ü§î&lt;/p&gt;

&lt;p&gt;Basta utilizar o operador &lt;code&gt;*&lt;/code&gt; junto ao ponteiro (&lt;code&gt;*p&lt;/code&gt;). Esse √© o processo de &lt;a href="https://en.wikipedia.org/wiki/Dereference_operator"&gt;desreferenciar&lt;/a&gt; o ponteiro para que, ao inv√©s dele retornar o endere√ßo armazenado, ele ir l√° naquele endere√ßo e a partir de l√° retornar o valor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;// output: 0xc000192020&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// output: 10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uma vez que desreferenciamos o ponteiro, podemos manipular o dado que est√° armazenado naquele endere√ßo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;// output: 0xc000192020&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// output: 10&lt;/span&gt;

    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;// output: 20&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// output: 20&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A representa√ß√£o gr√°fica do que fizemos aqui est√° na imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--97J63yFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7ndqq0217ebgz0lc5jb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--97J63yFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7ndqq0217ebgz0lc5jb.png" alt="Manipulando dado pelo ponteiro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quando-usar-ponteiros"&gt;
  &lt;/a&gt;
  Quando usar ponteiros?
&lt;/h2&gt;

&lt;p&gt;No Go, por padr√£o, tudo √© &lt;em&gt;Pass By Value&lt;/em&gt;. Isso significa que, quando passamos uma vari√°vel como par√¢metro de uma fun√ß√£o, essa vari√°vel √© "duplicada" na mem√≥ria e o que fazemos dentro do escopo da fun√ß√£o acontece &lt;strong&gt;apenas no escopo da fun√ß√£o&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// output: 11&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

    &lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// output: 10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como √© realizada uma "c√≥pia" da vari√°vel na mem√≥ria, isso tem um custo, que pode se tornar problem√°tico quando lidamos com um grande volume de dados nessa vari√°vel. Para economizarmos essa opera√ß√£o, √© poss√≠vel trabalhar com &lt;em&gt;Pass By Reference&lt;/em&gt; com a ajuda de ponteiros:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// output: 11&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;// output: 0xc0000180b0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

    &lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;// output: 11&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// output: 0xc0000180b0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perceba que a fun√ß√£o &lt;code&gt;increment&lt;/code&gt; n√£o retorna mais o valor manipulado e que al√©m disso, passou a exigir um ponteiro/endere√ßo de mem√≥ria como par√¢metro (&lt;code&gt;a *int&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Dessa maneira, o par√¢metro da fun√ß√£o &lt;code&gt;increment&lt;/code&gt; n√£o foi duplicado na mem√≥ria e passamos a trabalhar com a refer√™ncia da vari√°vel &lt;code&gt;x&lt;/code&gt; (que est√° fora do escopo da fun√ß√£o &lt;code&gt;increment&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;A grosso modo, podemos trabalhar com ponteiros uma vez que lidamos com um volume grande de dados ou simplesmente querer trabalhar com &lt;em&gt;Pass By Reference&lt;/em&gt; ao inv√©s de &lt;em&gt;Pass By Value&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;√â importante entender que existem pontos positivos e negativos ao trabalhar com ponteiros. N√≥s podemos e devemos us√°-los mas precisamos ter certeza do que estamos fazendo.&lt;/p&gt;

&lt;p&gt;Ou seja: depende! HAHA Cabe a voc√™ avaliar os melhores cen√°rios.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finalizando"&gt;
  &lt;/a&gt;
  Finalizando...
&lt;/h2&gt;

&lt;p&gt;Bem, √© isso, por hoje, √© s√≥!&lt;/p&gt;

&lt;p&gt;Quero te agradecer por chegar at√© aqui, e queria lhe pedir tamb√©m para me encaminhar as suas d√∫vidas, coment√°rios, cr√≠ticas, corre√ß√µes ou sugest√µes sobre a publica√ß√£o.&lt;/p&gt;

&lt;p&gt;Deixe seu ‚ù§Ô∏è se gostou ou um ü¶Ñ se esse post te ajudou de alguma maneira! N√£o se esque√ßa de ver os posts anteriores e me siga para maaaais conte√∫dos.&lt;/p&gt;

&lt;p&gt;At√©!&lt;/p&gt;

</description>
      <category>go</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Binary in a nutshell </title>
      <author>Laura Beatris</author>
      <pubDate>Sun, 04 Jul 2021 20:51:42 +0000</pubDate>
      <link>https://dev.to/laurabeatris/binary-in-a-nutshell-21m8</link>
      <guid>https://dev.to/laurabeatris/binary-in-a-nutshell-21m8</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;There are only 10 types of people in the world: Those who understand binary and those who don't&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-sense-of-curiosity"&gt;
  &lt;/a&gt;
  The sense of curiosity
&lt;/h2&gt;

&lt;p&gt;When I got my first computer, I couldn't know at first that the Mario that I was seeing on my screen was actually composed of a bunch of 0s and 1s - How come silly combinations of numbers can handle the magic behind video games and web applications? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6o9IUkK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eigeywx4v3162ni1i2pw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6o9IUkK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eigeywx4v3162ni1i2pw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#systems-of-counting"&gt;
  &lt;/a&gt;
  Systems of counting
&lt;/h2&gt;

&lt;p&gt;Along the years, as civilizations started to grow, many systems of counting (Or numeral systems) were created, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tally marks&lt;/li&gt;
&lt;li&gt;Base ten positional ‚Üí Decimal system&lt;/li&gt;
&lt;li&gt;Base two positional ‚Üí Binary system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dr6ct4v0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibzkogt0ly8pcchqaa3t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dr6ct4v0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibzkogt0ly8pcchqaa3t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-binary"&gt;
  &lt;/a&gt;
  What is binary?
&lt;/h2&gt;

&lt;p&gt;Binary is a numeral system based o two digits (0 and 1), which represents numbers based with a base of 2. It's used to write &lt;strong&gt;binary code&lt;/strong&gt; which is the "language" to communicate instructions to a computer processor.&lt;/p&gt;

&lt;p&gt;In a nutshell:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uses base 2&lt;/li&gt;
&lt;li&gt;Greater than 1 ‚Üí New digit&lt;/li&gt;
&lt;li&gt;Extremely useful for electricity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRgk4cDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhmzz7ngd6teh4xt9l4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRgk4cDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhmzz7ngd6teh4xt9l4h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-to-use-binary-instead-of-decimal"&gt;
  &lt;/a&gt;
  Why to use binary instead of decimal?
&lt;/h2&gt;

&lt;p&gt;Humans decided to use decimal mainly because it's easier to demonstrate multiple combinations of values and it's also more high level in a way that makes it easier to read and exchange information. &lt;br&gt;
Therefore, the decision to use binary for computer hardware is due to reasons related to &lt;strong&gt;physics and data processing&lt;/strong&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Simplicity&lt;/strong&gt;: It's easier and simpler to rely on two states of characters in order to perform processing, than having to deal with a huge amount of combinations.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Electricity integrations&lt;/strong&gt;: As mentioned previously about combinations of numbers, having just 0s and 1s, easily enables to detect of electrical signals such as off (false) and on (true)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Magnetism:&lt;/strong&gt; Binary can be represented via positive and negative poles of magnetic media and in fact, this is how hard disks works in order to store data in a non-volatile way.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Circuits control&lt;/strong&gt;: Circuits contain switches with control logical flows via electrical signals and binary is the most efficient system to accomplish so.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#characters-representations"&gt;
  &lt;/a&gt;
  Characters representations
&lt;/h2&gt;

&lt;p&gt;Now that the definition of binary and its use cases are clarified, you might be wondering how letters and other characters are displayed in software since all data is stored with 0s and 1s on the computer memory.&lt;/p&gt;

&lt;p&gt;There are many things to consider, such as each language has a variety of characters to be supported - and also the first computer creators didn't expect that someday we would use things such as emojis. Consequently, along the years, many encoding systems from decimal numbers to other representations have arisen.&lt;/p&gt;

&lt;p&gt;Examples of encodings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pt.wikipedia.org/wiki/ASCII"&gt;ASCII (American Standard Code for Info Exchange)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--duqO0nqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmsdfi12jhqveuw3jm0k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--duqO0nqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmsdfi12jhqveuw3jm0k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-binary-is-stored-on-memory"&gt;
  &lt;/a&gt;
  How binary is stored on memory?
&lt;/h2&gt;

&lt;p&gt;Consider the following main mechanisms for data storage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RAM (Volatile)&lt;/li&gt;
&lt;li&gt;HDD (Non-volatile)&lt;/li&gt;
&lt;li&gt;SSD (Non-volatile)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of the above handles binary data in a different way. Let's start from RAM:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ram"&gt;
  &lt;/a&gt;
  RAM
&lt;/h3&gt;

&lt;p&gt;Stores binary data through &lt;strong&gt;capacitors&lt;/strong&gt;, which contain two states when interacting with electricity: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Charged: &lt;strong&gt;1&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Un-charged: &lt;strong&gt;0&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each "0" and "1" is considered a &lt;a href="https://en.wikipedia.org/wiki/Bit"&gt;bit&lt;/a&gt; and 8 bits lead to 1 &lt;a href="https://en.wikipedia.org/wiki/Byte"&gt;byte&lt;/a&gt;. Typically, a computer have 8 gigabytes of memory and consensually, 8X8e+9 or (64 billion) RAM memory cells.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_N66Hvdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwycy4fwny69j992en6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_N66Hvdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwycy4fwny69j992en6z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hdd"&gt;
  &lt;/a&gt;
  HDD
&lt;/h3&gt;

&lt;p&gt;Stores binary data through &lt;strong&gt;magnetic lines&lt;/strong&gt; from a spinning metal disk called as "platter" and it's covered by magnetic material. &lt;/p&gt;

&lt;p&gt;A read/write head that contains an electromagnet on its tip, enables to write magnetically charged lines on the surface of the platter. When reading, if a line is magnetically attractive it is considered a "0" and if it's repulsive, then it's considered a "1".  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YuReK-Zm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bc2s3crlc050tlff05h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YuReK-Zm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bc2s3crlc050tlff05h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ssd"&gt;
  &lt;/a&gt;
  SSD
&lt;/h3&gt;

&lt;p&gt;Stores binary data through &lt;strong&gt;transistors&lt;/strong&gt;, which contain two states when interacting with electricity: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Charged: &lt;strong&gt;1&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Un-charged: &lt;strong&gt;0&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unlike RAM capacitors, transistors are able to keep their charge even after powering off a computer, leading to not data-lost. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Binary code allows representing &lt;strong&gt;physical states via abstractions&lt;/strong&gt; with 0's and 1's. Used with the following mechanisms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;RAM&lt;/strong&gt;: Electric charge with capacitors&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HDD&lt;/strong&gt;: Magnetic charge with lines&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SSD:&lt;/strong&gt; Electric change with transistors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.computerhope.com/jargon/m/magnmedi.htm"&gt;Magnetic media with binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/site/syhsguzmancsp/creative-projects/binary-numbers"&gt;Binary numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/url?sa=i&amp;amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FNumeral_system&amp;amp;psig=AOvVaw1_p2c3nzIu5ZkeKjj_aM-H&amp;amp;ust=1625514759675000&amp;amp;source=images&amp;amp;cd=vfe&amp;amp;ved=0CAsQjhxqFwoTCLC6zMeYyvECFQAAAAAdAAAAABAD"&gt;Numeral system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thanks for reading so far. I would like to mention that I'm planning to do a series of blog posts of topics related to CS fundamentals.&lt;/p&gt;

&lt;p&gt;The goal is not to go too deep into these topics but to try to give a quick summary with higher-level concepts (And that's why I named the title of this post with "In a nutshell"). &lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>hardware</category>
      <category>binary</category>
    </item>
  </channel>
</rss>
