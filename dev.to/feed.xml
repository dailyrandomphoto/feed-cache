<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Erlscripten: Transpiling Erlang to Javascript. Yes, you read it right.
</title>
      <author>omar-saadoun</author>
      <pubDate>Wed, 14 Apr 2021 22:20:41 +0000</pubDate>
      <link>https://dev.to/omarsaadoun/erlscripten-49gg</link>
      <guid>https://dev.to/omarsaadoun/erlscripten-49gg</guid>
      <description>&lt;p&gt;It is safe to say that Erlang as a language and framework is the most reliable choice out there to build highly stable applications, running the likes of Whatsapp and Discord. Now, there is a transpiler introducing concepts of Erlang to web technology, which would be near impossible to implement manually using Javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raO1QVh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsu0eumfaucke1ni19q9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raO1QVh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsu0eumfaucke1ni19q9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here at æternity, we’ve envisioned for a long time that running major parts of a blockchain protocol in the context of modern web frameworks would mean a huge leap for the adoption and scalability of distributed ledger technology. What if you could run an ad-hoc blockchain node in your browser, or use state channels to quickly make safe payments using your phone?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a solid foundation had to be laid for a reliable infrastructure first, that was not conceivable as of yet. Until now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#erlscripten-is-here"&gt;
  &lt;/a&gt;
  Erlscripten is here.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXChxkGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqxsabamfrt7qf52x8ub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXChxkGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqxsabamfrt7qf52x8ub.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Erlscripten&lt;/strong&gt; (sic not Emscripten!) is a source-to-source transpiler capable of converting most Erlang codebases into semantically equivalent Purescript projects. Purescript is a strongly typed language heavily inspired by Haskell and which compiles down to Javascript. Taking Purescript as an intermediary step, Erlscripten allows you to take your existing Erlang application and easily ship it out to Javascript users — your Erlang code can now run safely in the browser — enabling code sharing between an Erlang backend and the frontend. It is highly interoperable with Javascript — Javascript can easily call the transpiled code and then make use of the results — you can easily map Erlang constructs and types to readily available JS constructs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s zero hassle&lt;/strong&gt; — you point Erlscripten to an existing Rebar3 Erlang project and in result get a compatible spago project ready to be used in existing Purescript/Javascript projects. &lt;strong&gt;While at it, we transpiled the Erlang runtime (ERTS) that allows you to run arbitrary transpiled Erlang code:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erlscripten/erlps-core"&gt;https://github.com/erlscripten/erlps-core&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#purpose"&gt;
  &lt;/a&gt;
  Purpose
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Besides bringing the components of the æternity blockchain to more platforms and web frameworks, there are two novel use cases for Erlscripten:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#1-code-reuse-between-erlang-backends-and-javascript-frontends"&gt;
  &lt;/a&gt;
  1 — Code reuse between Erlang backends and Javascript frontends;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#2-the-creation-of-a-new-paradigm-for-developing-frontend-applications"&gt;
  &lt;/a&gt;
  2 — The creation of a new paradigm for developing frontend applications.
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;æternity is a blockchain platform primarily written in Erlang. In the upcoming era of Hyperchains the need for code distribution between frontend and backend applications is high. Therefore we need to move some parts of æternity infrastructure to the clients’ side in order to provide a more reliable and decentralized system. It doesn’t make sense to rewrite our code in Javascript/Rust manually as this would require a lengthy rewrite and then the need to maintain and sync 2 codebases. The high need of interoperability between Erlang and Javascript is where Erlscripten was born. We can transpile what we need and distribute it to the browser where it’s needed. &lt;strong&gt;One side effect of Erlscripten is that it will soon be possible to write Frontend applications directly in Erlang&lt;/strong&gt; — Erlang’s actor based programming maps really nicely to existing reactive frameworks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#similar-projects"&gt;
  &lt;/a&gt;
  Similar projects
&lt;/h3&gt;

&lt;p&gt;We’re not the first ones with the need of Erlang/Javascript interoperability &lt;/p&gt;

&lt;p&gt;— &lt;a href="https://github.com/elixirscript/elixirscript"&gt;Elixirscript&lt;/a&gt; is a Elixir to Javascript transpiler with similar goals as our project. The main downside of Elixirscript is the lack of OTP support (Erlang’s main framework for building failsafe applications) — it works on a really small subset of the Elixir language and they need to rewrite the Elixir standard library in Javascript for it to work. In contrast we are OTP compatible — we transpiled the real Erlang standard library from OTP and distributed it open-source: &lt;a href="https://github.com/erlscripten/erlps-stdlib"&gt;https://github.com/erlscripten/erlps-stdlib&lt;/a&gt; (&lt;br&gt;
Erlang Solutions&lt;br&gt;
).&lt;/p&gt;

&lt;p&gt;To demonstrate our point we were capable of taking the compiler of our smart contract language (&lt;a href="https://github.com/aeternity/aesophia"&gt;https://github.com/aeternity/aesophia&lt;/a&gt;) and converting it to be runnable in the browser: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erlscripten/erlps-aesophia"&gt;https://github.com/erlscripten/erlps-aesophia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We tested the transpiled project and it works! &lt;strong&gt;Demonstrating our point that we have support for advanced OTP constructs including ETS, Erlang’s in-memory database.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Notably, &lt;a href="https://github.com/lumen/lumen"&gt;Lumen&lt;/a&gt; has similar goals to our project, after their project is done it will be much faster than Erlscripten and probably more capable — the downside is that Lumen is in WIP phase and it will take a long time for Lumen to be ready whereas Erlscripten is now and here! Ready to be used!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#status-quo"&gt;
  &lt;/a&gt;
  Status quo
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-supported"&gt;
  &lt;/a&gt;
  What is supported
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Majority of Erlang expression&lt;/li&gt;
&lt;li&gt;Arbitrary arity functions&lt;/li&gt;
&lt;li&gt;Pattern matching&lt;/li&gt;
&lt;li&gt;Records (via tuples)&lt;/li&gt;
&lt;li&gt;Binaries&lt;/li&gt;
&lt;li&gt;Lambdas&lt;/li&gt;
&lt;li&gt;Tail recursion&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Process dictionaries&lt;/li&gt;
&lt;li&gt;Code server, module loading&lt;/li&gt;
&lt;li&gt;Imports and exports&lt;/li&gt;
&lt;li&gt;Compatibility utilities&lt;/li&gt;
&lt;li&gt;Common errors (function_clause, case_clause, badarity, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-is-partially-supported"&gt;
  &lt;/a&gt;
  What is partially supported
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/erlscripten/erlps-stdlib/"&gt;Erlang’s standard library&lt;/a&gt; (most essential modules; lists, maps, string, etc.)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/erlscripten/erlps-core"&gt;Erlang builtins&lt;/a&gt; (the list is growing and growing!)&lt;/li&gt;
&lt;li&gt;Rebar project transpilation&lt;/li&gt;
&lt;li&gt;ETS&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-is-under-development"&gt;
  &lt;/a&gt;
  What is under development
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Bitstrings&lt;/li&gt;
&lt;li&gt;Leaking variable scopes&lt;/li&gt;
&lt;li&gt;Basic erlang process emulation&lt;/li&gt;
&lt;li&gt;NIFs (will be done through C to WASM compilation)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#works-on-the-purescript-compiler"&gt;
  &lt;/a&gt;
  Works on the PureScript compiler
&lt;/h3&gt;

&lt;p&gt;The original PureScript turned out not to suffice our use case perfectly. For instance, we had some issues regarding handling &lt;a href="https://en.wikipedia.org/wiki/Tail_call"&gt;tail call optimization&lt;/a&gt; which started several discussions and contributions on their GitHub:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/purescript/purescript/pull/3968"&gt;Pull Request: Trigger TCO even when there are some self references in non-tail positions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/purescript/purescript/pull/3958"&gt;Pull Request: Support TCO for functions with tail-recursive inner functions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/purescript/purescript/issues/3957"&gt;Issue: TCO does not trigger in &lt;code&gt;case&lt;/code&gt; expressions with assign guards&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/purescript/purescript/issues/3967"&gt;Proposal: Take more opportunities to trigger TCO&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the problems have been already fixed due to our reports, but some of them haven’t been accepted as they involved some overhead on the performance in the general case. Because of this &lt;a href="https://github.com/erlscripten/purescript"&gt;we have forked the compiler&lt;/a&gt; and started adjusting it for our needs ourselves. Our works mainly involve the optimization tweaks and updating the backend to EcmaScript6 (instead of 5). For instance, we have implemented a much more aggressive tail call optimizer, increased strictness of AST traversals and completely rewritten the code generation for pattern match alternatives.&lt;/p&gt;

&lt;p&gt;During this work we have spotted some performance bugs and started working on fixing them on our own. One of our patches has already been approved and awaits merging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/purescript/purescript/pull/4006"&gt;Fix exponential collapsing of BindingGroups&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples:
&lt;/h3&gt;

&lt;p&gt;While we are perfectly aware that neither Erlang nor PureScript are the most common sight to see, we invite you to take a look: Here are some examples of how Erlscripten transforms existing Erlang code into PureScript. The generated code is obviously larger as we need to take care of the type system (PureScript is typed while Erlang is not) and tackle some syntactic sugars. Furthermore, we need to emulate the default error handling and exceptions that are being solved much differently in Erlang in order to preserve compatibility.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#factorial"&gt;
  &lt;/a&gt;
  Factorial:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hetWk4S9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z15rglu3qfopre2khxyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hetWk4S9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z15rglu3qfopre2khxyh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the code example here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erlscripten/erlscripten/blob/main/examples/factorial.erl"&gt;https://github.com/erlscripten/erlscripten/blob/main/examples/factorial.erl&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#continuation-based-list-reversal-via-catamorphic-transformation"&gt;
  &lt;/a&gt;
  Continuation based list reversal via catamorphic transformation:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXKCdULN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuj7nh1q8qypdhy6j818.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXKCdULN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuj7nh1q8qypdhy6j818.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the code example here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erlscripten/erlscripten/blob/main/examples/list_reverse.erl"&gt;https://github.com/erlscripten/erlscripten/blob/main/examples/list_reverse.erl&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-erlang-in-the-browser"&gt;
  &lt;/a&gt;
  Run Erlang in the browser!
&lt;/h2&gt;

&lt;p&gt;Erlang to PureScript transpiler &amp;gt; &lt;a href="https://github.com/erlscripten/erlscripten"&gt;https://github.com/erlscripten/erlscripten&lt;/a&gt;&lt;/p&gt;

</description>
      <category>erlang</category>
      <category>blockchain</category>
      <category>aeternityblockchain</category>
      <category>elixir</category>
    </item>
    <item>
      <title>Talk Notes: "Secrets of Successful Mentors" (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Wed, 14 Apr 2021 21:58:31 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-secrets-of-successful-mentors-railsconf-2021-25h8</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-secrets-of-successful-mentors-railsconf-2021-25h8</guid>
      <description>&lt;p&gt;✨ &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Talk&lt;/strong&gt;: 'The Secrets of Successful Mentors' by &lt;a href="https://twitter.com/dougbradbury"&gt;Doug Bradbury&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Prep materials&lt;/strong&gt;: &lt;a href="https://github.com/dougbradbury/secrets-of-successful-mentors"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: How do the best mentors operate? What makes them so effective? In this workshop, we will explore some counter-intuitive techniques that great mentors use in helping their apprentices learn fast and achieve extraordinary results. Learn how to give just the right learning challenge and just the right time and how to give feedback in a way that will actually be heard!&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Impression&lt;/strong&gt;: I have participated in a number of workshops and talks on mentorship and this was the best by far. I am really impressed by Doug's experience and empathy 💕&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#notes"&gt;Notes&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#successful-mentors-mentor-because-they-want-to"&gt;Successful mentors mentor because they want to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-don-t-teach-they-mentor"&gt;Successful mentors don't teach, they mentor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-ask-more-qs-than-they-answer"&gt;Successful mentors ask more qs than they answer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-colearn"&gt;Successful mentors co-learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-follow-the-learner"&gt;Successful mentors follow the learner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-replay-their-reactions"&gt;Successful mentors replay their reactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-look-for-outcomes"&gt;Successful mentors look for outcomes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-individualize-the-pluralize-concepts"&gt;Successful mentors individualize, the pluralize concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-define-clear-learning-outcomes"&gt;Successful mentors define clear learning outcomes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-protect-separate-and-leave"&gt;Successful mentors protect, separate, and leave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors mentor because they want to&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;It's important for you to know why you're doing this&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors don't teach, they mentor&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;you're working with their character, not behavior; with their skills, not their knowledge (it's their responsibility to learn);&lt;/li&gt;
&lt;li&gt;deep-level learning: we are looking for synthesizing what they've learned;&lt;/li&gt;
&lt;li&gt;the person should be transformed through the time they've spent with you;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Teaching&lt;/th&gt;
&lt;th&gt;Mentoring&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Behavior&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Knowledge&lt;/td&gt;
&lt;td&gt;Skills&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Regurgitate&lt;/td&gt;
&lt;td&gt;Synthesize&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Certify&lt;/td&gt;
&lt;td&gt;Transform&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Group&lt;/td&gt;
&lt;td&gt;1-1 Relationship&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors ask more qs than they answer&lt;/strong&gt; 

&lt;ul&gt;
&lt;li&gt;This is meant to encourage deeper learning&lt;/li&gt;
&lt;li&gt;Following &lt;a href="https://en.wikipedia.org/wiki/Socratic_method"&gt;the Socratic method&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors co-learn&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Experts can actually make poor mentors because they don't remember what it is like to learn&lt;/li&gt;
&lt;li&gt;Learning happens in relation to what you already know by building a "scaffolding" to what you already know -- experts usually don't have these scaffoldings because they already have a whole structure&lt;/li&gt;
&lt;li&gt;the best mentor is someone near you, just ahead of you (&lt;a href="https://www.simplypsychology.org/Zone-of-Proximal-Development.html"&gt;zone of proximal development&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;expert-mentors can be a bit intimidating&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors follow the learner&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;the Montessori method of "follow the learner": watch them, present them with the next step, next challenge&lt;/li&gt;
&lt;li&gt;what is &lt;strong&gt;F L O W&lt;/strong&gt;? It is a perfect balance between relaxation and arousal; if there's too much relaxation, you'll be bored; if there's too much arousal, you'll be anxious; both inhibit learning; ideally, you will be bouncing between a little bit of relaxation and arousal; &lt;/li&gt;
&lt;li&gt;as a mentor, it's important to find the right challenge, just a little bit more than what the person already knows;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Successful mentors replay their reactions&lt;/strong&gt; (I think that was the phrasing)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when we receive critical feedback, our brain may just "shut down" because of the &lt;em&gt;fight-flight-freeze&lt;/em&gt; response&lt;/li&gt;
&lt;li&gt;fight, flight, freeze response narrows your focus and just emphasizes survival &lt;/li&gt;
&lt;li&gt;how we present what we have to say triggers the defensive reactions - and we usually present feedback as a judgment&lt;/li&gt;
&lt;li&gt;we want to give people the feedback but the best way to deliver it is to make it not about them but about us&lt;/li&gt;
&lt;li&gt;use phrases like: "this is how it came across to me", "this is how I saw it"&lt;/li&gt;
&lt;li&gt;if you replay your reactions, feedback becomes the start of the conversations, not their end&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;"Most feedback is much more about the person giving the feedback than the person receiving it" &lt;br&gt;
"If you don't have anything nice, say something about yourself"&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Instead of ...&lt;/th&gt;
&lt;th&gt;Try ...&lt;/th&gt;
&lt;th&gt;Because ...&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Can I give you some feedback?&lt;/td&gt;
&lt;td&gt;Here's my reaction. / Tell me about your thought process here.&lt;/td&gt;
&lt;td&gt;It causes fear, you can't say no, it may sound patronizing (are you implying I can't take feedback?)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Good job!&lt;/td&gt;
&lt;td&gt;That works for me! I liked what you did there. Tell me how you've arrived at this solution.&lt;/td&gt;
&lt;td&gt;It's not specific, not helpful. It's rooted in approval and power dynamic (who am I to tell you what is "good"?!)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Here’s what you should do.&lt;/td&gt;
&lt;td&gt;Have you considered X? / Here's what I'd do (...) - let's talk about it.&lt;/td&gt;
&lt;td&gt;It's a judgment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;That won’t really work.&lt;/td&gt;
&lt;td&gt;-,-&lt;/td&gt;
&lt;td&gt;-,-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You need to improve your communication skills.&lt;/td&gt;
&lt;td&gt;When you did X, I felt Y. / I'm having a hard time understanding what you're trying to say / Here's where you've lost me&lt;/td&gt;
&lt;td&gt;Not specific, it's a judgment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You are slow to complete your work.&lt;/td&gt;
&lt;td&gt;I feel that you... / I'm concerned that we...&lt;/td&gt;
&lt;td&gt;Feels too personal. Activates fear and worry. Closes the conversation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You spin your wheels for too long before asking for help.&lt;/td&gt;
&lt;td&gt;Here's what works for me.&lt;/td&gt;
&lt;td&gt;If someone is not asking for help, probably it's more about the env, than the individual.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors look for outcomes&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;what does "success" mean for this person, and in this scenario? &lt;/li&gt;
&lt;li&gt;the mentee is not a great "vessel" to fill up with our great knowledge&lt;/li&gt;
&lt;li&gt;we usually a picture of how things should be done and what excellence looks like for us but in this way, the best we can achieve is to build some poor imitation of ourselves but we want to go beyond them&lt;/li&gt;
&lt;li&gt;instead, look for "excellence outcomes", point them out to the learner, and let them figure out how they got there&lt;/li&gt;
&lt;li&gt;ask them how they achieved stuff (this feel acknowledging + helps them reflect and recreate what they did)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors individualize, the pluralize concepts&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;there's nothing like one learning style!!!!&lt;/li&gt;
&lt;li&gt;it's a mechanism of bias and of putting folks in boxes&lt;/li&gt;
&lt;li&gt;there are multiple kinds of intelligence, for instance: verbal-linguistic, logical-mathematical, intrapersonal (self), interpersonal (others), musical, visual-spatial, bodily-kinesthetic, naturalist (taxonomy, organization), existential (why?), emotional&lt;/li&gt;
&lt;li&gt;interconnect different kinds of intelligence! &lt;/li&gt;
&lt;li&gt;help the learner develop these kinds!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors define clear learning outcomes&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;THIS IS SO IMPORTANT -- I've seen it first-hand when I was teaching Ruby at a bootcamp&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use specific verbs, such as&lt;/strong&gt;: Name, Memorize, Identify, Do a simple procedure, Recognize, count, define, draw, fund, label, match, quote, recall, recite, order, tell, write, imitate, List, Describe, Classify, Combine, Do algorithms, Report, discuss, illustrate, select, narrate, compute, sequence, outline, separate Analyze, Explain, Integrate, Sequence, Relate, Apply, Compare, Contrast, Argue, Criticize, Relate, Predict, conclude, summarize, review, argue, transfer, make a plan, characterize, differentiate, organize, debate, make a case, construct, review and rewrite, examine, translate, paraphrase, solve a problem Reflect, Theorize, Hypothesize, Create, Imagine, Formulate, Generate Generalize, generate, compose, invent, originate, prove from first principles, make an original case, solve from first principles&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build the outcomes with this structure&lt;/strong&gt;: &lt;code&gt;verb + subject + context&lt;/code&gt;, for instance: "List (verb) the three rules of TDD (subject) to a group of apprentices seeing TDD for the first time. (context)", "Contrast (verb) Outside in vs Inside Out TDD (subject) in a blog post targeted at Senior Developers (context)", itd.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors protect, separate, and leave&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;this is a reference to a Japanese concept of &lt;a href="https://en.wikipedia.org/wiki/Shuhari"&gt;Shu Ha Ri&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;shu&lt;/em&gt; (守) "protect": you create a safe env for a person to learn where they can fail (safely) without becoming a failure&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;ha&lt;/em&gt; (破) "detach": this is where a person pushes back on the ideas and established ways&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;ri&lt;/em&gt; (離) "leave": our hope is that the learner will become able to do more than what we can do, that they grow beyond us; there comes a point in the relationship where they leave this mentorship relationship&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Socratic_method"&gt;the Socratic method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.simplypsychology.org/Zone-of-Proximal-Development.html"&gt;zone of proximal development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ted.com/talks/mihaly_csikszentmihalyi_flow_the_secret_to_happiness"&gt;recommended TedTalk: Flow, the secret to happiness&lt;/a&gt; by Mihaly Csikszentmihalyi&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hbr.org/2019/03/the-feedback-fallacy"&gt;recommended reading: feedback fallacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.washingtonpost.com/news/answer-sheet/wp/2013/10/16/howard-gardner-multiple-intelligences-are-not-learning-styles"&gt;Learning Styles vs Multiple Intelligences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>techtalks</category>
      <category>career</category>
    </item>
    <item>
      <title>How do you build your static site?</title>
      <author>Glenn Tippett</author>
      <pubDate>Wed, 14 Apr 2021 20:54:51 +0000</pubDate>
      <link>https://dev.to/glenntippett/how-do-you-build-your-static-site-58lc</link>
      <guid>https://dev.to/glenntippett/how-do-you-build-your-static-site-58lc</guid>
      <description>&lt;p&gt;Hey all, &lt;/p&gt;

&lt;p&gt;I am curious to hear how other people build their static sites. &lt;/p&gt;

&lt;p&gt;What I mean is, say you need to build a basic landing page - with maybe only 3 pages max. &lt;br&gt;
The site has the usual markup, styling maybe some JS for effects. &lt;/p&gt;

&lt;p&gt;Are you always reaching for a framework or library such as React or Angular? &lt;br&gt;
Or are you just creating some .html, .css and .js files and deploying that folder to a host? &lt;/p&gt;

&lt;p&gt;Curious to hear how others approach this.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Documentando minha API #1 — API Blueprint + Aglio</title>
      <author>Allan Ramos</author>
      <pubDate>Wed, 14 Apr 2021 20:46:13 +0000</pubDate>
      <link>https://dev.to/allangrds/documentando-minha-api-1-api-blueprint-aglio-48h2</link>
      <guid>https://dev.to/allangrds/documentando-minha-api-1-api-blueprint-aglio-48h2</guid>
      <description>&lt;p&gt;Mexer num projeto cuja API não tem documentação é um sofrimento… ter que vasculhar no código do projetos os endpoints e entender o que é possível fazer com cada um deles é um trabalho desnecessário, e seria resolvido de forma simples com uma bendita documentação :(.&lt;/p&gt;

&lt;p&gt;Já diz a frase:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Uma API documentada é uma API feliz&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eis que chega a minha hora de fazer um projeto novo, e não posso cair na mesma mancada de deixar o código ser a fonte de entendimento da API.&lt;/p&gt;

&lt;p&gt;Como especificação para a construção dessa documentação, optei pela &lt;strong&gt;&lt;a href="https://apiblueprint.org/"&gt;API Blueprint&lt;/a&gt;.&lt;/strong&gt; Criada pela &lt;a href="https://apiary.io/"&gt;Apiary&lt;/a&gt;(Oracle), tem a vantagem de ser escrita utilizando Markdown, facilitando a leitura.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#come%C3%A7ando"&gt;
  &lt;/a&gt;
  Começando
&lt;/h2&gt;

&lt;p&gt;Seguindo o padrão da API Blueprint, podemos escrever nossa documentação em &lt;strong&gt;Markdown&lt;/strong&gt; ou com a extensão &lt;strong&gt;.apib&lt;/strong&gt;. Optei pela segunda, já que é possível encontrar extensões para meu editor de texto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;FORMAT: 1A
HOST: http://api.meninogaimeiro.com.br

&lt;span class="gh"&gt;# API do Menino Gaimeiro&lt;/span&gt;

Uma API pra você gerenciar a sua carteirinha xD.

&lt;span class="gh"&gt;# Group Games&lt;/span&gt;

&lt;span class="gu"&gt;## Games [/games]&lt;/span&gt;

&lt;span class="gu"&gt;### Criar games [POST]&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Request Criar um game
&lt;span class="p"&gt;    +&lt;/span&gt; Headers&lt;span class="sb"&gt;

            Accept: application/json
            Content-Type: application/json

    + Attributes

        + name (required)

&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt; Response 201 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes&lt;span class="sb"&gt;

        + id: 1 (number) - ID do game
        + name: Desperados 3 (string) - Nome do game

&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt; Response 400 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes&lt;span class="sb"&gt;

        + status_code: 400 (number) - Status code da Request
        + errors (array) - Objeto de erros
            + (object)
                + parameter_name: name (string) - Nome do parâmetro
                + message: field is required (string) - Tipo do erro
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O exemplo acima faz o seguinte:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Seta a url da api para&lt;a href="http://api.meninogaimeiro.com.br%3B/"&gt;http://api.meninogaimeiro.com.br;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Cria um grupo de rotas chamada*games*;&lt;/li&gt;
&lt;li&gt;Cria um grupo de rotas*Games /games.&lt;em&gt;Nesse meu exemplo ficou repetido, mas poderia existir junto com essa rota o*Platforms /games/platforms&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Crio uma request informando seus headers e seus atributos;&lt;/li&gt;
&lt;li&gt;Crio uma response informando seus status codes e seus payloads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para ver como essa documentação é renderizada usando o Apiary,&lt;a href="https://gamer1.docs.apiary.io/"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gerando-a-documenta%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Gerando a documentação
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;API Blueprint&lt;/strong&gt; é apenas uma especificação, não uma tecnologia. Para gerar uma documentação em meu projeto Node, acabei por utilizar a engine &lt;a href="https://github.com/danielgtaylor/aglio"&gt;Aglio&lt;/a&gt;, que será responsável por interpretar os arquivos nesse formato e renderizar a documentação formatada.&lt;/p&gt;

&lt;p&gt;Para isso, faça:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;npm install -g aglio&lt;/li&gt;
&lt;li&gt;aglio -i api.apib — theme-template triple -s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esse último comando lerá o arquivo*&lt;em&gt;api.apib&lt;/em&gt;*, gerando um template de 3 colunas em um servidor.&lt;/p&gt;

&lt;p&gt;Eis que o resultado será algo como mostrado na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cDUYjGYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9pgybf83klc0lvppnyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cDUYjGYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9pgybf83klc0lvppnyr.png" alt="alt text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Pronto! Com isso já posso dar continuidade na documentação da API :).&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Writing blogs on DEV - A complete guide! 🚀</title>
      <author>Fahad Imran</author>
      <pubDate>Wed, 14 Apr 2021 20:40:23 +0000</pubDate>
      <link>https://dev.to/fahadimran28/writing-blogs-on-dev-a-complete-guide-3hk</link>
      <guid>https://dev.to/fahadimran28/writing-blogs-on-dev-a-complete-guide-3hk</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@anhdung?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Dung Anh&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/writing?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;New to DEV? Not sure where to get started? &lt;strong&gt;No worries!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this blog, I will share &lt;strong&gt;tips&lt;/strong&gt;, &lt;strong&gt;tricks&lt;/strong&gt;, and &lt;strong&gt;resources&lt;/strong&gt; that you can use to write amazing articles in no time. This will apply whether you have never written a blog on DEV or you're just looking to improve your workflow.&lt;/p&gt;

&lt;p&gt;I will cover quite a lot of information in this post so it might be a bit lengthy, but I'll try my best to not bore you.&lt;/p&gt;

&lt;p&gt;So, take a deep breath, grab some coffee and let's get started! ☕&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5zf2M4HgjjWszLd4a5/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5zf2M4HgjjWszLd4a5/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choosing-a-title-for-your-blog"&gt;
  &lt;/a&gt;
  Choosing a title for your blog 💡
&lt;/h3&gt;

&lt;p&gt;The first thing you have to choose is the &lt;strong&gt;blog title&lt;/strong&gt;. It is important to have a title that describes what your blog is about. A good title can be the difference between people viewing your blog or skipping over it. Think of your blog title as a one-line summary of your blog.&lt;/p&gt;

&lt;p&gt;What I try to do is find &lt;strong&gt;keywords&lt;/strong&gt; that describe my blog content and include them in the blog title. This ensures that the title is relevant and to the point.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tags-tags-tags"&gt;
  &lt;/a&gt;
  Tags, Tags, Tags... 🔖
&lt;/h3&gt;

&lt;p&gt;On DEV, you can add up to &lt;strong&gt;4&lt;/strong&gt; tags on your blogs to help people find them. It is better to use existing tags whenever possible instead of making your own. You can view the existing tags on DEV &lt;a href="https://dev.to/tags"&gt;here&lt;/a&gt;. It must be noted that some tags have special guidelines that your blog must fulfill before you can include them in your blogs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cover-images-are-important"&gt;
  &lt;/a&gt;
  Cover images are important! 🎨
&lt;/h3&gt;

&lt;p&gt;Cover images make your blog &lt;strong&gt;standout&lt;/strong&gt;. Blogs with cover images are more likely to be featured in the home feed of the website. Therefore, you must include one in your articles. For finding cover images you can use sites like &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;, and &lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt; or if you want to design one from scratch, you can try &lt;a href="https://www.canva.com/"&gt;Canva&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All these sources have worked great for me so far. Just try to keep your cover image relevant and fun and you'll be fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; If you want to add a GIF as a cover image (like in this blog), just copy the GIF link and add it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
cover_image: your_gif_link
---
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#you-have-to-learn-markdown"&gt;
  &lt;/a&gt;
  You HAVE to learn markdown! ⚡
&lt;/h3&gt;

&lt;p&gt;Before writing your blog you must be familiar with the &lt;strong&gt;basics of markdown&lt;/strong&gt; as you'll be using it to write your blogs on DEV. Markdown allows you to format your text, images, lists, etc. very easily. It is super easy to learn too. You can find dozens of cheat sheets floating around the web. I would recommend you give &lt;a href="https://www.markdownguide.org/cheat-sheet/"&gt;this one&lt;/a&gt; a look to get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choose-where-to-write-drafts-for-your-blogs"&gt;
  &lt;/a&gt;
  Choose where to write drafts for your blogs 📜
&lt;/h3&gt;

&lt;p&gt;Once you've got the hang of markdown, the next thing is to write the draft for your blog. Although you can use the built-in editor that DEV provides, most people prefer to write their blogs on &lt;a href="https://docs.google.com/"&gt;Google Docs&lt;/a&gt; or &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;. You can also use dedicated note-taking apps like &lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; which supports markdown as well.&lt;/p&gt;

&lt;p&gt;Whatever medium you use, I would highly recommend that you install a browser extension called &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt;. It is super helpful and will correct most of your grammatical and punctuation errors if not all of them. If you prefer VS Code, use an extension called &lt;a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one"&gt;Markdown All in One&lt;/a&gt; as it allows you to preview markdown files and provides various editing options as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-add-youtube-videos"&gt;
  &lt;/a&gt;
  Let's add YouTube videos! 🎥
&lt;/h3&gt;

&lt;p&gt;If you want to embed &lt;strong&gt;YouTube videos&lt;/strong&gt; in your blogs, you can easily do so using Liquid tags that DEV provides. To embed videos, copy the video id from the URL and add it to the blog as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% youtube your_video_id %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to learn more about Liquid tags check out the &lt;a href="https://dev.to/p/editor_guide"&gt;editor guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-series"&gt;
  &lt;/a&gt;
  Making a series! 📌
&lt;/h3&gt;

&lt;p&gt;For topics that require more explaining, you can also &lt;strong&gt;make a series&lt;/strong&gt; on DEV. Series are great for topics that have different parts. Instead of cramming all the information in a single article, you can split it up into multiple smaller posts.&lt;/p&gt;

&lt;p&gt;In order to make a series, just give it a name and your blog will automatically be added to that series. Dev will also show a series list at the top of the blogs in that series for navigation (excellent 🙌).&lt;/p&gt;

&lt;p&gt;It must be noted that the series will only appear if it has at least &lt;strong&gt;2&lt;/strong&gt; blog posts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dos-and-donts-of-writing"&gt;
  &lt;/a&gt;
  Dos and Dont's of writing! 🚨
&lt;/h3&gt;

&lt;p&gt;While writing your blogs on DEV, here are some general writing tips to improve the flow of your blog:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Use short and simple sentences&lt;/strong&gt; as to not overwhelm the reader.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Break up your content&lt;/strong&gt; into smaller paragraphs and add sub-headings to them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use relevant images&lt;/strong&gt; in your blogs to explain a topic and make the blog more engaging (And Yes, memes count too! 😅).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Add code snippets&lt;/strong&gt; to your blogs to explain programming concepts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Include useful links and references&lt;/strong&gt; to provide additional information in your articles.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't spam your social media&lt;/strong&gt; links in your blog. No one wants to follow such a person. Try to provide value to others. If you want, just plug one or two social links at the end of the blog post.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#simple-gtgt-complex"&gt;
  &lt;/a&gt;
  Simple &amp;gt;&amp;gt; Complex 😵
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"Genius is making complex ideas simple, not making simple ideas complex" &lt;strong&gt;~ Albert Einstein&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;KISS&lt;/strong&gt; (Keep It Simple Stupid) principle applies here as well. Keep your blog posts short and simple. No one has the time to read blogs that look like research papers. I am guilty of this habit as well. But you should keep your blogs concise and limited to &lt;strong&gt;5-7 min max&lt;/strong&gt; in most cases (although there can be some exceptions).&lt;/p&gt;

&lt;p&gt;Additionally, try to explain the concept in the easiest way possible so people with little to no background knowledge can also understand the concept without pulling their hair out. 😫&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonical-urls-are-no-joke"&gt;
  &lt;/a&gt;
  Canonical URLs are no joke! 🔗
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you're just writing blogs on DEV and not republishing from elsewhere, feel free to skip this section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, if you're republishing your blogs from elsewhere whether it be Medium, Hashnode, or your personal website, &lt;strong&gt;read carefully&lt;/strong&gt;. It is important that you add a &lt;strong&gt;Canonical URL&lt;/strong&gt; to your articles published elsewhere on the web.&lt;/p&gt;

&lt;p&gt;A Canonical URL tells the search engines like &lt;strong&gt;Google&lt;/strong&gt;, where the original source of the content/article is. If you don't add a canonical article to your blog, the search engine will consider it as duplicate content. And there is a high chance that the republished version on DEV will &lt;strong&gt;rank higher&lt;/strong&gt; on search results as compared to the one originally published on your personal blog. Consequently, you'll get less traffic on your website which is no fun. 😥&lt;/p&gt;

&lt;p&gt;Thankfully, DEV allows you to easily add a Canonical URL to your blog posts and also displays an &lt;strong&gt;" Originally published on XYZ.com "&lt;/strong&gt; message at the top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lq2fzyd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mbrf0cudl0tppkiesb2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lq2fzyd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mbrf0cudl0tppkiesb2.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about republishing and Canonical URLs check out this &lt;a href="https://medium.com/@edithyeghiazaryan/republish-your-content-using-a-canonical-tag-3eb47b68ee2f"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finallypublishing-your-amazing-work"&gt;
  &lt;/a&gt;
  Finally...Publishing your amazing work! 🚀
&lt;/h3&gt;

&lt;p&gt;After you've finished writing the blog post, you can &lt;strong&gt;save the draft&lt;/strong&gt; of the post. This will allow you to share the URL of the article with your friends, family, editor, etc. for proofreading.&lt;/p&gt;

&lt;p&gt;Once you're satisfied with the final result, you can then &lt;strong&gt;publish&lt;/strong&gt; it for everyone to see. The stats on your blog (view, likes, and comments) can be viewed in the &lt;strong&gt;Profile Dashboard&lt;/strong&gt;. You can edit the blog anytime after publishing it, so don't worry if you find any mistake in your blog. Just edit it out! 😉&lt;/p&gt;

&lt;p&gt;Congratulations! You've published your first blog on DEV. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Srf1W4nnQIb0k/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Srf1W4nnQIb0k/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy, wasn't it?&lt;/strong&gt; After you've done this process a couple of times, it'll become easier and you'll get the hang of it, trust me.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sharing-your-blogs-on-social-media"&gt;
  &lt;/a&gt;
  Sharing your blogs on social media! 🐹
&lt;/h3&gt;

&lt;p&gt;After publishing your article on DEV, you can then share the link on social media accounts like Twitter, Facebook, and Linkedin, etc. The official Twitter account of DEV &lt;a href="https://twitter.com/ThePracticalDev?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor"&gt;@ThePracticalDev&lt;/a&gt; also shares blog posts that are good and get featured. This is a very nice gesture, as you can get a &lt;strong&gt;far greater reach&lt;/strong&gt; in this way, especially if you're just starting out and don't have a huge audience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-folks"&gt;
  &lt;/a&gt;
  That's all folks! 🙏
&lt;/h2&gt;

&lt;p&gt;If you have any questions feel free to ask me in the comments 👇and I will do my best to answer them. Feel free to read some of my other blogs on DEV &lt;a class="mentioned-user" href="https://dev.to/fahadimran28"&gt;@fahadimran28&lt;/a&gt;
. Till then, thanks for reading, and happy coding! 😄&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/HJ8NsNtn9VswE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/HJ8NsNtn9VswE/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-enjoyed-reading-this-article-please-give-it-a-or"&gt;
  &lt;/a&gt;
  If you enjoyed reading this article, please give it a ❤️, 🦄, or 🔖
&lt;/h4&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>writing</category>
    </item>
    <item>
      <title>10 useful VS Code shortcuts you should know  ()</title>
      <author>Mariana Simon Paixao</author>
      <pubDate>Wed, 14 Apr 2021 20:36:39 +0000</pubDate>
      <link>https://dev.to/simonpaix/10-useful-vs-code-shortcuts-you-should-know-42m</link>
      <guid>https://dev.to/simonpaix/10-useful-vs-code-shortcuts-you-should-know-42m</guid>
      <description>&lt;p&gt;This is a curated list of the shortcuts you should learn as soon as possible. I really wish I knew them when I started coding. It would have saved me hours of manual typing.  &lt;/p&gt;

&lt;p&gt;Default shortcuts for Linux. Mac and Windows shortcuts are displayed below if different. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ctrlp-displays-the-search-bar-to-search-for-files"&gt;
  &lt;/a&gt;
  1. Ctrl+P : Displays the search bar to search for files
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd + P)&lt;br&gt;
You will be navigate between files the entire time. You can type the file name and open it by pressing enter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---efJ3L1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/QuickOpen.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---efJ3L1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/QuickOpen.gif%3Fraw%3Dtrue" alt="search bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-ctrl-shift-p-displays-the-command-pallete"&gt;
  &lt;/a&gt;
  2. Ctrl + Shift + P: Displays the command pallete
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd + Shift + P)&lt;br&gt;
Displays the command pallete where you can search for an action&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YTUQi0k3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/OpenCommandPalatte.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YTUQi0k3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/OpenCommandPalatte.gif%3Fraw%3Dtrue" alt="command palete"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-crtl-b-toggle-the-sidebar"&gt;
  &lt;/a&gt;
  3. Crtl + B : Toggle the sidebar
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd + B)&lt;br&gt;
Show or hide the side bar where you can navigate through the explorer.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xDLIelRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/toggle_side_bar.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xDLIelRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/toggle_side_bar.gif%3Fraw%3Dtrue" alt="toggle sidebar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-ctrlshifte-move-to-explorer-window"&gt;
  &lt;/a&gt;
  4. Ctrl+Shift+E : Move to Explorer window
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd + Shift + E)&lt;br&gt;
Move to Explorer window where you have your file tree and can navigate using the arrow keys.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Y4W_Xbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/ctrl%2520shift%2520E.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Y4W_Xbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/ctrl%2520shift%2520E.gif%3Fraw%3Dtrue" alt="move to explorer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-ctrl-shift-m-quickly-shows-errors-and-warnings"&gt;
  &lt;/a&gt;
  5. Ctrl + Shift + M : Quickly shows errors and warnings
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd + Shift + M)&lt;br&gt;
Everybody likes bug-free code. Shows up the problems panel where you can see identified errors and warnings.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yys4DO3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/Errors_Warnings.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yys4DO3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/Errors_Warnings.gif%3Fraw%3Dtrue" alt="errors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-ctrl-shift-l-multi-cursor-selection"&gt;
  &lt;/a&gt;
  6. Ctrl + Shift + L: Multi cursor selection
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd + Shift + L)&lt;br&gt;
Add additional cursors to edit all occurrences of the current selection. Usually less error-prone than doing search and replace all.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7LhlnRyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/add_cursor_current_selection.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7LhlnRyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/add_cursor_current_selection.gif%3Fraw%3Dtrue" alt="multiselect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-ctrl-d-one-by-one-selection"&gt;
  &lt;/a&gt;
  7. Ctrl + D : One by one selection
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd+D)&lt;br&gt;
Similar to the previous one, but use Ctrl + D if you want to add the occurrences of the current selection one by one. Each time you press the key combination it adds a new occurrence to the selection.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ed0pzjX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/add_cursor_current_selection_one_by_one.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ed0pzjX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/add_cursor_current_selection_one_by_one.gif%3Fraw%3Dtrue" alt="one-select"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-ctrl-toggle-line-comment"&gt;
  &lt;/a&gt;
  8.  Ctrl+/ : Toggle line comment
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd+/)&lt;br&gt;
Toggle between commented and uncommented line behavior.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mDSUn6tE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/toggle.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDSUn6tE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/toggle.gif%3Fraw%3Dtrue" alt="toggle comment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-ctrl-shift-i-formats-the-entire-file"&gt;
  &lt;/a&gt;
  9. Ctrl + Shift + I: Formats the entire file
&lt;/h2&gt;

&lt;p&gt;(Mac: Shift + Option + F, Windows: Windows Shift + Alt + F)&lt;br&gt;
Formats the entire active file or prompts you to install a Formatter extension. I use Prettier extension to format JS code&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--19micMiH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/code_formatting.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--19micMiH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/code_formatting.gif%3Fraw%3Dtrue" alt="format"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-alt-up-or-alt-down-move-line"&gt;
  &lt;/a&gt;
  10.  Alt + Up or Alt + Down: Move line
&lt;/h2&gt;

&lt;p&gt;(Mac: Opt+Down or Opt+Up)&lt;br&gt;
Pretty straightforward. Move line up and down.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Y4W_Xbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/ctrl%2520shift%2520E.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Y4W_Xbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/ctrl%2520shift%2520E.gif%3Fraw%3Dtrue" alt="move"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-wrap-with-abbreviation"&gt;
  &lt;/a&gt;
  Bonus: Wrap with Abbreviation.
&lt;/h2&gt;

&lt;p&gt;Helps you add that missing div tag to an HTML block for example. It is not enabled by default, you need to do it in keyboard shortcuts preferences. Use shortcut 2 listed here (yeah \0/) -&amp;gt; type Preferences:Open Keyboard Shortcuts -&amp;gt; search for Emmet: Wrap with Abbreviation -&amp;gt; choose a key to bind it. I use Alt + M.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hxBtAbIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/Wrap-abbreviation.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxBtAbIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/Wrap-abbreviation.gif%3Fraw%3Dtrue" alt="wrap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#honarable-mention"&gt;
  &lt;/a&gt;
  Honarable mention:
&lt;/h2&gt;

&lt;p&gt;Ctrl + Space :  Show Suggestions&lt;br&gt;
Shows suggestions to quickly fill properties and other stuff.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GGFjUlTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/show%2520suggestions.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GGFjUlTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/show%2520suggestions.gif%3Fraw%3Dtrue" alt="suggest"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about-me-lets-connect"&gt;
  &lt;/a&gt;
  About me, let's connect! 👋👩‍💻
&lt;/h1&gt;

&lt;p&gt; &lt;br&gt;
I'm an avid learner and I love sharing what I know. I teach coding on live streams 👉 &lt;a href="https://learnpine.com"&gt;here&lt;/a&gt;. If you want to, come visit and say hi in the chat 😁&lt;br&gt;
 &lt;br&gt;
 &lt;/p&gt;

</description>
      <category>productivity</category>
      <category>vscode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>10+ CSS BORDER ANIMATION EXAMPLE</title>
      <author>mike</author>
      <pubDate>Wed, 14 Apr 2021 20:27:30 +0000</pubDate>
      <link>https://dev.to/mike37/10-css-border-animation-example-4jjf</link>
      <guid>https://dev.to/mike37/10-css-border-animation-example-4jjf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpO3hLjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14ykfkcth85rqm74gla6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpO3hLjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14ykfkcth85rqm74gla6.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IF YOU LIKE AIRTICLE THEN CHECK MORE &lt;a href="https://frontendin.com/css-border-animation/"&gt;25+ Best CSS Border Animation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        1. Title:-CSS Border transitions
           Author:-Giana
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/giana/embed/yYBpVY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        2.Title:-Button Hover States
          Author:-James Power
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Snazzy CSS hover states for a button.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/thejamespower/embed/OVNYLL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  3.Title:-Colorful CSS Buttons
          Author:-Chris Deacy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;A collection of various types of CSS buttons in various colors.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/chrisdothtml/embed/waKBdM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         4.Title:-Animated CSS Gradient Border
           Author:-Mike Schultz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mike-schultz/embed/NgQvGO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         5.Title:-Imperfect Buttons
           Author:-Tiffany Rayside
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/tmrDevelops/embed/VeRvKX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         6. Title:-Sass button border hover effect mixin
            Author:-Giana
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/giana/embed/xdXpJB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         7. Title:-border-animation-css
            Author:-Swarup Kumar Kuila
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;border-animation-css is create only in use of css.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/uiswarup/embed/RBByzW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         8. Title:-SVG Border Animation 1
            Author:-Zach Saucier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZachSaucier/embed/kyGqm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         9. Title:-[PURE CSS] border animation without svg
            Author:-Rplus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;single element animation icon~&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Rplus/embed/lEDBj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          10.Title:-Border animation
             Author:-Inderpreet Singh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Border animation&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Inderpreet23/embed/rLzbLk?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         11.Title:-Button Border Hover Effects
            Author:-Sarath AR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/sarath-ar/embed/dMKxxM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         12.Title:- CSS-only border animation
            Author:-Danny Joris
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;CSS-only border animation on hover. It needs a solid background in order to work.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/DannyJoris/embed/BrMgza?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IF YOU LIKE AIRTICLE THEN CHECK MORE &lt;a href="https://frontendin.com/css-border-animation/"&gt;25+ Best CSS Border Animation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Random numbers in CSS? Really? 🎲🤔</title>
      <author>Pascal Thormeier</author>
      <pubDate>Wed, 14 Apr 2021 20:26:05 +0000</pubDate>
      <link>https://dev.to/thormeier/random-numbers-in-css-really-569o</link>
      <guid>https://dev.to/thormeier/random-numbers-in-css-really-569o</guid>
      <description>&lt;p&gt;I just read &lt;a href="https://dev.to/inhuofficial/a-pure-css-password-generator-they-said-it-can-t-be-done-4pla"&gt;this awesome post by inhuofficial&lt;/a&gt; about a random password generator written in pure CSS. It follows a similar approach as some other pure CSS random number generators out there. Most of them use differently timed animations to "shuffle" the state. The user interacts with it by pausing the animations and voila: A seemingly random number. A really clever approach.&lt;/p&gt;

&lt;p&gt;And it got me thinking.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-even-is-random"&gt;
  &lt;/a&gt;
  What even &lt;em&gt;is&lt;/em&gt; "random"?
&lt;/h1&gt;

&lt;p&gt;"Random", as I would define it, describes an action with a non-determinable result. That doesn't necessarily mean that the result is not deterministic (think, it could be determined in theory, but nobody can). Let's have a look at a simple way to generate a random result: A coin flip.&lt;/p&gt;

&lt;p&gt;If you flip a coin a gazillion times, the result will be roughly 50% heads and 50% tails. That seems random. But is it really? Seemingly so, we can't possibly measure all the variables that influence if it's heads or tails, right? But what if we could? If we knew all the preconditions, like, &lt;em&gt;all&lt;/em&gt; of them? Position and velocity of every single air molecule in the room, the body temperature of the person flipping the coin, size and weight of the coin, fluctuations in Earth's gravity, whatever you can think of. Would we be able to predict the outcome? I think: Most likely, yes.&lt;/p&gt;

&lt;p&gt;And there's the problem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#classical-computers-and-electricity"&gt;
  &lt;/a&gt;
  Classical computers and electricity
&lt;/h1&gt;

&lt;p&gt;At their very foundation, computers work with electricity. Electricity either flows (&lt;code&gt;1&lt;/code&gt;) or it doesn't (&lt;code&gt;0&lt;/code&gt;). When you wire a few billion transistors together the right way, they can do mathematics and other amazing things, but they still represent this logic of 0 and 1. If you apply the same current to the same parts, the result will be the same.&lt;/p&gt;

&lt;p&gt;So, how can this construct generate random numbers? Unless there's a special physical part wired in as well, it can't. That's why the "random" numbers generated by computers, are either &lt;a href="https://hackaday.com/2019/12/09/generating-random-numbers-with-a-fish-tank/"&gt;generated with a fish tank&lt;/a&gt; or they're so-called "pseudo-random" numbers: They only seem to be random, but are actually deterministic.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pseudorandom-numbers"&gt;
  &lt;/a&gt;
  "Pseudo-random" numbers
&lt;/h1&gt;

&lt;p&gt;So, essentially, the people coming up with pure CSS random number generators ran into the same problems a lot of people did before them when implementing random number generators like &lt;code&gt;/dev/random&lt;/code&gt; or &lt;code&gt;Math.random()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that's no surprise: Generating pseudo-random numbers is its own field of research, actually. According to Wikipedia, there's four different criteria that measure the quality of a pseudo-random number generator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Probability of two randomly generated sequences to be different.&lt;/li&gt;
&lt;li&gt;Being indistinguishable from actual random numbers. This is tested with some predefined statistical tests.&lt;/li&gt;
&lt;li&gt;Being impossible for an attacker to calculate or otherwise guess a random number in advance from any previously generated number.&lt;/li&gt;
&lt;li&gt;Being impossible for an attacker to calculate or otherwise guess a random number in advance from any internal state of the generator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some pseudo-random number generators rely on the unix timestamp, some may rely on CPU temperature, a hash of the current state of the memory and some constant. They function much like the coin flip: They add dozens of variables to make the result look more and more random, even though it never truly becomes random.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In summary
&lt;/h1&gt;

&lt;p&gt;When I looked for CSS-only random number generators, I often read the sentence "they're not real random numbers" or I even saw references to the &lt;a href="https://xkcd.com/221/"&gt;XKCD comic about random number generators&lt;/a&gt;, but I think those people are a bit unfair to their own achievements. Those generators are as good as it gets with the tools CSS offers. We're dealing with machines that need to be deterministic. Unless there's a possibility to measure quantum weirdness, take photos of fish tanks or measure the light of distant stars flickering in the atmosphere with pure CSS, the numbers that can be generated with CSS will remain pseudo-random. &lt;/p&gt;

&lt;p&gt;And that's OK.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a&lt;/em&gt; ❤️ &lt;em&gt;or a&lt;/em&gt; 🦄&lt;em&gt;! I write tech articles in my free time and like to drink coffee every once in a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to support my efforts,&lt;/em&gt; &lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;em&gt;buy me a coffee&lt;/em&gt; ☕&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a href="https://twitter.com/pthormeier"&gt;&lt;em&gt;follow me on Twitter&lt;/em&gt; 🐦&lt;/a&gt;&lt;em&gt;!&lt;/em&gt; &lt;em&gt;You can also support me directly via &lt;a href="https://www.paypal.me/pthormeier"&gt;Paypal&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc4mYYLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x55hp6jopwyy161d8e2u.png" alt="Buy me a coffee button"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>computerscience</category>
      <category>webdev</category>
      <category>random</category>
    </item>
    <item>
      <title>My First Personal Site! 📣</title>
      <author>fentybit</author>
      <pubDate>Wed, 14 Apr 2021 20:23:29 +0000</pubDate>
      <link>https://dev.to/fentybit/my-first-personal-site-4m20</link>
      <guid>https://dev.to/fentybit/my-first-personal-site-4m20</guid>
      <description>&lt;p&gt;I can not believe that I have 2 months left with Flatiron School, and hopefully by then I can officially call myself a Full-Stack Software Engineer. 👩🏻‍💻&lt;/p&gt;

&lt;p&gt;Aside from revamping my resume, I have been working on building my personal site. After weeks of debating if I should be building from scratch or not, I decided to deploy my first portfolio site from a ready-made HTML5 template. I can always refine my portfolio site later as I develop more skills, and eventually design my own UI components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting Point&lt;/strong&gt;&lt;br&gt;
Not sure where to start, I looked for advice from &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;. I found this tutorial of &lt;a href="https://www.freecodecamp.org/news/how-to-put-a-website-online-guide-to-website-creation-custom-domain-and-hosting/"&gt;How to Put a Website Online&lt;/a&gt;, and it was extremely useful in providing guidance for someone (like me) who has no knowledge on buying a custom domain, hosting and outsourcing a template. I had fun perusing through &lt;a href="https://pixelarity.com/"&gt;Pixelarity&lt;/a&gt; where you can browse HTML responsive template designs. Basic skills required include HTML, CSS and JavaScript. The next step was trying to figure out my custom domain. Funny thing, this effort frustrates me the most, and I could not make up my mind. Long story short, I ended up re-branding myself to &lt;code&gt;@fentybit&lt;/code&gt;, and settled on &lt;code&gt;fentybit.me&lt;/code&gt;. I love numbers, and hence, &lt;code&gt;bit&lt;/code&gt; or binary digit. Then, I mulled over &lt;code&gt;.dev&lt;/code&gt; and &lt;code&gt;.me&lt;/code&gt; for quite some time. I learned from &lt;a href="https://medium.engineering/use-a-dev-domain-not-anymore-95219778e6fd"&gt;other developers and their thoughts on &lt;code&gt;.dev&lt;/code&gt; domain&lt;/a&gt;, and I settled on &lt;code&gt;.me&lt;/code&gt;. I want my site to personally share who I am and what I am, in the most minimalistic way. I am glad the custom domain was still available. Thank you &lt;a href="https://www.namecheap.com/"&gt;Namecheap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Personalize your Site&lt;/strong&gt;&lt;br&gt;
Personalizing HTML/CSS attributes and content delivery took most of my time, but Pixelarity made it so effortless! If there is anything new, it would be trying to link my &lt;em&gt;contact&lt;/em&gt; page so other devs can communicate back to me. &lt;a href="https://formspree.io/"&gt;Formspree&lt;/a&gt; provides this service. I only need to submit their API to my front-end code, and they take care of the rest. 📝&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdYZRiuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz6oc4rpamiruhamt97i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdYZRiuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz6oc4rpamiruhamt97i.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Namecheap &amp;amp;&amp;amp; Netlify&lt;/strong&gt;&lt;br&gt;
While there are a lot of hosting providers such as Bluehost, GoDaddy, Hostinger, DreamHost and so on, you can always get free ones from either &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; or &lt;a href="https://pages.github.com/"&gt;GitHub pages&lt;/a&gt;. I had success initially deploying with GitHub pages, though my site resulted being &lt;em&gt;"Not Secure"&lt;/em&gt; on Chrome. I made another attempt on setting up my domain with Namecheap and Netlify. Starting with Namecheap to configure the DNS settings &amp;gt; &lt;strong&gt;Manage&lt;/strong&gt;. Under &lt;strong&gt;Nameservers&lt;/strong&gt; category, I had to update from &lt;strong&gt;Namecheap Basic DNS&lt;/strong&gt; to &lt;strong&gt;Custom DNS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u0L-_OtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbasafc7bgbiyv96h7u0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u0L-_OtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbasafc7bgbiyv96h7u0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reroute to my Netlify &lt;strong&gt;Domain Settings&lt;/strong&gt; real quick to add my custom domain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ssqp2aO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgf0yapfw5jd1dzwousp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ssqp2aO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgf0yapfw5jd1dzwousp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step would be to select &lt;strong&gt;Set Up Netlify DNS&lt;/strong&gt;. I would need to acquire &lt;em&gt;a list of Nameservers&lt;/em&gt; from Netlify and propagate on Namecheap.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KvMeD0pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8x96iw8bteezclbka10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvMeD0pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8x96iw8bteezclbka10.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy all of &lt;em&gt;Netlify's DNS servers&lt;/em&gt; to &lt;em&gt;Namecheap Nameservers&lt;/em&gt;, and click the green check button to save this setting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R3siIoix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tj4o3183cdp9kbnf8it.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3siIoix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tj4o3183cdp9kbnf8it.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While I was not able to figure out the SSL/TLS certificate with GitHub pages, I learned Netlify will provision &lt;em&gt;Let's Encrypt&lt;/em&gt; certificate automatically once the DNS configuration on the custom domain pointing to Netlify's servers. Namecheap suggests revisiting your site in 24 - 48 hours once Netlify's DNS fully propagated.&lt;/p&gt;




&lt;p&gt;It's official. Now I have a personal site! 💥&lt;br&gt;
Check out &lt;a href="https://fentybit.me/"&gt;https://fentybit.me/&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFx91a2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmk0orhrf4jcdap26s9x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFx91a2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmk0orhrf4jcdap26s9x.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>netlify</category>
    </item>
    <item>
      <title>Talk Notes: "Implicit to Explicit: Decoding Ruby's Magical Syntax" (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Wed, 14 Apr 2021 20:12:26 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-implicit-to-explicit-decoding-ruby-s-magical-syntax-railsconf-2021-51ge</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-implicit-to-explicit-decoding-ruby-s-magical-syntax-railsconf-2021-51ge</guid>
      <description>&lt;p&gt;✨ &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Talk:&lt;/strong&gt; 'Implicit to Explicit: Decoding Ruby's Magical Syntax' by &lt;a href="https://twitter.com/railsonmaui"&gt;Justin Gordon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: Ruby's implicitness makes it great for readability and DSLs. But that also gives Ruby a "magical" syntax compared to JavaScript. In this talk, let's convert the implicit to explicit in some familiar Rails code. What was "magic" will become simple, understandable code.&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Impression&lt;/strong&gt;:  I feel this talk was much more about pry and I am blown away by Justin's 🔥 &lt;code&gt;~/.pryrc&lt;/code&gt; 🔥 (see &lt;a href="#read-more"&gt;below&lt;/a&gt; ) and the ease it introduces into debugging 💕 I loved this talk, and Justin's way of calm and kind explaining complex concepts.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;DSL: Domain-Specific Language&lt;/li&gt;
&lt;li&gt;Rails leverages Ruby's implicitness:

&lt;ul&gt;
&lt;li&gt;self&lt;/li&gt;
&lt;li&gt;variable declarations&lt;/li&gt;
&lt;li&gt;parentheses&lt;/li&gt;
&lt;li&gt;much more&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Can we learn to read Ruby code like the Ruby interpreter?

&lt;ul&gt;
&lt;li&gt;ideally, you should understand the code, not just copy-paste&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;🔥 🔥 🔥 OMG Justin's pry demo is a must-watch! I need to re-watch it and code along 🔥 🔥 🔥 &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#js-vs-ruby"&gt;
  &lt;/a&gt;
  JS vs Ruby
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JS is very explicit: 

&lt;ul&gt;
&lt;li&gt;you need the parentheses for function invocations; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; is rarely implicit;&lt;/li&gt;
&lt;li&gt;explicit return in standard functions;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Ruby is &lt;em&gt;often&lt;/em&gt; implicit: 

&lt;ul&gt;
&lt;li&gt;parentheses are optional and so zero arg method calls are the same as object values (&lt;code&gt;user.first&lt;/code&gt; can be a method invocation or just a call for the attribute);&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self&lt;/code&gt; can be implicit or explicit (it's explicit for writer methods because otherwise, Ruby's trying to declare a new local var)&lt;/li&gt;
&lt;li&gt;implicit returns;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://shakacode.com/talks"&gt;Justin's resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/1UUePkLINNN-Gpm5x5kPGBjNafrn29DdK/view?usp=sharing"&gt;slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/justin808/1fe1dfbecc00a18e7f2a"&gt;Justin's &lt;code&gt;~/.pryrc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.shakacode.com/search?q=pry"&gt;ShakaCode Forum Pry Articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.shakacode.com/t/running-puma-for-debugging-with-pry/2018"&gt;Running puma for debugging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>How to Automatically Execute Python Code Based on Datadog DevOps Alerts</title>
      <author>Derrick Sherrill</author>
      <pubDate>Wed, 14 Apr 2021 20:11:26 +0000</pubDate>
      <link>https://dev.to/wayscript/how-to-automatically-execute-python-code-based-on-datadog-devops-alerts-3f44</link>
      <guid>https://dev.to/wayscript/how-to-automatically-execute-python-code-based-on-datadog-devops-alerts-3f44</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In today’s video, we’re going to take a look at how to setup the Datadog Trigger in WayScript and how to use it. Datadog is a powerful monitoring program that can be utilized in many different ways through WayScript, including triggering code executions and more. Keep reading to learn more!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-our-script"&gt;
  &lt;/a&gt;
  Building our Script
&lt;/h2&gt;

&lt;p&gt;For this tutorial we’ll simply explore how to set up and connect a Datadog account to WayScript. First, we’ll add the Datadog Trigger module to our program tree. We’ll need to authenticate the account using an API key. To do this, navigate to the toolbar at right and select the button with three bars; from here, click “Add Account.”  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kydWlc0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kydWlc0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/1.png" alt="tutorial step #1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, you will need a nickname, and API key, and an Application key.  &lt;/p&gt;

&lt;p&gt;To get the API and Application keys, visit the Datadog HQ and access your API key. The Application key can also be found here. You can create a new Application key to use solely for this program. Remember to keep both of these keys hidden and don’t share them with others. Paste both of these keys in the right toolbar in WayScript. Now, WayScript has access to your Datadog account.  &lt;/p&gt;

&lt;p&gt;After clicking “Update” and the refresh button in the toolbar, select your preferred organization. Next, turn on events in the toolbar by activating the toggle switch. To activate the trigger, switch the toggle within the Trigger module in the tree. Now, we’ve activated the Datadog Trigger module within WayScript. However, we need to visit the Datadog HQ website to take care of a few more things before we can start using it.  &lt;/p&gt;

&lt;p&gt;First, we’ll go to the Monitors tab on the website. For our account, we already have one running titled Demo Events. Clicking on this we see that we’re sending notifications to @webhook-wayscript-datadog-trigger. We can then copy this, go back to the Monitors tab, and create a new monitor. There are many different things we can monitor using various monitor types, like Events, Custom Checks, and Networks. We’ll monitor an event for this tutorial.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xl57Ukvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xl57Ukvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/3.png" alt="tutorial step #1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For our new event monitor, we’re just sending an event when a user uses an application built through Heroku and hosted on GitHub. We have a default string that says “something big has happened,” so we’ll type “something big” in the “Match events containing” text box to match our string. Next, we’ll set alert conditions above zero, and then in the text box at the bottom we’ll type “Notify” and pass in the @webhook-wayscript-datadog-trigger from earlier.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXTz-imt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXTz-imt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/2.png" alt="tutorial step #1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now add a title and click save, and the new monitor will be found in the monitors tab. We’re now ready to start using Datadog for a number of other applications within WayScript.  &lt;/p&gt;

&lt;p&gt;Having the ability to use Datadog within WayScript adds even more usability to the program. We can use Datadog to monitor our program and automatically trigger code executions to solve any issues that may arise, along with many other potential uses. Stay tuned for future tutorials using the Datadog trigger!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Questions about this script or anything else? Join our &lt;a href="https://discord.gg/VWbXSbj"&gt;discord&lt;/a&gt;. We're always around to help.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Mantener activo tu bot de Discord.py en Replit</title>
      <author>Alexander G</author>
      <pubDate>Wed, 14 Apr 2021 20:00:48 +0000</pubDate>
      <link>https://dev.to/alexanderg/mantener-activo-tu-bot-de-discord-py-en-replit-1o29</link>
      <guid>https://dev.to/alexanderg/mantener-activo-tu-bot-de-discord-py-en-replit-1o29</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Hace un tiempo, estuve empezando a crear bot de discord, con python, me gusto mucho la verdad, el único inconveniente era que tenia era que para mantener mi bot activo debia tener, o la consola ejecutando o mantener la pestaña en &lt;a href="//replit.com"&gt;Replit&lt;/a&gt; activa, y eso a largo plazo no es nada productivo ni interesante.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Mi solución&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Seguramente habrán mas métodos para hacerlo pero el método que yo elegí es el siguiente. Esto no es un método nuevo ni novedoso, se trata de función en flask, pero no te asustes si aun no sabes flask, es realmente muy fácil, es crear un servidor en flask, luego con una pagina llamada &lt;a href="https://uptimerobot.com/"&gt;UpTimerRobot&lt;/a&gt; configurar la dirección creada por flask, para que  UptimerRobot vea constantemente la pagina, y asi este activo tu bot las 24hrs. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Importante&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cabe destacar que debes tener una cuenta en &lt;a href="//replit.com"&gt;replit&lt;/a&gt;, y tener tu codigo del bot en un repls, en este post no te enseñare a crear un bot, solo a mantenerlo activo, pero a futuro espero hacer un post sobre, crear bot en discord.py usar replit, instalar paquetes y demás.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Sin mas rodeos, comencemos&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sea como sea que tengas tu codigo lo importante es que, al mismo nivel del main.py(o el archivo principal de tu bot), crees un archivo con el nombre keep_alive.py, adentro de ese archivo colocaras:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "Bot is online!"

def run():
  app.run(host='0.0.0.0',port=8080)

def live():  
    t = Thread(target=run)
    t.start()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Esa es toda la función en Flask, solo queda importar la función live a nuestro main.py o el archivo principal del bot para poder ejecutar la función, colocando el siguiente codigo el la parte superior de nuestro archivo principal:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from keep_alive import live 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Luego en nuestro archivo principal, en la parte final de nuestro codigo, justo antes del TOKEN, colocamos:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;live()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Si ejecutamos nuestro bot encontraremos, con que ahora hay una ventana en el replit, que contiene una pagina o algo asi, simplemente con el texto: Bot is online!, si buscamos, encontramos un dirección, un enlace, ese enlace lo usaremos en UptimerRobot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Imagen uno&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3rs4rVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh7gvay42080u8lk6etz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3rs4rVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh7gvay42080u8lk6etz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vamos ahora vamos a &lt;a href="https://uptimerobot.com/"&gt;UpTimerRobot&lt;/a&gt;, si no tienes una cuenta, create una es simple, luego de tener una cuenta nos vamos a la parte de monitores &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--94CwV0YC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drsg65l3qvy1ad1p6sq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--94CwV0YC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drsg65l3qvy1ad1p6sq2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Aquí tengo uno porque ya he usado el servicio, a ustedes no les debe salir nada&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Luego le damos a Add new Monitor,y selccionamos las siguientes opciones:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;En Monitor Type: HTTP(s)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;En Friendly Name: El nombre de tu bot o el que quieras&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;En URL (or IP): Aquí deben poner la URL que les da replit, (Imagen 1)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;La constancia la dejamos igual en 5 minutos, y si gustan activan las notificaciones &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Obviando el Friendly Name y la URL(La url es importante que pongas la que te da replit correctamente) les debería quedar así:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wL9AcBu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chxs0wyn5rh813mt7jmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wL9AcBu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chxs0wyn5rh813mt7jmf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Luego de darle Create Monitor, nuestro monitor ya debe estar listo, ahora la próxima vez que ejecutemos nuestro bot, el monitor estará realizando peticiones GET y lo mantendrán activo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cabe destacar que ya hay paginas como heroku y otros servicios que estan hechos para mantener aplicaciones de este tipo.&lt;/p&gt;

&lt;p&gt;Espero que el post se les haga facil de seguir, si tienen una duda, si no les funciona o alguna cosa, puedes decirmelo por los comentarios&lt;/p&gt;

</description>
      <category>python</category>
      <category>replit</category>
      <category>flask</category>
    </item>
  </channel>
</rss>
