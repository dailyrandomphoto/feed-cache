<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>‚úÖ Tell Me About A Time When The Project Was Ambiguous | Facebook Behavioral Interview (Jedi) Series üî•</title>
      <author>The Interview Sage</author>
      <pubDate>Sun, 19 Sep 2021 18:00:13 +0000</pubDate>
      <link>https://dev.to/theinterviewsage/tell-me-about-a-time-when-the-project-was-ambiguous-facebook-behavioral-interview-jedi-series-bk1</link>
      <guid>https://dev.to/theinterviewsage/tell-me-about-a-time-when-the-project-was-ambiguous-facebook-behavioral-interview-jedi-series-bk1</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dh3dtK_FG1o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Before we discuss this question, let us recap what the Behavioral Interview Round at Facebook is.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Behavioral Interview Round is also known as the Jedi Interview round at Facebook.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is about you and your history, your r√©sum√©, and your motivation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The purpose of this interview is to assess whether the candidate will thrive in Facebook's peer-to-peer, minimal process, and unstructured engineering organization.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For Software Engineers, the behavioral interview is actually part behavioral and part coding. The coding part is a shorter version of the usual coding interviews and is included to supplement the other two coding interviews to get an additional coding signal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tips-amp-tricks-to-effectively-prepare-for-behavioral-interviews"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks to effectively prepare for Behavioral Interviews
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_kgnGQmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y9t832s7yc0j58aycqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_kgnGQmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y9t832s7yc0j58aycqb.png" alt="Tips &amp;amp; Tricks to effectively prepare for Behavioral Interviews" title="Behavioral Interview Tips &amp;amp; Tricks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Know yourself! Take the time to review your r√©sum√©, as the interviewer will almost certainly ask about key events in your work history.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have concrete examples or anecdotes to support each of the questions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Familiarize yourself with Facebook's mission statement and its five core values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be Bold&lt;/li&gt;
&lt;li&gt;Focus on Impact&lt;/li&gt;
&lt;li&gt;Move Fast&lt;/li&gt;
&lt;li&gt;Be Open&lt;/li&gt;
&lt;li&gt;Build Social Value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be yourself! Be open and honest about your successes and failures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be humble and focus on teamwork, leadership, and mentorship qualities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, let us review how to effectively answer this question.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-tell-me-about-a-time-when-the-project-was-ambiguous"&gt;
  &lt;/a&gt;
  Question: Tell Me About A Time When The Project Was Ambiguous
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uKTQTY81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcrphex5gj8rjl7g9lcn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uKTQTY81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcrphex5gj8rjl7g9lcn.png" alt="Tell Me About A Time When The Project Was Ambiguous" title="Tell Me About A Time When The Project Was Ambiguous"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=874s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, Sample Answer (Example), and a Special Case of "Never Worked On Ambiguous Projects".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;"Tell me about a time when the project was ambiguous" is one of the tough questions asked in the behavioral interview.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--srzZ4LbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2m25amm2tnkktu7dg6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--srzZ4LbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2m25amm2tnkktu7dg6h.png" alt="Evaluation Criteria for Tell Me About A Time When The Project Was Ambiguous" title="Evaluation Criteria for 'Tell Me About A Time When The Project Was Ambiguous'"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5kwzQ0S4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g60o0njhhtk2w9tv0gwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5kwzQ0S4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g60o0njhhtk2w9tv0gwg.png" alt="Evaluation Criteria for Tell Me About A Time When The Project Was Ambiguous" title="Evaluation Criteria for 'Tell Me About A Time When The Project Was Ambiguous'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In everyone's career journey, they face a challenging situation where they need to work on a task that is ambiguous, uncertain, and does not have a clear path forward. By this question, the interviewer's goal is not to trick you but to assess how well you can adapt and perform in challenging situations and unstructured environments.&lt;/p&gt;

&lt;p&gt;They are trying to understand your ability to be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proactive,&lt;/li&gt;
&lt;li&gt;Stay calm,&lt;/li&gt;
&lt;li&gt;Exercise judgment, and&lt;/li&gt;
&lt;li&gt;Act responsibly in such unexpected scenarios.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are assessing your perseverance to explore the ambiguity and learn new things, despite the challenges. They are also evaluating your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication,&lt;/li&gt;
&lt;li&gt;Time management,&lt;/li&gt;
&lt;li&gt;Problem-solving, and&lt;/li&gt;
&lt;li&gt;Decision-making skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Employers want to know if you can handle competing priorities, shift gears when needed, and understand the implications of missing deadlines. They are looking to see if your coworkers can rely on you to get the work done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#response-framework"&gt;
  &lt;/a&gt;
  Response Framework
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9IynzuGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bamf8rata73x76phpst0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9IynzuGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bamf8rata73x76phpst0.png" alt="Response Framework for Tell Me About A Time When The Project Was Ambiguous" title="Response Framework for 'Tell Me About A Time When The Project Was Ambiguous'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our advice is to pick a compelling and honest story that can articulate a real-life experience where you had to work on an ambiguous task at your workplace.&lt;/p&gt;

&lt;p&gt;Describe the situation, the events that occurred, and explain the ambiguity involved in the task at hand. For example, it may be one of the following scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your manager or director may ask you to lead the development of a vague feature request.&lt;/li&gt;
&lt;li&gt;You may discover a potential area of improvement in the current architecture, which may be ambiguous, to begin with.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explain your strategy to the interviewer on how you proactively gathered the requirements and use cases to bring more clarity to the project. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conducting customer interviews or user research to gather data to make an informed decision.&lt;/li&gt;
&lt;li&gt;Exploring open-source projects and reading research publications to understand the existing technologies and how you can leverage them to architect your new service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, elaborate on the quick proof of concept or prototype that you implemented to validate your solution. Show that you proactively communicated your findings and key decisions to all the stakeholders.&lt;/p&gt;

&lt;p&gt;Finally, express how your strategy helped define a plan of action and complete the required deliverables within the deadline. Also, let the interviewer know how the outcome and the impact were beneficial to the company or team. Explain the learnings you took from this challenging situation and how they helped you become a better engineer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-amp-tricks"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xAnkqN-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0wdb9pnlzq2unrwarf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xAnkqN-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0wdb9pnlzq2unrwarf5.png" alt="Tips and Tricks for Tell Me About A Time When The Project Was Ambiguous" title="Tips &amp;amp; Tricks for 'Tell Me About A Time When The Project Was Ambiguous'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some tips and tricks that will help you effectively prepare this question for the behavioral interview.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use a compelling story that is honest and believable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is most desirable to describe a real-life example to the interviewer to show that you have actually faced such a situation in your career and not just talk about a generic strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always remain calm, composed, and confident while answering this question.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not sugarcoat your answer with irrelevant details.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spend more time talking about the actions you took to understand the ambiguity of the project.&lt;/li&gt;
&lt;li&gt;For example, focus on the strategy you used to gather the data to bring clarity to the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Show that you proactively communicated your findings and key decisions to all the stakeholders.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The biggest way to mess up answering this question is by simply saying that you have never faced a challenging situation at your workplace where the task at hand was ambiguous.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead, explain your strategies for dealing with such situations in your day-to-day life.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focus on the business impact that you had on your company or team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prepare the response for this question beforehand, as it will be tough to structure your answer on the spot during the interview.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not memorize the answer as it should come naturally, and you should sound confident to the interviewer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#sample-answer-example"&gt;
  &lt;/a&gt;
  Sample Answer (Example)
&lt;/h2&gt;

&lt;p&gt;Here is Ross. He is currently working as a Staff Software Engineer at a major technology company. He is interviewing for the role of Staff Software Engineer at Facebook.&lt;/p&gt;

&lt;p&gt;üéß Listen to his response to this question in this &lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=1127s"&gt;YouTube Video&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#special-case-never-worked-on-ambiguous-projects"&gt;
  &lt;/a&gt;
  Special Case: Never Worked On Ambiguous Projects
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b5oFoqXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpaxkm70pqlss6ftd9rg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b5oFoqXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpaxkm70pqlss6ftd9rg.png" alt="Special Case: Never Worked On Ambiguous Projects" title="Special Case: Never Worked On Ambiguous Projects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It may be the case that you have actually never faced a challenging situation at your workplace where the task at hand was ambiguous. New Grads and entry-level software engineers usually fall under this category.&lt;/p&gt;

&lt;p&gt;If you are in such a situation, do not end your answer by simply saying that you have never faced an ambiguous scenario. Instead, try to use a real-life experience from your college or everyday life. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You may need to gather data or do a quick proof of concept to validate your idea for a course project or thesis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will help the interviewer evaluate you on the following attributes mentioned earlier:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How well you adapt and perform in obscure situations,&lt;/li&gt;
&lt;li&gt;Ability to be proactive and resourceful,&lt;/li&gt;
&lt;li&gt;Exercise judgment and act responsibly under pressure,&lt;/li&gt;
&lt;li&gt;Perseverance to explore the ambiguity and learn new things,&lt;/li&gt;
&lt;li&gt;Communication skills, and&lt;/li&gt;
&lt;li&gt;Problem solving and decision-making skills.&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#preparation-material"&gt;
  &lt;/a&gt;
  Preparation Material
&lt;/h1&gt;

&lt;p&gt;Learn more about the Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, and Sample Answers (Examples) to effectively prepare and answer these top questions asked in the Behavioral Interviews at Facebook. Certain special cases are also discussed which are usually faced by the candidates during these interviews.&lt;/p&gt;

&lt;p&gt;‚¨áÔ∏è &lt;a href="https://www.buymeacoffee.com/interviewsage/e/40678"&gt;Detailed Notes on Top Facebook Behavioral Interview Questions - Part 2&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-behavioral-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook Behavioral Interview
&lt;/h1&gt;

&lt;p&gt;If you have not read our first article on Top Facebook Behavioral Interview Questions, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-behavioral-interview-questions-part-1-2a0o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;‚úÖ Top Facebook Behavioral Interview Questions (Part 1) | Facebook Jedi Interview Round üî•&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage „Éª May 15 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-system-design-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook System Design Interview
&lt;/h1&gt;

&lt;p&gt;In case if you have not read our series on Cracking the Facebook System Design Interview, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-system-design-interview-questions-31np" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top Facebook System Design Interview Questions (Part 1) | Facebook Pirate Interview Round&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage „Éª Jan 4 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h1&gt;

&lt;p&gt;‚úÖ &lt;a href="https://bit.ly/Educative-Unlimited"&gt;Educative.io Unlimited Plan [üí∞ 10% off for first 100 users]&lt;/a&gt;&lt;br&gt;
‚úÖ &lt;a href="https://bit.ly/Try-Exponent"&gt;TryExponent.com Membership [üí∞ Limited Time 10% offer]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë©‚Äçüíª &lt;a href="https://www.educative.io/courses/grokking-the-system-design-interview?aff=KQZl"&gt;Best System Design Interview Course&lt;/a&gt;&lt;br&gt;
üöÄ &lt;a href="https://bit.ly/SWE-Interview-Course"&gt;Complete SWE Interview Course [üí∞ Limited Time 10% offer]&lt;/a&gt;&lt;br&gt;
üôã‚Äç‚ôÄÔ∏è &lt;a href="https://www.buymeacoffee.com/interviewsage/e/30176"&gt;Behavioral Interview Guide [üí∞ Special Discount]&lt;/a&gt;&lt;br&gt;
üìö &lt;a href="https://smarturl.it/InterviewPrepBook"&gt;Recommended Interview Preparation Book (on Amazon)&lt;/a&gt;&lt;/p&gt;




&lt;center&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--121vjxPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2l00b1bt3nl8fdfb0nn.png" alt="Buy Me a Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚òïÔ∏è Buy us a Coffee at &lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;BuyMeACoffee.com/InterviewSage&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;




&lt;center&gt;

&lt;p&gt;To stay updated about new posts, Subscribe &amp;amp; Follow Us!&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://www.youtube.com/TheInterviewSage?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRCmz2gQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uqifmelnuenxiik8pwx.png" alt="Subscribe to our YouTube channel" title="Subscribe to our YouTube channel"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.instagram.com/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OADCpudp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovhcxjpg0v5z2tidtydk.png" alt="Follow us on Instagram" title="Follow us on Instagram"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.facebook.com/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zohyoISu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyy3kyo44tmv645vvrqw.png" alt="Like &amp;amp; Follow us on Facebook" title="Like &amp;amp; Follow us on Facebook"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="http://twitter.com/intent/follow?source=followbutton&amp;amp;variant=1.0&amp;amp;screen_name=InterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoV_1sI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwwcu44k00a0a8hpfbmf.png" alt="Follow us on Twitter" title="Follow us on Twitter"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.linkedin.com/in/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5QaEiEG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcrwzwc9tnv0q3zmkih8.png" alt="Follow &amp;amp; Connect on LinkedIn" title="Follow &amp;amp; Connect on LinkedIn"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;/center&gt;



&lt;blockquote&gt;
&lt;p&gt;This article is part of the series on Behavioral Interviews at Facebook. So, follow us to get notified when our next article in this series is published. Thanks for reading! &lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__553012"&gt;
  
    .ltag__user__id__553012 .follow-action-button {
      background-color: #3b49df !important;
      color: #f9fafa !important;
      border-color: #3b49df !important;
    }
  
    &lt;a href="/theinterviewsage" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/theinterviewsage"&gt;The Interview Sage&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/theinterviewsage"&gt;Our goal is to create Software Eng Interview tutorials to help you get a job at companies like Facebook, Google, Apple, &amp;amp; Amazon. We will deep-dive into System Design, Coding, &amp;amp; Behavioral interviews.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;/blockquote&gt;

&lt;p&gt;üì∏ Some images used are from free&lt;span&gt;pik&lt;/span&gt;.com: Freepik, pch.vector, vectorjuice, pikisuperstar, raw&lt;span&gt;pixel&lt;/span&gt;.com, slidesgo, stories, Upklyak, jcomp, macrovector_official, syarifahbrit, redgreystock&lt;/p&gt;

&lt;p&gt;&lt;a href="https://disclosureanddisclaimer.theinterviewsage.com/"&gt;Full Disclosure &amp;amp; Disclaimer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The keyword "new" in JavaScript</title>
      <author>Swarnali Roy</author>
      <pubDate>Sun, 19 Sep 2021 17:44:58 +0000</pubDate>
      <link>https://dev.to/swarnaliroy94/the-keyword-new-in-javascript-fh6</link>
      <guid>https://dev.to/swarnaliroy94/the-keyword-new-in-javascript-fh6</guid>
      <description>&lt;p&gt;Hello Readers! &lt;br&gt;
Let me introduce you all with something new today! &lt;/p&gt;

&lt;p&gt;The topic today is the JavaScript Keyword &lt;em&gt;"new"&lt;/em&gt;! In JavaScript, the keyword &lt;em&gt;new&lt;/em&gt; is used to create &lt;em&gt;an instance of an object&lt;/em&gt; that has a &lt;em&gt;constructor function&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Before diving into the details, we need to understand one thing, that is, in JavaScript almost everything is an &lt;em&gt;Object&lt;/em&gt; and the concept of Object is very important to understand the keyword "New". When we define any &lt;em&gt;Boolean&lt;/em&gt;, &lt;em&gt;Number&lt;/em&gt; or &lt;em&gt;String&lt;/em&gt; with the keyword New, it can be treated like an &lt;em&gt;object&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let me show an example first!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HwoZEx06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b23ubt0a858w4v28gnwt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HwoZEx06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b23ubt0a858w4v28gnwt.png" alt="Construction Function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üëâ This is a "&lt;em&gt;constructor function&lt;/em&gt;" , &lt;em&gt;Animal&lt;/em&gt; since it is responsible for &lt;em&gt;constructing&lt;/em&gt; a new object, &lt;em&gt;animal&lt;/em&gt;.&lt;br&gt;
üëâ We had to add properties to the animal object with the dot notation and return it from the constructor function.&lt;br&gt;
üëâ Let's assume that we need to create more than one Animal object in our application. So, we instantiated the constructor function twice.&lt;br&gt;
üëâ We can see the output where two new animal objects are created with &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;legs&lt;/em&gt; properties.&lt;/p&gt;

&lt;p&gt;Here is the interesting thing about the keyword &lt;em&gt;new&lt;/em&gt;. When we use the keyword, a property called &lt;em&gt;this&lt;/em&gt; is created which refers to the whole object and is returned automatically. So, we don't need to specify any additional object inside our constructor function. Basically, those two lines are done for us implicitly (&lt;em&gt;under the hood&lt;/em&gt;). &lt;/p&gt;

&lt;p&gt;Let's take a look what happens &lt;em&gt;under the hood&lt;/em&gt; , assuming the Animal constructor is called with the &lt;em&gt;new&lt;/em&gt; keyword. It can be re-written as following and it is equivalent to the previous example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7S6hkxyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nhzmhznfdtwtuwffi6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7S6hkxyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nhzmhznfdtwtuwffi6k.png" alt="With Comments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, a new object is automatically created and returned. (the commented out lines)&lt;/p&gt;

&lt;p&gt;We can compactly write the code without the &lt;em&gt;under the hood&lt;/em&gt; comments:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5jvcDs9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ux9qbqd1elu7u6ps19h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5jvcDs9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ux9qbqd1elu7u6ps19h.png" alt="Without Comments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This concept is known as "&lt;strong&gt;Pseudoclassical Instantiation&lt;/strong&gt;". &lt;/p&gt;

&lt;p&gt;Similarly, we can define an &lt;em&gt;Object property&lt;/em&gt; which is itself another &lt;em&gt;Object&lt;/em&gt;! &lt;/p&gt;

&lt;p&gt;For &lt;em&gt;example&lt;/em&gt;, let's define an object called "&lt;em&gt;Human&lt;/em&gt;" And then instantiate two new &lt;em&gt;Human&lt;/em&gt; objects as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kTUB11PV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5wa2wzr2wwdelq8ff9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kTUB11PV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5wa2wzr2wwdelq8ff9k.png" alt="Human"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, suppose we want to create an object type for cars and name it "&lt;em&gt;Car&lt;/em&gt;". It should have properties named &lt;em&gt;owner&lt;/em&gt;, &lt;em&gt;model&lt;/em&gt; and &lt;em&gt;yearOfPurchase&lt;/em&gt;. Instead of passing a &lt;em&gt;literal string&lt;/em&gt; or &lt;em&gt;integer value&lt;/em&gt; while creating the new objects, the following statements pass the objects &lt;em&gt;man&lt;/em&gt; and &lt;em&gt;woman&lt;/em&gt; as the parameters for the owners. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u-FvmF6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh0x2vc3gvjiphkitk73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u-FvmF6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh0x2vc3gvjiphkitk73.png" alt="Car"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To find out the name of the owner of car2, we can access the property as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;car2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Swarnali&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#hope-this-post-help-you-while-creating-a-lot-of-similar-objects-in-your-application-discussion-and-queries-are-always-welcomed-relaxedrelaxed"&gt;
  &lt;/a&gt;
  Hope this post help you while creating a lot of similar objects in your application. Discussion and queries are always welcomed! ‚ò∫Ô∏è‚ò∫Ô∏è
&lt;/h6&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create a QR code generator</title>
      <author>Cl√©ment Gaudini√®re</author>
      <pubDate>Sun, 19 Sep 2021 16:43:34 +0000</pubDate>
      <link>https://dev.to/clementgaudiniere/create-a-qr-code-generator-1b0p</link>
      <guid>https://dev.to/clementgaudiniere/create-a-qr-code-generator-1b0p</guid>
      <description>&lt;p&gt;Hello everyone, today we will see how to create a qr code generator with the open source library &lt;a href="https://github.com/neocotic/qrious"&gt;qrious.js&lt;/a&gt;. This library generates a qr code using different algorithms based on the principles discussed in the last article (module, alignment marker, timing patern, etc.), which I strongly invite you to read to better understand how qr codes work :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/clementgaudiniere" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmYaC-rI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--PUgxbDRM--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/610201/fda4d3a8-ecf9-4fe0-a1be-e32aca07d910.png" alt="clementgaudiniere"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/clementgaudiniere/how-does-a-qr-code-work-c2a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How does a QR code work ?&lt;/h2&gt;
      &lt;h3&gt;Cl√©ment Gaudini√®re „Éª Aug 3 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#qrcodes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#flashcodes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tech&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#lets-go"&gt;
  &lt;/a&gt;
  Let's go
&lt;/h3&gt;

&lt;p&gt;The first thing to do is to get hold of the librairie. You can for example use a CDN (Content Delivery Network), or download it directly to your computer/server.&lt;/p&gt;

&lt;p&gt;For those wishing to use a CDN, I recommend this link to include in your document :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those who want to download the library, you can download it via NPM: &lt;code&gt;$ npm install --save qrious&lt;/code&gt; or Bower: &lt;code&gt;$ bower install --save qrious&lt;/code&gt; or via the &lt;a href="https://github.com/neocotic/qrious/releases"&gt;latest releases page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once included in your document, we will create the HTML structure :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Are you ready to create your own Qr code?&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-divided"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Type something"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"qrCodeTextArea"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"qr"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The qrious.js library generates qr codes via the html  elements, without them you will not be able to generate your qr code. You can however give the id of your choice to the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-style"&gt;
  &lt;/a&gt;
  Adding style
&lt;/h3&gt;

&lt;p&gt;Now I'm going to add some styling to my various elements, you can of course, if you wish, customise the CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://fonts.googleapis.com/css2?family=Lato&amp;amp;display=swap")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;545px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("https://i.ibb.co/f0sL4rx/t-l-chargement.jpg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;saturate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;saturate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Lato"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nc"&gt;.container-divided&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;95%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nc"&gt;.container-divided&lt;/span&gt; &lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eaeaea&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;95%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-indent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nc"&gt;.container-divided&lt;/span&gt; &lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nd"&gt;::-moz-selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;118&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;199&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;239&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.54&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nc"&gt;.container-divided&lt;/span&gt; &lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;118&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;199&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;239&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.54&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Open Sans"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;::placeholder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;::-moz-placeholder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:-ms-input-placeholder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-the-librarie"&gt;
  &lt;/a&gt;
  Setting up the librarie
&lt;/h3&gt;

&lt;p&gt;To set up this library, you can use the documentation located on github, or use this table which allows you to understand the different parameters that can be set within this library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mO2UMRw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgfjvsu6wakhq9x30v8i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mO2UMRw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgfjvsu6wakhq9x30v8i.jpg" alt="Table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The resulting JS code looks like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Our textarea&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#qrCodeTextArea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Our canvas element with 'qr' id&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;qr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// The various parameters&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createQR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QRious&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;L&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundAlpha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;foreground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// We create the qr code&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createQR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// If the text box changes, update the qr code.&lt;/span&gt;
&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createQR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a few minutes of code, you can see the result below :&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/clement-gaudiniere/embed/YzVjYqZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this tutorial, if you have any questions, feel free to ask me in the comments. üëç&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 9 Best JavaScript Tools for Game Development in 2021</title>
      <author>MyWeblogLab</author>
      <pubDate>Sun, 19 Sep 2021 16:24:23 +0000</pubDate>
      <link>https://dev.to/mywebloglab/top-9-best-javascript-tools-for-game-development-in-2021-1f30</link>
      <guid>https://dev.to/mywebloglab/top-9-best-javascript-tools-for-game-development-in-2021-1f30</guid>
      <description>&lt;p&gt;JavaScript has been one of the main components behind game development for many years, producing top-quality games through various game engine options. An engine can cater to your programming desires, providing the latest online options no matter your needs or skill level.&lt;/p&gt;

&lt;p&gt;Here are some of the best tools available for &lt;a href="https://www.wikihow.com/Create-a-Gaming-App"&gt;creating mobile and web games&lt;/a&gt;, with fast 2D and 3D rendering. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-babylonjs"&gt;
  &lt;/a&gt;
  1. Babylon.js
&lt;/h2&gt;

&lt;p&gt;Babylon is one of the most popular Microsoft libraries offering detailed elements that can help you render and build 3D games alongside other programs such as WebGL.&lt;/p&gt;

&lt;p&gt;One of the biggest strengths is the huge community that uses this engine. This makes finding any information quick and easy. Guidelines, tutorials, and codes can all be found. You can also use this program no matter what computer you‚Äôre working on. No installation is needed as Babylon works through your browser or code editor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-phaser"&gt;
  &lt;/a&gt;
  2. Phaser
&lt;/h2&gt;

&lt;p&gt;Phaser is an excellent program if you‚Äôre looking to create HTML5 for mobile and desktop games. Features include various images, sprites, and control inputs using three primary physics engines. In addition, Phaser works alongside WebGL and Canvas internal renderer that will automatically switch between them depending on the browser you‚Äôre using. &lt;/p&gt;

&lt;p&gt;A large community of users can be found on forums and social media that can help you with any problems you may come across. The game engine can only be used if your web browser supports the  HTML tag. Along with JavaScript, Phaser supports TypeScript code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-cocos2d"&gt;
  &lt;/a&gt;
  3. Cocos2d
&lt;/h2&gt;

&lt;p&gt;Cocos2d is a self-described king of &lt;a href="https://www.theverge.com/2020/4/14/21219609/video-game-tools-editor-developer-make-price-free-programming"&gt;game development tools&lt;/a&gt;. With Cocos2d, you can code an entire game using JavaScript and export your game across multiple platforms. In addition to this, you have the opportunity to use game previewing, scene editing, debugging, publishing features, and resource management through the open-source Cocos2d-x framework. The Cocos2d engine is available for Windows and Mac users. There is also a dedicated forum to help users and for discussions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-panda-engine"&gt;
  &lt;/a&gt;
  4. Panda Engine
&lt;/h2&gt;

&lt;p&gt;Working together with Pixi, Panda Engine can be used to render 2D games for desktop and mobile. This tool comes in a small package supporting lots of different algorithms and libraries. A great feature found on Panda Engine is tracking Google Analytics inside of the game you have developed. This allows you to analyse the performance of your game and help to improve its performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-crafty"&gt;
  &lt;/a&gt;
  5. Crafty
&lt;/h2&gt;

&lt;p&gt;For building interactive games, Crafty is a great library that combines an extensive collection of elements. Developers are given a chance to explore the depths and abilities of JavaScript creating custom actions and calls. In addition, crafty is an engine that offers a straightforward way to organise components and entities without external applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-kiwijs"&gt;
  &lt;/a&gt;
  6. Kiwi.js
&lt;/h2&gt;

&lt;p&gt;For beginners, Kiwi is one of the best open-source applications to create desktop and mobile HTML5 games. Kiwi is compatible with Canvas and WebGL rendering and builds games published on apps like Chrome Webstore and CocoonJS. One of the main talking points is the collection of plugins. They are rich in abilities and include engines to customise and create achievements centred around quest management, user progress, sprites, artificial intelligence algorithms, and social media connectors. Along with all these abilities, Kiwi has lots of guides and tutorials, giving beginners the chance to learn, create and develop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-melonjs"&gt;
  &lt;/a&gt;
  7. MelonJS
&lt;/h2&gt;

&lt;p&gt;MelonJS is a community-supported, open-source project. The main objective of this application is to bring a plugin-free tool that allows users to explore the world of physics, 3d rendering, animation management, transition effects, and other aspects to build HTML5 interactive programs for games.&lt;/p&gt;

&lt;p&gt;The community aspect is one of the biggest positives of MelonJS. New developers and users can access community forums to ask questions, report any bugs, and learn about the program so that their game development improves and works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-playcanvas"&gt;
  &lt;/a&gt;
  8. PlayCanvas
&lt;/h2&gt;

&lt;p&gt;PlayCanvas is a 3D game-building application with many supported elements in its graphics infrastructure, such as light features, meshes, physical rendering, WebGL 3D, lightmaps, and much more.&lt;/p&gt;

&lt;p&gt;Aside from all of these elements, PlayCanvas can be used on the cloud, meaning there is no need for plugins when testing or running your developed games on your browser. PlayCanvas is a free, open-source tool, but a paid-subscription service unlocks more accessibilities, such as migrating projects to private servers, creating more storage capacity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-pixijs"&gt;
  &lt;/a&gt;
  9. Pixi.js
&lt;/h2&gt;

&lt;p&gt;In addition to HTML5 games, Pixi allows you to create interactive digital content in any format. Some of the brands using its features include Spotify, Marvel, Google, and Adobe.&lt;/p&gt;

&lt;p&gt;In case a browser doesn't support WebGL, Canvas is used instead.&lt;/p&gt;

&lt;p&gt;Downloading the prebuilt build will get you started using Pixi immediately. NPM or CDN install can be used to accomplish this. Additionally, you might be interested in seeing how the library works by checking out the online playground.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roundup"&gt;
  &lt;/a&gt;
  Roundup
&lt;/h2&gt;

&lt;p&gt;No matter which program you choose, there are many great and &lt;a href="https://casino.betmgm.com/en/games/c/slots"&gt;latest online options&lt;/a&gt; to get your game development well underway. JavaScript is a fantastic code format helping your games jump to the next level.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Deploy a React App on AWS Lightsail: Testing, Docker, Docker Compose, Nginx &amp; Github Actions </title>
      <author>Mangabo Kolawole</author>
      <pubDate>Sun, 19 Sep 2021 16:17:07 +0000</pubDate>
      <link>https://dev.to/koladev/deploy-a-react-app-on-aws-lightsail-testing-docker-docker-compose-nginx-github-actions-4lb5</link>
      <guid>https://dev.to/koladev/deploy-a-react-app-on-aws-lightsail-testing-docker-docker-compose-nginx-github-actions-4lb5</guid>
      <description>&lt;p&gt;So you have written your React Application and you are ready to deploy it?&lt;/p&gt;

&lt;p&gt;Although there are already existing solutions like Netlify, Vercel, to help you deploy your application easily and quickly, it's always good for a developer to know how to deploy an application on a private server.&lt;/p&gt;

&lt;p&gt;Today, we'll learn how to deploy a React App on AWS Lightsail. &lt;strong&gt;This can also be applied to other VPS providers.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Setup&lt;/li&gt;
&lt;li&gt;Prepare the React application for deployment&lt;/li&gt;
&lt;li&gt;Environment variables&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Docker Configuration&lt;/li&gt;
&lt;li&gt;Github Actions (testing)&lt;/li&gt;
&lt;li&gt;Preparing the server&lt;/li&gt;
&lt;li&gt;Github Actions (Deployment)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-setup"&gt;
  &lt;/a&gt;
  1 - Setup
&lt;/h2&gt;

&lt;p&gt;For this project, we'll be using an already configured React application. It's a project made for this article about   &lt;a href="https://dev.to/koladev/react-rest-authentication-cmh"&gt;FullStack React &amp;amp; React Authentication: React REST, TypeScript, Axios, Redux &amp;amp; React Router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can directly clone the repo  &lt;a href="https://github.com/koladev32/django-react-auth-app"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once it's done, make sure to install the dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-react-auth-app
yarn &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-prepare-application-for-deployment"&gt;
  &lt;/a&gt;
  2 - Prepare application for deployment
&lt;/h2&gt;

&lt;p&gt;Here, we'll configure the application to use env variables but also configure  &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;  as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#env-variables"&gt;
  &lt;/a&gt;
  Env variables
&lt;/h3&gt;

&lt;p&gt;It's important to keep sensitive bits of code like API keys, passwords, and secret keys away from prying eyes.&lt;br&gt;
The best way to do it? Use environment variables. Here's how to do it in our application.&lt;/p&gt;

&lt;p&gt;Create two files :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;.env&lt;/code&gt; file which will contain all environment variables&lt;/li&gt;
&lt;li&gt;and a &lt;code&gt;env.example&lt;/code&gt; file which will contain the same content as &lt;code&gt;.env&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actually, the &lt;code&gt;.env&lt;/code&gt; file is ignored by git. The &lt;code&gt;env.example&lt;/code&gt; file here represents a skeleton we can use to create our &lt;code&gt;.env&lt;/code&gt; file in another machine.&lt;/p&gt;

&lt;p&gt;It'll be visible, so make sure to not include sensitive information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ./.env
REACT_APP_API_URL=YOUR_BACKEND_HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's copy the content and paste it in &lt;code&gt;.env.example&lt;/code&gt;, but make sure to delete the values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./env.example
REACT_APP_API_URL=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;Testing in an application is the first assurance of maintainability and reliability of our React server.&lt;br&gt;
We'll be implementing testing to make sure everything is green before pushing for deployment.&lt;/p&gt;

&lt;p&gt;To write tests here, we'll be using the react testing library.&lt;br&gt;
We'll basically test the values in the inputs of your &lt;code&gt;Login&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/Login.test.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/jest-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderLogin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Login Test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;renderLogin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emailInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailInput&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailInput&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passwordInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;passwordInput&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;passwordInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12345678&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;passwordInput&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12345678&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run the tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's move to the  &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;  configuration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dockerizing-our-app"&gt;
  &lt;/a&gt;
  Dockerizing our app
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;  is an open platform for developing, shipping, and running applications inside containers.&lt;br&gt;
Why use Docker?&lt;br&gt;
It helps you separate your applications from your infrastructure and helps in delivering code faster.&lt;/p&gt;

&lt;p&gt;If it's your first time working with Docker, I highly recommend you go through a quick tutorial and read some documentation about it.&lt;/p&gt;

&lt;p&gt;Here are some great resources that helped me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eN_O4zd4D9o&amp;amp;list=PLPoSdR46FgI5wOJuzcPQCNqS37t39zKkg"&gt;Docker Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docker-curriculum.com/"&gt;Docker curriculum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  Dockerfile
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; represents a text document containing all the commands that could call on the command line to create an image.&lt;/p&gt;

&lt;p&gt;Add a &lt;code&gt;Dockerfile.dev&lt;/code&gt; to the project root. It'll represent the development environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Dockerfile.dev&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14-alpine&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json ./&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; yarn.lock ./&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--frozen-lockfile&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we started with an &lt;strong&gt;Alpine-based Docker Image for JavaScript&lt;/strong&gt;. It's a lightweight Linux distribution designed for security and resource efficiency.&lt;/p&gt;

&lt;p&gt;Also, let's add a &lt;code&gt;.dockerignore&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
npm-debug.log
Dockerfile.dev
Dockerfile.prod
.dockerignore
yarn-error.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#docker-compose"&gt;
  &lt;/a&gt;
  Docker Compose
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;  is a great tool (&amp;lt;3). You can use it to define and run multi-container Docker applications.&lt;/p&gt;

&lt;p&gt;What do we need? Well, just a YAML file containing all the configuration of our application's services.&lt;br&gt;
Then, with the &lt;code&gt;docker-compose&lt;/code&gt; command, we can create and start all those services.&lt;/p&gt;

&lt;p&gt;Here, the &lt;code&gt;docker-compose.dev.yml&lt;/code&gt; file will contain three services that make our app: nginx and web.&lt;/p&gt;

&lt;p&gt;This file will be used for development.&lt;/p&gt;

&lt;p&gt;As you guessed :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;nginx&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;core_web&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;on-failure&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx:stable&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;80:80"&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;web&lt;/span&gt;
  &lt;span class="na"&gt;web&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;react_app&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;on-failure&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile.dev&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./src:/app/src&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3000:3000"&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="s"&gt;sh -c "yarn start"&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;nginx&lt;/code&gt;:  &lt;a href="https://www.nginx.com/"&gt;NGINX&lt;/a&gt;  is open-source software for web serving, reverse proxying, caching, load balancing, media streaming, and more.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;web&lt;/code&gt;: We'll run and serve the endpoint of the React application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the next step, let's create the NGINX configuration file to proxy requests to our backend application.&lt;br&gt;
In the root directory, create a &lt;code&gt;nginx&lt;/code&gt; directory and create a &lt;code&gt;nginx.dev.conf&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="n"&gt;upstream&lt;/span&gt; &lt;span class="n"&gt;webapp&lt;/span&gt; {
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;react_app&lt;/span&gt;:&lt;span class="m"&gt;3000&lt;/span&gt;;
}
&lt;span class="n"&gt;server&lt;/span&gt; {

    &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;;
    &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;;

    &lt;span class="n"&gt;location&lt;/span&gt; / {
        &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;://&lt;span class="n"&gt;webapp&lt;/span&gt;;
        &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;-&lt;span class="n"&gt;Forwarded&lt;/span&gt;-&lt;span class="n"&gt;For&lt;/span&gt; $&lt;span class="n"&gt;proxy_add_x_forwarded_for&lt;/span&gt;;
        &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;Host&lt;/span&gt; $&lt;span class="n"&gt;host&lt;/span&gt;;
        &lt;span class="n"&gt;proxy_redirect&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#docker-build"&gt;
  &lt;/a&gt;
  Docker Build
&lt;/h4&gt;

&lt;p&gt;The setup is completed. Let's build our containers and test if everything works locally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose -f docker-compose.dev.yml up -d --build 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it's done, hit &lt;code&gt;localhost/&lt;/code&gt; to see if your application is working.&lt;br&gt;
You should get a similar page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ebsgX1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---ipBmg1G--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624673265869/pv-SIiuEw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ebsgX1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---ipBmg1G--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624673265869/pv-SIiuEw.png" alt="Login Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Our React application is successfully running inside a container.&lt;/p&gt;

&lt;p&gt;Let's move to the Github Actions to run tests every time there is a push on the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#github-actions-testing"&gt;
  &lt;/a&gt;
  Github Actions (Testing)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub actions&lt;/a&gt;  are one of the greatest features of Github. it helps you build, test or deploy your application and more.&lt;/p&gt;

&lt;p&gt;Here, we'll create a YAML file named &lt;code&gt;main.yml&lt;/code&gt; to run some React tests.&lt;/p&gt;

&lt;p&gt;In the root project, create a directory named &lt;code&gt;.github&lt;/code&gt;. Inside that directory, create another directory named &lt;code&gt;workflows&lt;/code&gt; and create the &lt;code&gt;main.yml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;React Testing and Deploying&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Tests&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-20.04&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Installing dependencies&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn install&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Running Test&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, what we are doing here is setting rules for the  &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;GitHub action workflow&lt;/a&gt;, installing dependencies, and running the tests.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure that this workflow is triggered only when there is a push or pull_request on the main branch&lt;/li&gt;
&lt;li&gt;Choose &lt;code&gt;ubuntu-latest&lt;/code&gt; as the OS and precise the Python version on which this workflow will run.&lt;/li&gt;
&lt;li&gt;After that as we install the javascript dependencies and just run the tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you push the code in your repository, you'll see something similar when you go to your repository page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--heoHoZxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632067813753/GL9hdNsSnw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--heoHoZxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632067813753/GL9hdNsSnw.png" alt="React Actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a moment, the yellow colors will turn to green, meaning that the checks have successfully completed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-aws-server"&gt;
  &lt;/a&gt;
  Setting up the AWS server
&lt;/h2&gt;

&lt;p&gt;I'll be using a  &lt;a href="https://aws.amazon.com/lightsail/"&gt;Lightsail server&lt;/a&gt; here. Note that these configurations can work with any VPS provider.&lt;/p&gt;

&lt;p&gt;If you want to set up a Lightsail instance, refer to the AWS  &lt;a href="https://aws.amazon.com/lightsail/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Personally, I am my VPS is running on Ubuntu 20.04.3 LTS.&lt;/p&gt;

&lt;p&gt;Also, you'll need  &lt;a href="https://docs.docker.com/engine/install/ubuntu/"&gt;Docker&lt;/a&gt;  and  &lt;a href="https://docs.docker.com/compose/install/"&gt;docker-compose&lt;/a&gt; installed on the machine.&lt;/p&gt;

&lt;p&gt;After that, if you want to link your server to a domain name, make sure to add it to your DNS configuration panel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x5-hBF2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632067667301/RQ8g_AVrR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x5-hBF2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632067667301/RQ8g_AVrR.png" alt="DNS Configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you are done, we can start working on the deployment process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#docker-build-script"&gt;
  &lt;/a&gt;
  Docker build script
&lt;/h3&gt;

&lt;p&gt;To automate things here, we'll write a bash script to pull changes from the repo and also build the docker image and run the containers.&lt;/p&gt;

&lt;p&gt;We'll also be checking if there are any coming changes before pulling and re-building the containers again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nv"&gt;TARGET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'main'&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt; ~/app &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit

&lt;/span&gt;&lt;span class="nv"&gt;ACTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\033[1;90m'&lt;/span&gt;
&lt;span class="nv"&gt;NOCOLOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\033[0m'&lt;/span&gt;

&lt;span class="c"&gt;# Checking if we are on the main branch&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ACTION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;Checking Git repo
&lt;span class="nv"&gt;BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;git rev-parse &lt;span class="nt"&gt;--abbrev-ref&lt;/span&gt; HEAD&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$BRANCH&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TARGET&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# Checking if the repository is up to date.&lt;/span&gt;

git fetch
&lt;span class="nv"&gt;HEADHASH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;git rev-parse HEAD&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;UPSTREAMHASH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;git rev-parse &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TARGET&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;@&lt;span class="o"&gt;{&lt;/span&gt;upstream&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HEADHASH&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$UPSTREAMHASH&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FINISHED&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;Current branch is up to &lt;span class="nb"&gt;date &lt;/span&gt;with origin/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TARGET&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NOCOLOR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# If that's not the case, we pull the latest changes and we build a new image&lt;/span&gt;

git pull origin main&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;# Docker&lt;/span&gt;

docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; docker-compose.prod.yml up &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--build&lt;/span&gt;

&lt;span class="nb"&gt;exit &lt;/span&gt;0&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Good! Login on your server using SSH. We'll be creating some new directories: one for the repo and another one for our scripts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir app .scripts
cd .scripts
vim docker-deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And just paste the content of the precedent script and modify it if necessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/app
git clone &amp;lt;your_repository&amp;gt; .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to add the dot &lt;code&gt;.&lt;/code&gt;. Using this, it will simply clone the content of the repository in the current directory.&lt;/p&gt;

&lt;p&gt;Great! Now we need to write the &lt;code&gt;docker-compose.prod.yml&lt;/code&gt; file which will be run on this server.&lt;/p&gt;

&lt;p&gt;We'll be adding an SSL certificate, by the way, so we need to create another &lt;code&gt;nginx.conf&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Here's the &lt;code&gt;docker-compose.prod.yml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.7"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;nginx&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;core_web&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;on-failure&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;jonasal/nginx-certbot:latest&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.env.nginx&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;nginx_secrets:/etc/letsencrypt&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./nginx/user_conf.d:/etc/nginx/user_conf.d&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;80:80"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;443:443"&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;web&lt;/span&gt;

  &lt;span class="na"&gt;web&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;react_app&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;on-failure&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile.prod&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./src:/app/src&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;5000:5000"&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="s"&gt;sh -c "yarn build &amp;amp;&amp;amp; serve -s build"&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;

&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;nginx_secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you noticed, we've changed the &lt;code&gt;nginx&lt;/code&gt; service. Now, we are using the &lt;code&gt;docker-nginx-certbot&lt;/code&gt; image. It'll automatically create and renew SSL certificates using the  &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; free CA (Certificate authority) and its client &lt;code&gt;certbot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And our React server is running the build app. Using &lt;code&gt;yarn build&lt;/code&gt;, it'll create a production optimized app which we'll serve.&lt;/p&gt;

&lt;p&gt;And finally, we'll add the &lt;code&gt;Dockerfile.prod&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14-alpine AS builder&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json ./&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; yarn.lock ./&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--frozen-lockfile&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new directory &lt;code&gt;user_conf.d&lt;/code&gt; inside the &lt;code&gt;nginx&lt;/code&gt; directory and create a new file &lt;code&gt;nginx.conf&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="n"&gt;upstream&lt;/span&gt; &lt;span class="n"&gt;webapp&lt;/span&gt; {
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;react_app&lt;/span&gt;:&lt;span class="m"&gt;5000&lt;/span&gt;;
}

&lt;span class="n"&gt;server&lt;/span&gt; {

    &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt; &lt;span class="n"&gt;default_server&lt;/span&gt; &lt;span class="n"&gt;reuseport&lt;/span&gt;;
    &lt;span class="n"&gt;listen&lt;/span&gt; [::]:&lt;span class="m"&gt;443&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt; &lt;span class="n"&gt;default_server&lt;/span&gt; &lt;span class="n"&gt;reuseport&lt;/span&gt;;
    &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="n"&gt;dockerawsreact&lt;/span&gt;.&lt;span class="n"&gt;koladev&lt;/span&gt;.&lt;span class="n"&gt;xyz&lt;/span&gt;;
    &lt;span class="n"&gt;server_tokens&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;;
    &lt;span class="n"&gt;client_max_body_size&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;;


    &lt;span class="n"&gt;ssl_certificate&lt;/span&gt; /&lt;span class="n"&gt;etc&lt;/span&gt;/&lt;span class="n"&gt;letsencrypt&lt;/span&gt;/&lt;span class="n"&gt;live&lt;/span&gt;/&lt;span class="n"&gt;dockerawsreact&lt;/span&gt;.&lt;span class="n"&gt;koladev&lt;/span&gt;.&lt;span class="n"&gt;xyz&lt;/span&gt;/&lt;span class="n"&gt;fullchain&lt;/span&gt;.&lt;span class="n"&gt;pem&lt;/span&gt;;
    &lt;span class="n"&gt;ssl_certificate_key&lt;/span&gt; /&lt;span class="n"&gt;etc&lt;/span&gt;/&lt;span class="n"&gt;letsencrypt&lt;/span&gt;/&lt;span class="n"&gt;live&lt;/span&gt;/&lt;span class="n"&gt;dockerawsreact&lt;/span&gt;.&lt;span class="n"&gt;koladev&lt;/span&gt;.&lt;span class="n"&gt;xyz&lt;/span&gt;/&lt;span class="n"&gt;privkey&lt;/span&gt;.&lt;span class="n"&gt;pem&lt;/span&gt;;
    &lt;span class="n"&gt;ssl_trusted_certificate&lt;/span&gt; /&lt;span class="n"&gt;etc&lt;/span&gt;/&lt;span class="n"&gt;letsencrypt&lt;/span&gt;/&lt;span class="n"&gt;live&lt;/span&gt;/&lt;span class="n"&gt;dockerawsreact&lt;/span&gt;.&lt;span class="n"&gt;koladev&lt;/span&gt;.&lt;span class="n"&gt;xyz&lt;/span&gt;/&lt;span class="n"&gt;chain&lt;/span&gt;.&lt;span class="n"&gt;pem&lt;/span&gt;;
    &lt;span class="n"&gt;ssl_dhparam&lt;/span&gt; /&lt;span class="n"&gt;etc&lt;/span&gt;/&lt;span class="n"&gt;letsencrypt&lt;/span&gt;/&lt;span class="n"&gt;dhparams&lt;/span&gt;/&lt;span class="n"&gt;dhparam&lt;/span&gt;.&lt;span class="n"&gt;pem&lt;/span&gt;;

    &lt;span class="n"&gt;location&lt;/span&gt; / {
        &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;://&lt;span class="n"&gt;webapp&lt;/span&gt;;
        &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;-&lt;span class="n"&gt;Forwarded&lt;/span&gt;-&lt;span class="n"&gt;For&lt;/span&gt; $&lt;span class="n"&gt;proxy_add_x_forwarded_for&lt;/span&gt;;
        &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;Host&lt;/span&gt; $&lt;span class="n"&gt;host&lt;/span&gt;;
        &lt;span class="n"&gt;proxy_redirect&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Make sure to replace &lt;code&gt;dockerawsreact.koladev.xyz&lt;/code&gt; with your own domain name...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And no troubles! I'll explain what I've done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="n"&gt;server&lt;/span&gt; {
    &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt; &lt;span class="n"&gt;default_server&lt;/span&gt; &lt;span class="n"&gt;reuseport&lt;/span&gt;;
    &lt;span class="n"&gt;listen&lt;/span&gt; [::]:&lt;span class="m"&gt;443&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt; &lt;span class="n"&gt;default_server&lt;/span&gt; &lt;span class="n"&gt;reuseport&lt;/span&gt;;
    &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="n"&gt;dockerawsreact&lt;/span&gt;.&lt;span class="n"&gt;koladev&lt;/span&gt;.&lt;span class="n"&gt;xyz&lt;/span&gt;;
    &lt;span class="n"&gt;server_tokens&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;;
    &lt;span class="n"&gt;client_max_body_size&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So as usual, we are listening on port &lt;code&gt;443&lt;/code&gt; for &lt;strong&gt;HTTPS&lt;/strong&gt;.&lt;br&gt;
We've added a &lt;code&gt;server_name&lt;/code&gt; which is the domain name. We set the &lt;code&gt;server_tokens&lt;/code&gt; to off to not show the server version on error pages.&lt;br&gt;
And the last thing, we set the request size to a &lt;strong&gt;max of 20MB&lt;/strong&gt;. It means that requests larger than 20MB will result in errors with &lt;strong&gt;HTTP 413&lt;/strong&gt; (Request Entity Too Large).&lt;/p&gt;

&lt;p&gt;Now, let's write the job for deployment in the Github Action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploying&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-20.04&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SSH &amp;amp; Deploy&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;appleboy/ssh-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.SSH_AWS_SERVER_IP }}&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.SSH_SERVER_USER }}&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.SSH_PRIVATE_KEY }}&lt;/span&gt;
          &lt;span class="na"&gt;passphrase&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.SSH_PASSPHRASE }}&lt;/span&gt;
          &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;cd ~/.scripts&lt;/span&gt;
            &lt;span class="s"&gt;./docker-deploy.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the usage of Github Secrets here. It allows the storage of sensitive information in your repository. Check this  &lt;a href="https://docs.github.com/en/actions/reference/encrypted-secrets"&gt;documentation&lt;/a&gt;  for more information.&lt;/p&gt;

&lt;p&gt;We also using here a GitHub action that requires the name of the host, the username, the key, and the passphrase. You can also use this action with a password but it'll require some configurations.&lt;br&gt;
Feel free to check the  &lt;a href="https://github.com/appleboy/ssh-action#setting-up-a-ssh-key"&gt;documentation&lt;/a&gt;  of this action for more detail.&lt;/p&gt;

&lt;p&gt;Also, notice the &lt;code&gt;needs: [build]&lt;/code&gt; line. It helps us make sure that the precedent job is successful before deploying the new version of the app.&lt;/p&gt;

&lt;p&gt;Once it's done, log via ssh in your server and create a .env file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;app/
vim .env &lt;span class="c"&gt;# or nano or whatever&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, create a &lt;code&gt;.env.nginx&lt;/code&gt; file. This will contain the required configurations to create an SSL certificate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Required&lt;/span&gt;
&lt;span class="nv"&gt;CERTBOT_EMAIL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="c"&gt;# Optional (Defaults)&lt;/span&gt;
&lt;span class="nv"&gt;STAGING&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nv"&gt;DHPARAM_SIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2048
&lt;span class="nv"&gt;RSA_KEY_SIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2048
&lt;span class="nv"&gt;ELLIPTIC_CURVE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;secp256r1
&lt;span class="nv"&gt;USE_ECDSA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="nv"&gt;RENEWAL_INTERVAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;8d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add your email address. Notice here that &lt;code&gt;STAGING&lt;/code&gt; is set to 1. We will test the configuration first with &lt;strong&gt;Let‚Äôs encrypt&lt;/strong&gt; staging environment! It is important to not set staging=0 before you are 100% sure that your configuration is correct.&lt;/p&gt;

&lt;p&gt;This is because there is a limited number of retries to issue the certificate and you don‚Äôt want to wait till they are reset (once a week).&lt;/p&gt;

&lt;p&gt;Declare the environment variables your project will need.&lt;/p&gt;

&lt;p&gt;And we're nearly done. :)&lt;/p&gt;

&lt;p&gt;Make a push to the repository and just wait for the actions to pass successfully.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FzlymMT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632067395454/v9LBmI9N-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FzlymMT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632067395454/v9LBmI9N-.png" alt="Deployment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And voil√†. We're done with the configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Ay9ueaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632067064738/3YXvQ57hA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Ay9ueaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632067064738/3YXvQ57hA.png" alt="HTTP Expired."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if your browser shows an error like this, the configuration is clean! We can issue a production-ready certificate now.&lt;br&gt;
On your server, stop the containers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose down -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;edit your &lt;code&gt;.env.nginx&lt;/code&gt; file and set &lt;code&gt;STAGING=0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, start the containers again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo docker-compose up -d --build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we're done. :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article,  we've learned how to use Github Actions to deploy a dockerized React application on an AWS Lightsail server. Note that you can use these steps on any VPS.&lt;/p&gt;

&lt;p&gt;And as every article can be made better so your suggestion or questions are welcome in the comment section. üòâ&lt;/p&gt;

&lt;p&gt;Check the code of this tutorial  &lt;a href="https://github.com/koladev32/react-aws-docker-github-actions"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>aws</category>
      <category>docker</category>
    </item>
    <item>
      <title>How to use JsDoc annotations with VsCode for intellisense üë®‚Äçüíªüòé</title>
      <author>Suman Sarkar</author>
      <pubDate>Sun, 19 Sep 2021 16:08:54 +0000</pubDate>
      <link>https://dev.to/sumansarkar/how-to-use-jsdoc-annotations-with-vscode-for-intellisense-7co</link>
      <guid>https://dev.to/sumansarkar/how-to-use-jsdoc-annotations-with-vscode-for-intellisense-7co</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem ü§¶‚Äç‚ôÇÔ∏è
&lt;/h3&gt;

&lt;p&gt;For many of us JavaScript devs, we love the fact that TypeScript exists. It has type hinting, type checking, helps with intellisense and many more. As a JavaScript developer you can start using TypeScript right now. But there is a catch that you cannot use TS in your favourite project without re-writing it and making it compatible for TS. But what if you want these goddies without going through the struggle of re-writing your entire application?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution üë®
&lt;/h3&gt;

&lt;p&gt;We can utilise JsDoc with VSCode to get all these feature without going through the hassle. For those of you who are not familiar with JsDoc and VsCode, JsDoc is an API documentation generator for JavaScript and VSCode or Visual Studio Code is microsoft's lighter version of it's legendary IDE Visual Studio. VSCode has excellent support for many programming languages and if you do not like using products that are managed by Microsoft then you will be happy to realise that VSCode is open source but if you still do not want any customisation made by Microsoft then you can use Code OSS&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started-already"&gt;
  &lt;/a&gt;
  Let's get started already üíÅ‚Äç‚ôÇÔ∏è
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;a class="mentioned-user" href="https://dev.to/param"&gt;@param&lt;/a&gt;
&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Now, Lets write it using JSDoc specs&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--42RXU-VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thalava.com/uploads/1630747772.gif" alt="thalava.com - Sum of array with JSDoc"&gt;&lt;br&gt;
Excelente! üëç You have typehinting in VSCode with the help of JsDoc. 

&lt;p&gt;&lt;strong&gt;@typedef&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, lets write another example with custom data types. Here we'll work with moment JS&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Here, we are using @typedef to define custom type definations, in this case type Moment which is provided in the "moment" library and using it in the @param annotation to get type hinting. Notice when I type startDate, it suggest methods coming with a moment object.&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nux9b9Qj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thalava.com/uploads/1630755623.gif" alt="thalava.com - Custom type defination using @typedef"&gt;

&lt;h3&gt;
  &lt;a href="#how-do-i-create-a-custom-type"&gt;
  &lt;/a&gt;
  How do I create a custom type? ü§∑‚Äç‚ôÇÔ∏è
&lt;/h3&gt;

&lt;p&gt;Its easy, you just have to know a little bit of TypeScript. Let me show you the directory structure.. It looks like this&lt;/p&gt;

&lt;p&gt;src&lt;br&gt;
 ‚î£ controllers&lt;br&gt;
 ‚îÉ ‚îó post.controller.js&lt;br&gt;
 ‚îó models&lt;br&gt;
 ‚îÉ ‚î£ post.model.d.ts&lt;br&gt;
 ‚îÉ ‚îó post.model.js&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
The controller method is utilising PostModel and PostDocument type definations and suggesting the properties that are available.&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r0_zanS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thalava.com/uploads/1630757699.gif" alt="thalava.com - Making custom types @typedef"&gt;&lt;br&gt;
The interfaces defined in post.model.d.ts defines your types and helps with suggestions. This is very useful because in mongoose static methods and schema properties does not appear normally in suggesions. So from now on you can import any type in your project and utilise it's definations.

&lt;p&gt;Note: In the example of moment js we saw that type definations were provided in the library itself but in case if it is not then chances are you will find the type definations in the npm repository. For example you can install type definations for the bcrypt library on @types/bcrypt&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enforcing-correct-types"&gt;
  &lt;/a&gt;
  Enforcing correct types üôÖ‚Äç‚ôÇÔ∏è
&lt;/h3&gt;

&lt;p&gt;In the moment JS example we passed 2 argument to getDiff function. How do we make sure that when executing this function we only pass 2 moment js object and not anything else. Well, there are 2 ways&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tscheck"&gt;
  &lt;/a&gt;
  &lt;em&gt;@ts-check&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;@ts-check enables errors in your JavaScript files. In order to use it in a JavaScript file, you need to add it at the top of the file.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--10-6VgyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thalava.com/uploads/1630759304.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--10-6VgyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thalava.com/uploads/1630759304.png" alt="thalava.com - @ts-check"&gt;&lt;/a&gt;&lt;br&gt;
Notice how on line #17 VSCode is complaining that the type of the first argument passed is not correct.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vscode-implicit-project-config-%E2%9A%99"&gt;
  &lt;/a&gt;
  VSCode Implicit Project Config ‚öô
&lt;/h3&gt;

&lt;p&gt;You can enable this globally as well in your JS project by toggling &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"js/ts.implicitProjectConfig.checkJs": true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is it, now you can utilise JSDoc and VSCode together for type hinting. Thanks for reading tutorial. We are hoping to update more tutorials like these very soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tools-used-in-this-tutorial"&gt;
  &lt;/a&gt;
  Tools used in this tutorial
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Visual Studio Code (IDE)&lt;/li&gt;
&lt;li&gt;JsDoc (API documentation generator)&lt;/li&gt;
&lt;li&gt;Peek (Screen recorder)&lt;/li&gt;
&lt;li&gt;VSCode theme - GitHub Dark Default&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#from-author"&gt;
  &lt;/a&gt;
  From author
&lt;/h3&gt;

&lt;p&gt;Before you leave, I just want to thank you for reading this article üñ§. Me and my friend started working on our own blog &lt;a href="//thalava.com"&gt;thalava.com&lt;/a&gt;&lt;br&gt;
Please visit our blog for more tutorials. We are excited to share more tutorials.&lt;br&gt;
Thanks again, love from &lt;a href="//thalava.com"&gt;thalava.com&lt;/a&gt; üñ§&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>jsdoc</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Popup Login Form Design using only HTML &amp; CSS</title>
      <author>Shantanu Jana</author>
      <pubDate>Sun, 19 Sep 2021 16:01:58 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/popup-login-form-design-using-only-html-css-1m2f</link>
      <guid>https://dev.to/shantanu_jana/popup-login-form-design-using-only-html-css-1m2f</guid>
      <description>&lt;p&gt;In this article, I am going to show you how to create a pop-up login form using HTML and CSS. You must have seen different types of websites or applications pop-ups or modal boxes. Which undoubtedly increases the quality of the website a lot.&lt;/p&gt;

&lt;p&gt;The popup login form is a modern design login page. It is hidden under normal conditions. A button or link can be found on the webpage. When we click on that link, we will see the full form.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://www.foolishdeveloper.com/2021/09/how-to-create-popup-login-form-using.html"&gt;watch the live demo&lt;/a&gt; to see how it works. Now it's time to learn from the complete tutorial how I designed this popup login form with the help of HTML and CSS. Before sharing this tutorial, I would like to say something about this design.&lt;/p&gt;

&lt;p&gt;I made this design with the help of Neumorphism. Under normal circumstances, we will see a small button on the homepage. When you click on that button, you will see the complete login form. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-design-the-web-page"&gt;
  &lt;/a&gt;
  Step 1: Design the web page
&lt;/h3&gt;

&lt;p&gt;I designed the web page using this small amount of CSS code below. Here I used the background color of the web page &lt;code&gt;# dde1e7&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dde1e7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zdSA-04c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc0qkub60o6316j9vuql.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zdSA-04c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc0qkub60o6316j9vuql.jpg" alt="Design the web page"&gt;&lt;/a&gt;&lt;br&gt;
I added the login form and the popup button between the div below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

   &lt;span class="c"&gt;&amp;lt;!-- Home page button --&amp;gt;&lt;/span&gt;


   &lt;span class="c"&gt;&amp;lt;!-- Popup login form --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-create-a-popup-button-on-the-web-page"&gt;
  &lt;/a&gt;
  Step 2: Create a popup button on the web page
&lt;/h3&gt;

&lt;p&gt;I have created a button on the homepage using the HTML and CSS code below. As I said before, you can see only one button on the homepage.&lt;/p&gt;

&lt;p&gt;Now the following codes have helped to create and design it. I used the button &lt;code&gt;160px width&lt;/code&gt; and &lt;code&gt;50px height&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"click"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"click"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"click-me"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Login Form&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#click&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.click-me&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;160px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dde1e7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;22px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="m"&gt;#fffdfd&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;94&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;121&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.342&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bX3sd_R3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-R8cPEqPym-o/YUYzMXBhH4I/AAAAAAAABoY/pvgAkoFGtiIhvsFk4Mhk74DpXc0G2t4qQCLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bX3sd_R3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-R8cPEqPym-o/YUYzMXBhH4I/AAAAAAAABoY/pvgAkoFGtiIhvsFk4Mhk74DpXc0G2t4qQCLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529.jpg" alt="Create a popup button on the web page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I have added the hover effect. When you click on that button, you will see some changes here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.click-me&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
     &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#08adef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#babecc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#ffffff73&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DXu2MxFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-TTBOCnvRKK0/YUYzVDlplNI/AAAAAAAABoc/mGac6_oat_wPGrMywqpEM9pN7FOzOXg4QCLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529%252B%2525282%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXu2MxFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-TTBOCnvRKK0/YUYzVDlplNI/AAAAAAAABoc/mGac6_oat_wPGrMywqpEM9pN7FOzOXg4QCLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529%252B%2525282%252529.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-create-the-basic-structure-of-the-login-form"&gt;
  &lt;/a&gt;
  Step 3: Create the basic structure of the login form
&lt;/h3&gt;

&lt;p&gt;Now I have created a popup box in which I will add all the information of the login form.&lt;/p&gt;

&lt;p&gt;I have used &lt;code&gt;opacity: 0&lt;/code&gt; in the CSS code. opacity: 0 will help to keep this form completely hidden under normal circumstances. &lt;/p&gt;

&lt;p&gt;The length of this box is 330 px and I have used Height Auto. Here too I have used the background color white.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;330px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dde1e7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-6px&lt;/span&gt; &lt;span class="m"&gt;-6px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have implemented this pop-up. Above we have used opacity Zero which means it will not be seen. Now I have used &lt;code&gt;opacity 1&lt;/code&gt;which means this login form will appear when you click on the home page button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#click&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R9rmRTGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-2M9wY6qqB3Q/YUYz5BjdJxI/AAAAAAAABoo/rmo96izKQRMesJFeoWHavypsaYsOl_FnQCLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529%252B%2525283%252529%252B%2525281%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9rmRTGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-2M9wY6qqB3Q/YUYz5BjdJxI/AAAAAAAABoo/rmo96izKQRMesJFeoWHavypsaYsOl_FnQCLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529%252B%2525283%252529%252B%2525281%252529.jpg" alt="Create the basic structure of the login form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-add-titles-to-the-login-form"&gt;
  &lt;/a&gt;
  Step 4: Add titles to the login form
&lt;/h3&gt;

&lt;p&gt;Now I have added a title using these codes. I have used &lt;code&gt;font size 30 px&lt;/code&gt; and &lt;code&gt;font-weight: 600&lt;/code&gt; to increase the size of this title.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; LOGIN &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CLnMjKEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-S9ZStVAiYs4/YUY0B7o23gI/AAAAAAAABos/z7ncSqcpmLMSZVfOACFeGOJd7Kr1yKzHACLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529%252B%2525283%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CLnMjKEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-S9ZStVAiYs4/YUY0B7o23gI/AAAAAAAABos/z7ncSqcpmLMSZVfOACFeGOJd7Kr1yKzHACLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529%252B%2525283%252529.jpg" alt="Add titles to the login form "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-create-a-cancel-button"&gt;
  &lt;/a&gt;
  Step 5: Create a cancel button
&lt;/h3&gt;

&lt;p&gt;Now it's time to create a cancel button that will help you hide the login form again. &lt;/p&gt;

&lt;p&gt;This button is along the right side of the login form. Its position uses absolute to position it in a certain place.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"click"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"times"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;x&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#times&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dde1e7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;11px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;11px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="m"&gt;#fffdfd&lt;/span&gt;&lt;span class="n"&gt;b7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;94&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;121&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.24&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jlgswzBP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-JMNFnJbTuJU/YUY0K6NhipI/AAAAAAAABow/y7yVDk5Q0qACG6HelcFfFLZjbDLbUwO7gCLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529%252B%2525284%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jlgswzBP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-JMNFnJbTuJU/YUY0K6NhipI/AAAAAAAABow/y7yVDk5Q0qACG6HelcFfFLZjbDLbUwO7gCLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529%252B%2525284%252529.jpg" alt="Create a cancel button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-create-a-place-to-input-emails-and-passwords"&gt;
  &lt;/a&gt;
  Step 6: Create a place to input emails and passwords
&lt;/h3&gt;

&lt;p&gt;Now we have created a place to input using the following HTML and CSS code. I used levels with each input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Username&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email or Phone"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have designed the levels with the help of CSS below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have designed the input spaces using these codes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;43px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.07&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#babecc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#ffffff73&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nd"&gt;::placeholder&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#4b4e4d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kjsumRsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-WfocvKApOQQ/YUY0ean6_dI/AAAAAAAABo8/UsRY2R7VBxwFrxIAKYn7VLOYXoPVn70yQCLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529%252B%2525285%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kjsumRsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-WfocvKApOQQ/YUY0ean6_dI/AAAAAAAABo8/UsRY2R7VBxwFrxIAKYn7VLOYXoPVn70yQCLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529%252B%2525285%252529.jpg" alt="Create a place to input emails and passwords"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-create-a-login-button-in-the-popup-login-form"&gt;
  &lt;/a&gt;
  Step 7: Create a login button in the popup login form
&lt;/h3&gt;

&lt;p&gt;Now I have added a login button in this login form. I used &lt;code&gt;padding 12 px&lt;/code&gt; to determine the size of this login button. I used margin-top to keep the button slightly down from the top.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Log In&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dde1e7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;17px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="m"&gt;#fffdfd&lt;/span&gt;&lt;span class="n"&gt;b7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;94&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;121&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.388&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="n"&gt;b0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;94&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;121&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.692&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I-9wM8iG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-czDKtIe6CDs/YUY0qQv1Z3I/AAAAAAAABpA/5BuSuvxPjHkcCaDM2x0zwLgav6nQvUZAwCLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529%252B%2525286%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I-9wM8iG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-czDKtIe6CDs/YUY0qQv1Z3I/AAAAAAAABpA/5BuSuvxPjHkcCaDM2x0zwLgav6nQvUZAwCLcBGAsYHQ/s16000/Screenshot%252B%252528630%252529%252B%2525286%252529.jpg" alt="Create a login button in the popup login form"&gt;&lt;/a&gt;&lt;br&gt;
This is the easiest way to create a modal login form. Hope you learned from this tutorial how I created this pop-up login form using HTML and CSS only.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this.&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>uEye | A Game We Built to Help you Learn UI Design</title>
      <author>designcourse</author>
      <pubDate>Sun, 19 Sep 2021 15:54:37 +0000</pubDate>
      <link>https://dev.to/designcourse/ueye-a-game-we-built-to-help-you-learn-ui-design-4di</link>
      <guid>https://dev.to/designcourse/ueye-a-game-we-built-to-help-you-learn-ui-design-4di</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-ueye"&gt;
  &lt;/a&gt;
  What is uEye
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://designcourse.com/app/course/ueye"&gt;Play uEye&lt;/a&gt; (No signups or emails required!)&lt;/p&gt;

&lt;p&gt;I wanted to create a fun, interactive game using modern technology (Nuxt.js) that helps users to develop an eye for design. So, I came up with this idea where users must identify which UI design fundamentals have been incorrectly applied to an example design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PLrbO4BF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6g5xgwwkph12qeqlwqfg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PLrbO4BF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6g5xgwwkph12qeqlwqfg.gif" alt="uEye"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each correct fundamental you get right, you gain a point. If you choose a fundamental that hasn't been incorrectly applied, you lose a point. &lt;/p&gt;

&lt;p&gt;So, yes -- you can end up with a NEGATIVE SCORE! There are a total of 28 possible points you can get if you answer everything correctly. The highest score I've heard of so far is around 18. &lt;/p&gt;

&lt;p&gt;I urge you to take the game before watching this, but I released a video where I play the game and explain all of the UI concepts behind each challenge:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/d5aGKVnvpZU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Post your scores below!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The most repeated questions I met with on job interviews (part 1)</title>
      <author>Jakub Smetanka</author>
      <pubDate>Sun, 19 Sep 2021 15:17:31 +0000</pubDate>
      <link>https://dev.to/smetankajakub/repeated-questions-i-met-with-on-job-interviews-part-1-3p2e</link>
      <guid>https://dev.to/smetankajakub/repeated-questions-i-met-with-on-job-interviews-part-1-3p2e</guid>
      <description>&lt;p&gt;A wiseman once said : "If you can not explain it, you do not understand it". A few years ago, when I had searched for a job as a student I went through a lot of interviews. For web positions related to Javascript, there were some questions which repeat regularly. And it makes sense, to asked them also today.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#const-vs-let-vs-var"&gt;
  &lt;/a&gt;
  const vs let vs var
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;const&lt;/strong&gt; keyword create block scope variable and prevents its value to be reassigned by a new value. However, important thing is that it does not restrict to change the internal state of the object.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02ajx76T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nz8acbmfmw0k46rvi4fz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02ajx76T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nz8acbmfmw0k46rvi4fz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;let&lt;/strong&gt; is block-scope variable while &lt;strong&gt;var&lt;/strong&gt; is function-scope variable.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Uz9JRtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kvsmwfwk3en2u2wk9rv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Uz9JRtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kvsmwfwk3en2u2wk9rv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-vs-comparison"&gt;
  &lt;/a&gt;
  '===' vs '==' comparison
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;===&lt;/strong&gt; is strict comparison, it checks value and type of value as well, so 1 === "1" returns &lt;strong&gt;false&lt;/strong&gt;, the opposite of that is &lt;strong&gt;==&lt;/strong&gt; comaparison which checks only value so 1 == "1" returns &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-we-compare-two-objects-with-"&gt;
  &lt;/a&gt;
  Can we compare two objects with '===' ?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NO&lt;/strong&gt;. Object is reference type. Two distinct object never be equal even they have same property. That's why you will get false when you are using '===' comparison. In Javascript exist built-in function &lt;strong&gt;Object.is(value1, value2)&lt;/strong&gt; which returns true if objects are equals, otherwise it returns false.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;Eloquent Javascript&lt;br&gt;
&lt;a href="https://unsplash.com/photos/TFFn3BYLc5s?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;https://unsplash.com/photos/TFFn3BYLc5s?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>jobinterviews</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Resources to become a better Software Engineer</title>
      <author>Adarsh Menon</author>
      <pubDate>Sun, 19 Sep 2021 15:16:13 +0000</pubDate>
      <link>https://dev.to/adarsh_menon_/resources-to-become-a-better-software-engineer-23ji</link>
      <guid>https://dev.to/adarsh_menon_/resources-to-become-a-better-software-engineer-23ji</guid>
      <description>&lt;p&gt;There is so much information out there today, that it has become almost impossible to differentiate between signal and noise.&lt;/p&gt;

&lt;p&gt;Our brains are great at making connections - the quality of these connections depends upon the information we feed it. Garbage in, garbage out.&lt;/p&gt;

&lt;p&gt;So it is extremely important to consume quality information and learn from the best - not just for engineering, but for everything that you are trying to learn. In this post I am sharing a few resources that have helped me become a better engineer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A Philosophy of Software Design by John Ousterhout\&lt;br&gt;
This is one of my favourite books on software engineering. It talks about breaking down complexity in the context of software engineering - which is exactly what we do on a daily basis. It introduces quite a few concepts and patterns that can really help you avoid costly mistakes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Pragmatic Programmer by Andy Hunt and Dave Thomas\&lt;br&gt;
This is one of the most popular books on programming and can be considered as a guide for anyone who is starting out in the field. Like the name suggests, it talks about low level concepts that you can apply right away to improve your programming skills.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Head First Design Patterns by Elisabeth Freeman and Kathy Sierra\&lt;br&gt;
This is very useful if you are working with Java and explains when to use what pattern, with real world examples. Knowing these patterns and understanding when to apply them correctly can really help you become a better engineer and avoid costly mistakes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clean Code by Robert C. Martin\&lt;br&gt;
This is a classic book and helps you recognize the common mistakes everyone makes while programming and teaches you how to write clean code. Rather than the book I prefer¬†&lt;a href="https://www.youtube.com/playlist?list=PLdpsE-GEhYVn_81kDPo1mwE73UgYCeMLu"&gt;this youtube playlist&lt;/a&gt;¬†where the author himself talks about a lot of the concepts covered in the book.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#youtube-channels"&gt;
  &lt;/a&gt;
  YouTube Channels
&lt;/h2&gt;

&lt;p&gt;I think there are tons of good youtube channels to learn software engineering and programming from, but here are some of my favourites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/user/Computerphile"&gt;Computerphile&lt;/a&gt;¬†- this channel coverts topics in computer science and engineering like compilers, algorithms, cryptography, networks etc.. I love how every concept is explained by experts with detailed, easy to understand presentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/user/thenewboston"&gt;thenewboston&lt;/a&gt;¬†and¬†&lt;a href="https://www.youtube.com/c/derekbanas"&gt;Derek Banas&lt;/a&gt;¬†- both of these are amazing channels run by amazing people for people who are looking for tutorials to follow along and learn by doing. Both of them have tutorials on multiple languages and topics.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/c/sentdex"&gt;sentdex&lt;/a&gt;¬†- if you work with python, you have definitely watched a sentdex video at some point of time. One of the best channels for software engineers in my opinion because of the wide variety of topics covered, simplicity and detailed explanations. Lots of great series on machine learning, data science, deep learning, self driving cars, NLP, robotics and many more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/c/TraversyMedia"&gt;Traversy Media&lt;/a&gt;¬†and¬†&lt;a href="https://www.youtube.com/c/WebDevSimplified"&gt;Web Dev Simplified&lt;/a&gt;¬†- if you are interested in web development, then both of these channels can be great resources to learn about web development concepts and some beginner friendly projects to follow along. Traversy Media has a crash course on almost every framework or library available for web development.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/c/GauravSensei"&gt;Gaurav Sen&lt;/a&gt;¬†and¬†&lt;a href="https://www.youtube.com/c/TechDummiesNarendraL"&gt;Tech Dummies Narendra L&lt;/a&gt;¬†- both of these are great channels to learn about system design and architecture patterns. They have detailed videos on how to design popular applications with great explanations on the concepts used and why they are important.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ"&gt;freeCodeCamp.org&lt;/a&gt;¬†- this is a great channel for almost every tool and subject in software engineering with detailed tutorials from various people. Some of the videos are really long, so I recommend watching only parts that you need.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/c/TheChernoProject"&gt;The Cherno&lt;/a&gt;¬†- if you are someone who is interested in game development, then you definitely need to check out this channel. There are tons of videos on C++ and even an on going series about the guy building his own game engine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/c/HusseinNasser-software-engineering"&gt;Hussein Nasser&lt;/a&gt;¬†- a great channel especially if you are interested in backend engineering. Hussein talks in detail about concepts, tools and even has tutorials that can help you become a better engineer.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;These are only some resources which I found useful with good signal to noise ratio. I have only included books and youtube channels here keeping a beginner engineer in mind. But there are tons of websites, podcasts, courses, newsletters and github repos out there with great information on software engineering.&lt;/p&gt;

&lt;p&gt;I think the the core skill for all of us to master is the ability to differentiate signal and noise. It can help us look into the right places, consume the right content from the right people - eventually leading to better connections and ideas.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>engineering</category>
    </item>
    <item>
      <title>What Happens in Google Summer of Code Final Evaluations</title>
      <author>Rohan Lekhwani</author>
      <pubDate>Sun, 19 Sep 2021 14:22:20 +0000</pubDate>
      <link>https://dev.to/rohanlekhwani/what-happens-in-google-summer-of-code-final-evaluations-g9p</link>
      <guid>https://dev.to/rohanlekhwani/what-happens-in-google-summer-of-code-final-evaluations-g9p</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The final fence to jump before being called a GSoCer. Aiming to be called one? Read on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the past 3 months I have been working on the &lt;strong&gt;&lt;a href="https://summerofcode.withgoogle.com/projects/#6521788818784256"&gt;Poll App Mega Extensions&lt;/a&gt;&lt;/strong&gt; project at &lt;strong&gt;&lt;a href="https://rocket.chat/"&gt;Rocket.Chat&lt;/a&gt;&lt;/strong&gt; as a part of Google Summer of Code. I had successfully passed my &lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/gsoc-first-evaluations-all-you-need-to-know-2pjf"&gt;First Evaluations&lt;/a&gt;&lt;/strong&gt; from my mentor Ramkumar KB.&lt;/p&gt;

&lt;p&gt;The final evaluations are more involved. Rocket.Chat has a ‚ÄúGSoC Tradition‚Äù of having students present their projects before the entire Rocket.Chat team, mentors and other GSoCers. I‚Äôll also be &lt;strong&gt;revealing my proposal (31 pages!)&lt;/strong&gt; at the end of this blog post. Finally, I‚Äôll touch upon the future work required within the Poll App in case you‚Äôre a GSoC aspirant and want to work on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gsoc-final-evaluations"&gt;
  &lt;/a&gt;
  GSoC Final Evaluations
&lt;/h2&gt;

&lt;p&gt;The first thing GSoC Final evaluations form will ask you is to provide a work product link. This can be either in the form of a GitHub Gist, a repository or a blog post. In all it should summarize your work done, PRs and issues opened, merged or closed and your experience within the 3 months of GSoC.&lt;/p&gt;

&lt;p&gt;Here‚Äôs the link to my report ‚Äî &lt;strong&gt;&lt;a href="https://github.com/RonLek/Google-Summer-of-Code"&gt;Rohan Lekhwani | GSoC Report&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The next section within the evaluation form is about your GSoC experience. This involves questions like ‚Äúwere you able to meet all your goals‚Äù, your favorite and most challenging parts about GSoC, number of hours dedicated. The data here is probably used by Google to evaluate the popularity and areas of improvement within their program.&lt;/p&gt;

&lt;p&gt;The organization section includes questions as a feedback to Google about the organization. I‚Äôm pretty sure Google uses this section to filter out organizations the next GSoC season from the ones who didn‚Äôt receive a good feedback.&lt;/p&gt;

&lt;p&gt;The following section is regarding your Growth which focuses whether GSoC helped you get a job or an internship, did it improve your programming skills, anything else you learned from your GSoC experience.&lt;/p&gt;

&lt;p&gt;The final section includes the ‚ÄúEverything Else‚Äù section. It forms a miscellaneous section asking you whether you‚Äôd like to be a mentor the next GSoC season, any feedback for your organization (your answer to this question will be shared with your organization), any advice for future GSoC aspirants and suggestions for future GSoCs.&lt;/p&gt;

&lt;p&gt;Both student and mentor evaluations questions can be found &lt;strong&gt;&lt;a href="https://developers.google.com/open-source/gsoc/help/evaluations#final"&gt;here&lt;/a&gt;&lt;/strong&gt;. The ones listed here were almost exactly worded as the ones mentioned in the evaluation form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rocketchats-gsoc-tradition"&gt;
  &lt;/a&gt;
  Rocket.Chat‚Äôs GSoC Tradition
&lt;/h2&gt;

&lt;p&gt;Rocket.Chat has maintained a streak of getting selected into GSoC &lt;strong&gt;since 2017&lt;/strong&gt; with &lt;strong&gt;7+ projects at the least&lt;/strong&gt;. This year Rocket.Chat broke records with their highest number of projects getting selected ‚Äî &lt;strong&gt;a whopping 12 projects!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In parallel with GSoC final evaluations, Rocket.Chat organizes an internal ‚ÄúDemo Presentation‚Äù for all students. These presentations are attended by almost the entire Rocket.Chat engineering team including the CEO Gabriel Engel and CTO Rodrigo Nascimento.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9OTbUjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hupi3xwxwwc00ferzjcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9OTbUjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hupi3xwxwwc00ferzjcu.png" alt="Isn‚Äôt visible but I‚Äôm wearing my Rocket.Chat tee üöÄ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was a real fun experience to showcase my work in front of the community. The only question everyone had on mind was ‚ÄúWhen will it be on the Marketplace?‚Äù (xD).&lt;/p&gt;

&lt;p&gt;The entire recording can be viewed at Rocket.Chat‚Äôs YouTube channel. Here‚Äôs the &lt;strong&gt;&lt;a href="https://youtu.be/3jSNDDECdDg"&gt;video link&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In case you‚Äôre interested in checking out the presentation, I‚Äôve made it publicly accessible &lt;strong&gt;&lt;a href="https://bit.ly/gsoc-presentation"&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-voila"&gt;
  &lt;/a&gt;
  And Voila!
&lt;/h2&gt;

&lt;p&gt;I was able to surpass my planned proposal by even including an additonal feature not mentioned earlier ‚Äî &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/13"&gt;Late Retrieval of Live Polls&lt;/a&gt;&lt;/strong&gt;. Result?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jV-_zltY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orp57p3a2xts78xqxymv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jV-_zltY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orp57p3a2xts78xqxymv.png" alt="Final evaluations passed! üçª"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google also mentioned since previous year a lot of students were requesting for a completion certificate, it‚Äôll be provisioning them along with a &lt;strong&gt;super secret link&lt;/strong&gt; to be on Google‚Äôs watchlist for opportunities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kykhpJRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzrfi22q1vlv2imv63ic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kykhpJRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzrfi22q1vlv2imv63ic.png" alt="I confer upon thee the title of a GSoCer üåû"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you‚Äôve been following along in this blog series, you would know I have been maintaining a &lt;strong&gt;&lt;a href="https://github.com/orgs/RocketChat/projects/40"&gt;GitHub Kanban board&lt;/a&gt;&lt;/strong&gt; for my project progress. Here‚Äôs how it looks now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-03xobD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mc2av6xy84vf0yi2vc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-03xobD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mc2av6xy84vf0yi2vc1.png" alt="All PRs merged üì©"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of PRs I ranked up by a position on the GSoC Contribution Leaderboard which Rocket.Chat maintains every year at &lt;strong&gt;&lt;a href="https://gsoc.rocket.chat/"&gt;gsoc.rocket.chat&lt;/a&gt;&lt;/strong&gt;. I‚Äôm ranked 4th of all the people who contributed. The board doesn‚Äôt include &lt;strong&gt;&lt;a href="https://github.com/RocketChat/RC4Github"&gt;RC4GitHub&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://github.com/RocketChat/RC4Community"&gt;RC4Community&lt;/a&gt;&lt;/strong&gt; repositories, which if accounted for rank me first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKHgaiU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urzmqpaz9p952425e0yp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKHgaiU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urzmqpaz9p952425e0yp.png" alt="Ranked 4th on the GSoC Contribution Leaderboard 4Ô∏è‚É£"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-work"&gt;
  &lt;/a&gt;
  Future Work
&lt;/h2&gt;

&lt;p&gt;It‚Äôs truly amazing to see all your PRs merged within the main codebase. We are currently on track to release &lt;strong&gt;Poll App 3.0.0&lt;/strong&gt; out to the world on Rocket.Chat‚Äôs Marketplace.&lt;/p&gt;

&lt;p&gt;I planned a lot of features as extra deliverables which can be seen in my proposal shared below. A super-important future work for a GSoC aspirant would be to expand the &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/11"&gt;additional Poll modes feature&lt;/a&gt;&lt;/strong&gt; into templates for Retro, Daily Standup, All Hands, etc. This is similar to what Polly offers.&lt;/p&gt;

&lt;p&gt;Another useful feature would be the poll summary feature allowing users to see their configurations before posting the Poll. This would result in a lesser number of incorrect and misconfigured polls created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9cgT6fqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehgalt8ww7xtoumpw098.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9cgT6fqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehgalt8ww7xtoumpw098.png" alt="Future Work: Poll Summaries üìÑ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#as-promised"&gt;
  &lt;/a&gt;
  As Promised
&lt;/h2&gt;

&lt;p&gt;GSoC aspirant? Here‚Äôs something for you.&lt;/p&gt;

&lt;p&gt;I wrote two proposals for GSoC one was 18 pages and the other one (which got selected) is 31 pages! Apart from that I also created Figma designs for both the projects shared below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://bit.ly/gsoc-proposal1"&gt;Poll App Mega Extensions Proposal Link&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://bit.ly/gsoc-proposal1-designs"&gt;Poll App Mega Extensions Figma Designs Link&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://bit.ly/gsoc-proposal2"&gt;Community Collaboration: Improvements Proposal Link&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://bit.ly/gsoc-proposal2-designs"&gt;Community Collaboration: Improvements Designs Link&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Planning to apply to the upcoming GSoC? Comment your questions/doubts or reach out to me.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hurray! This forms my final bi-weekly blog about my GSoC journey at Rocket.Chat. I‚Äôll be continuously writing about what I code and build, so if you haven‚Äôt yet ‚Äî hit that follow button on &lt;a href="https://dev.to/rohanlekhwani"&gt;DEV&lt;/a&gt; and &lt;a href="https://rohanlekhwani.medium.com/about"&gt;Medium&lt;/a&gt; üåü.&lt;/p&gt;

&lt;p&gt;My previous blog in this sereis was about &lt;strong&gt;GSoC Coding Phase 2&lt;/strong&gt;, go check it out now ‚Äî it includes an unexpected climax when you feel everything‚Äôs going smooth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/gsoc-coding-phase-2-challenge-is-an-understatement-bji"&gt;GSoC Coding Phase 2: Challenge Is an Understatement&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Like what I do? Help me pull my next all-nighter. Consider &lt;a href="https://www.buymeacoffee.com/rohanlekhwani"&gt;buying me a coffee&lt;/a&gt;.ü•§&lt;/p&gt;

&lt;p&gt;Rohan Lekhwani is an open source contributor and enthusiast. You can connect with him on &lt;a href="https://www.linkedin.com/in/rohanlekhwani/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="http://github.com/RonLek"&gt;GitHub&lt;/a&gt;, &lt;a href="https://twitter.com/Rohanlekhwani"&gt;Twitter&lt;/a&gt;, and his &lt;a href="https://ronlek.github.io/"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Sort tables (almost) instantly with Ruby on Rails and StimulusReflex</title>
      <author>David Colby</author>
      <pubDate>Sun, 19 Sep 2021 14:03:38 +0000</pubDate>
      <link>https://dev.to/davidcolbyatx/sort-tables-almost-instantly-with-ruby-on-rails-and-stimulusreflex-32d1</link>
      <guid>https://dev.to/davidcolbyatx/sort-tables-almost-instantly-with-ruby-on-rails-and-stimulusreflex-32d1</guid>
      <description>&lt;p&gt;Today we‚Äôre going to use Ruby on Rails and &lt;a href="https://docs.stimulusreflex.com/"&gt;StimulusReflex&lt;/a&gt; to build a table that sorts itself each time a user clicks on a header column.&lt;/p&gt;

&lt;p&gt;Sorting will occur without a page turn, in less than 100ms, won't require any custom JavaScript, and we'll build the whole thing with regular old ERB templates and a little bit of Ruby. &lt;/p&gt;

&lt;p&gt;The end result will be very fast, efficient, simple to reason about, and easy to extend as new functionality is required.&lt;/p&gt;

&lt;p&gt;It'll be pretty fancy.&lt;/p&gt;

&lt;p&gt;When we're finished, it will work like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YlmbT9uz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwitj4pcuj71mmslm5y8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YlmbT9uz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwitj4pcuj71mmslm5y8.gif" alt="A screen recording of a user clicking on column headers on a data table. With each click, the table sorts itself by that column and a triangle indicator appears next to the column used for sorting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can view the finished product &lt;a href="https://stark-peak-59471.herokuapp.com/"&gt;on Heroku&lt;/a&gt;, or find the full source on &lt;a href="https://github.com/DavidColby/sortable_players/tree/sortable"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we get dive in, the work in this article is inspired by the more full-featured &lt;a href="https://beastmode.leastbad.com/"&gt;Beast Mode&lt;/a&gt; StimulusReflex demo application.&lt;/p&gt;

&lt;p&gt;We‚Äôll be building a simpler application, moving through the implementation step-by-step, but the Beast Mode codebase was vital as I began thinking about how to solve this problem. Reviewing &lt;a href="https://github.com/leastbad/beast_mode"&gt;that code base&lt;/a&gt; is highly recommended as you begin thinking about how to build more scalable, production-ready code with StimulusReflex.&lt;/p&gt;

&lt;p&gt;This article will be most useful to folks who are familiar with Ruby on Rails, you will not need any previous experience with Stimulus or StimulusReflex to follow along. If you‚Äôve never worked with Rails before, some concepts here may be a little tough to follow.&lt;/p&gt;

&lt;p&gt;Let‚Äôs get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;As usual, we‚Äôll start with a brand new Rails 6.1 application, with Tailwind and StimulusReflex installed. Tailwind is not a requirement, but it helps us make our table look a little nicer and the extra setup time is worth the cost.&lt;/p&gt;

&lt;p&gt;If you‚Äôd like to skip the copy/pasting setup steps, you can clone down the example &lt;a href="https://github.com/DavidColby/sortable_players/tree/main"&gt;repo&lt;/a&gt; and skip ahead to the &lt;a href="#building-the-table"&gt;Building the Table section&lt;/a&gt;. The &lt;code&gt;main&lt;/code&gt; branch of the example repo is pinned to the end of the setup process and ready for you to start writing code.&lt;/p&gt;

&lt;p&gt;If you‚Äôre going to follow along with the setup, first, from your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new player_sorting -T
cd player_sorting
bundle add stimulus_reflex
bundle add faker
rake stimulus_reflex:install
rails g model Team name:string
rails g scaffold Player name:string team:references seasons:integer
rails db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming you‚Äôve got Rails and Yarn installed, this will produce a brand new Rails 6.1 application (at the time of this writing), install StimulusReflex, and scaffold up the Team and Player models that we‚Äôll use to build our sortable table.&lt;/p&gt;

&lt;p&gt;If you don‚Äôt care to use Tailwind for this article, feel free to skip past this next section, Tailwind is a convenient way to make things look presentable, but if you just want to focus on sorting the table without any styling, Tailwind is not necessary!&lt;/p&gt;

&lt;p&gt;If you want to install Tailwind, start in your terminal:&lt;/p&gt;

&lt;p&gt;yarn add tailwindcss@latest postcss@latest autoprefixer@latest&lt;br&gt;
npx tailwindcss init&lt;br&gt;
mkdir app/javascript/stylesheets&lt;br&gt;
touch app/javascript/stylesheets/application.scss&lt;/p&gt;

&lt;p&gt;And then update &lt;code&gt;tailwind.config.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app/**/*/*.html.erb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app/helpers/**/*/*.rb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app/javascript/**/*/*.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app/javascript/**/*/*.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app/javascript/**/*/*.react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And postcss.config.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tailwindcss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./tailwind.config.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcss-import&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcss-flexbugs-fixes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcss-preset-env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;
      &lt;span class="na"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no-2009&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we‚Äôll update &lt;code&gt;app/javascripts/stylesheets/application.scss&lt;/code&gt; to import Tailwind:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"tailwindcss/base"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"tailwindcss/components"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"tailwindcss/utilities"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then include that stylesheet in &lt;code&gt;app/javascripts/packs/application.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../stylesheets/application.scss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, update the application layout to include the stylesheet generated by webpacker:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;%= stylesheet_pack_tag 'application', 'data-turbolinks-track': 'reload', media: 'all' %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whew. We‚Äôre through the setup and ready to start building.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-table"&gt;
  &lt;/a&gt;
  Building the table
&lt;/h2&gt;

&lt;p&gt;First up, let‚Äôs get our bearings.&lt;/p&gt;

&lt;p&gt;The core of our application is the &lt;code&gt;Players&lt;/code&gt; resource. We are going to construct a table that displays all of the players in our database, with the players name, their team‚Äôs name, and their seasons played as columns. &lt;/p&gt;

&lt;p&gt;We‚Äôll only use the &lt;code&gt;Team&lt;/code&gt; model created during setup in the context of &lt;code&gt;Players&lt;/code&gt;, so we don‚Äôt need a controller or views for teams.&lt;/p&gt;

&lt;p&gt;We‚Äôll start by moving the table from the players index view to a partial. From your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch app/views/players/_players.html.erb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And fill that partial in with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"players"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"shadow overflow-hidden rounded border-b border-gray-200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"min-w-full bg-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;thead&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-gray-800 text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"players-name"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left py-3 px-6 uppercase font-semibold text-sm hover:cursor-pointer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"players-team"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left py-3 px-6 uppercase font-semibold text-sm hover:cursor-pointer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Team&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"players-seasons"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left py-3 px-6 uppercase font-semibold text-sm hover:cursor-pointer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Seasons&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;tbody&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-700"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left py-3 px-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left py-3 px-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left py-3 px-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;seasons&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of the markup here is Tailwind classes for styling the table.&lt;/p&gt;

&lt;p&gt;The functionally important pieces are the &lt;code&gt;ids&lt;/code&gt; set on the wrapper div (&lt;code&gt;#players&lt;/code&gt;) and the ids set on the table header cells. These ids will be used later to update the DOM when the user clicks to sort the table.&lt;/p&gt;

&lt;p&gt;Next update the index view to use the new partial:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"max-w-7xl mx-auto mt-12"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s2"&gt;"players"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;players: &lt;/span&gt;&lt;span class="vi"&gt;@players&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these changes in place, we have a nice looking table ready to display the players in the database, but we don‚Äôt have any players. Since we‚Äôre going to be sorting, let‚Äôs make sure the database has plenty of data in it.&lt;/p&gt;

&lt;p&gt;Copy this into &lt;code&gt;db/seeds.rb&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Dallas Mavericks'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'LA Clippers'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'LA Lakers'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'San Antonio Spurs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Boston Celtics'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Miami Heat'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'New Orleans Pelicans'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="no"&gt;Team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;team: &lt;/span&gt;&lt;span class="no"&gt;Team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;seasons: &lt;/span&gt;&lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, from your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails db:seed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now start up your Rails server and head to &lt;a href="http://localhost:3000/players"&gt;localhost:3000/players&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If all has gone well, you should see a table populated with 100 randomly generated players.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oBgZItda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f73dyit8vhlz18bloha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oBgZItda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f73dyit8vhlz18bloha.png" alt="A screenshot of a data table with columns for name, team, and seasons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next up, we‚Äôll build our sorting mechanism with StimulusReflex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sorting-with-stimulusreflex"&gt;
  &lt;/a&gt;
  Sorting with StimulusReflex
&lt;/h2&gt;

&lt;p&gt;To sort the table, we‚Äôre going to create a &lt;a href="https://docs.stimulusreflex.com/rtfm/reflex-classes"&gt;reflex class&lt;/a&gt; with a single action, &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the user clicks on a table header, we‚Äôll call the reflex action to sort the players and update the DOM.&lt;/p&gt;

&lt;p&gt;We‚Äôll start by generating a new Reflex. From your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails g stimulus_reflex Table
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This generator creates both a &lt;code&gt;reflex&lt;/code&gt; in &lt;code&gt;app/reflexes&lt;/code&gt; and a related Stimulus controller in &lt;code&gt;app/javascripts/controllers&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For this article, we won‚Äôt make any modifications to the Stimulus controller. Instead, we‚Äôll focus on the reflex found at &lt;code&gt;app/reflexes/table_reflex.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Fill that reflex in with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TableReflex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationReflex&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;
    &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;column&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;direction&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;morph&lt;/span&gt; &lt;span class="s1"&gt;'#players'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'players'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;players: &lt;/span&gt;&lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line of &lt;code&gt;sort&lt;/code&gt; is a standard Rails ActiveRecord query. In it, we retrieve all of the players from the database, ordered by attributes sent from the DOM when the reflex action is triggered.&lt;/p&gt;

&lt;p&gt;Reflex actions have access to a &lt;a href="https://docs.stimulusreflex.com/rtfm/reflex-classes#building-your-reflex-action"&gt;variety of properties&lt;/a&gt;. In our case, the property we‚Äôre interested in is &lt;a href="https://docs.stimulusreflex.com/rtfm/reflex-classes#element"&gt;element&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;element&lt;/code&gt; is a representation of the DOM element that triggered the reflex and it includes all of the data attributes set on that element, accessible via &lt;code&gt;element.dataset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means that in reflex actions, we can always access data attributes from the element that triggered the reflex as if we were working with that element in JavaScript. Handy.&lt;/p&gt;

&lt;p&gt;For our purposes, we care about two data elements that don‚Äôt yet exist in the DOM ‚Äî &lt;code&gt;column&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt;. The ActiveRecord query to retrieve and order players uses those values to know which column to order the results by, and in which direction (ascending or descending) the results should be ordered.&lt;/p&gt;

&lt;p&gt;After we‚Äôve retrieved the ordered list of players from the database, we use a &lt;a href="https://docs.stimulusreflex.com/rtfm/morph-modes#selector-morphs"&gt;selector morph&lt;/a&gt; to update the DOM, replacing the content of the &lt;code&gt;players&lt;/code&gt; partial we created earlier with the updated list of players.&lt;/p&gt;

&lt;p&gt;Our reflex is built, but there‚Äôs no way for a user to trigger the reflex. Let‚Äôs add that next.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;players&lt;/code&gt; partial, update the header row like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; 
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"players-name"&lt;/span&gt; 
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left py-3 px-6 uppercase font-semibold text-sm hover:cursor-pointer"&lt;/span&gt;
    &lt;span class="na"&gt;data-reflex=&lt;/span&gt;&lt;span class="s"&gt;"click-&amp;gt;Table#sort"&lt;/span&gt;
    &lt;span class="na"&gt;data-column=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;
    &lt;span class="na"&gt;data-direction=&lt;/span&gt;&lt;span class="s"&gt;"asc"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; 
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"players-team"&lt;/span&gt; 
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left py-3 px-6 uppercase font-semibold text-sm hover:cursor-pointer"&lt;/span&gt;
    &lt;span class="na"&gt;data-reflex=&lt;/span&gt;&lt;span class="s"&gt;"click-&amp;gt;Table#sort"&lt;/span&gt;
    &lt;span class="na"&gt;data-column=&lt;/span&gt;&lt;span class="s"&gt;"teams.name"&lt;/span&gt;
    &lt;span class="na"&gt;data-direction=&lt;/span&gt;&lt;span class="s"&gt;"asc"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Team&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; 
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"players-seasons"&lt;/span&gt; 
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left py-3 px-6 uppercase font-semibold text-sm hover:cursor-pointer"&lt;/span&gt;
    &lt;span class="na"&gt;data-reflex=&lt;/span&gt;&lt;span class="s"&gt;"click-&amp;gt;Table#sort"&lt;/span&gt;
    &lt;span class="na"&gt;data-column=&lt;/span&gt;&lt;span class="s"&gt;"seasons"&lt;/span&gt;
    &lt;span class="na"&gt;data-direction=&lt;/span&gt;&lt;span class="s"&gt;"asc"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Seasons&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we‚Äôve updated each header cell with the three data attributes we need for the reflex to be triggered and to run successfully.&lt;/p&gt;

&lt;p&gt;First, &lt;code&gt;data-reflex&lt;/code&gt; is used to &lt;a href="https://docs.stimulusreflex.com/rtfm/reflexes#declaring-a-reflex-in-html-with-data-attributes"&gt;tell StimulusReflex&lt;/a&gt; that this element should trigger a reflex when some action occurs. In our case, it will be called on &lt;code&gt;click&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each cell also gets a unique &lt;code&gt;data-column&lt;/code&gt; value, which we use to sort the players result by the matching database column. Finally, each header cell also starts with a &lt;code&gt;direction&lt;/code&gt; of &lt;code&gt;asc&lt;/code&gt; which is used to set the direction of the order query.&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at the Reflex code again and review what‚Äôs happening now that we‚Äôve updated the DOM to call this reflex.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;
  &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;column&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;direction&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;morph&lt;/span&gt; &lt;span class="s1"&gt;'#players'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'players'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;players: &lt;/span&gt;&lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;sort&lt;/code&gt; method we‚Äôve defined matches the name of the &lt;code&gt;data-reflex&lt;/code&gt; on each header cell. When the header cell is clicked, this reflex will run.&lt;/p&gt;

&lt;p&gt;The header cell that that the user clicks will be passed to the reflex as &lt;code&gt;element&lt;/code&gt;, giving us access to the element‚Äôs data attributes, which we access through &lt;code&gt;element.dataset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once the value of &lt;code&gt;players&lt;/code&gt; is set by the database query, we use a &lt;code&gt;selector&lt;/code&gt; &lt;a href="https://docs.stimulusreflex.com/rtfm/morph-modes#selector-morphs"&gt;morph&lt;/a&gt; to tell the browser to update the element with the id of &lt;code&gt;players&lt;/code&gt; with the content of the &lt;code&gt;players&lt;/code&gt; partial, using the updated, reordered list of players.&lt;/p&gt;

&lt;p&gt;This is the magic of StimulusReflex in action. With just a couple of data attributes and a few lines of simple Ruby code, our users can now click on a table header and, in &amp;lt; 100ms, they‚Äôll see a table sorted to match their request.&lt;/p&gt;

&lt;p&gt;Refresh the page and try it out for yourself. If all has gone well, clicking on a header cell should sort the table by that column in ascending order. While this is nice, we have a few more items to address before our work is complete.&lt;/p&gt;

&lt;p&gt;Next up, we‚Äôll address an error with the order query, and then finish this article by modifying the sort reflex to allow users to sort in both ascending and descending order and display visual feedback to indicate what column is being sorted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixing-an-ordering-error"&gt;
  &lt;/a&gt;
  Fixing an ordering error
&lt;/h2&gt;

&lt;p&gt;First, sharp eyed readers might have noticed that sorting by the team name column doesn‚Äôt work yet.&lt;/p&gt;

&lt;p&gt;Each header cell‚Äôs &lt;code&gt;column&lt;/code&gt; data attribute matches a column in the database, so we can generate the order query dynamically. This works fine for the name and season because those columns live on the &lt;code&gt;Players&lt;/code&gt; table. ActiveRecord knows how to order by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;seasons&lt;/code&gt; without any extra effort.&lt;/p&gt;

&lt;p&gt;For the team name column, we‚Äôre passing &lt;code&gt;teams.name&lt;/code&gt; to the &lt;code&gt;order&lt;/code&gt; call in our query, which ActiveRecord trips over with an error like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# The text will vary depending on the database adapter you're using!
Reflex Table#sort failed: SQLite3::SQLException: no such column: teams.name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can fix this by updating the query slightly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:team&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;column&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;direction&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we added &lt;code&gt;includes(:team)&lt;/code&gt; to the existing order query, making the &lt;code&gt;Teams&lt;/code&gt; table accessible in the order clause and fixing the ‚Äúno such column‚Äù error that was thrown when attempting to sort by team name.&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;joins&lt;/code&gt; instead of &lt;code&gt;includes&lt;/code&gt; would also fix the error, but since we need to use team name when we render the players partial (to display each player‚Äôs team), &lt;code&gt;includes&lt;/code&gt; is the better choice.&lt;/p&gt;

&lt;p&gt;Before moving on, you‚Äôll notice that we are using user-accessible values to generate a SQL query ‚Äî anyone can modify data-attributes in their browser‚Äôs dev tools.&lt;/p&gt;

&lt;p&gt;Prior to Rails 6, this could have opened up our application to SQL injection; however, &lt;a href="https://github.com/rails/rails/pull/27947"&gt;since Rails 6&lt;/a&gt;, Rails will raise an error automatically if anything but a table/column name + a sort direction are passed in to &lt;code&gt;order&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-descending-ordering"&gt;
  &lt;/a&gt;
  Adding descending ordering
&lt;/h2&gt;

&lt;p&gt;With the work we've done so far, sorting the table works great as long as the user only wants to sort in ascending (A - Z) order. Since the sort direction is read from a data attribute that is always ‚Äúasc‚Äù, there is no way to sort in descending (Z - A) order. Let's add that functionality next.&lt;/p&gt;

&lt;p&gt;Before jumping in to the code, let‚Äôs outline the desired user experience. &lt;/p&gt;

&lt;p&gt;When a user clicks on a column header, the table should be sorted by that column, in ascending order. When the user clicks on the same column header again, the table should be sorted by that column in descending order. And then we alternate, forever, between ascending and descending on subsequent clicks. &lt;/p&gt;

&lt;p&gt;Sorting by a different column should always sort in ascending order on the first click.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a gif of what we‚Äôre aiming for:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iB0Lfx3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wp9fp6x6v1b80m8os8r8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iB0Lfx3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wp9fp6x6v1b80m8os8r8.gif" alt="A screen recording of a user clicking on column headers to sort a data table in ascending and descending order"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To achieve the desired user experience, we need to track the next sort direction for each header cell, so that when the &lt;code&gt;sort&lt;/code&gt; reflex is called, the right direction can be sent to the &lt;code&gt;order&lt;/code&gt; query.&lt;/p&gt;

&lt;p&gt;To do this, we‚Äôre going to take advantage of &lt;a href="https://docs.stimulusreflex.com/rtfm/cableready"&gt;CableReady‚Äôs&lt;/a&gt; tight integration with StimulusReflex. We‚Äôll update the &lt;code&gt;sort&lt;/code&gt; reflex to include a &lt;code&gt;cable_ready&lt;/code&gt; &lt;a href="https://cableready.stimulusreflex.com/reference/operations"&gt;operation&lt;/a&gt; that changes the &lt;code&gt;direction&lt;/code&gt; data attribute of the &lt;code&gt;element&lt;/code&gt; that triggered the reflex.&lt;/p&gt;

&lt;p&gt;To do this, update &lt;code&gt;TableReflex&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;
  &lt;span class="c1"&gt;# snip&lt;/span&gt;
  &lt;span class="n"&gt;set_sort_direction&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="kp"&gt;private&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_direction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'asc'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'desc'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'asc'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_sort_direction&lt;/span&gt;
  &lt;span class="n"&gt;cable_ready&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;set_dataset_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;selector: &lt;/span&gt;&lt;span class="s2"&gt;"#&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'direction'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="n"&gt;next_direction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we‚Äôve added two private methods to the &lt;code&gt;TableReflex&lt;/code&gt; class. &lt;code&gt;next_direction&lt;/code&gt; is a simple helper method that takes the current value of direction and returns the next value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;set_sort_direction&lt;/code&gt; is more interesting. In it, we use CableReady‚Äôs &lt;code&gt;set_dataset_property&lt;/code&gt; &lt;a href="https://cableready.stimulusreflex.com/v/v5/reference/operations/element-mutations#set_dataset_property"&gt;operation&lt;/a&gt; to set the value of the element‚Äôs &lt;code&gt;direction&lt;/code&gt; data attribute to the value of  &lt;code&gt;next_direction&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Finally, we call &lt;code&gt;set_sort_direction&lt;/code&gt; in the &lt;code&gt;sort&lt;/code&gt; reflex, which adds the &lt;code&gt;set_dataset_property&lt;/code&gt; operation to the queue each time the &lt;code&gt;sort&lt;/code&gt; reflex runs.&lt;/p&gt;

&lt;p&gt;With this in place, refresh and click on the same column multiple times to see that each click reorders the table, toggling between ascending and descending order.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#order-of-operations-not-just-for-math-class"&gt;
  &lt;/a&gt;
  Order of operations: Not just for math class
&lt;/h2&gt;

&lt;p&gt;Before moving on, it is important to pause and think about how this code works. When a reflex includes CableReady operations, a &lt;a href="https://docs.stimulusreflex.com/rtfm/cableready#order-of-operations"&gt;specific order of operations&lt;/a&gt; is always followed.&lt;/p&gt;

&lt;p&gt;First, &lt;a href="https://cableready.stimulusreflex.com/reference/methods"&gt;broadcasted&lt;/a&gt; CableReady &lt;code&gt;operations&lt;/code&gt; execute. Next, StimulusReflex &lt;code&gt;morphs&lt;/code&gt; execute. Finally, CableReady &lt;code&gt;operations&lt;/code&gt; that are not &lt;code&gt;broadcasted&lt;/code&gt; execute (that‚Äôs our &lt;code&gt;set_dataset_property&lt;/code&gt; operation).&lt;/p&gt;

&lt;p&gt;Because the StimulusReflex morph runs before the CableReady operation, each table header cell has its &lt;code&gt;direction&lt;/code&gt; data attribute reset to &lt;code&gt;asc&lt;/code&gt; when &lt;code&gt;sort&lt;/code&gt; is triggered. This behavior lets us ‚Äúreset‚Äù sort directions when moving between columns without having to add logic in the partial.&lt;/p&gt;

&lt;p&gt;Immediately &lt;strong&gt;after&lt;/strong&gt; the StimulusReflex morph, &lt;code&gt;set_dataset_property&lt;/code&gt; runs and updates the value of &lt;code&gt;direction&lt;/code&gt; on the currently active sort column.&lt;/p&gt;

&lt;p&gt;If we appended &lt;code&gt;.broadcast&lt;/code&gt; to the &lt;code&gt;set_dataset_property&lt;/code&gt; operation, the direction property would be updated &lt;strong&gt;before&lt;/strong&gt; the StimulusReflex &lt;code&gt;morph&lt;/code&gt;, causing the CableReady update to be overwritten by the &lt;code&gt;morph&lt;/code&gt;, breaking the ability to sort in descending order.&lt;/p&gt;

&lt;p&gt;This order of operations is important to understand, and helps unlock a new level of functionality within reflexes.&lt;/p&gt;

&lt;p&gt;Before moving on, now that we understand the order of operations in reflex actions, we can use that knowledge to make a small optimization to the &lt;code&gt;sort&lt;/code&gt; reflex.&lt;/p&gt;

&lt;p&gt;We know that every time the reflex runs, each header cell will have its &lt;code&gt;data-direction&lt;/code&gt; value set to &lt;code&gt;asc&lt;/code&gt; before the active sort column is updated by the CableReady &lt;code&gt;set_dataset_property&lt;/code&gt; operation.&lt;/p&gt;

&lt;p&gt;Since the value of &lt;code&gt;data-direction&lt;/code&gt; is already &lt;code&gt;asc&lt;/code&gt;, if the next sort direction is &lt;code&gt;asc&lt;/code&gt;, &lt;code&gt;set_dataset_property&lt;/code&gt; won‚Äôt do anything useful. &lt;/p&gt;

&lt;p&gt;Let‚Äôs update &lt;code&gt;sort&lt;/code&gt; to skip the CableReady operation in that case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;
&lt;span class="c1"&gt;# snip&lt;/span&gt;
  &lt;span class="n"&gt;set_sort_direction&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_direction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'desc'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;set_sort_direction&lt;/code&gt; will only be run when necessary, simplifying our DOM updates at the cost of slightly more complexity in our ruby code.&lt;/p&gt;

&lt;p&gt;Let‚Äôs finish up our sortable table implementation by adding a visual indicator to the table when sorting is active.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sort-direction-visuals"&gt;
  &lt;/a&gt;
  Sort direction visuals
&lt;/h2&gt;

&lt;p&gt;To indicate which column is being sorted, and in which direction, we‚Äôll draw a triangle with CSS, with an upward pointing triangle indicating ascending order, and a downward triangle indicating descending order.&lt;/p&gt;

&lt;p&gt;Only the column that is being used for sorting will display the icon.&lt;/p&gt;

&lt;p&gt;When we‚Äôre finished, the indicator will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UsFvIFhl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0f3lgl6moc2nb8pdq2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UsFvIFhl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0f3lgl6moc2nb8pdq2q.png" alt="A screenshot of a data table with a triangle pointing upward positioned to the left of a column header labeled Team, indicating the table is sorted in ascending order by team name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs start with the CSS.&lt;/p&gt;

&lt;p&gt;We‚Äôll insert the CSS directly into our main &lt;code&gt;application.scss&lt;/code&gt; file to keep things simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.sort-desc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.sort-asc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We‚Äôll use the base &lt;code&gt;.sort&lt;/code&gt; class along with a dynamic &lt;code&gt;.sort-asc&lt;/code&gt; or &lt;code&gt;.sort-desc&lt;/code&gt; to display the sort indicator. If you‚Äôre interested in how this CSS works, &lt;a href="https://www.freecodecamp.org/news/css-shapes-explained-how-to-draw-a-circle-triangle-and-more-using-pure-css/"&gt;this is a nice introduction&lt;/a&gt; to drawing shapes with CSS.&lt;/p&gt;

&lt;p&gt;With the CSS ready, next we‚Äôll create a partial to render the indicator, from your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch app/views/players/_sort_indicator.html.erb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And fill that in with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sort sort-&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing fancy here, just appending the local &lt;code&gt;direction&lt;/code&gt; variable to the class name to ensure our triangle points in the right direction.&lt;/p&gt;

&lt;p&gt;We‚Äôll finish up by updating the &lt;code&gt;sort&lt;/code&gt; reflex to insert the sort indicator into the DOM, again relying on a CableReady operation that runs immediately after the StimulusReflex &lt;code&gt;morph&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TableReflex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationReflex&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;
    &lt;span class="c1"&gt;# snip&lt;/span&gt;
    &lt;span class="n"&gt;insert_indicator&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="c1"&gt;# snip&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert_indicator&lt;/span&gt;
    &lt;span class="n"&gt;cable_ready&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;selector: &lt;/span&gt;&lt;span class="s2"&gt;"#&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;html: &lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'players/sort_indicator'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;direction: &lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;direction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we added another private method to the reflex to handle inserting the sort indicator when the &lt;code&gt;sort&lt;/code&gt; reflex is called.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;insert_indicator&lt;/code&gt; uses CableReady‚Äôs &lt;code&gt;prepend&lt;/code&gt; &lt;a href="https://cableready.stimulusreflex.com/reference/operations/dom-mutations#prepend"&gt;operation&lt;/a&gt; to insert the content of the &lt;code&gt;sort_indicator&lt;/code&gt; partial into the DOM, before the target element‚Äôs first child.&lt;/p&gt;

&lt;p&gt;With this in place, we can refresh the page and see the sort indicator added each time the sort reflex runs, pointing up for ascending sorts and down for descending sorts:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---kPhoAt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cks9k338rlj13z03u7o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---kPhoAt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cks9k338rlj13z03u7o.gif" alt="A screen recording of a user clicking on column headers on a data table. With each click, the table sorts itself by that column and a triangle indicator appears next to the column used for sorting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-implementation-note"&gt;
  &lt;/a&gt;
  An implementation note
&lt;/h2&gt;

&lt;p&gt;During this article I made a choice to use &lt;code&gt;cable_ready&lt;/code&gt; operations to add the sort indicator and update the data attribute.&lt;/p&gt;

&lt;p&gt;Instead of &lt;code&gt;cable_ready&lt;/code&gt; operations, another approach would be to assign instance or local variables for things like "active column" and "next direction" during the &lt;code&gt;sort&lt;/code&gt; reflex. We could then read those variables when rendering the &lt;code&gt;players&lt;/code&gt; partial, using them to render the sort indicator and set the next sort direction.&lt;/p&gt;

&lt;p&gt;This approach would allow us to eliminate the &lt;code&gt;cable_ready&lt;/code&gt; operations; however, doing so would complicate the view. Either approach is fine, my personal preference is to rely on the very fast &lt;code&gt;cable_ready&lt;/code&gt; operations to simplify the view.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;cable_ready&lt;/code&gt; also has the added benefit of letting us talk more about how StimulusReflex works, which is a bonus in a tutorial article like this one. As you spend more time with StimulusReflex, experiment with different approaches and find what works best for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Today we built a sortable table interface with Ruby on Rails, StimulusReflex, and CableReady. Our table is fast, updates efficiently, is easy to extend, and is no where near production ready yet. What we built today was part one of a two part series. Next up, we‚Äôll extend the sortable table by adding filtering and pagination, getting closer to the full-featured implementation seen in &lt;a href="https://beastmode.leastbad.com/"&gt;Beast Mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While there are numerous ways to implement a sortable table interface, for Rails developers, StimulusReflex is worthy of strong consideration. SR‚Äôs fast, efficient mechanisms for updating and re-rendering the DOM, including &lt;a href="https://docs.stimulusreflex.com/rtfm/morph-modes#selector-morphs"&gt;bypassing ActionDispatch‚Äôs overhead&lt;/a&gt; with &lt;code&gt;selector&lt;/code&gt; morphs, allow us to sort and render the updated table extremely quickly, with minimal code complexity or additional mental overhead. Its tight integrations with CableReady and Stimulus combine into an extremely powerful tool in any Rails developers kit.&lt;/p&gt;

&lt;p&gt;To go further into StimulusReflex and CableReady:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spend time reviewing the Beast Mode &lt;a href="https://github.com/leastbad/beast_mode"&gt;codebase&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Review &lt;a href="https://www.stimulusreflexpatterns.com/patterns/"&gt;StimulusReflex patterns&lt;/a&gt; for thoughtfully designed solutions in StimulusReflex, including &lt;a href="https://www.stimulusreflexpatterns.com/patterns/filterable_reflex/"&gt;filterable&lt;/a&gt; for working with complex sorting and filtering requirements&lt;/li&gt;
&lt;li&gt;Join the &lt;a href="https://discord.com/invite/stimulus-reflex"&gt;StimulusReflex discord&lt;/a&gt; and connect with other folks building cool stuff with StimulusReflex, CableReady, and Rails&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That‚Äôs all for today, as always, thanks for reading!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
