<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What did you teach this week? (1-8 Aug)</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 09 Aug 2021 03:12:04 +0000</pubDate>
      <link>https://dev.to/aatmaj/what-did-you-teach-this-week-1-8-aug-4j6i</link>
      <guid>https://dev.to/aatmaj/what-did-you-teach-this-week-1-8-aug-4j6i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-all-did-you-teach-anyone-anything-this-week-i-am-sure-you-did-think-carefully-and-post-in-the-comments-below"&gt;
  &lt;/a&gt;
   Welcome all! Did you teach anyone anything this week? I am sure you did. Think carefully and post in the comments below! 
&lt;/h2&gt;




&lt;p&gt;&lt;em&gt;Teaching can be like.......&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lending a helping hand to your Colleague in learning a new concept &lt;/li&gt;
&lt;li&gt;Posting a blog which teaches a new technology&lt;/li&gt;
&lt;li&gt;Answering on Stack Overflow&lt;/li&gt;
&lt;li&gt;Participating in group training activities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;....................and many other ways&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6jRA5m_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ex3xvf47nnq99aecrrd1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6jRA5m_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ex3xvf47nnq99aecrrd1.gif" alt="teacgher"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So regardless how much you have taught, whome you have taught or how you have taught, please comment below. Let us all join together and create a source of positive energy by teaching others.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d2lCL7CQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofbjeoc07h4qxojsh187.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d2lCL7CQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofbjeoc07h4qxojsh187.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>teachingthisweek</category>
      <category>teaching</category>
    </item>
    <item>
      <title>Its 2021, and UX is still Overrated</title>
      <author>Denin Paul</author>
      <pubDate>Mon, 09 Aug 2021 02:23:40 +0000</pubDate>
      <link>https://dev.to/byteslash/its-2021-and-ux-is-still-overrated-50kj</link>
      <guid>https://dev.to/byteslash/its-2021-and-ux-is-still-overrated-50kj</guid>
      <description>&lt;p&gt;&lt;em&gt;...or at least the "UX" the internet talks on.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's been long since I've been observing articles, tweets, or videos on how UX is like the "single most important item" or like "the icing on the cake". You even have parts of the UX community continuously trashing on anyone who just opens dribbble.com, or who would not agree to "Usability over aesthetics" (cause it ain't true always).&lt;/p&gt;

&lt;p&gt;Even I fell into this ego trap and established my authority using the "UX" entitlement. It took a while for me to have a big enough slap on my face and be aware of it. And I just don't want anyone who's getting into UI/UX to be up there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BsRRcc2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/CDb1zMILM74AAAAC/batman-slap.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsRRcc2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/CDb1zMILM74AAAAC/batman-slap.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's worse is how everyone wraps the UX side all up with some "linear" systematic process and case studies, which is usually what someone starting out observes everywhere (esp on Medium). Most of these depend on data from users (mostly fake), obtained through boring forms &amp;amp; other metrics, and stops right after the first iteration of the design.&lt;/p&gt;

&lt;p&gt;"So why is this a problem" you might ask. Lemme explain.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ketchup-bottle-analogy"&gt;
  &lt;/a&gt;
  The ketchup bottle analogy
&lt;/h2&gt;

&lt;p&gt;Ah, it all comes to this very overused analogy, which shows how 'UX is always the King' and how 'the aesthetics don't matter, it's always the accessibility &amp;amp; usability. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N1aZJQPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/818cavzkzf9gkl30hthy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N1aZJQPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/818cavzkzf9gkl30hthy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When it simply ain't it! It's missing something else which is much important.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"The context."&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What if you are to place a couple of them in a premium restaurant/hotel? which one would you choose? Wouldn't it be the one labeled "UI"?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As the design labeled "UX" uses plastic, isn't that not recommended if the brand is about being eco-friendly and having organic ketchup being served?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the design tagged "UI" has more premium ketchup inside it, wouldn't users care about the hassle and jump the hurdles to get to the value?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just the tip of the iceberg. Ask a couple more questions and would get to know why it isn't as simple as just "what the user wants". &lt;/p&gt;

&lt;p&gt;And that's exactly the problem with most of the UX goers&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-overemphasis-on-user"&gt;
  &lt;/a&gt;
  The over-emphasis on user
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UVsKjhEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.redd.it/s2un7gty0vd51.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UVsKjhEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.redd.it/s2un7gty0vd51.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lemme be honest, I would use the ketchup bottle labeled "UX". &lt;/p&gt;

&lt;p&gt;I mean if you took a survey, even most would choose it. And you can show this to the premium hotel manager client and be like: "You are fricking wrong. See what the data says". To which the client would reply he doesn't care, he just wants the one that is labeled "UI" cause it looks more premium, and fits his brand.&lt;/p&gt;

&lt;p&gt;This then sets you off to making tweets, articles, or memes on how clients are fools, and how they need to learn a bit of UX to get some sense in the puny brain of theirs, or something (I am seriously not venting out on my previous clients over here). &lt;/p&gt;

&lt;p&gt;Thus teaching new designers, who get to see all these, to give zero facks about the client.&lt;/p&gt;

&lt;p&gt;Okay, I guess I went too far but wasn't that scarily accurate?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcMlORpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/rF5ERf7ncqUAAAAC/oh-no-top-gear.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcMlORpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/rF5ERf7ncqUAAAAC/oh-no-top-gear.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don't mean to say that the client can never be wrong. What I mean is the fact that you have been focusing on the wrong group of syllables of "User Experience". &lt;/p&gt;

&lt;p&gt;Your eyes where on "User", instead of focusing on "Experience"&lt;/p&gt;

&lt;p&gt;And that's where you went wrong! Your job was never about providing what the users wanted, it was to design a great experience for them. To know what experience you have to serve your users, you might need to take some context into your research. You might need to know what the business is, the brand they are going for, THE BIG PICTURE.&lt;/p&gt;

&lt;p&gt;You need to collaborate! &lt;/p&gt;

&lt;p&gt;And suddenly you are not the 'entitled being' who knows it all. You are just a part of the team that works with the UI Designer and others, helping in designing the greatest experiences for the "humans" using it. (yes "humans", not data points)&lt;/p&gt;

&lt;p&gt;And the scary part of this is you can't predict or control much of the human experiences or emotions. You can only influence it. So how do you do it?&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-a-better-experience"&gt;
  &lt;/a&gt;
  How to create a better experience
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VSZ2VchC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/vHcHG7mOtuAAAAAC/thumbs-up-ok.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSZ2VchC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/vHcHG7mOtuAAAAAC/thumbs-up-ok.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of doing more research, giving out more forms, getting more personal data of the users, or doing more wireframe tests — start thinking about how the users would use the products in the given context. &lt;/p&gt;

&lt;p&gt;This is why empathy and psychology are really necessary for UX thinking (also the reason even I dwell a lot into learning psychology)&lt;/p&gt;

&lt;p&gt;"Aren't you gonna end up with assumptions?", you might ask. I mean yes you are gonna end up with assumptions. &lt;/p&gt;

&lt;p&gt;But it's the same with doing all research and collecting data too. It's just that these assumptions have selective data to back it up (notice that I used 'selective' and not incorrect). And that adds up to your ego too :P&lt;/p&gt;

&lt;p&gt;The real research starts after the user uses your first draft/prototype of the design. This is where you need to gather data and ask in to fill the forms with regards to the experience, not about the user. &lt;/p&gt;

&lt;p&gt;This means yes, it's not a linear systematic process where you do the research, collect gibberish, make some wireframe, submit it to the UI Designer, and shake the dust off your hands. Collaboration and finding a middle ground is the key. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5bOccd9w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/SpanishKindheartedAdouri-size_restricted.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5bOccd9w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/SpanishKindheartedAdouri-size_restricted.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, start collaborating with the UI Designers and others to forge the greatest experience for the user. For this, the UI Designers must know about UX and vise versa, as it's important for effective communication.&lt;/p&gt;

&lt;p&gt;As soon as you change your perspective and start delivering experiences you will get to understand how much a role UI plays. You realize the amount of correlation both have. Contrary to popular belief, UI is a part of the UX, and they aren't separate entities. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-the-takeaway"&gt;
  &lt;/a&gt;
  So What's the takeaway
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DtOGuQ6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/Ch2H6tcXVRIAAAAd/blac-youngsta-smile.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DtOGuQ6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/Ch2H6tcXVRIAAAAd/blac-youngsta-smile.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;People (especially those who write UX Case Studies on Medium) often forget that Design is an iterative process. Instead of testing their design and improving upon the feedback they receive, of the experience they deliver, they just stop after the first iteration of the design, and tell how right they are through pointless research, fake personas, and whatnot.&lt;/p&gt;

&lt;p&gt;Instead, I encourage y'all to start focusing on documenting the feedback process after the first iteration of the design and show how you improved it upon feedback. This way you can accurately understand wherein you have come short when it comes to delivering the experience to the user, and have an idea on how you can make the experience even better by the next iteration.&lt;/p&gt;

&lt;p&gt;At the end of the day, the greatest products aren't the ones with great user research, its the one that provides great value and also improves on feedback. &lt;/p&gt;

&lt;p&gt;Cheerio!&lt;/p&gt;

</description>
      <category>ux</category>
      <category>design</category>
      <category>webdev</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>Web Development Roadmap -2021</title>
      <author>Jjyygh</author>
      <pubDate>Mon, 09 Aug 2021 01:05:00 +0000</pubDate>
      <link>https://dev.to/jjyygh/web-development-roadmap-2021-54o0</link>
      <guid>https://dev.to/jjyygh/web-development-roadmap-2021-54o0</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;p&gt;There has never been a better time to learn to code or make a career change to software engineering. The demand for web developers is at an all-time high, and it’s only increasing. There are both free and premium tutorials online that teach you the skills to get a job as a developer — no CS degree required 🤓.&lt;/p&gt;
&lt;p id="561d"&gt;This article details the needed skills and the corresponding tutorials to learn them effectively. The illustrated guide is provided by &lt;b&gt;&lt;a href="http://www.codelivly.com"&gt;Codelivly&lt;/a&gt;&lt;/b&gt; and can be found on codelivly  — Codelivly work is excellent so be sure to star the repo and subscribe to his newsletter to support his efforts. Don’t be intimidated by the map. It may seem like a lot, but I’ll break it down so you can learn each part step-by-step.&lt;/p&gt;
&lt;p id="dda0"&gt;This article will be divided into the following sections:&lt;/p&gt;
&lt;p id="dda0"&gt;1. &lt;b&gt;&lt;a href="https://www.codelivly.com/web-developer-roadmap-2021/"&gt;Full Stack Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p id="dda0"&gt;2. &lt;b&gt;&lt;a href="https://www.codelivly.com/frontend-web-developer-roadmap/"&gt;Frontend Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p id="dda0"&gt;3. &lt;b&gt;&lt;a href="https://www.codelivly.com/backend-web-developer-roadmap/"&gt;Backend Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p id="dda0"&gt;4. &lt;b&gt;&lt;a href="https://www.codelivly.com/the-best-python-frameworks-for-web-development-in-2021/"&gt;Best Python Framework For Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;







</description>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>10 Computer Vision Startups Disrupting the Retail Industry</title>
      <author>SiaSearch</author>
      <pubDate>Mon, 09 Aug 2021 01:02:01 +0000</pubDate>
      <link>https://dev.to/siasearch/10-computer-vision-startups-disrupting-the-retail-industry-2lck</link>
      <guid>https://dev.to/siasearch/10-computer-vision-startups-disrupting-the-retail-industry-2lck</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published at: &lt;a href="https://www.siasearch.io/blog/computer-vision-startups-retail-industry"&gt;https://www.siasearch.io/blog/computer-vision-startups-retail-industry&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Online retail has been growing steadily for years with no sign of stopping. Especially amid movement restrictions induced by the COVID-19 pandemic, &lt;a href="https://news.un.org/en/story/2021/05/1091182"&gt;research shows that global online sales jumped to $26.7 trillion&lt;/a&gt; in 2020. With the rise of ecommerce, one thing is abundantly clear: brick-and-mortar retailers need to innovate if they want to stay competitive. &lt;/p&gt;

&lt;p&gt;The use of AI technologies like computer vision is rapidly increasing in the retail industry. &lt;a href="https://www.siasearch.io/retail"&gt;AI-enhanced retail&lt;/a&gt; holds the promise to eliminate operational inefficiencies and provide shoppers with frictionless in-store experiences. In this article, we’ve put together a list of the most innovative computer vision startups in the retail space.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future-of-ai-in-retail"&gt;
  &lt;/a&gt;
  The Future of AI in Retail
&lt;/h2&gt;

&lt;p&gt;In recent years, an increasing number of retail companies have started to quietly transform physical stores. Walmart, for instance, began &lt;a href="https://corporate.walmart.com/newsroom/2019/04/25/walmarts-new-intelligent-retail-lab-shows-a-glimpse-into-the-future-of-retail-irl"&gt;installing an array of sensors, cameras and processors&lt;/a&gt; to monitor inventory levels, perform automated product quality checks, and more.&lt;/p&gt;

&lt;p&gt;Many industry giants have followed suit by employing similar approaches to drive in-store efficiency, better logistics, prevent theft, and more. Research shows that the retail AI market is growing fast—according to a recent RIS News report, only 3% of retailers were utilizing computer vision technology at the end of 2020, yet an additional 40% had plans to deploy new solutions within the next year. &lt;/p&gt;

&lt;p&gt;Computer vision solutions present retailers with ample opportunity to boost operations as well as enhance the shopping experience for customers. Among the most promising applications of computer vision include inventory management, loss prevention, automated checkout, and behavioral analytics. From employee-free shops to in-store surveillance, here are several computer vision startups disrupting the retail industry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#computer-vision-startups-in-retail"&gt;
  &lt;/a&gt;
  Computer vision startups in retail
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Inventory management&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://goradar.com/"&gt;RADAR&lt;/a&gt;: RADAR is a fully integrated hardware and software solution to automate inventory management using RFID and computer vision techniques. Their mission is to streamline inventory management via automated inventory counts, improved in-store replenishment and instantaneous customer stock checks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://traxretail.com/resources/trax-computer-vision-platform/"&gt;Trax&lt;/a&gt;: Singapore-based startup Trax provides an in-store solution that uses a combination of computer vision models and hardware to keep track of their inventory in real time. This solution ensures out-of-stock items are repurchased efficiently, while expired items are pulled off from the shelves. The company holds 23 patents on its technology and can analyze images from phones, in-store cameras, and grocery store robots.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Automated checkout&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://standard.ai/"&gt;Standard.ai&lt;/a&gt;: Previously known as Standard Cognition, Standard.ai’s automated checkout solution is made to fit with retailers’ existing stores and technology. They boast an easy to install camera-first solution that doesn’t employ the use of turnstiles or gates. Standard doesn't use any facial recognition or biometrics, and all deployments are on-premise to ensure maximum performance and security for retailers and shoppers alike.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://trigo.tech/"&gt;Trigo&lt;/a&gt;: Using proprietary algorithms and affordable off-the-shelf sensor kits, Tel Aviv-based Trigo allows retailers to analyze anonymized shoppers’ movements and product choices in real time. The system automatically compiles selected items into a virtual shopping list, enabling shoppers to leave without going through a traditional checkout line.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.accelrobotics.com/"&gt;Accel Robotics&lt;/a&gt;: Accel Robotics provides checkout-free shopping experiences across existing and new store formats with its patented camera-based AI system. They recently launched Valet Market, a completely automated convenience storefront without cashiers or checkout kiosks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Loss prevention&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.stoplift.com/"&gt;StopLift&lt;/a&gt;: With roots in MIT’s artificial intelligence labs, StopLift analyzes security video and POS data to distinguish between legitimate and fraudulent behavior at checkout. By applying advanced computer vision algorithms to existing camera feeds, StopLift’s ScanItAll system is capable of tracking items that pass through the checkout lane, associate them with POS, and flag suspicious activity as it happens.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vaak.co/vaakeye-store/"&gt;Vaak&lt;/a&gt;: Japanese startup Vaak provides a cloud-based computer vision system that monitors retail security camera footage for suspicious behavior. Already deployed in over 50 stores within Japan, VaakEye analyzes movement at more than 100 points across the body, automatically weighing behavior for suspiciousness. Once a customer reaches a certain threshold, the system sends an alert, along relevant video clips, to the appropriate staff member.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Behavioral analytics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://deepnorth.com/"&gt;Deep North&lt;/a&gt;: Deep North provides an analytics platform that builds real-time video intelligence for retailers based on video data from CCTV and other cameras that those retailers already use. Deep North’s proprietary technology captures parameters as daily entries and exits, customer occupancy, queue times, conversions and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://advertima.com/"&gt;Advertima&lt;/a&gt;: Based on information captured by visual sensors, Advertima’s platform provides retailers with a real-time view of what’s going on in physical stores as shoppers move through the space. The platform claims to only process minimal anonymized data, without storing any recordings or personal information for future use.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cosmose.co/"&gt;Cosmose&lt;/a&gt;: Cosmose provides a data analytics platform that analyzes foot traffic in physical stores to help predict customer behavior. They offer 3 main products: Cosmose Analytics, which tracks customers’ movements inside physical stores; Cosmose AI, a data analytics and prediction platform to help retailers create marketing campaigns and drive sales; and Cosmose Media, for targeting online ads.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Real-time visibility is essential to operating brick-and-mortar retail. That’s why more and more retailers are employing computer vision in an effort to increase operational efficiency, better the customer experience, and gain an edge over competitors. &lt;/p&gt;

&lt;p&gt;Early adopters are already seeing great results—according to estimates from RBC Capital Markets analysts, cashierless Amazon Go stores bring in about 50% more revenue on average than typical convenience stores.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visual-data-management-for-retail"&gt;
  &lt;/a&gt;
  Visual data management for retail
&lt;/h2&gt;

&lt;p&gt;Companies that build computer vision solutions for retail are constantly building and growing their ML training data sets. Today, most companies have to rely on internal tools or manual solutions like spreadsheets to do this. &lt;/p&gt;

&lt;p&gt;SiaSearch helps retail companies to simplify and speed up this process with a lightweight API that simplifies data exploration, visualization and selection. As a result, companies can reduce annotation costs and increase model performance.&lt;/p&gt;

&lt;p&gt;Interested in learning more? &lt;a href="https://www.siasearch.io/request-a-demo"&gt;Reach out to the SiaSearch team&lt;/a&gt; for a free proof of concept.&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>startup</category>
      <category>computerscience</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Data Science Complete Roadmap -2021</title>
      <author>Jjyygh</author>
      <pubDate>Mon, 09 Aug 2021 01:01:58 +0000</pubDate>
      <link>https://dev.to/jjyygh/data-science-complete-roadmap-2021-15io</link>
      <guid>https://dev.to/jjyygh/data-science-complete-roadmap-2021-15io</guid>
      <description>&lt;p id="2998"&gt;Around three years ago, I did an undergraduate degree in computer science. I chose to major in data science since it was so hyped up at that time.&lt;/p&gt;
&lt;p id="d6d8"&gt;I realized one year back that my degree did not equip me with the skills necessary to become a data scientist.&lt;/p&gt;
&lt;p id="b99f"&gt;And it cost my parents approximately $25K.&lt;/p&gt;
&lt;p id="9466"&gt;This was before I knew about online learning platforms like edX and Coursera.&lt;/p&gt;
&lt;p id="1ca5"&gt;I taught myself all the skills required to become a data scientist. And I learnt it all outside my degree — I learnt it online.&lt;/p&gt;
&lt;p id="e31a"&gt;Now, I&lt;span id="rmm"&gt;’&lt;/span&gt;m working as a data scientist for a data and AI company.&lt;/p&gt;
&lt;p id="c563"&gt;In an article I wrote last year, I provided a list of courses you could take to break into the data science industry.&lt;/p&gt;
&lt;p id="7681"&gt;I will refresh that list here, and provide you with a few more learning resources that will help you break into data science in 2021.&lt;/p&gt;
&lt;p id="7681"&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/a-complete-data-science-roadmap-in-2021/"&gt;Data Science Complete Roadmap 2021&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;




</description>
      <category>datascience</category>
    </item>
    <item>
      <title>10 Magical JavaScript Tips for Every Web Developer</title>
      <author>Jjyygh</author>
      <pubDate>Mon, 09 Aug 2021 00:56:03 +0000</pubDate>
      <link>https://dev.to/jjyygh/10-magical-javascript-tips-for-every-web-developer-1pnk</link>
      <guid>https://dev.to/jjyygh/10-magical-javascript-tips-for-every-web-developer-1pnk</guid>
      <description>&lt;p id="f6cc"&gt;In this article, we will discuss the 15 useful JavaScript tips for every web developer to save their valuable and precious time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p id="e1bb"&gt;I am always ready to learn although I do not always like being taught&lt;/p&gt;

&lt;p id="0fe5"&gt;— Winston Churchill&lt;/p&gt;


&lt;/blockquote&gt;
&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;h1 id="fa85"&gt;Tip 1. Flatten the array of the array&lt;/h1&gt;
&lt;p id="4e31"&gt;This tip will help you to flatten a deeply nested array of arrays by using &lt;code&gt;Infinity&lt;/code&gt; in &lt;code&gt;flat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;span id="e3aa"&gt;var array = [123, 500, [1, 2, [34, 56, 67, [234, 1245], 900]], 845, [30257]]&lt;/span&gt;&lt;span id="16da"&gt;//flatten array of array&lt;br&gt;array.flat(Infinity)&lt;/span&gt;&lt;span id="b0d8"&gt;// output:&lt;br&gt;// [123, 500, 1, 2, 34, 56, 67, 234, 1245, 900, 845, 30257]&lt;/span&gt;&lt;/pre&gt;
&lt;h1 id="902c"&gt;Tip 2. Easy Exchange Variables&lt;/h1&gt;
&lt;p id="ebf9"&gt;You probably swap the two variables using a third variable &lt;code&gt;temp&lt;/code&gt;. But this tip will show you a new way to exchange variables using destructuring.&lt;/p&gt;
&lt;pre&gt;&lt;span id="298c"&gt;//example 1&lt;/span&gt;&lt;span id="3316"&gt;var a = 6;&lt;br&gt;var b = 7;&lt;/span&gt;&lt;span id="b133"&gt;[a,b] = [b,a]&lt;/span&gt;&lt;span id="aa36"&gt;console.log(a,b) // 7 6&lt;/span&gt;&lt;/pre&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding Switch Statement In Javascript</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 09 Aug 2021 00:44:30 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/understanding-switch-statement-in-javascript-40i9</link>
      <guid>https://dev.to/ayabouchiha/understanding-switch-statement-in-javascript-40i9</guid>
      <description>&lt;p&gt;Hello, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, today, we're going to discuss switch statements in Javascript.&lt;/p&gt;

&lt;p&gt;The switch is a statement used to perform different operations based on multiple conditions (cases)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-a-switch-statement"&gt;
  &lt;/a&gt;
  Writing a switch statement
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value_1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;// do something&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value_2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;// do something&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value_3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;// do something&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// do something if the varaibale does not match any case&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  we need to know that if the variable matches multiple cases, the code block of the first matched case will be executed.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;case&lt;/strong&gt;: we use it to match against an expression, If it matches, the code block of this case will be executed. If It is not, The default code block will be executed.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;default&lt;/strong&gt;: is used to perform some operations if the variable does not match any case of the specified cases.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;break&lt;/strong&gt; (optional): is a statement associated with each case that orders the program to breaks out of the switch statement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Morocco&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Washington&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Morocco&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rabat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Egypt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cairo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Spain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Madrid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;France&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Paris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your country is not in our list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;on this code above, the program will log &lt;strong&gt;Rabat&lt;/strong&gt;, because the given country is equal to &lt;strong&gt;Morocco&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Rabat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example 2&lt;/p&gt;

&lt;p&gt;Let's delete all break statements;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Morocco&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Washington&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// break;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Morocco&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rabat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// break;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Egypt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cairo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// break;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Spain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Madrid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// break;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;France&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Paris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// break;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your country is not in our list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Rabat
Cairo
Madrid
Paris
your country is not in our list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We observe that the code blocks of the matched case which is Morocco, and the rest cases including the default one are executed due to forgetting to write break statements.&lt;/p&gt;

&lt;p&gt;Example 3&lt;/p&gt;

&lt;p&gt;Let's remove break statements that are only inside Morocco's and Egypt's case, Let's see what will happen :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Morocco&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Washington&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Morocco&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rabat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// break;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Egypt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cairo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// break;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Spain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Madrid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;France&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Paris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your country is not in our list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Rabat
Cairo
Madrid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We observe that the code blocks of Morocco's and Egypt's cases are executed because of not writing a break statement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion-1"&gt;
  &lt;/a&gt;
  conclusion 1
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  If the break statement is not written, the code block of the matched case and the rest cases including the default one, will be executed until the program finds a break statement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example 4:&lt;/p&gt;

&lt;p&gt;If we wrote the same code of example 3 and we replaced Spain's break statement with a return statement, the program will log the same thing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Morocco&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Washington&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Morocco&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rabat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// break;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Egypt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cairo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// break;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Spain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Madrid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;France&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Paris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your country is not in our list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Rabat
Cairo
Madrid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion-2"&gt;
  &lt;/a&gt;
  Conclusion 2
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  break statement is not required if the code block contains a return statement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example 5:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;you have to pay 100$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;you have to pay 80$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;you have to pay 60$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I don't know !&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;you have to pay 60$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the program logged "you have to pay 60$" because the price is 60. Let's do a small change by replacing the price cases with a string without changing the value, just adding a double or single quote :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;you have to pay 100$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;you have to pay 80$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;60&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;you have to pay 60$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I don't know !&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I don't know!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We observe that the code block of the default case is executed instead of the third case code block due to changing the datatype.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion-3"&gt;
  &lt;/a&gt;
  conclusion 3
&lt;/h3&gt;

&lt;p&gt;Switch cases use strict comparison which is ===, So the cases values should be the same type of the given expression.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Switch&lt;/strong&gt; statement use strict comparison.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;case&lt;/strong&gt;: we use it to match against an expression, If it matches, the code block of this case will be executed. If It is not, The default code block will be executed.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;default&lt;/strong&gt;: is used to perform some operations if the variable does not match any case of the specified cases.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;break&lt;/strong&gt; (optional): is a statement associated with each case that orders the program to breaks out of the switch statement. In addition, a break statement is not required if the code block contains a return statement.&lt;/li&gt;
&lt;li&gt;If the break statement is not written, the code block of the matched case and the rest cases including the default one, will be executed until the program finds a break or a return statement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you enjoyed reading this post&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested Posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/youtube-courses-projects-to-master-javascript-3lhc"&gt;Youtube Courses, Projects To Learn Javascript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/you-complete-guide-to-set-object-in-javascript-12gc"&gt;You Complete Guide To Set Object In Javascript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/all-js-string-methods-in-one-post-4h23"&gt;All JS String Methods In One Post!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//www.w3schools.com"&gt;www.w3schools.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//www.developer.mozilla.org"&gt;www.developer.mozilla.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Contact Me:&lt;/p&gt;

&lt;p&gt;email:&lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you enjoyed reading this post :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Updating My "Get On The Beers" Indicator To Track Vaccinations</title>
      <author>Mitch Pomery (he/him)</author>
      <pubDate>Sun, 08 Aug 2021 23:45:00 +0000</pubDate>
      <link>https://dev.to/mitchpommers/updating-my-get-on-the-beers-indicator-to-track-vaccinations-495b</link>
      <guid>https://dev.to/mitchpommers/updating-my-get-on-the-beers-indicator-to-track-vaccinations-495b</guid>
      <description>&lt;p&gt;Over 6 months have passed since I first made this indicator light, and while it was good during previous outbreaks, the increasing availability of vaccinations in Australia means runs of 0 cases is less important. More important is getting jabbed! So I updated my light to track daily jabs!&lt;/p&gt;

&lt;p&gt;The New Colour Code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No data yet: White&lt;/li&gt;
&lt;li&gt;Under 25,000 jabs in NSW today: Red&lt;/li&gt;
&lt;li&gt;Under 80,000 jabs: Blue&lt;/li&gt;
&lt;li&gt;Under 80,000 jabs: Green&lt;/li&gt;
&lt;li&gt;100,000 plus jabs: Party Mode!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#finding-the-data"&gt;
  &lt;/a&gt;
  Finding The Data
&lt;/h1&gt;

&lt;p&gt;Just like the original build, finding a data source to use was critical to making it work. Data NSW didn't have vaccination data available that I could find and I didn't want to go down the path of searching for different API's hoping that one would have the data I wanted.&lt;/p&gt;

&lt;p&gt;The COVID LIVE website has a page with &lt;a href="https://covidlive.com.au/report/daily-vaccinations/nsw"&gt;NSW Daily vaccinations&lt;/a&gt; on it in table form! There's also a nice JSON file with all the data that it's creator &lt;a href="https://twitter.com/migga"&gt;Migga&lt;/a&gt; told me about when he came across my indicator light the first time. The Electric Imp agent has a 2048kB memory limit though, so I can't load the full JSON file in. The page with the table on it will have to do!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnbIaP5o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqngtk5cexk26dbgzcsf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnbIaP5o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqngtk5cexk26dbgzcsf.png" alt="A screenshot of the COVID LIVE website showing the latest vaccination numbers for NSW."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The source code of the website makes it easy to extract the number I want to make the light colour decision on. I need to find the last column in the first table row (not table header) and understand that number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w7N8LgSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0vj6dpuxmufaghude5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w7N8LgSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0vj6dpuxmufaghude5r.png" alt="The source code for the COVID LIVE website showing the table of daily vaccinations that I am interested in."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#making-it-light-up"&gt;
  &lt;/a&gt;
  Making It Light Up
&lt;/h1&gt;

&lt;p&gt;I used the code from the &lt;a href="https://dev.to/mitchpommers/get-on-the-beers-indicator-using-electric-imp-17n8"&gt;previous version that tracked daily cases of known local transmission&lt;/a&gt; as the starting point. It has code on the device to set the lights colour based on the number it received. And the agent has code to make a web request and massage data in the response to determine the number and send it oto the device.&lt;/p&gt;

&lt;p&gt;I started with the device code (code that runs on the hardware), changing the numbers for each colour. Then I reversed the order of the logic. This meant it would check if it was going to be party mode first, then work back towards 0 for red, and finally treat any other response (i.e. negative numbers) as an indication to show white. The main driver behind reversing the order of the code was to make it so I only needed to disable party mode once, instead of disabling it for each colour. Once done this was the device code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once I had the device code updated (and had tested it by feeding it some hardcoded data) I moved on to writing the agent code (code that runs in the cloud).&lt;/p&gt;

&lt;p&gt;I renamed variables and functions to represent what the code would now be doing, then started writing code to parse the HTML that I was extracting the data from. To extract the data I:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Found the first line of the table rows&lt;/li&gt;
&lt;li&gt;Found the end of the opening tag for the net change column&lt;/li&gt;
&lt;li&gt;Removed everything prior to that&lt;/li&gt;
&lt;li&gt;Found the first closing tag (which could either be the a span or a td tag)&lt;/li&gt;
&lt;li&gt;Removed it and everything after it&lt;/li&gt;
&lt;li&gt;Checked if there was still an opening tag that needed removing&lt;/li&gt;
&lt;li&gt;Removed it if there was&lt;/li&gt;
&lt;li&gt;Checked if all I had left was a "-" character (indicating that there was no data for the day yet)&lt;/li&gt;
&lt;li&gt;If there wasn't, removed all commas from the string and turned it into an integer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tried thinking of other ways I could simplify the code for extracting this data, but there weren't any libraries or functions I could see that would help. This was the agent code once I was finished:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#closing"&gt;
  &lt;/a&gt;
  Closing
&lt;/h1&gt;

&lt;p&gt;Now that I have it updated and have tested that it is working (and fixed the edge cases I didn't think of when I was first coding it) I have it sitting somewhere a bit more visible on my desk, waiting for the day it first goes multicoloured.&lt;/p&gt;

&lt;p&gt;Personally, I'm hoping it does that on tomorrow because I am getting jabbed today (and that's when today's numbers will be shown).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---EN7tuxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mayzxknwrmpcmr5oteko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---EN7tuxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mayzxknwrmpcmr5oteko.png" alt='"Beers?" indicator lit blue showing that there were between 25000 and 80000 vaccinations administered in NSW. The textable light (lit blue, pink then white) and the textable cat (showing a message of "Goodnight") are also visible'&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>electronics</category>
      <category>electricimp</category>
    </item>
    <item>
      <title>OOP is Ruff!</title>
      <author>Thomas(Tripp) White </author>
      <pubDate>Sun, 08 Aug 2021 22:16:34 +0000</pubDate>
      <link>https://dev.to/turpp/oop-is-ruff-1jdo</link>
      <guid>https://dev.to/turpp/oop-is-ruff-1jdo</guid>
      <description>&lt;p&gt;I remembered when I first learned OOP. I was coming from a Functional Programming background and this new way of thinking was giving me some troubles. After much practice once I got a grasp on OOP I love its utility and capability. In this article I want to give you a basic overview of OOP as it relates to real life. My puppers Ada and Taz will help me explain what OOP is and how the 4 pillars of OOP work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-oop"&gt;
  &lt;/a&gt;
  What is OOP?
&lt;/h2&gt;

&lt;p&gt;According to Wikipedia “Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects", which can contain data and code: data in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods)". A programming paradigm, objects, procedures???? What does that even mean? &lt;/p&gt;

&lt;p&gt;Let's break this down! OOP is basically a way to structure your code to think more like we do as humans. As humans we think in an OOP way every day. If I told you I have a dog what do you think about? What is its name? Is it a boy or girl? What color is it? We know what a dog is and we know that every dog has certain characteristics. Relating this to our wonderful wikipedia definition: my dog is our object and their color, name etc are all different attributes or properties of a dog object. We also know that dogs like to bark and go for walks. These are all different actions/procedures or &lt;code&gt;methods&lt;/code&gt; that dogs preform. We associate all these topics naturally but a computer doesn’t. This is where OOP comes in. We must structure our code in a way that a computer can make the same connections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dog1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Ada&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dog1Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Black&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Tan&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dog1Breed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Bernedoodle&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dog2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Taz&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dog2Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Black&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;White&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dog2Breed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Bernedoodle&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect I just told the computer about my dogs. It will forever know who and what they are right? Unfortunately not. All we are doing above is taking a variable and giving it some name and associating it with some value. The computer only sees dog1 and thinks of the value Ada. It has not idea what Ada’s color or breed is. Sure I can call dog1Color to get the correct color, but the computer has not idea they are associated with each other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;breed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we use OOP we create a classes and objects. A class is just a blueprint for the computer to call upon. In my dog class above the computer now knows that a dog has a name, color and breed. So whenever I tell the computer I have a dog, It starts to ask the same questions as we did earlier. Whats the dogs name? Whats the dog’s color? Whats the dog’s breed? This is the first step to get the computer thinking similar to us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ada&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Ada&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Black&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Tan&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Bernedoodle&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;taz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Taz&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Black&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;White&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Bernedoodle&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now instead of having a dog1 and dog2 variable we now have two dog objects. To the computer &lt;code&gt;ada&lt;/code&gt; and &lt;code&gt;taz&lt;/code&gt; are both objects of the dogs class. The computer then can make the same connections as we do. The computer knows that ada is black and tan and is a Bernedoodle! This is the basics of OOP. We create a class that acts as a blue print and then create objects of that class. This allows our program to think more organically like us, but wait there is more! There are 4 main principles of OOP. Ada and Taz will help give us a brief overview of each.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-pillars-of-oop"&gt;
  &lt;/a&gt;
  4 Pillars of OOP
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#abstraction"&gt;
  &lt;/a&gt;
  Abstraction
&lt;/h3&gt;

&lt;p&gt;Abstraction is a beautiful thing. It allows us to hide away chunks of code. This is beneficial to keep our code clean and gives us the ability to share code easier. If there was no abstraction we would have to know how everything worked and in what order. An example of abstraction is when I take Ada and Taz for a walk. In order to take them for a walk, I have to grab their leash, put on their collars, grab the poop bags, and make them sit at the door before I let them out. Then we walk and when I get back I have to put everything up. After all this, the dogs are happy and tired as a result. If this was a dog game and I wanted to increase their happiness and make them tired I just want to call the walk method on my dog objects. I don’t care how it works or all the logic. I just need the result. Abstraction allows us to do this. We can create a walk method on our dog class. Inside this method has all the details but when we call this method on any of our dog objects we just see the result we are looking for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h3&gt;

&lt;p&gt;So we know that Ada and Taz are dogs and our computer knows that a dog has a color, name, and breed. It has no idea about anything else. We know that dogs are also mammals. This means by default, dogs have hair/fur, are warm-blooded, and fed milk as a puppy. We can add all these properties to our dog class but what if we wanted to teach our computer about a cow or cat? We would have to do the same “mammal” properties for each one. With OOP we can inherit things from other classes. So if we create a mammal class that has all those properties then we can have our dog, cat and cow class inherit those properties. This way the computer knows that a cat, cow, and dog all have hair/fur, warm-blooded, and fed milk when young. It also knows that a dog has a separate list of properties that makes it different from the other classes. This creates relationships for the computer the same we do when we compare a dog to a cow!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encapsulation"&gt;
  &lt;/a&gt;
  Encapsulation
&lt;/h3&gt;

&lt;p&gt;Encapsulation occurs when you keep something private inside the class. Ada and Taz are smart dogs. They listen when I tell them to sit, stay, lay down, heal, and shake. One thing I have no control over is their bark. They have a mind of there own when it comes to barking. Sometimes its random other times it happens when I do something. This is an example of encapsulation. In our dog class we can create a private method called bark. This method makes our dog bark. Encapsulation keeps me the human class from calling the bark method on Ada and Taz. It is private to just that class. I do know whenever I take Ada and Taz for a walk they get  super excited. While I am getting them ready they always bark, especially if I take to long to put my shoes on! In our dog class we can use the private bark method inside of our walk method. So every time I go for a walk the bark method will be called but I can’t make them bark on command since it is a private method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#polymorphism"&gt;
  &lt;/a&gt;
  Polymorphism
&lt;/h3&gt;

&lt;p&gt;Polymorphism gives us even more control over our classes and their inheritance. So far we know that when a child class inherits from its parents class its gets access to all the public properties and methods inside its parents class. Polymorphism allows us to inherit these properties  and make them unique to the child class. An example of this is hair. Our parent mammal class has a hair property so our child dog class inherits this. Our computer knows that a dog has hair just like a cow has hair. This is true, but the type of hair is very different. With polymorphism we can make sure that the hair of our dog is fluffy while the hair on our cow is more of a corse hide. Now our computer knows even more information about our classes. It knows that a cow and dog both have hair but with polymorphism it now knows that the hair is different for each class.&lt;/p&gt;

&lt;p&gt;I hope that Ada and Taz shined some light on OOP for you. OOP is not as complicated as it seems. You think in an OOP way every day but don’t realize it because it is second nature. OOP is just the art of getting the computer to think in the same manner. I hope this real life example helps clear up any confusion with OOP. Sometimes it helps to relate complex topics to real world &lt;code&gt;objects&lt;/code&gt; ; ).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>oop</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Set Up a Node.js Server and MongoDB Database</title>
      <author>Natalie Pinnock</author>
      <pubDate>Sun, 08 Aug 2021 20:33:44 +0000</pubDate>
      <link>https://dev.to/natpinnock/how-to-set-up-a-node-js-server-and-mongodb-database-318b</link>
      <guid>https://dev.to/natpinnock/how-to-set-up-a-node-js-server-and-mongodb-database-318b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background-to-the-project"&gt;
  &lt;/a&gt;
  Background to the Project 🔎
&lt;/h2&gt;

&lt;p&gt;Having spend some time on my bootcamp working on JavaScript and React, we were given some time to explore our own pathway's based on what interested us the most. For me it made sense to start looking at the back-end, with a view to potentially building my first full stack site. &lt;/p&gt;

&lt;p&gt;First I needed to decide which stack to focus on, and after a bit of research I settled on MERN (MongoDB, Express, React and Nodejs). This made the most sense as I already had experience of React. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The Project 📅
&lt;/h2&gt;

&lt;p&gt;The example used in this article refers to a lesson planning project that has similar functionality to a blog site. Once the main features are setup it could ba adapted for many purposes. The user will be able to complete a from with the details of their lesson, access the currently planned lessons to view, and update them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-one-setting-up-the-front-end"&gt;
  &lt;/a&gt;
  Step One - Setting Up The Front End 🚪
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I am going to focus on the back end in this article, so I'm not going into detail about the React part of this project here.&lt;/em&gt;&lt;br&gt;
The first step is to complete the front end - if using React you will need your components, state and router set up. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-setting-up-a-server"&gt;
  &lt;/a&gt;
  Step 2 - Setting Up A Server 🖥️
&lt;/h2&gt;

&lt;p&gt;Now out front end is set up, it's time to make our server using Node and Express. We will then create a series of HTTP endpoints to cover GET and POST requests. We'll use these to access the list of lessons, a specific lesson, and also to update a current lesson. &lt;/p&gt;

&lt;p&gt;Node is an open source server environment that allows us to run JavaScript on the backend. &lt;/p&gt;

&lt;p&gt;To initialise our backend, we need to create a new folder, in this case called backend, with an server.js folder inside (I placed this outside the front-end folder). &lt;/p&gt;

&lt;p&gt;Once this is done, we will create a package.json file using the following command in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will then need to to isntall the following packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install express cors mongoose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;express&lt;/strong&gt; is a web framework for Node.js&lt;br&gt;
&lt;strong&gt;cors&lt;/strong&gt; provides an express middleware that helps us to enable cors with various options (here it will allow requests from our client domain to our server domain)&lt;br&gt;
&lt;strong&gt;mongoose&lt;/strong&gt; is a Node.js framework that allows us to access MongoDB (where we will create our database) in an object-oriented way. &lt;/p&gt;

&lt;p&gt;The last package we will need to install is nodemon:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each time we start running out server we will use the command &lt;code&gt;nodemon server&lt;/code&gt; and this will mean that any changes we make will be taken into account as soon as they are saved. using &lt;code&gt;install -g&lt;/code&gt; means that it is installed globally on our system. &lt;/p&gt;

&lt;p&gt;Now we have all our dependencies installed it's time to set up our server in our server.js file. We will create an instance of the express server, require the cors middleware and set up PORT 4000 for the server to listen to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const app = express();
const cors = require('cors');
const PORT = 4000;

app.use(cors());

app.listen(PORT, function() {
    console.log("Server is running on Port: " + PORT);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the server with &lt;code&gt;nodemon server&lt;/code&gt; should now show the console log "Server is running on Port: 4000", and we know our server is up and running!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-setting-up-our-mongodb-database-with-mongodb-atlas"&gt;
  &lt;/a&gt;
  Step 3 - Setting up our MongoDB database with MongoDB Atlas 🗂️
&lt;/h2&gt;

&lt;p&gt;MongoDB is a cloud database and can be set up easily with a free account. &lt;a href="https://www.freecodecamp.org/news/get-started-with-mongodb-atlas/"&gt;This FreeCodeCamp tutorial gives an excellent overview on setting up the database.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once our database is set up, we need to connect our database to our server. On the clusters page, click the connect button for your cluster and then select the "connect your application" option on the pop up menu. Copy the URI given as we will need it in our code. &lt;/p&gt;

&lt;p&gt;To connect our database to our server we need the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dbURI =
  "**insert your URI from MongoDB here, remembering to replace the password and database info for your specific database**";

mongoose
  .connect(dbURI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() =&amp;gt; {
    app.listen(PORT);
    console.log("Server is running on Port: " + PORT);
  })
  .catch((err) =&amp;gt; {
    console.log(err);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you can see both console logs then you know the database has been connected correctly!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#providing-mongodb-with-a-schema"&gt;
  &lt;/a&gt;
  Providing MongoDB with a Schema 📓
&lt;/h2&gt;

&lt;p&gt;Before we start submitting data to our database, we need it to have a rough idea of what to expect first, these come in the form of Mongoose schemas. &lt;/p&gt;

&lt;p&gt;In you backend folder, create a &lt;em&gt;yourdata&lt;/em&gt;.model.js file. For example, my lesson planning app has the schema file lesson.model.js. The schema should outline the general form of the data, and what types of data are to be included. Here is my lesson schema:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require("mongoose");
const Schema = mongoose.Schema;

let Lesson = new Schema({
  lesson_name: {
    type: String,
  },
  lesson_date: {
    type: String,
  },
  lesson_time: {
    type: String,
  },
  lesson_details: {
    type: String,
  },
});

module.exports = mongoose.model("Lesson", Lesson);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#server-endpoints"&gt;
  &lt;/a&gt;
  Server Endpoints 🔚
&lt;/h2&gt;

&lt;p&gt;Back in server.js, we now need to setup our server endpoints using express:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use("/lessons", lessonRoutes)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that the router will take control of all HTTP requests that start with the path /lessons. You will notice that &lt;code&gt;res.json()&lt;/code&gt; or similar appears somewhere in each request. . This ensures our results are returned in json format. &lt;/p&gt;

&lt;p&gt;We will be using the GET and POST methods here. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#route-1-get-all-items-from-the-database"&gt;
  &lt;/a&gt;
  Route 1 - GET all items from the database:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lessonRoutes.route('/').get(function(req, res) {
    Lesson.find(function(err, lessons) {
        if (err) {
            console.log(err);
        } else {
            res.json(lessons);
        }
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#route-2-get-single-item-from-the-database"&gt;
  &lt;/a&gt;
  Route 2 - GET single item from the database:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lessonRoutes.route('/:id').get(function(req, res) {
    let id = req.params.id;
    Lesson.findById(id, function(err, lesson) {
        res.json(lesson);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#route-3-post-a-new-item-to-the-database"&gt;
  &lt;/a&gt;
  Route 3 - POST a new item to the database:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lessonRoutes.route("/add").post(function (req, res) {
  let lesson = new Lesson(req.body);
  lesson
    .save()
    .then((lesson) =&amp;gt; {
      res.status(200).json({ lesson: "lesson added successfully" });
    })
    .catch((err) =&amp;gt; {
      res.status(400).send("adding new lesson failed");
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#route-4-update-an-existing-lesson-with-post"&gt;
  &lt;/a&gt;
  Route 4 - Update an existing lesson with POST:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lessonRoutes.route("/update/:id").post(function (req, res) {
  Lesson.findByIdAndUpdate(
    { _id: req.params.id },
    {
      lesson_name: req.body.lesson_name,
      lesson_date: req.body.lesson_date,
      lesson_time: req.body.lesson_time,
      lesson_details: req.body.lesson_details,
    },
    function (err, result) {
      if (err) {
        res.send(err);
      } else {
        res.send(result);
      }
    }
  );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is slightly more indepth as it involves retreiving the id of the current lesson, then posting new values onto the schema. &lt;/p&gt;

&lt;p&gt;At this stage a tool such as Postman could be used to check the GET and POST requests - we need these to be working properly before moving on. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-axios-to-link-the-front-end-to-the-backend"&gt;
  &lt;/a&gt;
  Using Axios to Link the front end to the backend 🔗
&lt;/h2&gt;

&lt;p&gt;Now it's time to connect the front end to the back end. The Axios library allows us to send our HTTP request from the front end to our chosen endpoint on the server. To install Axios, use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are ready to write our requests into their components as necesssary. Use the following import statement at the top of the component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import axios from "axios;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An axios GET request is made by calling &lt;code&gt;axios.get()&lt;/code&gt;. The request takes in one parameter, - the URI for the corresponding endpoint. &lt;/p&gt;

&lt;p&gt;Here are the GET requests used in the lesson planner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;axios
        .get("http://localhost:4000/lessons/" + id)
        .then((response) =&amp;gt; {
          const lessonData = response.data;
          updateSpecificLesson(lessonData);
        })
        .catch(function (error) {
          console.log(error);
        });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;axios
      .get("http://localhost:4000/lessons/")
      .then((response) =&amp;gt; {
        const allData = response.data;
        updateLessonList(allData);
      })
      .catch(function (error) {
        console.log(error);
      });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An axios POST request is made by calling &lt;code&gt;axios.post()&lt;/code&gt;. The request takes in two parameters - the URI for the corresponding endpoint, and the data to be passed to the database (object). &lt;/p&gt;

&lt;p&gt;Here are the POST requests used in the lesson planner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  axios.post("http://localhost:4000/lessons/add", newLesson).then(
      (response) =&amp;gt; {
        console.log(response);
        updateFormData(initialFormData);
        window.location = "/";
      },
      (error) =&amp;gt; {
        console.log(error);
      }
    );
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  axios.post("http://localhost:4000/lessons/add", newLesson).then(
      (response) =&amp;gt; {
        console.log(response);
        updateFormData(initialFormData);
        window.location = "/";
      },
      (error) =&amp;gt; {
        console.log(error);
      }
    );
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#resources-used"&gt;
  &lt;/a&gt;
  Resources Used 📖
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=zb3Qk8SG5Ms&amp;amp;list=PL4cUxeGkcC9jsz4LDYc6kv3ymONOKxwBU"&gt;NetNinja's Node.JS course&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/qvBZevK1HPo"&gt;CodingTheSmartWay's MERN stack tutorial&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.freecodecamp.org/news/how-to-use-axios-with-react/#how-to-make-a-delete-request"&gt;FreeCodeCamp's guide to using Axios in React&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code 🖱️
&lt;/h2&gt;

&lt;p&gt;The github repo for the final project can be found &lt;a href="https://github.com/SchoolOfCode/w18_new-technology-example-natpinnock"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts 💭
&lt;/h2&gt;

&lt;p&gt;I hope to add more features to this project in the future, such as a more in-depth form to create a lesson, the ability to delete a lesson, and have a calendar view where the user can see the planned lessons. Keep your eyes peeled! 👀&lt;/p&gt;

&lt;p&gt;If you got this far thank you for reading my first DEV article 🎉&lt;/p&gt;

&lt;p&gt;If you spot any errors or have any questions then please let me know in the comments!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>JavaScript Cheatsheet from beginners to advance...</title>
      <author>Anmol Raj</author>
      <pubDate>Sun, 08 Aug 2021 20:29:58 +0000</pubDate>
      <link>https://dev.to/anmolraj/javascript-cheatsheet-for-beginners-to-advance-4en4</link>
      <guid>https://dev.to/anmolraj/javascript-cheatsheet-for-beginners-to-advance-4en4</guid>
      <description>&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#javascript-basics"&gt;
  &lt;/a&gt;
  JavaScript Basics
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Set of JavaScript basic syntax to add, execute and write basic programming paradigms in Javascript &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On Page Script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Adding internal JavaScript to HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script type="text/javascript"&amp;gt; //JS code goes here &amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;External JS File&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Adding external JavaScript to HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="filename.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JavaScript Function syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function nameOfFunction () {
// function body 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;DOM Element&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Changing content of a DOM Element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById("elementID").innerHTML = "Hello 
World!";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Output&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This will print the value of a in JavaScript console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(a);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#conditional-statements"&gt;
  &lt;/a&gt;
  Conditional Statements
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Conditional statements are used to perform operations based on some conditions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;If Statement&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The block of code to be executed, when the condition specified is true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition) {
// block of code to be executed if the condition is true
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;If-else Statement&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the condition for the if block is false, then the else block will be executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition) {
// block of code to be executed if the condition is true
} else {
// block of code to be executed if the condition is false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Else-if Statement&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A basic if-else ladder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition1) {
// block of code to be executed if condition1 is true
} else if (condition2) {
// block of code to be executed if the condition1 is false and condition2 is true
} else {
// block of code to be executed if the condition1 is false and condition2 is false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Switch Statement&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Switch case statement in JavaScript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch(expression) {
case x:
// code block
break;
case y:
// code block
break;
default:
// code block
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#iterative-statements-loops"&gt;
  &lt;/a&gt;
  Iterative Statements (Loops)
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Iterative statement facilitates programmer to execute any block of code lines repeatedly and can be controlled as per conditions added by the programmer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;For Loop&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For loop syntax in javascript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (statement 1; statement 2; statement 3) {
// code block to be executed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;While Loop&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Runs the code till the specified condition is true&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while (condition) {
// code block to be executed
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do While Loop&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A do while loop is executed at least once despite the condition being true or false&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;do {
// run this code in block
i++;
} while (condition);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;The string is a sequence of characters that is used for storing and managing text data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;charAt method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Returns the character from the specified index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.charAt(3)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;concat method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Joins two or more strings together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str1.concat(str2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;index of method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Returns the index of the first occurrence of the specified character from the string else -1 if not found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.indexOf('substr')

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;match method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Searches a string for a match against a regular expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.match(/(chapter \d+(\.\d)*)/i;)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;replace method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Searches a string for a match against a specified string or char and returns a new string by replacing the specified values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str1.replace(str2)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;search method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Searches a string against a specified value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.search('term')

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;split method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Splits a string into an array consisting of substrings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.split('\n')

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;substring method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Returns a substring of a string containing characters from the specified indices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.substring(0,5)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;The array is a collection of data items of the same type. In simple terms, it is a variable that contains multiple values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;variable&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Containers for storing data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var fruit = ["element1", "element2", "element3"];

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;concat method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Joins two or more arrays together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;concat()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;indexOf method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Returns the index of the specified item from the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;indexOf()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;join method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Converts the array elements to a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;join()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;pop method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Deletes the last element of the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pop()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;reverse method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This method reverses the order of the array elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;reverse()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;sort method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sorts the array elements in a specified manner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sort()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;toString method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Converts the array elements to a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;toString()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;valueOf method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;returns the relevant Number Object holding the value of the argument passed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;valueOf()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#number-methods"&gt;
  &lt;/a&gt;
  Number Methods
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;JS math and number objects provide several constant and methods to perform mathematical operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;toExponential method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Converts a number to its exponential form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;toExponential()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;toPrecision method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Formats a number into a specified length.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;toPrecision()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;toString method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Converts an object to a string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;toString()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;valueOf method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Returns the primitive value of a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;valueOf()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#maths-methods"&gt;
  &lt;/a&gt;
  Maths Methods
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;ceil method&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Rounds a number upwards to the nearest integer, and returns the result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ceil(x)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;exp method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Returns the value of E^x.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exp(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;log method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Returns the logarithmic value of x.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;log(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;pow method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Returns the value of x to the power y.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pow(x,y)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;random method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Returns a random number between 0 and 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;random()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;sqrt method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Returns the square root of a number x&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sqrt(x)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#dates"&gt;
  &lt;/a&gt;
  Dates
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Date object is used to get the year, month and day. It has methods to get and set day, month, year, hour, minute, and seconds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Pulling Date from the Date object&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Returns the date from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getDate()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Pulling Day from the Date object&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Returns the day from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getDay()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Pulling Hours from the Date object&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Returns the hours from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getHours()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Pulling Minutes from the Date object&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Returns the minutes from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getMinutes()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Pulling Seconds from the Date object&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Returns the seconds from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getSeconds()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Pulling Time from the Date object&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Returns the time from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getTime()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#mouse-events"&gt;
  &lt;/a&gt;
  Mouse Events
&lt;/h3&gt;

&lt;p&gt;Any change in the state of an object is referred to as an Event. With the help of JS, you can handle events, i.e., how any specific HTML tag will work when the user does something.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;click&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fired when an element is clicked&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('click', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;oncontextmenu&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fired when an element is right-clicked&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('contextmenu', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;dblclick&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fired when an element is double-clicked&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('dblclick', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;mouseenter&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fired when an element is entered by the mouse arrow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('mouseenter', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;mouseleave&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fired when an element is exited by the mouse arrow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('mouseleave', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;mousemove&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fired when the mouse is moved inside the element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('mousemove', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#keyboard-events"&gt;
  &lt;/a&gt;
  Keyboard Events
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;keydown&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fired when the user is pressing a key on the keyboard&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('keydown', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;keypress&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fired when the user presses the key on the keyboard&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('keypress', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;keyup&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fired when the user releases a key on the keyboard&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('keyup', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#errors"&gt;
  &lt;/a&gt;
  Errors
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Errors are thrown by the compiler or interpreter whenever they find any fault in the code, and it can be of any type like syntax error, run-time error, logical error, etc. JS provides some functions to handle the errors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;try and catch&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Try the code block and execute catch when err is thrown&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;try {
Block of code to try
}
catch(err) {
Block of code to handle errors
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Window Methods&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Methods that are available from the window object&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;alert method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Used to alert something on the screen&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alert()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;blur method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The blur() method removes focus from the current window.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;blur()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;setInterval&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Keeps executing code at a certain interval&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setInterval(() =&amp;gt; {
// Code to be executed
}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;setTimeout&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Executes the code after a certain interval of time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setTimeout(() =&amp;gt; {
// Code to be executed
}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;close&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Window. close() method closes the current window&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;confirm&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The window.confirm() instructs the browser to display a dialog with an optional message, and to wait until the user either confirms or cancels&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.confirm('Are you sure?')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;open&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Opens a new window&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.open("https://www.anmolraj.com");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;prompt&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prompts the user with a text and takes a value. Second parameter is the default value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var name = prompt("What is your name?", "Anmol");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;scrollBy&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.scrollBy(100, 0); // Scroll 100px to the right
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;scrollTo&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Scrolls the document to the specified coordinates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.scrollTo(500, 0); // Scroll to horizontal position 500
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#clearinterval"&gt;
  &lt;/a&gt;
  clearInterval
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clears the setInterval. var is the value returned by setInterval call&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clearInterval(var)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;clearTimeout&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Clears the setTimeout. var is the value returned by setTimeout call&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clearTimeout(var)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;stop&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stops the further resource loading&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#queryget-elements"&gt;
  &lt;/a&gt;
  Query/Get Elements
&lt;/h3&gt;

&lt;p&gt;The browser creates a DOM (Document Object Model) whenever a web page is loaded, and with the help of HTML DOM, one can access and modify all the elements of the HTML document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;querySelector&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Selector to select first matching element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector('css-selectors')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;querySelectorAll&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A selector to select all matching elements&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelectorAll('css-selectors', ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;getElementsByTagName&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Select elements by tag name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementsByTagName('element-name')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;getElementsByClassName&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Select elements by class name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementsByClassName('class-name')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Get Element by Id&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Select an element by its id&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById('id')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#creating-elements"&gt;
  &lt;/a&gt;
  Creating Elements
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create new elements in the DOM&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;createElement&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Create a new element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.createElement('div')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;createTextNode&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Create a new text node&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.createTextNode('some text here')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hi friends if like it then please like , Share &amp;amp; follow for more. Thank you 🙏 &lt;/p&gt;

</description>
      <category>productivity</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>sudoku solver - Some additions</title>
      <author>Bartosz Raubo</author>
      <pubDate>Sun, 08 Aug 2021 19:58:12 +0000</pubDate>
      <link>https://dev.to/bmraubo/sudoku-solver-some-additions-436a</link>
      <guid>https://dev.to/bmraubo/sudoku-solver-some-additions-436a</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/qxcross/sudoku-solver"&gt;Code is here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#august-additions"&gt;
  &lt;/a&gt;
  August Additions
&lt;/h2&gt;

&lt;p&gt;So, now that the sudoku algo is in place, it would be nice to make it usable. I want to add a couple of things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making it pretty - give the display of the puzzles some love&lt;/li&gt;
&lt;li&gt;System for inputting sudokus you find online/in RL.&lt;/li&gt;
&lt;li&gt;Ability to store puzzles (and solutions)&lt;/li&gt;
&lt;li&gt;Ability to have a little demo mode&lt;/li&gt;
&lt;li&gt;Diplay how long it took to find the solution.&lt;/li&gt;
&lt;li&gt;and a menu system to tie it all together.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#making-it-pretty"&gt;
  &lt;/a&gt;
  Making it pretty
&lt;/h3&gt;

&lt;p&gt;First thing I touched - just a small function Sudoku.display_board() to print out the information in a visually pleasing manner based on an example I found through Google Image search.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def display_board(puzzle):
        print('\n')
        print('+-------+-------+-------+')
        for y in range(0, len(puzzle)):
            print(f'| {puzzle[y][0]} {puzzle[y][1]} {puzzle[y][2]} ' +
                    f'| {puzzle[y][3]} {puzzle[y][4]} {puzzle[y][5]} ' +
                    f'| {puzzle[y][6]} {puzzle[y][7]} {puzzle[y][8]} |')
            if y in [2, 5, 8]:
                print('+-------+-------+-------+')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way the func is designed allows for partial boards to be printed - this was kind of accidental but helps with the feedback of information when inputting the board - see below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#puzzle-input"&gt;
  &lt;/a&gt;
  Puzzle Input
&lt;/h3&gt;

&lt;p&gt;So in an ideal world, I would just want to be able to take a picture of a sudoku, or screenshot, and have that be solved. But that is a little beyond me for now.&lt;/p&gt;

&lt;p&gt;Instead, I used an input function that asks you to type in the puzzle row by row, with 0 representing missing values. It is not the most graceful solution perhaps, but it does allow me to quite easily feed in the input into the solution function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def input_puzzle():
        puzzle = []
        input_msg = 'Input the known values.\nIf value is blank, input 0.\nEg. 530070000\n'
        while len(puzzle) &amp;lt; 9:
            valid = False
            while not valid:
                new_row = input(input_msg)
                puzzle.append(Sudoku.convert_row(new_row))
                valid = Sudoku.validate_row(new_row, puzzle)
                if not valid:
                    puzzle.pop()
                    print('Try Again\n\n')
        return puzzle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Convert_row turns the input into a list.&lt;/p&gt;

&lt;p&gt;The one thing I regret is having to validate each row after it is typed. It is very annoying because most of the time I got the row right, and repeatedly validating got tedious. Then again, when a mistake is made, it mean not only having to start the puzzle again, but also having to complete input of any further rows. Which would be really shit. So its a judgement call between a small amount of constant annoyance or rare catastrophes. Hmmm.&lt;/p&gt;

&lt;p&gt;You can't even press Enter several times... that will just register the row as incomplete. Perhaps it should recognise that if you're just tapping Enter, you've given up on the process. &lt;/p&gt;

&lt;p&gt;[Rest later...]&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>sudoku</category>
    </item>
  </channel>
</rss>
