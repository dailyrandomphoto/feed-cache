<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Explore Geopolitical data from GDELT
</title>
      <author>Shreyas Soni</author>
      <pubDate>Wed, 06 Oct 2021 18:15:11 +0000</pubDate>
      <link>https://dev.to/sonishreyas/explore-geopolitical-data-from-gdelt-2hnm</link>
      <guid>https://dev.to/sonishreyas/explore-geopolitical-data-from-gdelt-2hnm</guid>
      <description>&lt;p&gt;In this blog, we will explore the geopolitical data from GDELT and see how that data can be used in the analysis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-gdelt"&gt;
  &lt;/a&gt;
  What is GDELT?
&lt;/h2&gt;

&lt;p&gt;The GDELT Project created by Kalev H. Leetaru monitors the world's news from every country in over 100 languages and identifies the people, locations, organizations, themes, sources, emotions, counts, quotes, images, and events driving our global society.&lt;/p&gt;

&lt;p&gt;In this blog, we will have a look at the Events database of GDELT and how this data can be used for analysis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#event-database"&gt;
  &lt;/a&gt;
  Event Database
&lt;/h2&gt;

&lt;p&gt;The GDELT Event Database catalog over 20 main categories and more than 300 subcategories. Each category is given a particular cameo code. We will be looking into the 20 main cameo codes. That includes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make Public Statement&lt;/li&gt;
&lt;li&gt;Appeal&lt;/li&gt;
&lt;li&gt;Express intent to cooperate&lt;/li&gt;
&lt;li&gt;Consult&lt;/li&gt;
&lt;li&gt;Engage in diplomatic cooperation&lt;/li&gt;
&lt;li&gt;Engage in material cooperation&lt;/li&gt;
&lt;li&gt;Provide aid&lt;/li&gt;
&lt;li&gt;Yield&lt;/li&gt;
&lt;li&gt;Investigate&lt;/li&gt;
&lt;li&gt;Demand&lt;/li&gt;
&lt;li&gt;Disapprove&lt;/li&gt;
&lt;li&gt;Reject&lt;/li&gt;
&lt;li&gt;Threaten&lt;/li&gt;
&lt;li&gt;Protest&lt;/li&gt;
&lt;li&gt;Exhibit military posture&lt;/li&gt;
&lt;li&gt;Reduce relations&lt;/li&gt;
&lt;li&gt;Coerce&lt;/li&gt;
&lt;li&gt;Assault&lt;/li&gt;
&lt;li&gt;Fight&lt;/li&gt;
&lt;li&gt;Use unconventional mass violence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see how we can get the data for these events for all countries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-the-data"&gt;
  &lt;/a&gt;
  How to get the data?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;BigQuery
You can query any data you want according to your need. Here is an example of a query.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select SQLDATE,EventRootCode,Actor1CountryCode,NumMentions from gdeltv2.events;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using gdelt python package&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation: &lt;code&gt;pip install gdelt&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Call the gdelt version 2 database.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gd2 = gdelt.gdelt(version=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Use gd2 object to search for the data of a given date and set table to events.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;results = gd2.Search(['2020-01-01'],table='events',coverage=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#processing-the-data-to-get-timeseries-data-for-all-countries"&gt;
  &lt;/a&gt;
  Processing the data to get Timeseries data for all countries
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Load the data into the notebook.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df = pd.read_csv("gdelt.csv");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The data output of the gdelt object has all the columns present in the events database. Now filter it to the columns necessary, i.e., SQLDATE, EventRootCode, Actor1CountryCode, NumMentions
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;results = results[['SQLDATE','EventRootCode','NumMentions','Actor1CountryCode']]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Convert the SQLDATE format from 'YYYYMMDD' to 'YYYY-MM-DD'.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;results['SQLDATE'] = results['SQLDATE'].apply(lambda x: pd.to_datetime(str(x), format='%Y-%m-%d'))            
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Aggregate the data based on SQLDATE, EventRootCode, and Actor1CountryCode.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;results = results.groupby(['SQLDATE','EventRootCode','Actor1CountryCode']).agg('sum').reset_index()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#data-analysis-and-visualization"&gt;
  &lt;/a&gt;
  Data Analysis and Visualization
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mapping a Line Chart of a particular Cameo code for the country over time.&lt;br&gt;
Example: Protest in USA (Aggregated to Weekly basis)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1VbZLHfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/538qmq746r0pxo7y1v21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VbZLHfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/538qmq746r0pxo7y1v21.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mapping Top Cameo codes in a country based on the Number of Mentions of the particular cameo code.&lt;br&gt;
Example: Top Trends in USA (Last Week)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qhX-NyW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o83j465hua7r8udx6mor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhX-NyW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o83j465hua7r8udx6mor.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mapping Top Countries in a particular cameo code based on the Number of Mentions of the particular cameo code in the country.&lt;br&gt;
Example: Top Countries in Protest (Last Week)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KWw9Oyp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eejebzd5yi58hugr471.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWw9Oyp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eejebzd5yi58hugr471.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plot a choropleth map for a particular cameo code.&lt;br&gt;
Example: Protest (Today)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dazr6iSa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8kc0hnua6twynecf301.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dazr6iSa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8kc0hnua6twynecf301.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#technology-used"&gt;
  &lt;/a&gt;
  Technology Used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Pandas&lt;/li&gt;
&lt;li&gt;Plotly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code: &lt;a href="https://colab.research.google.com/drive/11gFRPtbPK7fz6OOUR7dYtmtdnN-O_pWM?usp=sharing"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Co-author: &lt;a class="mentioned-user" href="https://dev.to/ashishsalunkhe"&gt;@ashishsalunkhe&lt;/a&gt;
 &lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>gdelt</category>
    </item>
    <item>
      <title>3 tips from "Atomic habits" that helped me on my journey to becoming a full-stack dev at Microsoft</title>
      <author>kapeel kokane</author>
      <pubDate>Wed, 06 Oct 2021 18:09:22 +0000</pubDate>
      <link>https://dev.to/comscience/3-tips-from-atomic-habits-that-helped-me-get-a-job-at-microsoft-56ih</link>
      <guid>https://dev.to/comscience/3-tips-from-atomic-habits-that-helped-me-get-a-job-at-microsoft-56ih</guid>
      <description>&lt;p&gt;Hey There üëãüèæ&lt;/p&gt;

&lt;p&gt;Hope you are doing well. üôåüèæ&lt;/p&gt;

&lt;p&gt;I joined &lt;strong&gt;Microsoft&lt;/strong&gt; as a full-stack developer last month and the announcement tweet went viral on Twitter.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCoQBxER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372919009939652612/E9s309tH_normal.jpg" alt="Kapeel üíô Typescript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kapeel üíô Typescript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kokaneka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Today is my first day at &lt;a href="https://twitter.com/Microsoft"&gt;@Microsoft&lt;/a&gt; as a full-stack dev üôÇ Hope its the start of an amazing journey üôåüèæ
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:17 AM - 06 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1434792888433446927" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1434792888433446927" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1434792888433446927" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Many of the fellow devs asked me for my journey and what helped me reach there. So I thought of putting this article together by listing out a few small habits that added up over time which helped me get the desired result. Many of the things that I talk about are mentioned in the amazing book &lt;strong&gt;Atomic habits&lt;/strong&gt; by James Clear which I think, every human being must read at least once!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;disclaimer&lt;/strong&gt;: This article is not a place for &lt;strong&gt;tips and tricks&lt;/strong&gt; or a list of &lt;strong&gt;important questions&lt;/strong&gt; to crack any particular interview. It was a long &amp;amp; gradual process for me and I'm just listing down what worked for me. You can try it out and see if it works for you.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design-your-environment"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ Design your environment
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w0Rhh5Ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/_Ss12EWsZHEAAAAd/plan-yoda-plan.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w0Rhh5Ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/_Ss12EWsZHEAAAAd/plan-yoda-plan.gif" alt="yoda plan"&gt;&lt;/a&gt;&lt;br&gt;
James talks about the power of &lt;a href="https://jamesclear.com/power-of-environment"&gt;environment design&lt;/a&gt; over motivation and here's how we can apply that. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#phone"&gt;
  &lt;/a&gt;
  Phone
&lt;/h4&gt;

&lt;p&gt;People say phones are distracting and toxic. I say people do not know how to use phones. If used properly, it can act as a prime weapon in your arsenal. &lt;br&gt;
Structure your home screen so that instead of Facebook, Instagram, you see &lt;a href="https://dev.to/"&gt;dev.to&lt;/a&gt;, &lt;a href="https://hashnode.com/"&gt;hashnode&lt;/a&gt;, &lt;a href="https://daily.dev/"&gt;daily.dev&lt;/a&gt; so that when you open your phone, the decision is easy for you to scroll some technical content instead of mindless binge-scrolling!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  YouTube
&lt;/h4&gt;

&lt;p&gt;Most people under-estimate YouTube's capabilities when it comes to learning. You can create a separate Google account and only subscribe learning channels through it. That way, when you switch accounts from the menu bar, you get a nicely curated feed of tutorials and tech updates that you might be interested in. Here are a few awesome channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/TraversyMedia"&gt;Traversy media&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/c/Freecodecamp"&gt;Freecodecamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/c/Academind"&gt;Academind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#twitter"&gt;
  &lt;/a&gt;
  Twitter
&lt;/h4&gt;

&lt;p&gt;Twitter is also an amazing place to learn and connect with industry experts. If you do not have a Twitter account, create one today and &lt;strong&gt;ONLY&lt;/strong&gt; follow the accounts that are creating content around the tech that you are interested in. That way, even if you wanted to binge-scroll, it will be curated. You can also follow accounts specific to a particular language like &lt;a href="https://twitter.com/JavaScript"&gt;Javascript&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-systems"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ Create systems
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vn47pwl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/2AQR9FgLS4UAAAAC/do-it-shia-la-beouf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vn47pwl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/2AQR9FgLS4UAAAAC/do-it-shia-la-beouf.gif" alt="just do it"&gt;&lt;/a&gt;&lt;br&gt;
James also talks about the importance of &lt;a href="https://jamesclear.com/goals-systems"&gt;creating systems&lt;/a&gt; rather that setting goals to be successful in the long run. &lt;br&gt;
Hence, instead of trying to rely on motivation which comes and goes, try to set up systems. Those systems can be something like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set 7pm to 8pm as &lt;strong&gt;learning time&lt;/strong&gt; (can be any time slot)&lt;/li&gt;
&lt;li&gt;Listen to &lt;strong&gt;audio books&lt;/strong&gt; while taking a walk&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Never&lt;/strong&gt; watch television alone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These systems, once established in your mind would make it highly improbable for you not to do the right thing. And they also take out decision fatigue. For instance, if its 7:15pm, you definitely know that you must be learning stuff right now and hence you do that, without thinking much. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#identity-based-habits"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ Identity based habits
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqBEyl8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8gaeekfy4dsa63ugw5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqBEyl8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8gaeekfy4dsa63ugw5r.png" alt="layers of identity"&gt;&lt;/a&gt;&lt;br&gt;
The third thing that can help you on your journey is this concept of &lt;a href="https://jamesclear.com/identity-based-habits"&gt;identity based habits&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How this can help you on your tech journey is, instead of &lt;strong&gt;trying to build&lt;/strong&gt; stuff using a new tech stack, you can think of &lt;strong&gt;becoming&lt;/strong&gt; a curious developer. &lt;/p&gt;

&lt;p&gt;Instead of studying about algorithms and data structure, you can become the sort of person who &lt;strong&gt;wonders&lt;/strong&gt; about how stuff works. &lt;/p&gt;

&lt;p&gt;If you are also on the path of content creation, then don't try to create content. Become a person who &lt;strong&gt;shares knowledge&lt;/strong&gt; consistently. &lt;/p&gt;

&lt;p&gt;Maybe the examples that I provided are not perfect. Go through the article link that I provided and try to come up with your own identity that would help you stick to your habit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Doing these things would push you in the direction wherein over a long term, you will see yourself grow as a developer. I did. For me, cracking the interviews was not just a process for those 3 or 4 months. It was an amalgamation of the things that I did over the last 5 years. If you are in it for the long run, you will definitely succeed. And even it you don't. there is nothing to loose here! üôåüèæ&lt;/p&gt;

&lt;p&gt;Cheers ‚úåüèΩ&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>First Glance: WSL2 &amp; GoLand on Windows 11</title>
      <author>Daniil Maslov</author>
      <pubDate>Wed, 06 Oct 2021 18:07:17 +0000</pubDate>
      <link>https://dev.to/s0xzwasd/first-glance-wsl2-goland-on-windows-11-26l4</link>
      <guid>https://dev.to/s0xzwasd/first-glance-wsl2-goland-on-windows-11-26l4</guid>
      <description>&lt;p&gt;Windows 11 was just released a few days ago and GoLand introduces support for projects inside the WSL2 mount and it is available in the &lt;a href="https://www.jetbrains.com/go/nextversion/"&gt;Early Access Program&lt;/a&gt;. It is a good time to get started and combine things for modern Go development step-by-step.&lt;/p&gt;

&lt;p&gt;I will show you a small introduction to configure WSL2 and GoLand, how to install Go SDK and open projects inside WSL2 mounts. First off, we have to install WSL2 under Windows 11. There are a few steps to consider.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-wsl2-on-windows-11"&gt;
  &lt;/a&gt;
  Configure WSL2 on Windows 11
&lt;/h2&gt;

&lt;p&gt;First off, we are going to install WSL2 itself via &lt;code&gt;wsl --install&lt;/code&gt; in PowerShell with &lt;em&gt;admin rights&lt;/em&gt;. The operation takes a bit of time and at the end of it, you can see the successful message: &lt;em&gt;The requested operation is successful. Changes will not be effective until the system is rebooted&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I would say that the process of installing WSL2 in Windows 11 is much easier than earlier. One command does all things.&lt;/p&gt;

&lt;p&gt;After that, open Ubuntu distribution (or change to a different one using &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install#change-the-default-linux-distribution-installed"&gt;Microsoft article&lt;/a&gt;), enter username, password and install Go SDK.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-go-sdk-under-wsl2"&gt;
  &lt;/a&gt;
  Install Go SDK under WSL2
&lt;/h3&gt;

&lt;p&gt;There are a few ways to install Go SDK:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://golang.org/doc/install"&gt;Official guide&lt;/a&gt; from Go team.&lt;/li&gt;
&lt;li&gt;Go &lt;a href="https://snapcraft.io/go"&gt;snap package&lt;/a&gt; on Ubuntu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I prefer an official guide. It is pretty well documented and easy to start. Pay attention that it requires &lt;em&gt;sudo&lt;/em&gt; privileges for the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget -c https://golang.org/dl/go1.17.1.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few preparations to use it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specify &lt;code&gt;export PATH=$PATH:/usr/local/go/bin&lt;/code&gt; under &lt;code&gt;$HOME/.profile&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Load &lt;code&gt;$PATH&lt;/code&gt; changes to the current shell session: &lt;code&gt;source ~/.profile&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To confirm that Go is configured properly, we can execute &lt;code&gt;go version&lt;/code&gt; and should get the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go version go1.17.1 linux/amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are good to go to the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-opening-in-goland"&gt;
  &lt;/a&gt;
  Project opening in GoLand
&lt;/h2&gt;

&lt;p&gt;Let's create our project right from GoLand. On Welcome Screen, select New Project and specify project location under WSL2 mount. You can create directories from the pop-up by right-clicking on the root folder. Make sure that the path to the project contains &lt;code&gt;\\wsl$&lt;/code&gt; prefix:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;\\wsl$\Ubuntu\home\s0xzwasd\Projects\Go\dev-to-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uWSoDL5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwx6qv6hrm1zj8g8hwh6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uWSoDL5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwx6qv6hrm1zj8g8hwh6.png" alt="An option to create directories in GoLand"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GoLand highlights a warning and requires Go SDK in WSL. We can click on the Plus icon and choose Local, then find Go SDK (&lt;code&gt;\\wsl$\Ubuntu\usr\local\go&lt;/code&gt; by default). Create a project and wait for Go SDK indexing.&lt;/p&gt;

&lt;p&gt;As an example, I take &lt;a href="https://gobyexample.com/interfaces"&gt;Go by Example: Interfaces&lt;/a&gt; code snippet. Let's run it via gutter icons around &lt;code&gt;main()&lt;/code&gt; function. After that, try to debug a bit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1YgYBlkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wo1ycbak06psplcz24x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1YgYBlkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wo1ycbak06psplcz24x.png" alt="GoLand runs code from WSL2 mount"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We've configured all necessary environments to get developer things done. üéâ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h3&gt;

&lt;p&gt;So, there are several limitations at the moment, especially symlinks and File Watchers are not supported (&lt;a href="https://youtrack.jetbrains.com/issue/IDEA-253253"&gt;IDEA-253253&lt;/a&gt;, &lt;a href="https://youtrack.jetbrains.com/issue/WEB-38925"&gt;WEB-38925&lt;/a&gt;) as well as External Tools (&lt;a href="https://youtrack.jetbrains.com/issue/IDEA-201045"&gt;IDEA-201045&lt;/a&gt;) and Mozilla RR (&lt;a href="https://github.com/rr-debugger/rr/issues/2506"&gt;GITHUB-2506&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We can use WSL2 and GoLand for Go development for now. It is much easier to get started and separate personal and development environments. As a benefit of Windows 11, we can &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/tutorials/gui-apps"&gt;run GUI apps&lt;/a&gt; inside WSL2 and it looks really promising.&lt;/p&gt;

</description>
      <category>go</category>
      <category>windows</category>
      <category>goland</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Rendering Options on the Web: Server, Client, Static</title>
      <author>Thomas Desmond</author>
      <pubDate>Wed, 06 Oct 2021 18:02:02 +0000</pubDate>
      <link>https://dev.to/thetombomb/rendering-options-on-the-web-server-client-static-20e</link>
      <guid>https://dev.to/thetombomb/rendering-options-on-the-web-server-client-static-20e</guid>
      <description>&lt;p&gt;&lt;em&gt;Server Side Rendering (SSR), Client Side Rendering (CSR), and Static Site Generation (SSG) let's talk about the big three rendering options for the web. Descriptions of each, SEO considerations, and go more deeply into performance indicators, and more.&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;Choosing the right rendering option for your architecture is important because it's one of the first decisions you make for your web apps, and it only gets harder and harder to change the more you build out a project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rendering-on-the-web"&gt;
  &lt;/a&gt;
  What is Rendering on the web?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Rendering on the web is the process of transforming website code into the interactive pages that users visit.&lt;/strong&gt; During the rendering process, many things could happen, such as calling an API, loading data from a database, executing JavaScript, and more. In this post, I am not too concerned about the details of what is happening but more interested in the &lt;em&gt;Where&lt;/em&gt; and &lt;em&gt;When&lt;/em&gt; the rendering is happening. Are we performing these actions on a server? In the visitors browser? Or possibly way early at build time before any user has even visited the site? Each of these approaches has its benefits and drawbacks and I want to compare them all. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-visitors-story"&gt;
  &lt;/a&gt;
  The Visitors Story
&lt;/h2&gt;

&lt;p&gt;To help explain web rendering, I want to provide the visitors perspective. I think it will help us understand the differences between SSR, CSR, and SSG. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Johnny wants to visit this site. He types in &lt;a href="http://thetombomb.com"&gt;TheTomBomb.com&lt;/a&gt; into his browsers URL bar and presses the Enter key. Now what?&lt;/strong&gt; Well, Johnny doesn't want to know how the content he loves gets to the page, but he wants an enjoyable experience along the way. He wants to get the answers he came for quickly, be able to interact with the page consistently, and doesn't want unnecessary content popping and shifting around what he is really looking for. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-rendering-performance-indicators"&gt;
  &lt;/a&gt;
  Web Rendering Performance Indicators
&lt;/h2&gt;

&lt;p&gt;Throughout this post, I will reference several performance indicators. Let's dive into those and make sure we are all on the same page for rendering performance measurements. I've broken them up into two sections, early indicators and ending indicators. The early indicators are things that happen at the very beginning of rendering process, while ending indicators happen at the end of the process. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XijnLCwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhw7nguhfjk1xi2fh7v7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XijnLCwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhw7nguhfjk1xi2fh7v7.jpg" alt="The starting line of a track meet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-early-performance-indicators"&gt;
  &lt;/a&gt;
  The Early Performance Indicators
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;First Contentful Paint (FCP):&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is it:&lt;/em&gt; The time it takes for the first text or image to be painted on the screen&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why do I care:&lt;/em&gt; This is the first thing your visitor sees on the page. Johnny wants some sign that the page is loading. Seeing a blank page is discouraging. If things are loading, even if it's not the main article or image, it reassures the Johnny. This metric may not be the most useful as a loading spinner could be the first thing to be painted, but a loading indicator is better than a blank screen. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to First Byte (TTFB):&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is it:&lt;/em&gt; The time it takes between the visitors browser requesting to view a page and when the browser receives its first byte of information. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why do I care:&lt;/em&gt; A high TTFB is a sign of slow load times or slow server. A high TTFB may mean that your server has to do a lot of work before it can respond to a request. Optimizing TTFB can drastically improve user experience. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-ending-performance-indicators"&gt;
  &lt;/a&gt;
  The Ending Performance Indicators
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Largest Contentful Paint (LCP):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is it:&lt;/em&gt; The time it takes for the largest image or text block to become visible within the view port. The megabytes or kilobytes do not come into consideration here it this is physical screen real estate. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why do I care:&lt;/em&gt; The assumption is that the largest physical piece of content to be rendered to the page will be what the user came to see. For example, for this blog post you are reading now, the text is the largest piece of content and it is indeed what you came for; I hope.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to Interactive (TTI):&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is it:&lt;/em&gt; The time it takes for the page to become FULLY interactive. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why do I care:&lt;/em&gt; This is important because some pages prioritize visuals and will load up a beautiful-looking page. But when you try to click a link or scroll the page, it appears frozen. The page looking complete but not interactive is a big disruption in user experience.  &lt;/p&gt;

&lt;p&gt;There are definitely more performance indicators out there, but FCP, TTFB, LCP, and TTI are what I want to focus in on when compare the different rendering options. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#server-side-rendering-ssr"&gt;
  &lt;/a&gt;
  Server Side Rendering (SSR)
&lt;/h2&gt;

&lt;p&gt;Server side rendering, this is where you make the server do the bulk of the work. Sometimes referred to as Just In Time (JIT) rendering. With SSR, the server receives the request to visit a page, and the server generates the HTML for the page. &lt;/p&gt;

&lt;p&gt;The server takes on the responsibility of executing most or all of the JavaScript, gathering data from databases, calling API's, and doing any personalization. The server is good at these things because has a fast internet connection, have a powerful processor, and can render ready to go HTML quickly and send that back down to the page visitor.&lt;/p&gt;

&lt;p&gt;Once the server sends the HTML to the visitors browser, the browser may have just a little JavaScript to execute but far less than we'll see in Client Side Rendering. This makes SSR very SEO friendly. Minimal to no JavaScript has to be executed by the browser and search engine crawlers. Many search engine crawlers cannot execute any JavaScript; Google can, but with mixed results. So the less JavaScript required the better for SEO.  &lt;/p&gt;

&lt;p&gt;Something to keep in mind though with SSR is that the user sees nothing until the server responds. So if there is a lot of data gather or API calls that need to happen, there can be quite a delay between the request and Time to First Byte. But once the HTML arrives at the browser it is basically ready to go, so First Contentful Paint and Time To Interactive are the same or very close together. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SSR Cheatsheet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;‚úî Put the rendering work on the fast, powerful server&lt;/p&gt;

&lt;p&gt;üëç SEO, FCP, TTI, Mobile friendly because of less load&lt;/p&gt;

&lt;p&gt;üëé TTFB, Blank screen while server does processing&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jgUCH27r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gghhlugyt46ooc8px0qg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jgUCH27r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gghhlugyt46ooc8px0qg.png" alt="Flow Diagram of Server Side Rendering (SSR)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#client-side-rendering-csr"&gt;
  &lt;/a&gt;
  Client Side Rendering (CSR)
&lt;/h2&gt;

&lt;p&gt;Client side rendered applications are websites entirely rendered in the browser with JavaScript. With CSR, an extremely barebones HTML page is sent over with download links the JavaScript required to render the full page. The server sends the building blocks, and it is up to the browser to assemble them. Because so little data is initially sent, CSR can have a quick FCP and TTFB. However, the browser still has a lot of work to do before useful content is ready to be displayed.&lt;/p&gt;

&lt;p&gt;CSR is very popular and most commonly used with frameworks such as React, Angular, and Vue. The JavaScript that loads starts up these frameworks and they take over from there. They handle data fetching, routing, and more. You may have heard of these referred to as SPA or Single Page Applications.&lt;/p&gt;

&lt;p&gt;JavaScript being enabled is essential for CSR to work. And it's important to realize downloading JavaScript takes time, especially on a mobile data connection. JavaScript is great for interactive web pages but requires work up front to download and execute it.&lt;/p&gt;

&lt;p&gt;SEO is also a concern. So far, only Google web crawlers can execute JavaScript and even then there are mixed results. For best SEO results, sticking with SSR or SSG is the way to go. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSR Cheatsheet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;‚úî A minimal HTML file sent to browser containing all information needed to load JavaScript and bootstrap web app.&lt;/p&gt;

&lt;p&gt;üëç FCP, TTFB, extremely flexible, potential costs savings because of lower server requirements &lt;/p&gt;

&lt;p&gt;üëé SEO, dependent on JavaScript being enabled&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OnCMLFt9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v5ivkmvow3t1o7ttj14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OnCMLFt9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v5ivkmvow3t1o7ttj14.png" alt="Flow diagram of Client Side Rendering (CSR)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-site-generation-ssg"&gt;
  &lt;/a&gt;
  Static Site Generation (SSG)
&lt;/h2&gt;

&lt;p&gt;With Static Site Generation, all your HTML gets generated ahead of time during build time. SSG, sometimes referred to as Ahead of Time (AoT) rendering, is also a major part of Jamstack.&lt;/p&gt;

&lt;p&gt;SSG differs from the previous two rendering options. Now, during build time before a user even visits any page, static HTML files get built. This means you do not know who the visitors are going to your pages, meaning personalization is not possible without rehydration. (Rehydration is a topic for another time that I plan on writing about). &lt;/p&gt;

&lt;p&gt;But because all content is static, no server is needed outside of the build server that builds the pages. All the static content can lives on a Content Delivery Network (CDN). When a request for a page comes in, an immediate response of the static HTML is sent back.&lt;/p&gt;

&lt;p&gt;SSG is great because of the low hosting fees and extremely fast speed. But very limiting because all content is created ahead of time. Blogs, product pages, and other content that does not change often are perfect for SSG. This blog is completely statically generated!   &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SSG Cheatsheet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;‚úî  Generate static pages during build time that get directly served to visitors.&lt;/p&gt;

&lt;p&gt;üëç SEO, TTFB, FCP, mobile friendly, FAST content delivery&lt;/p&gt;

&lt;p&gt;üëé Inflexible because we do not have any information on visitors at build time&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--11-96bAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmyiqjbc6ol76ig0w4go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--11-96bAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmyiqjbc6ol76ig0w4go.png" alt="Flow diagram of Static Site Generation (SSG)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bringing-it-all-together"&gt;
  &lt;/a&gt;
  Bringing it all together
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Cxxi-GF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d52yixzbomjnwvqprg8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Cxxi-GF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d52yixzbomjnwvqprg8.png" alt="Table comparing the three different web rendering options: SSR, CSR, SSG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The big three rendering options SSR, CSR, and SSG all have their place. CSR has become extremely popular with the release of frontend frameworks like React and Angular. Pushing the effort of rendering down to the visitors browser is a nice way of eliminating load on the server. &lt;/p&gt;

&lt;p&gt;Many web applications still use SSR, where most or all the load is on the server, today. When SEO and personalization are a concern, SSR fills those requirements. It may cost more because of the server costs, but you'll need to weigh the options on your own. &lt;/p&gt;

&lt;p&gt;SSG is almost in a category of its own because of its ahead of time rendering. It checks all the boxes for SEO and performance, but you must be prepared for the lack of personalization. Rendering your pages during build times means you have no information about who is or will visit your pages. Sites like this blog are perfect for SSG because of the mostly static content.&lt;/p&gt;

&lt;p&gt;It's up to you to decide what will work best in your environment. If you have come this far, you are considering all your options and on your way to making an informed decision!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Frontend Bundler Braindump</title>
      <author>Konnor Rogers</author>
      <pubDate>Wed, 06 Oct 2021 17:33:18 +0000</pubDate>
      <link>https://dev.to/paramagicdev/frontend-bundler-braindump-10fj</link>
      <guid>https://dev.to/paramagicdev/frontend-bundler-braindump-10fj</guid>
      <description>&lt;h2 id="what-is-this"&gt;
  &lt;a href="#what-is-this"&gt;
    What is this?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The following is a collection of terminology and definitions of various bundling terms I've come across over the last year. This is meant to be an introduction to what a frontend bundler is, what is does, why they exist, and some of the common terminology used by bundlers. This will&lt;br&gt;
not target any specific bundler (webpack, rollup, vite, snowpack, etc) but rather, this will provide some context around some of the things these bundlers do and how they work. This is intended to be a reference to my future&lt;br&gt;
self who will inevitably forget most of this.&lt;/p&gt;

&lt;h2 id="what-will-be-covered"&gt;
  &lt;a href="what-will-be-covered"&gt;
    What will be covered?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-bundlers"&gt;Why do bundlers exist?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-imports"&gt;Why do we have different import syntax?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-bare-module-import"&gt;What is a bare module import?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-an-entrypoint"&gt;What is an entrypoint?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-loader"&gt;What is a loader?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-chunk"&gt;What is a chunk? (code splitting)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-hashing"&gt;What is hashing? (fingerprinting, digest, etc)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-treeshaking"&gt;What is treeshaking?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-are-side-effects"&gt;What are side-effects?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="why-bundlers"&gt;
  &lt;a href="#why-bundlers"&gt;
    Why do bundlers exist?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Bundlers exist to solve a couple different problems, and they've evolved as the problems they solve has evolved.&lt;/p&gt;

&lt;p&gt;Initially bundlers existed to solve 3 problems (mainly)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Concatenation&lt;/li&gt;
&lt;li&gt;Minification&lt;/li&gt;
&lt;li&gt;Compression (kind of)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="concatenation"&gt;
  &lt;a href="#concatenation"&gt;
    Concatenation
  &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Concatenation is the process of combining multiple files into a singular file. This is important because prior to HTTP/2, the network cost to import asset files was significantly higher, meaning it took longer. This meant it was super important to ship as few asset files to the end user as possible to increase performance.&lt;/p&gt;

&lt;h3 id="minification"&gt;
  &lt;a href="#minification"&gt;
    Minification
  &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Minification is the process of taking a file, and making it as small as possible. IE: shortening variable names to shorthand, shortening function calls, eliminating whitespace, etc.&lt;/p&gt;

&lt;h3 id="compression"&gt;
  &lt;a href="#compression"&gt;
    Compression
  &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As an addition to minification there is also the idea of "compression". Compression is the process of taking a file, and reducing its overall size by making it smaller by using some kind of &lt;a href="https://en.wikipedia.org/wiki/Data_compression"&gt;Compression Algorithm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Compression is sometimes referred to as "zipping", "gzipping". What compression does under the hood is beyond the scope of this article, but its just another technique to reduce file size (note that a "gzipped" file can be uncompressed by a browser quite easily and the code inside the file will be the same when uncompressed unlike with&lt;br&gt;
minification)&lt;/p&gt;

&lt;h3 id="additional-problems"&gt;
  &lt;a href="#additional-problems"&gt;
    Additional Problems
  &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As time went on, developers wanted more from their bundlers. They wanted to use files that "transpile" to JavaScript. Developers wanted bundling, but not 1 massive file. They wanted to "chunk" or "code split" their files. With the advent of HTTP/2 connection multiplexing, shipping&lt;br&gt;
multiple smaller files actually became more advantageous.&lt;/p&gt;

&lt;p&gt;Now, bundlers solve these additional problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sourcemaps&lt;/li&gt;
&lt;li&gt;transpilation&lt;/li&gt;
&lt;li&gt;code splitting (chunking)&lt;/li&gt;
&lt;li&gt;tree shaking (elimination of dead code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the above topics are fairly in-depth, we will cover what they are below. But first, lets circle back to "concatenation", or in other terms, how to share code between files with JavaScript.&lt;/p&gt;

&lt;h2 id="why-imports"&gt;
  &lt;a href="#why-imports"&gt;
    Why do we have different import syntax?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you've been around JavaScript, you've no doubt seen something like&lt;br&gt;
the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then you may have also seen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and been wondering, what the heck is the difference?&lt;/p&gt;

&lt;p&gt;Well the simple answer is Example 1 uses "CommonJS" syntax (also known as CJS)&lt;/p&gt;

&lt;p&gt;Example 2 uses "ES Module" syntax (also know as ESM)&lt;/p&gt;

&lt;p&gt;There is also a third module definition called UMD (universal module definition) that leverages CommonJS.&lt;/p&gt;

&lt;p&gt;To put it plainly, CommonJS is NodeJS's original importing syntax. ES Modules are part of the ES Module spec which is the spec defined by the browser for importing JavaScript files. UMD came out before ES Module syntax existed which attempted to guess the environment it was loaded in&lt;br&gt;
and provide appropriate file sharing.&lt;/p&gt;

&lt;p&gt;Essentially UMD was intended to bridge the CommonJS syntax for use in the browser. It's important to note both UMD and CJS predate the ESM specification and is why they both exist despite ESM being the standard at this point in time.&lt;/p&gt;

&lt;p&gt;For the remainder of this article, we will focus mainly on ESM syntax since its the standard and because having to define caveats for every possible syntax is tiresome.&lt;/p&gt;

&lt;h2 id="what-is-a-bare-module-import"&gt;
  &lt;a href="#what-is-a-bare-module-import"&gt;
    What is a bare module import?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;While we're on the subject of imports, what is a "bare module import" and why is it special?&lt;/p&gt;

&lt;p&gt;A bare module specifier is when you provide a path to a file without a "relative qualifier". For example, the following is a bare module import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jquery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the idea of bare module specifiers comes from NodeJS. Node performs and automatic lookup into your "node_modules" directory when you do not provide a relative qualifier. So the above roughly translates to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../node_modules/jquery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is whats called a "relative module specifier", which means it is being given a "relative" filepath to find the file in your system.&lt;/p&gt;

&lt;p&gt;This is important because the ESM spec does not support "bare module specifiers" which means that a developer needs to do 1 of 2 things to fix bare module specifiers:&lt;/p&gt;

&lt;p&gt;A.) Setup an importmap to tell the browser where to find the module.&lt;br&gt;
B.) Transpile the code to be a relative module.&lt;/p&gt;

&lt;p&gt;Option A introduces the idea of "importmaps", importmaps are a fairly new concept. Essentially an importmap says "when you see this bare module specifier, here is the relative path to the module so you know where to find it". It's essentially a hint of the browser of how to resolve a bare module. To read more about importmaps, check out Modern Web's Importmap documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://modern-web.dev/docs/dev-server/plugins/import-maps/"&gt;https://modern-web.dev/docs/dev-server/plugins/import-maps/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Option B introduces the idea of "transpilation" which we will talk about when we get into "loaders"&lt;/p&gt;

&lt;h2 id="what-is-an-entrypoint"&gt;
  &lt;a href="#what-is-an-entrypoint"&gt;
    What is an entrypoint?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;An entrypoint is another way of saying a "bundle". Essentially an&lt;br&gt;
entrypoint can go by many names, for example in Webpacker &amp;lt; 5, its&lt;br&gt;
called a "pack". Although it may go by many names, at the end of the day an entrypoint&lt;br&gt;
tells a bundler to "bundle this file", in other words, grab all the&lt;br&gt;
files it imports and create whats called a "dependency graph" and then&lt;br&gt;
create a bundled file (and depending on setup, also create "chunks")&lt;/p&gt;

&lt;p&gt;What is a dependency graph you may ask? Well a dependency graph is essentially a way for the bundler to map out what packages and files are in your "entrypoint" file and properly bundle those into the final file.&lt;/p&gt;

&lt;p&gt;This also begs the question of "what happens if one entrypoint imports another?" This can create whats called a "circular dependency". In other words, A depends on B, but B depends on A, so who gets resolved first?&lt;/p&gt;

&lt;p&gt;Circular dependencies can also happen within regular packages, but can usually be resolved by your bundler, although the general recommendation is to try to avoid circular dependencies as much as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spin.atomicobject.com/2018/06/25/circular-dependencies-javascript/"&gt;https://spin.atomicobject.com/2018/06/25/circular-dependencies-javascript/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another concept of entrypoints is this is where "loaders" or "transpilers" will generally do what they need to do.&lt;/p&gt;

&lt;h2 id="what-is-a-loader"&gt;
  &lt;a href="#what-is-a-loader"&gt;
    What is a loader?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A loader is a way for a bundler to convert a non-JavaScript file into JavaScript compatible syntax. For example, lets imagine I import a png into a JavaScript file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./circle.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;img src="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's actually happening is if you're using something like "Webpack", there is what's called a "loader" which will transform this png into a JavaScript compatible object and will allow you to grab the final location of the "circle" and point the image src to it. This syntax is not supported by the official ESM spec, but rather is something handled&lt;br&gt;
by bundlers to allow users to reference non-JavaScript files inside a JavaScript file.&lt;/p&gt;

&lt;p&gt;Another filetype that requires a "loader" or "transpiler" is TypeScript! Lets imagine I import a TypeScript file into a JavaScript file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TSFile&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./tsFile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I omitted the &lt;code&gt;.ts&lt;/code&gt; since TypeScript itself doesn't support importing &lt;code&gt;.ts&lt;/code&gt; files. If you import a &lt;code&gt;.ts&lt;/code&gt; file in the browser, it just won't work. Instead, bundlers transpile the &lt;code&gt;.ts&lt;/code&gt; file using the TypeScript transpiler (or compiler whatever you prefer) and then turns it into a&lt;br&gt;
usable JavaScript file.&lt;/p&gt;

&lt;p&gt;The important thing about loaders and minification and everything else changing the final output, is it obscures where the initial code comes from. To solve this problem, bundlers implement something called "sourcemaps". Sourcemaps are a way of mapping transpiled code to it's original source code. This is particularly important for tracking down errors since its very hard to debug minified / transpiled code without sourcemaps available.&lt;/p&gt;

&lt;p&gt;While we're here, now would be a good time to talk about "targets". The idea of a "target" is to tell a bundler to "output JavaScript syntax compatible with this EcmaScript (ES) spec, or output JavaScript syntax compatible with these browsers"&lt;/p&gt;

&lt;p&gt;For example, you may have seen targets written like this:&lt;br&gt;
&lt;code&gt;targets: "es6"&lt;/code&gt; or when targetting browsers:&lt;br&gt;
&lt;code&gt;targets: "&amp;gt; 0.1%, not dead, not IE 11, supports-esmodules"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is a way of using "modern" JavaScript syntax while being able to be backwards compatible with older browsers.&lt;/p&gt;

&lt;p&gt;On the subject of "modern", lets move on to talk about code splitting or chunking.&lt;/p&gt;

&lt;h2 id="what-is-a-chunk"&gt;
  &lt;a href="#what-is-a-chunk"&gt;
    What is a chunk? (Code Splitting)
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A chunk is merely a segmented JavaScript file from the main bundle. Chunks are fairly new and they are a result of the browser evolving. As the browser has evolved, so to have bundlers. Browsers have better support for simultaneously&lt;br&gt;
downloading asset files so when using HTTP/2 compatible servers, multiple smaller files can actually be better for performance.&lt;/p&gt;

&lt;p&gt;Let dig in to how chunks are created.&lt;/p&gt;

&lt;p&gt;There are multiple ways to create chunks. The 2 most common ways are "critical path" code splitting and "file size" code splitting.&lt;/p&gt;

&lt;p&gt;The first form of chunking called "file size chunking", means "pick an arbitrary file size and make a chunk at that size". For example, lets choose 20kb (since thats what the Webpack SplitChunks plugin uses &lt;a href="https://webpack.js.org/plugins/split-chunks-plugin/"&gt;https://webpack.js.org/plugins/split-chunks-plugin/&lt;/a&gt;). This means any&lt;br&gt;
file I import thats greater than 20kb will automatically be turned into a chunk.&lt;/p&gt;

&lt;p&gt;The second form of chunking called "critical path code splitting" means:&lt;/p&gt;

&lt;p&gt;"only import the most important files for rendering first, and then import the other 'chunks' after the initial critical bundle has loaded". &lt;/p&gt;

&lt;p&gt;This helps achieve faster initial loading for people browsing your website.&lt;/p&gt;

&lt;p&gt;Another way of talking about critical path code splitting is called "dynamic imports". A dynamic import gets imported at runtime. Heres the difference between a static and dynamic import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mymodule&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; dynamic&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mymodule&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; static&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will be important when we talk about "statically analyzable files" when we explain what treeshaking is.&lt;/p&gt;

&lt;h2 id="what-is-treeshaking"&gt;
  &lt;a href="#what-is-treeshaking"&gt;
    What is treeshaking?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Treeshaking, otherwise referred to as "dead code elimination" is a way for your bundler to get rid of unused code. This process is can be error prone and will be specific to the bundler you're using and its internal AST (Abstract Syntax Tree)&lt;/p&gt;

&lt;p&gt;Every bundler implements treeshaking slightly differently but heres the core concepts:&lt;/p&gt;

&lt;p&gt;To be treeshakeable a file should do at least the following:&lt;/p&gt;

&lt;p&gt;A.) Be statically analyzable&lt;br&gt;
B.) Provide static references to imports&lt;br&gt;
C.) Should not have side effects&lt;/p&gt;

&lt;p&gt;Statically analyzable means it cant use an interpolated string to import a file. Here's an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Statically analyzable&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// Not statically analyzable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Static references means you cant use a "dynamic accessor" on an object. This doesnt really affect ESM since it has an explicit "grab only what I need" syntax, but is worth talking about. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Treeshakeable!&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onlyThis&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;large-module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// hard to treeshake / possibly not treeshakeable (depends on bundler)&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Blah&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blah&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// Not treeshakeable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blah&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dynamic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let's talk side-effects, which warrant their own section below.&lt;/p&gt;

&lt;h2 id="what-are-side-effects"&gt;
  &lt;a href="#what-are-side-effects"&gt;
    What are side effects?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A side-effect is a piece of code that runs when a file is&lt;br&gt;
"imported". You may be familiar with side-effects if you've browsed the Webpack docs. &lt;a href="https://webpack.js.org/guides/tree-shaking/#mark-the-file-as-side-effect-free"&gt;https://webpack.js.org/guides/tree-shaking/#mark-the-file-as-side-effect-free&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, lets look at two files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// side-effect.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyCustomElement&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-custom-element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MyCustomElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// entrypoint.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;side-effect.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When I import "side-effect.js", the code will automatically run despite not calling any functions when its imported. This makes it hard for bundlers to know if &lt;code&gt;side-effect.js&lt;/code&gt; is tree-shakeable since the code runs despite the user not actually acting on the import itself. As a&lt;br&gt;
result, files with side-effects are generally hard to treeshake so most bundlers wont attempt to treeshake them.&lt;/p&gt;

&lt;p&gt;If I wanted to rewrite the above to be "side effect free" I would do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// side-effect.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyCustomElement&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-custom-element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MyCustomElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// entrypoint.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;define&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;side-effect.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we are "side effect free"! There is one last topic to discuss and then this reference is complete!&lt;/p&gt;

&lt;h2 id="what-is-hashing"&gt;
  &lt;a href="#what-is-hashing"&gt;
    What is hashing? (fingerprinting, digest, etc)
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;File hashing (also called fingerprinting, or a file digest) is the process of analyzing a&lt;br&gt;
files content then generating and adding a "hash" to the end of it. An example of a hashed file looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;file.xj921rf.js&lt;/code&gt; (yes thats a made up hash)&lt;/p&gt;

&lt;p&gt;The size of the hash (number of characters ) is determined by your bundler settings. The higher the number, the more "unique" the hash is. Unique hashes are great for caching purposes since if the hash has not changed,&lt;br&gt;
the browser can just use the cached version. A hash is intended to be "idempotent" in that if I run the same file, with the same contents, n number of times, then I will always get the same final hash regardless of how many times the build is run. This is important for consistency. And this ends my reference to myself.&lt;/p&gt;

&lt;h2 id="final-thoughts"&gt;
  &lt;a href="#final-thoughts"&gt;
    Final Thoughts
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The above may not be 100% accurate. This is purely off the top of my head over the last hour or so. If you have anything to add or anything to correct, feel free. Take this all with a grain of salt. I'm just 1 person, and I've never actually written a bundler. Have a great day and bundle away!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>bundlers</category>
      <category>webpack</category>
    </item>
    <item>
      <title>Aero / AeroCMS - A Simple and Easy to use CMS Designed to create fast and powerful web apps!</title>
      <author>MegaTKC</author>
      <pubDate>Wed, 06 Oct 2021 17:15:54 +0000</pubDate>
      <link>https://dev.to/megatkc/aero-aerocms-a-simple-and-easy-to-use-cms-designed-to-create-fast-and-powerful-web-apps-5ao6</link>
      <guid>https://dev.to/megatkc/aero-aerocms-a-simple-and-easy-to-use-cms-designed-to-create-fast-and-powerful-web-apps-5ao6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-i-created-aero"&gt;
  &lt;/a&gt;
  Why I created Aero
&lt;/h2&gt;

&lt;p&gt;Before I started this project, I was using WordPress or programming in PHP, using HTML and CSS to create a website. I loved WordPress, but it was slow for me because of plugins. You need lots of plugins for additional features, and most plugins had a premium where you need to pay for them to get the full version. There were many problems with WordPress that I experienced such as slow page speeds and low SEO ranking. There are good things about WordPress too, but with site vulnerability and every time you have a plugin that is not functioning with your current PHP version, your site shuts down. These problems with WordPress led me to create a Content Management system that would solve most of these problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-aero"&gt;
  &lt;/a&gt;
  Introducing Aero
&lt;/h2&gt;

&lt;p&gt;Aero is a simple and easy to use CMS that would let you create fast and powerful web applications. Aero can be used as a blogging engine as well as many other things. The SEO is decent or not too bad according to IONOS.com. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yjLiBQ1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u3cff0dgnllgk3ezhb6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yjLiBQ1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u3cff0dgnllgk3ezhb6.png" alt="SEO Ranking of a Website Running AeroCMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aero also has a clean user interface for the Admin Panel and the front end site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UqI0GByi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pf25zk20gkgbpsxwoc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UqI0GByi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pf25zk20gkgbpsxwoc7.png" alt="Front End Website of Aero"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aero uses Bootstrap which makes the website friendly on all devices which includes, computers, tablets, phones and other devices that you can name that has the ability to surf the internet. The Admin panel and the front end website comes from a bootstrap template. The website search engine also works. To search you need to type in one of the keywords / tags labeled on the post.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-admin-panel"&gt;
  &lt;/a&gt;
  The Admin Panel
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVuxFID4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdmip9289axiuuhfr9nd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVuxFID4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdmip9289axiuuhfr9nd.png" alt="The Admin Panel includes a dashboard which shows you all of the users you have on your website, who is online, how many posts, categories and more!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Admin Panel includes a dashboard which shows you all of the users you have on your website, who is online, how many posts, categories and more! It even has a post editor using TinyCloud's html text editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pKzImYW---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vee3186knnnlmpswe2wp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pKzImYW---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vee3186knnnlmpswe2wp.png" alt="Posts section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XhN-YOcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34kwy6sp647myr852hnr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XhN-YOcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34kwy6sp647myr852hnr.png" alt="Add or Create a post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the posts section, you can clone a post, make a post public or a draft and delete them. You can also clone or delete posts in bulk. You can even create a post too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ID6mWl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f17m9v4hsdizg26p24i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ID6mWl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f17m9v4hsdizg26p24i.png" alt="Users Section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xerVnkhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36ogd77wv37tp2p51csj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xerVnkhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36ogd77wv37tp2p51csj.png" alt="Add a User"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the users section, you can clone users, create a user, set the users avatar, username, name and more! Like the posts section you can also clone or delete users in bulk. Also, there is an option to give the user a role. The default sign up role is Subscriber. You can change their role and give them Admin permissions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OWEGEqbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtaif4nlcngh47djjuto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWEGEqbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtaif4nlcngh47djjuto.png" alt="Categories Section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the categories section, you can create or edit an existing categories name. Or even delete a category too. The Categories appear up in the front end part of the website. Appearing at the top of the navigation or on the right side.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QIcOIeT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qyp8cf36hiukl9twaj6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QIcOIeT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qyp8cf36hiukl9twaj6.png" alt="Comments Section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the comments section, you can see the post that the user commented on, as well as approve or unapprove or delete their post. When the user submits a comment it is automatically marked as unapprove until the admin approves it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B2IgLALd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nl7h85swc4ebzg0s2p4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2IgLALd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nl7h85swc4ebzg0s2p4k.png" alt="Profile Section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, is the profile section, this section is created so you can edit your profile name, picture, avatar and much more. You can even change your role to a subscriber, but you can't change it back. To change it you need to go to phpmyadmin and set it to Admin again.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#known-issues-and-solutions"&gt;
  &lt;/a&gt;
  Known Issues and solutions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can't change your password which is a security risk for the admin. You need to create a new admin account and delete the old account.&lt;/li&gt;
&lt;li&gt;Draft pages show. The draft pages show but if you click on it as a non admin, it will say page not found. If you search up the draft post, it will show the text and content that you typed up. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#features-coming-soon"&gt;
  &lt;/a&gt;
  Features coming soon
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ability to change password&lt;/li&gt;
&lt;li&gt;A settings page&lt;/li&gt;
&lt;li&gt;Ability to change website name, site widget, copyright&lt;/li&gt;
&lt;li&gt;Probably admin panel and front end themes :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#github-repo"&gt;
  &lt;/a&gt;
  Github Repo
&lt;/h2&gt;

&lt;p&gt;Thank you for reading this post, if you want to support me or the project. Please star or contribute to the repo. Let me know if there are bugs or you need help in the issues tab of the github repository.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/MegaTKC"&gt;
        MegaTKC
      &lt;/a&gt; / &lt;a href="https://github.com/MegaTKC/AeroCMS"&gt;
        AeroCMS
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Aero is a simple and easy to use CMS (Content Management System) designed to create fast and powerful web applications!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
AeroCMS&lt;/h1&gt;
&lt;p&gt;Aero / AeroCMS is a simple and easy to use CMS (Content Management System) designed to create fast and powerful web applications. Aero is built with OOP (Object Oriented Programming) PHP which is known for fast website loading speeds.&lt;/p&gt;
&lt;h2&gt;
System Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PHP 5.6 - PHP 7.4&lt;/li&gt;
&lt;li&gt;MySQL or MariaDB Database&lt;/li&gt;
&lt;li&gt;Apache2 Server&lt;/li&gt;
&lt;li&gt;If you have an XAMPP server, you have all of these requirements already.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
LAMP Installation&lt;/h2&gt;
&lt;p&gt;You can run Aero on any operating system or architecture if it runs linux. You can do it on armhf (arm32), arm64 (aarch64), x86 (i386), or x86_64 (amd64). We recommend Debian or Ubuntu Linux since that is what we ran AeroCMS on. XAMPP also works too, it has everything included. Skip to Aero Installation and Database if you already configured your LAMP stack or have XAMPP.&lt;/p&gt;
&lt;p&gt;Starting off we need to install our lamp stack. We go with the easiest one which‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/MegaTKC/AeroCMS"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>php</category>
      <category>opensource</category>
      <category>showdev</category>
      <category>githunt</category>
    </item>
    <item>
      <title>Day 2: Introduction to Control Flow in Python</title>
      <author>Phylis Jepchumba</author>
      <pubDate>Wed, 06 Oct 2021 17:15:35 +0000</pubDate>
      <link>https://dev.to/phylis/day-2-introduction-to-control-flow-in-python-343l</link>
      <guid>https://dev.to/phylis/day-2-introduction-to-control-flow-in-python-343l</guid>
      <description>&lt;h6&gt;
  &lt;a href="#day-2-of-the-30-days-of-python"&gt;
  &lt;/a&gt;
  Day 2 of The 30 Days of Python.
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#introduction-to-control-flow-in-python"&gt;
  &lt;/a&gt;
  Introduction to Control Flow In Python
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;What is Control flow?&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Types of Control structures.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sequential&lt;/li&gt;
&lt;li&gt;selection: If statement, if...else statement,if..elif...else, nested if,&lt;/li&gt;
&lt;li&gt;Repetition: for loop, while loop&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is Control flow?&lt;br&gt;
Control flow is the order in which a programs code executes based on values and logic.&lt;br&gt;
Python programming language is regulated by three types of control structures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sequential statements.&lt;/li&gt;
&lt;li&gt;Selection statement.&lt;/li&gt;
&lt;li&gt;Repetition statement.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#sequential-statements"&gt;
  &lt;/a&gt;
  Sequential statements.
&lt;/h6&gt;

&lt;p&gt;Are set of statements where the execution process will happen in sequence manner.&lt;br&gt;
It is not commonly used because if the logic has broken in any line, then the complete source code execution will break.&lt;br&gt;
To avoid this problem, selection and repetition statements are used&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#selection-statements"&gt;
  &lt;/a&gt;
  Selection Statements.
&lt;/h6&gt;

&lt;p&gt;Are also called decision control statements or branching statements.&lt;br&gt;
Selection statements allows a program to execute instructions based on which condition is true.&lt;br&gt;
They include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;if Statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If statement executes a block of code based on a specified condition.&lt;br&gt;
Here is the syntax;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The if statement checks the condition first, if the condition evaluates to True the statement is executed in the if-block. Otherwise, it ignores the statements.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Enter your age:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You are an adult"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter your age:46
You are an adult
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.if‚Ä¶else statement&lt;br&gt;
It evaluates the condition and will execute the body of &lt;strong&gt;if&lt;/strong&gt; if the test condition is True, and else body if the condition is false&lt;br&gt;
Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Enter your age:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You are an adult."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You are a child."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter your age:30
You are a child.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.if‚Ä¶elif‚Ä¶else statement.&lt;br&gt;
Checks multiple conditions for true and execute a block of code as soon as one of the conditions evaluates to true.&lt;br&gt;
If no condition evaluates to true, the if...elif...else statement executes the statement in the else branch.&lt;br&gt;
The elif stands for else if.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;condition1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;block1&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;condition2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;block2&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Enter your age:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;your_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;your_age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Your are old"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;your_age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Your young"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"null"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;
&lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#repetition-statement"&gt;
  &lt;/a&gt;
  Repetition statement.
&lt;/h6&gt;

&lt;p&gt;Also called loops and are used to repeat the same code multiple times.&lt;br&gt;
Python has two repetitive statements namely:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;for Loop
Used to iterate over a sequence  that is either a list, set, tuple or dictionary.
Syntax
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;statement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;From the above syntax; n is the number of times the loop will execute and index is the loop counter&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# list
&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# variable to store the sum
&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="c1"&gt;# iterate over the list
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The sum is"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The sum is 66
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0
1
2
3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.While loop.&lt;br&gt;
Python while statement allows you to execute a block of code repeatedly until a given condition is satisfied.&lt;br&gt;
Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
   &lt;span class="n"&gt;body&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An example to print 6 numbers from 0 to 5:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources.
&lt;/h6&gt;

&lt;p&gt;(&lt;a href="https://docs.python.org/3/tutorial/controlflow.html"&gt;https://docs.python.org/3/tutorial/controlflow.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://builtin.com/software-engineering-perspectives/control-flow"&gt;https://builtin.com/software-engineering-perspectives/control-flow&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>100daysofcode</category>
      <category>datascience</category>
    </item>
    <item>
      <title>6 tips for mentoring junior engineers</title>
      <author>Lauren Caponong</author>
      <pubDate>Wed, 06 Oct 2021 17:07:12 +0000</pubDate>
      <link>https://dev.to/laurencaponong/6-tips-for-mentoring-junior-engineers-5gd5</link>
      <guid>https://dev.to/laurencaponong/6-tips-for-mentoring-junior-engineers-5gd5</guid>
      <description>&lt;p&gt;The acclimation process as a new engineer may be daunting for some. And since I‚Äôve been through the process myself, I‚Äôd like to share these tidbits to help you - as the mentor - help out your mentee.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Writing my own documentation specific to the project and tech&lt;/strong&gt;. It helps the junior engineer get acclimated to the context they will be working in and gives them a bigger picture of what‚Äôs going on. Things like specific Slack channels, email lists to join, repositories to download, helpful software additions, et cetera.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Forwarding them to the right people&lt;/strong&gt;. Introductions or forwarding them names of the people they will need info from (example: a web engineer needing information from the backend engineer).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don‚Äôt assume that they know&lt;/strong&gt;! I err on the side of giving as much information as possible to a new engineer so that they understand the full context. If they already know, great - but still, it‚Äôs good to check-in beforehand to see what they know.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Share your tips that you know and use often&lt;/strong&gt;. If you know a shortcut for a workflow, or how to debug more easily, share that with the engineer! I had to discover a lot of shortcuts on my own (sifting through Slack channels for example) and had to waste countless hours when someone else had a simple command for it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Keep internal company-only acronyms to a minimum.&lt;/strong&gt; Business jargon may confuse newcomers, so lighten up on that. There‚Äôs been countless times I‚Äôve been in meetings with new hires and they have no clue what is going on due to acronym usage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open up the floor&lt;/strong&gt;. I want my mentee to feel as comfortable as possible coming to me with questions. If I don‚Äôt know, I‚Äôll ask someone else or forward them to the right person. As someone that had a challenging case of impostor syndrome, this one could have a profound effect on newly minted engineers.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A major component to mentoring, overall, is to be &lt;strong&gt;communicative&lt;/strong&gt;. Although it may feel like more effort to explain or give additional context, it is likely appreciated by the mentee, and can save a lot of unneeded frustration.&lt;/p&gt;

&lt;p&gt;Have any other additions to the list? Feel free to comment your own!&lt;/p&gt;

</description>
      <category>engineering</category>
      <category>career</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Best Social Media UI Kit Design</title>
      <author>Mahfuzul Islam Nabil</author>
      <pubDate>Wed, 06 Oct 2021 17:02:23 +0000</pubDate>
      <link>https://dev.to/mahfuzulnabil/best-social-media-ui-kit-design-13kg</link>
      <guid>https://dev.to/mahfuzulnabil/best-social-media-ui-kit-design-13kg</guid>
      <description>&lt;p&gt;This is a Social Media Web App UI Kit.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q430xTfd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vojv4dyk5pcne21t8772.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q430xTfd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vojv4dyk5pcne21t8772.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Social Media UI Kit. This is the most complete social media UI kit ever created. It can be used not only for your commercial projects but also for your personal portfolio. You can use it to follow, unfollow, ignore users, view images, and much more on Twitter, Instagram, Facebook, and many others.&lt;/p&gt;

&lt;p&gt;UIHUT ¬†is a design resources platform for UX/UI designers, developers, and founders. Our high-quality design resources will help you to speed up the design process. Resources:&lt;/p&gt;

&lt;p&gt;Have 14,000+ Best UI Design (Free/Premium)&lt;br&gt;
(web templates, web app, mobile app, illustrations, icons, 3d illustrations)&lt;/p&gt;

&lt;p&gt;( Codes Also Available)&lt;br&gt;
From ¬†www.uihut.com&lt;br&gt;
[ Lifetime PLAN: $99]&lt;br&gt;
Offer,&lt;br&gt;
CODE: nab10&lt;br&gt;
(10% DISCOUNT OFF)&lt;/p&gt;

</description>
      <category>socialmediauikit</category>
      <category>socialui</category>
      <category>uikits</category>
      <category>webapp</category>
    </item>
    <item>
      <title>WordPress Security Handbook 2021</title>
      <author>Tobias</author>
      <pubDate>Wed, 06 Oct 2021 16:57:40 +0000</pubDate>
      <link>https://dev.to/omniploy/wordpress-security-handbook-2021-14ek</link>
      <guid>https://dev.to/omniploy/wordpress-security-handbook-2021-14ek</guid>
      <description>&lt;p&gt;Learn all you need to know about WordPress security and how to effectively protect your WordPress websites from hacking attacks.&lt;/p&gt;

&lt;p&gt;Welcome to the WordPress Security Handbook 2021. I‚Äôll try to teach you how to effectively protect your WordPress websites from malicious actors and hackers. Knowledge about WordPress security, and knowing how to protect yourself and your clients from malicious actors, makes your job a lot more peaceful.&lt;/p&gt;

&lt;p&gt;This handbook is not just a practical guide. I also try to give you an overview of everything important when dealing with WordPress security. First, I‚Äôll walk you through the most common types of attacks you have to protect your WordPress websites from. Then we‚Äôll go through hosting, backups, updates, HTTPS, and other topics that will make you far less vulnerable to such attacks.&lt;/p&gt;

&lt;p&gt;If you have found anything missing in this WordPress security handbook, please leave it in the comments below the post. Now let‚Äôs get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-the-wordpress-security-handbook"&gt;
  &lt;/a&gt;
  Introduction to the WordPress security handbook
&lt;/h2&gt;

&lt;p&gt;WordPress is the most used CMS in the world. By July 2021 about &lt;a href="https://w3techs.com/technologies/details/cm-wordpress"&gt;42 percent of all websites on the Internet use WordPress&lt;/a&gt; as their foundation. The popularity of WordPress makes it an attractive target for black-hat hackers. If you‚Äôd find a vulnerability in a rather recent WordPress core version, you could potentially target 10s or even 100s of millions of websites. Cash is to be made. The &lt;a href="https://www.internetlivestats.com/watch/websites-hacked/"&gt;internet live stats for Websites hacked in real-time&lt;/a&gt; illustrate the scale.&lt;/p&gt;

&lt;p&gt;However, the WordPress core itself is not that much of a concern for us most of the time. It‚Äôs what‚Äôs below WordPress and what builds on top of it. If the underlying web server is vulnerable, the WordPress website on top could be in danger too. The same is true for vulnerable plugins and themes and how it‚Äôs configured.&lt;/p&gt;

&lt;p&gt;There is no way to be completely safe from cyber-attacks. This is true for every single piece of software. However, some standards and conventions help you to protect your WordPress website from most attacks. That‚Äôs what I‚Äôm going to show you in this handbook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-types-of-attacks-learning-about-attacks"&gt;
  &lt;/a&gt;
  Common types of attacks / Learning about attacks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dWYZ6eGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vlq2m0fy033nyblocw5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWYZ6eGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vlq2m0fy033nyblocw5.jpg" alt="hacker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me show you what we try to protect our websites against before we learn how to safeguard your WordPress websites. With this knowledge, you‚Äôll have a far better idea of what procedures to take when it comes to security issues. So don‚Äôt skip over this part!&lt;/p&gt;

&lt;p&gt;This is not a complete list of all possible types of hacking attacks, but the most widespread ones performed, that you as a WordPress developer should know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#xss-attacks"&gt;
  &lt;/a&gt;
  XSS attacks
&lt;/h3&gt;

&lt;p&gt;If attackers can inject malicious scripts into a website, they can perform so-called Cross-Site Scripting (XSS) attacks. Attackers can then steal session information or perform requests on behalf of the user.&lt;/p&gt;




&lt;p&gt;What are scripts in a website?&lt;/p&gt;

&lt;p&gt;When we talk about scripts in a website, we‚Äôre typically referring to JavaScript in the HTML document. With JavaScript, you can run logic in the client‚Äôs browser. For example, the WordPress Block Editor is primarily written in JavaScript.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YljOEcsL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ami0k2rwizkz066jnhrx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YljOEcsL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ami0k2rwizkz066jnhrx.jpg" alt="Representation of a simple XXS attack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;XSS attacks can be especially critical if the target has admin rights on the website. The attacker would then be able to take control of the entire website in a number of ways.&lt;/p&gt;

&lt;p&gt;XSS attacks are prevented by sanitization and escaping.&lt;/p&gt;

&lt;p&gt;Sanitization is the process of removing &amp;lt;&amp;gt; and dangerous stuff from scripts or HTML from user input before it is entered into a database.&lt;/p&gt;

&lt;p&gt;This is how JavaScript would look like before sanitization:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
 alert("Hello world");
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It becomes this after sanitization:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;amp;lt;script&amp;amp;gt;
 alert(&amp;amp;quot;Hello world&amp;amp;quot;);
&amp;amp;lt;/script&amp;amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, it can be safely injected into a website without any browser ever running it.&lt;/p&gt;

&lt;p&gt;As a second measure, however, the data should also be escaped before injecting it into HTML. The explanation from the &lt;a href="https://developer.wordpress.org/themes/theme-security/data-sanitization-escaping/#escaping-securing-output"&gt;WordPress theme handbook&lt;/a&gt; nails escaping the best:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"Escaping is the process of securing output by stripping out unwanted data, like malformed HTML or script tags, preventing this data from being seen as code."&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You find a &lt;a href="https://owasp.org/www-community/attacks/xss/"&gt;more detailed and general explanation of XSS on the OWASP&lt;/a&gt; website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#csrf-attacks"&gt;
  &lt;/a&gt;
  CSRF attacks
&lt;/h3&gt;

&lt;p&gt;Whenever you make an HTTP request to a server, something is performed on it. For example, by visiting this blog post, you instructed the server to get the post from the database and assemble it into a valid HTML document (let‚Äôs forget about cache for a minute). Such requests are so-called non-destructive requests. They don‚Äôt change anything.&lt;/p&gt;

&lt;p&gt;But there are also con-/destructive HTTP requests you can make that can create, change, or delete data. For example, if you create a blog post in the WordPress backend and click save, you send an HTTP request to the server to save the post to the database. Or if you click the ‚ÄúDelete‚Äù button, you send an HTTP request to delete it from the database.&lt;/p&gt;

&lt;p&gt;Now, usually, such endpoints are protected from unauthenticated and unauthorized requests. You have to be signed in for example to perform them.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say you are an admin for a blog, and you have the right to delete blog posts. What if I sent you a link that, if you clicked it, would submit such a delete request to your website?&lt;/p&gt;

&lt;p&gt;That would be considered a very simplified version of a so-called Cross-Site Request Forgery (CSRF) attack. Attackers manipulate their victims into doing something that they want them to do.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TWbHMbuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eb6e5xmesdfx25xauzp6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWbHMbuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eb6e5xmesdfx25xauzp6.jpg" alt="Representation of a simple cross-site request forgery (CSRF)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nonces help you to protect against CSRF attacks. These are random keys that get generated and appended to links or forms that perform an action. They only work once, and then a new one is generated. If the nonce is not present or invalid, the request gets rejected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1kqzIr6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s76hqu591sqsr6qlmo2k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1kqzIr6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s76hqu591sqsr6qlmo2k.png" alt="Prevention of a CSRF attack using nonces"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs take the Cache purge button in the top bar in my WordPress backend as an example.&lt;/p&gt;

&lt;p&gt;This button links to the following URL:&lt;/p&gt;

&lt;p&gt;https‚Äã://omniploy.com/wp-admin/index.php&lt;br&gt;
?nginx_helper_action=purge&lt;br&gt;
&amp;amp;nginx_helper_urls=all&lt;br&gt;
&amp;amp;&lt;strong&gt;_wpnonce=4b4sh4x6bd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have placed the parameters on separate lines to make them easier to read. Usually, this is all in one line.&lt;/p&gt;

&lt;p&gt;This URL includes the nonce at the end. That means I can only perform the request with this link once since the nonce is only valid once.&lt;/p&gt;

&lt;p&gt;If somebody would try to trick me into performing a cache purge, they would need to know a valid nonce, otherwise, the request would get rejected, even if I‚Äôm signed in.&lt;/p&gt;

&lt;p&gt;The same is true for forms. The nonce is there usually injected as a hidden field. An example from the profile edit form in the WordPress backend:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;! -- ... --&amp;gt;
 &amp;lt;form id="your-profile" action="https://omniploy.com/wpadmin/profile.php" method="post" novalidate="novalidate"&amp;gt;
   &amp;lt;input type="hidden" id="_wpnonce" name="_wpnonce" value="391e11d52e"&amp;gt;
   &amp;lt;! -- ... --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you ever find an endpoint that performs some destructive action immediately on request and doesn‚Äôt require a nonce, report it to the developers. Otherwise, you risk being duped into unintentionally performing an action you don‚Äôt want.&lt;/p&gt;

&lt;p&gt;You find a &lt;a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery"&gt;more detailed explanation of CSRF attacks on Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sql-injection"&gt;
  &lt;/a&gt;
  SQL injection
&lt;/h3&gt;

&lt;p&gt;The WordPress installation uses SQL as the language to communicate with your database. For every change on a post, page, etc. a SQL query is performed. Sometimes to read something from the database and sometimes to write something to it. Now, it would be very bad if somebody unauthorized would be able to perform such an SQL query uncontrolled.&lt;/p&gt;

&lt;p&gt;If an attacker would be able to inject unvalidated SQL, it‚Äôs called an SQL injection attack.&lt;/p&gt;

&lt;p&gt;A pretty common SQL query looks like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO users (firstname, lastname, email, ...)
VALUES ("John", "Doe", "john@doe.com", ...);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Inserting user input without sanitizing it correctly could end badly.&lt;/p&gt;

&lt;p&gt;Now what would happen if somebody would enter the following value into the first name field:&lt;/p&gt;

&lt;p&gt;"); DELETE FROM users; --&lt;/p&gt;

&lt;p&gt;This example would lead to a complete wipe of the ‚Äúusers‚Äù table if the value wouldn‚Äôt be sanitized:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO users (firstname, lastname, email, ...)
VALUES (""); DELETE FROM users; -- ", "Doe", "john@doe.com", ...);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As a result, user input is sanitized from SQL queries before the query is run, the same as it is for dangerous JavaScript. That way you prevent SQL injection attacks.&lt;/p&gt;

&lt;p&gt;More on &lt;a href="https://www.w3schools.com/sql/sql_injection.asp"&gt;SQL injection on the W3Schools&lt;/a&gt; website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brute-force-attacks"&gt;
  &lt;/a&gt;
  Brute force attacks
&lt;/h3&gt;

&lt;p&gt;In a brute force attack, a malicious actor tries to guess a password by trying many candidates for a particular account. Attackers often use password databases with common passwords, hence also called dictionary attacks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--utCYZhzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qj3ft23ff5lyuvco28q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--utCYZhzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qj3ft23ff5lyuvco28q.jpg" alt="Representation of a login brute force attack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Without any limits on login tries (or Captchas on the login form), an attacker could test potentially thousands of passwords in a matter of seconds.&lt;/p&gt;

&lt;p&gt;That‚Äôs why it‚Äôs important to use strong passwords, that don‚Äôt relate to you in any way. No birthdays or child names in the password. Only random characters or words. Attackers could easily run personalized dictionary attacks.&lt;/p&gt;

&lt;p&gt;You should also check if your passwords are in some sort of password database. This can be checked in the &lt;a href="https://haveibeenpwned.com/Passwords"&gt;Pwned Passwords database by Have I Been Pwned&lt;/a&gt;, for example. Many password managers also support checks for this out-of-the-box.&lt;/p&gt;

&lt;p&gt;More on &lt;a href="https://en.wikipedia.org/wiki/Brute-force_attack"&gt;brute-force attacks on Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maninthemiddle-mitm-attacks"&gt;
  &lt;/a&gt;
  Man-in-the-middle (MITM) attacks
&lt;/h3&gt;

&lt;p&gt;Man-in-the-middle attacks, or also called monkey-in-the-middle attacks, are attacks in which the attacker places themselves between client and server. This can be done in multiple ways. For instance, through a switch, gateway, or any other node between the server and the client.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SZ3QUyy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l54sr8thcxf7urc0z1l9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SZ3QUyy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l54sr8thcxf7urc0z1l9.jpg" alt="Representation of a typical man-in-the-middle attack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MITM-Attacks are the reason, why we use encrypted connections nowadays. HTTPS ensures end-to-end encryption to prevent any actor in between from reading along.&lt;/p&gt;

&lt;p&gt;More on &lt;a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;Man-in-the-middle attacks on Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#denialofservice-dos-attacks"&gt;
  &lt;/a&gt;
  Denial-of-service (DoS) attacks
&lt;/h3&gt;

&lt;p&gt;Denial-of-service attacks have the goal to bring your WordPress website down to deny access to other visitors. DoS attacks are performed by overwhelming your server with requests until it can‚Äôt handle any other requests anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ksGxrBWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtoelcl46tquywx8taao.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ksGxrBWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtoelcl46tquywx8taao.jpg" alt="Representation of a DoS attack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cloudflare.com/learning/ddos/ddos-attack-tools/slowloris/"&gt;Cloudflare has a great post on Slowloris DoS attacks&lt;/a&gt; which explains the concept pretty well.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#distributed-denialofservice-ddos-attacks"&gt;
  &lt;/a&gt;
  Distributed denial-of-service (DDos) attacks
&lt;/h4&gt;

&lt;p&gt;DDoS attacks are like normal DoS attacks, but with distributed computing power. Instead of one computer trying to bring down the server, a collection of computers are. The number of controlled nodes can vary from a few to 1000s or 100.000s.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KERKEVUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuxzciifosikoonrl805.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KERKEVUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuxzciifosikoonrl805.jpg" alt="Representation of a DDoS attack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.zdnet.com/article/sony-playstation-network-struck-by-ddos-attack-bomb-threat-grounds-executive/"&gt;Big companies are regularly confronted with big DDoS campaigns&lt;/a&gt; against them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#social-engineering"&gt;
  &lt;/a&gt;
  Social engineering
&lt;/h3&gt;

&lt;p&gt;Social engineering means manipulating somebody or a whole group into doing something the attacker wants them to do. Social engineering is often practiced in combination with XSS or CSRF attacks.&lt;/p&gt;

&lt;p&gt;Consider a phishing email from PayPal that asks you to confirm your password or anything similar. They want you to go to some fake login page and enter your credentials. If you enter your credentials, you have been socially engineered. The hackers fish for login credentials, hence also called phishing attacks.&lt;/p&gt;

&lt;p&gt;Sophisticated social engineering campaigns are typically directed towards influential people. Administrators or highly-privileged users. The more power you have (for example managing websites) the more you have to watch out for getting tricked.&lt;/p&gt;

&lt;p&gt;More on &lt;a href="https://www.imperva.com/learn/application-security/social-engineering-attack/"&gt;social engineering in this post by imperva&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supply-chain-attacks"&gt;
  &lt;/a&gt;
  Supply chain attacks
&lt;/h3&gt;

&lt;p&gt;Another sometimes practiced type of attack in the WordPress environment is taking over the update infrastructure for a plugin, for example. Also called a supply chain attack. This can be done by buying a plugin from another developer or by hacking the developer‚Äôs account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azPw3eQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4aa057o9ud2qwd6ava9p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azPw3eQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4aa057o9ud2qwd6ava9p.jpg" alt="Representation of a supply chain attack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs why it‚Äôs so important to choose plugins from reputable developers. When a plugin update is installed it basically replaces the old plugin source files with the new ones. Meaning, a plugin update can contain any source code the developer wants to put in, including malicious source code.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/SolarWinds#2019%E2%80%932020_supply_chain_attacks"&gt;recent SolarWinds attacks&lt;/a&gt; were also supply-chain attacks.&lt;/p&gt;

&lt;p&gt;More on &lt;a href="https://en.wikipedia.org/wiki/Supply_chain_attack"&gt;supply chain attacks&lt;/a&gt; on Wikipedia.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hacking-outdated-software"&gt;
  &lt;/a&gt;
  Hacking outdated software
&lt;/h3&gt;

&lt;p&gt;Hacking outdated software is probably the most common type of WordPress security vulnerability. Outdated plugins, themes, or even underlying server software contain publicly known security vulnerabilities that have been patched in newer versions. If the software (plugins, themes, server software) is not updated regularly, these vulnerabilities don‚Äôt get patched. Hence, making you vulnerable.&lt;/p&gt;

&lt;p&gt;More on updates later in this guide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zeroday-vulnerability-attacks"&gt;
  &lt;/a&gt;
  Zero-day vulnerability attacks
&lt;/h3&gt;

&lt;p&gt;Zero-day vulnerabilities are flaws that have yet to be discovered by the developer or the public. A zero-day attack occurs when a malicious actor discovers a vulnerability and exploits it rather than reporting it to the developer.&lt;/p&gt;

&lt;p&gt;Zero-day attacks are not that common on smaller WordPress websites. They usually target the ‚Äúbig fishes‚Äù. That‚Äôs because finding zero-day vulnerabilities is hard and cost-intensive. It‚Äôs in the interest of the attacker to keep a zero-day vulnerability as long as possible unknown to the public. But the more a vulnerability is exploited, the higher the chance of getting detected and patched.&lt;/p&gt;

&lt;p&gt;More on &lt;a href="https://en.wikipedia.org/wiki/Zero-day_(computing)"&gt;zero-day vulnerabilities on Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hosting-providers-in-the-wordpress-security-context"&gt;
  &lt;/a&gt;
  Hosting providers in the WordPress security context
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ge8v8mDq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kchlr2k2d12uwhdhepiv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ge8v8mDq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kchlr2k2d12uwhdhepiv.jpg" alt="Hosting providers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hosting providers are one of the most critical parts when talking about WordPress security. You can invest as much time and money as you want in making WordPress and all the plugins as secure as possible, if the underlying infrastructure is compromised.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-hosting"&gt;
  &lt;/a&gt;
  Types of hosting
&lt;/h3&gt;

&lt;p&gt;There are different types of hosting you can choose from. Which one is best for you, depends on your budget and how much time you‚Äôd like to invest in maintenance.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#managed-wordpress-hosting"&gt;
  &lt;/a&gt;
  Managed WordPress hosting
&lt;/h4&gt;

&lt;p&gt;A managed WordPress hosting provider is the most expensive option, but also with the most dedicated WordPress team. They also usually provide WordPress-specific tools and systems like extended Auto-Update processes, WAFs (Web Application Firewalls ‚Äì later more on that), staging environments, and much more.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wpengine.com/"&gt;WPEngine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kinsta.com/"&gt;Kinsta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wpmudev.com/"&gt;WPMU DEV Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.siteground.com/"&gt;Siteground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#general-managed-hosting"&gt;
  &lt;/a&gt;
  General managed hosting
&lt;/h4&gt;

&lt;p&gt;These are hosting providers which don‚Äôt exclusively focus on WordPress. They typically provide a management interface like &lt;a href="https://en.wikipedia.org/wiki/CPanel"&gt;cPanel&lt;/a&gt; and let you install a lot of different types of systems. If you choose this type of hosting, you should pay very close attention to security. Many of these hosting providers are slow with server updates, and we don‚Äôt want any already-patched vulnerabilities unpatched on our server.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://godaddy.com/"&gt;Godaddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.namecheap.com/"&gt;Namecheap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bluehost.com/"&gt;Bluehost&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#dedicated-vps-hosting"&gt;
  &lt;/a&gt;
  Dedicated / VPS hosting
&lt;/h4&gt;

&lt;p&gt;A dedicated physical or virtual private server (VPS) is a physical (or virtual) server somewhere in a data center that you can rent and do whatever you want. You have to install an operating system, the software required to run a web server, and you have to maintain it in the future.&lt;/p&gt;

&lt;p&gt;This is the most low-level option when setting up hosting, besides buying physical servers and building the infrastructure on-site.&lt;/p&gt;

&lt;p&gt;There are also managed VPS solutions. This is like shared hosting, but without sharing your server with others. The hosting provider is taking care of the underlying operating system and the software required on a web server.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/"&gt;Digital Ocean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hetzner.com/"&gt;Hetzner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cloud-hosting"&gt;
  &lt;/a&gt;
  Cloud hosting
&lt;/h4&gt;

&lt;p&gt;Cloud hosting is like dedicated hosting but with the difference, that you only pay for the resources that you use. You can easily scale up on peak times and scale down when the resources aren‚Äôt needed. However, this comes at a premium. Cloud resources are, compared to dedicated servers or VPS relatively expensive.&lt;/p&gt;

&lt;p&gt;Thanks to virtual infrastructure, the differences between dedicated hosting and cloud hosting are shrinking. Many hosting providers provide both, and you can sometimes switch between them with one click or only a few steps.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hetzner.cloud/"&gt;Hetzner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linode.com/"&gt;linode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/"&gt;Microsoft Azure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#uptime"&gt;
  &lt;/a&gt;
  Uptime
&lt;/h3&gt;

&lt;p&gt;Uptime should be at least 99 percent. Website downtime is bad for SEO, user experience, and revenue.&lt;/p&gt;

&lt;p&gt;SEO is especially critical for websites that get most of their traffic from Google. Google uses downtime as a ranking factor. They rely on you to be there when they send you traffic. Being down multiple times a year can damage your search engine ranking in the long term.&lt;/p&gt;

&lt;p&gt;For e-commerce stores, this could be even more damaging. Every minute a store is down, no orders can be placed.&lt;/p&gt;

&lt;p&gt;Check that your hosting provider is transparent with downtimes. They usually have a status page with the uptime. There you can check what has been down when.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://status.wpmudev.com/"&gt;WPMU DEV status page&lt;/a&gt; as an example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uptodate-software"&gt;
  &lt;/a&gt;
  Up-to-date software
&lt;/h3&gt;

&lt;p&gt;Your hosting provider (or you if you host yourself) should regularly install software updates and replace old, outdated software that doesn‚Äôt get updates anymore. PHP, MySQL or MariaDB and your operating system. Everything needs updates regularly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security-protocols"&gt;
  &lt;/a&gt;
  Security protocols
&lt;/h3&gt;

&lt;p&gt;Your hosting provider should have solid prevention protocols to prevent attacks in the first place, but also an incident response plan. You have to know everything when a data breach happens and also inform your users. You are obligated to do that, so don‚Äôt skip that if you are ever confronted with that!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backups-in-the-wordpress-security-context"&gt;
  &lt;/a&gt;
  Backups in the WordPress security context
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7_iUMOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3vynzhldedw4bu9yid2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7_iUMOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3vynzhldedw4bu9yid2.jpg" alt="Backup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ever had a situation in which you accidentally deleted or lost data? Can you imagine what happens if you lose a live client website? What would you do?&lt;/p&gt;

&lt;p&gt;In the context of WordPress security, we make backups for the worst case. For example, if data gets encrypted by an attacker or if everything gets deleted.&lt;/p&gt;

&lt;p&gt;Losing data is one of the worst things that can happen to you. It‚Äôs damaging for you, your client, and it‚Äôs also quite unprofessional. &lt;strong&gt;The first plugin you should install in any new WordPress website is a backup plugin if you don‚Äôt have any strategy on the hosting side&lt;/strong&gt; for backups.&lt;/p&gt;

&lt;p&gt;You‚Äôll probably want to use an automated plugin or a hosting backup solution if you want to make backups on a regular basis. Most hosting providers offer some sort of backup tool for your WordPress websites. If not, you can choose a plugin.&lt;/p&gt;

&lt;p&gt;Depending on how often you change something on a website, the interval for the backups can vary. If you publish a lot on your site, I‚Äôd recommend a daily database backup and a file backup every week (except if you work a lot with media. Then you can also go with daily backup for files).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#onsite-backups"&gt;
  &lt;/a&gt;
  Onsite backups
&lt;/h3&gt;

&lt;p&gt;On-site backups are those that are kept on-site, such as on the web server or on storage that can be accessed remotely.&lt;/p&gt;

&lt;p&gt;Onsite backups are quick for recovery since the backup is directly accessible. Onsite backups should be created in more regular intervals than offsite backups.&lt;/p&gt;

&lt;p&gt;Even if you create onsite backups, you should still create offsite backups.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#offsite-backups"&gt;
  &lt;/a&gt;
  Offsite backups
&lt;/h3&gt;

&lt;p&gt;The backed-up system does not have direct access to offsite backups. They are stored off-site and backups cannot directly be restored. Before you can restore, you must actively obtain the backup from somewhere (for example, an external hard drive) and put it on the system you wish to restore to.&lt;/p&gt;

&lt;p&gt;If you already have onsite backups, you should still create offsite backups at regular intervals. That way, you always have backups available even if the worst-case scenario arises and onsite backups are compromised.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backup-plugins"&gt;
  &lt;/a&gt;
  Backup plugins
&lt;/h3&gt;

&lt;p&gt;There are many backup plugins you can use to backup your WordPress website.&lt;/p&gt;

&lt;p&gt;Here is a list with popular ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wordpress.org/plugins/updraftplus/"&gt;UpdraftPlus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wordpress.org/plugins/backwpup/"&gt;BackWPup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wordpress.org/plugins/jetpack/"&gt;Jetpack Backup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wpmudev.com/project/snapshot/"&gt;WPMU DEV Snapshot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They all do pretty much the same. Backing up files and database. You can configure them based on your needs.&lt;/p&gt;

&lt;p&gt;However, keep in mind that if your site gets too big (in terms of space used) the backup process can drastically reduce your website speed and take a long time to back up. If that‚Äôs the case, I‚Äôd recommend going with a solid solution on the hosting site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosting-backups"&gt;
  &lt;/a&gt;
  Hosting backups
&lt;/h3&gt;

&lt;p&gt;Most managed WordPress hosting services provide some sort of hosting-side backup solution. Depending on the provider, you can configure backups for the complete website, database, files, or even the complete server.&lt;/p&gt;

&lt;p&gt;Hosting providers that don‚Äôt specialize in WordPress, generally also have backups options.&lt;/p&gt;

&lt;p&gt;Here a few hosting providers with great backup solutions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wpmudev.com/"&gt;WPMU DEV Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wpengine.com/"&gt;WPEngine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/"&gt;Microsoft Azure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#testing-integrity-of-backups"&gt;
  &lt;/a&gt;
  Testing integrity of backups
&lt;/h3&gt;

&lt;p&gt;You should also do regular restores in a test environment to verify the integrity of your backups, every few months or so.&lt;/p&gt;

&lt;p&gt;Even better, integrate backups into your development cycle. Don‚Äôt move files and databases manually when you move from dev to live or to staging. Use backups instead. This way you always know that backups are consistent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updates-in-the-wordpress-security-context"&gt;
  &lt;/a&gt;
  Updates in the WordPress security context
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86BglTkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx8vb1z82njugxuqms49.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86BglTkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx8vb1z82njugxuqms49.jpg" alt="Updates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keeping your WordPress websites up to date is one of the most critical things you can do to avoid having your site hacked.&lt;/p&gt;

&lt;p&gt;Software is never perfect. Reputable developers try their best to keep the software as free from vulnerabilities as possible. However, sometimes there are dangerous vulnerabilities found that could harm your website. Developers then release updates that close (patch) these holes.&lt;/p&gt;

&lt;p&gt;That‚Äôs why is so important to regularly update the software on your system. Having a process in place for updating your websites is key to security.&lt;/p&gt;

&lt;p&gt;WAFs (we‚Äôll talk about them later) can protect you from getting exploited by many of these vulnerabilities. However, it‚Äôs not a replacement for updating your systems. Updates also often include bug fixes or bring new functionality. So there are many reasons to keep your WordPress website updated.&lt;/p&gt;

&lt;p&gt;You have to be sure to update your systems from top to bottom. Besides your WordPress core installation, plugins, and themes, other parts need updates as well like PHP, the web server engine, or the operating system itself.&lt;/p&gt;

&lt;p&gt;WordPress gives you the option for Automatic Updates. However, this option should be used with caution. You should only do this on small websites with very few plugins in place that have a good track record on non-destructive updates.&lt;/p&gt;

&lt;p&gt;Unfortunately, you cannot enable auto-update for security updates only, since there is no differentiation between security updates and functional updates. Minor version changes can still introduce breaking changes (even if unusual). This means you have to treat any update the same. So keep the number of plugins and themes on your WordPress websites low.&lt;/p&gt;

&lt;p&gt;Let‚Äôs explore them further.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wordpress-core-updates"&gt;
  &lt;/a&gt;
  WordPress core updates
&lt;/h3&gt;

&lt;p&gt;WordPress‚Äôs exposure makes it probably one of the most secure pieces of software in the world. Many security vulnerabilities are patched, which possibly wouldn‚Äôt be found or at a much later time in other less popular systems. More eyes see more.&lt;/p&gt;

&lt;p&gt;Also, big companies like Automattic (the parent company of WordPress.com), WPEngine, and many more invest heavily in the WordPress core, to keep it as secure as possible. It‚Äôs in their best interest since they use it as their foundation themselves. WordPress.com is simply a WordPress multisite installation with many customizations and a lot of resources.&lt;/p&gt;

&lt;p&gt;This means that the WordPress core is not that much of a concern for us, security-wise. However, installing WordPress core updates is still important and best practice. WordPress evolves all the time and at some point, plugin and theme developers drop support for older versions. This means if you don‚Äôt update the WordPress core, at some point you also can‚Äôt update plugins, themes, and even PHP versions anymore. And updating at that point will be no fun!&lt;/p&gt;

&lt;p&gt;You can find a list with all identified WordPress core vulnerabilities in the &lt;a href="https://wpscan.com/wordpresses"&gt;WPScan vulnerability database&lt;/a&gt; (prev. WordPress vulnerability database ‚Äì wpvulndb.com).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plugin-and-theme-updates"&gt;
  &lt;/a&gt;
  Plugin and theme updates
&lt;/h3&gt;

&lt;p&gt;Keeping plugins and themes updated is important. Most plugins and themes are not developed with the same awareness for security as WordPress core. Thus, they are creating a perfect attack surface.&lt;/p&gt;

&lt;p&gt;There are regularly severe security vulnerabilities in plugins and themes detected, and you better update regularly if you don‚Äôt want to be vulnerable to them after they have been made public.&lt;/p&gt;

&lt;p&gt;Check out the section Reputation of the developer to learn more about what to check for before installing a plugin or theme.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#system-updates"&gt;
  &lt;/a&gt;
  System updates
&lt;/h3&gt;

&lt;p&gt;If you choose a good managed hosting solution, this is not that important for you. However, if you choose to manage to host on your own, you also have to manage updates for software in your setup. This includes PHP, the webserver (e.g. Apache), the operating system, and every other piece of software on that server.&lt;/p&gt;

&lt;p&gt;That‚Äôs one reason, why I‚Äôd recommend you to go with managed hosting solution unless you actively want to manage the underlying system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#https"&gt;
  &lt;/a&gt;
  HTTPS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2BUpaRN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv8n5k5jj4h10539r0hl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2BUpaRN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv8n5k5jj4h10539r0hl.jpg" alt="HTTPS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should always assume that you are being watched if you visit a website that uses unencrypted HTTP. Never enter login credentials into unencrypted websites. If you accidentally do, change your password over an HTTPS connection.&lt;/p&gt;

&lt;p&gt;Besides HTTP being insecure, it also impacts your SEO. Since 2014 Google uses HTTPS as a ranking factor. I‚Äôd consider this a no-brainer because it‚Äôs so simple to do nowadays and you‚Äôre much safer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#swithcing-wordpress-to-https"&gt;
  &lt;/a&gt;
  Swithcing WordPress to HTTPS
&lt;/h3&gt;

&lt;p&gt;Switching to HTTPS is relatively easy nowadays. There is simply no reason to communicate over HTTP any more thanks to Let‚Äôs Encrypt. Do yourself and your visitors a favor and switch to HTTPS if you haven‚Äôt already.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getting-a-tls-certificate"&gt;
  &lt;/a&gt;
  Getting a TLS certificate
&lt;/h4&gt;

&lt;p&gt;Long gone are the days when you had to pay hundreds of dollars to buy a certificate and install it through the command line, only to renew it every other year and start this process all over again. Let‚Äôs Encrypt lets you generate domain verified TLS certificates. With their client software, they even automate the whole process. It requests the certificate, installs it on the server, and renews it automatically. Many hosting providers even support this with one click now. Completely for free.&lt;/p&gt;




&lt;p&gt;What's the difference between TLS and SSL?&lt;/p&gt;

&lt;p&gt;SSL (Secure Sockets Layer) is the old name for the encryption protocol. TLS was first used in 1999 with TLS version 1.0. RIP SSL&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#absolute-vs-relative-urls"&gt;
  &lt;/a&gt;
  Absolute vs. relative URLs
&lt;/h4&gt;

&lt;p&gt;Absolute URLs include the domain. Relative URLs, on the other hand, do not, making them context-dependent.&lt;/p&gt;

&lt;p&gt;Example absolute and relative URLs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Absolute URL: https‚Äã://omniploy.com/about/&lt;/li&gt;
&lt;li&gt;Relative URL: /about/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The browser will automatically refer to the domain the link is on when using relative URLs. So if the domain would be example.com instead of omniploy.com, the relative URL also would be https‚Äã://example.com/about/.&lt;/p&gt;

&lt;p&gt;WordPress and many plugins often use absolute URLs in the database and therefore if we want to switch to HTTPS, we have to do a search and replace in the database for the protocol and domain in the database.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#search-and-replace-httpurls-with-httpsurls"&gt;
  &lt;/a&gt;
  Search and replace http-URLs with https-URLs
&lt;/h5&gt;

&lt;p&gt;Depending on the size of your WordPress website, the process of searching and replacing URLs can take a long time.&lt;/p&gt;

&lt;p&gt;Please keep in mind, that you directly manipulate the database. You should always create a full backup before doing a search and replace in the database.&lt;/p&gt;

&lt;p&gt;Most of the time I use the &lt;a href="https://wordpress.org/plugins/better-search-replace/"&gt;Better Search Replace plugin&lt;/a&gt; to do search-replace, however, every search and replace plugin is usually sufficient. It‚Äôs just important that the system you use does support serialization.&lt;/p&gt;

&lt;p&gt;WordPress has a way to save objects in the database in a serialized way. Alongside that, the length of the data is saved. Meaning if your URL first has 10 characters and suddenly 11, it has to be changed to otherwise the data is invalidated.&lt;/p&gt;

&lt;p&gt;This is also the reason why I highly recommend not to do a search and replace on a SQL file. You could theoretically do an easy search and replace in an editor, however, the serialized data is not considered there, leaving you with inconsistent data.&lt;/p&gt;

&lt;p&gt;Here is an example of the strings you should search and replace to switch your WordPress website from HTTP to HTTPS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search for: http‚Äã://yourdomain.com&lt;/li&gt;
&lt;li&gt;Replace with: http‚Äã&lt;strong&gt;s&lt;/strong&gt;://yourdomain.com &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gAs6II13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i6wz0ifs925oaa3v8p2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gAs6II13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i6wz0ifs925oaa3v8p2.jpg" alt="Better search and replace screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Better search and replace screenshot for omniploy.com&lt;br&gt;
If you mixed www and non-www versions you should also replace them too. If you want, you can also bring more consistency into the links by removing the www (or adding it, depending on your preferences) from URLs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search for: http‚Äã://www‚Äã.yourdomain.com&lt;/li&gt;
&lt;li&gt;Replace with: http‚Äã&lt;strong&gt;s&lt;/strong&gt;‚Äã://yourdomain.com or http‚Äã&lt;strong&gt;s&lt;/strong&gt;‚Äã://www‚Äã.yourdomain.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#wordpress-57-oneclick-switch"&gt;
  &lt;/a&gt;
  WordPress 5.7+: One-click switch
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://make.wordpress.org/core/2021/02/22/improved-https-detection-and-migration-in-wordpress-5-7/"&gt;WordPress 5.7 has introduced a one-click feature to switch from HTTP to HTTPS&lt;/a&gt;. However, this will not change the replaced URLs in the database. It just switches the site URL and home URL to HTTPS and replaces HTTP URLs in the back- and frontend on the fly. That‚Äôs OK while migrating to HTTPS, but the database should be updated nonetheless.&lt;/p&gt;

&lt;p&gt;This feature is more of a hook extension, which allows managed hosting providers or plugin developers to hook into these processes and do the migration specifically. This opens up great new ways for plugin developers to create migration solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hsts"&gt;
  &lt;/a&gt;
  HSTS
&lt;/h3&gt;

&lt;p&gt;HTTP Strict Transport Security (HSTS) protects your visitors (and you) from MitM-attacks like &lt;a href="https://en.wikipedia.org/wiki/Downgrade_attack"&gt;protocol downgrade attacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whenever you type in for example omniploy.com into the address bar for the first time and visit the page, the first request is typically a plain text HTTP request. The server, however, responds with a redirect to the upgraded and encrypted HTTPS connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RYaqLInb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5idsgejv34ep8k50ntbq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RYaqLInb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5idsgejv34ep8k50ntbq.jpg" alt="Example of an HTTP to HTTPS upgrade"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now with HTTP Strict Transport Security (HSTS) the server tells the browser that every connection to this domain has to be through an HTTPS connection for a specified period of time.&lt;/p&gt;

&lt;p&gt;HSTS is enforced in the browser if the server responds with the HTTPS response header field ‚ÄúStrict-Transport-Security‚Äù.&lt;/p&gt;

&lt;p&gt;I‚Äôd recommend you to enable HSTS on your websites, however, it‚Äôs not as important nowadays. Many browsers (or extensions like &lt;a href="https://www.eff.org/https-everywhere"&gt;HTTPS Everywhere&lt;/a&gt;) use HTTPS over plaintext HTTP now by default. So instead of first performing an HTTP request which redirects to the HTTPS version, the browser directly connects on HTTPS. This makes downgrade attacks much harder (although not impossible).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#protection-of-user-accounts"&gt;
  &lt;/a&gt;
  Protection of user accounts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLWfLUg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmia4a8pvlyxizx6y3j8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLWfLUg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmia4a8pvlyxizx6y3j8.jpg" alt="Protection of user accounts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When talking about WordPress security, we also have to talk about the protection of user accounts. In this section, we are going to talk about passwords, usernames, 2-factor authentication, and much more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strong-passwords"&gt;
  &lt;/a&gt;
  Strong passwords
&lt;/h3&gt;

&lt;p&gt;Using strong passwords is an integral part of protecting user accounts from getting compromised. Hackers often employ sophisticated and automated brute force attacks to crack passwords.&lt;/p&gt;

&lt;p&gt;Here are the three rules to strong passwords:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#strong-password-rule-1-complex"&gt;
  &lt;/a&gt;
  Strong password rule #1: Complex
&lt;/h4&gt;

&lt;p&gt;A strong complex password complies with the following rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At least 12 characters long.&lt;/li&gt;
&lt;li&gt;Both uppercase and lowercase letters.&lt;/li&gt;
&lt;li&gt;At least one number.&lt;/li&gt;
&lt;li&gt;At least one special character.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#strong-password-rule-2-unique"&gt;
  &lt;/a&gt;
  Strong password rule #2: Unique
&lt;/h4&gt;

&lt;p&gt;Don‚Äôt use a password multiple times. Every account you create should have a unique password. This protects you from getting multiple accounts compromised when one leaks your password.&lt;/p&gt;




&lt;p&gt;Where to store all my passwords?&lt;/p&gt;

&lt;p&gt;Nobody can remember all passwords they use. Especially not if they are complex and unique for every account. We use &lt;a href="https://1password.com/"&gt;1Password&lt;/a&gt; internally, however, there are many solutions. Always check the reputation.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#strong-password-rule-3-unknown"&gt;
  &lt;/a&gt;
  Strong password rule #3: Unknown
&lt;/h4&gt;

&lt;p&gt;You should never use passwords that are somewhere in a database. Some services let &lt;a href="https://haveibeenpwned.com/Passwords"&gt;you check your passwords against password databases&lt;/a&gt;. If it‚Äôs in a database, don‚Äôt use it!&lt;/p&gt;

&lt;p&gt;Many password managers automate this process of checking your passwords. Passwords that fulfill the complexity rule shouldn‚Äôt have that much of a problem with being unknown. Still, it‚Äôs good practice to check.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#twofactor-authentication-2fa-mulitfactor-authentication-mfa"&gt;
  &lt;/a&gt;
  Two-factor authentication (2FA) / Mulit-factor authentication (MFA)
&lt;/h3&gt;

&lt;p&gt;Two-factor authentication or multi-factor authentication is a mechanism, in which you have to enter a second, for example, time-based, password to gain access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hNX-sRRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75sv6f796m2i7zcv7rdv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hNX-sRRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75sv6f796m2i7zcv7rdv.jpg" alt="Representation of 2-actor sign in with OTP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are different types of Multi-factor authentication. There is the time-based OTP (One-time-password), SMS, E-Mail, and more. I personally prefer time-based OTPs, since they always work are an open standard and can all be saved easily in a password manager.&lt;/p&gt;

&lt;p&gt;Try to prevent using SMS or email for 2FA since they are often interceptable.&lt;/p&gt;

&lt;p&gt;There are many &lt;a href="https://wordpress.org/plugins/search/2fa/"&gt;2FA plugins for WordPress&lt;/a&gt;. If you are already using something like Wordfence or iThemes Security, I‚Äôd recommend going with that, since it‚Äôs already included and doesn‚Äôt require any other plugins to be installed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-admin-usernames"&gt;
  &lt;/a&gt;
  Default admin usernames
&lt;/h3&gt;

&lt;p&gt;Try to always use something different for admin users than the default usernames like ‚Äúadmin‚Äù, ‚Äúwpadmin‚Äù, ‚Äúroot‚Äù, or ‚Äúadministrator‚Äù. While this is not to make your admin username your second password, since &lt;a href="https://make.wordpress.org/hosting/handbook/security/#a-note-about-usernames"&gt;WordPress sees usernames as part of public not private information&lt;/a&gt;, it still keeps a lot of the dumber bots from trying brute force attacks. These are the usernames that are targeted by most bots that try to enter the WordPress website. Use something random like ‚Äúadm1n1strat0r‚Äù. It doesn‚Äôt really matter what you use, just don‚Äôt use common ones.&lt;/p&gt;

&lt;p&gt;Plugins like Wordfence also have an option for forbidden usernames. If somebody tries to sign in with these forbidden usernames, they are blocked immediately from signing in. Forbidden usernames should be the typical admin usernames ‚Äúadmin‚Äù, ‚Äúroot‚Äù, ‚Äúwpadmin‚Äù, etc.&lt;/p&gt;

&lt;p&gt;Usernames are not for authentication so they should not be treated like passwords. This is more of a honeypot tactic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#login-limit"&gt;
  &lt;/a&gt;
  Login limit
&lt;/h3&gt;

&lt;p&gt;To make your WordPress websites less attractive to brute force attacks, you should limit the attempts somebody can try to log in. This makes it much harder for hackers to guess your password and increase website performance since requests are blocked after a certain number of tries.&lt;/p&gt;

&lt;p&gt;Plugins that include login limits and blocks are Wordfence and iThemes Security. However, there are many more in the &lt;a href="https://wordpress.org/plugins/search/login+limit/"&gt;WordPress Repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-admin-users-crrectly"&gt;
  &lt;/a&gt;
  Using admin users crrectly
&lt;/h3&gt;

&lt;p&gt;You should use Admin users only if you really need the rights they have. For example to do maintenance work, install plugins, or create users. But if you only create pages or posts you should switch to a user with more restrictive rights like the Editor or Author role.&lt;/p&gt;

&lt;p&gt;With plugins like &lt;a href="https://wordpress.org/plugins/user-role-editor/"&gt;the Members plugin&lt;/a&gt;, you can create custom roles with exactly the permissions required for the task.&lt;/p&gt;

&lt;p&gt;Using different user accounts with different rights levels also makes you way less vulnerable to CSRF attacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plugin-and-themes-in-the-wordpress-security-context"&gt;
  &lt;/a&gt;
  Plugin and Themes in the WordPress security context
&lt;/h2&gt;

&lt;p&gt;Plugins and themes play a big role when talking about WordPress security. Since they are, just as WordPress core itself, running plain PHP code, you should always check if you trust the developer. In this section, we are going to talk about what to look for in plugins and themes to keep your WordPress websites secure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unused-plugins-and-themes"&gt;
  &lt;/a&gt;
  Unused plugins and themes
&lt;/h3&gt;

&lt;p&gt;Plugins and themes that are not used should be removed completely. Don‚Äôt just deactivate them. Delete them. Plugin and theme files still can be called directly even when the plugin is deactivated. Fewer executable files on your server mean a smaller attack surface.&lt;/p&gt;

&lt;p&gt;You can always install it later again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outdated-and-abandoned-plugins-and-themes"&gt;
  &lt;/a&gt;
  Outdated and abandoned plugins and themes
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btKd3d_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37f2260fwk547jkyv2of.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btKd3d_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37f2260fwk547jkyv2of.jpg" alt="Abandoned plugin banner on WordPress.org"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You‚Äôve probably seen this message on top of a WordPress plugin page once or twice. I‚Äôd highly recommend you not to use outdated and abandoned plugins since nobody is continuing development, leaving you without any patches to later found security vulnerabilities.&lt;/p&gt;

&lt;p&gt;Down the road, this can even mean an update block. The outdated plugin is relying for example on a lower PHP version, which is not supported by a more recent plugin or even WordPress core itself anymore.&lt;/p&gt;

&lt;p&gt;Also, try to switch to other systems as soon as you see that the plugin developer is abandoning development.&lt;/p&gt;

&lt;p&gt;That‚Äôs also a reason why I recommend doing a trust check on every plugin you use. This will lead to way fewer problems down the road.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reputation-of-the-developer"&gt;
  &lt;/a&gt;
  Reputation of the developer
&lt;/h3&gt;

&lt;p&gt;As we learned throughout this WordPress security guide, the developer has a lot of power over our WordPress websites. Trust is a major factor here. The developers have the power to change code on your system with updates, meaning you have to trust the people behind the plugin or theme to not do something dumb.&lt;/p&gt;

&lt;p&gt;Here are a few questions you should ask yourself before installing a plugin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is the plugin/theme on the market for a long time?&lt;/li&gt;
&lt;li&gt;Does the developer commit to support the plugin in the long term?&lt;/li&gt;
&lt;li&gt;Does the plugin or theme bring a revenue stream to the developer to support expenses and to make the continuation of development worthwhile?&lt;/li&gt;
&lt;li&gt;Is the plugin or theme developed by a company or a large community?&lt;/li&gt;
&lt;li&gt;Has the plugin or theme had only few security vulnerabilities in the past? (Check the &lt;a href="https://wpscan.com/plugins"&gt;vulnerability database for plugins&lt;/a&gt; and &lt;a href="https://wpscan.com/themes"&gt;themes&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Has the developer a good track record in responding to reported vulnerabilities and patching them quickly?&lt;/li&gt;
&lt;li&gt;Has the developer a good track record on not breaking stuff when updating the plugin or theme?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you can mostly answer these questions with yes, you are probably fine with using the plugin or theme.&lt;/p&gt;

&lt;p&gt;Like with every piece of software you use or buy, you should check if you trust the developers behind it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#server-configuration-and-wpconfigphp-in-the-wordpress-security-context"&gt;
  &lt;/a&gt;
  Server configuration and wp-config.php in the WordPress security context
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wUZRF-Ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2cdqtu5uozsq8y6yv3k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wUZRF-Ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2cdqtu5uozsq8y6yv3k.jpg" alt="Server configuration and wp-config.php in the WordPress security context"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How the server of your website is configured, can make a big difference in terms of WordPress security. Since server security can be a topic on its own, we focus here a bit more on the WordPress related part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#php-execution-in-uploads-directory"&gt;
  &lt;/a&gt;
  PHP execution in /uploads directory
&lt;/h3&gt;

&lt;p&gt;The /uploads directory in WordPress is for media files. Something that doesn‚Äôt fit in there are executable files. To prevent executable files from running even if they get through the upload filters, you have to configure your web server engine (Apache) to not execute them.&lt;/p&gt;

&lt;p&gt;Plugins like Wordfence provide an easy option to disable execution in the /uploads directory.&lt;/p&gt;

&lt;p&gt;However, you can also do this easily manually. Simply put the following lines in a file called .htaccess directly in your /wp-content/uploads/ directory:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// .htaccess
&amp;lt;IfModule mod_php5.c&amp;gt;
 php_flag engine 0
&amp;lt;/IfModule&amp;gt;
&amp;lt;IfModule mod_php7.c&amp;gt;
 php_flag engine 0
&amp;lt;/IfModule&amp;gt;
&amp;lt;IfModule mod_php.c&amp;gt;
 php_flag engine 0
&amp;lt;/IfModule&amp;gt;

AddHandler cgi-script .php .phtml .php3 .pl .py .jsp .asp .htm .shtml .sh .cgi
Options -ExecCGI
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This deactivates the PHP engine for the directory completely. This is pretty much the same as what the Wordfence plugin does if the option is enabled.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wpconfigphp-the-wordpress-configuration"&gt;
  &lt;/a&gt;
  wp-config.php: The WordPress configuration
&lt;/h3&gt;

&lt;p&gt;The wp-config.php is the configuration file for WordPress related stuff. You can find &lt;a href="https://wordpress.org/support/article/editing-wp-config-php/"&gt;a complete reference for the wp-config.php&lt;/a&gt; and what configuration option it has out-of-the-box on the official WordPress website. In this security guide, we talk about the wp-config.php in the scope of WordPress security.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#moving-wpconfigphp-one-directory-up"&gt;
  &lt;/a&gt;
  Moving wp-config.php one directory up
&lt;/h4&gt;

&lt;p&gt;Many users of WordPress are unaware that the wp-config.php file may be moved one directory higher, and WordPress will still locate it. This is a pretty basic but powerful step, security-wise. Your wp-config.php normally is in the same directory as all the other ones. Meaning in the public space.&lt;/p&gt;

&lt;p&gt;Now if you have configured everything correctly, there is usually not much to worry about since even if you‚Äôd call the wp-config.php directly by accessing yourwebsite.com/wp-config.php, it would still only show a blank page. This is why the config stuff is all in PHP and not echoed on the page.&lt;/p&gt;

&lt;p&gt;However, if there is a misconfiguration on the server and the file gets returned showing PHP code, you can quickly get in trouble. Considering how important and secret the data in the wp-config.php is, we should always consider moving it out of the public space. It‚Äôs just an easy security win.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#disabling-source-code-editing-in-the-backend-disallowfileedit"&gt;
  &lt;/a&gt;
  Disabling source code editing in the backend (DISALLOW_FILE_EDIT)
&lt;/h4&gt;

&lt;p&gt;WordPress has a theme and plugin editor which can be used to directly edit plugin and theme files. I‚Äôd highly recommend you disable this.&lt;/p&gt;

&lt;p&gt;First, editing source files is dangerous. One wrong character and your website can be down. Another problem is that when plugins and themes are updated, all edits to source code files are lost since the plugin/theme files get overwritten and thus all changes are gone.&lt;/p&gt;

&lt;p&gt;There is only one case where I can think this backend code editor could be viable. And that‚Äôs when you have a child theme, and you quickly want to modify that. But also here it would be good practice to use a code editor and version the changes. That‚Äôs all not the case with the theme and plugin editor.&lt;/p&gt;

&lt;p&gt;So for 99.9%, I‚Äôd recommend disabling the code editor completely.&lt;/p&gt;

&lt;p&gt;And that‚Äôs pretty simple. Open up the wp-config.php file and add the following line:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// wp-config.php
// Below this line =&amp;gt; /* That's all, stop editing! Happy blogging. */
define('DISALLOW_FILE_EDIT', true);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#forcing-https-on-the-backend-forcessladmin"&gt;
  &lt;/a&gt;
  Forcing HTTPS on the backend (FORCE_SSL_ADMIN)
&lt;/h4&gt;

&lt;p&gt;If your website communicates over HTTPS (which it should) you should set the FORCE_SSL_ADMIN option to true. This forces all traffic to the backend over HTTPS and allows the transfer of cookies only over HTTPS by setting the Secure flag on the cookie.&lt;/p&gt;

&lt;p&gt;Add the following line to your &lt;strong&gt;wp-config.php&lt;/strong&gt; to force HTTPS on the backend:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// wp-config.php
// Below this line =&amp;gt; /* That's all, stop editing! Happy blogging. */
define('FORCE_SSL_ADMIN', true);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#unsing-unique-security-keys"&gt;
  &lt;/a&gt;
  Unsing unique security keys
&lt;/h4&gt;

&lt;p&gt;WordPress uses unique keys to sign and encrypt cookies. These keys should be kept secret since an attacker could generate session cookies with these keys themselves. If you follow the normal WordPress installation process or some other automated installation process, these keys should get generated automatically. But sometimes, especially in older WordPress installations, generating keys was often never done which let you with something like this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// wp-config.php
// Never let your config with this
define( 'AUTH_KEY',         'put your unique phrase here' );
define( 'SECURE_AUTH_KEY',  'put your unique phrase here' );
define( 'LOGGED_IN_KEY',    'put your unique phrase here' );
define( 'NONCE_KEY',        'put your unique phrase here' );
define( 'AUTH_SALT',        'put your unique phrase here' );
define( 'SECURE_AUTH_SALT', 'put your unique phrase here' );
define( 'LOGGED_IN_SALT',   'put your unique phrase here' );
define( 'NONCE_SALT',       'put your unique phrase here' );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you find this in your config, I‚Äôd highly recommend you generate new ones (&lt;a href="https://api.wordpress.org/secret-key/1.1/salt/"&gt;WordPress.org has an easy endpoint for that&lt;/a&gt;) and reset all passwords.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#changing-database-prefix-tableprefix"&gt;
  &lt;/a&gt;
  Changing database prefix ($table_prefix)
&lt;/h4&gt;

&lt;p&gt;The database prefix brings you the possibility, to run multiple WordPress instances in one database, simply by using different prefixes.&lt;/p&gt;

&lt;p&gt;In terms of WordPress security, I‚Äôd recommend you to use something random as a prefix.&lt;/p&gt;

&lt;p&gt;Changing the database prefix is an easy way to improve security on a new WordPress installation by simply changing the database prefix to something different than wp_. WordPress asks you while installing what you wish to use as a database prefix. Use something random, like c3po_.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JdSHbpkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34f118olicwr210m4c45.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JdSHbpkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34f118olicwr210m4c45.jpg" alt="WordPress installation screen with a different prefix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also change the database prefix later. However, I‚Äôd recommend you to use some plugin for that and always create a backup before changing the database prefix.&lt;/p&gt;

&lt;p&gt;Plugins like &lt;a href="https://ithemes.com/security/"&gt;iThemes security&lt;/a&gt; allow you to change the database prefix afterward.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#blocking-display-of-debug-messages-wpdebugdisplay"&gt;
  &lt;/a&gt;
  Blocking display of debug messages (WP_DEBUG_DISPLAY)
&lt;/h4&gt;

&lt;p&gt;If you have to do debugging on a live site, don‚Äôt display debug messages directly to the screen. Debug messages can include information that could be potentially interesting for attackers. Rather let WordPress write into a debug.log file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// wp-config.php
define('WP_DEBUG_DISPLAY', false);
define('WP_DEBUG_LOG', true);
define('WP_DEBUG', false); // Change this to true if you want to log debug messages.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You should set the WP_DEBUG_DISPLAY option to false right away, even if you don‚Äôt debug now. That way you don‚Äôt risk displaying any debug messages because you‚Äôve forgotten to turn it off.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-application-firewall-waf"&gt;
  &lt;/a&gt;
  Web Application Firewall (WAF)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oh7kqvfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsscooci139wcddwubuk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oh7kqvfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsscooci139wcddwubuk.jpg" alt="Web Application Firewall (WAF)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A web application firewall is like anti-virus software for your website. It sits in front of your website and checks for potentially harmful requests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plugin-waf"&gt;
  &lt;/a&gt;
  Plugin WAF
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wMpXFix7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptbp8fpyo40h6rhvigs3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wMpXFix7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptbp8fpyo40h6rhvigs3.jpg" alt="Representation of a plugin WAF in a typical connection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If your hosting provider doesn‚Äôt provide a WAF, you can also go with a plugin solution. Our favorite option is &lt;a href="https://wordpress.org/plugins/wordfence/"&gt;Wordfence&lt;/a&gt;. Besides real-time Firewall Rule updates and IP blacklists, they also provide numerous other features like blocking, throttling, 2FA, and much more to lock down your WordPress website.&lt;/p&gt;

&lt;p&gt;However, we recommend the paid version since the free version gets most firewall rule updates for newly detected security vulnerabilities only after 30 days. This means if a vulnerability is detected in a plugin you‚Äôve installed on your system, and you are not updating that plugin, your website is vulnerable for 30 days before you get the firewall rule.&lt;/p&gt;

&lt;p&gt;However, I‚Äôd recommend you to enable the extended protection. That way Wordfence can check requests before WordPress itself is even loaded and protect you against plugin and theme attacks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloud-waf"&gt;
  &lt;/a&gt;
  Cloud WAF
&lt;/h3&gt;

&lt;p&gt;A cloud WAF is a proxy in between your WordPress website and your visitors. Instead of pointing the domain to the server directly, you configure the IP to point to a cloud WAF. This cloud WAF will then forward legit traffic to the server and back.&lt;/p&gt;

&lt;p&gt;Examples of cloud WAFs are &lt;a href="http://cloudflare.com/"&gt;Cloudflare&lt;/a&gt; or &lt;a href="https://sucuri.net/website-firewall/"&gt;Sucuri WAF&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0NmPPdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a26zpj8beupawkptnw6j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0NmPPdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a26zpj8beupawkptnw6j.jpg" alt="Representation of a cloud WAF in a typical connection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#standalone-waf"&gt;
  &lt;/a&gt;
  Standalone WAF
&lt;/h3&gt;

&lt;p&gt;A local server WAF is software installed locally which filters traffic before it reaches your WordPress website.&lt;/p&gt;

&lt;p&gt;An example of a local server WAF is the &lt;a href="https://nintechnet.com/ninjafirewall/wp-edition/"&gt;NinjaFirewall&lt;/a&gt;. They specialize in WordPress and PHP. Instead of installing a plugin in the WordPress environment like with Wordfence, they place a standalone WAF in front of your webserver. Another example would be the &lt;a href="https://perishablepress.com/7g-firewall/"&gt;7G firewall from Perishable Press&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzM3DUgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t03cjxelo0lv8tesdd80.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzM3DUgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t03cjxelo0lv8tesdd80.jpg" alt="Representation of a local server WAF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-plugins"&gt;
  &lt;/a&gt;
  Security Plugins
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1w83dKJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8idxikjrcj6pj4vuwqrw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1w83dKJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8idxikjrcj6pj4vuwqrw.jpg" alt="Security Plugins"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following list contains not all WordPress security plugins out there. These are the ones we used and reviewed ourselves and with them, you can pretty much do everything you need to do in terms of WordPress security.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wordfence-security"&gt;
  &lt;/a&gt;
  Wordfence Security
&lt;/h3&gt;

&lt;p&gt;Wordfence is our favorite security plugin. The people at Wordfence focus solely on WordPress security and do an awesome job of identifying and closing vulnerabilities in plugins and themes.&lt;/p&gt;

&lt;p&gt;Wordfence Premium is a bit expensive but worth it if you want to keep your stress level low. And they get cheaper on every license. The price for Wordfence starts at $99 and goes down to $75.25 if you buy 15 or more licenses. You find a complete list of their prices on their website.&lt;/p&gt;

&lt;p&gt;Besides their WAF which is developed solely for WordPress, they also include many more features to harden your WordPress security. Here is a list of a few features included in Wordfence:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rate limiting&lt;/li&gt;
&lt;li&gt;2FA (2-factor authentication)&lt;/li&gt;
&lt;li&gt;Country blocking&lt;/li&gt;
&lt;li&gt;Automatic malware scanning&lt;/li&gt;
&lt;li&gt;Brute force protection&lt;/li&gt;
&lt;li&gt;And many more‚Ä¶&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I‚Äôve heard a few times in the WordPress community that they experience slow websites with Wordfence activated in their websites. I haven‚Äôt been able to confirm, that Wordfence is slowing down your website. I think this may be true if you run on extremely cheap and limited resources. However, you shouldn‚Äôt have problems if your hosting environment is properly scaled.&lt;/p&gt;

&lt;p&gt;They also have a great podcast called &lt;a href="https://www.wordfence.com/podcast/"&gt;Think Like a Hacker with Wordfence&lt;/a&gt;. They talk about current security events. If you want to stay up-to-date on what is going on in the WordPress security world, I can really recommend you to subscribe to their podcast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ithemes-security"&gt;
  &lt;/a&gt;
  iThemes Security
&lt;/h3&gt;

&lt;p&gt;iThemes Security is a little bit of an allrounder. There is also an iThemes Security Pro option which extends the functionality even further. They however don‚Äôt provide a real-time updated WAF.&lt;/p&gt;

&lt;p&gt;That‚Äôs also the reason why they can provide a plan for $199 per year for unlimited sites. Unlike Wordfence, they only sell the plugin and don‚Äôt need to provide infrastructure for every WAF installed.&lt;/p&gt;

&lt;p&gt;I still think that iThemes Security, together with a plugin, cloud, or standalone WAF is a great way to greatly improve the security of your WordPress websites. Especially if the prices for Wordfence turn you off.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-security-plugins"&gt;
  &lt;/a&gt;
  Other security plugins
&lt;/h3&gt;

&lt;p&gt;There are many more security plugins out there that get the job done. I haven‚Äôt worked a lot with them. However, they are from reputable developers, so I have no problems recommending them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WPMU DEV Defender&lt;/li&gt;
&lt;li&gt;Jetpack&lt;/li&gt;
&lt;li&gt;Sucuri Security&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#response-to-hacked-wordpress-websites"&gt;
  &lt;/a&gt;
  Response to hacked WordPress websites
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---d5sLu8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f73f49n9xiblf10e4j9k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---d5sLu8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f73f49n9xiblf10e4j9k.jpg" alt="Response to hacked WordPress websites"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Up until now, we‚Äôve learned how to protect our WordPress websites from malicious attacks. In this part, we are going to talk about what to do in case of a breach. Having a strategy in place helps to reduce stress and panic, as well as the time it takes to respond to and stop the attack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-wordpress-security-incident-response-plan"&gt;
  &lt;/a&gt;
  The WordPress security incident response plan
&lt;/h3&gt;

&lt;p&gt;A WordPress security incident response plan defines 6 phases for every incident.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at these processes from the perspective of WordPress website developers and administrators.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#incident-response-1-prepare"&gt;
  &lt;/a&gt;
  Incident response #1: Prepare
&lt;/h4&gt;

&lt;p&gt;Never think you are unhackable. There only has to be one severe zero-day vulnerability in a plugin or theme on your website that compromises the whole system. You should prepare for such cases. Think about backup systems and personnel training for administrators to fight off social engineering.&lt;/p&gt;

&lt;p&gt;Here is a list of things to consider when preparing for hacking attacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Having a solid backup solution. Onsite and offsite.&lt;/li&gt;
&lt;li&gt;Having a way to analyze logs.&lt;/li&gt;
&lt;li&gt;Training for clients that demand admin rights on their website.&lt;/li&gt;
&lt;li&gt;Having security policies in place. Who can do what and when?&lt;/li&gt;
&lt;li&gt;Having malware scanners in place.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Preparation is key when dealing with hacking attacks. It lowers the risk of panicking in such situations, which in turn means you are quicker in dealing with them. Preparation also often decides if you even detect the attack.&lt;/p&gt;

&lt;p&gt;If a hacker only wants to take over your website for their DDoS network, you may never know that your website is compromised or only after it‚Äôs too late.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#incident-response-2-identify"&gt;
  &lt;/a&gt;
  Incident response #2: Identify
&lt;/h4&gt;

&lt;p&gt;In order to fight off an attack, you first have to identify what is being attacked. That‚Äôs where logs come in and why I recommended in the preparation part to have a way to analyze logs. They help you to identify what endpoints are called and their payloads.&lt;/p&gt;

&lt;p&gt;Another way to identify attacks is to use a malware scanner. Configure a malware scanner to run every few days and to inform you in case of malware is found. For example, Wordfence allows you to do this.&lt;/p&gt;

&lt;p&gt;Also, check if other websites or systems are impacted by the attack. If you have identified the vulnerable piece, like a plugin, check all your other systems and if you can, disable it, to prevent another attack on these systems.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#incident-response-3-contain"&gt;
  &lt;/a&gt;
  Incident response #3: Contain
&lt;/h4&gt;

&lt;p&gt;When identified you have to contain the malware. Back up the infected WordPress website, change all security keys, API keys, passwords, etc. If possible take it off the network. Update the software and PHP versions on the webserver.&lt;/p&gt;

&lt;p&gt;You want to do everything to get it under control.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#incident-response-4-eradicate"&gt;
  &lt;/a&gt;
  Incident response #4: Eradicate
&lt;/h4&gt;

&lt;p&gt;When contained, you need to eradicate the root cause. This can be removing an insecure plugin, changing breached passwords, updating outdated software, and so on.&lt;/p&gt;

&lt;p&gt;You also have to check if a backdoor has been installed. Hackers do that exactly for that case that you fix the initial hole or to gain even more power over your systems.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#incident-response-5-recover"&gt;
  &lt;/a&gt;
  Incident response #5: Recover
&lt;/h4&gt;

&lt;p&gt;If possible move your cleaned website to a fresh and updated webserver. Be sure that you are securely protected against a new breach when you go back online.&lt;/p&gt;

&lt;p&gt;Have you changed all passwords and API keys in the compromised website? Did you remove all unknown user accounts created by the attacker? Is the core, the plugins, the theme up-to-date?&lt;/p&gt;

&lt;p&gt;Also, define how long you want to monitor the recovered WordPress websites more closely.&lt;/p&gt;

&lt;p&gt;Now it‚Äôs also the time to improve and harden the security of your WordPress websites. Introduce WAFs, 2FA, more strict password policies, and policies to software used. Check all used plugins and themes, and if they don‚Äôt comply with these new policies, replace them with something else.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#incident-response-6-lessons-learned"&gt;
  &lt;/a&gt;
  Incident response #6: Lessons learned
&lt;/h4&gt;

&lt;p&gt;If a plugin or theme was responsible for the breach, notify the developers about that vulnerability. They should quickly fix the problem to prevent other WordPress websites from getting hacked.&lt;/p&gt;

&lt;p&gt;If any personal information on your visitors or users was leaked, you are obligated in most countries to report such incidents to the authorities and inform the affected people. The logs help you identify the leaked data.&lt;/p&gt;

&lt;p&gt;Also, ask yourself what you should do differently in the future to prevent such situations. For example, after a social engineering attack against a client‚Äôs website, check if clients have to be trained better.&lt;/p&gt;

&lt;p&gt;Even if you never need this response plan, you should still have one. It removes stress, and it‚Äôs also a lot more professional towards your clients.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#antipatterns-in-the-wordpress-security-context"&gt;
  &lt;/a&gt;
  Anti-patterns in the WordPress security context
&lt;/h2&gt;

&lt;p&gt;There are a few WordPress security anti-patterns that still get practiced and taught in the industry. Anti-patterns are ineffective or even counterproductive solutions that are frequently employed in reaction to a problem. This section contains some personal opinions, so read it and decide for yourself whether you want to use them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security-by-obscurity"&gt;
  &lt;/a&gt;
  Security by obscurity
&lt;/h3&gt;

&lt;p&gt;I‚Äôd consider security by obscurity, not good practice. At least for WordPress websites. Either because it doesn‚Äôt have much of an impact on the security of your website, because it could create problems with certain plugins or themes, or because it could give you a false sense of security.&lt;/p&gt;

&lt;p&gt;There are plugins that try to hide that your website is running WordPress. They do this by trying to remove everything that could lead someone to the conclusion that you are running on WordPress. Like by changing the default /wp-admin path to something different, or by removing the WordPress meta tags.&lt;/p&gt;

&lt;p&gt;However, this could lead to problems with other plugins or themes that expect that data to be there. Also, every plugin that loads something on the frontend could be used to detect that it‚Äôs WordPress by its own unique thumbprint.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do not rely on security by obscurity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is way too much effort for the benefits you get. As I said you‚Äôd have to check every plugin and theme if they leave something in the frontend that could expose your WordPress installation. And for what? That nobody knows you are running on WordPress? Not worth it. If you follow the rules above you are already secure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#captchas-on-login-forms"&gt;
  &lt;/a&gt;
  Captchas on login forms
&lt;/h3&gt;

&lt;p&gt;If you followed the section on protecting user accounts you should already be well suited against common login attacks. On login forms, captchas make your and your user‚Äôs life harder without adding much benefit. Additionally, if you choose to use reCAPTCHA you also send valuable data to Google for free.&lt;/p&gt;

&lt;p&gt;Captchas are useful for contact forms, signup forms, and alike but not for sign-in forms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-great-wordpress-security-related-resources"&gt;
  &lt;/a&gt;
  Other great WordPress security related resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I5jCgWpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcwb8xtfdk7bxkynadlm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I5jCgWpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcwb8xtfdk7bxkynadlm.jpg" alt="Other great WordPress security related resources"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WordPress security is not a set it and forget it topic. You should always stay on top of this topic. Only that way, you know when and how to react to new threads.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blogs-and-websites"&gt;
  &lt;/a&gt;
  Blogs and websites
&lt;/h3&gt;

&lt;p&gt;There are many other great blogs and websites online which cover WordPress security.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wordpress.org/about/security/"&gt;WordPress.org Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wordfence.com/blog/"&gt;Wordfence Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.sucuri.net/"&gt;Sucuri Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wpscan.com/"&gt;WPScan Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#podcasts"&gt;
  &lt;/a&gt;
  Podcasts
&lt;/h3&gt;

&lt;p&gt;Security podcasts are great to keep you updated on security-related topics and what is going on in this world. I really like to listen to them on my commute to the work or while doing housework.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.wordfence.com/podcast/"&gt;Think Like a Hacker by Wordfence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twit.tv/shows/security-now"&gt;Security now&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Making a page builder with CloudCannon</title>
      <author>David Large</author>
      <pubDate>Wed, 06 Oct 2021 16:52:02 +0000</pubDate>
      <link>https://dev.to/cloudcannon/making-a-page-builder-with-cloudcannon-3kmm</link>
      <guid>https://dev.to/cloudcannon/making-a-page-builder-with-cloudcannon-3kmm</guid>
      <description>&lt;p&gt;&lt;em&gt;By Jordan Trbuhovic&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Page builders give editors an intuitive and easy way to manage and build websites. All editing can be done within CloudCannon's Visual Editor in real time.&lt;/p&gt;

&lt;p&gt;Live editing on CloudCannon is enabled with the use of &lt;a href="https://github.com/CloudCannon/bookshop"&gt;Bookshop&lt;/a&gt;. Bookshop is a component development workflow for static websites which currently supports &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; and &lt;a href="https://11ty.dev/"&gt;Eleventy&lt;/a&gt;, and will support a wider variety of static site generators in the near future.&lt;/p&gt;

&lt;p&gt;Bookshop helps you to create a component-based file structure, which works out of the box with CloudCannon's &lt;em&gt;&lt;a href="https://cloudcannon.com/documentation/articles/defining-what-adds-to-an-array-with-array-structures/#array-structures"&gt;array structures&lt;/a&gt;&lt;/em&gt;. (See our documentation on &lt;a href="https://cloudcannon.com/documentation/articles/array-structures-reference/"&gt;array structures&lt;/a&gt; for more information.) This setup allows CloudCannon to immediately re-render any changes to page components and edits within the Visual Editor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Download or fork our example repositories ( &lt;a href="https://github.com/CloudCannon/page-builder-example-jekyll"&gt;Jekyll&lt;/a&gt;, &lt;a href="https://github.com/CloudCannon/page-builder-example-eleventy"&gt;11ty&lt;/a&gt; ) from GitHub. If you've downloaded the example website you will need to unzip it. With your terminal, change directory into the website. e.g. &lt;code&gt;cd ~/desktop/page-builder-example-jekyll/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To run the website locally run the following commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;em&gt;(11ty)&lt;/em&gt;: &lt;code&gt;npm i&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Install &lt;em&gt;(Jekyll)&lt;/em&gt;: &lt;code&gt;npm i &amp;amp;&amp;amp; bundle install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run the stack: &lt;code&gt;npm start&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your website can now be opened in a web browser by visiting the URL listed in your terminal. Once the website is built and uploaded to CloudCannon you will be able to use the live editing features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-structure"&gt;
  &lt;/a&gt;
  Directory structure
&lt;/h2&gt;

&lt;p&gt;After unzipping or cloning the example website you will see the following directories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;.cloudcannon&lt;/strong&gt;
&lt;em&gt;(This is a hidden directory so it will only be visible if you open the website with your text editor)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;component-library&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;bookshop&lt;/li&gt;
&lt;li&gt;components&lt;/li&gt;
&lt;li&gt;shared&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;site&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are all necessary for Bookshop, and enable live editing with CloudCannon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.cloudcannon&lt;/strong&gt; contains a pre-build script that tells CloudCannon to install any dependencies, and run the Bookshop script. Without this, live editing on CloudCannon won't be possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;component-library&lt;/strong&gt; has three directories which contain the website components, shared styles, Bookshop config, etc. The &lt;em&gt;components&lt;/em&gt; directory is where all of your components should be built. Each component has its own folder which holds everything relating to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;component.&amp;lt;framework&amp;gt;&lt;/em&gt;&lt;/strong&gt;  &lt;em&gt;The component template&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;component.bookshop.toml&lt;/em&gt;&lt;/strong&gt;  &lt;em&gt;The configuration/front-matter settings for the component on CloudCannon&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;component.scss&lt;/em&gt;&lt;/strong&gt;  &lt;em&gt;The styles for the component&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This gives you an easy to manage component library with self-contained components. Bookshop automatically compiles the styles on build, and turns all components into array structures for CloudCannon. You don't need to worry about &lt;em&gt;adding, including, or importing&lt;/em&gt; these files anywhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;site&lt;/strong&gt; contains all of the Jekyll or Eleventy files for your website. You can build your website as you would with any other site within this directory. Your site is separated from Bookshop for better organization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-new-components"&gt;
  &lt;/a&gt;
  Creating new components
&lt;/h2&gt;

&lt;p&gt;Page components give editors a collection of different content types/layouts that can be used to build pages. Bookshop only enables live editing for components, so if you have other hard-coded content structures these will not live update when modified via front matter.&lt;/p&gt;

&lt;p&gt;When creating new components they should be added to a folder with the name of the component, inside the &lt;em&gt;component-library &amp;gt; components&lt;/em&gt; folder. This component folder must contain the three files mentioned in the Directory structure section (component template file, component TOML file, component styles).&lt;/p&gt;

&lt;p&gt;An example of a new component would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- component-library
   - components
      - my-new-component
         - my-new-component.bookshop.toml
         - my-new-component.jekyll.html
         - my-new-component.scss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To help with this process you can run the Bookshop gen command, which will create a skeleton for any new component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx @bookshop/gen --name my-new-component
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-components"&gt;
  &lt;/a&gt;
  Using Components
&lt;/h2&gt;

&lt;p&gt;To give editors access to components, you need to add the &lt;code&gt;content_blocks&lt;/code&gt; key to the front matter of any page you want components to be accessible on.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;index.html
--------
title: Welcome to our website
content_blocks:
--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the website has been built on CloudCannon, &lt;code&gt;content_blocks&lt;/code&gt; will be shown as a button within the Visual Editor that lets you choose which components to add to the page. &lt;code&gt;content_blocks&lt;/code&gt; links to the structure listed in the TOML file of each component, which auto-populates the component picker.&lt;/p&gt;

&lt;p&gt;Components that get added to the &lt;code&gt;content_blocks&lt;/code&gt; array are rendered onto pages with the following code, which is located in the &lt;em&gt;default&lt;/em&gt; page layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!--  The `page` include loops through all content_blocks and renders them.
        Using a bookshop tag here means that live previewing will catch new components. --&amp;gt;&lt;/span&gt;
        {% bookshop_include "page" content_blocks: content_blocks %}
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- This tag registers live previewing on CloudCannon. --&amp;gt;&lt;/span&gt;
    {% bookshop_live _cloudcannon/bookshop-live.js %}
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;page.&amp;lt;framework&amp;gt; (referenced in the codeblock above)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% for block in content_blocks %}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cms-editor-link"&lt;/span&gt;
        &lt;span class="na"&gt;data-cms-editor-link=&lt;/span&gt;&lt;span class="s"&gt;"cloudcannon:#content_blocks[{{ forloop.index0 }}]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cms-editor-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;

        {% bookshop {{block._bookshop_name}} bind: block %}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can modify the default page layout in the example website if you want to change the way components are rendered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uploadingsyncing-to-cloudcannon"&gt;
  &lt;/a&gt;
  Uploading/syncing to CloudCannon
&lt;/h2&gt;

&lt;p&gt;To get your new Bookshop site on CloudCannon you need to &lt;a href="https://app.cloudcannon.com/"&gt;log in&lt;/a&gt; to your account and create a new site. You can choose to sync a repository, upload a folder, or upload the zip downloaded from this post.&lt;/p&gt;

&lt;p&gt;If you're uploading a folder, make sure the &lt;code&gt;.cloudcannon&lt;/code&gt; folder is checked when selecting files to upload. If this is unchecked you will get build errors and won't be able to use the live editing features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;After learning the basics of how Bookshop can be integrated into a website, you should now have live editing for components in CloudCannon's Visual Editor. The structure in the example website is a good base for starting, or converting any static website to a Bookshop component-based website. To dive deeper into Bookshop and how it works, check out the &lt;a href="https://github.com/cloudcannon/bookshop/"&gt;Bookshop Guides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also use Bookshop in a theme to save duplicating components and styles across websites that use the same themes or layouts. We do this for our Bookshop &lt;a href="https://cloudcannon.com/community/themes/"&gt;templates&lt;/a&gt;, which are free for anyone to use and modify.&lt;/p&gt;

&lt;p&gt;For further reading on themes, see our other posts on creating themes with &lt;a href="https://cloudcannon.com/blog/jekyll-themes-with-github/"&gt;GitHub&lt;/a&gt;, or with¬†&lt;a href="https://cloudcannon.com/blog/private-jekyll-themes-with-gemfury/"&gt;Gemfury&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/622834787" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>cms</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Create a Simple Stopwatch using JavaScript</title>
      <author>Shantanu Jana</author>
      <pubDate>Wed, 06 Oct 2021 16:20:29 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/create-a-simple-stopwatch-using-javascript-3eoo</link>
      <guid>https://dev.to/shantanu_jana/create-a-simple-stopwatch-using-javascript-3eoo</guid>
      <description>&lt;p&gt;In this article you will learn how to make a simple stop watch using JavaScript. Stopwatch is a simple JavaScript project that is important enough for beginners.&lt;/p&gt;

&lt;p&gt;This type of project is used to count some time. The most important point of this design is that here you can count milliseconds i.e. hours, minutes, seconds and milliseconds. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.foolishdeveloper.com/2021/10/simple-stopwatch-using-javascript.html"&gt;Watch its live demo&lt;/a&gt; to learn how it works. First I designed the webpage and then created a box. In that box I have made a display where the counting times can be seen. It has three buttons which are used to start the countdown, stop it and start the countdown again. If you know basic JavaScript you can easily understand. For beginners I have given full details explanation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-basic-structure-of-stopwatch"&gt;
  &lt;/a&gt;
  Step 1: Basic structure of stopwatch
&lt;/h3&gt;

&lt;p&gt;We have created the basic structure of this stop watch using the following HTML and CSS codes. First I designed the web page with the help of CSS code. &lt;/p&gt;

&lt;p&gt;Here I used the background color blue of the page. I have used box &lt;code&gt;width 40%&lt;/code&gt; and minimum width 500 px. &lt;code&gt;Border-radius: 10px&lt;/code&gt; is used to round the four corners of the box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#448aff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y1AsNqgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gk3iycob73wgpjqgxqgt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y1AsNqgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gk3iycob73wgpjqgxqgt.jpg" alt="Basic structure of stopwatch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-create-a-display-to-see-the-time"&gt;
  &lt;/a&gt;
  Step 2: Create a display to see the time
&lt;/h3&gt;

&lt;p&gt;I created a display in this box using these HTML and CSS codes. This display will help to see who is counting time. Here you can see the count of hours, minutes, seconds and milliseconds.&lt;/p&gt;

&lt;p&gt;A shadow has been used around this display which has enhanced its beauty. Also using &lt;code&gt;font-size: 40px&lt;/code&gt; here will increase the size of the time a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"timerDisplay"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   00 : 00 : 00 : 000
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.timerDisplay&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;92%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Roboto mono'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0381bb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;139&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmrmxW9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qerk10o31hfzfnmivp8m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmrmxW9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qerk10o31hfzfnmivp8m.jpg" alt="Create a display to see the time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-create-3-buttons-in-the-javascript-stopwatch"&gt;
  &lt;/a&gt;
  Step 3: Create 3 buttons in the JavaScript stopwatch
&lt;/h3&gt;

&lt;p&gt;Now the following HTML and CSS codes have been used to create three buttons in the stopwatch. &lt;/p&gt;

&lt;p&gt;Each button has a &lt;code&gt;width of 120px&lt;/code&gt; and a height of 45px. I have used &lt;code&gt;font-size: 18px&lt;/code&gt; to increase the size of the text in the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"buttons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"pauseTimer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Pause&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"startTimer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Start&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"resetTimer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Reset&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.buttons&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.buttons&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#205e94&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the css below, I set the background-color of the second and third buttons. Above we set the blue color for the background of the button but now using &lt;code&gt;nth-last-child ()&lt;/code&gt; I set different colors for the second and third buttons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.buttons&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:nth-last-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#d23332&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.buttons&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:nth-last-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#20b380&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BRXeAJcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l83g0dlz0e0ijed3k3b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRXeAJcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l83g0dlz0e0ijed3k3b.jpg" alt="Create 3 buttons in the JavaScript stopwatch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-activate-the-stopwatch-using-javascript"&gt;
  &lt;/a&gt;
  Step 4: Activate the stopwatch using JavaScript
&lt;/h3&gt;

&lt;p&gt;Now is the time to activate this &lt;a href="https://www.foolishdeveloper.com/2021/10/simple-stopwatch-using-javascript.html"&gt;stopwatch using JavaScript&lt;/a&gt;. Above we have completed the complete design work using HTML and CSS. If you know basic JavaScript, you can easily understand your own JavaScript explanations.&lt;/p&gt;

&lt;p&gt;I have determined the value of some information using the following three line code. First I set the value of hour, minute, second, millisecond to zero. This means that these values ‚Äã‚Äãwill be zero when the countdown starts. With set a constant of the display id.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;milliseconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timerRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.timerDisplay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have executed the &lt;code&gt;start button&lt;/code&gt; using JavaScript below. As a result, the countdown will start when you click on that button. &lt;/p&gt;

&lt;p&gt;Under normal circumstances, the countdown value will be 0. The countdown will increase every millisecond when you click on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;startTimer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayTimer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have implemented the &lt;code&gt;pause button&lt;/code&gt; using these codes. The countdown will stop when you click on this button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pauseTimer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have implemented the &lt;code&gt;reset button&lt;/code&gt; using the following codes. As a result, when you click on the reset button, the time in the display will return to the previous state, ie zero. When you click on this button, the value of hours, minutes, seconds, milliseconds will become zero.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resetTimer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;milliseconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;timerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;00 : 00 : 00 : 000 &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have used the 'if' function here to make the stopwatch work. I've tried to give a full explanation of how it works. I have used the 'if' function three times and using each function I have given a specific condition. First I set the time in milliseconds.&lt;/p&gt;

&lt;p&gt;‚û§ When the value of milliseconds is equal to 1000, we will see zero in the millisecond cell and the number of seconds will increase by one. Because we all know &lt;code&gt;1000 milliseconds equals 1 second&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;‚û§ I have given the condition that when the value of the second is 60, we will see zero in the second cell and one increment in the minute cell.&lt;/p&gt;

&lt;p&gt;‚û§ The third time I used the 'if' function I executed the time in minutes. When the minute time reaches 80, you will see 0 in the minute cell and 1 in the hour cell.&lt;/p&gt;

&lt;p&gt;This way you can &lt;a href="https://www.foolishdeveloper.com/2021/07/simple-countdown-timer-using-javascript.html"&gt;run a countdown&lt;/a&gt; of many more pieces of information such as days, months, etc. by following the same rules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayTimer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now using the following four lines of JavaScript I have added one zero to the case of one number of times. When the value of the countdown time is less than ten, we add a zero.&lt;/p&gt;

&lt;p&gt;Here we have given the condition when the value of hour, minute, second and millisecond is &lt;code&gt;less than 10 then one zero is added&lt;/code&gt; to it. Then that time will be transmitted in h, m, s, ms. You can &lt;a href="https://www.foolishdeveloper.com/2021/10/simple-stopwatch-using-javascript.html"&gt;watch its live demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see below I have used a little extra code in milliseconds. This is because milliseconds are made up of four numbers which means there are 3 zeros.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So in this case I have added the condition twice. The first time I used the condition, when the time value is &lt;code&gt;less than 10&lt;/code&gt;, two zeros will be added. A zero will be added when the value of time is &lt;code&gt;less than 100&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see above, we have stored all the time of the countdown in h m s ms.&lt;/p&gt;

&lt;p&gt;Now you have to sort all this information into the display using &lt;code&gt;innerhtml&lt;/code&gt;. innerhtml helps to organize any information in the HTML page.&lt;/p&gt;

&lt;p&gt;For your convenience I have given below a picture which will help you to know how the code below works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;timerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;` &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0nSkvLPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j221eosa2p8ysjekzh9t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0nSkvLPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j221eosa2p8ysjekzh9t.jpg" alt="about innerhtml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZ0Hl5An--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yavrss53xebmwocycp5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZ0Hl5An--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yavrss53xebmwocycp5.jpg" alt="stopwatch using JavaScript"&gt;&lt;/a&gt;&lt;br&gt;
The above explanation I have tried my best to explain the codes. If you have any more questions you can ask me directly on my Instagram(&lt;a href="https://www.instagram.com/foolishdeveloper/"&gt;@foolishdeveloper&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#final-javascript-code"&gt;
  &lt;/a&gt;
  Final javascript code
&lt;/h3&gt;

&lt;p&gt;Below we have put together the complete JavaScript code for your convenience.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;milliseconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timerRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.timerDisplay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;startTimer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayTimer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pauseTimer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resetTimer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;milliseconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;timerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;00 : 00 : 00 : 000 &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayTimer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="nx"&gt;timerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;` &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hopefully from this article you have learned how to create this simple stopwatch timer using JavaScript. You must comment on how you like this design.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this. üòä&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
