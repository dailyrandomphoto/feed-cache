<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to push your website online for free (Bonus: How to get domain name for 2$)</title>
      <author>CodeOzz</author>
      <pubDate>Tue, 06 Jul 2021 16:35:19 +0000</pubDate>
      <link>https://dev.to/codeozz/how-to-push-your-website-online-for-free-bonus-how-to-get-domain-name-for-2-1ikp</link>
      <guid>https://dev.to/codeozz/how-to-push-your-website-online-for-free-bonus-how-to-get-domain-name-for-2-1ikp</guid>
      <description>&lt;p&gt;Welcome my friend ! Today I will show you how to deploy your static website for free with Netlify !&lt;/p&gt;

&lt;p&gt;In bonus I will show you where you can bug domain name for 2$ and connect it will Netlify !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create an account on &lt;a href="https://www.netlify.com/"&gt;https://www.netlify.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the overview, you will need to connect your git project to Netlify.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Arym6U-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfmobeixdc5bqn38e9xj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Arym6U-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfmobeixdc5bqn38e9xj.png" alt="Screenshot 2021-07-06 at 17.54.55.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://app.netlify.com/start"&gt;https://app.netlify.com/start&lt;/a&gt; Select your plateform between Github, Gitlab or Bitbucket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Choose the branch to deploy, it's means that when you will push onto this branch, Netlify will build the project and re-deploy it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4NOGJb7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5btvkqm3u13vingb5mk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4NOGJb7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5btvkqm3u13vingb5mk.png" alt="Screenshot 2021-07-06 at 18.01.01.png (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For me I create a dedicated branch named &lt;code&gt;prod&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--18EiB0iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8tzu7umwerely514pow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18EiB0iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8tzu7umwerely514pow.png" alt="Screenshot 2021-07-06 at 18.01.01.png (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will need to provide the npm command that will build your project (and the output directory name). &lt;/p&gt;

&lt;p&gt;I use &lt;code&gt;npm run build&lt;/code&gt; and I named the output file &lt;code&gt;/dist&lt;/code&gt; (classic).&lt;/p&gt;

&lt;p&gt;Netlify will build your project and deploy it on a &lt;em&gt;special&lt;/em&gt; url.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BONUS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don't have domain name, read this section !&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://www.namecheap.com/domains/domain-name-search/"&gt;https://www.namecheap.com/domains/domain-name-search/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Put your domain name wanted, and select a domain name cheap (for example .art). The first year, the domain name will be cheap and you will need to pay more for the next years, it depends of the domain name (.art stay very cheap).&lt;/p&gt;

&lt;p&gt;Buy your domain name and when you receive the confirmation by email, you will need to verify your mail (in order to link email and your domain name).&lt;/p&gt;

&lt;p&gt;You will just need to select your domain name on the dashboard and click on verify account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GylKlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92siv9ihc803klr9plth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GylKlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92siv9ihc803klr9plth.png" alt="icannwhois_ar2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fourth Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set up a custom domain ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--23IkClQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4vo3jw22gxaj91pwx76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--23IkClQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4vo3jw22gxaj91pwx76.png" alt="Screenshot 2021-07-06 at 18.11.10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: You can see the &lt;em&gt;special&lt;/em&gt; url generated by Netlify ! (By default any of your build project has this special url in case of you have an issue with your domain name)&lt;/p&gt;

&lt;p&gt;So put your domain name&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUq4nrof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgcb5xwz01t3qhiv25le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUq4nrof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgcb5xwz01t3qhiv25le.png" alt="Screenshot 2021-07-06 at 18.12.46"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Last Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set up Netlify DNS for your domain !&lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;check DNS configuration&lt;/code&gt;, you will have four &lt;em&gt;hostnames&lt;/em&gt;, keep it, we will need it .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2inxTcE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et18zbmazhbodajxng6i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2inxTcE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et18zbmazhbodajxng6i.png" alt="Screenshot 2021-07-06 at 17.54.55.png (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Come back into Namecheap, go to &lt;strong&gt;dashboard&lt;/strong&gt; and click on &lt;strong&gt;manage&lt;/strong&gt; into your domain name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--juej3wm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae1v6aqg46nk913sd5vc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juej3wm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae1v6aqg46nk913sd5vc.png" alt="Screenshot 2021-07-06 at 18.19.45"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;nameservers&lt;/code&gt; select custom DNS and put the four &lt;em&gt;hostnames&lt;/em&gt; !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JsYr7EFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxw4hr699hasnvwfojx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JsYr7EFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxw4hr699hasnvwfojx.png" alt="Screenshot 2021-07-06 at 18.23.17"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save it and wait a few minutes in order to link your hostname with your domain name !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTPS:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Netlify will add a SSL in order to have HTTPS on your website ! &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>devops</category>
      <category>netlify</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 06 Jul 2021 16:26:21 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-beo</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-beo</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-bury-the-lede"&gt;
  &lt;/a&gt;
  Don't Bury the Lede
&lt;/h2&gt;

&lt;p&gt;Ok, so the title above IS kind of burying the lede of this fantastic article. In it, &lt;a class="mentioned-user" href="https://dev.to/jmfayard"&gt;@jmfayard&lt;/a&gt;
 shares many learnings from four years (!!!) or writing on DEV. Onne of them is, you guessed it, "don't bury the lede of your article." Read on for many great writing, life, and DEV lessons.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jmfayard" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjlhV-kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oLH1L0EP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/17066/64e291f5-65fd-452a-88d9-a2f0c071f807.jpg" alt="jmfayard"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmfayard/20-lessons-i-ve-learned-writing-on-dev-for-4-years-4nk3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;20+ Lessons I've Learned Writing on DEV for 4 Years&lt;/h2&gt;
      &lt;h3&gt;Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴 ・ Jun 29 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#meta&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#squash-your-git-squash-confusion"&gt;
  &lt;/a&gt;
  Squash Your Git Squash Confusion
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/pb"&gt;@pb&lt;/a&gt;
 is here to help you get over the fear of messing up others' commits &lt;em&gt;and&lt;/em&gt; get comfortable with squashing commits.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3sfWXRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--52cZyHb1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618537/3cd782cd-1a3a-4926-9eb6-1e55fba23a61.jpg" alt="pb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pb/git-squash-simplified-3ba1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Git Squash Simplified&lt;/h2&gt;
      &lt;h3&gt;Pawel ・ Jul 2 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#graphql-is-like-pizza"&gt;
  &lt;/a&gt;
  GraphQL is Like Pizza
&lt;/h2&gt;

&lt;p&gt;Yep, you read that right. Find out how why &lt;a class="mentioned-user" href="https://dev.to/shrutikapoor08"&gt;@shrutikapoor08&lt;/a&gt;
 likes to compare GraphQL and REST to different types of pizza places. 🤤 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/shrutikapoor08" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxsCavCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HHESzKaW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/197069/406b42c3-4552-4a6f-8ce9-39a58e542a5a.jpg" alt="shrutikapoor08"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shrutikapoor08/what-is-graphql-hj5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is GraphQL? &lt;/h2&gt;
      &lt;h3&gt;Shruti Kapoor ・ Jul 1 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#design-is-intelligence-made-visible"&gt;
  &lt;/a&gt;
  Design is Intelligence Made Visible
&lt;/h2&gt;

&lt;p&gt;That's why it's important to have at least a basic understanding of product design as a developer. &lt;a class="mentioned-user" href="https://dev.to/flaque"&gt;@flaque&lt;/a&gt;
 is here to help!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/flaque" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXQrFVq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--H-b5CF7r--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/87211/951afa46-47e8-4f65-b0c1-a0dcf19e85b5.jpg" alt="flaque"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/flaque/how-to-make-your-product-look-good-h5j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to make your product look good&lt;/h2&gt;
      &lt;h3&gt;Evan Conrad ・ Jun 29 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#you-are-a-creative-showcase-it-with-css"&gt;
  &lt;/a&gt;
  You Are a Creative. Showcase it with CSS!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/andrewbaisden"&gt;@andrewbaisden&lt;/a&gt;
 says that creating CSS art is one of the best ways to improve your front-end programming skills as a developer — of all levels! Here's how you can get started...&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/andrewbaisden" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iLg9JixC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bRSmMlC_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/333889/005fe9de-759e-4d70-9c3c-d3aa1289b2ef.png" alt="andrewbaisden"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/andrewbaisden/how-creating-css-art-can-make-you-a-better-developer-4cd5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How creating CSS Art can make you a better developer&lt;/h2&gt;
      &lt;h3&gt;Andrew Baisden ・ Jun 29 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-whys-and-whats-of-testing"&gt;
  &lt;/a&gt;
  The Whys and Whats of Testing
&lt;/h2&gt;

&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/pat_the99"&gt;@pat_the99&lt;/a&gt;
 writes, "Test Driven Development (TDD)'s main idea is to simply start working on code by writing automated tests BEFORE writing the code that is being tested." Pretty useful, no? In this article, Patricia helps us understand JavaScript TDD through the lens of Jest in particular.  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pat_the99" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrOrF7B9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jiAMjh3G--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/628161/0fc61315-16e2-4c38-b364-c2515768dc7a.jpeg" alt="pat_the99"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pat_the99/basics-of-javascript-test-driven-development-tdd-with-jest-o3c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Basics of Javascript Test Driven Development (TDD) with Jest&lt;/h2&gt;
      &lt;h3&gt;Patricia Nicole ・ Jul 4 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#youre-invited"&gt;
  &lt;/a&gt;
  You're Invited...
&lt;/h2&gt;

&lt;p&gt;... to &lt;a class="mentioned-user" href="https://dev.to/kharouk"&gt;@kharouk&lt;/a&gt;
's book club — which just might help you land your next job! First up? "Eloquent JavaScript" by Marijn Haverbeke 📚  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kharouk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwCCXRul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XxmUYGMN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/85930/0868ee73-1ee3-424e-a3c3-63b35ec21d68.jpeg" alt="kharouk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kharouk/book-club-eloquent-javascript-chapter-one-5c0d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Book Club: Eloquent Javascript - Chapter One&lt;/h2&gt;
      &lt;h3&gt;Alex Kharouk ・ Jul 3 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bookclub&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Migrate Adonis.js v4 user passwords to v5</title>
      <author>Chirill Ceban</author>
      <pubDate>Tue, 06 Jul 2021 16:15:10 +0000</pubDate>
      <link>https://dev.to/bitkidd/migrate-adonis-js-v4-user-passwords-to-v5-2m21</link>
      <guid>https://dev.to/bitkidd/migrate-adonis-js-v4-user-passwords-to-v5-2m21</guid>
      <description>&lt;p&gt;A new version of &lt;a href="https://adonisjs.com"&gt;Adonis.js&lt;/a&gt; isn't just a simple update, it is a complete revamp of all the core modules and structure including hashing mechanism.&lt;/p&gt;

&lt;p&gt;Prior the update Adonis.js used plain &lt;code&gt;bcrypt&lt;/code&gt; hashing implementation but now it became more standartized, the use of &lt;a href="https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md"&gt;PHC string format&lt;/a&gt; allows to incorporate different hashers and verify the hashes against the current configuration and then decide if the hash needs to be rehashed or not.&lt;/p&gt;

&lt;p&gt;This change leads to a situation when old v4 hashes will not be compatible with v5 and your users will not be able to login.&lt;/p&gt;

&lt;p&gt;The way to resolve this problem I'd describe in three steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Expand hasher with our own &lt;code&gt;legacy&lt;/code&gt; driver&lt;/li&gt;
&lt;li&gt;On user authentication attempt check if the password has been hashed using an old hasher, if yes, use our new &lt;code&gt;legacy&lt;/code&gt; driver&lt;/li&gt;
&lt;li&gt;Authenticate user and rehash password using a new hasher, in my case I'm using &lt;code&gt;argon2&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#expanding-the-hasher"&gt;
  &lt;/a&gt;
  Expanding the hasher
&lt;/h3&gt;

&lt;p&gt;To expand the hasher we have to create a new local provider by running a corresponding command inside our projects folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace make:provider LegacyHasher
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate a new provider file inside &lt;code&gt;/providers&lt;/code&gt; folder. After the file has been generated, we have to add it to &lt;code&gt;.adonisrc.json&lt;/code&gt; into &lt;code&gt;providers&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;Before actually expending we have to create a new &lt;code&gt;Hash&lt;/code&gt; driver, as an example we can use the code provided in an official documentation &lt;a href="https://docs.adonisjs.com/guides/security/hashing#adding-a-custom-driver"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created a separate folder inside &lt;code&gt;/providers&lt;/code&gt;, named it &lt;code&gt;LegacyHashDriver&lt;/code&gt; and placed my &lt;code&gt;legacy&lt;/code&gt; driver there (inside an &lt;code&gt;index.ts&lt;/code&gt; file).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bcrypt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HashDriverContract&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * Implementation of custom bcrypt driver
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LegacyHashDriver&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;HashDriverContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Hash value
   */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Verify value
   */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hashedValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;plainValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plainValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hashedValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, it depends on a &lt;code&gt;bcrypt&lt;/code&gt; package, you'll have to install it before running.&lt;/p&gt;

&lt;p&gt;Having created a new driver, we can now expand the &lt;code&gt;Hash&lt;/code&gt; core library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApplicationContract&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Application&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LegacyHashDriver&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./LegacyHashDriver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LegacyHasherProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ApplicationContract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Adonis/Core/Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;legacy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LegacyHashDriver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two additional things we have to do before proceeding to actual testing of implementation. We have to add our new hasher to &lt;code&gt;contracts/hash.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;HashersList&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BcryptConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BcryptContract&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nl"&gt;argon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgonConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgonContract&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nl"&gt;legacy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
      &lt;span class="nl"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HashDriverContract&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add it to &lt;code&gt;config/hash.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;legacy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;legacy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#authenticating-users-with-legacy-hasher"&gt;
  &lt;/a&gt;
  Authenticating users with legacy hasher
&lt;/h3&gt;

&lt;p&gt;As user tries to login the first thing you do (after request validation) is user search, by email or username. When you find a corresponding record, you can check if the password hash has been generated using an old method, by testing it&lt;br&gt;
agains a simple regex. Then later verify it using the right hash driver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usesLegacyHasher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="sr"&gt;2&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;aby&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isMatchedPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usesLegacyHasher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isMatchedPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;legacy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isMatchedPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rehashing-old-user-password"&gt;
  &lt;/a&gt;
  Rehashing old user password
&lt;/h3&gt;

&lt;p&gt;Rehashing user password on login is the most convenient way to migrate to a new driver. I do this after I checked all the security things, found the user and know that the password is hashed using an old method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// rehash user password&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usesLegacyHasher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;internalServerError&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can test it and it should work. You can expand hasher not only to migrate from v4 to v5, but even when you try to build your app on top of existing database.&lt;/p&gt;

</description>
      <category>adonisjs</category>
      <category>adonis</category>
      <category>javascript</category>
    </item>
    <item>
      <title>24 time management tips for students</title>
      <author>CodeXtreame</author>
      <pubDate>Tue, 06 Jul 2021 15:46:43 +0000</pubDate>
      <link>https://dev.to/codextreame/24-time-management-tips-for-students-1hmi</link>
      <guid>https://dev.to/codextreame/24-time-management-tips-for-students-1hmi</guid>
      <description>&lt;ol&gt;
&lt;li&gt;The goal of realization&lt;/li&gt;
&lt;li&gt;Make a daily plan&lt;/li&gt;
&lt;li&gt;Keep your agenda.&lt;/li&gt;
&lt;li&gt;Your curriculum and priorities are ready.&lt;/li&gt;
&lt;li&gt;Set your time limit.&lt;/li&gt;
&lt;li&gt;Demanding work in priority.&lt;/li&gt;
&lt;li&gt;Learn to outsource.&lt;/li&gt;
&lt;li&gt;Configure your setting place.&lt;/li&gt;
&lt;li&gt;Ignore buffer time tasks and other tasks.&lt;/li&gt;
&lt;li&gt;Go offline on social media&lt;/li&gt;
&lt;li&gt;Do not multitask.&lt;/li&gt;
&lt;li&gt;Break Management.&lt;/li&gt;
&lt;li&gt;Don't wait for inspiration to do your work now.&lt;/li&gt;
&lt;li&gt;Follow 80-20 rules&lt;/li&gt;
&lt;li&gt;Use the online calendar.&lt;/li&gt;
&lt;li&gt;Create a TODO list.&lt;/li&gt;
&lt;li&gt;Don't hang on to small things.&lt;/li&gt;
&lt;li&gt;Use your waiting time.&lt;/li&gt;
&lt;li&gt;The rest day is Saturday or Sunday.&lt;/li&gt;
&lt;li&gt;Stop pretending to be perfect.&lt;/li&gt;
&lt;li&gt;Say No&lt;/li&gt;
&lt;li&gt;Be inspired.&lt;/li&gt;
&lt;li&gt;Do the same thing together.&lt;/li&gt;
&lt;li&gt;Sleep Well.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All Topic Explanation : &lt;a href="https://rb.gy/rugced"&gt;https://rb.gy/rugced&lt;/a&gt;&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>management</category>
      <category>time</category>
      <category>students</category>
    </item>
    <item>
      <title>What is AWS InfiniDash?</title>
      <author>Rain Leander</author>
      <pubDate>Tue, 06 Jul 2021 15:39:42 +0000</pubDate>
      <link>https://dev.to/rainleander/what-is-aws-infinidash-2mjn</link>
      <guid>https://dev.to/rainleander/what-is-aws-infinidash-2mjn</guid>
      <description>&lt;p&gt;TL;DR: AWS InfiniDash is a fake project.&lt;/p&gt;

&lt;p&gt;It started innocently enough, with tweet:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;I am convinced that a small and dedicated group of twitter devs could tweet hot takes about a completely made up AWS product, idk AWS Infinidash or something, and it would appear as a requirement on job specs within a week&lt;/p&gt;— Joe Nash (@jna_sh) &lt;a href="https://twitter.com/jna_sh/status/1410178986978775040?ref_src=twsrc%5Etfw"&gt;June 30, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;And it exploded from there.&lt;/p&gt;

&lt;p&gt;Ellen Korbes made an explanatory spoof video:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;hope this helps someone re: infinidash &lt;a href="https://twitter.com/hashtag/i8h?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#i8h&lt;/a&gt; &lt;a href="https://t.co/fmzLt6WH5b"&gt;pic.twitter.com/fmzLt6WH5b&lt;/a&gt;&lt;/p&gt;— @ellenkorbes (@ellenkorbes) &lt;a href="https://twitter.com/ellenkorbes/status/1410796865126346755?ref_src=twsrc%5Etfw"&gt;July 2, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Sy Brand followed up with their own explanation using a bubble machine and their cat:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;AWS Infinidash explained with a bubble machine I found in a cupboard and my cat &lt;a href="https://t.co/h9TToTsDxk"&gt;pic.twitter.com/h9TToTsDxk&lt;/a&gt;&lt;/p&gt;— Sy Brand (&lt;a class="mentioned-user" href="https://dev.to/tartanllama"&gt;@tartanllama&lt;/a&gt;
) &lt;a href="https://twitter.com/TartanLlama/status/1410959645238308866?ref_src=twsrc%5Etfw"&gt;July 2, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;The most AMAZING song was composed and performed:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;An ode to Infinidash - the imaginary AWS service! &lt;a href="https://t.co/3dCntHtUyG"&gt;pic.twitter.com/3dCntHtUyG&lt;/a&gt;&lt;/p&gt;— Forrest Brazeal (&lt;a class="mentioned-user" href="https://dev.to/forrestbrazeal"&gt;@forrestbrazeal&lt;/a&gt;
) &lt;a href="https://twitter.com/forrestbrazeal/status/1410647222853771266?ref_src=twsrc%5Etfw"&gt;July 1, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Massive application developer, Signal, followed up with their own tweet:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Here at Signal we have always placed an emphasis on developer productivity, so Infinidash lifecycle management has been at the core of everything we do from the jump. We hire for it accordingly: &lt;a href="https://t.co/op9ycS9mKM"&gt;&lt;/a&gt;&lt;a href="https://t.co/op9ycS9mKM"&gt;https://t.co/op9ycS9mKM&lt;/a&gt;&lt;/p&gt;— Signal (@signalapp) &lt;a href="https://twitter.com/signalapp/status/1411082628514697217?ref_src=twsrc%5Etfw"&gt;July 2, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;And, yes, a stream with a live demo arrived:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Y'all aren't ready for this AWS &lt;a href="https://twitter.com/hashtag/Infinidash?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Infinidash&lt;/a&gt; live stream&lt;br&gt;&lt;br&gt;Make sure you like and subscribe!🔔&lt;a href="https://t.co/Oj3YGmABEK"&gt;&lt;/a&gt;&lt;a href="https://t.co/Oj3YGmABEK"&gt;https://t.co/Oj3YGmABEK&lt;/a&gt;&lt;/p&gt;— Justin Garrison (&lt;a class="mentioned-user" href="https://dev.to/rothgar"&gt;@rothgar&lt;/a&gt;
) &lt;a href="https://twitter.com/rothgar/status/1411007248965402626?ref_src=twsrc%5Etfw"&gt;July 2, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Now that you understand the joke, too, please don't bash on recruiters, AWS, or anyone who isn't in on the joke.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>infinidash</category>
    </item>
    <item>
      <title>Case Study: Large Scale CSS Refactoring in a Legacy Application</title>
      <author>Kathryn Grayson Nanz</author>
      <pubDate>Tue, 06 Jul 2021 15:25:34 +0000</pubDate>
      <link>https://dev.to/kathryngrayson/case-study-large-scale-css-refactoring-in-a-legacy-application-52lc</link>
      <guid>https://dev.to/kathryngrayson/case-study-large-scale-css-refactoring-in-a-legacy-application-52lc</guid>
      <description>&lt;p&gt;Have you ever faced a project so big, so intimidating, you weren't even really sure where to start? Like anything you did would just be chipping away at the base of a mountain that you'd never really be able to move? I found myself in that position not long ago, looking down the barrel of a large scale CSS refactoring project that I'd been asked to take the lead on. &lt;/p&gt;

&lt;p&gt;The application was huge, and the company had been working without front-end specialists for years, so there was a pretty low level of general CSS hygiene. It had gotten to the point where the tech debt had stacked up far enough that it was impacting the engineers' ability to actually write new code – slowing them down, because they were constantly fighting against a cascade of styles that weren't really intended to cascade. Very few styles were scoped appropriately. A search turned up 3,198 &lt;code&gt;!important&lt;/code&gt;s. The longer we looked, the more it looked like a pile of spaghetti we could never hope to untangle...and yet, throwing it all out and starting over wasn't a realistic option either. &lt;/p&gt;

&lt;p&gt;Tech loves to focus on the new and shiny, but realistically, many of us live our day-to-day lives working with code that is anything but. When I started looking for resources on large-scale CSS refactoring, I was surprised and disheartened to find very little at all on the subject. Christoph Reinartz has an excellent &lt;a href="https://www.youtube.com/watch?v=ALaQC4i1ax8"&gt;talk&lt;/a&gt; (and &lt;a href="https://tech.trivago.com/2016/02/02/large-scale-css-refactoring-at-trivago/"&gt;blog&lt;/a&gt;) on Large Scale CSS Refactoring at Trivago that I found &lt;em&gt;immensely&lt;/em&gt; helpful, but besides that...I realized I was going to have to figure this out on my own. &lt;/p&gt;

&lt;p&gt;So, that's why I'm here (and presumably, why YOU'RE here). Our CSS refactoring project isn't complete yet, so I (unfortunately) can't share any stats and figures with you yet. But that was also part of what I learned as part of this process – sometimes, with a big project like this, you have to be willing to just slowly chip away at it in the background, making improvements where you can and letting the "finish line" be more of a nebulous thing. &lt;/p&gt;

&lt;p&gt;But what I &lt;em&gt;can&lt;/em&gt; talk about is our high-level approach, and how we've been working at this consistently since the project began – while also continuing our work on new feature development. This isn't a glamorous, sparkly case study with a big finish, but it &lt;em&gt;is&lt;/em&gt; a realistic and effective one that's been making slow and steady progress – and rather than sit on this information until everything is 100% complete, I'd like to go ahead and get this out there, in the hopes that it will be helpful to someone else in a similar position. &lt;/p&gt;

&lt;p&gt;Because this is pretty long (hey, there's a lot involved in refactoring a whole application worth of CSS), here's a linked table of contents:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="#plan"&gt;Our Plan of Attack&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#stage1"&gt;Stage 1: Assess the current situation and align on the goal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#stage2"&gt;Stage 2: Establish baseline styles and structure&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#stage3"&gt;Stage 3: Refactor Page Level Styles&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#stage4"&gt;Stage 4: Refactor Shared Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stage5"&gt;Stage 5: Implement New Styles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="#implementation"&gt;Implementing the Plan&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="#lessons"&gt;Lessons Learned&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#slow"&gt;Slow and steady wins the race&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#be"&gt;Be ready &amp;amp; willing to pick it up and put it down (without giving it up)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#html"&gt;You can't refactor the CSS without refactoring your HTML (or, you technically can, but it's not a great idea)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hype"&gt;Hype up every little win&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#our-plan-of-attack"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Our Plan of Attack
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#stage-1-assess-the-current-situation-and-align-on-the-goal"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Stage 1: Assess the current situation and align on the goal
&lt;/h3&gt;

&lt;p&gt;First, we needed to really wrap our brains around the current situation. We had a lot of people with a little bit of knowledge about specific parts of the application, but very few people with &lt;em&gt;all&lt;/em&gt; the knowledge about the entire application. We needed to go full Captain Planet and combine our powers.&lt;/p&gt;

&lt;p&gt;To do this, we scheduled a call – a real monster of an all-day call, but we only wanted to have to do this once. We split the call into two parts: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Walking through the current file structure and application setup so everyone was familiar with our starting point. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Aligning on our future vision, so we were all moving towards the same target. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the morning, we all got a full walkthrough of the application, focusing on the following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Determining which styles were linked to which files&lt;/li&gt;
&lt;li&gt;Finding all usages of third-party libraries and evaluating whether or not we could remove / replace them &lt;/li&gt;
&lt;li&gt;Making sure everyone understood how the CSS is compiled and what the final output looked like &lt;/li&gt;
&lt;li&gt;Walking through all the content currently in our Component Library &lt;/li&gt;
&lt;li&gt;Documenting, documenting, documenting! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last part was the most important. We wanted to make sure we had everything written down, so the knowledge wasn't just stored in people's heads anymore, but rather in a place everyone could come back to and reference as we worked. With the CSS being not-quite-ideal to begin with, this proved to be a crucial move. The less expected your setup is, the more important documentation becomes. &lt;/p&gt;

&lt;p&gt;In the afternoon, we turned our focus towards the future – what we wanted the application to look like when we were finished. This meant discussions around: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reviewing and adjusting our planned approach &lt;/li&gt;
&lt;li&gt;Reviewing and adjusting our new CSS Styleguide &lt;/li&gt;
&lt;li&gt;Deciding how we wanted to structure things moving forward – what was missing, what could we consolidate or delete entirely, where we want global variables live, etc.&lt;/li&gt;
&lt;li&gt;Deciding if we wanted to add any new libraries or tools to assist with our work &lt;/li&gt;
&lt;li&gt;Documenting, documenting, documenting! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was a long, full day, but by the time we all signed off, we were feeling confident and ready to tackle the next stage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stage-2-establish-baseline-styles-and-structure"&gt;
  &lt;/a&gt;
  &lt;a id="stage2"&gt;&lt;/a&gt;Stage 2: Establish baseline styles and structure
&lt;/h3&gt;

&lt;p&gt;Because CSS cascades, it's important to refactor from the top down. This is, of course, easier said than done. In this stage, we wanted to focus on setting a strong groundwork for everything moving forward. This meant we worked on the following tasks: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Getting our branch set up and determining our branching and merging strategy &lt;/li&gt;
&lt;li&gt;Creating any new files we needed and reorganizing the application CSS structure to support our agreed-upon future vision

&lt;ul&gt;
&lt;li&gt;For us, this meant creation of a new &lt;code&gt;global-styles&lt;/code&gt; file, consolidated from several "not-intentionally-global" global style files already in existence, and determining what would live in the application vs. the Component Library).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Installing and configuring any libraries we want to use.

&lt;ul&gt;
&lt;li&gt;For us, this referred to Prettier, a code formatter we agreed to use, and some small tweaks to our existing internal Component Library.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Removing any stylesheets we could safely delete without much work / adjustment. &lt;/li&gt;
&lt;li&gt;Writing global styles that we could leverage as we continued to work on this project. 

&lt;ul&gt;
&lt;li&gt;This one was important because we had a lot of inconsistent component-level styling. By getting our big stuff established up front, it gave us something to replace all that inconsistent stuff with. We defined a lot of variables and wrote a lot of mixins in this step. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#stage-3-refactor-page-level-styles"&gt;
  &lt;/a&gt;
  &lt;a id="stage3"&gt;&lt;/a&gt;Stage 3: Refactor Page Level Styles
&lt;/h3&gt;

&lt;p&gt;In this stage, we moved down the cascade by a step and focused on page / section level styles. This is something that will vary more widely based on the structure of your application, but in our case, the application was fairly easily broken down by "page" (in quotes because...the nature of single page applications is that they don't have "pages" but you get the idea). &lt;/p&gt;

&lt;p&gt;This was the point at which we really started digging into the mess. In fact, we ended up subdividing this stage into two Phases, in order to make it more manageable. It looked like this: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Phase 1&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move page styles into scoped stylesheets wherever they aren't already &lt;/li&gt;
&lt;li&gt;Replace third-party library components or one-off components with Component Library components wherever possible, and delete any associated styles that are no longer needed&lt;/li&gt;
&lt;li&gt;First pass refactoring on the new scoped stylesheets to meet our new CSS Styleguide rules, focusing on these main problem areas:

&lt;ul&gt;
&lt;li&gt;Renaming classes to use the OOCSS approach &lt;/li&gt;
&lt;li&gt;Refactor nesting to be no deeper than 3 levels &lt;/li&gt;
&lt;li&gt;Reduce lines of code by combining classes, reducing specificity, removing duplication, etc. &lt;/li&gt;
&lt;li&gt;Writing mixins and variables to support code simplification goal
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Phase 2&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Refactor HTML, focusing on these main problem areas: 

&lt;ul&gt;
&lt;li&gt;Improving semantic structure &lt;/li&gt;
&lt;li&gt;Alignment with new OOCSS naming &amp;amp; structure &lt;/li&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;li&gt;Responsiveness &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Second pass refactoring on CSS, focusing on these main problem areas: 

&lt;ul&gt;
&lt;li&gt;Removing remaining &lt;code&gt;!important&lt;/code&gt;s wherever possible &lt;/li&gt;
&lt;li&gt;Grouping related styles into sections and documenting with comments &lt;/li&gt;
&lt;li&gt;Replacing hex codes, padding, fonts, etc. with variables that can be universally updated&lt;/li&gt;
&lt;li&gt;Swapping &lt;code&gt;px&lt;/code&gt; values with &lt;code&gt;rem&lt;/code&gt; values wherever possible &lt;/li&gt;
&lt;li&gt;Swapping &lt;code&gt;id&lt;/code&gt;s to &lt;code&gt;classes&lt;/code&gt; when there isn't a need for an id &lt;/li&gt;
&lt;li&gt;Writing / updating unit tests to accommodate any changes made&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Full disclosure: this is the stage we're currently on now – so everything from here on out is the plan we have to continue the work, but isn't work we've actually completed yet. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;a id="stage4&amp;gt;&amp;lt;/a&amp;gt;Stage 4: Refactor Shared Components
&amp;lt;/h3&amp;gt;

&amp;lt;p&amp;gt;Like basically every team, we have a folder of shared components that hang out in the application outside of the &amp;quot;page&amp;quot; structure mentioned above – because, of course, the whole idea is that they're shared between all those pages. This makes all the sense in the world...until it comes to CSS refactoring, in which case, you just kind of have to pick a time to handle them because they don't really fit naturally anywhere. We opted to wait until basically the end of the project to handle them to avoid the rabbit-holing and stepping-on-each-others'-toes that seemed really easy to slip into if we attempted to refactor them as part of whatever pages we found them used on. &amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;During this process, we plan to focus on the same kind of detailed comb-through that I've already outlined at the page level: a first, high-level sweep to delete and reorganize, followed by a second, more detail-oriented pass to really tidy things up. &amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;
  &amp;lt;a name=" href="#stage-5-implement-new-styles"&gt;
  &lt;/a&gt;
  &lt;a id="stage5"&gt;&lt;/a&gt;Stage 5: Implement New Styles
&lt;/h3&gt;

&lt;p&gt;Technically, the implementation of new styles isn't something that would be required for a CSS refactoring project – in fact, usually "refactoring" means you can expect to see no major changes in the final product, just improvements in how it's executed. However, in our case, one of the driving reasons that we chose to prioritize the CSS refactoring project was to ease the implementation of a new Design System that had been in the works for quite some time. The thought of rolling that out over our existing CSS setup was...painful, to say the least. &lt;/p&gt;

&lt;p&gt;So, why am I including this in the guide, if I just spent the last paragraph acknowledging why it's not really part of a refactoring project? Well, because we actually found it to be an incredibly helpful carrot-on-the-stick approach to getting motivated and excited about what we all knew would realistically be a pretty painful project. Refactoring projects are rarely what anyone would call &lt;em&gt;fun&lt;/em&gt;, and &lt;em&gt;CSS&lt;/em&gt; refactoring? Not exactly a trip to Disneyland. Having this to look forward to at the end – a glimpse of how much nicer our application &lt;em&gt;could&lt;/em&gt; look, and all the things we'd be able to take advantage of once it was in place – it was honestly the light at the end of the tunnel. As we started defining variables and other global styles, we pulled from these new design system styles, which gave us a little sneak peek at what the whole app would look like when we were done. So we got to see those little visual improvements, as we worked, throughout the whole life of the project – and honestly, 10/10, would do again. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-the-plan"&gt;
  &lt;/a&gt;
  &lt;a id="implementation"&gt;&lt;/a&gt;Implementing the Plan
&lt;/h2&gt;

&lt;p&gt;If you've made it to this point in the writeup, then you probably already know that researching and planning something of that complexity is one thing, but actually making it happen is a whole other task. And, of course, try explaining to Project Management that you need several sprints worth of time to create...basically nothing. No new major features, just (to them) a little spit &amp;amp; polish. A hard sell, to be sure, no matter how much it would improve life on the development side. &lt;/p&gt;

&lt;p&gt;We knew, no matter how much we wanted to, this wouldn't be a project we would be able to just sit down and knock out – we realistically couldn't put new feature development on the back burner for that length of time. So, I &lt;del&gt;stole&lt;/del&gt; borrowed an approach that a previous manager of mine had used when we had a backlog full of small, low-priority bugs that seemed to always be growing, but never disruptive enough to warrant immediate attention: Bug Fix Friday. I've written about Bug Fix Friday in more detail &lt;a href="https://dev.to/kathryngrayson/bug-fix-fridays-2jpe"&gt;here&lt;/a&gt; (and how YOU can steal the idea for your own team), but the gist of it is that we set aside one day each week for all developers to focus on a non-feature-development-related task that we otherwise would have had difficulty allocating a chunk of time for. &lt;/p&gt;

&lt;p&gt;So, in our case, we started &lt;strong&gt;CSS Fix Fridays&lt;/strong&gt;. This allowed us to basically maintain our current pace on feature development projects, while still dedicating regular installments of time to CSS refactoring. It did, technically, slow down feature development &lt;em&gt;slightly&lt;/em&gt;, but for the most part we just factored that into our scoping of the project and honestly didn't see much of an overall change. It was (like many things about working in a legacy application) not ideal, but functional – and that's really all we needed it to be. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  &lt;a id="lessons"&gt;&lt;/a&gt;Lessons Learned
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#slow-and-steady-wins-the-race"&gt;
  &lt;/a&gt;
  &lt;a id="slow"&gt;&lt;/a&gt;Slow and steady wins the race
&lt;/h3&gt;

&lt;p&gt;A huge refactoring project like this is just going to take time. Huge amounts of time. Even if we had been able to block out all the time in one chunk, it would have still been huge. There's a very sizable chunk of research, planning, and getting everyone onboard that has to be done, and that's before you ever even start touching the code. It can be tempting to come in, guns blazing, with the idea that your enthusiasm will be contagious. And maybe it will be, for a little bit, right at first. But that isn't a long-term approach, and you need to be thinking long-term. Set your expectations (and everyone else's expectations) around the idea that you'll be working on this for a long time, and speed isn't necessarily the goal. A burst of work and enthusiasm right at the beginning isn't the goal, so much as setting a sustainable pace for the life of the project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-ready-amp-willing-to-pick-it-up-and-put-it-down-without-giving-it-up"&gt;
  &lt;/a&gt;
  &lt;a id="be"&gt;&lt;/a&gt;Be ready &amp;amp; willing to pick it up and put it down (without giving it up)
&lt;/h3&gt;

&lt;p&gt;In the same vein as the last one, sometimes things will come up that mean you need to hit the pause button on a long-term refactoring project like this. It's almost never going to be priority, and that's okay. The important part is to make sure you keep hitting play again, once you've completed the more urgent work. You need someone on your team to be the advocate for the refactoring work – someone to bring up in every meeting "Okay, so when can we restart CSS Fix Fridays?" You can't be afraid of sounding like a "nag" or a broken record – the point is to keep it in everyone's working memory, and not let it slip into obscurity if you ever have to take a break from the work. Set it down as many times as you need, just make sure you pick it back up again. &lt;/p&gt;

&lt;p&gt;Another potentially useful approach to this that we've used is to not think of the team as an all-or-nothing group. When there's urgent work to complete, ask yourself realistically if it's &lt;em&gt;really&lt;/em&gt; all-hands-on-deck work. If it's not (and it usually isn't), you might be able to have a few folks stay on the refactoring project, and a few folks split off to handle the other work. This keeps the refactoring project on the radar, even if those people aren't able to make huge amounts of progress. Remember: slow &amp;amp; steady. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-cant-refactor-the-css-without-refactoring-your-html-or-you-technically-can-but-its-not-a-great-idea"&gt;
  &lt;/a&gt;
  &lt;a id="html"&gt;&lt;/a&gt;You can't refactor the CSS without refactoring your HTML (or, you technically can, but it's not a great idea)
&lt;/h3&gt;

&lt;p&gt;99% of the time, if you've got bad CSS, you've also got bad HTML. They're like two sides of the same unfortunate coin. So if you're gonna be in there, attempting a huge CSS refactoring project, be ready to write some HTML, too. In order to get our CSS formatted using the OOCSS approach we had all agreed on, it meant making some significant changes. Not to mention, once we got in there, we found a lot of non-semantic, unaccessible HTML just kind of...hanging out. Divs on spans on divs; not cool. It seems kind of obvious in retrospect, but it wasn't something I had considered and factored in when originally writing up the plans for our refactoring project – but you don't have to make the same mistake. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hype-up-every-little-win"&gt;
  &lt;/a&gt;
  &lt;a id="hype"&gt;&lt;/a&gt;Hype up every little win
&lt;/h3&gt;

&lt;p&gt;The combination of "giant project" with "no set completion date" and "not really fun to begin with" can all add up to "one pretty big bummer". It's easy for morale to get low, and you can't even really blame anyone for that. I've found that the answer is &lt;em&gt;not&lt;/em&gt; to pretend that it's awesome and we're all actually having a great time (mandatory fun, anyone?), but rather to make an effort to highlight genuine wins and successes whenever we have them. And you'll find that you actually have them quite a lot, as long as you're not expecting something to be HUGE in order for it to be a win. Got one component completely refactored? Awesome, gif party in Slack. Wrote some new mixins that everyone can use now? Fantastic, have a party parrot. Closed a whole ticket? Time to hype you up, my friend! Give people public kudos, see and appreciate their work, leave positive comments on code reviews, share screenshots. Make Slack a fun, positive place to be when you're working on this project. It's an undertaking, and if you wait for it to be 100% done before you start celebrating, you're gonna be waiting a long time. There are always everyday wins, and when you're working on this, it's more important than ever to lift those up and honor them. &lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>CSS3 Clip-Path Property.</title>
      <author>Swastik Yadav</author>
      <pubDate>Tue, 06 Jul 2021 15:18:54 +0000</pubDate>
      <link>https://dev.to/swastikyadav/css3-clip-path-property-1dne</link>
      <guid>https://dev.to/swastikyadav/css3-clip-path-property-1dne</guid>
      <description>&lt;p&gt;I recently learned about the clip-path property in CSS3.&lt;/p&gt;

&lt;p&gt;The clip-path creates a clipping region that sets what part of an element should be shown.&lt;/p&gt;

&lt;p&gt;This can help in creating really cool slanted Hero sections. The following CSS code snippet will create a slanted hero background section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clip-path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;polygon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="nt"&gt;vh&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPwySrlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp3.licdn.com/dms/image/C5612AQFA-ONWuU-jow/article-inline_image-shrink_1000_1488/0/1618950115948%3Fe%3D1631145600%26v%3Dbeta%26t%3D0uSO8ScJiarrf6FUIxo6bRSEEcznXihYSbrK6iZv6v8" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPwySrlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp3.licdn.com/dms/image/C5612AQFA-ONWuU-jow/article-inline_image-shrink_1000_1488/0/1618950115948%3Fe%3D1631145600%26v%3Dbeta%26t%3D0uSO8ScJiarrf6FUIxo6bRSEEcznXihYSbrK6iZv6v8" alt="clip-path-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The polygon shape takes 4 values in a pair of (x y) each for top-left, top-right, bottom-right, and bottom-left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-djQOyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp3.licdn.com/dms/image/C5612AQFpDe6iPFhlAw/article-inline_image-shrink_1500_2232/0/1618950367501%3Fe%3D1631145600%26v%3Dbeta%26t%3DBZciS9FGUspGymZevpHaFwOQLUoRIvng13Y5eSgraYg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-djQOyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp3.licdn.com/dms/image/C5612AQFpDe6iPFhlAw/article-inline_image-shrink_1500_2232/0/1618950367501%3Fe%3D1631145600%26v%3Dbeta%26t%3DBZciS9FGUspGymZevpHaFwOQLUoRIvng13Y5eSgraYg" alt="clip-path-explanation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But sometimes it can be very tricky to create a clipping path. So, here is a really cool tool for generating a CSS clip-path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bennettfeely.com/clippy/"&gt;https://bennettfeely.com/clippy/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go and create your own clip designs, shapes, and backgrounds.&lt;/p&gt;




&lt;p&gt;If you enjoyed reading this little CSS tip then, join my newsletter &lt;a href="https://8020lessons.in/"&gt;here&lt;/a&gt;. There I share more amazing stuff on web-development.&lt;/p&gt;

&lt;p&gt;I also help beginners to Learn CSS in a 7 days workshop without the tutorial hell, with &lt;a href="https://8020lessons.in/"&gt;8020-CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks a lot for reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>What Does "Learn to Code" Actually Mean?</title>
      <author>Lauren Zugai</author>
      <pubDate>Tue, 06 Jul 2021 15:17:01 +0000</pubDate>
      <link>https://dev.to/lzoog/what-does-learn-to-code-actually-mean-ea0</link>
      <guid>https://dev.to/lzoog/what-does-learn-to-code-actually-mean-ea0</guid>
      <description>&lt;p&gt;Over the years, the phrase "learn to code" has gained a lot of popularity, most notoriously as a sort of cheeky suggestion to throw at folks that aren't happy with their job. However, I can't count the number of times I've been approached personally for sincere advice on "learning computer coding" or the number of times I see something related asked about in a group on social media where I feel compelled to give advice. This post intends to demystify if this path is right for you, how to actually get started and how deep you may need to go, and to share some of my opinions around job prospects throughout the post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-some-confusing-terminology-out-of-the-way"&gt;
  &lt;/a&gt;
  Let's get some confusing terminology out of the way
&lt;/h2&gt;

&lt;p&gt;A mini glossary for those new to software and web application terminologies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;front-end (FE)&lt;/strong&gt;: encompasses user interfaces and actions associated with user interactions with your software; in web applications, it's code that is ran by the web browser/client; the "presentation layer"&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;back-end (BE)&lt;/strong&gt;: encompasses what the user doesn't see like handling data storage and processing logic; in web applications, it's code that is ran by the server; the "data access layer"&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;full-stack&lt;/strong&gt; (not typically an acronym): both the FE and BE, though it's common for a full-stack engineer to be stronger in one or the other&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following are my own hot takes/&lt;strong&gt;my opinions&lt;/strong&gt; as some may disagree with my definitions, but they reflect what I've come to understand and describe how I will be using certain terms throughout this blog post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;web developer&lt;/strong&gt;: someone that works on developing basic websites. HTML and CSS are required as well as typically basic JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;software&lt;/strong&gt;: a very broad term to encapsulate applications, scripts, services, and programs that run and interact together on a device. Oftentimes it is the end product of the front-end and back-end pieces working and packaged together. "Software" can mean desktop software, mobile software, software for the web, and others.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;web application&lt;/strong&gt;: software that runs on a web server&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;software engineer&lt;/strong&gt;: someone that develops software. Requires programming, working with data, making architectural decisions, and a much deeper understanding of a number of concepts depending on the nature of the software and the role while working on it. A software engineer for the web may refer to themselves as a web developer, software engineer, or some combination of the two.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To give a brief history of my journey to help spotlight any biases I may have, I'm a full-stack software engineer currently working on web applications and I've always gravitated towards the front-end. I taught myself HTML and CSS around the age of 13, I went to college for IT and computer science, and then I attended a coding bootcamp after college because I struggled to get my foot in the door and knew there was more to learn. I've freelanced, I've worked my way up from an internship to a senior level, and I've conducted and been part of dozens of interviews.&lt;/p&gt;

&lt;p&gt;While I believe many different folks can gain some value out of this post, as you read, keep in mind that it's geared towards web development and software engineering for the web, especially for those getting started in the front-end, and know that my personal experiences have influenced my perspective and opinions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-coding-right-for-you"&gt;
  &lt;/a&gt;
  Is coding right for you?
&lt;/h2&gt;

&lt;p&gt;First and foremost, coding is not for everyone. Stolen from &lt;a href="https://techcrunch.com/2016/05/10/please-dont-learn-to-code/"&gt;TechCrunch's "Please don't learn to code&lt;/a&gt;", the article states (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don’t get me wrong; I do believe that engineering and programming are important skills. But only in the right context, and only &lt;em&gt;for the type of person willing to put in the necessary blood, sweat and tears to succeed.&lt;/em&gt; The same could be said of many other skills. I would no more urge everyone to learn to program than I would urge everyone to learn to plumb.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;... however, while an apt warning, it shouldn't serve to intimidate you. In fact, if you have any interest in learning, I believe it's worth putting in the time to explore because of the vast free resources available and otherwise, you'll never know; you could get lucky and fall in love with it or at the very least, find it interesting enough to pursue long-term in a career switch.&lt;/p&gt;

&lt;p&gt;It's worth nothing, though, that some people oversimplify and underestimate what it actually takes to make it in this industry - they mostly see dollar signs and think since you can "teach yourself," they just have to grin and bear through a couple hundred hours of learning before they're set when the reality of the journey is much longer and arduous. In my opinion, if money is your sole motivator, you're not going to make it very far in the industry.&lt;/p&gt;

&lt;p&gt;Coding may be right for you if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;coding genuinely seems interesting to you&lt;/li&gt;
&lt;li&gt;you can and are willing to make the time needed to learn&lt;/li&gt;
&lt;li&gt;you enjoy learning and challenging yourself at work&lt;/li&gt;
&lt;li&gt;you don't mind a 9-5 desk job and can stare at a screen all day&lt;/li&gt;
&lt;li&gt;you communicate or can learn how to communicate well through written word&lt;/li&gt;
&lt;li&gt;bonus: there's a particular software idea or site that you want to work on (makes it easier to learn!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To conquer initial hurdles, the first two points probably carry the most weight. While you don't have to "love" coding (especially at first!) and consequently later, your job, to succeed in this industry, it can make an enormous difference in many ways. If you enjoy it at least somewhat, it'll make the journey feel less uphill, it can make solving bugs you run into exhilarating and carry you into the next thing, you may feel inspired to work late on a personal project because you're actually enjoying it, and excitement for software translates very well in job interviews. There is a lot of competition With that said, though, if you're just beginning this quest, do try to ask yourself periodically if this career path is right for you, but also keep in mind that initially, learning these things is probably not going to feel very "fun".&lt;/p&gt;

&lt;p&gt;In fact, expect to feel overwhelmed because the amount of stuff out there is, well, overwhelming. Understand that learning in the computer science and coding realm is an extremely layered experience. Concepts overlap and build on top of one another and you have to put in the time needed to gain the experience and familiarity with each layer. (By the way, the layers never stop growing. That's the "you enjoy learning" part of coding.) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KOcwOnJL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rn22xod1hrvq1dif9kqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOcwOnJL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rn22xod1hrvq1dif9kqg.png" alt='tree rings showing "you" at the center'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's nearly impossible to guestimate the number of hours you'll need to put in because it depends on how quickly you can learn, how you learn, what approach you take while learning, how relevant what you've learned pertains to the roles you're applying for, and even a little bit of luck around what jobs are available, who you know, and how competitive the market is. Since I attended a coding bootcamp after college and personally know some folks that were hired out of them without prior experience, it may be a good minimum baseline - my bootcamp was 13 weeks long at around 60-70 hours/week. If we take the lower end and estimate 80% of that time to account for breaks and other factors, we're still sitting at more than 620 hours for learning how to work on web applications with teachers working directly with us... and bootcamps serve as a good foundation and take you through a lot in a short period of time, but you barely scratch the surface. I mention this not to discourage, but to be transparent about the journey in front of you. However, &lt;strong&gt;if you prioritize success and truly want to succeed, you will.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enough-of-your-ranting-what-and-how-should-i-learn"&gt;
  &lt;/a&gt;
  Enough of your ranting, what and how should I learn?
&lt;/h2&gt;

&lt;p&gt;You've probably seen this list before, but there's several ways to learn "how to code":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Teaching yourself&lt;/li&gt;
&lt;li&gt;Attending a code bootcamp&lt;/li&gt;
&lt;li&gt;Obtaining a related degree&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I won't get into the nitty gritty of the options as it could be worth a post of its own, my opinion is that you should try to teach yourself before attending a bootcamp or opting for a degree to make sure it's something you're truly interested in before shelling out the time and financial commitment. If you're in high school or college now and can earn a degree without going into much debt, I would still recommend a degree as I do believe a computer science or related degree is still valuable to obtain (plus, it can make you stand out), but I also think if you want to learn web applications, you'll have to work on side projects because from what I've seen, CS degrees don't tend to apply software engineering to the web very well. If you learn significantly better in a classroom setting but are struggling on your own, can afford it, and don't mind not having a degree for it, a bootcamp could be a solid choice for you. Though, based on my experience, you need to have some prior experience to excel in programs that fast-paced. The rest of this post will focus on teaching yourself.&lt;/p&gt;

&lt;p&gt;No matter what method is right for you, at the core of it, you should be emphasizing &lt;em&gt;project-based learning&lt;/em&gt;. There is nothing more dull and uninspiring than working through 100 isolated JavaScript problems where it's not only easy to hit a wall and feel frustrated or bored, but it's also easy to procrastinate and to allow doubt and sense of being overwhelmed creep in. While it's necessary to work through some problems or puzzles when you're learning the basics, project-based learning lets you gain experience with concepts and connect some of those dots together, allows you to work with certain libraries or frameworks directly, debug on a "real" project, and gives you projects for your resume.&lt;/p&gt;

&lt;p&gt;One reason "teaching yourself" is so difficult is because you don't know what or how to learn. This is the happy path that I would suggest to get you to that first project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pick a path by selecting the language(s), libraries etc. that will lead you to the job you want (more on this next)&lt;/li&gt;
&lt;li&gt;Learn the basics through free YouTube videos and other free sources like blog posts or &lt;a href="https://developer.mozilla.org/en-US/docs/Learn"&gt;MDN&lt;/a&gt;, try &lt;a href="https://www.codecademy.com"&gt;Codecademy&lt;/a&gt;, and/or a "basics" course on &lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt; for around $10 

&lt;ul&gt;
&lt;li&gt;Note that you should not just watch videos or read docs. Get your environment set up and run exactly the same code that they are and/or work on isolated problems in something like &lt;a href="https://replit.com/"&gt;replit&lt;/a&gt;. It may take you two hours to work through 20 minutes, but that just means you're doing it right. I like &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;, by the way.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Take those basics and do something fun with them that will help you dive deeper into understanding the language, like using free resources to find a tutorial for building something that seems interesting, such as building out an entire web page with HTML and CSS and/or &lt;a href="https://javascript30.com/"&gt;Wes Bos' 30 days of JS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Build something more complex, like using React for a to-do application and then hooking up a server to persist the data, which will probably entail a lot more use of free resources or even another Udemy course to help you come up with an idea and fill in the gaps&lt;/li&gt;
&lt;li&gt;Come up with your own project, and build it!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#but-i-still-dont-know-what-to-pick"&gt;
  &lt;/a&gt;
  ...But I still don't know what to pick🤔
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Another disclaimer \o/&lt;/strong&gt; - tech stack choices tend to depend on the type of software being built, there's not a blanket stack that just works universally. With that being said, my suggestions are based on what I think will be the most straightforward for folks to start with, what I've enjoyed working with, and what I've seen in the industry. This is also pretty basic and non-expansive and I expect others may disagree with some of it.&lt;/p&gt;

&lt;p&gt;If you're not really interested in programming but you think learning basic webdev seems interesting, know first and foremost that competition for the kind of jobs you want to go after is likely going to be tremendous and that you'll reach the pay ceiling fairly quickly. However, it can open the door for you if you're interested in front-end engineering, designing, or some sort of entry-level tech job, like a basic website admin or hybrid junior job where your responsibility is low but you wear a few different hats like content writing as well (though, know there's much more direct things to study if you want to pursue designing or content writing). If this interests you, you can start with HTML and CSS and ease your way into SCSS and JavaScript.&lt;/p&gt;

&lt;p&gt;If you're interested in front-end engineering, you'll want to know HTML and CSS basics. When you start working with front-end libraries or frameworks though, know that you basically don't write HTML or CSS anymore, you write things that get compiled into HTML and CSS. I'd start with basic vanilla JS to understand how it works, and then move on to a front-end library like &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;React&lt;/a&gt; to put it together. You'll also want to learn git/GitHub and basic terminal commands.&lt;/p&gt;

&lt;p&gt;If you're interested in the back-end, you've got a lot more language options. If you think you may be interested in the full-stack or just working with JS on the server-side, I'd recommend learning JavaScript so you can learn one language and work with &lt;a href="http://nodejs.org/"&gt;NodeJS&lt;/a&gt; and a web framework like &lt;a href="https://expressjs.com/"&gt;ExpressJS&lt;/a&gt;. If you think working with data/data scientists or AI, or machine learning is interesting, you may want to consider learning &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;. There are other completely valid languages to learn like PHP for Wordpress, which is common for freelance work, Ruby, C++, Java, or Rust depending on the kind of project you want to build. Regardless you'll also want to learn git/GitHub and terminal commands.&lt;/p&gt;

&lt;p&gt;Some other things that would benefit you to read/learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON, REST APIs, and CRUD apps&lt;/li&gt;
&lt;li&gt;For the FE: best accessibility practices&lt;/li&gt;
&lt;li&gt;For the BE: types of databases and how to query from them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're still not sure what you're interested in, try searching for jobs with various terms like "web developer," "back end engineer," "javascript engineer", or "UI developer," even other related jobs like "dev ops," "data analyst," "game developer," or "cyber security" to get an idea of what's out there in tech, and find job listings you'd love to be qualified for later. Make note of the tech they're asking for as you may find some patterns that may help you make your own roadmap (or bootcamp choice).&lt;/p&gt;

&lt;p&gt;Speaking of roadmaps, definitely &lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;check out this fantastic web developer roadmap&lt;/a&gt;. Though, be sure to check out their "Note to Beginners."&lt;/p&gt;

&lt;p&gt;Although I've mentioned it several times in this post already, as one recommendation I will emphasize again, especially if you're still not sure what to pick, is to learn JavaScript. JS is incredibly versatile as it is used in the FE, can be used in the BE, and even has some cross-over with mobile apps with libraries like &lt;a href="https://reactnative.dev/"&gt;React Native&lt;/a&gt; and desktop apps with &lt;a href="https://www.electronjs.org/"&gt;Electron&lt;/a&gt;. It can be a great first language to choose since you can do so many different things with it without having to juggle two languages at once.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-amp-resources"&gt;
  &lt;/a&gt;
  Conclusion &amp;amp; Resources
&lt;/h2&gt;

&lt;p&gt;While coding is not for everyone, if you love to learn and find the concept of it genuinely interesting, it may be something great and fruitful for you to pursue. Expect to dedicate a lot of time - probably significantly more than you think or plan to - to hone your craft. It can be intimidating and overwhelming, but remember that old saying about Rome not being built in a day. It can all begin for you by taking that first step.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org"&gt;MDN&lt;/a&gt; - for learning and language references&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://replit.com/"&gt;replit&lt;/a&gt; - an in-browser IDE that you can use to isolate problems and learn language basics&lt;/li&gt;
&lt;li&gt;
&lt;a href="//udemy.com"&gt;Udemy&lt;/a&gt; or &lt;a href="//codecademy.com"&gt;Codecademy&lt;/a&gt; - free or cheap deep-dive courses you can take&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codepen.io/"&gt;codepen.io&lt;/a&gt; - practice your HTML, CSS, and JS in a sandbox, or browse codepens for inspiration&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt; - a place you can go to find answers for specific questions or ask your own&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q"&gt;FunFunFunction&lt;/a&gt; - a YouTube channel that does a fantastic job at explaining complex JS topics, though the channel is not currently active. Check out YouTube for other free tutorials&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hackmd.io/"&gt;hackMD&lt;/a&gt; - I didn't go over Markdown files in this post, but it's a lightweight markup language and the defacto standard for developer READMEs; HackMD is a nice tool worth sharing for document collaboration and to see how MD works&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>learning</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building Scalable Full Stack Apps on Ethereum with Polygon</title>
      <author>Nader Dabit</author>
      <pubDate>Tue, 06 Jul 2021 15:14:09 +0000</pubDate>
      <link>https://dev.to/dabit3/building-scalable-full-stack-apps-on-ethereum-with-polygon-2cfb</link>
      <guid>https://dev.to/dabit3/building-scalable-full-stack-apps-on-ethereum-with-polygon-2cfb</guid>
      <description>&lt;h3&gt;
  &lt;a href="#building-a-digital-marketplace-with-nextjs-tailwind-solidity-hardhat-ethersjs-ipfs-and-polygon"&gt;
  &lt;/a&gt;
  Building a digital marketplace with Next.js, Tailwind, Solidity, Hardhat, Ethers.js, IPFS, and Polygon
&lt;/h3&gt;

&lt;p&gt;In my last end to end Ethereum tutorial, &lt;a href="https://dev.to/dabit3/the-complete-guide-to-full-stack-ethereum-development-3j13"&gt;The Complete Guide to Full Stack Ethereum Development&lt;/a&gt; I introduced how to build a basic app on Ethereum using modern tooling like &lt;a href="https://hardhat.org/"&gt;Hardhat&lt;/a&gt; and &lt;a href="https://docs.ethers.io/v5/"&gt;Ethers.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One thing that has become apparent over the past few months is how fast Ethereum scaling solutions like &lt;a href="https://polygon.technology/"&gt;Polygon&lt;/a&gt;, &lt;a href="https://developer.offchainlabs.com/docs/developer_quickstart"&gt;Arbitrum&lt;/a&gt;, and &lt;a href="https://optimism.io/"&gt;Optimism&lt;/a&gt; are gaining momentum and adoption. These technologies enable developers to build the same applications they would directly on Ethereum with the added benefits of lower gas costs and faster transaction speeds among other things.&lt;/p&gt;

&lt;p&gt;Because of the value proposition that these solutions offer combined with the general lack of existing content, I will be building out various example projects and tutorials for full stack applications using these various Ethereum scaling solutions, starting with this one on Polygon.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To view the final source code for this project, visit &lt;a href="https://github.com/dabit3/polygon-ethereum-nextjs-marketplace/settings"&gt;this repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;To be successful in this guide, you must have the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Node.js installed on your machine&lt;/li&gt;
&lt;li&gt;Metamask wallet extension installed as a browser extension&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-stack"&gt;
  &lt;/a&gt;
  The stack
&lt;/h3&gt;

&lt;p&gt;In this guide, we will build out a full stack application using:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ethereum Layer&lt;/strong&gt; - &lt;a href="https://polygon.technology/"&gt;Polygon&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Web application framework&lt;/strong&gt; - &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Solidity development environment&lt;/strong&gt; - &lt;a href="https://hardhat.org/"&gt;Hardhat&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;File Storage&lt;/strong&gt; - &lt;a href="https://ipfs.io/"&gt;IPFS&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Ethereum Web Client Library&lt;/strong&gt; - &lt;a href="https://docs.ethers.io/v5/"&gt;Ethers.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though it will not be part of this guide (coming in a separate post), we will look at how to build a more robust API layer using &lt;a href="https://thegraph.com/"&gt;The Graph Protocol&lt;/a&gt; to get around limitations in the data access patterns provided by the native blockchain layer.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#about-the-project"&gt;
  &lt;/a&gt;
  About the project
&lt;/h3&gt;

&lt;p&gt;The project that we will be building will be &lt;strong&gt;Metaverse Marketplace&lt;/strong&gt; - a digital marketplace.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1d8ljara--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx8avrmuwqswx9roub2g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1d8ljara--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx8avrmuwqswx9roub2g.png" alt="Metaverse Marketplace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a user puts an item for sale, the ownership of the item will be transferred from the creator to the marketplace.&lt;/p&gt;

&lt;p&gt;When a user purchases an item, the purchase price will be transferred from the buyer to the seller and the item will be transferred from the marketplace to the buyer.&lt;/p&gt;

&lt;p&gt;The marketplace owner will be able to set a listing fee. This fee will be taken from the seller and transferred to the contract owner upon completion of any sale, enabling the owner of the marketplace to earn recurring revenue from any sale transacted in the marketplace.&lt;/p&gt;

&lt;p&gt;The marketplace logic will consist of two smart contracts:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NFT Contract&lt;/strong&gt; - This contract allows users to mint unique digital assets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Marketplace Contract&lt;/strong&gt; - This contract allows users to put their digital assets for sale on an open market.&lt;/p&gt;

&lt;p&gt;I believe this is a good project because the tools, techniques, and ideas we will be working with lay the foundation for many other types of applications on this stack – dealing with things like payments, commissions, and transfers of ownership on the contract level as well as how a client-side application would use this smart contract to build a performant and nice-looking user interface.&lt;/p&gt;

&lt;p&gt;In addition to the smart contract, I'll also show you how to build a subgraph to make the querying of data from the smart contract more flexible and efficient. As you will see, creating views on data sets and enabling various and performant data access patterns is hard to do directly from a smart contract. &lt;a href="https://thegraph.com/"&gt;The Graph&lt;/a&gt; makes this much easier.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#about-polygon"&gt;
  &lt;/a&gt;
  About Polygon
&lt;/h3&gt;

&lt;p&gt;From &lt;a href="https://polygon.technology/"&gt;the docs&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;"Polygon is a protocol and a framework for building and connecting Ethereum-compatible blockchain networks. Aggregating scalable solutions on Ethereum supporting a multi-chain Ethereum ecosystem."&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ChainLinkGod/status/1405688790241316864"&gt;Polygon is about 10x faster than Ethereum &amp;amp; yet transactions are more than 10x cheaper&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Ok cool, but what does all that mean?&lt;/p&gt;

&lt;p&gt;To me it means that &lt;em&gt;I can use the same knowledge, tools, and technologies I have been using to build apps on Ethereum to build apps that are faster and cheaper for users&lt;/em&gt;, providing not only a better user experience but also opening the door for many types of applications that just would not be feasible to be built directly on Ethereum.&lt;/p&gt;

&lt;p&gt;As mentioned before, there are many other Ethereum scaling solutions such as &lt;a href="https://developer.offchainlabs.com/docs/developer_quickstart"&gt;Arbitrum&lt;/a&gt;and &lt;a href="https://optimism.io/"&gt;Optimism&lt;/a&gt; that are also in a similar space. Most of these &lt;a href="https://ethereum.org/en/developers/docs/scaling/"&gt;scaling solutions&lt;/a&gt; have technical differences and fall into various categories like &lt;a href="https://ethereum.org/en/developers/docs/scaling/sidechains/"&gt;sidechains&lt;/a&gt; , &lt;a href="https://ethereum.org/en/developers/docs/scaling/layer-2-rollups/"&gt;layer 2s&lt;/a&gt;, and &lt;a href="https://ethereum.org/en/developers/docs/scaling/state-channels/"&gt;state channels&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Polygon &lt;a href="https://cointelegraph.com/news/matic-rebrands-to-polygon-in-pursuit-of-polkadot-on-ethereum-strategy"&gt;recently rebranded from Matic&lt;/a&gt; so you will also see the word &lt;strong&gt;Matic&lt;/strong&gt; used interchangeably when referring to various parts of their ecosystem because the name still is being used in various places, like their token and network names.&lt;/p&gt;

&lt;p&gt;To learn more about Polygon, check out &lt;a href="https://medium.com/coinmonks/polygon-matic-could-it-win-the-eth-scaling-race-2c8b4e9baf51"&gt;this post&lt;/a&gt; as well as their documentation &lt;a href="https://docs.matic.network/docs/develop/getting-started"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have an overview of the project and related technologies, let's start building!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h2&gt;

&lt;p&gt;To get started, we'll create a new Next.js app. To do so, open your terminal. Create or change into a new empty directory and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app digital-marketplace
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, change into the new directory and install the dependencies:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;digital-marketplace

npm &lt;span class="nb"&gt;install &lt;/span&gt;ethers hardhat @nomiclabs/hardhat-waffle &lt;span class="se"&gt;\&lt;/span&gt;
ethereum-waffle chai @nomiclabs/hardhat-ethers &lt;span class="se"&gt;\&lt;/span&gt;
web3modal @openzeppelin/contracts ipfs-http-client &lt;span class="se"&gt;\&lt;/span&gt;
axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-tailwind-css"&gt;
  &lt;/a&gt;
  Setting up Tailwind CSS
&lt;/h3&gt;

&lt;p&gt;We'll be using &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; for styling, we we will set that up in this step.&lt;/p&gt;

&lt;p&gt;Tailwind is a utility-first CSS framework that makes it easy to add styling and create good looking websites without a lot of work.&lt;/p&gt;

&lt;p&gt;Next, install the Tailwind dependencies:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; tailwindcss@latest postcss@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, we will create the configuration files needed for Tailwind to work with Next.js (&lt;code&gt;tailwind.config.js&lt;/code&gt; and &lt;code&gt;postcss.config.js&lt;/code&gt;) by running the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx tailwindcss init &lt;span class="nt"&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, delete the code in &lt;strong&gt;styles/globals.css&lt;/strong&gt; and update it with the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#configuring-hardhat"&gt;
  &lt;/a&gt;
  Configuring Hardhat
&lt;/h3&gt;

&lt;p&gt;Next, initialize a new Hardhat development environment from the root of your project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx hardhat

? What &lt;span class="k"&gt;do &lt;/span&gt;you want to &lt;span class="k"&gt;do&lt;/span&gt;? Create a sample project
? Hardhat project root: &amp;lt;Choose default path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now you should see the following files and folders created for you in your root directory:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;hardhat.config.js&lt;/strong&gt; - The entirety of your Hardhat setup (i.e. your config, plugins, and custom tasks) is contained in this file.&lt;br&gt;
&lt;strong&gt;scripts&lt;/strong&gt; - A folder containing a script named sample-script.js that will deploy your smart contract when executed&lt;br&gt;
&lt;strong&gt;test&lt;/strong&gt; - A folder containing an example testing script&lt;br&gt;
&lt;strong&gt;contracts&lt;/strong&gt; - A folder holding an example Solidity smart contract&lt;/p&gt;

&lt;p&gt;Next, update the configuration at &lt;strong&gt;hardhat.config.js&lt;/strong&gt; with the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;In this configuration, we've configured the local Hardhat development environment as well as the &lt;a href="https://docs.matic.network/docs/develop/network-details/network/#mumbai-testnet"&gt;&lt;strong&gt;Mumbai testnet&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can read more about both Matic networks &lt;a href="https://docs.matic.network/docs/develop/network-details/network/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, create a file named &lt;strong&gt;.secret&lt;/strong&gt; at the root of your project. For now, we will leave this file empty. Later on, we will populate it with a test wallet private key that will hold some Matic tokens that we will get from the Matic testnet faucet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be sure to never commit any private keys to Git. To be extra safe, consider storing these values in temporary environment variables when working with wallets that contain &lt;strong&gt;real&lt;/strong&gt; tokens. To omit from Git, add &lt;strong&gt;.secret&lt;/strong&gt; to your &lt;strong&gt;.gitignore&lt;/strong&gt; file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#smart-contracts"&gt;
  &lt;/a&gt;
  Smart Contracts
&lt;/h3&gt;

&lt;p&gt;Next, we'll create our smart contracts! We'll start with the NFT contract for the unique digital assets.&lt;/p&gt;

&lt;p&gt;Create a new file in the &lt;strong&gt;contracts&lt;/strong&gt; directory named &lt;strong&gt;NFT.sol&lt;/strong&gt;. Here, add the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This is a pretty straightforward NFT smart contract that allows users to mint unique digital assets and have ownership of them.&lt;/p&gt;

&lt;p&gt;In this contract we are inheriting from the &lt;a href="https://eips.ethereum.org/EIPS/eip-721"&gt;ERC721 standard&lt;/a&gt; implemented by &lt;a href="https://docs.openzeppelin.com/contracts/2.x/api/token/erc721"&gt;OpenZepplin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we'll create the contract for the Marketplace. This is a much larger smart contract. I've done my best to document what each function is doing.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the smart contract code and environment is complete and we can try testing it out.&lt;/p&gt;

&lt;p&gt;To do so, we can create a local test to run through much of the functionality, like minting a token, putting it up for sale, selling it to a user, and querying for tokens.&lt;/p&gt;

&lt;p&gt;To create the test, open &lt;strong&gt;test/sample-test.js&lt;/strong&gt; and update it with the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To run the test, run &lt;code&gt;npx hardhat test&lt;/code&gt; from your command line:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZbw3bOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arhf4yzlrex4s8yp9hyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZbw3bOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arhf4yzlrex4s8yp9hyp.png" alt="Running the test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the test runs successfully, it should log out an array containing a single marketplace item.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-front-end"&gt;
  &lt;/a&gt;
  Building the front end
&lt;/h2&gt;

&lt;p&gt;Now that the smart contract is working and ready to go, we can start building out the UI.&lt;/p&gt;

&lt;p&gt;The first thing we might think about is setting up a layout so that we can enable some navigation that will persist across all pages.&lt;/p&gt;

&lt;p&gt;To set this up, open &lt;strong&gt;pages/_app.js&lt;/strong&gt; and update it with the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The navigation has links for the home route as well as a page to sell a digital asset, view the assets you have purchased, and a creator dashboard to see the assets you've created as well as the assets you've sold.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#querying-the-contract-for-marketplace-items"&gt;
  &lt;/a&gt;
  Querying the contract for marketplace items
&lt;/h4&gt;

&lt;p&gt;The next page we'll update is &lt;strong&gt;pages/index.js&lt;/strong&gt;. This is the main entry-point of the app, and will be the view where we query for the digital assets for sale and render them to the screen.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When the page loads, we query the smart contract for any items that are still for sale and render them to the screen along with metadata about the items and a button for purchasing them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-and-listing-digital-items"&gt;
  &lt;/a&gt;
  Creating and listing digital items
&lt;/h4&gt;

&lt;p&gt;Next, let's create the page that allows users to create and list digital assets.&lt;/p&gt;

&lt;p&gt;There are a few things happening in this page:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The user is able to upload and save files to IPFS&lt;/li&gt;
&lt;li&gt;The user is able to create a new unique digital item (NFT)&lt;/li&gt;
&lt;li&gt;The user is able to set metadata and price of item and list it for sale on the marketplace&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After the user creates and lists an item, they are re-routed to the main page to view all of the items for sale.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#viewing-only-the-items-purchased-by-the-user"&gt;
  &lt;/a&gt;
  Viewing only the items purchased by the user
&lt;/h4&gt;

&lt;p&gt;In the &lt;strong&gt;Market.sol&lt;/strong&gt; smart contract, we created a function named &lt;code&gt;fetchMyNFTs&lt;/code&gt; that only returns the items owned by the user.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;pages/my-assets.js&lt;/strong&gt;, we will use that function to fetch and render them.&lt;/p&gt;

&lt;p&gt;This functionality is different than the query main &lt;strong&gt;pages/index.js&lt;/strong&gt; page because we need to ask the user for their address and use it in the contract, so the user will have to sign the transaction for it to be able to fetch them properly.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#creator-dashboard"&gt;
  &lt;/a&gt;
  Creator dashboard
&lt;/h4&gt;

&lt;p&gt;The final page we will be creating is the creator dashboard that will allow them to view both all of the items they have created as well as the items they have sold.&lt;/p&gt;

&lt;p&gt;This page will be using the &lt;code&gt;fetchItemsCreated&lt;/code&gt; function from the &lt;strong&gt;Market.sol&lt;/strong&gt; smart contract which returns only the items that match the address of the user making the function call.&lt;/p&gt;

&lt;p&gt;On the client, we use the &lt;code&gt;sold&lt;/code&gt; boolean to filter the items into another separate array to show the user only the items that have been sold.&lt;/p&gt;

&lt;p&gt;Create a new file called &lt;strong&gt;creator-dashboard.js&lt;/strong&gt; in the &lt;strong&gt;pages&lt;/strong&gt; directory with the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#running-the-project"&gt;
  &lt;/a&gt;
  Running the project
&lt;/h3&gt;

&lt;p&gt;To run the project, we will need to have a deploy script to deploy the smart contracts to the blockchain network.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deploying-the-contracts-to-a-local-network"&gt;
  &lt;/a&gt;
  Deploying the contracts to a local network
&lt;/h4&gt;

&lt;p&gt;When we created the project, Hardhat created an example deployment script at &lt;strong&gt;scripts/sample-script.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To make the purpose of this script more clear, update the name of &lt;strong&gt;scripts/sample-script.js&lt;/strong&gt; to &lt;strong&gt;scripts/deploy.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, update the &lt;code&gt;main&lt;/code&gt; function in &lt;strong&gt;scripts/deploy.js&lt;/strong&gt; with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NFTMarket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;hre&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContractFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NFTMarket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nftMarket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;NFTMarket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nftMarket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deployed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nftMarket deployed to:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nftMarket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NFT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;hre&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContractFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NFT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;NFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nftMarket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deployed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nft deployed to:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This script will deploy both contracts to the blockchain network.&lt;/p&gt;

&lt;p&gt;We will first test this on a local network, then deploy it to the &lt;a href="https://docs.matic.network/docs/develop/network-details/network/"&gt;Mumba testnet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To spin up a local network, open your terminal and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx hardhat node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should create a local network with 19 accounts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TtesD9Zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1spai8459exh7looei7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TtesD9Zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1spai8459exh7looei7.png" alt="Hardhat node"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, keep the node running and open a separate terminal window to deploy the contract.&lt;/p&gt;

&lt;p&gt;In a separate window, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx hardhat run scripts/deploy.js &lt;span class="nt"&gt;--network&lt;/span&gt; localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the deployment is complete, the CLI should print out the addresses of the contracts that were deployed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsLMJwFP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ixy3zy6gwq2xsrslwmg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsLMJwFP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ixy3zy6gwq2xsrslwmg.png" alt="Contract addresses"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using these addresses, create a new file at the root of the project named &lt;strong&gt;config.js&lt;/strong&gt; and add the following code, replacing &lt;code&gt;contract-address&lt;/code&gt; with the contract addresses printed out by the CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nftmarketaddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contract-address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nftaddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contract-address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#importing-accounts-into-metamask"&gt;
  &lt;/a&gt;
  Importing accounts into MetaMask
&lt;/h4&gt;

&lt;p&gt;You can import the accounts created by the node into your Metamask wallet to try out in the app.&lt;/p&gt;

&lt;p&gt;Each of these accounts is seeded with 10000 ETH.&lt;/p&gt;

&lt;p&gt;To import one of these accounts, first switch your MetaMask wallet network to Localhost 8545.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUoFYips--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgcicglserwmyx6vrexy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUoFYips--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgcicglserwmyx6vrexy.jpeg" alt="Localhost Network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, in MetaMask click on &lt;strong&gt;Import Account&lt;/strong&gt; from the accounts menu:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_qpxmPp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04rv5hdn8s2f7tkslpru.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qpxmPp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04rv5hdn8s2f7tkslpru.jpeg" alt="MetaMask import account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy then paste one of the &lt;strong&gt;Private Keys&lt;/strong&gt; logged out by the CLI and click &lt;strong&gt;Import&lt;/strong&gt;. Once the account is imported, you should see some the Eth in the account:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jJBZC6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc5y4xa9htjymncovo2o.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jJBZC6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc5y4xa9htjymncovo2o.jpeg" alt="MetaMask account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'd suggest doing this with 2 or 3 accounts so that you have the ability to test out the various functionality between users.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#running-the-app"&gt;
  &lt;/a&gt;
  Running the app
&lt;/h4&gt;

&lt;p&gt;Now we can test out the app!&lt;/p&gt;

&lt;p&gt;To start the app, run the following command in your CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To test everything out, try listing an item for sale, then switching to another account and purchasing it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-polygon"&gt;
  &lt;/a&gt;
  Deploying to Polygon
&lt;/h2&gt;

&lt;p&gt;Now that we have the project up and running and tested locally, let's deploy to Polygon. We'll start by deploying to &lt;a href="https://docs.matic.network/docs/develop/network-details/network/#mumbai-testnet"&gt;Mumbai&lt;/a&gt;, the Matic test network.&lt;/p&gt;

&lt;p&gt;The first thing we will need to do is save one of our &lt;strong&gt;private keys&lt;/strong&gt; from our wallet to the &lt;strong&gt;.secrets&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;To get the private key, you can use one of the private keys given to you by Hardhat or you can export them directly from MetaMask.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6H5cUQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyd4cs7f3czfwyeh5513.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6H5cUQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyd4cs7f3czfwyeh5513.png" alt="Private keys"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For production apps, I'd suggest never hardcoding private key values in your as we are doing here, but instead setting it as something like an environment variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#configuring-the-network"&gt;
  &lt;/a&gt;
  Configuring the network
&lt;/h3&gt;

&lt;p&gt;Next, we need to switch from the local test network to the &lt;a href="https://docs.matic.network/docs/develop/network-details/network/#mumbai-testnet"&gt;Mumbai Testnet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To do so, we need to create and set the network configuration.&lt;/p&gt;

&lt;p&gt;First, open MetaMask and click on &lt;strong&gt;Settings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m7IT4BJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/175kmqy9dp4uw94sk14l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m7IT4BJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/175kmqy9dp4uw94sk14l.png" alt="MetaMask settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, click on &lt;strong&gt;Networks&lt;/strong&gt; and then &lt;strong&gt;Add Network&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e7hY_j6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d762mh6l545ce9hexugf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7hY_j6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d762mh6l545ce9hexugf.png" alt="New Network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we will add the following configurations for the Mumbai test network as listed &lt;a href="https://docs.matic.network/docs/develop/network-details/network/#mumbai-testnet"&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Network Name: &lt;strong&gt;Mumbai TestNet&lt;/strong&gt;&lt;br&gt;
New RPC URL: &lt;strong&gt;&lt;a href="https://rpc-mumbai.matic.today"&gt;https://rpc-mumbai.matic.today&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Chain ID: &lt;strong&gt;80001&lt;/strong&gt;&lt;br&gt;
Currency Symbol: &lt;strong&gt;Matic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Save this, then you should be able to switch to and use the new network!&lt;/p&gt;

&lt;p&gt;Finally, you will need some testnet Matic tokens in order to interact with the applications.&lt;/p&gt;

&lt;p&gt;To get these, you can visit the &lt;a href="https://faucet.matic.network/"&gt;Matic Faucet&lt;/a&gt;, inputting the address of the wallets that you would like to request the tokens.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploying-to-the-matic-polygon-network"&gt;
  &lt;/a&gt;
  Deploying to the Matic / Polygon network
&lt;/h3&gt;

&lt;p&gt;Now that you have some Matic tokens, you can deploy to the Polygon network!&lt;/p&gt;

&lt;p&gt;To do so, be sure that the address associated with the private key you are deploying your contract with has received some Matic tokens in order to pay the gas fees for the transaction.&lt;/p&gt;

&lt;p&gt;To deploy to Matic, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx hardhat run scripts/deploy.js &lt;span class="nt"&gt;--network&lt;/span&gt; mumbai
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the contracts have been deployed, you should be able to update the contract addresses in your project and test on the new network 🎉!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#deploying-to-mainnet"&gt;
  &lt;/a&gt;
  Deploying to Mainnet
&lt;/h4&gt;

&lt;p&gt;To deploy to the main Matic / Polygon network, you can use the same steps we set up for the Mumbai test network.&lt;/p&gt;

&lt;p&gt;The main difference is that you'll need to use an endpoint for Matic as well as import the network as listed &lt;a href="https://docs.matic.network/docs/develop/network-details/network/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example update in your project to make this happen might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* hardhat.config.js */&lt;/span&gt;

&lt;span class="cm"&gt;/* adding Matic main network config to existing config */&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;matic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rpc-mainnet.maticvigil.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Public RPCs like the one listed above may have traffic or rate-limits depending on usage. You can sign up for a dedicated free RPC URL using services like Infura, MaticVigil, QuickNode, Chainstack, or Ankr.&lt;/p&gt;

&lt;p&gt;For example, using something like Infura:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://polygon-mainnet.infura.io/v3/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;infuraId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To view the final source code for this project, visit &lt;a href="https://github.com/dabit3/polygon-ethereum-nextjs-marketplace/settings"&gt;this repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h3&gt;

&lt;p&gt;Congratulations! You've deployed a non-trivial app to Polygon.&lt;/p&gt;

&lt;p&gt;The coolest thing about working with solutions like Polygon is how little extra work or learning I had to do compared to building directly on Ethereum. Almost all of the APIs and tooling in these layer 2's and sidechains remain the same, making any skills transferable across various platforms like Polygon. &lt;/p&gt;

&lt;p&gt;For the next steps, I'd suggest porting over the queries implemented in this app using &lt;a href="https://thegraph.com/"&gt;The Graph&lt;/a&gt;. The Graph will open up many more data access patterns including things like pagination, filtering, and sorting which are necessary for any real-world application.&lt;/p&gt;

&lt;p&gt;I will also be publishing a tutorial showing how to use Polygon with The Graph in the coming weeks.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>blockchain</category>
      <category>ethereum</category>
    </item>
    <item>
      <title>JavaScript Frameworks and Metagaming</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 06 Jul 2021 15:14:07 +0000</pubDate>
      <link>https://dev.to/this-is-learning/javascript-frameworks-and-metagaming-pb5</link>
      <guid>https://dev.to/this-is-learning/javascript-frameworks-and-metagaming-pb5</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ryansolid/solidjs-official-release-the-long-road-to-1-0-4ldd"&gt;Last week we released SolidJS 1.0&lt;/a&gt;. A JavaScript framework built on a foundation of ideas long ago dismissed, that accomplishes what some thought to be impossible. It was also a great personal achievement for me. Years of work realized and put on display.&lt;/p&gt;

&lt;p&gt;And many of you know that. Since 2018 I made the deliberate choice to write about every detail of building a JavaScript framework. That's several dozen articles. In a lot of ways &lt;a href="https://www.solidjs.com/"&gt;Solid&lt;/a&gt; was built in public. And just because we've hit 1.0 doesn't mean I have any intention to stop writing about my experiences and the things I learn in a highly introspective way.&lt;/p&gt;

&lt;p&gt;It's no secret it's been hard to push a new JavaScript framework in such an overcrowded space. And 1.0 release has lead me to reflect further on this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metagaming-in-games"&gt;
  &lt;/a&gt;
  Metagaming in Games
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2HS80djn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg8ko3ofi29xkey96xh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HS80djn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg8ko3ofi29xkey96xh9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was an avid &lt;a href="https://magic.wizards.com/en"&gt;Magic the Gathering&lt;/a&gt;(collectable card game) player for several years. I mostly was a deck designer and play-tester. I was not the best technical player but what I did well was understand how the the whole field of possible decks would play against each other and how to take a given strategy and have it invalidate another approach. You can view this as a huge game of Rock Paper Scissors, except there were more than just 3 options.&lt;/p&gt;

&lt;p&gt;What makes Magic interesting is that each match is a best out of 3 games and the person who goes first in a game generally has the advantage. But for game 1 that is random and something you can't control. In games 2 the loser goes first and should it go to game 3 the person who won the first game goes first again.&lt;/p&gt;

&lt;p&gt;But what makes it really interesting is after game 1 either player can swap up to a quarter of the cards in their deck. And depending on each strategy one can change their approach to combat other strategies. This is incredibly deep when you consider the &lt;a href="https://www.youtube.com/watch?v=EZSx3zNZOaU"&gt;Princess Bride leveling game&lt;/a&gt; involved.&lt;/p&gt;

&lt;p&gt;Through Magic I learned lessons on game theory. It's immensely deep. I've applied these sort of patterned thinking to a lot of problems I've faced since. Mark Rosewater, the Head Designer, gives one of my favorite talks on lessons learned when designing.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QHHg99hwQGY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#framework-design"&gt;
  &lt;/a&gt;
  Framework Design
&lt;/h2&gt;

&lt;p&gt;So what does this have to do with designing JavaScript Frameworks. Well, features-wise it is just as much about positioning as anything. How to balance a solution with no obvious weakness, yet offer the best offering on average. Sometimes you win in game 1 and there is nothing anyone can reasonably do to catch up. Other times you just need to be able draw it into the deciding game 3 where you will have the advantage.&lt;/p&gt;

&lt;p&gt;While this seems sort of ruthless it has given me a framework for looking at balance. You don't get to change your fundamental identity (or say colors in Magic). Only certain tools can be available to you depending on the choices you make. All you can do is look at maximizing your strengths, and adjusting what is actually the deciding factor that is being fought over.&lt;/p&gt;

&lt;p&gt;In Framework design this means sometimes the solution isn't to solve a known problem, but redefine it to avoid being trapped in solutions that don't suit the toolset. I had to do a lot of work to re-imagine things with VDOM-less JSX and how hydration and SSR could work in a granular reactive library. These technologies had been built on diffing Solid doesn't have.&lt;/p&gt;

&lt;p&gt;Time and time again when I get stuck I don't concede. I go back to the drawing board and see if there is a way to re-imagine the problem.&lt;/p&gt;

&lt;p&gt;Now picture this from another perspective. There is a reason Solid has such an unorthodox combination of elements, between mixing reactivity + JSX, doing some compilation but leaving some to the runtime, adopting uni-directional flow and immutable patterns with mutable internals. These things together edge out existing solutions in all the places they are weakest. Where the common knowledge is that we're reaching the limits of that abstraction.&lt;/p&gt;

&lt;p&gt;I've had framework authors say things like, I'd love to do &lt;em&gt;blank&lt;/em&gt; but it's not worth focusing on incremental improvements. And they are right. But what if the actual base configuration of a framework was setup to live in that space.&lt;/p&gt;

&lt;p&gt;I'm not necessarily claiming Solid's tradeoffs are better. Obviously I have personal bias here and I think at least it provides a unique set of strengths. However, I'm finding that those decisions have bigger implications beyond the technical.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-metagaming"&gt;
  &lt;/a&gt;
  Social Metagaming
&lt;/h2&gt;

&lt;p&gt;Social is not something I had as much experience in. I had MySpace to promote my band, and when Facebook came around, I was like "Pass. I don't need to do this again." I eventually signed up 3 years later. I didn't join Twitter for over a decade after that.&lt;/p&gt;

&lt;p&gt;All I had were articles that I wrote and the output of my work. And you can probably see the flaw in my approach to framework design. That's not how to make friends and influence people.&lt;/p&gt;

&lt;p&gt;Now framework authors live and breathe these problems. They've thought about the tradeoffs. They've chose their place and continue to work to understand these tradeoffs and implications of their decisions. Great video by Evan You on the topic:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ANtSWq-zI0s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This video establishes axis to compare our projects on and clearly states how moving the dial from left to right has different repercussions. It doesn't get super deep here, but decisions on one slide directly impact which options are open to you on the next.&lt;/p&gt;

&lt;p&gt;Now this is the kind of simple message that influencers can carry and amplify out to the masses. It is always an oversimplification, but it serves the purpose. But what if what is in contention are the axis that we make these comparisons on? What if something bends the rules of the established model?&lt;/p&gt;

&lt;p&gt;People are tired. The term JavaScript fatigue has been thrown around a lot. There is this perspective that JavaScript ecosystem as it matures should stabilize and look more like Ruby or Java on the backend. There should be established tools and practices that we make incremental improvements on. &lt;/p&gt;

&lt;p&gt;The last thing any influencer wants is to push more uncertainty on their followers. People trust them because they bring clarity. Things fit into clear buckets. An idea that breaks down those walls has no place.&lt;/p&gt;

&lt;p&gt;I don't expect people to drop what they are doing to change frameworks, but I've repeatedly found myself against an incredible barrier in the mind space. No one wanted JSX to be analyzable. No one wants to hear a well written VDOM scales better than most other solutions. Hell, no one wants to hear that React might as well be considered reactive when you consider how similar all frontend frameworks are. Or so I thought...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reflecting-on-10-release"&gt;
  &lt;/a&gt;
  Reflecting on 1.0 release
&lt;/h2&gt;

&lt;p&gt;I'm used to people seeing &lt;a href="https://www.solidjs.com/"&gt;Solid&lt;/a&gt; and dismissing it. After all it is intentionally designed to be a sleeper. But what I saw was positivity from people around the React community. They saw the release, looked at it, and said "you know this is kind of incredible."&lt;/p&gt;

&lt;p&gt;Isn't Solid some sort of React killer/replacement? Why would the React community welcome it and where others wouldn't?&lt;/p&gt;

&lt;p&gt;Simple. It reaffirms their values. They don't see Solid as a competitor. Maybe just a re-imagining of their favorite framework. Despite the surface story playing up this React vs Solid narrative, there is no reality where they'd feel threatened by this.&lt;/p&gt;

&lt;p&gt;From a cynic's perspective, Solid's existence gives them a gift. Here is the foil in those framework discussions. Touching on topics that compare with other frameworks on compilation, templates, reactivity, they can simply point at Solid as proof that one doesn't need to go through such lengths to get all the benefits.&lt;/p&gt;

&lt;p&gt;One could even argue, if anything Solid re-enforces why you should be using React. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where to go from here
&lt;/h2&gt;

&lt;p&gt;Well not to disappoint anyone but React isn't going to take this path. Some critics have said, "React is an idea and the VDOM is just an implementation detail." Well, I have it on good authority it's an implementation detail they neither want to nor can escape at this point. This isn't a Vue/AlpineJS scenario where the larger player only has to flex.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_HxOLkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1206997998900850688/cTXTQiHm_normal.jpg" alt="Evan You profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Evan You
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @youyuxi
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      If you are interested in a 5.5kb subset of Vue optimized for progressive enhancement, read more here: &lt;a href="https://t.co/S3PErK5fga"&gt;npmjs.com/package/petite…&lt;/a&gt;&lt;br&gt;&lt;br&gt;The repo is kept private for now because I don't want to deal with issues for it just yet.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:53 AM - 02 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1410763549228609537" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1410763549228609537" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1410763549228609537" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;We've had a lot of new exposure from places where we've struggled to get even a nod. They might not all have positive things to say but the acknowledgement is a step in the right direction. That's the important part.&lt;/p&gt;

&lt;p&gt;In my experience, it is the fellow maintainers and contributors that have the greatest understanding and tolerance of different ideas. I'm still learning to work with influencers to not, "well, actually" them all the time. I have a body of work that may contradict what they've been telling people. And I am in a position where I have no choice really in the matter.&lt;/p&gt;

&lt;p&gt;Solid has grown beyond what I singularly can focus on. So I'm going to keep working on the things that I can and have trust in people who continue to share my passion for this great little framework so that we continue to grow. It's come to my attention there are international communities sprouting up and there is already a demand for localization of the documentation into different languages. That's so amazing.&lt;/p&gt;

&lt;p&gt;I've seen renewed interest in people taking their reactive state libraries and trying to skip the framework and see what they can do. That's where &lt;a href="https://ryansolid.medium.com/b-y-o-f-part-1-writing-a-js-framework-in-2018-b02a41026929"&gt;this all started&lt;/a&gt;. I've learned so much a long the way. Watching people take the same steps and making the same discoveries I did years ago is the greatest validation I could hope for.&lt;/p&gt;

&lt;p&gt;Honestly this all is so amazing. So thank you all for being with me on this journey.&lt;/p&gt;

</description>
      <category>solidjs</category>
      <category>devjournal</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Laravel: Easily Customize Email Verification URL</title>
      <author>Faruk Nasir</author>
      <pubDate>Tue, 06 Jul 2021 15:12:03 +0000</pubDate>
      <link>https://dev.to/frknasir/laravel-easily-customize-email-verification-url-58f9</link>
      <guid>https://dev.to/frknasir/laravel-easily-customize-email-verification-url-58f9</guid>
      <description>&lt;p&gt;This is not something you'd want to do if you're building an application the &lt;em&gt;traditional laravel way&lt;/em&gt;––that is, a monolithic app. I've had to do this recently while working on a project that has the backend and frontend existing in different code bases.&lt;/p&gt;

&lt;p&gt;Normally, when you setup a laravel project for new users to verify their email, a temporarily signed url is generated and sent to them. The url is generated based on the project's set &lt;code&gt;APP_URL&lt;/code&gt; in the &lt;code&gt;.env&lt;/code&gt; file and, subsequently, in the &lt;code&gt;/config/app.php&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The problem arises when you are building a SPA front end for a laravel backend api. In that case, you may have your frontend at, say, &lt;code&gt;http://cool-app.com&lt;/code&gt; and the backend at &lt;code&gt;http://api.cool-app.com&lt;/code&gt;. Because the user will not have a direct access to the api endpoints, it won't be ideal to generate a user-clickable link based on the api's base url. What you'd want is a url that is based on the frontend's base url. So, how can that be achieved? Easy.&lt;/p&gt;

&lt;p&gt;Create a custom method for generating the URL and pass it to the &lt;code&gt;createUrlUsing&lt;/code&gt; method of the &lt;code&gt;VerifyEmail&lt;/code&gt; notification class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**
* Set a callback that should be used when creating the email verification URL.
*
* @param  \Closure  $callback
* @return void
*/&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createUrlUsing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$createUrlCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$callback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only other step that we have to take is to call this function inside the &lt;code&gt;AuthServiceProvider&lt;/code&gt; passing the callback that returns our custom URL. The complete code is as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**
* Register any authentication / authorization services.
*
* @return void
*/&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mf"&gt;...&lt;/span&gt;

    &lt;span class="nc"&gt;VerifyEmail&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createUrlUsing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$notifiable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$frontendUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://cool-app.com/auth/email/verify'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nv"&gt;$verifyUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;temporarySignedRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;'verification.verify'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'auth.verification.expire'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$notifiable&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getKey&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="s1"&gt;'hash'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$notifiable&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getEmailForVerification&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$frontendUrl&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'?verify_url='&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$verifyUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the frontend, you can have a page with a logic that makes a &lt;code&gt;GET&lt;/code&gt; http request to the &lt;code&gt;verify_url&lt;/code&gt;. And, there you have it––a customized email verification url!&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>100daysofcode</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Using Next.js and Vercel to instantly load a data-heavy website</title>
      <author>Seif Ghezala 🇩🇿</author>
      <pubDate>Tue, 06 Jul 2021 15:03:43 +0000</pubDate>
      <link>https://dev.to/seif_ghezala/using-next-js-and-vercel-to-instantly-load-a-data-heavy-website-3gn5</link>
      <guid>https://dev.to/seif_ghezala/using-next-js-and-vercel-to-instantly-load-a-data-heavy-website-3gn5</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Article originally published on &lt;a href="https://tinloof.com/blog/using-next.js-and-vercel-to-instantly-load-a-data-heavy-website/"&gt;Tinloof&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A React application is JavaScript code that gets transformed into static HTML. This transformation is called "rendering".&lt;/p&gt;

&lt;p&gt;Whenever you build a React application, you're inevitably making a decision on when to render it and you usually have 3 choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client-side rendering: the application is rendered on the browser when the script loads.&lt;/li&gt;
&lt;li&gt;Server-side rendering: the application is rendered on the server at every page request.&lt;/li&gt;
&lt;li&gt;Static site generation: the application is rendered on the cloud provider (e.g. &lt;a href="https://aws.amazon.com/"&gt;AWS&lt;/a&gt;, &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;, &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;) at every deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A while ago, we faced this scenario when &lt;a href="https://tinloof.com/work/illuminem"&gt;building illuminem&lt;/a&gt;, an energy news aggregator that showcases thousands of posts daily.&lt;/p&gt;

&lt;p&gt;In this article, we'll talk about the performance problems we faced and how we ended up leveraging Next.js and Vercel to solve them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-architecture"&gt;
  &lt;/a&gt;
  The architecture
&lt;/h1&gt;

&lt;p&gt;illuminem's architecture consists of a service that crawls RSS feeds and web pages for energy-related posts, categorizes them, and pushes them to a &lt;a href="https://tinloof.com/blog/explain-like-im-five-headless-cms/"&gt;headless CMS&lt;/a&gt; called &lt;a href="https://www.sanity.io/"&gt;Sanity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the CMS, content managers create collections of these posts based on filters like "category".&lt;/p&gt;

&lt;p&gt;For example, they can create a collection called "Renewables" and use the "category" filter to only include posts that match the "renewables" category:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1mJfykpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624277465/blog/vercel-nextjs-data-heavy-product/illuminem%2520renewables%2520carousel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1mJfykpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624277465/blog/vercel-nextjs-data-heavy-product/illuminem%2520renewables%2520carousel.png" alt="Renewables category created from the CMS"&gt;&lt;/a&gt;&lt;br&gt;Renewables category created from the CMS
  &lt;/p&gt;

&lt;p&gt;The frontend is a Next.js application that fetches these collections and displays them as carousels.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UynswMCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624277641/blog/vercel-nextjs-data-heavy-product/illuminem_code_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UynswMCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624277641/blog/vercel-nextjs-data-heavy-product/illuminem_code_architecture.png" alt="illuminem's architecture"&gt;&lt;/a&gt;&lt;br&gt;illuminem's architecture
  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-serverside-rendering-on-all-pages"&gt;
  &lt;/a&gt;
  Using server-side rendering on all pages
&lt;/h1&gt;

&lt;p&gt;Building a product is not easy because requirements change throughout the process, so we played it safe to make sure we can be flexible enough to handle these changes and reach the finish line ahead of time.&lt;/p&gt;

&lt;p&gt;We were not sure how often we'd get new posts from the crawler, so we rendered most of our pages server-side.&lt;/p&gt;

&lt;p&gt;We used &lt;code&gt;getServerSideProps&lt;/code&gt; to fetch pages data from the CMS at every request.&lt;/p&gt;

&lt;p&gt;Here's a simplified example from the homepage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePageContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Called on the server after each request&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchHomeDataFromCMS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching homepage data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-problem-with-serverside-rendering"&gt;
  &lt;/a&gt;
  The problem with server-side rendering
&lt;/h1&gt;

&lt;p&gt;By the time we were done, the crawler had been running for 2 months and we started to feel the heavy page load.&lt;/p&gt;

&lt;p&gt;Even after limiting the number of posts per collection, each carousel could have hundreds of posts and most of our pages had dozens of carousels, so we're talking about thousands of posts per page.&lt;/p&gt;

&lt;p&gt;On average, it took 5 seconds to load a page on a very good WiFi connection.&lt;/p&gt;

&lt;p&gt;It was no surprise that our TTFB (Time to First Byte) was heavily impacted since every time a user visits a page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The server had to make a request with a huge query to the CMS.&lt;/li&gt;
&lt;li&gt;The CMS had to parse that query and form the response data.&lt;/li&gt;
&lt;li&gt;Once the server received a response from the CMS with thousands of posts, it had to render the React application before sending it to the browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#why-not-making-pages-static"&gt;
  &lt;/a&gt;
  Why not making pages static?
&lt;/h1&gt;

&lt;p&gt;Some of the pages were not making any requests in &lt;code&gt;getServerSideProps&lt;/code&gt; to get data before rendering. Next.js made these pages static by default.&lt;/p&gt;

&lt;p&gt;But what if a page needs to fetch data before building?&lt;/p&gt;

&lt;p&gt;Well, Next.js provides a &lt;code&gt;getStaticProps&lt;/code&gt; that allows to fetch the data and render the page at build time. This would create static pages that load instantly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePageContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Called at build time&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchHomeDataFromCMS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching homepage data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, most of the other pages could not be completely static. In fact, most of them have a "Most Trending" carousel to display the most viewed posts in the past 48 hours, so it had to be up-to-date with the actual views metrics.&lt;/p&gt;

&lt;p&gt;If we fetch the data at build time, the "Most Trending" carousel wouldn't be updated until the next build.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_o1Edr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624277757/blog/vercel-nextjs-data-heavy-product/most_trending_carousel_illuminem_sursys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_o1Edr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624277757/blog/vercel-nextjs-data-heavy-product/most_trending_carousel_illuminem_sursys.png" alt="Most Trending carousel"&gt;&lt;/a&gt;&lt;br&gt;Most Trending carousel
  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-not-making-pages-render-clientside"&gt;
  &lt;/a&gt;
  Why not making pages render client-side?
&lt;/h1&gt;

&lt;p&gt;At this point, we wondered: why not make these pages render client-side?&lt;/p&gt;

&lt;p&gt;The server wouldn't have to make any heavy work querying data and rendering the page.&lt;/p&gt;

&lt;p&gt;Instead, each carousel can make a request to fetch its collection of data and then render it.&lt;/p&gt;

&lt;p&gt;The main advantage would be that the TTFB would drastically decrease, making the page reach the browser pretty fast.&lt;/p&gt;

&lt;p&gt;However, knowing that each page has on average 12-15 carousels, that would result in 12-15 queries per page visit. Our CMS payment plan is based on the number of queries we make, so this would make us reach the limit in no time and would certainly blow up when illuminem picks up more users.&lt;/p&gt;

&lt;p&gt;On top of that, what we gain in performance in the server is lost in the client. The page would reach the browser fast, but it will be mostly a bunch of spinners. Each carousel would yet have to make a request to get its data and then render it.&lt;/p&gt;

&lt;p&gt;Because of these two reasons, client-side rendering was out of the table.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#generating-static-pages-dynamically"&gt;
  &lt;/a&gt;
  Generating static pages dynamically
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you prefer video format, &lt;a href="https://www.youtube.com/watch?v=IJkTpR7sSwI&amp;amp;t=119s&amp;amp;ab_channel=AdoKukic"&gt;here's&lt;/a&gt; a video explaining this section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next.js introduced &lt;a href="https://nextjs.org/blog/next-9-5#stable-incremental-static-regeneration"&gt;incremental static regeneration&lt;/a&gt; in the 9.5 version release, making it possible to generate static pages at run-time.&lt;/p&gt;

&lt;p&gt;We can now generate static pages at build time, which makes them load instantly.&lt;/p&gt;

&lt;p&gt;But, how can we keep the "Most Trending" carousel content up-to-date?&lt;/p&gt;

&lt;p&gt;Every time a user visits one of these pages, &lt;code&gt;getStaticProps&lt;/code&gt; is run by the Next.js server in the background.&lt;/p&gt;

&lt;p&gt;When the result of &lt;code&gt;getStaticProps&lt;/code&gt; is different from the previous run because the CMS data changed, the stale page is replaced by an updated one.&lt;/p&gt;

&lt;p&gt;The updated page is generated at run-time without affecting the user experience.&lt;/p&gt;

&lt;p&gt;The best part is that we only had to set the &lt;code&gt;revalidate&lt;/code&gt; property to &lt;code&gt;3600&lt;/code&gt; to revalidate the page every hour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePageContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Called at build and run-time&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchHomeDataFromCMS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="c1"&gt;// Revalidates the page every hour&lt;/span&gt;
      &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching homepage data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For pages that depend on a route parameter (e.g. &lt;code&gt;/[category]&lt;/code&gt;), we were able to generate a static page for each possible parameter by using the &lt;code&gt;getStaticPaths&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;categories&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../categories&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CategoryPageContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CategoryPage&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchCategoryDataFromCMS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching homepage data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchCategoriesFromCMS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#solving-edgecases-with-clientside-rendering"&gt;
  &lt;/a&gt;
  Solving edge-cases with client-side rendering
&lt;/h1&gt;

&lt;p&gt;Users can click on a post to see its details in a modal and share it on social media.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q65fQNcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624278010/blog/vercel-nextjs-data-heavy-product/Modal_social_media_sharing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q65fQNcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624278010/blog/vercel-nextjs-data-heavy-product/Modal_social_media_sharing.png" alt="Modal to share social media"&gt;&lt;/a&gt;&lt;br&gt;Modal to share social media
  &lt;/p&gt;

&lt;p&gt;Each post modal has a URL and we could add the &lt;code&gt;meta-data&lt;/code&gt; tags required to show a card preview snippet on the social media platforms.&lt;/p&gt;

&lt;p&gt;Unfortunately, when such URLs are shared, social media platforms could not get the right &lt;code&gt;meta-data&lt;/code&gt; tags since they are only added once the modal appears in the client.&lt;/p&gt;

&lt;p&gt;To fix that, we generated at run-time a static page for each post.&lt;/p&gt;

&lt;p&gt;Such pages only have the post modal rendered statically with the right &lt;code&gt;meta-data.&lt;/code&gt; The rest of the page is rendered client-side.&lt;/p&gt;

&lt;p&gt;We then used the URLs of these pages when sharing on social media.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PostPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;homeData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setHomeData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetchHomeDataFromCMS&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setHomeData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;homeData&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;homeData&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PostModal&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;postId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchPostDataFromCMS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching post data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Fallback to 404 page in case of error&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;notFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Nothing is generated at build time&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blocking&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We set &lt;code&gt;fallback&lt;/code&gt; to &lt;code&gt;blocking&lt;/code&gt; in &lt;code&gt;getStaticPaths&lt;/code&gt; to only return the page once it has finished loading. You can read more about the other &lt;code&gt;fallback&lt;/code&gt; possibilities Next.js offers &lt;a href="https://nextjs.org/docs/basic-features/data-fetching"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first request to such pages might be a bit slow, but all the following requests resolve immediately because their static version was already generated.&lt;/p&gt;

&lt;p&gt;Social media platforms display now a proper snippet of the shared post because its required &lt;code&gt;meta-data&lt;/code&gt; tags are available immediately in the HTML response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E4UqCQBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624278133/blog/vercel-nextjs-data-heavy-product/Twitter_card_validator.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E4UqCQBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624278133/blog/vercel-nextjs-data-heavy-product/Twitter_card_validator.png" alt="Twitter card validation"&gt;&lt;/a&gt;&lt;br&gt;Twitter card validation
  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#are-you-building-a-product-with-vercel-and-nextjs"&gt;
  &lt;/a&gt;
  Are you building a product with Vercel and Next.js?
&lt;/h1&gt;

&lt;p&gt;If you plan to build or need help building a product using Vercel and Next.js, &lt;a href="https://tinloof.com/contact"&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>vercel</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
