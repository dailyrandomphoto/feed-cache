<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners To Advance]</title>
      <author>John</author>
      <pubDate>Fri, 29 Oct 2021 16:44:50 +0000</pubDate>
      <link>https://dev.to/jnb/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-to-advance-54lh</link>
      <guid>https://dev.to/jnb/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-to-advance-54lh</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Being RESTful about your routes</title>
      <author>Stefan Vermaas</author>
      <pubDate>Fri, 29 Oct 2021 16:27:48 +0000</pubDate>
      <link>https://dev.to/knowndecimal/being-restful-about-your-routes-1gmf</link>
      <guid>https://dev.to/knowndecimal/being-restful-about-your-routes-1gmf</guid>
      <description>&lt;p&gt;Ruby on Rails advocates heavily for "&lt;a href="https://rubyonrails.org/doctrine/#convention-over-configuration"&gt;convention over configuration&lt;/a&gt;". One of these core conventions is the baked-in RESTful design for CRUD actions. You're introduced to this convention &lt;a href="https://guides.rubyonrails.org/getting_started.html#crudit-where-crudit-is-due"&gt;when you're just starting out with Ruby on Rails&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Almost all web applications involve CRUD (Create, Read, Update, and Delete) operations. You may even find that the majority of the work your application does is CRUD. Rails acknowledges this and provides many features to help simplify code doing CRUD.&lt;br&gt;
&lt;em&gt;&lt;a href="https://guides.rubyonrails.org/getting_started.html#crudit-where-crudit-is-due"&gt;The Rails docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is one big disadvantage about "convention over configuration"; it's not always obvious what principle is applied, why it's being applied, and how it should be applied when things get harder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-short-introduction-to-rest"&gt;
  &lt;/a&gt;
  A (short) introduction to REST
&lt;/h2&gt;

&lt;p&gt;The centerpiece of the REST principle is a resource. Interacting with a resource should be done with stateless HTTP requests using one of the four verbs: &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT/PATCH&lt;/code&gt;, or &lt;code&gt;DELETE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With "stateless HTTP requests," we mean that the server should be able to perform the operation with the given information from the client. This information can be as part of the URI, query-string parameters, body, or headers.&lt;/p&gt;

&lt;p&gt;In Rails, a less pure implementation of REST is often used because most Rails apps are both the client and the server.&lt;/p&gt;

&lt;p&gt;Uniform Resource Naming (URN) of resources is another part of REST. The name of the resources should reflect what it is: a singleton or a collection.&lt;/p&gt;

&lt;p&gt;A list of repositories on Github is a collection resource that can be identified with the &lt;code&gt;/repositories&lt;/code&gt; URN. An individual repository is a singleton resource and can be identified with the &lt;code&gt;/repositories/1234&lt;/code&gt; URN.&lt;/p&gt;

&lt;p&gt;Want to learn more about REST? See "&lt;a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm"&gt;Architectural Styles and the Design of Network-based Software Architectures&lt;/a&gt;", the dissertation of &lt;a href="https://en.wikipedia.org/wiki/Roy_Fielding"&gt;Roy Fielding&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rest-on-rails"&gt;
  &lt;/a&gt;
  REST on Rails
&lt;/h2&gt;

&lt;p&gt;In Rails, a resource is often translated to an ActiveRecord model. However, an ActiveRecord isn't the only resource in a Rails app. A resource can be anything according to the REST design principles.&lt;/p&gt;

&lt;p&gt;It can be an ActiveRecord model, it can be a Plain Old Ruby Object (PORO) model, it can be a service, an operation, and so on.&lt;/p&gt;

&lt;p&gt;As we mentioned before, Rails is opinionated. Resourceful routing is one of these conventions. In &lt;a href="https://guides.rubyonrails.org/routing.html#non-resourceful-routes"&gt;the Rails docs&lt;/a&gt;, the preference for using resourceful routes is briefly mentioned:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;While you should usually use resourceful routing...&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ruby on Rails provides a resourceful way to map the HTTP requests and URLs to controller actions. There are multiple ways to define this mapping. However, the main two ways are to define a route; resource and resources.&lt;/p&gt;

&lt;p&gt;Let's take a look at a simple example that uses resources.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:repositories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index show]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:collaborators&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the routes above, we're able to show a list of repositories and for each of these repositories, we can show a list of collaborators. Let's see how non-restful routes can make sense at first, but start to be a problem further down the road.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-nonrestful-route"&gt;
  &lt;/a&gt;
  The non-RESTful route
&lt;/h2&gt;

&lt;p&gt;Let's say we want to invite a new collaborator to a repository by extending our previous example with non-RESTful routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:repositories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index show]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:collaborators&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seems reasonable, doesn't it? We're inviting a new collaborator to a repository. However, now the new collaborator needs to be able to accept and decline the invite. So we add it as a custom action to the controller too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:repositories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index show]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:collaborators&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:accept_invite&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:decline_invite&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;
      &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="ss"&gt;:show_invite&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This approach still seems to be reasonable, however, our collaborators_controller.rb starts to grow. It's not only responsible anymore for listing the collaborators, but also for handling the invites.&lt;/p&gt;

&lt;p&gt;It's not only breaking the &lt;a href="https://thoughtbot.com/blog/back-to-basics-solid#single-responsibility-principle"&gt;Single Responsibility Principle&lt;/a&gt; (SRP) that goes hand-in-hand with a RESTful API design, but it will also make it harder to maintain the codebase as it grows. The &lt;code&gt;collaborators_controller.rb&lt;/code&gt; will become longer, harder to read, and thus harder to maintain.&lt;/p&gt;

&lt;p&gt;Let's see how the above example could be improved if one would follow a RESTful API design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-restful-route"&gt;
  &lt;/a&gt;
  The RESTful route
&lt;/h2&gt;

&lt;p&gt;If we're following &lt;a href="https://www.restapitutorial.com/lessons/whatisrest.html"&gt;the REST design principles&lt;/a&gt;, we will see that we're not actually inviting a new collaborator. We're creating an invitation for the collaborator which they can accept or decline.&lt;/p&gt;

&lt;p&gt;REST encourages us to think in terms of creating/updating/deleting resources rather than in actions. So instead of inviting a collaborator, we create an invitation for a collaborator. The same is true regarding accepting or declining an invitation.&lt;/p&gt;

&lt;p&gt;Wrapping your head around REST can take some time but it will make your code much cleaner and easier to maintain. Let's take a look at a more RESTful approach to inviting new collaborators.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:repositories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index show]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:collaborators&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[index]&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:invitations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[show create update destroy]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we enable collaborators to see an invitation for a repository before accepting/declining it. We also allow them to accept the invitation by updating it and we allow them to decline the invitation by deleting it.&lt;/p&gt;

&lt;p&gt;By expressing our intentions in a RESTful way, we're separating the responsibilities of our controllers and are keeping them small. This will not only make it easier to maintain and to read through them, but it will also make them easier to test.&lt;/p&gt;

&lt;p&gt;Following the REST design principles will help you to keep responsibilities of a controller to a minimum. Whenever a new feature request comes in, ask yourself "how can I make this RESTful?"&lt;/p&gt;

&lt;p&gt;Splitting up your controllers, following the REST design principles, and reducing the responsibilities of a single controller will help you to make your applications more maintainable.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>rest</category>
    </item>
    <item>
      <title>Data Engineering:Extract, Transform,and Load Using Talend Open Studio.</title>
      <author>WanjohiChristopher</author>
      <pubDate>Fri, 29 Oct 2021 16:17:51 +0000</pubDate>
      <link>https://dev.to/wanjohichristopher/data-engineeringextract-transformand-load-using-talend-open-studio-4h0n</link>
      <guid>https://dev.to/wanjohichristopher/data-engineeringextract-transformand-load-using-talend-open-studio-4h0n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction-to-etl-tools"&gt;
  &lt;/a&gt;
  Introduction To ETL Tools.
&lt;/h2&gt;

&lt;p&gt;Hi there, welcome back to the data engineering series. I know most of you ask how do we do these so-called ETL Or ELT processes as a Data Engineer?&lt;/p&gt;

&lt;p&gt;I've got you now, don't worry.&lt;/p&gt;

&lt;p&gt;Today we will be going through the process of Extracting, Transforming, and Loading Data step by step from SQL server to Postgres. There are several ETL tools including, Talend, Pentaho, Informatica, Stitch, Xplenty, Alooma, Panapoly, Aws Glue, etc. I will introduce one ETL tool called Talend.&lt;br&gt;
Introduction toTalend OpenStudio&lt;/p&gt;

&lt;p&gt;It is important to use low code ETL tools. In this article, we will show how to install and get started with Talend. We will use Talend later to Migrate Data from MSSQL Server to Postgres.&lt;br&gt;
To get started we download Talend Open Studio for Linux &lt;a href="https://www.talend.com/lp/open-studio-for-data-integration/"&gt;here&lt;/a&gt;. Note that you can also download for any Operating System in the same link.&lt;br&gt;
After downloading you will receive multiple files, run the Linux file which has a .sh file. This is how it looks!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SSQLGr_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8qus9ybm2li20n2dvfi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SSQLGr_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8qus9ybm2li20n2dvfi.png" alt="Image description" width="144" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Launch Talend now. This is how it should open:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ARhHAa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lemt5sb52e9lsbwtsgg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ARhHAa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lemt5sb52e9lsbwtsgg9.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's now time to get our hands dirty.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#migrating-data-from-sql-server-to-postgres-using-talend-etl"&gt;
  &lt;/a&gt;
  Migrating Data from SQL Server to Postgres Using Talend ETL
&lt;/h2&gt;

&lt;p&gt;At the Talend Studio, we create a job design(on your left-hand side)then create tBDInput for SQL Server and tBDOutput for Postgres. These inputs and outputs DBs will be used during connections and migration. At this point, you can create a connection between the two databases.&lt;br&gt;
Right Click on tBDInput Trigger the On subjob OK and drag it to tBDOutput to make the connection complete.&lt;br&gt;
Ensure to enter correctly the database credentials i.e username, password and database name,table name , which hosts the table and database to migrate.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbi5Pt3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsycwev67b0sbwskbvvy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbi5Pt3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsycwev67b0sbwskbvvy.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c7XLtMPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q34qdzqyv5xr2vu11cyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c7XLtMPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q34qdzqyv5xr2vu11cyy.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
This shows the SQL server credentials to enter.After all the configuring and connecting both databases, it's time now to start moving our data from SQL server to Postgres. We write an SQL query to migrate the data. To start with we start with SQL server by using the following command which gets data from the users table:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AcqWPRS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsick615tmlpzdbtn1mn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AcqWPRS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsick615tmlpzdbtn1mn.png" alt="Image description" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is used for migration and logging using the get_date function.&lt;br&gt;
Now we now have to write an SQL query to insert data into Postgres.In the UI we create a table and drop it if it exists then perform the action of insertion to custdatademo table as shown;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YNgKpxmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s66h56kpiibsc02kr5h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YNgKpxmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s66h56kpiibsc02kr5h.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
For Postgres configuration on Talend.It's now time for us to run the job and migrate our data from MSSQL to Postgres.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S9HvPlYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3npjnw53fqd0to1f43qb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S9HvPlYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3npjnw53fqd0to1f43qb.png" alt="Image description" width="817" height="441"&gt;&lt;/a&gt;&lt;br&gt;
Our job runs successfully!.&lt;br&gt;
Now it's time where we have been waiting for so long and it's time to see our output in Postgres. Let's dive in fast and confirm our hard work.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zTI0FgF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmyzdoamuf57uox9avq3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTI0FgF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmyzdoamuf57uox9avq3.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
The data has been MIgrated Successfully using Talend as you can see in PostgresAs you can see we have migrated the data successfully.Thank you for being with us on this long journey.&lt;br&gt;
This is a complete Extract, Transform, and Load(ETL) using Talend.&lt;br&gt;
Happy learning guys!&lt;br&gt;
Article Written by :&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/wanjohichristopher/"&gt;WanjohiChristopher&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/nicholas-musau-69657186/"&gt;NicholasMusau&lt;/a&gt;&lt;br&gt;
Respects:&lt;a href="https://www.linkedin.com/in/omwenganeville/"&gt;Neville Omwenga&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dataengineer</category>
      <category>etl</category>
      <category>python</category>
      <category>talend</category>
    </item>
    <item>
      <title>AWS - NLP newsletter     October 2021</title>
      <author>Mia Chang</author>
      <pubDate>Fri, 29 Oct 2021 16:11:23 +0000</pubDate>
      <link>https://dev.to/aws/aws-nlp-newsletter-2021-oct-2e3o</link>
      <guid>https://dev.to/aws/aws-nlp-newsletter-2021-oct-2e3o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MnBZwfWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzc11lvq3a2nvdrqrkws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnBZwfWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzc11lvq3a2nvdrqrkws.png" alt="Cover Photo for AWS NLP Newsletter Ep03.2021.Oct." width="880" height="494"&gt;&lt;/a&gt;&lt;br&gt;
Hello world. This is the monthly Natural Language Processing(NLP) newsletter covering everything related to NLP at AWS. This is our third newsletter on Dev.to. If you missed our earlier episode, here are &lt;a href="https://dev.to/aws/aws-nlp-newsletter-2021-aug-i40"&gt;Ep01&lt;/a&gt; and &lt;a href="https://dev.to/aws/aws-nlp-newsletter-2021-sep-34o2"&gt;Ep02&lt;/a&gt;. Feel free to leave comments, share it on your social network to celebrate this new launch with us!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#service-updates-about-nlp-on-aws"&gt;
  &lt;/a&gt;
  Service updates about NLP on AWS
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/10/amazon-lex-progress-updates/"&gt;Amazon Lex launches progress updates for fulfillment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now configure your &lt;a href="https://aws.amazon.com/lex/"&gt;Amazon Lex&lt;/a&gt; bots to provide periodic updates to users while their requests are processed. Customer support conversations often require execution of business logic that can take some time to complete. For example, updating an itinerary on an airline reservation system may take a couple of minutes during peak hours. Typically, support agents put the call on hold and provide periodic updates (e.g., “We are still processing your request; thank you for your patience”) until the request is fulfilled. Now, you can easily configure your bot to automatically provide such periodic updates in a conversation. With progress updates capability, bot builders can quickly enhance the ability of virtual contact center agents and smart assistants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/10/aws-solution-aws-qnabot-chatbot-built-amazon-lex/"&gt;New AWS Solution: AWS QnABot, a self-service conversational chatbot built on Amazon Lex&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://aws.amazon.com/solutions/implementations/aws-qnabot/"&gt;AWS QnABot&lt;/a&gt; has now been released as an official AWS Solution Implementation. The AWS QnABot is an open source, multichannel, multi-language conversational chatbot built on &lt;a href="https://aws.amazon.com/lex/"&gt;Amazon Lex&lt;/a&gt;, that responds to your customer’s questions, answers, and feedback. Without programming, the AWS QnABot solution allows customers to quickly deploy self-service conversational AI on multiple channels including their contact centers, websites, social media channels, SMS text messaging, or Amazon Alexa.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/10/amazon-transcribe-custom-language-models-streaming-transcription/"&gt;Amazon Transcribe now supports custom language models for streaming transcription&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/transcribe/"&gt;Amazon Transcribe&lt;/a&gt; will now support custom language models (CLM) for streaming transcription. Amazon Transcribe is an automatic speech recognition (ASR) service that makes it easy for you to add speech-to-text capabilities to your applications. CLM allows you to leverage pre-existing data to build a custom speech engine tailored for your transcription use case. No prior machine learning experience required. &lt;a href="https://aws.amazon.com/es/blogs/machine-learning/building-custom-language-models-to-supercharge-speech-to-text-performance-for-amazon-transcribe/"&gt;AWS ML Blog&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html"&gt;Transcribe Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DO1v74uC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/09/28/ML-5741-image012.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DO1v74uC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/09/28/ML-5741-image012.png" alt="Text analysis charts" width="880" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/es/blogs/machine-learning/translate-and-analyze-text-using-sql-functions-with-amazon-redshift-amazon-translate-and-amazon-comprehend/"&gt;Translate and analyze text using SQL functions with Amazon Redshift, Amazon Translate, and Amazon Comprehend&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You already know how to use Amazon Redshift to transform data using simple SQL commands and built-in functions. Now you can also use Amazon Redshift to translate, analyze, and redact text fields, thanks to &lt;a href="https://aws.amazon.com/translate/"&gt;Amazon Translate&lt;/a&gt;, &lt;a href="https://aws.amazon.com/comprehend/"&gt;Amazon Comprehend&lt;/a&gt;, and the power of Amazon Redshift supported &lt;a href="http://aws.amazon.com/lambda"&gt;AWS Lambda&lt;/a&gt; user-defined functions (UDFs).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/amazon-comprehend-adds-trusted-advisor-checks/?nc1=h_ls"&gt;Amazon Comprehend adds two Trusted Advisor checks&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/comprehend/"&gt;Amazon Comprehend&lt;/a&gt; now supports two new AWS Trusted Advisor checks to help customers optimize the cost and security of Amazon Comprehend endpoints. Today, Amazon Comprehend checks are available in the AWS Business Support and &lt;a href="https://aws.amazon.com/premiumsupport/plans/"&gt;AWS Enterprise Support plans&lt;/a&gt;. The new checks are: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Underutilized endpoints: Checks the throughput configuration of your endpoints and generates a warning when they are not actively used for any real-time inference requests; &lt;/li&gt;
&lt;li&gt;Endpoint permissions: Checks the KMS key permissions for an endpoint whose underlying model was encrypted using customer managed keys. If the customer managed key has been disabled or the key policy has been changed to alter the granted permissions for Amazon Comprehend for any reason, the endpoint availability might be impacted.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/10/amazon-textract-tiff-asynchronous-receipts-invoices/"&gt;Amazon Textract launches TIFF support and adds asynchronous support for receipts and invoices processing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/textract/"&gt;Amazon Textract&lt;/a&gt; now supports Tag Image File Format (TIFF) documents in addition to the PNG, JPEG, and PDF formats. Customers can now process TIFF documents either synchronously or asynchronously using any of the following Amazon Textract APIs - &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_DetectDocumentText.html"&gt;DetectDocumentText&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentAnalysis.html"&gt;StartDocumentAnalysis&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentTextDetection.html"&gt;StartDocumentTextDetection&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_AnalyzeDocument.html"&gt;AnalyzeDocument&lt;/a&gt;, and &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_AnalyzeExpense.html"&gt;AnalyzeExpense&lt;/a&gt;. Amazon Textract is a machine learning service that automatically extracts printed and handwritten text and data from any document.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nlp-on-sagemaker"&gt;
  &lt;/a&gt;
  NLP on SageMaker
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/amazon-sagemaker-jumpstart-multimodal-financial-analysis-tools/"&gt;Amazon SageMaker JumpStart introduces new multimodal (long-form text, tabular) financial analysis tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this new release, you can use the new set of multimodal financial analysis tools within Amazon SageMaker JumpStart. With these new tools, you can enhance your tabular ML workflows with new insights from financial text documents and potentially help save up to weeks of development time. Using the new SageMaker JumpStart Industry SDK, you can easily retrieve common public financial documents, including SEC filings, and further process financial text documents with features such as summarization and scoring for sentiment, litigiousness, risk, readability etc. In addition, you can access pre-trained language models trained on financial text for transfer learning, and use example notebooks for data retrieval, text feature engineering, multimodal classification and regression models. &lt;a href="https://aws.amazon.com/blogs/machine-learning/use-sec-text-for-ratings-classification-using-multimodal-ml-in-amazon-sagemaker-jumpstart/"&gt;AWS ML Blog #1&lt;/a&gt;, &lt;a href="https://aws.amazon.com/blogs/machine-learning/use-pre-trained-financial-language-models-for-transfer-learning-in-amazon-sagemaker-jumpstart/"&gt;AWS ML Blog #2&lt;/a&gt;, &lt;a href="https://aws.amazon.com/es/blogs/machine-learning/create-a-dashboard-with-sec-text-for-financial-nlp-in-amazon-sagemaker-jumpstart/"&gt;AWS ML Blog #3&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-jumpstart.html"&gt;JumpStart Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/es/blogs/machine-learning/organize-product-data-to-your-taxonomy-with-amazon-sagemaker/"&gt;Organize product data to your taxonomy with Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When companies deal with data that comes from various sources or the collection of this data has changed over time, the data often becomes difficult to organize. Perhaps you have product category names that are similar but don’t match, and on your website you want to surface these products as a group. Therefore, you need to go through the tedious work of manually creating a map from source to target to be able to transform the data into your own taxonomy. In these cases, we’re not talking about a few hundred rows of data, but more often many hundreds of thousands of rows, with new data flowing in regularly. In this post, we discuss how to organize product data to your classification needs with Amazon SageMaker.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/es/blogs/machine-learning/bring-structure-to-diverse-documents-with-amazon-textract-and-transformer-based-models-on-amazon-sagemaker/"&gt;Bring structure to diverse documents with Amazon Textract and transformer-based models on Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From application forms, to identity documents, recent utility bills, and bank statements, many business processes today still rely on exchanging and analyzing human-readable documents—particularly in industries like financial services and law. In this post, we show how you can use Amazon SageMaker, an end-to-end platform for machine learning (ML), to automate especially challenging document analysis tasks with advanced ML models.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-blog-posts-papers-and-more"&gt;
  &lt;/a&gt;
  AWS Blog posts, papers, and more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/create-a-dashboard-with-sec-text-for-financial-nlp-in-amazon-sagemaker-jumpstart/"&gt;Create a dashboard with SEC text for financial NLP in Amazon SageMaker JumpStart&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, the author showed how to curate a dataset of Securities Exchange Commission, SEC filings, use NLP for feature engineering on the dataset, and present the features in a dashboard. &lt;/p&gt;

&lt;p&gt;To get started, you can refer to the example notebook in JumpStart titled Dashboarding SEC Filings. You can also refer to the example notebook in JumpStart titled Create a TabText Dataset of SEC Filings in a Single API Call, which contains more details of SEC forms retrieval, summarization, and NLP scoring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.amazon.science/publications/sample-selection-guided-by-domain-and-task-for-cross-domain-targeted-sentiment-analysis"&gt;Amazon Science Publication: Sample selection guided by domain and task for cross-domain targeted sentiment analysis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building supervised targeted sentiment analysis models for a new target domain requires substantial annotation effort since most datasets for this task are domain-specific. Domain adaptation for this task has two dimensions: the nature of targets and the opinion words used to describe sentiment towards the target. We present a data sampling strategy informed by domain differences across these two dimensions with the goal of selecting a small number of examples, thereby minimizing annotation effort. This obtains performance in the 86-100% range compared to the full supervised model using only ∼4-15% of the full training data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XIBFtzVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xija6jn3qg15fmkg04w1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIBFtzVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xija6jn3qg15fmkg04w1.png" alt='YouTube demo video "Amazon Transcribe video snacks: Using vocabulary filters"' width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=TcpSqbr0FnI"&gt;YouTube demo video "Amazon Transcribe video snacks: Using vocabulary filters"&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Transcribe is a automatic speech recognition service that can be used when you have audio and video that contains speech you want to convert to text. You can mask, remove, or tag words you don't want in your transcription results with vocabulary filtering. For example, you can use vocabulary filtering to prevent the display of offensive or profane terms. In the demo, we will customize Transcribe to mask swear words that we recently encountered in a famous play written by William Shakespeare.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/publicsector/4-ways-conversational-ai-amazon-lex-help-public-sector-transform-customer-engagement/"&gt;4 ways conversational AI and Amazon Lex help the public sector transform customer engagement&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Conversational artificial intelligence (AI) and chatbots can be used to transform the customer experience, enhance engagement, improve services, and help scale more simply. Learn how conversational AI and chatbots help public sector organizations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#community-content"&gt;
  &lt;/a&gt;
  Community content
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIuoOxY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5n6hwwg4jyncwjap0o4y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIuoOxY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5n6hwwg4jyncwjap0o4y.png" alt="SageMaker and Hugging Face" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=pYqjCzoyWyo"&gt;Workshop: Getting started with Amazon Sagemaker Train a Hugging Face Transformers and deploy it&lt;/a&gt;&lt;br&gt;
Learn how to use Amazon SageMaker to train a Hugging Face Transformer model and deploy it afterward. Prepare and upload a test dataset to S3, prepare a fine-tuning script to be used with Amazon SageMaker Training jobs, Launch a training job and store the trained model into S3, and Deploy the model after successful training. GitHub Repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;October “&lt;a href="https://huggingface.co/blog"&gt;HuggingFace Blog&lt;/a&gt;” entries:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Showcase Your Projects in Spaces using Gradio &lt;/li&gt;
&lt;li&gt;Hosting your Models and Datasets on Hugging Face Spaces using Streamlit&lt;/li&gt;
&lt;li&gt;Fine-tuning CLIP with Remote Sensing (Satellite) images and captions&lt;/li&gt;
&lt;li&gt;The Age of Machine Learning As Code Has Arrived&lt;/li&gt;
&lt;li&gt;Train a Sentence Embedding Model with 1B Training Pairs&lt;/li&gt;
&lt;li&gt;Large Language Models: A New Moore’s Law?&lt;/li&gt;
&lt;li&gt;Course Launch Community Event &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#upcoming-nlp-events"&gt;
  &lt;/a&gt;
  Upcoming NLP events
&lt;/h2&gt;

&lt;p&gt;Both community events and AWS events&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://app.livestorm.co/hugging-face/going-production-deploying-scaling-and-monitoring-hugging-face-transformer-models"&gt;Going Production: Deploying, Scaling &amp;amp; Monitoring Hugging Face Transformer models | Hugging Face&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tuesday, November 2nd, 2021 &lt;/li&gt;
&lt;li&gt;5:00 PM to 6:00 PM CEST&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://www.meetup.com/Artificial-Intelligence-Suisse/events/281384880"&gt;Pie &amp;amp; AI Suisse - Trustworthiness of AI models: Improving NLP with Causality | Meetup&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wednesday, November 3, 2021. &lt;/li&gt;
&lt;li&gt;6:30 PM to 8:00 PM CEST&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://codecamp.ro/e-conferences/ndr-the-ai-conf/"&gt;NLP inference optimization on Amazon SageMaker in NDR conference&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tuesday, November 09, 2021&lt;/li&gt;
&lt;li&gt;11:40 AM to 12:20 PM CEST&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://www.meetup.com/Dublin-Data-Science/events/281499104"&gt;Analysing Politeness: Can NLP Tools Help? | Meetup&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wednesday, November 17, 2021&lt;/li&gt;
&lt;li&gt;8:00 PM to 9:30 PM CEST&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stay-in-touch-with-nlp-on-aws"&gt;
  &lt;/a&gt;
  Stay in touch with NLP on AWS
&lt;/h2&gt;

&lt;p&gt;Our contact: &lt;a href="//mailto:aws-nlp@amazon.com"&gt;aws-nlp@amazon.com&lt;/a&gt; &lt;br&gt;
Email us about (1) your awesome project about NLP on AWS, (2) let us know which post in the newsletter helped your NLP journey, (3) other things that you want us to post on the newsletter. Talk to you soon.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>nlp</category>
      <category>machinelearning</category>
      <category>ai</category>
    </item>
    <item>
      <title>Hotwire with StimulusReflex</title>
      <author>julianrubisch</author>
      <pubDate>Fri, 29 Oct 2021 16:09:36 +0000</pubDate>
      <link>https://dev.to/julianrubisch/hotwire-with-stimulusreflex-2bh5</link>
      <guid>https://dev.to/julianrubisch/hotwire-with-stimulusreflex-2bh5</guid>
      <description>&lt;p&gt;Here's a deck of slides I made for a talk I gave at the viennarb meetup. Enjoy!&lt;/p&gt;


&lt;div class="ltag_speakerdeck"&gt;
  &lt;iframe height="463" id="talk_frame_7264e1d6eaf04067af1fdb4afca5cad1" src="//speakerdeck.com/player/7264e1d6eaf04067af1fdb4afca5cad1" width="710"&gt;&lt;/iframe&gt;
&lt;/div&gt;


</description>
      <category>rails</category>
      <category>hotwire</category>
      <category>stimulusreflex</category>
    </item>
    <item>
      <title>Alternative Constructors in Python</title>
      <author>P0intMaN</author>
      <pubDate>Fri, 29 Oct 2021 15:27:43 +0000</pubDate>
      <link>https://dev.to/p0intman/alternative-constructors-in-python-58gb</link>
      <guid>https://dev.to/p0intman/alternative-constructors-in-python-58gb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#article-agenda"&gt;
  &lt;/a&gt;
  Article Agenda
&lt;/h2&gt;

&lt;p&gt;This post is dedicated towards understanding how we can create &lt;strong&gt;alternative constructors&lt;/strong&gt; in Python. Also, we would be taking a look at a real developmental scenario where I felt comfortable using it. To cut this short, we would be covering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#constructors"&gt;Constructors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#alternative-constructors"&gt;Alternative Constructors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#a-real-application-example"&gt;A Real Application Example&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Python OOPs has rocked the world with its &lt;strong&gt;simple yet stunning&lt;/strong&gt; flow of programming. Almost all the programs and software written in Python follow the OOPs paradigm. The OOP in Python is so modernized and enhanced that huge amount of developers are making a shift towards this amazing Programming language.&lt;/p&gt;

&lt;p&gt;In case you are wondering what an OOP is, I already have a &lt;strong&gt;&lt;a href="https://dev.to/p0intman/a-primer-on-object-oriented-programming-with-python-231g"&gt;Python OOP&lt;/a&gt;&lt;/strong&gt; post on this, which gives you a brief overview about it. You may want to give it a thorough read.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#constructors"&gt;
  &lt;/a&gt;
  Constructors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ex78j93F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/foohjioacc2sj090jvw2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ex78j93F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/foohjioacc2sj090jvw2.png" alt="constructors" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Constructors by definition, is a &lt;strong&gt;subroutine designed to create an object in a particular class&lt;/strong&gt;. In layman's terms, a &lt;em&gt;method&lt;/em&gt;, which gets &lt;strong&gt;automatically called at the time of object creation and assists it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Constructors are like ordinary methods defined inside the class. The only difference being, we need &lt;strong&gt;not&lt;/strong&gt; call it explicitly. Programming languages automatically calls it while creating the object of the class.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;C++&lt;/strong&gt;, constructors have the &lt;strong&gt;same name&lt;/strong&gt; as the class name. For example (I know this is a Python tutorial, but I really felt the urge to show you the difference. So, here you go):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;          &lt;span class="c1"&gt;// Class name&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Constructor. Notice how its name is same as class name&lt;/span&gt;
    &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// I will be automatically executed during instantiation&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// instantiation.&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Python, this is &lt;strong&gt;not&lt;/strong&gt; the case. However, there is a &lt;em&gt;huge misconception&lt;/em&gt; out there:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-init-endraw-vs-raw-new-endraw-which-one-is-the-real-constructor"&gt;
  &lt;/a&gt;
  The &lt;code&gt;__init__()&lt;/code&gt; vs &lt;code&gt;__new__()&lt;/code&gt;. Which one is the real constructor?
&lt;/h3&gt;

&lt;p&gt;As opposed to a popular yet &lt;strong&gt;wrong&lt;/strong&gt; belief where &lt;strong&gt;&lt;code&gt;__init__()&lt;/code&gt; method is considered to be constructor, its actually the &lt;code&gt;__new__()&lt;/code&gt; method which is the constructor of the class&lt;/strong&gt;. To put it more clearly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/strong&gt; : This method is called automatically to &lt;strong&gt;control&lt;/strong&gt; the object creation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/strong&gt; : This method is also called automatically during object creation, but this is more of an &lt;strong&gt;initializer method&lt;/strong&gt; which initializes the object attributes. That's why we used it in our OOPs concept (an earlier post), to initialize our object attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moreover, if both &lt;strong&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/strong&gt; methods exist in the same class, then &lt;strong&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/strong&gt; is called first and then Python interpreter decides whether to call &lt;strong&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/strong&gt; or not. &lt;/p&gt;

&lt;p&gt;So, from the OOP standpoint, and from the above observations, it can be safely concluded that &lt;strong&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/strong&gt; is the &lt;strong&gt;real constructor&lt;/strong&gt;. But several Devs just want to stay out of this pandemonium. Therefore, instead of going after this &lt;strong&gt;&lt;em&gt;"init vs new thing"&lt;/em&gt;&lt;/strong&gt;, they adopted another way to create constructors, enter the &lt;em&gt;Alternative Constructors&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-constructors"&gt;
  &lt;/a&gt;
  Alternative Constructors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oByu8e5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4oebat8xj8gbtvoimvd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oByu8e5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4oebat8xj8gbtvoimvd.png" alt="ac" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Alternative constructors are actually &lt;strong&gt;class methods&lt;/strong&gt; which serves the purpose of object creation. We hack the &lt;strong&gt;class methods&lt;/strong&gt; and command them to control the object creation. This is pretty similar to a constructor's (&lt;code&gt;__new__()&lt;/code&gt;'s) working. &lt;/p&gt;

&lt;p&gt;There is a convention for naming methods to be used as alternative constructors. All such methods should start with &lt;strong&gt;&lt;code&gt;from_&lt;/code&gt;&lt;/strong&gt;. For example, if I have a method say, &lt;strong&gt;&lt;code&gt;getDetails()&lt;/code&gt;&lt;/strong&gt; and if I were to make it an alternative constructor, then I would have to rename it as &lt;strong&gt;&lt;code&gt;from_getDetails()&lt;/code&gt;&lt;/strong&gt;. Although this is not necessary, but it is considered to be a good practice.&lt;/p&gt;

&lt;p&gt;The following snippet shows the basic syntax of defining alternative constructors (AC):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_alternativeConstructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;      &lt;span class="c1"&gt;# Alternative Constructor
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                           &lt;span class="c1"&gt;# returns object
&lt;/span&gt;
&lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_alternativeConstructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# calling AC
&lt;/span&gt;
&lt;span class="c1"&gt;# an object is crafted successfully due to the execution of AC
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-real-application-example"&gt;
  &lt;/a&gt;
  A Real Application Example
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zwn9F0HM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92dh8csug5o5sgg96e31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwn9F0HM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92dh8csug5o5sgg96e31.png" alt="EXAMPLE" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
While I was developing a backend, I had a long list of strings. I had to come up with a way to convert these &lt;strong&gt;strings to objects&lt;/strong&gt;. Luckily, I had AC by my side and the task went on smoothly. In real world, you would get raw data like these. You would have to circumvent these obstacles and find a solution. &lt;/p&gt;

&lt;p&gt;The following snippet shows a demonstration of how I converted a long list of strings (but here, for the sake of simplicity, lets take a single string) and then converted it into objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Professor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_getDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;      &lt;span class="c1"&gt;# Alternative Constructor
&lt;/span&gt;        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# split string and assign to variables
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="c1"&gt;# returns object
&lt;/span&gt;
&lt;span class="n"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Jack Robins,2233394,45"&lt;/span&gt;

&lt;span class="n"&gt;prof&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Professor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_getDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prof&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;prof&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;prof&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;# prints --&amp;gt; "Jack Robins" 2233394 45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The string is now converted to an object and I can easily access it using its attributes. So, this was all about alternative constructors. One of the most interesting ways to bypass the basic working system of OOPs and also, exploiting the most out of it. After all, we are programmers, its in our DNA to exploit stuff and get things working for us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#would-you-like-to-support-me"&gt;
  &lt;/a&gt;
  Would You Like to Support Me?
&lt;/h2&gt;

&lt;p&gt;If you want to support me and my contents, then go ahead and consider doing it. I would highly appreciate that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UC1QZPervOHLiC4xpVnzbDFg"&gt;YouTube Channel&lt;/a&gt;: Home to all sorts of &lt;strong&gt;peculiar&lt;/strong&gt; tutos.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.github.com/P0intMaN"&gt;GitHub&lt;/a&gt;: Looking forward to your PR 😉&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Which came first work experience or the first tech job?</title>
      <author>Eliot Sanford</author>
      <pubDate>Fri, 29 Oct 2021 15:27:24 +0000</pubDate>
      <link>https://dev.to/techieeliot/which-came-first-work-experience-or-the-first-tech-job-946</link>
      <guid>https://dev.to/techieeliot/which-came-first-work-experience-or-the-first-tech-job-946</guid>
      <description>&lt;p&gt;How can anyone escape the tech chicken and the egg conundrum?&lt;/p&gt;

&lt;p&gt;Like so many people these days, one of the hardest things is to get that first tech job with no experience. Whether you're a recent college grad, bootcamp grad, or a self-taught code newbie, most of these people are having this issue finding that first job.&lt;/p&gt;

&lt;p&gt;It's the chicken and the egg problem. Which came first? It's the first job in tech and the lack of work experience problem. Which came first?&lt;/p&gt;

&lt;p&gt;How does anyone get a job without experience? They have no experience and no one is letting them get experience. How can anyone break in then?&lt;/p&gt;

&lt;p&gt;There are a few key ways to stop the chicken and the egg problems and the hang-ups that employers can have when hiring junior developers.&lt;/p&gt;

&lt;p&gt;One important way to gain some of traction with LinkedIn and your resume is to volunteer to get relevant tech experience. &lt;/p&gt;

&lt;p&gt;Review job descriptions for entry-level roles that you're applying for, then find ways to volunteer to gain primary skills related to those job descriptions. &lt;/p&gt;

&lt;p&gt;Make sure that when you volunteer that you put your best value into making it a success for the people that you've volunteered. Show up early. Stay late. Do things that no one wants to do, and make sure that you communicate through the issue. Find ways to reduce the burden on the leader. If no one is stepping up to lead, then step up and lead. Seek ways to fill into the gaps that employers want to see from you.&lt;/p&gt;

&lt;p&gt;If you're volunteering is 20+ hours per week, then it's worthy of "internship" work experience. If it's education, then it needs to be in the education section only. Aim to have tech volunteering experiences that can be put into work experience because it was worthy of internship work experience.&lt;/p&gt;

&lt;p&gt;Along the way, plug all your big win volunteer experiences into your resume and the featured section on LinkedIn. Ideally, you've got some front facing production code that you can be proud of and can give you conversation starters for interviews.&lt;/p&gt;

&lt;p&gt;Another important way to show your value is to learn how to tell your story well in written form and in conversation. Collect all your relevant experiences and make them shine.&lt;/p&gt;

&lt;p&gt;Giving anyone reviewing your resume and LinkedIn profile a reason to think, "this person is a noob" (even if it is true) is the quickest way to be dismissed.&lt;/p&gt;

&lt;p&gt;Give them reasons to believe that you're a professional with some valuable entry-level experience already.&lt;/p&gt;

&lt;p&gt;See ways to again volunteer and remove this stigma.&lt;/p&gt;

&lt;p&gt;Another great way to improve your chances of getting hired is through recommendations. Once you've finished that experience, seek feedback whether you brought them value. If they say "Thank you. You were amazing.", then don't be shy to ask for a recommendation and ask whether they know someone hiring. &lt;/p&gt;

&lt;p&gt;This step can remove doubts from employers that you're a noob that will need lots of hand-holding because others are saying that you're not a noob but a profession.&lt;/p&gt;

&lt;p&gt;Look at what they say about your skills and jot those down for yourself before you forget what you did. Add it to your LinkedIn and resume. Put those highlights into bullets.&lt;/p&gt;

&lt;p&gt;The last thing is being active in your network to build your reputation as a person worthy of a referral.&lt;/p&gt;

&lt;p&gt;Your network is filled with people that want to help you out. Get to know them. Find ways to help them out. Initially be genuine and seek nothing in return. Use the steps I've highlighted above and aim to be a helpful volunteer on a short-term basis.&lt;/p&gt;

&lt;p&gt;Sometimes those people don't have opportunities to share in the now, but six months later something comes up where they know of a junior developer role that would be perfect for someone looking to break in. Who might be top of their mind at that moment? Aim to make that person you.&lt;/p&gt;

&lt;p&gt;Build those experience to the next level, repeat. It won't happen overnight but start somewhere, then over time you'll build some experience and have better stories to tell in conversations with others in your network and in interviews.&lt;/p&gt;

&lt;p&gt;Seize the opportunities. Play this out and see where it can take you. You can do it.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>career</category>
      <category>beginners</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Electron Adventures: Episode 81: Ideas That Did Not Work</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Fri, 29 Oct 2021 15:24:57 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-81-ideas-that-did-not-work-g0i</link>
      <guid>https://dev.to/taw/electron-adventures-episode-81-ideas-that-did-not-work-g0i</guid>
      <description>&lt;p&gt;I'm back from my holidays, so it's time to do the final twenty episodes. But before I get back to coding, let's take a look back at some of the ideas I tried, which ended up not working.&lt;/p&gt;

&lt;p&gt;As the goal of the series is to write a post a day, I cannot spend too much time on an idea that's not working. I'm not saying none of these ideas are possible, just that the obstacles were too great, and after giving them a try, I ended up deciding to do something else instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imba"&gt;
  &lt;/a&gt;
  Imba
&lt;/h3&gt;

&lt;p&gt;One thing I tried repeatedly is to do some episodes with &lt;a href="https://imba.io/"&gt;Imba&lt;/a&gt;. Imba 1 used to be my favorite frontend framework before I discovered Svelte.&lt;/p&gt;

&lt;p&gt;Then our paths diverged - Imba 2 is a major breaking change, that has been in alpha for two years now, and some of Imba 1 use cases are still not ready, sort of Angular 2 transition style. Meanwhile Svelte solves a lot of the same problems with a much less radical design, is stable, and is very popular.&lt;/p&gt;

&lt;p&gt;Still, I wanted to try writing a few small things in Imba 2. Unfortunately that didn't work out. &lt;code&gt;imba create&lt;/code&gt; even comes with Electron template, but that doesn't work at all. And trying to adapt its regular template to Electron, I ran into too many mysterious errors with Electron not being able to deal with preload etc.&lt;/p&gt;

&lt;p&gt;The problem is not with Imba as such, it's really with various boilerplates tying it to Electron, so I hope they fix it someday.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opal-ruby"&gt;
  &lt;/a&gt;
  Opal Ruby
&lt;/h3&gt;

&lt;p&gt;Opal Ruby promises to run Ruby in the browser. It's actually in an awkward position, as it's not completely compatible with regular Ruby, making many changes to bring it closer to what JavaScript VM expects - such as making strings immutable, making all numbers floats, regexps being are just limited JavaScript regexps, no support for full Unicode etc. So it will run simple Ruby code, but no real hope of running any bigger codebase without major adaptations.&lt;/p&gt;

&lt;p&gt;On the other hand, these changes don't go far enough to provide seamless interoperability with the JavaScript world - especially browser APIs. Every JavaScript API needs an Opal wrapper, or it's a major pain to use. So Opal is much harder to use than "flavored JavaScript" languages like CoffeeScript or JSX.&lt;/p&gt;

&lt;p&gt;Not to mention a lot of changes it makes to bridge JavaScript - Ruby gap cost a lot of performance. And then there's the whole &lt;code&gt;under_score&lt;/code&gt; vs &lt;code&gt;camelCase&lt;/code&gt; mess.&lt;/p&gt;

&lt;p&gt;As a result, Opal Ruby has its use cases, but they're a lot narrower than the promise of "just run Ruby in a browser" would suggest.&lt;/p&gt;

&lt;p&gt;I tried to make an episode about it, but there was a bit too much fiddling with wrapper code, so I ended up dropping the idea.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-windowrequestanimationframe-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Window.requestAnimationFrame&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;There was a bunch of episodes when I tried to improve performance of the hex editor. One of such ideas was to do recalculations on &lt;code&gt;requestAnimationFrame&lt;/code&gt;, even though that's a bit messy in Svelte.&lt;/p&gt;

&lt;p&gt;I coded the whole thing, and discovered that it's completely unnecessary, as scroll events already debounce to correspond to exactly &lt;code&gt;requestAnimationFrame&lt;/code&gt; rate.&lt;/p&gt;

&lt;p&gt;That's a rare case where episode got derailed because something was too good, rather than not good enough.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wasm"&gt;
  &lt;/a&gt;
  WASM
&lt;/h3&gt;

&lt;p&gt;WASM promises to run any language in a browser. Those promises come with a lot of caveats. Compiled WASM has no direct access to browser APIs, and needs to talk to JavaScript wrappers. Its interoperability with JavaScript is quite painful - WASM code is limited to just passing numbers back and forth, even Strings aren't supported directly - because obviously JavaScript strings don't match what most other languages expect. And it needs to go through wrappers to even run its own code - for basic things like allocating memory it needs to go outside WASM code.&lt;/p&gt;

&lt;p&gt;The good thing is that WASM at least has better track record than Opal Ruby at running nontrivial codebases directly. The bad thing is that even hello world turns into an enormous mess of wrapper code, and after looking at it for a bit I decided I really don't want to be writing about it.&lt;/p&gt;

&lt;p&gt;I think WASM might be worth investigating someday, but it would take a lot more than one quick episode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-javascript-frameworks"&gt;
  &lt;/a&gt;
  Other JavaScript frameworks
&lt;/h3&gt;

&lt;p&gt;I wanted to do some episodes in a lot of different frameworks, but framework landscape is very sparse now. jQuery is the absolute winner form among the first generation of frameworks. React is the clear winner from among the second generation, with Vue and Angular being quite far behind. Svelte so far looks like the clear winner from among the current third generation. Everything else either faded away, or never had a chance.&lt;/p&gt;

&lt;p&gt;I did Marko and Malina, two frameworks you've likely never heard of, which try something interesting. And I guess D3 and Phaser are very sort of frameworks too. But when I was looking for other frameworks to try, it always felt like "well, nobody uses that anymore", or "well, nobody used that ever", and none of the early gen frameworks even look that interesting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-electron-alternatives"&gt;
  &lt;/a&gt;
  Other Electron alternatives
&lt;/h3&gt;

&lt;p&gt;I checked out a few direct alternatives to Electron like NW.js and Neutralino. There's a lot of them, but it's not clear they offer anything new. A lot of them use system browser instead of bundling Chromium, and that leads to so many compatibility issues to save a few MBs I have no idea why anyone would want to do that.&lt;/p&gt;

&lt;p&gt;One thing I thought I'd do but didn't really do much is try other UI frameworks. I tried NodeGui React (NodeGui Svelte wasn't working), which is Electron-like environment based on Qt, and it wasn't too bad.&lt;/p&gt;

&lt;p&gt;I thought about trying out other UIs like Glimmer, JavaFX, Tauri, Flutter, etc., but a lot of them require highly unfun languages like Rust, Dart, or Java; and a lot of them are non-reactive and require painful manual syncing of state and UI. I might still try a few in the remaining time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coming-soon"&gt;
  &lt;/a&gt;
  Coming soon...
&lt;/h3&gt;

&lt;p&gt;Let me know if there's anything you'd like to see me try before the series ends.&lt;/p&gt;

&lt;p&gt;In the next episodes I plan to give JRubyFX and Glimmer a try, as well as just write a few small Electron apps for fun. See you soon!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
    </item>
    <item>
      <title>Typed: A 1kb type-safe runtime validation library</title>
      <author>Gabriel Vaquer</author>
      <pubDate>Fri, 29 Oct 2021 15:24:04 +0000</pubDate>
      <link>https://dev.to/brielov/typed-a-1kb-type-safe-runtime-validation-library-5end</link>
      <guid>https://dev.to/brielov/typed-a-1kb-type-safe-runtime-validation-library-5end</guid>
      <description>&lt;p&gt;I've been working on a little side project which I ultimate decide to make public so that somebody else can maybe benefit from it on their own projects. &lt;code&gt;typed&lt;/code&gt; is similar to &lt;code&gt;superstruct&lt;/code&gt; and &lt;code&gt;zod&lt;/code&gt; in that it validates data at runtime and it's type-safe but what's different about it is that it comes in a tiny package (1kb) with an ESM build and it also outperforms them by a significant amount. If you're curious about it you can check it out on &lt;a href="https://github.com/brielov/typed"&gt;GitHub&lt;/a&gt; or &lt;a href="https://www.npmjs.com/package/typed"&gt;NPM&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/brielov"&gt;
        brielov
      &lt;/a&gt; / &lt;a href="https://github.com/brielov/typed"&gt;
        typed
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Smallest runtime type-checking library ever made
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9f75e9f7db72c1944704167b1e3eb09000b30c3c28f9f2884318cbfeaad4b693/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f627269656c6f762f74797065642f6275696c642d74657374"&gt;&lt;img src="https://camo.githubusercontent.com/9f75e9f7db72c1944704167b1e3eb09000b30c3c28f9f2884318cbfeaad4b693/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f627269656c6f762f74797065642f6275696c642d74657374" alt="GitHub Workflow Status"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4079f69d501dd584e99ce5b3188c1ade80e3ac50d6a117a5afbf60c1cda108bc/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f67682f627269656c6f762f7479706564"&gt;&lt;img src="https://camo.githubusercontent.com/4079f69d501dd584e99ce5b3188c1ade80e3ac50d6a117a5afbf60c1cda108bc/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f67682f627269656c6f762f7479706564" alt="Codecov"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d0df2343ab2cf11b332d2bb9273021364e554ad5e32accadf12fc3b395cf1875/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f627269656c6f762f7479706564"&gt;&lt;img src="https://camo.githubusercontent.com/d0df2343ab2cf11b332d2bb9273021364e554ad5e32accadf12fc3b395cf1875/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f627269656c6f762f7479706564" alt="GitHub issues"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/202f550b00fa8edc8bb3113bfd6f949f7785fe6aebe83500ba047c6166a540be/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f627269656c6f762f7479706564"&gt;&lt;img src="https://camo.githubusercontent.com/202f550b00fa8edc8bb3113bfd6f949f7785fe6aebe83500ba047c6166a540be/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f627269656c6f762f7479706564" alt="GitHub"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/62066ef8c15fa25394161a59d405326813d4b0d4b324d1406045a32ac7d36b69/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f7479706564"&gt;&lt;img src="https://camo.githubusercontent.com/62066ef8c15fa25394161a59d405326813d4b0d4b324d1406045a32ac7d36b69/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f7479706564" alt="npm"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/999db230c8760d4280ee0520da01aab9eff45235ae22c2cddfdb4d9bf7b29659/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f7479706564"&gt;&lt;img src="https://camo.githubusercontent.com/999db230c8760d4280ee0520da01aab9eff45235ae22c2cddfdb4d9bf7b29659/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f7479706564" alt="npm bundle size"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Typed&lt;/h1&gt;
&lt;p&gt;A blazing fast, dependency free, 1kb runtime type-checking library written entirely in typescript, meant to be used with it.&lt;/p&gt;
&lt;p&gt;There are dozens of validation libraries out there, so why create yet another one? Well, I tried almost every library out there and there is only one that I really like called &lt;code&gt;superstruct&lt;/code&gt; (which is awesome) that provides almost everything that I want, but still, I wanted to create my own. The others are simply bloated or don't provide proper typescript support. So that's where &lt;code&gt;typed&lt;/code&gt; comes in.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;typed&lt;/code&gt; is all about function composition. Each function is "standalone" and provides a safe way to validate data, you don't need a special kind of function to execute a schema against some value. All functions return a special type which is either &lt;code&gt;Success&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;Failure&lt;/code&gt;. If &lt;code&gt;success&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; then &lt;code&gt;value&lt;/code&gt; is available and fully typed and if not, &lt;code&gt;errors&lt;/code&gt; is…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/brielov/typed"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Creating a Text-To-Speech program in Vanilla JS</title>
      <author>JS Bits with Bill</author>
      <pubDate>Fri, 29 Oct 2021 15:01:23 +0000</pubDate>
      <link>https://dev.to/js_bits_bill/creating-a-text-to-speech-program-in-vanilla-js-586l</link>
      <guid>https://dev.to/js_bits_bill/creating-a-text-to-speech-program-in-vanilla-js-586l</guid>
      <description>&lt;p&gt;If you haven't been too traumatized from using a Microsoft browser, you might have discovered Edge's built-in "Read Aloud" feature which will speak the highlighted text out loud right in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Vq-NV9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1635438522/JS%2520Bits/edge-text-to-speech_y88jdn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Vq-NV9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1635438522/JS%2520Bits/edge-text-to-speech_y88jdn.jpg" width="880" height="846"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As of now, Chrome has no such feature so we're going to build it ourselves! Here's the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSelection&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;utterance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;voice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFemaleVoice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Optional - select one of several voices&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFemaleVoice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voiceIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="nx"&gt;voiceIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So essentially we just pass in the string from &lt;code&gt;window.getSelection().toString()&lt;/code&gt; to a new instance of &lt;code&gt;SpeechSynthesisUtterance&lt;/code&gt; and call the &lt;code&gt;.speak()&lt;/code&gt; method and that's it!&lt;/p&gt;

&lt;p&gt;But we need a way to trigger our &lt;code&gt;speak()&lt;/code&gt; function. You could create a Chrome extension to add this functionality to the context menu but I've chosen to use DevTool's "Snippets" just to keep it simple. Snippets are your own custom saved scripts you can paste into your browser and run at will. They're super handy for utility functions like cookie getter/setters, JS libraries like Lodash or jQuery, custom UI modifications, etc. &lt;/p&gt;

&lt;p&gt;Once you create a snippet, you can run the code either by clicking "Run Snippet" or pressing Command/Control + Enter. You can also run them directly from the DevTools Command Menu. &lt;/p&gt;

&lt;p&gt;Snippets are located in the &lt;b&gt;Sources&lt;/b&gt; tab and then on the sidebar click "Snippets":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dD7x6veM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1635440825/JS%2520Bits/snippet_tnq2qw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dD7x6veM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1635440825/JS%2520Bits/snippet_tnq2qw.jpg" width="591" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We just need a bit more overhead to account for the asynchronous loading of &lt;code&gt;speechSynthesis.getVoices()&lt;/code&gt; so that our desired voice has loaded before the speech audio runs. The final code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;voiceLoaded&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;voiceschanged&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSelection&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;utterance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;voice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFemaleVoice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFemaleVoice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voiceIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="nx"&gt;voiceIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;voiceLoaded&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtrkL5ZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1635441350/JS%2520Bits/text-to-speech-final_d0pssc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtrkL5ZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1635441350/JS%2520Bits/text-to-speech-final_d0pssc.jpg" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now we can do the laundry and have our article read to us at the same time! 🔊&lt;/p&gt;




&lt;p&gt;&lt;b&gt;Yo!&lt;/b&gt; I post byte-sized tips like these often. Follow me if you crave more! 🍿&lt;/p&gt;

&lt;p&gt;I'm on &lt;a href="https://twitter.com/JS_Bits_Bill"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.tiktok.com/@js_bits"&gt;TikTok&lt;/a&gt; and I have a new &lt;a href="https://jsbits-yo.com/bug-bash/"&gt;debugging course&lt;/a&gt; dropping soon!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>1 line of code: How to get the closest numeric item of an Array </title>
      <author>martin krause</author>
      <pubDate>Fri, 29 Oct 2021 14:46:04 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-get-the-closest-numeric-item-of-an-array-1p2m</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-get-the-closest-numeric-item-of-an-array-1p2m</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const closestTo = (arr, number) =&amp;gt; arr.reduce((acc, current) =&amp;gt; (Math.abs(current - number) &amp;lt; Math.abs(acc - number) ? current : acc) ); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns the numerical item closest to the given number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Happy coding and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Highlights from VSCode 1.61</title>
      <author>Derek Ardolf</author>
      <pubDate>Fri, 29 Oct 2021 14:45:36 +0000</pubDate>
      <link>https://dev.to/dendron/highlights-from-vscode-161-25ij</link>
      <guid>https://dev.to/dendron/highlights-from-vscode-161-25ij</guid>
      <description>&lt;p&gt;The open source VSCode project, along with VSCodium&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;, completed their latest monthly release with v1.61&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;. For those of us that haven't been using the Insider's Build,&lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt; it's time to look at what's new.&lt;/p&gt;

&lt;p&gt;As a bonus for this release, Microsoft held a little &lt;a href="https://www.youtube.com/watch?v=G4jjCN8uQAg"&gt;VSCode 1.61 Release Party&lt;/a&gt; on YouTube. Watch the recording, see the devs show off features, and feel like you were actually invited to a party!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#locked-editor-groups"&gt;
  &lt;/a&gt;
  Locked editor groups
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MHRwdTQH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-lock-groups.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MHRwdTQH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-lock-groups.gif" alt="Locked editor groups in Visual Studio Code" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: this is an &lt;strong&gt;experimental feature&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don't lose track of a file or terminal you are bouncing back-and-forth between in your gigantic list of editor tabs: use &lt;a href="https://code.visualstudio.com/updates/v1_61#_locked-editor-groups"&gt;locked editor groups&lt;/a&gt;. These prevent VSCode from opening more editor tabs in a group (a collection of tabs).&lt;/p&gt;

&lt;p&gt;I like this feature, as I'm often opening new files in the wrong area of the screen. I want those side-by-side, computer!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release Party: &lt;a href="https://www.youtube.com/watch?v=G4jjCN8uQAg&amp;amp;t=1985s"&gt;Editor and workspace improvements demo&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#split-an-editor-without-creating-a-new-group"&gt;
  &lt;/a&gt;
  Split an editor without creating a new group
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0UB9au50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-split-in-group.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0UB9au50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-split-in-group.gif" alt="Split editors in groups in Visual Studio Code" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you find yourself looking at large files, and wish you could scroll down while staying in place elsewhere? Now you can, by doing the splits &lt;a href="https://code.visualstudio.com/updates/v1_61#_split-an-editor-without-creating-a-new-group"&gt;without creating a new group&lt;/a&gt;. Test it out with &lt;code&gt;View: Split Editor in Group&lt;/code&gt; in the command palette (&lt;code&gt;Ctrl+Shift+P&lt;/code&gt;) or with the keybinding shortcut: &lt;code&gt;Ctrl+K Ctrl+Shift+\&lt;/code&gt;. This is useful when converting pieces of code into functions, trimming fat, copy/pasting comment blocks, and whatever else your heart desires.&lt;/p&gt;

&lt;p&gt;No new group means not having yet another tab open in your editor!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release Party: &lt;a href="https://www.youtube.com/watch?v=G4jjCN8uQAg&amp;amp;t=1985s"&gt;Editor and workspace improvements demo&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#webview-ui-toolkit-for-visual-studio-code"&gt;
  &lt;/a&gt;
  Webview UI Toolkit for Visual Studio Code
&lt;/h2&gt;

&lt;p&gt;For extension authors making use of the &lt;a href="https://code.visualstudio.com/api/extension-guides/webview"&gt;webview API&lt;/a&gt; for customizable views in the editor, life is about to become easier: say hello to the &lt;a href="https://code.visualstudio.com/updates/v1_61#_webview-ui-toolkit-for-visual-studio-code"&gt;Webview UI Toolkit&lt;/a&gt;. This is an open-source component library, providing Visual Studio Code design language, which matches the look and feel of VSCode/VSCodium. This is compatible with your tech stack of choice, bet it React, Vue, or OMGNewJSFramework!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/api/extension-guides/webview"&gt;Webview UI Toolkit Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/vscode-webview-ui-toolkit"&gt;Webview UI Toolkit repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release Party: &lt;a href="https://www.youtube.com/watch?v=G4jjCN8uQAg&amp;amp;t=858s"&gt;Webview UI Toolkit Demo&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-notables"&gt;
  &lt;/a&gt;
  Other notables
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;General tip: Wondering what shortcuts are configured in VSCode? One shortcut to rule them all: &lt;code&gt;Ctrl+K Ctrl+S&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Or &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; -&amp;gt; &lt;strong&gt;Preferences: Open Keyboard Shortcuts&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Confusion was caused by a new telemetry config option, &lt;code&gt;telemetry.telemetryLevel&lt;/code&gt;, which would display that telemetry was enabled (even if it was previously disabled). The &lt;a href="https://github.com/microsoft/vscode/issues/134660"&gt;full discussion can be found on GitHub&lt;/a&gt;, which led to improvements being implemented in the &lt;code&gt;1.61.1&lt;/code&gt; update.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=G4jjCN8uQAg&amp;amp;t=170s"&gt;Platform-specific extensions&lt;/a&gt;: no longer try installing a MacOS-only extension on your Windows system, or vice-versa. That is, if the extension developer specifies the supported OS targets. This was previewed at the release party.&lt;/li&gt;
&lt;li&gt;I often came back to my laptop to find that &lt;a href="https://github.com/microsoft/vscode/issues/69665"&gt;my terminal was having a stroke in the VSCode editor&lt;/a&gt;. This seems to be resolved!&lt;/li&gt;
&lt;li&gt;The latest point releases&lt;sup id="fnref4"&gt;&lt;a href="#fn4"&gt;4&lt;/a&gt;&lt;/sup&gt; include fixes for other problems, such as &lt;a href="https://github.com/microsoft/vscode/issues/134757"&gt;high CPU consumption&lt;/a&gt;. Make sure to keep up-to-date!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can't forget: want to take a look at VSCode in your web browser, without installing a thing? These are called &lt;em&gt;Virtual Workspaces&lt;/em&gt;, such as &lt;a href="https://vscode.dev/"&gt;vscode.dev&lt;/a&gt; and &lt;a href="https://github.dev/"&gt;github.dev&lt;/a&gt;. Reference the &lt;a href="https://code.visualstudio.com/blogs/2021/10/20/vscode-dev"&gt;VSCode Blog Post on vscode.dev&lt;/a&gt; for a full rundown on bringing VSCode to the browser.&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://vscodium.com/"&gt;Checkout VSCodium&lt;/a&gt;, for the truly MIT-licensed version of the VSCode IDE (with telemetry/tracking disabled). &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;&lt;a href="https://code.visualstudio.com/updates/v1_61"&gt;VSCode release notes for 1.61&lt;/a&gt;, along with release notes for previous monthly releases. &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;The &lt;a href="https://code.visualstudio.com/insiders"&gt;VSCode Insiders Build&lt;/a&gt; allows users to get VSCode with new features as soon as they are available, rather than at the monthly cadence. &lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn4"&gt;
&lt;p&gt;Issues resolved in point releases, referred to as "Recovery" releases, can be found on GitHub: &lt;a href="https://github.com/microsoft/vscode/issues?q=is%3Aissue+milestone%3A%22September+2021+Recovery%22+is%3Aclosed"&gt;&lt;code&gt;1.61.1&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/microsoft/vscode/issues?q=is%3Aissue+milestone%3A%22September+2021+Recovery+2%22+is%3Aclosed"&gt;&lt;code&gt;1.61.2&lt;/code&gt;&lt;/a&gt;. &lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>vscode</category>
      <category>tooling</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
