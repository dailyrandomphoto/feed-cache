<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Props Object</title>
      <author>Sonny Brown</author>
      <pubDate>Fri, 08 Oct 2021 02:18:52 +0000</pubDate>
      <link>https://dev.to/mhf/the-props-object-1em8</link>
      <guid>https://dev.to/mhf/the-props-object-1em8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-the-props-object"&gt;
  &lt;/a&gt;
  What is the Props Object?
&lt;/h2&gt;

&lt;p&gt;Okay, so you've probably gotten far enough into React to feel like you can make things work. You want to go deeper and start making components... &lt;strong&gt;&lt;em&gt;then you run into props&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#okay-its-an-argument-but-why"&gt;
  &lt;/a&gt;
  Okay. It's an argument. But why?
&lt;/h2&gt;

&lt;p&gt;Every &lt;code&gt;React Component&lt;/code&gt; gets a &lt;code&gt;props object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jQgYnWlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/XxGg7ju2MzS2TUuqqr/giphy.gif%3Fcid%3Decf05e4782ej87q6hu090atvqyr9fmnxhgf1l0nrfht7o6sq%26rid%3Dgiphy.gif%26ct%3Dgf" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jQgYnWlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/XxGg7ju2MzS2TUuqqr/giphy.gif%3Fcid%3Decf05e4782ej87q6hu090atvqyr9fmnxhgf1l0nrfht7o6sq%26rid%3Dgiphy.gif%26ct%3Dgf"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;All you have to do is &lt;strong&gt;create a function with a capital letter&lt;/strong&gt; and React does some magic and, &lt;em&gt;presto chango&lt;/em&gt;, you have a &lt;strong&gt;&lt;code&gt;props object&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-use-it-properly"&gt;
  &lt;/a&gt;
  How Do We Use It... &lt;em&gt;properly?&lt;/em&gt; 😎
&lt;/h2&gt;

&lt;p&gt;Let's take a look at &lt;code&gt;MyGreetingComponent&lt;/code&gt;, which when rendered looks like:&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsF1ApCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/dpKzfbj/Screen-Shot-2021-10-07-at-6-47-54-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsF1ApCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/dpKzfbj/Screen-Shot-2021-10-07-at-6-47-54-PM.png"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-the-code"&gt;
  &lt;/a&gt;
  Now the code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;greeting-section&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyGreetingComponent&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are passing data (&lt;code&gt;hello name="Joe"&lt;/code&gt;) to our component through &lt;strong&gt;what seem to be&lt;/strong&gt; &lt;code&gt;HTML attributes&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-really-were-passing-an-object-as-an-argument"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;But really we're passing an object as an argument&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;greeting-section&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MyGreetingComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#stop"&gt;
  &lt;/a&gt;
  STOP
&lt;/h3&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1xEPWSI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/f3pwap89bizwIjbice/giphy.gif%3Fcid%3Decf05e47424wm0sosyy480mul2z80kv1j825uewabtyma6gs%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1xEPWSI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/f3pwap89bizwIjbice/giphy.gif%3Fcid%3Decf05e47424wm0sosyy480mul2z80kv1j825uewabtyma6gs%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-take-a-moment-and-study-the-last-two-code-blocks"&gt;
  &lt;/a&gt;
  And Take A Moment And Study The Last Two Code Blocks
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The above code&lt;/strong&gt; and the code block before it &lt;strong&gt;are identical&lt;/strong&gt; in function. This is what's going on under the hood in React when you use your component. &lt;strong&gt;It's just a function call with an immutable object as an argument&lt;/strong&gt;. Here they are again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;greeting-section&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyGreetingComponent&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="c1"&gt;// Is the same as&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;greeting-section&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MyGreetingComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#so-why-is-that-important-to-know"&gt;
  &lt;/a&gt;
  So why is that important to know?
&lt;/h2&gt;

&lt;p&gt;Well Because React is powerful, but confusing to look at. 🧐&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtlLPhWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/RLE2Q5ajPa6GgUxe1z/giphy.gif%3Fcid%3Decf05e4795wynx1zu4s4e5xlvkd6afd770soqm2qieyag3n5%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtlLPhWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/RLE2Q5ajPa6GgUxe1z/giphy.gif%3Fcid%3Decf05e4795wynx1zu4s4e5xlvkd6afd770soqm2qieyag3n5%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;For instance, &lt;code&gt;hello&lt;/code&gt; is true? Yes! Because that's how you would interpret an HTML element that just has an attribute name. It becomes true by stating it. That means &lt;strong&gt;React is going to do some magic&lt;/strong&gt; and now the HTML &lt;code&gt;hello&lt;/code&gt; becomes &lt;code&gt;hello: true&lt;/code&gt; in the &lt;code&gt;props object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It gets confusing looking at &lt;strong&gt;HTML and Javascript (and CSS) in the same file.&lt;/strong&gt; But sometimes things are just plain confusing.&lt;/p&gt;

&lt;p&gt;Like...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-the-heck-is-children-props"&gt;
  &lt;/a&gt;
  What the heck is children props?
&lt;/h2&gt;

&lt;p&gt;Let's look at our example again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that &lt;code&gt;children&lt;/code&gt; is a prebuilt property in the &lt;code&gt;props object&lt;/code&gt;. We didn't create it. Also it is pre-set to &lt;code&gt;undefined&lt;/code&gt;. We've already discovered that the props object comes prebuilt into every &lt;code&gt;React Component&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-why-is-this-children-property-prebuilt-into-our-props-object"&gt;
  &lt;/a&gt;
  &lt;strong&gt;So why is this children property prebuilt into our props object?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uqBEaUmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/QHnD9zH/Screen-Shot-2021-10-07-at-6-01-21-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uqBEaUmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/QHnD9zH/Screen-Shot-2021-10-07-at-6-01-21-PM.png"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-when-called-looks-like"&gt;
  &lt;/a&gt;
  Which, when called, looks like
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;WrapperComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;someExplainerTest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sometimes&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;many&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;many&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;many&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/WrapperComponent&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#which-when-created-looks-like"&gt;
  &lt;/a&gt;
  Which, when created, looks like
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WrapperComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;❴&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;❴&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="err"&gt;❵&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
❵&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#okay-captain-obvious"&gt;
  &lt;/a&gt;
  Okay Captain Obvious
&lt;/h2&gt;

&lt;p&gt;Maybe that seems apparent. It wasn't for me and it took awhile for me to grasp. When I did it helped &lt;strong&gt;&lt;em&gt;a lot&lt;/em&gt;&lt;/strong&gt;. When you get over this hump, React seems to have&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cVzljDBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/3o84sq21TxDH6PyYms/giphy.gif%3Fcid%3Decf05e47gmkhujlud37rs0zirf614ozt40coaknbjccyr41l%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cVzljDBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/3o84sq21TxDH6PyYms/giphy.gif%3Fcid%3Decf05e47gmkhujlud37rs0zirf614ozt40coaknbjccyr41l%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but"&gt;
  &lt;/a&gt;
  But
&lt;/h3&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CsB3fS1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/MCZ39lz83o5lC/giphy.gif%3Fcid%3Decf05e47q2tyrd2u3ynwy81j2q58k8n56634ydum38jflsgw%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CsB3fS1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/MCZ39lz83o5lC/giphy.gif%3Fcid%3Decf05e47q2tyrd2u3ynwy81j2q58k8n56634ydum38jflsgw%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Let's look a little closer and see that it's potential and pain points really come from understanding what it's doing, again, under the hood.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;❴&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;❵&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the console, &lt;code&gt;props.children&lt;/code&gt; now looks like the above. The &lt;code&gt;Objects&lt;/code&gt; here have the function calls to create each child.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-can-maybe-better-think-of-it-like-this"&gt;
  &lt;/a&gt;
  We can maybe better think of it like this.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;❴&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;❵&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It takes some mental gymnastics to see it this way, but so does seeing HTML in Javascript in general.&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6RBTbGTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/At3ol9V0AIN2w/giphy.gif%3Fcid%3Decf05e47l8rfvaye0f33zaeu0kx1g93bjslewn765bpxhh28%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6RBTbGTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/At3ol9V0AIN2w/giphy.gif%3Fcid%3Decf05e47l8rfvaye0f33zaeu0kx1g93bjslewn765bpxhh28%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;But when it finally clicks, we see the props object is just passing down &lt;strong&gt;values, objects and functions&lt;/strong&gt; from &lt;strong&gt;parent to child&lt;/strong&gt;, just like Javascript does normally.&lt;/p&gt;

&lt;p&gt;The catch is the data only goes from &lt;strong&gt;parent to child&lt;/strong&gt;. But that also makes it clear because data is only going one way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#remember-its-all-javascript"&gt;
  &lt;/a&gt;
  Remember it's all Javascript
&lt;/h3&gt;

&lt;p&gt;Therefore React has all of the "features" of Javascript. As an example, &lt;strong&gt;objects are passed as reference&lt;/strong&gt; while &lt;strong&gt;primitives are not&lt;/strong&gt;. So think about what that might mean to React as it checks the diff and decides what to re-render in the DOM tree. 🌲&lt;/p&gt;

&lt;p&gt;You can find a lot of blog posts about &lt;strong&gt;data flow&lt;/strong&gt; and &lt;strong&gt;state management&lt;/strong&gt; in React which is the next step to take. Just beware, you'll end up down some deep rabbit holes, which can be fun but also very time consuming.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Understanding the Modern Web Stack: Webpack (Part 1)
</title>
      <author>Alex E</author>
      <pubDate>Fri, 08 Oct 2021 01:29:56 +0000</pubDate>
      <link>https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-1-2mn1</link>
      <guid>https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-1-2mn1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-webpack"&gt;
  &lt;/a&gt;
  What is webpack?
&lt;/h2&gt;

&lt;p&gt;In webpack's &lt;a href="https://webpack.js.org/concepts/"&gt;own words&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At its core, webpack is a static module bundler for modern JavaScript applications. When webpack processes your application, it internally builds a dependency graph from one or more entry points and then combines every module your project needs into one or more bundles, which are static assets to serve your content from.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you find it difficult to understand exactly what that means, don't worry at all, that's why we're here!  &lt;/p&gt;

&lt;p&gt;Many of us, including myself, first seek out webpack tutorials when we reach a point with our projects when we know we need it -- but we may not know exactly &lt;em&gt;what&lt;/em&gt; we need it to do, or the specific terms to describe the problems we are trying to solve.&lt;/p&gt;

&lt;p&gt;webpack (stylized with a lowercase &lt;em&gt;w&lt;/em&gt;) is extremely configurable and customizable by design, which means that at the cost of a slightly higher learning curve than an out-of-the-box solution, you get incredible power to do whatever it is you need to do.  &lt;/p&gt;

&lt;p&gt;If webpack core doesn't do it, you can get a plugin.  If you can't find a plugin for it, you can write your own plugin.  You're probably getting the idea at this point.&lt;/p&gt;

&lt;p&gt;The idea behind this tutorial is that we will keep things as simple as possible.  Start with a super basic web app / page, and gradually add pieces as you would on a real project until you encounter a scenario where you realize webpack would help.&lt;/p&gt;

&lt;p&gt;At that point we install, configure, and add it to our project.&lt;/p&gt;

&lt;p&gt;So we're ready to dive in -- but before we do there are a few prerequisites we should address first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;You will need to have &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; installed on your machine and available from your terminal. Installing Node will automatically install &lt;a href="https://en.wikipedia.org/wiki/Npm_(software)"&gt;npm&lt;/a&gt; as well, which is what you will use to install Babel.&lt;/p&gt;

&lt;p&gt;Open up your terminal of choice.  If you see version numbers when running the two commands below (your numbers will likely be different than this example) then you are ready to go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v15.5.0

npm &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 7.16.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will want to have at least a basic understanding of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;Javascript&lt;/a&gt;.  We don't deal with any complicated code in this tutorial, but we'll assume you can comfortable read simple programs.  webpack's configuration file is written in JS format.  &lt;/p&gt;

&lt;p&gt;We will assume you have the ability to run a local server and test the HTML/JS code we are using.  If not, then check out this tutorial first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-running-a-local-web-server-4d8g"&gt;Understanding the Modern Web Stack: Running a Local Web Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#initializing-the-project"&gt;
  &lt;/a&gt;
  Initializing the Project
&lt;/h2&gt;

&lt;p&gt;Let's start by initializing a new &lt;code&gt;npm&lt;/code&gt; project. Run the following command to generate one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;-y&lt;/code&gt; flag will automatically select default values for everything, which is appropriate in our example.&lt;/p&gt;

&lt;p&gt;We'll start by creating an HTML entry point where we can load and test our bundle.  Any basic HTML template will work.  Create a file called &lt;code&gt;index.html&lt;/code&gt; in your root directory.  If you are using VS Code you can generate an instant template by opening the file and typing &lt;code&gt;!&lt;/code&gt; (then click &lt;code&gt;!&lt;/code&gt; menu).&lt;/p&gt;

&lt;p&gt;Otherwise we can use the template below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we will create a directory called &lt;code&gt;src&lt;/code&gt;.  in the root directory of your project.  Inside that directory we will have a file called &lt;code&gt;script.js&lt;/code&gt; with the following code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/script.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Lodash, currently included via a script, is required for this line to work&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(You will notice that at this beginning stage we are essentially following along with webpack's own fantastic &lt;a href="https://webpack.js.org/guides/getting-started/#basic-setup"&gt;Getting Started&lt;/a&gt; guide.  webpack's documentation is known for being extremely high quality thanks to its amazing &lt;a href="https://webpack.js.org/contribute/"&gt;contributors&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You may notice that we are using a &lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt; function inside our &lt;code&gt;script.js&lt;/code&gt; file.  That's the little &lt;code&gt;_&lt;/code&gt; underscore variable with the &lt;code&gt;join()&lt;/code&gt; method.  Might be a bit of a simplistic example, but you can replace it with any scenario you can imagine where you might want to use the benefit of an external library function rather than coding it yourself.&lt;/p&gt;

&lt;p&gt;Since we are using Lodash in our file, we'll need to add it to our project.  From the root directory run the following terminal command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;lodash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now your directory structure should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root
│   index.html
|   package.json
└───node_modules
└───src
│   │   script.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need to load both our &lt;code&gt;script.js&lt;/code&gt; file and the Lodash library into out &lt;code&gt;index.html&lt;/code&gt; to see everything work together.  Update your &lt;code&gt;index.html&lt;/code&gt; file like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Webpack Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"node_modules/lodash/lodash.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"src/script.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to notice a couple about our script tags.  &lt;code&gt;script.js&lt;/code&gt; must be prefixed with &lt;code&gt;src/&lt;/code&gt; as it is in that directory, and since our JS is working with the DOM, we want to use the &lt;code&gt;defer&lt;/code&gt; attribute so that it doesn't load until after the HTML is finished parsing.  &lt;/p&gt;

&lt;p&gt;At this point you can serve up your root directory and you should be able to see the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sy88G7lU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lWszBPB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sy88G7lU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lWszBPB.png" alt="Page Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are not sure how to host a local server check out this post to help get you up and running:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-running-a-local-web-server-4d8g"&gt;Understanding the Modern Web Stack: Running a Local Web Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-purpose-of-bundling"&gt;
  &lt;/a&gt;
  What is the Purpose of Bundling?
&lt;/h2&gt;

&lt;p&gt;So if everything is working, what do we need webpack for?  Well consider if you were now planning to release this as a product.  You want to be able to say &lt;em&gt;Hello webpack&lt;/em&gt; to the entire world!  You're hoping to get a minimum of 1 million unique visitors per day.&lt;/p&gt;

&lt;p&gt;You take your project directory and you upload it to your web server.  You need to make sure you also include the &lt;code&gt;node_modules&lt;/code&gt; folder because that's where the Lodash library is.  Every time our page loads, it loads the &lt;code&gt;lodash.min.js&lt;/code&gt; file.  Every one of our million users per day (disregarding &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching"&gt;cache&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding"&gt;gzip&lt;/a&gt; options for the moment) will be downloading this file.  &lt;/p&gt;

&lt;p&gt;Lodash is a huge library that comes with &lt;a href="https://lodash.com/docs/4.17.15"&gt;tons of great functions&lt;/a&gt; for all kinds of different use cases.  Even after being minified, our &lt;code&gt;lodash.min.js&lt;/code&gt; file is still a sizable 73KB.  That's 73KB of data for every user just to gain access to the &lt;code&gt;join()&lt;/code&gt; function.  &lt;/p&gt;

&lt;p&gt;Wouldn't it be great if we could just extract that &lt;code&gt;join()&lt;/code&gt; function and leave behind all the excess parts of the library we aren't using?&lt;/p&gt;

&lt;p&gt;That's where webpack comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-webpack"&gt;
  &lt;/a&gt;
  Installing Webpack
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i webpack webpack-cli &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take a look at what each one is doing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;webpack&lt;/code&gt; - This is the main engine of webpack, it understands everything related about how the code and files relate to one another, and how to bundle them into a single package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;webpack-cli&lt;/code&gt; - This is the actual program we are going to run to trigger the core engine. It allows us to run webpack on our command line and generate a bundle.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our first goal will be to simply configure webpack to process our &lt;code&gt;script.js&lt;/code&gt; file and output it without doing any transformations.  We'll add those in soon after.&lt;/p&gt;

&lt;p&gt;Create a new file in the root directory called &lt;code&gt;webpack.config.js&lt;/code&gt; with the following code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/script.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we fun this, let's look at what we expect it will do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; - This determines what kind of extra processing is done to your output file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;none&lt;/code&gt; - No extra processing at all.  We are using this for the tutorial because it makes the output file cleaner for a human to read and understand.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;development&lt;/code&gt; - Extra work done to add features that make debugging and tracing issues easier.  Will be slower and result in larger file sizes.  Designed only to be used during development.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;production&lt;/code&gt; - Removes all unnecessary code and only produces the smallest and leanest file possible.  Designed for your release build.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;entry&lt;/code&gt; - The starting point of our app, it's pointing to our &lt;code&gt;script.js&lt;/code&gt; file with our Javascript code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;output&lt;/code&gt; - This is the name and location of the file it fill generate after all the bundling is done.  This is the file our &lt;code&gt;index.html&lt;/code&gt; file will load.  Includes both the name of the file and path.  We are going to output everything into a directory called &lt;code&gt;dist&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's run &lt;code&gt;webpack&lt;/code&gt; now and see if our assumptions are true.  ON your terminal run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't need any arguments with that command because it gets all the config information it needs automatically from your &lt;code&gt;webpack.config.js&lt;/code&gt; file.  At this point you should see a file generated called &lt;code&gt;main.js&lt;/code&gt; in your &lt;code&gt;dist&lt;/code&gt; folder that looks nearly identical to your script file.  &lt;/p&gt;

&lt;p&gt;The idea is that your entire project gets bundled into the &lt;code&gt;dist&lt;/code&gt; directory and that is what you upload to your server as your release build.  OUr issue right now however is that neither your &lt;code&gt;index.html&lt;/code&gt; nor your &lt;code&gt;node_modules&lt;/code&gt; folder existed in your &lt;code&gt;dist&lt;/code&gt; folder.  If you tried to release your project now there would be nothing to load.&lt;/p&gt;

&lt;p&gt;We will start by configuring webpack to bundle your &lt;code&gt;index.html&lt;/code&gt; in your output.  We could technically just copy it in there ourselves, but of course webpack has its own way of handling that.  This is where we introduce our first plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webpack-plugins"&gt;
  &lt;/a&gt;
  Webpack Plugins
&lt;/h2&gt;

&lt;p&gt;Plugins are code that give webpack additional information about how to perform certain tasks.  The most common one you will use is called &lt;a href="https://webpack.js.org/plugins/html-webpack-plugin/"&gt;HtmlWebpackPlugin&lt;/a&gt;.  Its purpose is exactly as we described above, to let you include an HTML file in your output bundle.  &lt;/p&gt;

&lt;p&gt;Before we can use it, we have to add it to our project.  Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;html-webpack-plugin &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is installed we update our webpack config file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HtmlWebpackPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- NEW&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/script.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two new lines have been added indicated with the &lt;em&gt;"NEW"&lt;/em&gt; comments.  We need to first &lt;code&gt;require&lt;/code&gt; the plugin, and then add it to our config.  &lt;/p&gt;

&lt;p&gt;We are also going to move our &lt;code&gt;index.html&lt;/code&gt; file into our &lt;code&gt;src&lt;/code&gt; directory.  The &lt;code&gt;src&lt;/code&gt; directory will be the location of all our source code related to the web application itself.  Config files can continue to live in the project root directory.  When we move the index file we are going to update and remove a couple of the script tags.  &lt;/p&gt;

&lt;p&gt;Our new file looks like:&lt;br&gt;
&lt;code&gt;src/index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Webpack Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only different here is that we have removed the two &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags with our &lt;code&gt;script.js&lt;/code&gt; and the Lodash library.  We'll see why in a moment.  Before we run let's confirm the shape of our project directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root
|   package.json
|   webpack.config.js
└───node_modules
└───src
│   │   script.js
|   |   index.html
└───dist
|   |   main.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's run our &lt;code&gt;npx webpack&lt;/code&gt; command again and take a look at the output.&lt;/p&gt;

&lt;p&gt;Inside your &lt;code&gt;dist&lt;/code&gt; directory thanks to our new plugin you should see an &lt;code&gt;index.html&lt;/code&gt; file.  It will look the same as your template with one exception.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;HtmlWebpackPlugin has automatically added that script tag for you based on the output filename in your &lt;code&gt;webpack.config.js&lt;/code&gt; file.  Pretty cool!  &lt;/p&gt;

&lt;p&gt;Now you can update your HTML template in your &lt;code&gt;src&lt;/code&gt; directory any time you like, and a copy will be generated on webpack run that automatically points to your bundle.&lt;/p&gt;

&lt;p&gt;Next, if you remember, we removed the reference to the Lodash library, so we're still not ready to run the app.  Before we're ready to do that there's an extremely important concept we need to understand called &lt;em&gt;modules&lt;/em&gt;.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modules-in-javascript"&gt;
  &lt;/a&gt;
  Modules in Javascript
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;Modules&lt;/a&gt; are not a unique feature of webpack, they are a core part of the modern Javascript ecosystem.  The quick and easy explanation is that they are designed as a way to separate unrelated pieces of code to make it easier to build systems that don't overlap unnecessarily.  &lt;/p&gt;

&lt;p&gt;A good example is Lodash,  It is comprised of smaller modules that separate the methods it provides between the ones that work on objects vs arrays vs strings.  Keeping them separate makes it easier for developers to work with them and reason about them.&lt;/p&gt;

&lt;p&gt;Modules have a long and complicated history because they never existed in the original design of the language, so there have always been challenges in both syntax standardization and browser support.  &lt;/p&gt;

&lt;p&gt;Fortunately webpack supports virtually all module styles, so you can write your code the way you want and run it in any browser.  For the sake of our tutorial we are going to use the modern native module syntax of &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modules-in-webpack"&gt;
  &lt;/a&gt;
  Modules in Webpack
&lt;/h2&gt;

&lt;p&gt;Modules in the webpack ecosystem act as a means for your code to communicate to webpack a list of exactly which pieces are needed.  &lt;/p&gt;

&lt;p&gt;With this information, webpack can build a &lt;a href="https://webpack.js.org/concepts/dependency-graph/"&gt;dependency graph&lt;/a&gt; of all the relationships in your project.&lt;/p&gt;

&lt;p&gt;The real power of this graph becomes apparent when you realize that once webpack knows exactly what your program is using, it can leave behind everything that it isn't.  &lt;/p&gt;

&lt;p&gt;That's not just full Javascript files either. It can extract individual values and functions from JS files, and even individual files themselves -- for example only pulling images and fonts that your project uses from a large directory of fonts.&lt;/p&gt;

&lt;p&gt;This gives you (the developer) the luxury of having instant access to any image or font you want while working, and then when you build your project for release you only include the ones you actually use.  &lt;/p&gt;

&lt;p&gt;Ultimately this describes the true value or webpack, and why it's one of the most popular common tools in real world applications today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bundles-amp-minimizing-bundle-size"&gt;
  &lt;/a&gt;
  Bundles &amp;amp; Minimizing Bundle Size
&lt;/h2&gt;

&lt;p&gt;So with that said, let's take a look at how we can apply this knowledge to extract only the piece of the Lodash library that we are actually using.  We will begin by adding an &lt;code&gt;import&lt;/code&gt; statement to our &lt;code&gt;script.js&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/script.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- NEW&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new line &lt;code&gt;import _ from 'lodash'&lt;/code&gt; is telling JS to load the entirety of the lodash library and make all the code available on the &lt;code&gt;_&lt;/code&gt; variable.  If you try and run this code in classic browsers (or even modern ones without the proper config) you will see an error, but webpack understands it perfectly. &lt;/p&gt;

&lt;p&gt;Let's run &lt;code&gt;npx webpack&lt;/code&gt; again and check the output.  &lt;/p&gt;

&lt;p&gt;You can see that &lt;code&gt;dist.main.js&lt;/code&gt; has now ballooned from roughly ~15 lines of code to almost 20,000!  That's because webpack has done exactly what we asked it to do: load the entirely of Lodash into our project.  &lt;/p&gt;

&lt;p&gt;When you run the &lt;code&gt;npx webpack&lt;/code&gt; command you will also get some great bundle information on the terminal.  Let's take a quick look at that:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2w4B5V9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PM3Q6Y7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2w4B5V9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PM3Q6Y7.png" alt="Lodash Bundle Large"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;main.js&lt;/code&gt; is a whopping 536KB in size.  The info also tells us that 531KB of that comes from &lt;code&gt;lodash.js&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;This would be a good time to test out the difference &lt;code&gt;production&lt;/code&gt; mode.  &lt;/p&gt;

&lt;p&gt;Edit your &lt;code&gt;webpack.config.js&lt;/code&gt; file to change &lt;code&gt;mode&lt;/code&gt; to &lt;code&gt;production&lt;/code&gt; from &lt;code&gt;none&lt;/code&gt; and then run &lt;code&gt;npx webpack&lt;/code&gt; again.  You will probably find you have to wait a bit longer, as your machine is working hard to minimize the size of these files.  &lt;/p&gt;

&lt;p&gt;Here's what the bundle information looks like now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rAuuAAM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6R60OaS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rAuuAAM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6R60OaS.png" alt="Lodash Bundle Medium"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We've made a huge drop from 536KB to 69.5KB in our &lt;code&gt;main.js&lt;/code&gt; file!  &lt;/p&gt;

&lt;p&gt;If you're wondering where all that space went take a look at &lt;code&gt;dist/main.js&lt;/code&gt;.  Since this is considered a &lt;code&gt;production&lt;/code&gt; release the most important thing is fast speeds and small file sizes, it's no longer important that the developer be able to read the file.  So webpack shrinks it down into the smallest size it can while still having the same function.  &lt;/p&gt;

&lt;p&gt;This process is called &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/minification"&gt;minification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But even though the library is minified, we're still including the entire library while only using the single &lt;code&gt;join()&lt;/code&gt; function.  The final step is simply to change what we are asking to do.  &lt;/p&gt;

&lt;p&gt;If you recall the line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are specifically asking JS to load &lt;em&gt;everything&lt;/em&gt; from Lodash and place it into our file, but that's not actually what we want.  We only want the join function.  &lt;/p&gt;

&lt;p&gt;The syntax for exactly how to do so will depend on the way the library itself has set up ts modules (if at all).  It's good practice to check the library's documentation before you decide how you will do your imports.&lt;/p&gt;

&lt;p&gt;Lodash makes each individual function available in its own JS file (you can see this easily by simply navigating to &lt;code&gt;node_modules/lodash&lt;/code&gt;).  &lt;/p&gt;

&lt;p&gt;Rather than importing from the &lt;code&gt;lodash.min.js&lt;/code&gt; file that contains &lt;em&gt;everything&lt;/em&gt;, let's just import from the &lt;code&gt;join.js&lt;/code&gt; file that contains the function we want.&lt;/p&gt;

&lt;p&gt;So we change the syntax of our import to:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/script.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// NEW&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/join&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// NEW&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we are now importing the &lt;code&gt;join&lt;/code&gt; function directly and not creating the underscore variable, we need to change the &lt;code&gt;_.join()&lt;/code&gt; syntax to just &lt;code&gt;join()&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Before we run our bundler again let's change the &lt;code&gt;mode&lt;/code&gt; in &lt;code&gt;webpack.config.js&lt;/code&gt; back to &lt;code&gt;none&lt;/code&gt; so that we can see exactly what the output looks like in a human-readable format.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npx webpack&lt;/code&gt; again and look at the bundle info:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hosoN8AW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/l69G2uN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hosoN8AW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/l69G2uN.png" alt="Lodash Bundle Small"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are now down from 69.5KB to only 4KB!  And we switched out of &lt;code&gt;production&lt;/code&gt; mode so that's not even minified!  We could still shrink it even further if we wanted.  &lt;/p&gt;

&lt;p&gt;Let's take a look at our &lt;code&gt;dist/main.js&lt;/code&gt; output file to see what happened.&lt;/p&gt;

&lt;p&gt;We're down to around 100 lines (including some webpack administrative code for modules).  It should be possible for you to see with your own eyes how your code from &lt;code&gt;script.js&lt;/code&gt; has been blended into a single file along with Lodash's &lt;code&gt;join()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;And that's webpack!  You can write your code in as many files as you like, with &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; to manage how they depend and relate to each other, and still package it all together into an efficient single JS file that any browser can load, regardless of its support for modules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;You now understand the fundamentals of webpack.  Of course there's a lot more to it, and we'll continue to explore those features ahead, but this is a great place to stop and take a breather and absorb what you've learned so far.  Everything onward from here just builds on these same concepts you've just learned.&lt;/p&gt;

&lt;p&gt;Here's a sneak peak at some of the topics we'll be looking at in the next part:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Asset loaders (images, fonts, etc)&lt;/li&gt;
&lt;li&gt;Style loaders (CSS)&lt;/li&gt;
&lt;li&gt;Syntax transformers (Babel)&lt;/li&gt;
&lt;li&gt;Supporting React (JSX) and Typescript&lt;/li&gt;
&lt;li&gt;Webpack dev server&lt;/li&gt;
&lt;li&gt;Multiple chunks (lazy loading)&lt;/li&gt;
&lt;li&gt;Bundle analysis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please check out the other entries in this series!  Feel free to leave a comment or question and share with others if you find any of them helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-running-a-local-web-server-4d8g"&gt;Understanding the Modern Web Stack: Running a Local Web Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/building-a-modern-web-stack-babel-3hfp"&gt;Understanding the Modern Web Stack: Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-1-2mn1/edit"&gt;Understanding the Modern Web Stack: Webpack (Part 1) &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading, and stay tuned!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>webpack</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Multiple Repositories in a Single Azure Pipeline</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Fri, 08 Oct 2021 00:15:55 +0000</pubDate>
      <link>https://dev.to/n3wt0n/multiple-repositories-in-a-single-azure-pipeline-2oe2</link>
      <guid>https://dev.to/n3wt0n/multiple-repositories-in-a-single-azure-pipeline-2oe2</guid>
      <description>&lt;p&gt;Did you know you can specify multiple repositories in one Azure DevOps YAML Pipeline and cause it to trigger by updates to any of the repositories? Let me show you how&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6CXaEDEZZRM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/6CXaEDEZZRM"&gt;Link to the video: https://youtu.be/6CXaEDEZZRM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-basic-pipeline"&gt;
  &lt;/a&gt;
  Step 1: Basic Pipeline
&lt;/h3&gt;

&lt;p&gt;Let's start from a very simple pipeline definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;

&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;checkout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;self&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dir $(Build.SourcesDirectory)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing much to see here, just a pipeline that uses it's own repo and prints out the content after checkout&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-add-more-repos"&gt;
  &lt;/a&gt;
  Step 2: Add More Repos
&lt;/h3&gt;

&lt;p&gt;Let's now make it a little more interesting, adding some additional repos to it. We will use the &lt;code&gt;resources&lt;/code&gt; section for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;repositories&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tools&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyProject/tools&lt;/span&gt;
    &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case we are adding a repository named &lt;strong&gt;&lt;em&gt;tools&lt;/em&gt;&lt;/strong&gt; that belongs to the Azure DevOps Project &lt;strong&gt;&lt;em&gt;MyProject&lt;/em&gt;&lt;/strong&gt; and we tell Azure Pipelines to "consider" the branch &lt;strong&gt;&lt;em&gt;main&lt;/em&gt;&lt;/strong&gt; (&lt;em&gt;I'll explain in a moment what I mean by that&lt;/em&gt;) and to use &lt;strong&gt;&lt;em&gt;tools&lt;/em&gt;&lt;/strong&gt; as reference name for it.&lt;/p&gt;

&lt;p&gt;We can also &lt;strong&gt;reference a GitHub repository&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyGitHubRepo&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github&lt;/span&gt;
    &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyGitHubServiceConnection&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyGitHubOrgOrUser/MyGitHubRepo&lt;/span&gt;
    &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;releases/123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty similar to the other example, but to connect to GitHub we had to specify the &lt;strong&gt;service connection&lt;/strong&gt; name (in the &lt;em&gt;endpoint&lt;/em&gt; parameter). Note that here the &lt;strong&gt;&lt;em&gt;reference name&lt;/em&gt;&lt;/strong&gt; is &lt;em&gt;MyGitRepo&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Finally, we can also add repositories in &lt;strong&gt;another Azure DevOps Organization&lt;/strong&gt;, in a similar way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyOtherAzureReposGitRepository&lt;/span&gt; 
    &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;OtherOrgAzureReposGitServiceConnection&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;OtherProject/MyAzureReposGitRepo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to use the &lt;strong&gt;service connection&lt;/strong&gt; as well, because we are going to connect to another organization. Note that in this case we haven't specified the branch (which is indeed optional).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-the-triggers"&gt;
  &lt;/a&gt;
  Step 3: The Triggers
&lt;/h3&gt;

&lt;p&gt;At this point we have all our repositories referenced in the workflow, but the pipeline still triggers only on the local repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want it to be triggered also from another repo, we can add a trigger section to the repository definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tools&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyProject/tools&lt;/span&gt;
    &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
    &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;release&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, with the above snippet our pipeline will be triggered every time a change occurs in wither the &lt;em&gt;dev&lt;/em&gt; or the &lt;em&gt;release&lt;/em&gt; branches of our &lt;em&gt;tools&lt;/em&gt; repo.&lt;/p&gt;

&lt;p&gt;What about the &lt;em&gt;main&lt;/em&gt; branch specified above too, you ask? well, that is not for the triggers... (&lt;em&gt;I know, confusing... keep reading and you'll know ;)&lt;/em&gt; )&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At the time of writing, triggers work only for additional repositories in Azure DevOps, in the same organization where the Pipeline is defined. GitHub repos and other repos defined as resources cannot be used for triggering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-4-using-the-code"&gt;
  &lt;/a&gt;
  Step 4: Using The Code
&lt;/h3&gt;

&lt;p&gt;We now have our pipelines that is triggered by multiple repos. It's very likely that you would want to also use the code for those additional repos, right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;checkout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyGitHubRepo&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;checkout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tools&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;checkout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyOtherAzureReposGitRepository&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just add the checkout then. As you can see, we use the &lt;em&gt;reference name&lt;/em&gt; we've specified in the resources section to let the &lt;code&gt;checkout&lt;/code&gt; step know what we want it to do.&lt;/p&gt;

&lt;p&gt;And here is finally where the branch in the &lt;code&gt;ref&lt;/code&gt; parameter comes into play, because it is &lt;strong&gt;the branch that will be checked out&lt;/strong&gt;:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Repo&lt;/th&gt;
&lt;th&gt;Branch Checkout&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;self&lt;/td&gt;
&lt;td&gt;&lt;em&gt;default branch&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tools&lt;/td&gt;
&lt;td&gt;main&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MyGitRepo&lt;/td&gt;
&lt;td&gt;releases/123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MyAzureReposGitRepo&lt;/td&gt;
&lt;td&gt;&lt;em&gt;default branch&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don't specify a path in the checkout step, Azure Pipelines will use the name of the repository to create the folder, not the repository value which is used to reference the repository in the checkout step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#all-together"&gt;
  &lt;/a&gt;
  All Together
&lt;/h3&gt;

&lt;p&gt;With all we have added, our pipeline will now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;repositories&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tools&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyProject/tools&lt;/span&gt;
    &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
    &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;release&lt;/span&gt;

  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyGitHubRepo&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github&lt;/span&gt;
    &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyGitHubServiceConnection&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyGitHubOrgOrUser/MyGitHubRepo&lt;/span&gt;
    &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;releases/123&lt;/span&gt;

  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyOtherAzureReposGitRepository&lt;/span&gt; 
    &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;OtherOrgAzureReposGitServiceConnection&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;OtherProject/MyAzureReposGitRepo&lt;/span&gt;

&lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;

&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;checkout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;self&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;checkout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyGitHubRepo&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;checkout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tools&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;checkout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyOtherAzureReposGitRepository&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dir $(Build.SourcesDirectory)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can try it out and you'll see (thanks to the last step) that all the code from the 4 repos is there for you to be used &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;This feature is useful, for example, if you want to &lt;strong&gt;consume a tool or a library&lt;/strong&gt; from a different repository and you want to run tests for your application whenever the tool or library is updated.&lt;/p&gt;

&lt;p&gt;It is also good if you keep your &lt;strong&gt;YAML file in a separate repository&lt;/strong&gt; from the application code and you want to trigger the pipeline every time an update is pushed to the application repository.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below how you think this feature can relate to your processes.&lt;/p&gt;

&lt;p&gt;Also, checkout &lt;a href="https://youtu.be/hJsMq35KAMk"&gt;this video&lt;/a&gt;, where I talk about how to Run a job next in Azure Pipelines&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6CXaEDEZZRM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>azuredevops</category>
      <category>devops</category>
      <category>cicd</category>
      <category>azure</category>
    </item>
    <item>
      <title>FEEDBACK REQUESTED: We're building a way to understand your internet self</title>
      <author>Hugo Montenegro</author>
      <pubDate>Thu, 07 Oct 2021 23:26:58 +0000</pubDate>
      <link>https://dev.to/hm/feedback-requested-we-re-building-a-way-to-understand-your-internet-self-180</link>
      <guid>https://dev.to/hm/feedback-requested-we-re-building-a-way-to-understand-your-internet-self-180</guid>
      <description>&lt;p&gt;Hey Everyone! I've recently started working on a new project with a good friend of mine, and we're hoping to get some feedback.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;landing page&lt;/strong&gt; is here: &lt;a href="http://www.montfor.com"&gt;www.montfor.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;problem&lt;/strong&gt; we're trying to solve: You browse hundreds of websites daily, every day. And yet if you want to look at your history in a &lt;em&gt;comprehensible&lt;/em&gt; way, it's really hard. I learn a ton of stuff online (blogposts, articles, tweets, youtube videos, etc...) and yet I have no overview of what I've learned when/where. I'd love to have that kind of organization, and that's what we're trying to build.&lt;/p&gt;

&lt;p&gt;The long term &lt;strong&gt;vision&lt;/strong&gt;: Long-term, we want to not only give you awesome visualizations and ways to organize and review your activity, but also offer a way to help self-learners prove what they learn online. Currently if you learn topics on your own outside of university or the like you get no proof, no certificate, no nothing. We're hoping we can change that, and provide our own certificate that states person X has spent ZZZ active hours on topic Y, and is therefore an expert in it and a  top candidate.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;revenue&lt;/strong&gt; model: We're unsure about this yet, but we have a few ideas. We could either connect our users with companies and offer them interviews, receiving a hiring commission in the process (these are generally really high, but it's a big hassle to act as a hiring agency). We could also provide content recommendations á la youtube homepage or instagram explore (should be good since they're based on your activity) where we sprinkle ads in, or just make the software paid. Suggestions welcome! What we never want to do is sell users data (I'm personally huge advocate against that).&lt;/p&gt;

&lt;p&gt;Since we're really early stage, we'd love to have some feedback! Give me your worst :P&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to add redux-persist in your react/react-native application</title>
      <author>Ahsan Ihsan</author>
      <pubDate>Thu, 07 Oct 2021 22:36:33 +0000</pubDate>
      <link>https://dev.to/ahsanihsan/how-to-add-redux-persist-in-your-react-react-native-application-4i4f</link>
      <guid>https://dev.to/ahsanihsan/how-to-add-redux-persist-in-your-react-react-native-application-4i4f</guid>
      <description>&lt;p&gt;After adding redux in our applications. We mostly come accross the problem of data being wiped once the browser tab is refreshed. &lt;/p&gt;

&lt;p&gt;To our help we have &lt;a href="https://www.npmjs.com/package/redux-persist"&gt;redux-persist&lt;/a&gt; library which helps us persisting the data of our store even after the web page is closed or refreshed.&lt;/p&gt;

&lt;p&gt;It's very simple to add &lt;code&gt;redux-persist&lt;/code&gt; in our application that uses &lt;code&gt;redux&lt;/code&gt; already.&lt;/p&gt;

&lt;p&gt;Once you setup your redux this is how typically you configure redux store inside your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

// Redux Imports
import { Provider } from "react-redux";
import Reducer from "./Redux/Reducer";
import { createStore } from "redux";

const store = createStore(Reducer);

function App() {
  return (
    &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;/Provider&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Step 1: Install Redux Persist &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can install &lt;code&gt;redux-persist&lt;/code&gt; using &lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn install redux-persist&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install redux-persist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After that we need to do the following imports from &lt;code&gt;redux-persist&lt;/code&gt; library that you just installed.&lt;br&gt;
You have to import them inside the component where you are initialising your redux store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { persistStore, persistReducer } from "redux-persist";
import { PersistGate } from "redux-persist/integration/react";
import storage from "redux-persist/lib/storage";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we have to define the configuration for redux persist store&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const persistConfig = {
  key: "root",
  storage,
};

const persistedReducer = persistReducer(persistConfig, Reducer);

const store = createStore(persistedReducer);
let persistor = persistStore(store);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding the above code snippet all you need to do is, to wrap your component inside &lt;code&gt;PersistGate&lt;/code&gt; which helps in delaying the rendering of our app's UI until your persisted state has been retrieved and saved to redux.&lt;/p&gt;

&lt;p&gt;Our final code for &lt;code&gt;App.js&lt;/code&gt; or any file where you are initialising your store is gonna look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

// Redux Imports
import { Provider } from "react-redux";
import Reducer from "./Redux/Reducer";
import { createStore } from "redux";

// Components import
import ListTodos from "./Screen/ListTodos";

// Redux Persist
import { persistStore, persistReducer } from "redux-persist";
import { PersistGate } from "redux-persist/integration/react";
import storage from "redux-persist/lib/storage";

const persistConfig = {
  key: "root",
  storage,
};

const persistedReducer = persistReducer(persistConfig, Reducer);

const store = createStore(persistedReducer);
let persistor = persistStore(store);

function App() {
  return (
    &amp;lt;Provider store={store}&amp;gt;
      &amp;lt;PersistGate loading={null} persistor={persistor}&amp;gt;
        &amp;lt;ListTodos /&amp;gt;
      &amp;lt;/PersistGate&amp;gt;
    &amp;lt;/Provider&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila, you have your redux-persist settled in your application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ahsanihsan/redux-tutorial"&gt;Here's&lt;/a&gt; is a working Todo Application that uses redux persist to store Todos.&lt;/p&gt;

&lt;p&gt;For further explanation we can talk about what those different methods are doing in above code snippets.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;persistStore()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;persistStore method accept a store parameter which is going to be the store that it's gonna persist. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;persistReducer()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In persistReducer method you have to pass the config of persist and the reducer that you created so it helps the package to load the data and initialise the actual redux store.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PersistGate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PersistGate component accepts the persistStore() as a prop and it wraps our application code inside of it which helps in delaying the rendering of our app's UI until the persisted state has been retrieved and saved to redux. It also provides a &lt;code&gt;loading&lt;/code&gt; prop which can show any component such as an Activity Indicator to tell the user that the data is being loaded.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>javascript</category>
      <category>redux</category>
    </item>
    <item>
      <title>Vulkan - some introductory words</title>
      <author>Philipp Renoth</author>
      <pubDate>Thu, 07 Oct 2021 22:17:53 +0000</pubDate>
      <link>https://dev.to/daaitch/vulkan-some-introductory-words-1kna</link>
      <guid>https://dev.to/daaitch/vulkan-some-introductory-words-1kna</guid>
      <description>&lt;h1&gt;
  &lt;a href="#a-new-graphics-api-was-born"&gt;
  &lt;/a&gt;
  A new graphics API was born
&lt;/h1&gt;

&lt;p&gt;There are a few popular "low-level" graphic APIs available like OpenGL, DirectX, Metal and Vulkan. Depending on your requirements you had to pick one or use some higher-level graphic abstractions to be able to develop for multiple platforms with a single code base.&lt;/p&gt;

&lt;p&gt;For a long time, before Vulkan, only OpenGL was "cross-platform". OpenGL wasn't famous for its performance and therefore often not supported by AAA-games. Most of them use DirectX on Windows.&lt;/p&gt;

&lt;p&gt;Now it's 202x. It feels a bit like waste of time, that we need to use different graphic APIs on different operating systems using exactly the same hardware under the hood. Only with OpenGL it was possible, but the amount of resource overhead needed to for example run a game with OpenGL compared to the same settings on Windows with DirectX seems to be a dealbreaker for most game companies.&lt;/p&gt;

&lt;p&gt;The next milestone towards cross-platform graphic APIs was set in 2016 with Vulkan. Behind its development is none other than the Khronos Group, well-known for OpenGL and many other open standards. In 2018 commercial Apple drivers (MoltenVK) for Vulkan got open-sourced and since then free to use.&lt;/p&gt;

&lt;p&gt;Vulkan is also well suited for mobile devices. We were talking about resources and performance on desktop machines. Well, mobile device app developers should also care a lot about performance and Vulkan can help, especially superseding OpenGL ES.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-start-writing-a-vulkan-application"&gt;
  &lt;/a&gt;
  How to start writing a Vulkan application?
&lt;/h1&gt;

&lt;p&gt;I think most of us using a new API just read through some specs and finally start. That's possible, but without a good background you will not understand it at all. The next thing is, that a simple "hello world" triangle in a Vulkan C++ application has about 600 lines of code. Changing its color per frame, double/triple buffering or input vertex buffers easily takes you beyond a thousand lines of code. And I think that's also the moment, when developers suddenly start feeling fine with OpenGL. But don't despair, it's not too hard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-compare-some-vulkan-and-opengl-code"&gt;
  &lt;/a&gt;
  1. Compare some Vulkan and OpenGL code
&lt;/h2&gt;

&lt;p&gt;Comparing 600 lines of C++ code using Vulkan to 100 lines for OpenGL should maybe make us think what OpenGL is doing behind the scenes. One of the big changes coming from OpenGL is that state changes are now not only expensive in performance, but also in writing additional code. In Vulkan we kinda pre-bake graphic pipelines and run pre-recorded command buffers so e.g. changing to wireframe rendering would be maybe another graphic pipeline with an almost identical setup. At least it's not just one &lt;code&gt;gl...&lt;/code&gt; call in the render loop.&lt;/p&gt;

&lt;p&gt;The reason why everything seems to get more complicated is because we give more detailed information to the Vulkan driver, so optimizations are better. In OpenGL everything can happen at any time and the driver needs to be very smart. The good thing on the other hand side is that the render loop is much more compact. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-understand-why-some-vulkan-boilerplate-is-necessary-to-get-the-most-out-of-the-hardware"&gt;
  &lt;/a&gt;
  2. Understand why some Vulkan boiler-plate is necessary to get the most out of the hardware
&lt;/h2&gt;

&lt;p&gt;A good starting point without copying code from tutorials not knowing what it does is to understand how today's hardware is working. E.g. before Vulkan I haven't heard of tiling. I could not understand why linear reading from an image buffer storing it like a screenshot is maybe not possible. But after reading about hardware and caching it absolutely makes sense.&lt;/p&gt;

&lt;p&gt;Kudos to Samsung's &lt;a href="https://developer.samsung.com/galaxy-gamedev/resources.html"&gt;Galaxy GameDev pages&lt;/a&gt;. You can find some good resources about how graphic hardware works and how Vulkan is working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-getting-comfortable-with-the-base-vulkan-architecture-and-the-first-steps"&gt;
  &lt;/a&gt;
  3. Getting comfortable with the base Vulkan architecture and the first steps
&lt;/h2&gt;

&lt;p&gt;Although there are a lot of good resources, too, I'll try to give a much more compact overview.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vulkan-c-api"&gt;
  &lt;/a&gt;
  Vulkan C API
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Like OpenGL, Vulkan is a dynamic API with spec versions. Depending on the version you should be able to dynamically load function pointers&lt;/li&gt;
&lt;li&gt;There are 3 API-tiers. Every program starts with discovering the hardware setup top-down and finally picks one ore more suitable devices for rendering or computation:

&lt;ul&gt;
&lt;li&gt;entry-point functions&lt;/li&gt;
&lt;li&gt;instance functions&lt;/li&gt;
&lt;li&gt;device functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Function return value is a Vulkan result code or void. All other return values are out parameters. Mostly functions with  void return value are somehow validated at a subsequent API call.&lt;/li&gt;
&lt;li&gt;Functions may return bad result codes for expected errors or simply crash for unexpected input or state. The driver is sometimes not even wasting time for null-checks of pointers just crashing, while there is a so called optional validation layer for debugging and tracking bad usage, like a bad order of destroying handles.&lt;/li&gt;
&lt;li&gt;There is no thread context at all. Handles can be passed to other threads as well. Multi-threading is possible and good for performance, primarily for command buffer operations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#vulkan-architecture-overview"&gt;
  &lt;/a&gt;
  Vulkan architecture overview
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;On top we have so called Vulkan instances, like a context boundary.&lt;/li&gt;
&lt;li&gt;Inside an instance we have physical devices.&lt;/li&gt;
&lt;li&gt;Physical devices can be used to discover hardware features and limits to determine a suitable target device to use&lt;/li&gt;
&lt;li&gt;Out of a physical device, we can create a logical device handle which will be the mostly used handle in the application.&lt;/li&gt;
&lt;li&gt;(Logical) devices have so called (command-) queues to push working items. There are queues for graphic- and presentation operations. It can also be that there is only one queue doing both. Queues are CPU-concurrently overlapping processed and each queue in parallel. We may need synchronization:

&lt;ul&gt;
&lt;li&gt;host sync(hronization) via fences =&amp;gt; CPU thread blocking&lt;/li&gt;
&lt;li&gt;intra-queue sync via semaphores =&amp;gt; disallow overlapping&lt;/li&gt;
&lt;li&gt;inter-queue sync via events =&amp;gt; sync queues&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There are a lot of other objects, like a pipeline, buffers, memory, descriptors and so on, but they are just building blocks for recording command buffers, which are finally submitted one or multiple times.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#vulkan-pseudo-code"&gt;
  &lt;/a&gt;
  Vulkan pseudo code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setup()                     // A
loop {
  i = wait_for_next_image() // B
  update(i)                 // C
  draw_and_present(i)       // D
}

wait_idle()                 // E
teardown()                  // F
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A: setup device, queues, buffers, memory etc.

&lt;ul&gt;
&lt;li&gt;e.g. if we calculate frames ahead, we may need multiple buffers/memory allocations to allow render overlapping with writing buffers&lt;/li&gt;
&lt;li&gt;static immutable buffers can be shared&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;B: as long as the swapchain doesn't have some already presented and not queued image, we stop here&lt;/li&gt;
&lt;li&gt;C: we update whatever we need for index &lt;code&gt;i&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;D: we draw and present &lt;code&gt;i&lt;/code&gt;-th image&lt;/li&gt;
&lt;li&gt;E: before we destroy everything, we need to wait until it's not used anymore&lt;/li&gt;
&lt;li&gt;F: destroy in LIFO-fashion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-go-through-some-tutorials"&gt;
  &lt;/a&gt;
  4. Go through some tutorials
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://vulkan-tutorial.com/"&gt;Vulkan Tutorial eBook + GitHub repo&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Overv/VulkanTutorial/tree/master/code"&gt;step by step source files and shaders&lt;/a&gt; of that tutorial&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp"&gt;SaschaWillems Vulkan example triangle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/KhronosGroup/Vulkan-Guide"&gt;Vulkan Guide for more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-do-your-thing"&gt;
  &lt;/a&gt;
  5. Do your thing
&lt;/h2&gt;

&lt;p&gt;Well, this is where I stop for now. I think I'm somewhere between tutorials and guides and still cannot yet "do my thing", but the more time I spend reading, understanding code and iterating, the less I have to copy code, because "it makes sense".&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Vulkan API is not a "natural" thing like a web shop API. A lot of internals are exposed and it feels like it's overall boiler-plate code, but it's actually about performance, a good memory design, smart and small updates and clear picture about staging work that hardware is never getting idle. All in all progress is sometimes not that easy, but I think for future development it's a good choice to adopt Vulkan - also called glNext as the successor for OpenGL.&lt;/p&gt;

&lt;p&gt;There are a lot of beginner tutorials and expert stuff like ray-tracing and I see a gap in the middle, so I'm planing to share some experience and some of my best practices for intermediate Vulkan content.&lt;/p&gt;

</description>
      <category>vulkan</category>
      <category>opengl</category>
    </item>
    <item>
      <title>Learning Redux - Friendly for Beginners</title>
      <author>Ahsan Ihsan</author>
      <pubDate>Thu, 07 Oct 2021 22:01:40 +0000</pubDate>
      <link>https://dev.to/ahsanihsan/learning-redux-friendly-for-beginners-485c</link>
      <guid>https://dev.to/ahsanihsan/learning-redux-friendly-for-beginners-485c</guid>
      <description>&lt;p&gt;When I started learning Redux, there were very less resources on the web for beginners with less complication and more demonstration to show how Redux works and what is the easiest way to understand the flow of Redux. This article would help you understand both, the theoretical and the practical part of Redux.&lt;/p&gt;

&lt;p&gt;We will be using the following packages to look at how Redux work with ReactJS, it is same on React Native as well.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ReactJS app created with CRA&lt;/li&gt;
&lt;li&gt;React Redux&lt;/li&gt;
&lt;li&gt;React Router&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Theoretical Part&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are three main things that you need to understand about redux&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider store as a local storage but fast. The data fetching and storing is so fast and it's not asynchronous that's why redux is so fast and responsive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actions are just like methods. Major portion of logic building is done in action and you can also use different middle-wares for async requests etc. After that, the action tells the reducer to do something with the data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reducer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reducer is a function that can be called as a decision maker. Action tells the reducer what to do, after the decision reducer changed the state of the store and returns the new one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2cicplnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96xpgecrq0z3xgwyj0l5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2cicplnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96xpgecrq0z3xgwyj0l5.gif" alt="Data Flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at the image above, you can somehow get the idea of how the data is being passed on to the component.&lt;/p&gt;

&lt;p&gt;We can start with the View which is the component you want the data in. You are going to call an action which will perform all the instruction you wrote in it.&lt;/p&gt;

&lt;p&gt;Later on, it will dispatch the action and the reducer inside the store will decide what to do with the action that was dispatched. Now the reducer executes the condition that satisfies the type of action that was dispatched before, and the reducer will then change the old state of the store and return the new one to the component via props.&lt;/p&gt;

&lt;p&gt;We will discuss how the things are working using the props in our practical portion using code snippets, so it becomes more clear!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practical Part&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Practical Part&lt;/p&gt;

&lt;p&gt;For the practical portion we will be creating a very simple todo application like this &lt;a href="https://todosredux.herokuapp.com/"&gt;Link&lt;/a&gt; that will perform a CRUD operation on redux store. To start we will initialise the store first in our application which is created using Create React Application.&lt;/p&gt;

&lt;p&gt;You would have to install react-redux package in your project using npm or yarn.&lt;/p&gt;

&lt;p&gt;For yarn you can use&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add react-redux&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For npm you can use&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install react-redux&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will also be using a middleware to persist the data in store which is optional. Upon refresh it will preserve the previous state of the redux store and your data will not go away!&lt;/p&gt;

&lt;p&gt;To setup the store we will use the App.js and following code snippet which is self explanatory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import "antd/dist/antd.css";
import "./index.css";

// Redux Imports
import { Provider } from "react-redux";
import Reducer from "./Redux/Reducer";
import { createStore } from "redux";

// Components import
import ListTodos from "./Screen/ListTodos";

const store = createStore(Reducer);

function App() {
  return (
    &amp;lt;Provider store={store}&amp;gt;
      &amp;lt;ListTodos /&amp;gt;
    &amp;lt;/Provider&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet you can see that we are using a &lt;code&gt;createStore()&lt;/code&gt; method from redux and passed on to the Provider component. Provider components makes the Redux store available to all the nested components inside the application. &lt;/p&gt;

&lt;p&gt;Inside the Provider component we can write the rest of the code for the application such as routing etc.&lt;/p&gt;

&lt;p&gt;Now we have 2 steps to complete the setup of redux&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reducers&lt;/li&gt;
&lt;li&gt;Actions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reducer is where the structure of our entities will be defined. Following snippet shows how a reducer is defined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  DELETE_A_TODO,
  ADD_A_TODO,
  MARK_TODO_STATUS,
} from "../../Constants/Todos";

const initialState = {
  todosList: [],
};

function todosReducer(state = initialState, action) {
  if (action.type === ADD_A_TODO) {
    return {
      ...state,
      todosList: [action.payload, ...state.todosList],
    };
  }
  if (action.type === MARK_TODO_STATUS) {
    let newObject = [...state.todosList];
    newObject[action.payload.index].status = action.payload.status;
    return {
      ...state,
      todosList: newObject,
    };
  }
  if (action.type === DELETE_A_TODO) {
    let newObject = [...state.todosList];
    let index = newObject.findIndex((item) =&amp;gt; {
      return item.key === action.payload;
    });
    newObject.splice(index, 1);
    return {
      ...state, 
      todosList: newObject,
    };
  }
  return state;
}

export default todosReducer;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see that the reducer is just a function with conditions inside, that will conclude what type of action is to be performed.&lt;/p&gt;

&lt;p&gt;But, if you look at the top. We have the initial value of the store which is just an array of &lt;code&gt;todosList: []&lt;/code&gt; where we will be storing our todos and performing CRUD operations on.&lt;/p&gt;

&lt;p&gt;That is all you need to focus on right now. Once we call different actions. We will look at how the dispatched action is being processed inside the reducer.&lt;/p&gt;

&lt;p&gt;Next up, we will be setting our actions. We will have only three actions in our small application.&lt;/p&gt;

&lt;p&gt;1) Add a todo&lt;br&gt;
2) Mark todo status (Done, Pending)&lt;br&gt;
3) Delete a todo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  ADD_A_TODO,
  MARK_TODO_STATUS,
  DELETE_A_TODO,
} from "../Constants/Todos";

export const addATodo = (todo) =&amp;gt; {
  return {
    type: ADD_A_TODO,
    payload: todo,
  };
};

export const deleteATodo = (key) =&amp;gt; {
  return {
    type: DELETE_A_TODO,
    payload: key,
  };
};

export const markTodoStatus = (data) =&amp;gt; {
  return { type: MARK_TODO_STATUS, payload: data };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The actions above are methods that are returning plain objects. Once the action is dispatched by the component. It goes to the reducer with the type of reducer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is type of the action?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have declared constants of plain strings to keep the code clean. They are just unique strings so the reducer can identify what type of action is dispatched.&lt;/p&gt;

&lt;p&gt;Then, there is a payload key using which you can send any kind of data to the reducer. You can also process the data before sending it to the reducer inside the action. And you can also do the minor customisation of the data inside the reducer. We will be going with the latter one and process the data inside the reducer as they are just minor tasks that will be performed on the todoList inside the reducer state.&lt;/p&gt;

&lt;p&gt;We will move on to the main portion, as the setup for the Redux flow is complete. All you need to do is to dispatch the action and redux will do the magic for you!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dispatching actions inside a view&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before moving towards the code side. We have to discuss three methods&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connect()()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Connect method is provide by react-redux package which allows you to connect any component with the redux tree. So you can have access to the state and dispatch method. You have to pass 2 objects mapDispatchToProps, mapStateToProps which we will talk about later in the next point. And we have to pass the Component that we are working on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mapDispatchToProps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mapDispatchToProps is a plain object in which you pass the actions that you created. And connect will attach the dispatch method with those actions so you can dispatch the actions. The actions will then be accessible via props of the component you passed inside the connect method.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mapStateToProps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mapStateToProps is a method that receives a callback param using which you can access the current state of the entire store. And you can access only the keys of the store that you need inside the function and return it. Once done, those keys will be accessible inside the component via props.&lt;/p&gt;

&lt;p&gt;The snippet below shows how connect uses the component and uses mapDispatchToProps and mapStateToProps to map the state and actions with the component you are in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mapDispatchToProps = {
  markTodoStatus,
  addATodo,
  deleteATodo,
};

const mapStateToProps = (state) =&amp;gt; {
  return {
    todos: state.todos.todosList,
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(ListTodos);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;mapDispatchToProps&lt;/code&gt; is just accepting the actions that we created and sending inside the connect method which will be later accessible inside the component &lt;code&gt;ListTodos&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;mapStateToProps is just accepting the current state of the store and only getting the &lt;code&gt;todosList&lt;/code&gt; from the reducer &lt;code&gt;todos&lt;/code&gt; and returning that inside an object. Which will also be later accessible inside the component.&lt;/p&gt;

&lt;p&gt;Now, this is where the real magic happens. Wherever you are inside the hierarchy of your code. All you need to do is to connect any component with redux and you can utilise the data or change the data anywhere inside the application. That's how the state becomes so easy to manage inside a React app using Redux.&lt;/p&gt;

&lt;p&gt;Last but not least, we need to discuss how we are managing the data inside the reducer that is passed when any action is dispatched. We will follow the whole hierarchy of how the method is dispatched inside the component.&lt;/p&gt;

&lt;p&gt;After using &lt;code&gt;dispatchToProps&lt;/code&gt; parameter in &lt;code&gt;connect()()&lt;/code&gt; method. We will have access to any action that was passed inside &lt;code&gt;dispatchToProps&lt;/code&gt; object. Now you can access that particular action inside your component and call it using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;props.addATodo({
  key: props.todos.length,
  task: "Do Something",
  status: false,
  priority: "Important",
};)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the action is called using the above code snippet it goes to the reducer and looks at what type of action is performed. If you look at the actions we defined we have &lt;code&gt;addATodo&lt;/code&gt; action inside our &lt;code&gt;action.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const addATodo = (todo) =&amp;gt; {
  return {
    type: ADD_A_TODO,
    payload: todo,
  };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it's dispatched the whole flow is shifted towards the reducer. Reducer then looks at what type of action was dispatched and it changes the state of redux store accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (action.type === ADD_A_TODO) {
  return {
    ...state,
    todosList: [action.payload, ...state.todosList],
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we have wrote the instructions to append the payload sent by the action inside the previous state of the store.&lt;/p&gt;

&lt;p&gt;After that you will see that the data will be available in TodoList component. For testing you can place some &lt;code&gt;console.log()&lt;/code&gt; to see how the data is being passed and ends up inside the component. After that if you try to access that data in any component and use &lt;code&gt;mapStateToProps&lt;/code&gt; method. It will return you data even if that component is nested 10 times deep down the hierarchy!&lt;/p&gt;

&lt;p&gt;By this you will get the idea of how the data flow of a very simple application is being controlled. You can have a look at the code the GitHub repository link is here &lt;a href="https://github.com/ahsanihsan/redux-tutorial"&gt;Link&lt;/a&gt;. Fire up the repository code by running &lt;code&gt;yarn install&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt; and see the application in action. You can use this concept to map it in your applications and make your state management easier.&lt;/p&gt;

&lt;p&gt;Last we will be looking at how we can implement the redux persist middleware to make sure once the browser screen is refreshed. The data is not lost and it stays in your application.&lt;/p&gt;

&lt;p&gt;Here is the link to &lt;a href="https://dev.to/ahsanihsan/how-to-add-redux-persist-in-your-react-react-native-application-4i4f"&gt;How to add redux-persist in your react/react-native application&lt;/a&gt;&lt;/p&gt;

</description>
      <category>redux</category>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🧬 JSX at lowest level</title>
      <author>Andrew Luca</author>
      <pubDate>Thu, 07 Oct 2021 21:58:07 +0000</pubDate>
      <link>https://dev.to/iamandrewluca/jsx-at-lowest-level-371b</link>
      <guid>https://dev.to/iamandrewluca/jsx-at-lowest-level-371b</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;this post is a precursor for upcoming JSX posts&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we all heard that JSX is a specific JavaScript syntax that is used by React to render components. Well, I would say JSX is just HTML in JavaScript. Or &lt;strong&gt;J&lt;/strong&gt;ava-&lt;strong&gt;S&lt;/strong&gt;cript-&lt;strong&gt;X&lt;/strong&gt;ml 😂 because HTML is a sibling of XML and children of &lt;a href="https://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language"&gt;SGML&lt;/a&gt;. Or maybe is just &lt;strong&gt;J&lt;/strong&gt;ava-&lt;strong&gt;S&lt;/strong&gt;cript e-&lt;strong&gt;X&lt;/strong&gt;-tended.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When people ask me what is React? I tell them that React is just JavaScript functions that return HTML. And this is basically a template engine.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* ^^^^^^^^^^^^^^^^ */&lt;/span&gt;
&lt;span class="cm"&gt;/*   ^^^ JavaScript */&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"yay"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;lorem ipsum&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="cm"&gt;/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */&lt;/span&gt;
         &lt;span class="cm"&gt;/*       ^^^ HTML                   */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Draft: JSX Specification&lt;br&gt;
XML-LIKE SYNTAX EXTENSION TO ECMASCRIPT&lt;br&gt;
&lt;a href="http://facebook.github.io/jsx/"&gt;http://facebook.github.io/jsx/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, but HTML syntax is allowed only in the DOM, browser JavaScript does not support it. So it means we need to compile that to something that is supported by the browser.&lt;/p&gt;

&lt;p&gt;JSX is just some syntactic sugar that is compiled to valid JavaScript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is JSX Pragma?&lt;br&gt;
&lt;a href="https://www.gatsbyjs.com/blog/2019-08-02-what-is-jsx-pragma/"&gt;https://www.gatsbyjs.com/blog/2019-08-02-what-is-jsx-pragma/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#pragma"&gt;https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#pragma&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the moment it compiles to something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lorem ipsum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; syntax sugar is compiled to &lt;code&gt;React.createElement&lt;/code&gt;. That's why we need to have React imported at the top of the file. Otherwise we will get an runtime error that React cannot be found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Production &lt;a href="https://github.com/facebook/react/blob/6ecad79ccf2c683cb21ac40dee5678358c7b6208/packages/react/src/ReactElement.js#L361"&gt;&lt;code&gt;createElement&lt;/code&gt;&lt;/a&gt; implementation&lt;br&gt;
Development &lt;a href="https://github.com/facebook/react/blob/6ecad79ccf2c683cb21ac40dee5678358c7b6208/packages/react/src/ReactElementValidator.js#L413"&gt;&lt;code&gt;createElement&lt;/code&gt;&lt;/a&gt; implementation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But that was until &lt;a href="https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html"&gt;React v17.0&lt;/a&gt;, &lt;a href="https://babeljs.io/blog/2020/03/16/7.9.0#a-new-jsx-transform-11154httpsgithubcombabelbabelpull11154"&gt;Babel v7.9&lt;/a&gt; and &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-1/#react-17-jsx-factories"&gt;TypeScript v4.1&lt;/a&gt;, because after that they decided to extract JSX creation in a separate factory detached from React, and it is imported automatically 🚀 🚀 🚀 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Production &lt;a href="https://github.com/facebook/react/blob/6ecad79ccf2c683cb21ac40dee5678358c7b6208/packages/react/src/jsx/ReactJSXElement.js#L210"&gt;&lt;code&gt;jsx&lt;/code&gt;&lt;/a&gt; implementation&lt;br&gt;
Development &lt;a href="https://github.com/facebook/react/blob/6ecad79ccf2c683cb21ac40dee5678358c7b6208/packages/react/src/jsx/ReactJSXElementValidator.js#L297"&gt;&lt;code&gt;jsx&lt;/code&gt;&lt;/a&gt; implementation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Are you still here? Let's go deeper 😀 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1wrgDc6j07hAlM7Jml/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1wrgDc6j07hAlM7Jml/giphy.gif" alt="man hard working"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if everything is configured correctly, this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"yay"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;lorem ipsum&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will be compiled to something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;jsx&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react/jsx-runtime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lorem ipsum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In a future stable release (already), React will support a group of new functions for instantiating JSX elements as an alternative to the legacy general-purpose React.createElement function. This will allow optimizing them better in the future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we see that &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; syntax sugar is compiled to &lt;code&gt;jsx(...)&lt;/code&gt; at build time, but what happens with this call at runtime? Well, let's console.log this call.&lt;/p&gt;

&lt;p&gt;When React calls &lt;code&gt;Component&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lorem ipsum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will return:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="na"&gt;$typeof&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react.element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lorem ipsum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Actually there is an open &lt;a href="https://github.com/reactjs/rfcs/pull/107"&gt;RFC&lt;/a&gt; that it seems that in the end React team will decide to compile directly JSX down to this object that is returned.&lt;/p&gt;

&lt;p&gt;And for example if we want to render our &lt;code&gt;Compnent&lt;/code&gt; to the DOM. Having this call&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will be compiled to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="na"&gt;$typeof&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react.element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;rootElement&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the end our components are just some functions that return some objects that represent what we want rendered. So when we create our components, what we return is not what is rendered. ReactDOM calls our function components with some props, see this object definition that is returned and decides what and how to render on the screen. And JSX? JSX is just some syntax that is familiar to us because we know HTML.&lt;/p&gt;

&lt;p&gt;But now we know that till our component goes down to ReactDOM it passes through some steps and transformations.&lt;/p&gt;

&lt;p&gt;Also JSX is no more a React only thing, it's already used in a lot of projects, like vue, stenciljs, dom-chef, and many others...&lt;/p&gt;

&lt;p&gt;Have a feeling that noone is reading these articles 😀 &lt;br&gt;
Thanks reader if you are here! ♥️ &lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@alexkixa?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Alexandre Debiève&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/transistor?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>jsx</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Making beautiful websites: Top 5 FREE icon resources</title>
      <author>martin krause</author>
      <pubDate>Thu, 07 Oct 2021 21:33:38 +0000</pubDate>
      <link>https://dev.to/martinkr/making-beautiful-websites-top-5-free-icon-resources-3apd</link>
      <guid>https://dev.to/martinkr/making-beautiful-websites-top-5-free-icon-resources-3apd</guid>
      <description>&lt;p&gt;Add high quality icon to your next website to enhance the design and the usability at the same time. &lt;/p&gt;

&lt;p&gt;Check out the top five resources for amazing icons ready to use - and make your next design stand out from the crowd.&lt;/p&gt;

&lt;p&gt;PS: Don't forget to check the &lt;em&gt;bonus link&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;PPS: All of these free icons have slightly different licenses (so please check them), but they are free to use in private and commercial work. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fontawesome"&gt;
  &lt;/a&gt;
  &lt;a href="https://fontawesome.com"&gt;Fontawesome&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;More than 7800 icons designed on a grid for pixel-perfect display ready to go makes fontawesome the web's most popular icon set and toolkit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#icomoon"&gt;
  &lt;/a&gt;
  &lt;a href="https://icomoon.io"&gt;IcoMoon&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;More than 5500 free vector fonts designed on a precise pixel grid. The IcoMoon app lets you build and use your own icon packs and download them as SVG, Polymer, PDF, XAML, CSH, icon font with ligatures, or good old PNG/CSS sprites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#material-icons"&gt;
  &lt;/a&gt;
  &lt;a href="https://mui.com/components/material-icons/"&gt;Material icons&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;More than 1700 icons created by google, each in five different themes and available as a React component. The to-go-solution if you are following the Material Design guidelines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#health-icons"&gt;
  &lt;/a&gt;
  &lt;a href="https://healthicons.org"&gt;Health icons&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;More than 1100 icons covering every aspect from blood type to health vehicles. Free and open source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weather-icons"&gt;
  &lt;/a&gt;
  &lt;a href="https://erikflowers.github.io/weather-icons/"&gt;Weather icons&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;More than 220 weather themed icons, ready to be dropped right into your project as icon font. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-absurddesign"&gt;
  &lt;/a&gt;
  Bonus: &lt;a href="https://absurd.design"&gt;absurd.design&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Absurd illustrations for your projects. Beautiful drawings for an individual journey through your own imagination. Perfect for landing pages, quirky designs and your next website.&lt;br&gt;
Don't forget to check the &lt;a href="https://absurd.design/license.html"&gt;license&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Have fun and if you &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt; I can stay awake and write another post ;)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Fluree in Docker - A Single Instance</title>
      <author>Trey Botard</author>
      <pubDate>Thu, 07 Oct 2021 21:25:12 +0000</pubDate>
      <link>https://dev.to/fluree/fluree-in-docker-a-single-instance-15i8</link>
      <guid>https://dev.to/fluree/fluree-in-docker-a-single-instance-15i8</guid>
      <description>&lt;p&gt;Managing dependencies is a pain in the tuchus. Whether in the cloud, in a private data center, or just on your laptop, ensuring that you have the correct version of Java or Node or whatever other runtime works properly with both the application and the OS and all of the other dependencies can quickly turn into a nightmare. Docker solves this by bundling all of the dependencies together in a single image such that as long as the Docker runtime is deployed on the target infra, your app should function as desired. No muss, no fuss. 🥳&lt;/p&gt;

&lt;p&gt;Let's walk through the set up necessary to get your Fluree backend up and running. (Deployment to a public cloud will be out of scope for this post). This will be the first of a 3 part series on working with Fluree in Docker. The next one will be about setting up a Transactor Group!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To begin with, you will need to have Docker on your machine. Please visit the &lt;a href="https://www.docker.com/get-started"&gt;Docker Getting Started Docs&lt;/a&gt; to get it set up, if you don't have it configured already.&lt;br&gt;
Once Docker is installed and running you will need to grab the &lt;a href="https://hub.docker.com/r/fluree/ledger"&gt;Fluree ledger image&lt;/a&gt; from DockerHub. The &lt;a href="https://docs.docker.com/engine/reference/run/"&gt;Docker CLI&lt;/a&gt; is a great tool for managing images on your machine. We will use the &lt;code&gt;docker pull&lt;/code&gt; command to grab the fluree/ledger image. Open a terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker pull fluree/ledger:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the time of writing, this will pull the 1.0.0 beta 15 ledger image from Docker Hub, which is the most up-to-date version of Fluree. Once the Fluree ledger 1.0.0 is released, beta releases will go under their own tag. At any time, you can pull a specific release, if that is needed. You would simply define the image to pull using the tag like this: &lt;code&gt;fluree/ledger:1.0.0-beta14&lt;/code&gt;.&lt;br&gt;
You can see all of the release tags for Fluree in our &lt;a href="https://github.com/fluree/ledger/tags"&gt;Github Repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#set-up-and-run-the-container"&gt;
  &lt;/a&gt;
  Set up and run the container
&lt;/h2&gt;

&lt;p&gt;Ok, you have the image, now what?&lt;br&gt;
There are a couple of parameters which Fluree needs in order to start up correctly.&lt;br&gt;
These can be passed in when starting the container using the &lt;code&gt;docker run&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;You can simply start the image by calling &lt;code&gt;docker run fluree/ledger&lt;/code&gt;, but this will not expose the ports you will need to have in order to use the HTTP endpoints. Internally, Fluree listens on port 8090 for the HTTP calls, so this port will need to be mapped to an exposed, public port on the container. This can be done with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -p 8090:8090 fluree/ledger
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ports correspond to ExternalPort:InternalPort. So, if you have 2 containers running, you will need to map the first of the two to a different port and leave the second number as-is because that is the port which Fluree is listening on. So for your second container, you would pass &lt;code&gt;-p 8091:8090&lt;/code&gt; or some other port number of your choosing.&lt;br&gt;
This spins up Fluree inside of your container, you will see the default configs print to the terminal and some messages about the consensus and state of the server. You can see the container and some metadata by running &lt;code&gt;docker ps&lt;/code&gt; in another terminal.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#naming-your-container"&gt;
  &lt;/a&gt;
  Naming your Container
&lt;/h3&gt;

&lt;p&gt;By default, Docker will assign your container both a CONTAINER_ID and a NAME, which you can see via the &lt;code&gt;docker ps&lt;/code&gt; command or in the Docker Desktop UI. The name will be 2 randomly assigned words, but you can name your container when you initialize it with the &lt;code&gt;docker run&lt;/code&gt; command. This is useful because you can then use that name to restart your container, if you stop it for whatever reason. (At this point stopping the container will lose any data, but in a bit, we will connect the container's file system to a local directoy for data persistence 🙌). You can do this by adding the &lt;code&gt;--name&lt;/code&gt; flag to the &lt;code&gt;run&lt;/code&gt; command, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -p 8090:8090 --name ledger1 fluree/ledger
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when you run &lt;code&gt;docker ps&lt;/code&gt;, the NAMES field will be &lt;code&gt;ledger1&lt;/code&gt; instead of a randomized pair of words.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One caveat to using the &lt;code&gt;--name&lt;/code&gt; flag is that if you stop your container or kill the terminal, that name will still be associated with that container. So you may need to run &lt;code&gt;docker rm ledger1&lt;/code&gt; to remove the container, if you want to &lt;code&gt;docker run&lt;/code&gt; with the name ledger1 again. (This applies to the randomly-assigned container names as well. They will exist on the machine until they are removed.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#interacting-with-your-instance"&gt;
  &lt;/a&gt;
  Interacting with your Instance
&lt;/h2&gt;

&lt;p&gt;Now that your ledger is up and running on your machine, there are a few ways for you to interact with the ledger.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#admin-ui"&gt;
  &lt;/a&gt;
  Admin UI
&lt;/h3&gt;

&lt;p&gt;Every instance of Fluree contains a small uitility for working with the ledgers, called the AdminUI. This is a browser based UI maintained by the Fluree team for working with instances of Fluree, whether as a single instance or in a transactor group. Once you have your Fluree instance ready with the HTTP port exposed, you can start the Admin UI by going to &lt;code&gt;http://localhost:[EXPOSED PORT]&lt;/code&gt; in your browser.&lt;br&gt;
If you used the command above to start up your instance, use 8090 for the &lt;code&gt;[EXPOSED PORT]&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We have a &lt;a href="https://youtube.com/c/fluree"&gt;YouTube&lt;/a&gt; video walkthrough of the AdminUI coming soon.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#http-calls"&gt;
  &lt;/a&gt;
  HTTP Calls
&lt;/h3&gt;

&lt;p&gt;Fluree also contains an HTTP client which exposes several &lt;a href="https://docs.flur.ee/api/1.0.0/downloaded-endpoints/downloaded-examples"&gt;HTTP endpoints&lt;/a&gt; for programmatically working with Fluree. Any of these endpoints can be hit by calling &lt;a href="http://localhost:8090/fdb/%5Bendpoint%5D"&gt;http://localhost:8090/fdb/[endpoint]&lt;/a&gt; or if the endpoint is ledger specific &lt;a href="http://localhost:8090/fdb/%5Bnetwork%5D/%5Bdb%5D%5Bendpoint%5D"&gt;http://localhost:8090/fdb/[network]/[db][endpoint]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At startup, there are no dbs on your instance, so it is recommended to start by using the &lt;a href="https://docs.flur.ee/api/1.0.0/downloaded-endpoints/downloaded-examples#new-db"&gt;/new-db&lt;/a&gt; endpoint first.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-a-persistent-volume"&gt;
  &lt;/a&gt;
  Create a Persistent Volume
&lt;/h2&gt;

&lt;p&gt;Fluree is a ledger and database. Both of these things require persisting data, which Docker does by default, but we'll want to configure it ourselves. To do that, we will need to do what is called mounting a volume to the container. This volume will live on after the container is spun down or goes offline for some reason in the place where we told it to be.&lt;/p&gt;

&lt;p&gt;Fluree already has a mechanism for writing to a file system. In fact, there is a customizable parameter which enables you to specify the path in the file system where you would like Fluree to write its data. You can see all of the &lt;a href="https://docs.flur.ee/docs/1.0.0/getting-started/fluree-anywhere#config-options"&gt;configuration options&lt;/a&gt; in the docs. The config we are interested in now is &lt;code&gt;fdb-storage-file-directory&lt;/code&gt;. By default, this is set to &lt;code&gt;/var/lib/fluree&lt;/code&gt; whether Fluree is being run in a container or in a JVM directly on a server. This means we can use some functionality in the Docker CLI to bind a directory in our local filesystem to this directory &lt;em&gt;inside&lt;/em&gt; the container. Docker run has a flag called --volume (aliased to -v) where you can specify the two directories to be bound together. It will look like this &lt;code&gt;-v "[local/path/to/dir]:[container/path/to/dir]"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For my example, I will tell my container to bind to &lt;code&gt;Users/treybotard/Projects/fluree-data/docker-blog/&lt;/code&gt;. To put this together with the &lt;code&gt;run&lt;/code&gt; command from above; your command should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -p 8090:8090 -v "/Users/treybotard/Projects/fluree-data/docker-blog/:/var/lib/fluree" fluree/ledger
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that I've run this command, I can open up the AdminUI, add a new ledger to my Fluree instance, and when I path to my docker-blog folder, I will see 2 folders, &lt;code&gt;group/&lt;/code&gt; and &lt;code&gt;ledger/&lt;/code&gt;. These are the folders Fluree uses to maintain raft logs (in &lt;code&gt;group/&lt;/code&gt;) and the encrypted indexes (in &lt;code&gt;ledger/&lt;/code&gt;). I'm not going to go into too much detail here about this structure. If you are interested in reading more about how Fluree maintains the &lt;a href="https://docs.flur.ee/guides/1.0.0/architecture/indexes"&gt;indexes&lt;/a&gt; or how Fluree interacts with the &lt;a href="https://docs.flur.ee/guides/1.0.0/infrastructure/file-system"&gt;file system&lt;/a&gt; you can read more in the docs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-key-file"&gt;
  &lt;/a&gt;
  Private key file
&lt;/h3&gt;

&lt;p&gt;When using the &lt;code&gt;--volume&lt;/code&gt; command to persist your data outside of the container, if a private key is not provided on start-up, Fluree will create a default private key. This key (whether provided or generated at startup) is used for a few access controls in developement mode. What this means is that if you want to reuse the same identity to access the persisted data, you will need to store your key outside of the container and pass it in when spinning up a fresh container. This can be done a few different ways, but for simplicity's sake, we'll just look at passing the private key into the container as an environment variable with &lt;code&gt;-e&lt;/code&gt;. Using an environment variable requires passing in &lt;code&gt;-e FDB_GROUP_PRIVATE_KEY=[PRIVATE_KEY]&lt;/code&gt; when starting the container.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now our command looks like this:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -p 8090:8090 -v "/Users/treybotard/Projects/fluree-data/Docker-blog/:/var/lib/fluree" --name ledger1 -e FDB_GROUP_PRIVATE_KEY=123456789 fluree/ledger:latest
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#docker-start-and-stop"&gt;
  &lt;/a&gt;
  Docker start and stop
&lt;/h2&gt;

&lt;p&gt;One very convient way to maintain my development environment is to use the &lt;code&gt;--name&lt;/code&gt; flag on a container with a volume mounted on it. What this enables is the &lt;code&gt;stop&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; functionality in the Docker CLI. If i have a container specifically for a client project or a demo I am working on, I give it a meaningful name "docker-blog" and mount it to a volume stored next to the source code where I am working. I can then conveniently run &lt;code&gt;docker start docker-blog&lt;/code&gt; when I am ready to work on the container, it knows which ports to uses and can spin up the container exactly the way it was when I ran &lt;code&gt;docker stop docker-blog&lt;/code&gt; when I stopped working on it before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-convenience-commands-and-flags"&gt;
  &lt;/a&gt;
  Other Convenience Commands and Flags
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-rm-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;--rm&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;If you are just testing out some some ledgers and are making some throw-away ledgers, I recommend adding the &lt;code&gt;--rm&lt;/code&gt; flag. Going to spin up a named container which you forgot to spin down, but getting an error that the container name already exists gets old quickly. This will remove the container when you either CTRL+C or send SIGINT to the container some other way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-d-endraw-and-raw-attach-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;-d&lt;/code&gt; and &lt;code&gt;attach&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;If you have been spun up a Fluree container before, you will have seen that the output is relatively chatty. One easy way to not have to see that in your terminal is to pass the &lt;code&gt;-d&lt;/code&gt; flag when starting up the container. This will run Fluree in a detached process and not print to the console. You can run &lt;code&gt;docker attach [container name]&lt;/code&gt; to reattach to the console and see the logs in your terminal. If you didn't give the container a name, you can look it up with &lt;code&gt;docker ps -a&lt;/code&gt; to see all the containers, including the ones which are stopped.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-docker-exec-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;docker exec&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Sometimes, it can be very useful to have a bash terminal inside a running container &lt;em&gt;while Fluree is running&lt;/em&gt;. You can use the &lt;code&gt;docker exec&lt;/code&gt; command to run a command inside a running container. One useful way which I use this is to run &lt;code&gt;docker exec -it [container name] /bin/bash&lt;/code&gt;. This opens a bash terminal in the working directory of my container where Fluree is running.&lt;/p&gt;

&lt;p&gt;It can also be useful to access the file system in a container with Fluree inside it, even when Fluree is not running. To startup a container without initializing Fluree, you need to use &lt;code&gt;docker run&lt;/code&gt;, but override the &lt;code&gt;--entrypoint&lt;/code&gt;. That looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -it --entrypoint=bash fluree/ledger
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start up a container and give you a bash terminal with which to explore.&lt;/p&gt;

&lt;p&gt;With these commands, a large percentage of the functionality needed to work with Fluree locally can be achieved. Next week, we'll take a look at how to set up a Transactor Group (several Fluree instances networked together) in Docker using similar commands &lt;em&gt;and&lt;/em&gt; Docker compose!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>fluree</category>
      <category>blockchain</category>
      <category>database</category>
    </item>
    <item>
      <title>How to add forms to Notion</title>
      <author>Y Ahn (Yawn)</author>
      <pubDate>Thu, 07 Oct 2021 21:22:33 +0000</pubDate>
      <link>https://dev.to/up_to_nonsense/how-to-add-forms-to-notion-38dg</link>
      <guid>https://dev.to/up_to_nonsense/how-to-add-forms-to-notion-38dg</guid>
      <description>&lt;p&gt;Hi Dev.To! This article will explain how to integrate forms with Notion with &lt;a href="https://commotion.page"&gt;Commotion.Page&lt;/a&gt;. With Commotion, you can create forms that you can embed in Notion pages and that save results into a Notion database, so you never need to leave the platform. Here's how you get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-a-notion-database"&gt;
  &lt;/a&gt;
  1. Create a Notion database
&lt;/h3&gt;

&lt;p&gt;This one is fairly straightforward. Go into your Notion workspace and create a Notion database like below.&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NPv0vnXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/createDatabase.59a785ea.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NPv0vnXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/createDatabase.59a785ea.gif" alt="Create a Database"&gt;&lt;/a&gt;&lt;br&gt;
  From here, you can add and remove columns to fit what you need. Each column can have a specified type, like a number, text, email, file, etc.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-create-a-commotion-account"&gt;
  &lt;/a&gt;
  2. Create a Commotion account
&lt;/h3&gt;

&lt;p&gt;Head over to &lt;a href="https://commotion.page"&gt;&lt;b&gt;Commotion.page&lt;/b&gt;&lt;/a&gt; and sign up for an account. It's a freemium service, so sign up and check it out for free for as long as you like and upgrade to Pro only when you want!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-connect-to-your-notion-account"&gt;
  &lt;/a&gt;
  3. Connect to your Notion account
&lt;/h3&gt;

&lt;p&gt;You'll need to connect your Notion account in order to create forms with Commotion. Don't worry, Notion has a super easy flow, so just press the connect button, select which pages you want to create forms for, and hit allow access.&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S8yuegTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/connect.da10f557.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S8yuegTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/connect.da10f557.gif" alt="Connect to Notion"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-select-a-notion-database"&gt;
  &lt;/a&gt;
  4. Select a Notion database
&lt;/h3&gt;

&lt;p&gt;Now that you've connect your Notion account, let's actually start creating forms. Head to the dashboard and hit the "Create a New Form" button, and we'll get started. Select which workspace and page that contains the database you want to save to. Then, hit "Create Form".&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUm54R38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/selectDatabase.68d7fbb9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUm54R38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/selectDatabase.68d7fbb9.gif" alt="Select Notion Database"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-configure-this-new-form"&gt;
  &lt;/a&gt;
  5. Configure this new form
&lt;/h3&gt;

&lt;p&gt;This is where things get fun. If you're in a rush, you don't need to do anything, just hit "Create Form" and you're set. However, this is where Commotion starts to shine. Firstly, you can update the title of the form and add a description. Additionally, you can drag each question around to the order you want them to appear, and then do things like update the title of a question, the default value, the placeholder text, and any additional info, and even make questions required or just hidden from the form.&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xOWJG2ON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://commotion.page/assets/create.279b7d55.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xOWJG2ON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://commotion.page/assets/create.279b7d55.jpg" alt="Configure form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those are the basics. If you upgrade to our Pro plan, you can do even more with Commotion. For the form, you can add page breaks that paginate the form, changing it from one long list of questions to several screens that users can go between. Very stylish. Also, you can add a password so only some people can see and fill out the form. Finally, our Pro plan supports file uploading, so if you're collecting resumes for example, you can create a simple resume drop form here.&lt;/p&gt;

&lt;p&gt;Another perk of our Pro plan is the functionality once someone does fill out a form. With the Pro plan, once someone completes the form, you can receive an email with that person's response and a confirmation email can be sent to the responder as well. Additionally, if you want to do more with the data, you can send it to a webhook of your choosing. Easy peasy.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-share-and-embed-the-new-form"&gt;
  &lt;/a&gt;
  6. Share and embed the new form
&lt;/h3&gt;

&lt;p&gt;Once you hit "Create Form", you'll be moved to a page that has a link you can embed. With this embed link, you can paste it into a Notion page.&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8eVdy2F_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/embed.78f178d9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8eVdy2F_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/embed.78f178d9.gif" alt="Embed Notion form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can embed this link anywhere. The most common way to do this is using an &lt;b&gt;iframe&lt;/b&gt; like so...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;iframe height="530" width="490" src="https://commotion.page/embed/..."&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... where you adjust the height and width and src link. You can paste this in anywhere you write html.&lt;/p&gt;

&lt;p&gt;If you don't want to go through the hassle, you can also just hit "View Form" and share the link for people to fill out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-start-collecting-responses"&gt;
  &lt;/a&gt;
  7. Start collecting responses!
&lt;/h3&gt;

&lt;p&gt;You're all done! You can now sit back and just collect responses in your Notion database.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Programmers need types or "The Another Billion Dollar Mistake"</title>
      <author>Ughur Huseyn</author>
      <pubDate>Thu, 07 Oct 2021 21:12:45 +0000</pubDate>
      <link>https://dev.to/ughurh/programmers-need-types-or-the-another-billion-dollar-mistake-11kf</link>
      <guid>https://dev.to/ughurh/programmers-need-types-or-the-another-billion-dollar-mistake-11kf</guid>
      <description>&lt;p&gt;Interpreted languages lack performance for large programs. When created they not meant to be used as today. But they must overcome this issue. For fast execution many alternative JIT implementations and even compilers have been created (V8, PyPy, LuaJIT, Crystal, etc.). But efficient JITter or compiler needs type declarations. Therefore we can see many alternative syntaxes have been created also (Crystal, Cython etc.).&lt;br&gt;
And type declarations also make code readable and editor friendly, they document your code. Scripting languages mainly created for automatic memory managment and productivity. But why did they drop type declaraions completely?!. Today we see almost all of them return type declarations back somehow (Python, PHP, Typescript). Is this "The Another Billion Dollar Mistake"?&lt;/p&gt;

&lt;p&gt;Again, We programmers, need types. Not sure?&lt;/p&gt;

&lt;p&gt;Javascript -&amp;gt; TypeScript, V8&lt;br&gt;
Python -&amp;gt; Type hints, Cython, PyPy&lt;br&gt;
PHP -&amp;gt; Type declarations, PHP 8 (JIT Compiler)&lt;br&gt;
Ruby -&amp;gt; Crystal&lt;br&gt;
Lua -&amp;gt; LuaJIT&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
    </item>
  </channel>
</rss>
