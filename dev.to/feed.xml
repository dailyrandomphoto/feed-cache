<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript Arrow Functions</title>
      <author>Dev-Coder</author>
      <pubDate>Sun, 13 Dec 2020 14:51:42 +0000</pubDate>
      <link>https://dev.to/dev_coder/javascript-arrow-functions-4n44</link>
      <guid>https://dev.to/dev_coder/javascript-arrow-functions-4n44</guid>
      <description>&lt;p&gt;_Today, We will learn how to use the JavaScript arrow function to write more concise code for function expressions.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ES6 arrow functions provide you with an alternative way to write a shorter syntax compared to the function expression.&lt;/p&gt;

&lt;p&gt;The following example defines a function expression that adds two numbers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--anec0ErU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g6na0hlswzo258rbzqo7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--anec0ErU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g6na0hlswzo258rbzqo7.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Arrow Function Example&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LvGexVKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e5kdprevn52vox3wtbl3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LvGexVKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e5kdprevn52vox3wtbl3.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In above example, The arrow function has one expression x + y so it returns the result of the expression.&lt;/p&gt;

&lt;p&gt;However, if you use the block syntax, you need to specify the &lt;strong&gt;return&lt;/strong&gt; keyword:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--27fU4paE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8gt8bb50alh8y919vkth.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--27fU4paE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8gt8bb50alh8y919vkth.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;typeof&lt;/strong&gt; operator returns function indicating the type of arrow function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wGK_zF5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/75dsd0xm50ivmddt7be6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wGK_zF5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/75dsd0xm50ivmddt7be6.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Arrow Functions With Multiple Parameters&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If an arrow function has two or more parameters, we need to use the following syntax:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OzSEQlF4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b4lli8qse6sro3lndj16.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OzSEQlF4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b4lli8qse6sro3lndj16.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For example, To sort an array of numbers in the descending order, we use the sort() method of the array object as follows:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFvf8_wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8sw5ty8z1dkuoxshri5l.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFvf8_wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8sw5ty8z1dkuoxshri5l.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is more concise with the arrow function syntax:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZj5mzUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pm57rizjmaf8yhkju5r1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZj5mzUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pm57rizjmaf8yhkju5r1.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Arrow Functions With Single Parameter&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If an arrow function takes a single parameter, we can use the following syntax:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;(parameter1) =&amp;gt; { statements }&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note that, We can omit the parentheses as follows:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;parameter =&amp;gt; { statements }&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The following example uses an arrow function as an argument of the &lt;em&gt;map()&lt;/em&gt; method that transforms an array of strings into an array of the string’s lengths.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MoLRQJQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xfwh773ol5k3cxv1epwt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MoLRQJQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xfwh773ol5k3cxv1epwt.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Arrow Functions With No Parameter&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the arrow function has no parameter, we must use the parentheses, like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;( ) =&amp;gt; { statements }&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Line Break Between Parameter Definition and Arrow&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JavaScript doesn’t allow us to use a line break between the parameter definition and the arrow &lt;strong&gt;( =&amp;gt; )&lt;/strong&gt; in an arrow function. The following code produces a &lt;strong&gt;SyntaxError&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fT8xV-pX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wwnhhdf29xaw5i8w1yzr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fT8xV-pX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wwnhhdf29xaw5i8w1yzr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, the following code works perfectly fine:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ywhESkJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n40tgoqcfvs6lr5ib017.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ywhESkJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n40tgoqcfvs6lr5ib017.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;JavaScript allows us to use the line break between parameters as shown in the following example:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6y1CEiV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/53o7an3fmxbv5ppzy403.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6y1CEiV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/53o7an3fmxbv5ppzy403.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Summary:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Arrow functions are handy for one-liners. They come in two flavors:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Without curly braces: (...args) =&amp;gt; expression – the right side is an expression: the function evaluates it and returns the result.&lt;/li&gt;
&lt;li&gt;With curly braces: (...args) =&amp;gt; { body } – brackets allow us to write multiple statements inside the function, but we need an explicit return to return something.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Documentation Generators - A curated list: MkDocs, Docsify, Vuepress</title>
      <author>Sm0ke</author>
      <pubDate>Sun, 13 Dec 2020 11:24:12 +0000</pubDate>
      <link>https://dev.to/sm0ke/documentation-generators-a-curated-list-mkdocs-docsify-vuepress-2794</link>
      <guid>https://dev.to/sm0ke/documentation-generators-a-curated-list-mkdocs-docsify-vuepress-2794</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This article presents a curated list with modern, open-source &lt;strong&gt;documentation generators&lt;/strong&gt; useful when we want to explain in deep how a software product can be used by others. All tools are free, actively supported, and production-ready.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! This content is provided by &lt;strong&gt;&lt;a href="https://appseed.us/?ref=dev"&gt;AppSeed&lt;/a&gt;&lt;/strong&gt;, a platform used by many developers across the globe.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;To document a software product is a recommended practice even for small projects and becomes a necessity once the product is getting bigger (more modules, features) or is being used by many users. &lt;br&gt;
Good documentation triggers a faster adoption of your product and might decrease the required LIVE support and 1-1 assistance with your users.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.mkdocs.org/"&gt;MkDocs&lt;/a&gt; - Python based&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docsify.js.org/"&gt;Docsify&lt;/a&gt; - Vue based&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docute.org/"&gt;Docute&lt;/a&gt; - Vue based&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vuepress.vuejs.org/"&gt;Vuepress&lt;/a&gt; - Vue based&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://v2.docusaurus.io/"&gt;Docusaurus&lt;/a&gt; - powered by React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding the list, I've used Mkdocs in production but I'm super tempted to switch to Docsify that looks damn good, is actively supported, and provides search and internationalization "out of the box". &lt;/p&gt;




&lt;p&gt;Regarding this type of products, I noticed a few common problems: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search&lt;/strong&gt; - this is a big problem and &lt;em&gt;&lt;a href="https://lunrjs.com/"&gt;Lunr&lt;/a&gt;&lt;/em&gt; solves it when your docs are still light. &lt;em&gt;&lt;a href="https://www.algolia.com/"&gt;Algolia&lt;/a&gt;&lt;/em&gt; comes to the rescue but is not free. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Internationalization (i18n)&lt;/strong&gt; - A modern documentation system, IMO, should provide this feature. This is my first reason not to use &lt;em&gt;&lt;a href="https://www.mkdocs.org/"&gt;MkDocs&lt;/a&gt;&lt;/em&gt; for my future projects. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technology lockdown&lt;/strong&gt; - It would be nice to start using a documentation system without being forced to learn the technology that powers the product. &lt;em&gt;&lt;a href="https://v2.docusaurus.io/"&gt;Docusaurus&lt;/a&gt;&lt;/em&gt; might be a good choice but requires a minimum React knowledge and this can be a show stopper for a backend developer or someone that dislikes React.    &lt;/p&gt;




&lt;p&gt;Feel free to suggest more generators or submit PROS, CONS remarks in the comments section. &lt;strong&gt;Thank You!&lt;/strong&gt;  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mkdocs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mkdocs.org/"&gt;MkDocs&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Simple, Python-based documentation generator that uses Markdown format for input files - BSD-2-Clause License.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Official information&lt;/strong&gt; - MkDocs is a fast, simple, and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Github metrics&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;11k Stars, 1.6k Forks, Last commit: 5days ago&lt;/li&gt;
&lt;li&gt;120 open issues and 17 pulls requests&lt;/li&gt;
&lt;li&gt;Used by 9k users, 160 Contributors&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;PROS (advantages of using MkDocs)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Easy to set up, well documented&lt;/li&gt;
&lt;li&gt;Fast in development and also in production&lt;/li&gt;
&lt;li&gt;Default Search feature by &lt;a href="https://lunrjs.com/"&gt;Lunr&lt;/a&gt;, Algolia can be integrated with ease&lt;/li&gt;
&lt;li&gt;Components via &lt;a href="https://github.com/cmacmackin/markdown-include"&gt;Markdown-Include&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;CONS (disadvantages)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;No Multilanguage support&lt;/li&gt;
&lt;li&gt;Hardcoded footer - can be hacked but unsupported by default&lt;/li&gt;
&lt;li&gt;Few themes available&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qZWfe8sx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/documentation-generators/mkdocs-screen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZWfe8sx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/documentation-generators/mkdocs-screen.png" alt="Documentation Generator MkDocs - Homepage screen"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#docsify" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://docsify.js.org/"&gt;Docsify&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A modern Vue-based documentation generator that renders the files without a translation phase. In other words, the docs are rendered as a classic SPA.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Official Information&lt;/strong&gt; - A magical documentation site generator. Docsify generates your documentation website on the fly. Unlike GitBook, it does not generate static HTML files. Instead, it smartly loads and parses your Markdown files and displays them as a website. To start using it, all you need to do is create an &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Github metrics&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;16k Stars, 4k Forks, Latest commit 20h ago (not so relevant maybe)&lt;/li&gt;
&lt;li&gt;113 open issues and 33 pulls requests&lt;/li&gt;
&lt;li&gt;Used by 1.6k users, 154 contributors&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;PROS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;No statically built HTML files&lt;/li&gt;
&lt;li&gt;Simple and lightweight&lt;/li&gt;
&lt;li&gt;Smart full-text search plugin&lt;/li&gt;
&lt;li&gt;Multiple themes&lt;/li&gt;
&lt;li&gt;SSR support&lt;/li&gt;
&lt;li&gt;Internationalization&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;CONS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;The users should be familiar with Vue, Nodejs, and related tools&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5AaZ05G5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/documentation-generators/docsify-screen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5AaZ05G5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/documentation-generators/docsify-screen.png" alt="Documentation Generator Docsify - Homepage screen"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#docute" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://docute.org/"&gt;Docute&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Docute is basically a JavaScript file that fetches Markdown files and renders them as a single-page application.&lt;/p&gt;

&lt;p&gt;It's totally runtime-driven so there's no server-side components involved which also means there's no build process. You only need to create an HTML file and a bunch of Markdown documents and your website is almost ready!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docsify and Docute&lt;/strong&gt; are pretty much the same, but with different UI and different usages.&lt;/p&gt;

&lt;p&gt;Docute (60kB) is 3 times bigger than Docisfy (20kB), because we use Vue, Vue Router and Vuex while Docsify uses vanilla JavaScript under the hood.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Github metrics&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;3k Stars, 400 Forks, Last commit: 6mo ago&lt;/li&gt;
&lt;li&gt;71 open issues and 11 pulls requests&lt;/li&gt;
&lt;li&gt;Used by 24 users, 16 contributors&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5v61OKVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/documentation-generators/docute-screen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5v61OKVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/documentation-generators/docute-screen.png" alt="Documentation Generator Docute - Homepage screen"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vuepress" class="anchor"&gt;
  &lt;/a&gt;
  Vuepress
&lt;/h2&gt;

&lt;p&gt;Vue-powered Static Site Generator with a minimal setup with markdown-centered project structure.&lt;br&gt;
VuePress generates pre-rendered static HTML for each page and runs as a SPA once a page is loaded.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Github metrics&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;18k Stars, 3.6k Forks, Latest commit 20h ago (not so relevant maybe)&lt;/li&gt;
&lt;li&gt;300+ open issues and 100 pulls requests&lt;/li&gt;
&lt;li&gt;Used by 13k users, 350 contributors&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;PROS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;No statically built HTML files&lt;/li&gt;
&lt;li&gt;Simple and lightweight&lt;/li&gt;
&lt;li&gt;Internationalization&lt;/li&gt;
&lt;li&gt;Vue can be used in Markdown files&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UcTDSnSW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/documentation-generators/vuepress-screen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UcTDSnSW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/documentation-generators/vuepress-screen.png" alt="Documentation Generator Vuepress - Homepage screen"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#docusaurus" class="anchor"&gt;
  &lt;/a&gt;
  Docusaurus
&lt;/h2&gt;

&lt;p&gt;This generator is built using React to build the UI and Markdown/MDX as input format.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Github metrics&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;20k Stars, 2.4k Forks, Last commit: 18h ago (not so relevant maybe)&lt;/li&gt;
&lt;li&gt;160 open issues and 18 pulls requests&lt;/li&gt;
&lt;li&gt;Used by 6k users, 500 contributors&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;PROS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Fast in production - has an internal architecture similar to Gatsby (PRPL pattern)&lt;/li&gt;
&lt;li&gt;Use React and MDX&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VVXmxcfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/documentation-generators/docusaurus-screen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVXmxcfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/documentation-generators/docusaurus-screen.png" alt="Documentation Generator Vuepress - Homepage screen"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks again! Let me know your thoughts in the comments. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Btw, my (nick) name is &lt;strong&gt;Sm0ke&lt;/strong&gt; and I'm pretty active also on &lt;a href="https://twitter.com/Sm0keDev"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vue</category>
      <category>react</category>
      <category>appseed</category>
    </item>
    <item>
      <title>You Make My Head Spin - Reducing the Motion on Web</title>
      <author>Eevis (she/her)</author>
      <pubDate>Sun, 13 Dec 2020 11:12:46 +0000</pubDate>
      <link>https://dev.to/eevajonnapanula/you-make-my-head-spin-reducing-the-motion-on-web-328b</link>
      <guid>https://dev.to/eevajonnapanula/you-make-my-head-spin-reducing-the-motion-on-web-328b</guid>
      <description>&lt;p&gt;Two weeks of vertigo from every head movement has been among the most unpleasant experiences of my adult life. I could work if I kept my head still, but it took a lot of energy and concentration. Every time I moved my head just slightly, it hit me, and I had to stay still for a couple of minutes before it stopped. &lt;/p&gt;

&lt;p&gt;The cause of my condition was &lt;a href="https://en.wikipedia.org/wiki/Benign_paroxysmal_positional_vertigo"&gt;Benign paroxysmal positional vertigo (BPPV)&lt;/a&gt;. There was no apparent reason for this to happen, and from what I've read, that is pretty common with BPPV. However, something had changed after the symptoms went away - I realized that I react to certain kinds of movement on web pages and start feeling a little nauseous and dizzy.&lt;/p&gt;

&lt;p&gt;For me, these symptoms are mostly only irritating, but that is not the case for all. Some people with vestibular disorders need to rest for a long time after encountering movement on a website, and they can feel really sick from that. In this blog post, I will discuss the reasons for having this kind of symptoms and how we, as developers and designers, could make the web more accessible for people who live with these symptoms. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-kind-of-people-are-affected" class="anchor"&gt;
  &lt;/a&gt;
  What Kind of People Are Affected?
&lt;/h2&gt;

&lt;p&gt;The vestibular disorder is an umbrella term for multiple different conditions affecting the vestibular system. These can be caused by an injury, illness, or a genetic condition, but the cause remains unknown in some cases. Symptoms can be anything from dizziness to nausea and hearing changes. If you want to read more, head to &lt;a href="https://vestibular.org/article/what-is-vestibular/about-vestibular-disorders/"&gt;vestibular.org&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;While people with visually triggered vestibular disorders are a big group whose symptoms can develop from specific animations, they aren't the only ones. Certain kinds of movement on the webpage can also trigger a migraine or epileptic seizures. Having less distracting animations also benefits those who get sidetracked easily. &lt;/p&gt;

&lt;p&gt;I want to point out that some users can benefit from animations. For people with cognitive disabilities, animations in pictures can help understand, for example, relations between items. So not all animations are bad - there just should be a way to reduce them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-kind-of-movement-triggers-these-symptoms" class="anchor"&gt;
  &lt;/a&gt;
  What Kind Of Movement Triggers These Symptoms?
&lt;/h2&gt;

&lt;p&gt;As I'm talking here about &lt;em&gt;reducing&lt;/em&gt; something, one might think I'm advising to remove it altogether. But that's not the case - not all movement is problematic. Animating non-moving properties, such as opacity or color, is less likely to cause problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://alistapart.com/article/designing-safer-web-animation-for-motion-sensitivity/"&gt;Val Head lists&lt;/a&gt; three common factors that can trigger the symptoms. They are the &lt;strong&gt;relative size of the movement&lt;/strong&gt;, &lt;strong&gt;mismatched directions and speed&lt;/strong&gt;, and &lt;strong&gt;the distance covered&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;When the content moves across a large amount of space, it is more likely to trigger the symptoms of someone having vestibular disorders. "The space" in this case is about the &lt;em&gt;perceived&lt;/em&gt; space. &lt;a href="https://alistapart.com/article/designing-safer-web-animation-for-motion-sensitivity/"&gt;Val Head writes&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The physical size of screen matters less than the size of the motion relative to the screen space available—so a small button with a 3D rotation probably won’t cause trouble, but a full-screen wipe transition covering the entire screen likely would.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simultaneously, when the animation takes a large area, it can capture the attention. That can be really disorienting, especially for people who have a hard time concentrating.&lt;/p&gt;

&lt;p&gt;Animation that moves in another direction of the scrolling or on a speed that is not directly linked with the scrolling speed can be problematic. For me, this has been the worst case so far. Just about a week ago, I encountered a website, which had horizontally scrolling headings. Who remembers the &lt;code&gt;marquee&lt;/code&gt;-element? The one that has been deprecated? It was as if those headings were made with it. (They weren't, I checked.) My symptoms have always been mild, but this time it took almost 30 minutes for nausea to go away. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-we-as-developers-do" class="anchor"&gt;
  &lt;/a&gt;
  What Can We, as Developers, Do?
&lt;/h2&gt;

&lt;p&gt;I'll introduce a couple of strategies for reducing motion and thus making websites more accessible. There are some things to note about web accessibility standards. First, there's this thing about auto-playing animations. Even though &lt;a href="https://www.w3.org/WAI/WCAG21/Understanding/pause-stop-hide.html"&gt;WCAG 2.2.2 Pause, Stop, Hide&lt;/a&gt; considers only animations that last more than five seconds, there can be patterns of different (less-than-five-seconds) animations, which last longer, so be mindful of them. And for some users, even if the animations are short or can be paused, auto-playing (even for a short time) can cause a lot of harm.&lt;/p&gt;

&lt;p&gt;Another WCAG Success Criterion that speaks about animations is &lt;a href="https://www.w3.org/WAI/WCAG21/Understanding/animation-from-interactions.html"&gt;2.3.3: Animation from Interactions&lt;/a&gt;. When non-essential animations are triggered by user interaction, this criteria applies. This means, for example, parallax-effect when scrolling. Even though this criterion is level AAA, I'd really like to emphasize that meeting this success criterion benefits many users who have symptoms discussed at the beginning of the post.&lt;/p&gt;

&lt;p&gt;When talking about reduced motion, it doesn't mean that all movement needs to be &lt;em&gt;removed&lt;/em&gt;. Animations can be simplified and slowed down. That can be done on the styles-level, respecting the user's operation system-level settings, or the power can be given to the user with control that changes the settings for the whole site. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prefers-reduced-motionmedia-feature" class="anchor"&gt;
  &lt;/a&gt;
  Prefers Reduced Motion-Media Feature
&lt;/h3&gt;

&lt;p&gt;First, we'll discuss the &lt;code&gt;prefers-reduced-motion&lt;/code&gt;-media feature, which gives us the possibility to respect the user's system-level preferences on the reduced motion. This means that whenever a user has set the "reduced motion"-setting on, our website picks that preference and acts accordingly (if we have defined the behavior). &lt;/p&gt;

&lt;p&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt; is a &lt;a href="https://caniuse.com/?search=prefers-reduced-motion"&gt;widely supported media feature&lt;/a&gt;. We can read and use this preference with CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.animated-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt; &lt;span class="n"&gt;slidein&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.animated-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fade&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prefersReducedMotion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-reduced-motion)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reduceMotionChanges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pefersReducedMotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle reduced motion&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;prefersReducedMotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reduceMotionChanges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you want to simulate the reduced motion, Chrome and (Chromium) Edge (and I guess other Chromium-based browsers, but I didn't find a source for this) offer an option in developer tools to do this. It can be found under "Rendering", which is on the menu -&amp;gt; "More tools": &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cQYq7AX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yb98j514c1ni8gfcnpou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cQYq7AX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yb98j514c1ni8gfcnpou.png" alt='Chrome developer tools, menu opened pointing the location of "Rendering" which is the 13th item on the More tools-submenu'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the Rendering-tab, scroll down, and you'll find options for emulating CSS media features such as &lt;code&gt;prefers-reduced-motion&lt;/code&gt; and &lt;code&gt;prefers-color-scheme.&lt;/code&gt; By the way, on the same tab, it's possible to emulate vision deficiencies, meaning different types of color blindness.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-toggle-for-reduced-motion" class="anchor"&gt;
  &lt;/a&gt;
  A Toggle for Reduced Motion
&lt;/h3&gt;

&lt;p&gt;Another way to help users affected by these animations is to give them site-wide control to reduce motion. This could be done with, for example, a similar toggle as there often is with dark mode and light mode. For instance, in &lt;a href="https://techweeklies.futurice.com/"&gt;Futurice's Tech Weeklies' website&lt;/a&gt;, there is a toggle for site animations: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NRRG8Afd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dwoo4d3bksgnwkf5hxt3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NRRG8Afd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dwoo4d3bksgnwkf5hxt3.png" alt='Footer of Futurice Tech Weeklies website showing a toggle with text "Site animations: Off"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Technical implementation for the actual reduction of motion could be done in different ways, such as CSS-variables or adding a class for the site's body. &lt;a href="https://www.a11ywithlindsey.com/blog/reducing-motion-improve-accessibility"&gt;Lindsey Kopacz gives an example&lt;/a&gt; of how this could be implemented. I want to note that it would be awesome if these toggles would respect the system settings by default. This can be done by reading the value from the &lt;code&gt;prefers-reduced-motion&lt;/code&gt;-media feature explained in the previous section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;So, not all movement on the website is bad. However, when developing or designing a site, remember that animations can be problematic for some users. When unexpected, they can cause a lot of harm by triggering symptoms, as mentioned earlier. If you want to learn more about the topic, I'll list some additional reading in the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-more" class="anchor"&gt;
  &lt;/a&gt;
  Read More
&lt;/h2&gt;

&lt;p&gt;Here are some articles I've found useful when learning about this topic.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alistapart.com/article/designing-safer-web-animation-for-motion-sensitivity/"&gt;Val Head - Designing Safer Web Animation For Motion Sensitivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/revisiting-prefers-reduced-motion-the-reduced-motion-media-query/"&gt;Eric Bailey - Revisiting prefers-reduced-motion, the reduced motion media query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://source.opennews.org/articles/motion-sick/"&gt;Eileen Webb - Your Interactive Makes Me Sick&lt;/a&gt;
&lt;a href="https://alistapart.com/article/accessibility-for-vestibular/"&gt;Facundo Corradini - Accessibility for Vestibular Disorders: How My Temporary Disability Changed My Perspective&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bradfrost.com/blog/post/reducing-motion-with-the-picture-element/"&gt;Brad Frost - Reducing motion with the picture element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.dev/prefers-reduced-motion/"&gt;Thomas Steiner - prefers-reduced-motion: Sometimes less movement is more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@ocollet?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Olivier Collet&lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Format Date and Time with JavaScript</title>
      <author>Shafi</author>
      <pubDate>Sun, 13 Dec 2020 05:47:30 +0000</pubDate>
      <link>https://dev.to/shafiemoji/format-date-and-time-with-javascript-13hf</link>
      <guid>https://dev.to/shafiemoji/format-date-and-time-with-javascript-13hf</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;Intl&lt;/strong&gt; object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-format-date-and-time-in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  How Can I Format Date and Time in JavaScript?
&lt;/h2&gt;

&lt;p&gt;Suppose we have a &lt;code&gt;Date&lt;/code&gt; object in a variable called &lt;code&gt;now&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we log this &lt;code&gt;now&lt;/code&gt; variable in the console, we'll see an unformatted string of our location specific current date and time with many unnecessary information being printed out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Sun Dec 13 2020 10:38:06 GMT+0600 (Bangladesh Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can use the &lt;code&gt;DateTimeFormat&lt;/code&gt; constructor of &lt;code&gt;Intl&lt;/code&gt; object to quickly format the &lt;code&gt;now&lt;/code&gt; Date object for us and return a formatted date string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formatDateInBangla&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DateTimeFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bn-BD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formatDateInBangla&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ১৩/১২/২০২০&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;DateTimeFormat&lt;/code&gt; constructor can take two &lt;code&gt;parameters&lt;/code&gt;; &lt;code&gt;locale&lt;/code&gt; or default date formatting for language and an &lt;code&gt;options object&lt;/code&gt;. We'll talk about the &lt;code&gt;options object&lt;/code&gt; soon.&lt;/p&gt;

&lt;p&gt;We're going to write the same code snippet as last time with a slight change, we're going to set the &lt;code&gt;locale&lt;/code&gt; to &lt;code&gt;en-GB&lt;/code&gt; or British English instead of &lt;code&gt;bn-BD&lt;/code&gt; or Bangla (Bangladesh).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formatDateInEnglish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DateTimeFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-GB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formatDateInEnglish&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 13/12/2020&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-the-options-object" class="anchor"&gt;
  &lt;/a&gt;
  Using the Options Object
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;options object&lt;/code&gt; can take some or all of the following properties &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat"&gt;described here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To keep this tutorial short, we're only going to use &lt;code&gt;dateStyle&lt;/code&gt; &lt;br&gt;
and &lt;code&gt;timeStyle&lt;/code&gt; options.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#using-raw-datestyle-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;dateStyle&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The date formatting style has four possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;'full'&lt;/li&gt;
&lt;li&gt;'long'&lt;/li&gt;
&lt;li&gt;'medium'&lt;/li&gt;
&lt;li&gt;'short'&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This time we're going to pass an &lt;code&gt;option object&lt;/code&gt; with &lt;code&gt;dateStyle&lt;/code&gt; as a key and &lt;code&gt;'full'&lt;/code&gt; as its value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;dateStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formatDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DateTimeFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-GB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formatDate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Sunday, 13 December 2020&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Remember when we talked about the &lt;code&gt;DateTimeFormat&lt;/code&gt; constructors ability to take in two arguments? Well, look closely, we've passed in the &lt;code&gt;option object&lt;/code&gt; we created.&lt;br&gt;
That &lt;code&gt;option object&lt;/code&gt; is telling the constructor to format the &lt;code&gt;now&lt;/code&gt; date object in full form in British standard (passed in as locale).&lt;/p&gt;

&lt;p&gt;Cool! Now it's time for you to test out the other three values of the &lt;code&gt;dateStyle&lt;/code&gt; and see what they returns!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-raw-timestyle-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;timeStyle&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The time formatting style have the same four possible values as the &lt;code&gt;dateStyle&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;now&lt;/code&gt; variable, which is a date object, contains information about the &lt;em&gt;time&lt;/em&gt; it was created at.&lt;br&gt;
This time we're going to format the &lt;code&gt;now&lt;/code&gt; variable using the &lt;code&gt;timeStyle&lt;/code&gt; property as the &lt;strong&gt;only&lt;/strong&gt; option and see what it returns to us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formatTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DateTimeFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-GB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;timeStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;short&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// You can pass in the option object inline!&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formatTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 11:38&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Well, that's not so pretty, is it? Is it day or night?&lt;/p&gt;

&lt;p&gt;Let's try something else.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;timeStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;short&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;hour12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Obviously you can pass multiple options&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formatTimeNotUgly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DateTimeFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-GB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formatTimeNotUgly&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 11:43 am&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I hope you now understand how the &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; constructor works, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat"&gt;please read this MDN Documentation for an in depth understanding of Intl.DateTimeFormat.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>tutorial</category>
      <category>todayilearned</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Vanilla JavaScript text-to-speech 💬</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 13 Dec 2020 04:57:31 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/vanilla-javascript-text-to-speech-55n9</link>
      <guid>https://dev.to/dailydevtips1/vanilla-javascript-text-to-speech-55n9</guid>
      <description>&lt;p&gt;I have quite an intriguing background in the TTS (Text-to-speech) field. It always caught my eye.&lt;/p&gt;

&lt;p&gt;Back in my school period, my projects would always involve either some kind of TTS or webcam interaction.&lt;/p&gt;

&lt;p&gt;Now those were always super cool but couldn't really be of any use in most websites.&lt;/p&gt;

&lt;p&gt;Yeah, it looks cool, but when do you really need it.&lt;/p&gt;

&lt;p&gt;Another side to TTS is that it was very hard to use. You needed a vast amount of plugins or third-party parses.&lt;/p&gt;

&lt;p&gt;These days we are a bit luckier with how powerful JavaScript has become.&lt;/p&gt;

&lt;p&gt;So today, I wanted to have another look at Text to speech in JavaScript.&lt;/p&gt;

&lt;p&gt;The end result for today: Try it out on the following Codepen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/wvzWmep?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-text-to-speech" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript text to speech
&lt;/h2&gt;

&lt;p&gt;We can leverage the Web Speech API, which uses the SpeechSynthesis interface.&lt;/p&gt;

&lt;p&gt;To have our computer talk to us, we must then make use of the &lt;code&gt;SpeechSynthesisUtterance&lt;/code&gt; interface.&lt;br&gt;
This basically translates to: speech request.&lt;/p&gt;

&lt;p&gt;In this interface, we define the voice, language, and volume.&lt;/p&gt;

&lt;p&gt;It comes with the following elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;lang&lt;/code&gt;: The language of the output&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pitch&lt;/code&gt;: Sets a pitch for the output spoken words&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rate&lt;/code&gt;: The rate (speed) at which spoken is&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text&lt;/code&gt;: The actual text that's spoken&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;voice&lt;/code&gt;: Which voice you want to use&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;volume&lt;/code&gt;: The output volume&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#detecting-browser-support" class="anchor"&gt;
  &lt;/a&gt;
  Detecting browser support
&lt;/h2&gt;

&lt;p&gt;Since this method is not fully supported by all browsers, we will need to detect if our browser has this option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webkitSpeechSynthesisUtterance&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mozSpeechSynthesisUtterance&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msSpeechSynthesisUtterance&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oSpeechSynthesisUtterance&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we define a const to check if the support is defined.&lt;/p&gt;

&lt;p&gt;We can then easily check this const.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do the speech stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sorry not supported 😭&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-voices" class="anchor"&gt;
  &lt;/a&gt;
  Getting voices
&lt;/h2&gt;

&lt;p&gt;I don't know about you, but I love to play around with any device's voice options.&lt;/p&gt;

&lt;p&gt;If it's my Google Home, or something like the Speech API.&lt;/p&gt;

&lt;p&gt;The cool part about the Web Speech API is that we can query all available voices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// []&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now running this will likely result in a empty result, so another cool thing the API comes with is a callback for once the voices are loaded:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onvoiceschanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// (67) [SpeechSynthesisVoice, SpeechSynthesisVoice, ...]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let's add a select list to our HTML and render the voices as options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"voiceSelect"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And in our JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voiceSelect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;voiceSelect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onvoiceschanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;voice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;voice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; (&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;voice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;voiceSelect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We should now have a select list that is populated with all the available voices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T3vppTzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607410751016/BX67CW59S.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T3vppTzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607410751016/BX67CW59S.png" alt="JavaScript speech voice select"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-getting-a-text-input-to-convert-to-speech" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript getting a text input to convert to speech
&lt;/h2&gt;

&lt;p&gt;Now let's also add an input field where the user can type some text that will be spoken.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;HTML&lt;/code&gt; will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"voiceSelect"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"voiceInput"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Speak&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then in our JavaScript let's first define the variables we need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;voiceSelect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;voiceSelect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;voiceInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;voiceInput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we need to catch the form submit and prevent it from submitting to a blank page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// Do the speech action&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#javascript-using-texttospeech-to-talk-to-us" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript using text-to-speech to talk to us
&lt;/h2&gt;

&lt;p&gt;Now it's finally time to have the computer talk to us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;speak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;voiceInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;voice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;voiceSelect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you can type something in the input field and select your voice.&lt;br&gt;
Press the speak button, and you should hear some spoken words!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  Browser Support
&lt;/h2&gt;

&lt;p&gt;Again, pretty good coverage for a fairly new API.&lt;br&gt;
Of course, IE is a pain like always, and mobile Opera and Android have some issues with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzB9llaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/static/v1/mdn-api__SpeechSynthesisUtterance-1607412204741.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzB9llaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/static/v1/mdn-api__SpeechSynthesisUtterance-1607412204741.png" alt="JavaScript text to speech browser support"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>9 Useful apps for Developers</title>
      <author>Josias Aurel</author>
      <pubDate>Sun, 13 Dec 2020 03:59:25 +0000</pubDate>
      <link>https://dev.to/josiasaurel/9-useful-apps-for-developers-ld3</link>
      <guid>https://dev.to/josiasaurel/9-useful-apps-for-developers-ld3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#here-are-9-useful-apps-for-developers" class="anchor"&gt;
  &lt;/a&gt;
  Here are 9 useful apps for developers
&lt;/h3&gt;

&lt;p&gt;Today i am going to share to you the apps i use on all the time when developing. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#web-screenshot" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://https://webscreenshot.now.sh"&gt;Web Screenshot&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;As the name goes, this is an app that enebles you to take screenshots of websites and web apps. It provides and easy to use interface in order to create high quality screenshots of any websites.&lt;br&gt;
With this app, you are allowed to modify the screenshot size and quality.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#squoosh" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://squoosh.app"&gt;Squoosh&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;This is a simple but powerfull app, that allows you to compress your images without losing quality. It is pretty new. It can compress your images up to 60%+ lesser than its original size and you still get the same quality. Additionally, its a PWA (yay!), therefore you can use it offline at anytime.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browserframe" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://browserframe.com"&gt;browserframe&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Do you wish to enclode the screenshot of your web apps in a Mac style browser frame ? for them to look more attractive on your homepage ? Then this is app is for you. It  does not only support Mac styles but also windows. The available browser windows are &lt;code&gt;Chrome&lt;/code&gt;, &lt;code&gt;Safari&lt;/code&gt; and &lt;code&gt;Edge&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#metatags" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metatags.io"&gt;Metatags&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;With metatags, you can view the metatags of any website you visited or anylink you find. Its pretty easy to use and efficient. It will also recommend you metatags to include on your page to improve on SEO and marketing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#unsplash" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Unsplash is a website where you can get high quality images for free. They also provide an API in order to fetch images as per requests.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#undraw" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://undraw.co"&gt;Undraw&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A collection of high quality illustrations in SVG or PNG for your websites and web apps.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flaticon" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://flaticon.com"&gt;flaticon&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Flaticon provides thousands of free vector or image icons you can use anywhere. The provide a free and pain plan. In the free plan, you are required to attribute the author while in the paid plan, you don't need to.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#font-awesome" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://fontawesome.com"&gt;Font Awesome&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;If you are builind a web app or site, you'll probably want to include font awesome icons. They are free and easy to use. All you need is to include their &lt;code&gt;CDN&lt;/code&gt; link in your &lt;code&gt;head&lt;/code&gt; tag and you are good to go.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#google-fonts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://fonts.google.com"&gt;Google Fonts&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Google provides a repository of free fonts. You have the option of downloading a font or including it inside your page directly. They also provides many different styles of fonts to use.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;YOu have reached the end of this post. I hope you liked it ;)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>developers</category>
    </item>
    <item>
      <title>A Simple Weather app using React and OpenWeatherMap API 🔥</title>
      <author>Mohan Kumar</author>
      <pubDate>Sun, 13 Dec 2020 02:41:42 +0000</pubDate>
      <link>https://dev.to/imshines/a-simple-weather-app-using-react-and-openweathermap-api-10m2</link>
      <guid>https://dev.to/imshines/a-simple-weather-app-using-react-and-openweathermap-api-10m2</guid>
      <description>&lt;p&gt;Hey fellow developers!&lt;br&gt;
This post is about how to create a simple weather app using React and OpenWeatherMap API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2vbkwyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rjmxav7fky8wm9lc4kde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2vbkwyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rjmxav7fky8wm9lc4kde.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how the app will look like.&lt;br&gt;
So, let's get started 🏃‍♂️&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here's the github link in case you're curious &lt;a href="https://github.com/imshines/react-weather-app"&gt;react-weather-app&lt;/a&gt; and live demo &lt;a href="https://react-weather-app-beta.vercel.app/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let's divide this into a few steps,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup a React app using Create-React-App&lt;/li&gt;
&lt;li&gt;Get the API Key from OpenWeatherMap API&lt;/li&gt;
&lt;li&gt;Code, code, code! 👨‍💻&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step - 1
&lt;/h3&gt;

&lt;p&gt;If you're already familiar with create-react-app skip this step and set-up a project or if you're new follow along.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open up a terminal or command prompt in your preferred folder and enter the following command.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;weather&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Like in the image shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8iFhJ4YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ikjlu2mp4sk8lkakd5jh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8iFhJ4YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ikjlu2mp4sk8lkakd5jh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, navigate to that folder by entering&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd react-weather-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And then start the project using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;for more details on create-react-app check &lt;a href="https://create-react-app.dev/docs/getting-started/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's move to next step 😀&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step - 2
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Goto OpenWeatherMap website &lt;a href="https://openweathermap.org/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Create a new account&lt;/li&gt;
&lt;li&gt;Login to that account&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;My API Key&lt;/strong&gt; section&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pyDMS-O1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sybtk7g3r1qvfz5y3967.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pyDMS-O1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sybtk7g3r1qvfz5y3967.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can find the API key, if it is not present. Then generate a new API key.&lt;/p&gt;

&lt;p&gt;After that copy the API Key (Don't share your API Key publicly).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3" class="anchor"&gt;
  &lt;/a&gt;
  Step - 3
&lt;/h3&gt;

&lt;p&gt;First we'll store the generated API key in our project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CqqaKvUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/szqgtnynyyurmrg43x0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CqqaKvUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/szqgtnynyyurmrg43x0s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;.env&lt;/code&gt; in our project's root folder.&lt;br&gt;
Open that file and create a new variable named &lt;code&gt;REACT_APP_API_KEY&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6kEgG68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v1wvonf1e7u47pofh8ga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6kEgG68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v1wvonf1e7u47pofh8ga.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should look like the image as shown above.&lt;br&gt;
That's it for the API key store.&lt;/p&gt;

&lt;p&gt;I have used bootstrap, this is totally optional, you can add via cdn or install as an npm package.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#modifying-appjs-file" class="anchor"&gt;
  &lt;/a&gt;
  Modifying App.js file
&lt;/h4&gt;

&lt;p&gt;Open your App.js file and enter the code as follows,&lt;br&gt;
Add these variables before your return()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// API KEY AND URL&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.openweathermap.org/data/2.5/weather?q=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;appid=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#now-lets-create-some-states-to-store-the-api-data-and-input" class="anchor"&gt;
  &lt;/a&gt;
  Now let's create some states to store the API data and input.
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;apiData state is used to store the response&lt;/li&gt;
&lt;li&gt;getState is used to store the location name from input field&lt;/li&gt;
&lt;li&gt;state is used to store a copy of the getState this will be helpful in updating state on button click. You can ignore this state and directly pass getState on the URL as well.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// State&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setApiData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setGetState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tamilnadu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tamilnadu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// API KEY AND URL&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.openweathermap.org/data/2.5/weather?q=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;appid=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#now-lets-make-an-api-request-using-fetch-and-useeffect-hook" class="anchor"&gt;
  &lt;/a&gt;
  Now let's make an api request using fetch and useEffect Hook.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Side effect&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setApiData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The useEffect hook is used to perform side effects on your app, this is an alternative to componentDidMount, unmount, etc.. lifecycle hook from react class components.&lt;/p&gt;

&lt;p&gt;What this does is, it fetches the data from the given api url and stores in apiData state. This happens only when apiUrl changes thus it will prevent unwanted re-render. [] this is the dependency array this determines when to re-render a componenet, when it is left empty it'll render only once. When we specify a dependency it will render only when it is updated.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#next-well-write-some-functions-to-handle-the-input" class="anchor"&gt;
  &lt;/a&gt;
  Next we'll write some functions to handle the input.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setGetState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submitHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;kelvinToFarenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;273.15&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;inputHandler this function is used to handle the input field, to get the data and store in getState.&lt;/li&gt;
&lt;li&gt;submitHandler this function is used to copy the state from getState to state.&lt;/li&gt;
&lt;li&gt;kelvinToFarenheit this function is used to convert kelvin to farenheit, since we get the data from api as kelvin we're using this function.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#finally-write-this-code-in-your-return-statement" class="anchor"&gt;
  &lt;/a&gt;
  Finally write this code in your return statement,
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;d-flex justify-content-center align-items-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;Weather&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mt-3 d-flex flex-column justify-content-center align-items-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;col-auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;location-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;col-form-label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Enter&lt;/span&gt; &lt;span class="nx"&gt;Location&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;col-auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;location-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form-control&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn btn-primary mt-2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;submitHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Search&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card mt-3 mx-auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;60vw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card-body text-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
              &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`http://openweathermap.org/img/w/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weather&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.png`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;weather status icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;weather-icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;kelvinToFarenheit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fas fa-map-marker-alt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/i&amp;gt;{' '&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/strong&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;row mt-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;col-md-6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fas fa-temperature-low &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/i&amp;gt;{' '&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;kelvinToFarenheit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp_min&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/strong&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fas fa-temperature-high&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/i&amp;gt;{' '&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;kelvinToFarenheit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp_max&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/strong&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;col-md-6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weather&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/strong&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                      &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;official&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;})}&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/strong&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;footer&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;footer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Created&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://github.com/imshines&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;imshines&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt;{' '&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/code&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/footer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I have used bootstrap for styling it's totally optional, the rest of the code is pretty self explanatory. We're just displaying the data from the apiData state object by accessing it's keys.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0aJ9DjQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/d5bac75176f31335f0849b9a0284b2aa/tenor.gif%3Fitemid%3D8344269" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0aJ9DjQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/d5bac75176f31335f0849b9a0284b2aa/tenor.gif%3Fitemid%3D8344269" alt="Alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#completed" class="anchor"&gt;
  &lt;/a&gt;
  Completed!
&lt;/h4&gt;

&lt;p&gt;That's pretty much it, we have successfully completed the app, this app will show you weather of the state that you enter in the input field.&lt;/p&gt;

&lt;p&gt;This is my first blog post kindly let me know your thoughts on this in the comment section below. I'm not a professional Reactjs developer so, let me know if there's any unwanted code present in it. 😁&lt;/p&gt;

&lt;p&gt;Thanks for reading, hope you enjoyed 👍&lt;br&gt;
Will see you again in the next one, bye!👋&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>api</category>
      <category>bootstrap</category>
    </item>
    <item>
      <title>Reduce motion with CSS</title>
      <author>Alvaro Montoro</author>
      <pubDate>Sun, 13 Dec 2020 00:04:25 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/consider-reducing-motions-1a13</link>
      <guid>https://dev.to/alvaromontoro/consider-reducing-motions-1a13</guid>
      <description>&lt;p&gt;Operating systems offer different accessibility settings so users can customize and personalize their experience when using a computer. One of those settings is the "Reduce motion" option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MDkmvkRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xcr4u9p7gcrfnbef4u5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MDkmvkRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xcr4u9p7gcrfnbef4u5v.png" alt="Screenshot of MacOS accessibility settings window"&gt;&lt;/a&gt;&lt;/p&gt;
MacOS counts with many accessibility options



&lt;p&gt;The "Reduce motion" feature is useful for people who experience vertigo or motion sickness. When active, the operating system will reduce the movement of elements on the screen (or stop it altogether).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-prefersreducedmotion-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;prefers-reduced-motion&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;There is a way on CSS to check if the user has this flag activated: the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt;&lt;/a&gt; media feature.&lt;/p&gt;

&lt;p&gt;It has two possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;no-preference&lt;/code&gt;: the users didn't specify any preference on this matter or disabled.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reduce&lt;/code&gt;: the users specified that they want to remove or replace the motion-based animations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it will work even if we don't specify a value. Whatever values we put inside the media query will be executed only when the user prefers reduced motion.&lt;/p&gt;

&lt;p&gt;And that is a good place to remove animations and transitions. They are Ok for most users, but if they have the "Reduced motion" flag, we won't show these animated motions to them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* disable all animations and transitions if reduced motion */&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#beyond-animations-and-transitions" class="anchor"&gt;
  &lt;/a&gt;
  Beyond animations and transitions
&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;animation&lt;/code&gt; and &lt;code&gt;transition&lt;/code&gt; are obvious properties to disable when the user selected the reduced motion on their computer, they are not alone. There are other properties that we should consider disabling too:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;scroll-behavior&lt;/code&gt;: specifies how the scroll will happen within the page. By default, it just skips from one section to another, but if the value is &lt;code&gt;smooth&lt;/code&gt;, there will be a small transition that we may want to avoid in reduced motion mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;scroll-snap-type&lt;/code&gt;: a cool feature that could bring some accessibility problems. With scroll snapping, the page will automatically scroll to the specified areas, which may not be something that the user expects or wants.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;marquee-style&lt;/code&gt;: this is a non-standard property that will only affect &lt;code&gt;&amp;lt;marquee&amp;gt;&lt;/code&gt; (which you should not be using anyway) and only on Safari (may require a &lt;code&gt;webkit&lt;/code&gt; vendor's prefix). With the value &lt;code&gt;none&lt;/code&gt;, it will stop all marquees on the page.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;When developing, remember to respect the user's "Reduced Motion" settings by using &lt;code&gt;prefers-reduced-motion.&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>css</category>
    </item>
    <item>
      <title>Stop Memorizing! : The #1 Advice I Wish Someone Would Have Told Me</title>
      <author>Brenda Michelle</author>
      <pubDate>Sat, 12 Dec 2020 23:10:55 +0000</pubDate>
      <link>https://dev.to/brendamichellle/stop-memorizing-the-1-advice-i-wish-someone-would-have-told-me-5cnj</link>
      <guid>https://dev.to/brendamichellle/stop-memorizing-the-1-advice-i-wish-someone-would-have-told-me-5cnj</guid>
      <description>&lt;p&gt;When I first started my self-learning journey I would try to memorize everything, from every HTML tag to every use case of every CSS property. Because of that, I felt like I was making no progress. Every time I would try to code something I could not think of the exact code off the top of my head and I thought: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I am so stupid.&lt;/li&gt;
&lt;li&gt;This is not for me. &lt;/li&gt;
&lt;li&gt;Why can't this just stick?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Little did I know that my learning approach was completely wrong. It wasn’t until I completely shifted my learning approach that I started to make significant progress.  &lt;/p&gt;

&lt;p&gt;In this article, I will show you why memorizing is not the right approach in learning to code. I will also share some quick tips to help you shift your learning approach. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-is-your-best-friend" class="anchor"&gt;
  &lt;/a&gt;
  Google is your best friend
&lt;/h2&gt;

&lt;p&gt;You do not need to memorize everything. Even the best software engineers still Google and copy and paste from stack overflow. If there were perfect engineers there wouldn't be software updates every few months. If you know how to Google properly and use the correct keywords to find what you are looking for you are set. Instead of memorizing focus on problem-solving skills practice by building projects and going on websites to practice algorithms and data structures. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#muscle-memory" class="anchor"&gt;
  &lt;/a&gt;
  Muscle memory
&lt;/h2&gt;

&lt;p&gt;You can reference the muscle memory phenomenon and use it to help your learning process.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Muscle memory is a form of procedural memory that involves consolidating a specific motor task into memory through repetition, which has been used synonymously with motor learning. When a movement is repeated over time, a long-term muscle memory is created for that task, eventually allowing it to be performed with little to no conscious effort.” -Wikipedia&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The more you practice the more you will understand and you will begin to think like a programmer. You will know when to use a specific HTML tag or CSS property or even think of JavaScript functions a lot easier. You will be able to "dream of code" and understand how it works.&lt;/p&gt;

&lt;p&gt;Programming is a completely different way of thinking. Most brains are not programmed to think this way. You have to teach your brain how to think like a programmer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-tips" class="anchor"&gt;
  &lt;/a&gt;
  Quick Tips
&lt;/h2&gt;

&lt;p&gt;When you are studying and writing out your notes make sure they are properly structured so that it is easy to go back to them. You will always have to revisit your notes. This is one of the reasons why I like having digital notes. I can easily search and find what I need.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#talk-to-yourself" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;Talk to yourself!&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;When you are coding talk to yourself and explain every step. Why are you using a specific CSS property or what is your function doing. &lt;/p&gt;

&lt;p&gt;Especially when you are stuck on a bug this is the best time to learn. Talk to yourself through the problem. Go through every step. &lt;/p&gt;

&lt;p&gt;There are a lot of different approaches you can take when learning to code. It all depends on your learning style and what works best for you. I hope this was helpful. &lt;/p&gt;




&lt;p&gt;If you are even a bit intrigued and are interested in learning to code &lt;a href="https://www.instagram.com/brendamichellle/"&gt;lets connect!&lt;/a&gt; I would love to help in any way I can.&lt;/p&gt;

&lt;p&gt;Photo by Jesse Martini on Unsplash&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Surviving Your First Code Review</title>
      <author>Dan Goslen</author>
      <pubDate>Sat, 12 Dec 2020 23:09:00 +0000</pubDate>
      <link>https://dev.to/dangoslen/surviving-your-first-code-review-48p0</link>
      <guid>https://dev.to/dangoslen/surviving-your-first-code-review-48p0</guid>
      <description>&lt;p&gt;I remember my first code review as a software engineer. I was pretty nervous about opening the link in the email saying my code review was complete. I was afraid to look at the feedback.&lt;/p&gt;

&lt;p&gt;I'd never had my code formally reviewed before. In my undergraduate days, we just kinda made sure each other's code was "good" - whatever that meant.&lt;/p&gt;

&lt;p&gt;When I entered into my first full-time role, I learned that code reviews were a common part of ensuring code quality. Often done via &lt;a href="https://dangoslen.me/blog/whats-the-point-of-pull-requests-anyway/"&gt;pull requests&lt;/a&gt;, developers were encouraged to provide feedback on how to improve code and validate its correctness before merging code to the mainline. The core intention was to keep a high-quality codebase.&lt;br&gt;
Sounds good.&lt;/p&gt;

&lt;p&gt;But there is something we all fear: &lt;strong&gt;rejection&lt;/strong&gt;. We fear not being good enough. Code reviews become a place for junior engineers (or any engineers really) to come face to face with that fear. That first time you request a review from the senior engineer on the team can be daunting.&lt;/p&gt;

&lt;p&gt;And let's face it: no one's code is perfect. Your code review will have some form of feedback. Even as a senior engineer, I get regular feedback from my peers about how to improve my code. For junior engineers, the feedback can often be a lot and overwhelming. Comments like "Don't do this." or "Change this to use a ternary expression." or "Why?" can easily take a bright-eyed engineer and make them question how they ever got a job in the first place.&lt;/p&gt;

&lt;p&gt;My goal for this article is to give you some quick tools to survive that first code review. Let's dive in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-your-reviewers-some-context" class="anchor"&gt;
  &lt;/a&gt;
  Give Your Reviewers Some Context
&lt;/h2&gt;

&lt;p&gt;The best way to survive your first code review is to help your reviewers understand what your code is doing. Without context, reviewers will have to ask more questions and create a mental model of what your code is doing. It can lead your reviewer to incorrect conclusions and therefore giving poor feedback.&lt;/p&gt;

&lt;p&gt;The best way to provide context is when you request a review. If you are using pull requests, take the time to give your pull request a proper title and description. If you are using a story or issue tracking system, provide a link in the description tool. If there were tricky spots in the code or places you have a question, add comments before your reviewers take a look. &lt;/p&gt;

&lt;p&gt;All of this helps your reviewer provide the best feedback possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-all-of-the-feedback-before-making-changes" class="anchor"&gt;
  &lt;/a&gt;
  Read All of the Feedback Before Making Changes
&lt;/h2&gt;

&lt;p&gt;Once you receive feedback, don't be afraid. Take a few deep breaths, grab a hot beverage, and read through it all. Read each comment and critique before going too in-depth on any one of them.&lt;/p&gt;

&lt;p&gt;Even if there are a lot, this is helpful for a few reasons. First, you will be able to see which comments are more important than others. Once you identify these topics, focus your energy on addressing those first before spending time addressing small critiques over and over.&lt;/p&gt;

&lt;p&gt;Second, this allows you to see if there is an overall theme amongst all of the feedback. Feedback about readability? Memory-management? Maybe framework-specific issues? Understanding the themes of the feedback you have received allows you to focus on those topics more generally than just blindly making a requested change.&lt;/p&gt;

&lt;p&gt;The last reason I think this is important to do is that it allows you to think wholistically before making line-by-line changes. A common form of feedback in code reviews is the suggestion to refactor a class or function. But this often requires changes in several places. If you were to make each change individually, you would find that your refactor has addressed some of those comments. This makes it harder to understand if a comment is relevant or not taken one-by-one instead of holistically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ask-for-clarification" class="anchor"&gt;
  &lt;/a&gt;
  Ask for Clarification
&lt;/h2&gt;

&lt;p&gt;When a reviewer provides feedback that is ambiguous or confusing, ask for clarification. If you are confused by their comment, just accepting it at face value can lead to even more confusion. After a few rounds of that, frustration can mount and turn the entire code review sour.&lt;/p&gt;

&lt;p&gt;Let's walk through a common scenario you might encounter. You receive a comment saying to overload a function to allow for a different object to be passed as a parameter. But the object the reviewer is suggesting doesn't seem to be related to the function at all. You don't understand what they are getting at. Instead of blindly accepting their suggestion, ask for clarity. Why would that be helpful? Is there something about that object that you don't know? While trivial, situations like this arise all the time in reviews. Fight for clarity as early as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hold-your-ground" class="anchor"&gt;
  &lt;/a&gt;
  Hold Your Ground
&lt;/h2&gt;

&lt;p&gt;Not all feedback is correct. Not all requests for changes are necessary. Don't simply make changes because a reviewer said so. If you don't think the changes are either correct or needed, say so and ask if the reviewer agrees.&lt;/p&gt;

&lt;p&gt;One approach that might is to create clear language about the severity of feedback before review time. Within your team, create a standard set of rules or language about feedback to identify blocking and non-blocking feedback. &lt;/p&gt;

&lt;p&gt;For instance, I've worked on teams where we always said an item was a non-blocking piece of feedback in the comments we provided. As a team, this helped us to understand where to focus on changes. This also kept us from getting into useless debates on small issues that didn't matter in the grand scheme of the changes.&lt;/p&gt;

&lt;p&gt;As always, though, remember to hold your ground humbly. State why you don't think a change is required and not just that you won't do it. Cite articles and documentation on why you think so. You are both on the same team, after all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choose-specific-feedback-to-really-work-on" class="anchor"&gt;
  &lt;/a&gt;
  Choose Specific Feedback to Really Work On
&lt;/h2&gt;

&lt;p&gt;Once the code review is done and everything is merged, you still have some work left. Write down one or two (but no more!) areas where you got feedback to work on. Maybe it was writing better tests. Perhaps it was improving your knowledge of a framework.&lt;/p&gt;

&lt;p&gt;Whatever it was, take some time to learn what you need to not repeat the same mistakes as before. I'm not saying you will be perfect. No can be! Repeating the same mistakes over and over means you aren't putting in the effort to grow. Your team gave you specific areas of feedback, pointing out where to focus next. It would be silly if you didn't listen to some of it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Use these tools to survive and grow from your first code review. While these tools are helpful, the number one thing that will help you is attitude. Approach your feedback as opportunities to grow and learn. Remember that everyone deals with &lt;a href="https://plantae.org/combatting-the-impostor-syndrome-in-academic-science-you-probably-are-as-smart-as-they-think/"&gt;imposter syndrome&lt;/a&gt;. Just because you don't know something doesn't mean you can't learn it or that you don't deserve to be there.&lt;/p&gt;

&lt;p&gt;A great team will give you feedback to help you. They want you to succeed. They hired you! You can do it.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>codenewbie</category>
      <category>codereview</category>
      <category>career</category>
    </item>
    <item>
      <title>How to Schedule Cronjobs in Python</title>
      <author>Gabriel Romualdo</author>
      <pubDate>Sat, 12 Dec 2020 22:52:11 +0000</pubDate>
      <link>https://dev.to/xtrp/how-to-schedule-cronjobs-in-python-370i</link>
      <guid>https://dev.to/xtrp/how-to-schedule-cronjobs-in-python-370i</guid>
      <description>&lt;p&gt;&lt;strong&gt;Originally published &lt;a href="https://xtrp.io/blog/2020/12/12/how-to-schedule-cronjobs-in-python/"&gt;here at xtrp.io&lt;/a&gt;, my blog about computer science and just about anything programming.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cronjobs are tasks that can be run periodically, such as every five minutes, or every day at midnight, or even every Friday at noon.&lt;/p&gt;

&lt;p&gt;Cronjobs have a number of different use cases, and are widely used in many notable codebases.&lt;/p&gt;

&lt;p&gt;Many hosting servers have existing ways to set up cronjobs, but if you don't have that capability, you may want to go for a different solution.&lt;/p&gt;

&lt;p&gt;I'll explain how you would go about creating cronjobs in Python, in which a Python function, program, or command can be run periodically, whether that be every day, every few minutes, or even every month or year.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check if you have Python 3 installed:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the following command does not yield a version number, &lt;a href="https://www.python.org/downloads/"&gt;download Python 3 from python.org&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 -V
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Install the &lt;code&gt;schedule&lt;/code&gt; package from Pypi&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Run this command to install the &lt;code&gt;schedule&lt;/code&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install schedule
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or if you're using &lt;code&gt;pip3&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install schedule
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Set up and run a cronjob with the &lt;code&gt;.do&lt;/code&gt; method&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To schedule a cronjob, use the &lt;code&gt;.do&lt;/code&gt; method combined with the &lt;code&gt;.every&lt;/code&gt; method and others to choose when the cronjob should be run.&lt;/p&gt;

&lt;p&gt;The methods for scheduling cronjobs are pretty intuitively named, and more information on them can be found on &lt;a href="https://pypi.org/project/schedule/"&gt;the &lt;code&gt;schedule&lt;/code&gt; package documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After setting up your cronjob(s), create an infinite loop to run the cronjob(s) that are scheduled.&lt;/p&gt;

&lt;p&gt;You can also schedule multiple cronjobs if you'd like by adding them with the &lt;code&gt;.do&lt;/code&gt; method, just like how the initial cronjob was created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;schedule&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cronjob&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# create the cronjob
&lt;/span&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cronjob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# runs cronjob every 5 minutes
&lt;/span&gt;
&lt;span class="c1"&gt;# run the cronjob
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_pending&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# check to run the cronjob every 10 seconds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#more-raw-do-endraw-method-examples" class="anchor"&gt;
  &lt;/a&gt;
  More &lt;code&gt;.do&lt;/code&gt; Method Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cronjob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# every 15 minutes
&lt;/span&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;every&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cronjob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# every 1 hour
&lt;/span&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;every&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"07:00"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cronjob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# every day at 7:00 AM
&lt;/span&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"18:30"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cronjob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# every other day at 6:30 PM
&lt;/span&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;every&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;friday&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"17:00"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cronjob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# every Friday at 5:00 PM
&lt;/span&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;every&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":17"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cronjob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# every minute at 17 seconds
&lt;/span&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cronjob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# every 10 seconds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this helps. I've found Python cronjobs like these particularly useful in a few of my projects. For example, I use cronjobs to periodically update data on the COVID-19 pandemic for my site &lt;a href="http://covid19.xtrp.io/"&gt;Coronavirus Live Monitor&lt;/a&gt;, and daily cronjobs are used to publish new posts for &lt;a href="http://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes&lt;/a&gt;, a project of mine which publishes programming humor every day at 8 AM (ET).&lt;/p&gt;

&lt;p&gt;Thanks for scrolling.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This post is originally from &lt;a href="https://xtrp.io/"&gt;my blog at xtrp.io&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;— Gabriel Romualdo, December 12, 2020&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>cronjobs</category>
    </item>
    <item>
      <title>The Ultimate Beginner's Guide to GraphQL</title>
      <author>The Javascript Ninja</author>
      <pubDate>Sat, 12 Dec 2020 22:26:25 +0000</pubDate>
      <link>https://dev.to/thejavascriptninja/the-ultimate-beginner-s-guide-to-graphql-ghe</link>
      <guid>https://dev.to/thejavascriptninja/the-ultimate-beginner-s-guide-to-graphql-ghe</guid>
      <description>&lt;p&gt;Let’s talk about one of the biggest pains in web development: connecting your app to a database. While you might not share the same opinions, this is one of my least favorite parts of server-side development, so this tutorial will show you my tried-and-true tricks for making this go smoothly.&lt;/p&gt;

&lt;p&gt;Firstly, when you’re just starting with databases, it can be very overwhelming as there are TONS of different options to choose from. Should you choose plain-old MySQL, MongoDB, PostgreSQL, or maybe GraphQL? If you’re thinking, “What’s the big difference?” Then don’t worry, you’re not alone; I originally thought that as well, but I can assure you that you’ll soon be on your way to database nirvana.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-this-guide" class="anchor"&gt;
  &lt;/a&gt;
  Using This Guide
&lt;/h1&gt;

&lt;p&gt;I’m well aware that there are hundreds of other guides on the internet about this very same topic, and I can confidently say that I’ve looked at most of them. When I first started with databases and GraphQL, I was very confused. The large number of resources and various methods might leave you questioning, “Should I do it this way or that way?” Coming from somebody who’s actually tried most of the different methods, I’ll cover the easiest, simplest, and most effective ways to go about starting with a database (in my opinion).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up" class="anchor"&gt;
  &lt;/a&gt;
  Setting Up
&lt;/h1&gt;

&lt;p&gt;As usual, I’m going to use a basic express server with EJS as my templating engine. I’m also going to arrange my project folder in the MVC format. I’m not going to show how to set up the whole project for sake of brevity, but if you’re unclear on any of these concepts, make sure to check out my articles on:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://thejavascriptninja.com/how-to-add-express-js-to-a-node-js-web-app/"&gt;How to Add Express to a Node.js Web App&lt;/a&gt;&lt;br&gt;
&lt;a href="https://thejavascriptninja.com/what-is-the-mvc/"&gt;What is the MVC?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://thejavascriptninja.com/templating-with-ejs-and-node-js/"&gt;Templating With EJS and Node.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, if you just want to jump right in, you can download my boilerplate server code &lt;a href="https://github.com/the-javascript-ninja/boilerplate_server"&gt;here&lt;/a&gt; on GitHub. This is the code I will be using for my server.&lt;/p&gt;

&lt;p&gt;After we’ve gotten the basic server up and running, there is one more dependency that we need to install.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#apolloserverexpress" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/apollo-server-express"&gt;apollo-server-express&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;This package is responsible for setting up our GraphQL server. If you’re already familiar with GraphQL, you might realize that there is also a package called apollo-server which would work just as well. The reason I’m using apollo-server-express is so that we can run the GraphQL server alongside our Express server.&lt;/p&gt;

&lt;p&gt;You can install this package by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i apollo-server-express -S
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Later on in this series, we will probably need to install some more dependencies but this is the only other one we’ll be needing for this part.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#writing-a-schema" class="anchor"&gt;
  &lt;/a&gt;
  Writing A Schema
&lt;/h1&gt;

&lt;p&gt;For the next couple of following sections, I’m going to teach you some of the basic GraphQL necessities that we will need to write our GraphQL server. We won’t be able to write the server until we get through this part, so bear with me while we go over this necessary material.&lt;/p&gt;

&lt;p&gt;One of the most important parts of GraphQL (or any query language) are parts called schemas. In short, schemas are data representations in the form of a model. For example, if we had a chat app and were storing messages in the database, we might add a message type to our schema. It might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Message {
  id: Int
  text: String
  from: String
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, each message we store would have the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;, and &lt;code&gt;from&lt;/code&gt; properties. This is like an outline that will apply to each message that we send.&lt;/p&gt;

&lt;p&gt;To actually write our schema, we will use have to use the &lt;code&gt;gql&lt;/code&gt; property of the &lt;code&gt;apollo-server-express&lt;/code&gt; module. Check out the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { gql } = require('apollo-server-express');
const schema = gql`
  type Query {
    getUsers: User
  }
  type User {
    id: Int!
    username: String!
    email: String!
    password: String!
  }
`;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the example, we require &lt;code&gt;gql&lt;/code&gt; from &lt;code&gt;apollo-server-express&lt;/code&gt;. Then, let’s pretend we’re building the user authentication for our chat app. First, we’d define a &lt;code&gt;User&lt;/code&gt; model. Then, we define a &lt;code&gt;Query&lt;/code&gt; type. In our &lt;code&gt;Query&lt;/code&gt; type, we have a &lt;code&gt;getUsers&lt;/code&gt; method. We set this to return data of type &lt;code&gt;User&lt;/code&gt;. In the &lt;code&gt;User&lt;/code&gt; type, each user will have the following properties of &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, and &lt;code&gt;password&lt;/code&gt;. The exclamation point after the property type means that the property is non-nullable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#writing-resolvers" class="anchor"&gt;
  &lt;/a&gt;
  Writing Resolvers
&lt;/h1&gt;

&lt;p&gt;The next thing we’ll need in order to get GraphQL working is to write some resolvers. Briefly, resolvers are groups of functions that act upon a GraphQL query. This means that whenever you execute a query from your schema, such as the &lt;code&gt;getUsers&lt;/code&gt; query we wrote above, you will need a resolver to handle the information and send back a response.&lt;/p&gt;

&lt;p&gt;Writing resolvers is actually fairly simple. Take a look at the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const resolvers = {
  Query: {
    getUsers: _ =&amp;gt; 'Hello World'
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Alright – this is a fairly simple object. First, we have our &lt;code&gt;resolvers&lt;/code&gt; object; this is where we will put all of our resolvers. Then, inside the &lt;code&gt;resolvers&lt;/code&gt; object, we have the &lt;code&gt;Query&lt;/code&gt; object. This is where we will put all our resolvers of type &lt;code&gt;Query&lt;/code&gt;. You can see that we defined &lt;code&gt;getUsers&lt;/code&gt; in the &lt;code&gt;Query&lt;/code&gt; type when we wrote our schema. Finally, we add our &lt;code&gt;getUsers&lt;/code&gt; resolver to the &lt;code&gt;Query&lt;/code&gt; object and set it to return the string &lt;code&gt;'Hello World'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s important to realize that the Hello World part is temporary. Since we haven’t yet set up a database model, we don’t have anything to return yet. That’s why I’m returning &lt;code&gt;'Hello World'&lt;/code&gt;. Don’t worry though; we will add a dummy database model later on in the tutorial. For now though, I’m going to leave the resolvers as-is so we can start writing the server and seeing some results.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#writing-the-server" class="anchor"&gt;
  &lt;/a&gt;
  Writing The Server
&lt;/h1&gt;

&lt;p&gt;Up until now, we haven’t really seen any results of our coding. We’ve mostly just been writing the code without anything happening. Well, now it’s time to write the server. Once we’ve got the server down, we’ll be able to interact with the database.&lt;/p&gt;

&lt;p&gt;Surprisingly enough, the server is very easy to code. Take a look at the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { ApolloServer } = require('apollo-server-express');
const serve = new ApolloServer({
  typeDefs: schema,
  resolvers: resolvers,
});
serve.applyMiddleware({ app });
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the code above, we first require &lt;code&gt;ApolloServer&lt;/code&gt; from the &lt;code&gt;apollo-server-express&lt;/code&gt; package. Then, we set up a &lt;code&gt;serve&lt;/code&gt; object. The &lt;code&gt;typeDefs&lt;/code&gt; property is where we tell the server our schema, and the &lt;code&gt;resolvers&lt;/code&gt; property is where we tell the server our resolvers. Then, we add the GraphQL server to our express server. The &lt;code&gt;app&lt;/code&gt; variable is the variable we declare when we initialize our express server.&lt;/p&gt;

&lt;p&gt;After all this coding, the code in your index.js file should look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const port = process.env.port || 3000;
const express = require('express');
const ejs = require('ejs');
const layouts = require('express-ejs-layouts');
const app = express();

app.set('view engine', 'ejs');
app.use(express.static('public'));
app.use(layouts);

const homeController = require('./controllers/homeController.js');
app.get('/', homeController.renderIndex);

const { gql } = require('apollo-server-express');
const schema = gql`
  type Query {
    getUsers: User
  }
  type User {
    id: Int!
    username: String!
    email: String!
    password: String!
  }
`;

const resolvers = {
  Query: {
    getUsers: _ =&amp;gt; 'Hello World'
  }
}

const { ApolloServer } = require('apollo-server-express');
const serve = new ApolloServer({
  typeDefs: schema,
  resolvers: resolvers,
});
serve.applyMiddleware({ app });

const server = app.listen(port, () =&amp;gt; {
  console.log(`🚀 Server listening on port ${port}`);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, to run the server, navigate to your project in your computer’s terminal/shell and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node index
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Alright! The server is running! However, if you navigate to &lt;code&gt;localhost:3000&lt;/code&gt; in your web browser, you won’t see any indication that the GraphQL server is working. So, how do we know? Well, GraphQL comes with an awesome browser tool called GraphIQL. This is what we’ll use to interact with the database.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#database-interaction-with-graphiql" class="anchor"&gt;
  &lt;/a&gt;
  Database Interaction With GraphIQL
&lt;/h1&gt;

&lt;p&gt;GraphQL wouldn’t be GraphQL without the QL part: the query language. We need to be able to retrieve, add, modify, and delete information from the database. For this, we’ll use an in-browser feature called GraphIQL.&lt;/p&gt;

&lt;p&gt;In order to access GraphIQL, navigate to &lt;code&gt;localhost:3000/graphql&lt;/code&gt; with your server running. You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cQDw2iMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wtqptc1ci6biuz7ib90c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cQDw2iMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wtqptc1ci6biuz7ib90c.png" alt="Screen Shot 2020-12-10 at 8.25.47 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the online, fully interactive, GraphQL UI. This is the space where we can run and execute queries. To execute our first query, enter the code below into the box on the left and click the run button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query findUsers {
  getUsers
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First, we define our query with the &lt;code&gt;query&lt;/code&gt; keyword and the name of our query (the name can be anything you want). If we only have one query, however, we don’t actually need this. The code would also work just fine if we wrote it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  getUsers
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What this does is it executes the the &lt;code&gt;getUsers&lt;/code&gt; resolver. Once we run the query, it should return the following result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "data": {
    getUsers: 'Hello World'
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It returns the string &lt;code&gt;‘Hello World’&lt;/code&gt; because that is what we set it to return in our &lt;code&gt;getUsers&lt;/code&gt; resolver.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-in-a-database-model" class="anchor"&gt;
  &lt;/a&gt;
  Adding in a Database Model
&lt;/h1&gt;

&lt;p&gt;In order to keep this post short, this will be the last section. This will, however, be a series. Make sure to keep an eye out for the parts that follow, or you can subscribe for email updates.&lt;/p&gt;

&lt;p&gt;That said, our GraphQL program and query works pretty well, but it would be pretty neat if we could retrieve actually data, not just a short string. Fortunately for us, this is well within our capabilities. First, let’s create an array of users like the one shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let users = [
  {
    id:1,
    username:'The Javascript Ninja',
    email:'contact@thejavascriptninja.com',
    password:'its-a-secret'
  },
  {
    id:2,
    username:'The Javascript Ninjas Best Friend',
    email:'contact@thejavascriptninja.com',
    password:'its-a-secret'
  },
]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Above, we have two users in an array. Both users contain all the properties that we entail them to have in our schema. Next, let’s make a couple of changes to our resolvers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From this:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const resolvers = {
  Query: {
    getUsers: _ =&amp;gt; 'Hello World'
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;To this:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const resolvers = {
  Query: {
    getUsers: _ =&amp;gt; users
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, when we call the &lt;code&gt;getUsers&lt;/code&gt; resolver, it will return the data in the users array.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;I’m going to end this part of the tutorial here, but this certainly isn’t the end of the series! We have only just barely scratched the surface of GraphQL and databases, so make sure to watch out for other parts of my GraphQL for Beginners series. Feel free to subscribe so you don’t miss out on any updates (there’s a form on the home page or at the top of this page if you’re interested).&lt;/p&gt;

&lt;p&gt;As always, leave a comment or like this post if you enjoyed it or want more content like this.&lt;/p&gt;

&lt;p&gt;Hope to see you soon!&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>node</category>
      <category>javascript</category>
      <category>database</category>
    </item>
  </channel>
</rss>
