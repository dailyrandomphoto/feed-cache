<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tilesets &amp; Datasets: Managing Data in Mapbox Studio</title>
      <author>Ben Tyler</author>
      <pubDate>Mon, 15 Feb 2021 15:51:46 +0000</pubDate>
      <link>https://dev.to/tylerben/tilesets-datasets-managing-data-in-mapbox-studio-352p</link>
      <guid>https://dev.to/tylerben/tilesets-datasets-managing-data-in-mapbox-studio-352p</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series of guides and tutorials on Mapbox The majority of the posts will focus on how you can use Mapbox with React, but will also additionally focus on other parts of the Mapbox suite such as Mapbox Studio and various Mapbox APIs. The series will start with relatively simple use cases and build into more complex examples.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus far we have &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;covered how to create a basic map using Mapbox and React,&lt;/li&gt;
&lt;li&gt;developed a cheatsheet for the predefined Mapbox Styles&lt;/li&gt;
&lt;li&gt;covered how to create a custom style in Mapbox Studio and add it to a React app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These guides are super helpful for establishing some basic familiarity with Mapbox, but only get you so far when the rubber hits the road. If you are building an interactive map, chances are you trying to portray some real data and not just some hello world nonsense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The aim of this post is to provide an overview of how two key features of Mapbox Studio, Tilesets and Datasets, can be used manage and integrate real data into a Mapbox style and application.&lt;/strong&gt; This guide will not provide the ins and outs how to use tilesets and datasets, but instead will focus on providing the context of how they fit into the larger Mapbox ecosystem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#datasets-overview" class="anchor"&gt;
  &lt;/a&gt;
  Datasets Overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EEQI0WWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bhxqxsqt4nbjf9q91ovx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EEQI0WWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bhxqxsqt4nbjf9q91ovx.png" alt="Datasets infographic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dataset can a loaded term that means a whole of different things in different contexts. In the context of Mapbox Studio, a dataset refers to an &lt;strong&gt;editable collection of &lt;a href="https://docs.mapbox.com/help/glossary/geojson/"&gt;GeoJSON&lt;/a&gt; features.&lt;/strong&gt; Simplified even further, it is essentially data stored in a JSON that is formatted in a very specific way that also has an added field to capture spatial data ("geometry"). It is the rawest form of data in Mapbox Studio.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;very key point is that Datasets cannot be directly added to a Mapbox Style.&lt;/strong&gt; They first need to be exported as a Tileset. The exported Tileset can then be added easily to a map style. I like to think of datasets as my foundation. I cannot do much with a dataset directly, but I can build a lot of things on top of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-use-cases" class="anchor"&gt;
  &lt;/a&gt;
  Common Use Cases
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;lightweight spatial data editing/creation&lt;/li&gt;
&lt;li&gt;managing data that has the potential to update regularly&lt;/li&gt;
&lt;li&gt;easy to transform spatial-like data intro a true spatial format

&lt;ul&gt;
&lt;li&gt;i.e. converting a CSV with latitude and longitude columns into a tileset&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks" class="anchor"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;no bulk editing&lt;/li&gt;
&lt;li&gt;for more complex use cases, you need to learn how to leverage the Datasets and Uploads APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn the ins and outs of working with datasets, check out the Mapbox &lt;a href="https://docs.mapbox.com/studio-manual/reference/datasets/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tilesets-overview" class="anchor"&gt;
  &lt;/a&gt;
  Tilesets Overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hk7s_8-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dba44dwpvstudqbrxquq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hk7s_8-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dba44dwpvstudqbrxquq.png" alt="Tilesets infographic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tilesets are the meat and potatoes of Mapbox Studio. They represent a collection of vector or raster data broken up into a nice uniform square grid of tiles. If you want to add something to a style via Mapbox Studio, you will need to create a tileset for it. Luckily, this is as uploading a shapefile or as easy as exporting a dataset most of the time.&lt;/p&gt;

&lt;p&gt;Maybe not 100% accurate, but my model for the differences between Datasets and Tilesets is viewing Datasets like a CSV and Tilesets like a Shapefile. You can view and edit data in a CSV but you cannot do much more than that whereas you view, edit, map, and analyze data in a shapefile.&lt;/p&gt;

&lt;p&gt;To learn the ins and outs of working with tilesets, check out the Mapbox &lt;a href="https://docs.mapbox.com/studio-manual/reference/tilesets/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-use-cases" class="anchor"&gt;
  &lt;/a&gt;
  Common Use Cases
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;displaying any sort of non-Mapbox spatial data&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks" class="anchor"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;cannot edit a tileset&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thinking-in-datasets-and-tilesets" class="anchor"&gt;
  &lt;/a&gt;
  Thinking in Datasets and Tilesets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X2opExv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3h0bj4ycz1pddkhkugpr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X2opExv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3h0bj4ycz1pddkhkugpr.png" alt="Data flow infographic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I first started using Mapbox Studio, one of the hardest things to get my head around was the difference between datasets and tilesets and how they fit into the styles editor and Mapbox GL JS. It can be easy to view these three feature sets in isolation, but viewing them as connected steps in a process helped me.&lt;/p&gt;

&lt;p&gt;Here is a common data flow for working with Mapbox Studio.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find spatial data you want to view and analyze&lt;/li&gt;
&lt;li&gt;Upload spatial data to Mapbox Studio (choose one of the following)

&lt;ol&gt;
&lt;li&gt;Upload data as dataset and then export to a tileset&lt;/li&gt;
&lt;li&gt;Upload data as a tileset&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Edit and manage spatial data in Mapbox Studio&lt;/li&gt;
&lt;li&gt;Add spatial data to a Mapbox Style&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the things that initially tripped me up was deciding when to use Datasets and when to use a Tileset as both are valid entry points into the data workflow. My general rule of thumb is that if I want a nice UI to make simple edits to my spatial data, I will reach for Datasets, otherwise I reach for Tilesets.&lt;/p&gt;

&lt;p&gt;If you have any questions or comments please reach out below! If you found this post useful, please retweet or share!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-links-and-resources" class="anchor"&gt;
  &lt;/a&gt;
  Useful Links and Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Datasets Docs (&lt;a href="https://docs.mapbox.com/studio-manual/reference/datasets/"&gt;https://docs.mapbox.com/studio-manual/reference/datasets/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Tilesets Docs (&lt;a href="https://docs.mapbox.com/studio-manual/reference/tilesets/"&gt;https://docs.mapbox.com/studio-manual/reference/tilesets/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>react</category>
      <category>javascript</category>
      <category>mapbox</category>
    </item>
    <item>
      <title>World-first Static time RegEx engine with O(0) time complexity</title>
      <author>Jakub Å vehla</author>
      <pubDate>Mon, 15 Feb 2021 15:45:49 +0000</pubDate>
      <link>https://dev.to/svehla/world-first-static-time-regex-engine-with-o-0-time-complexity-4k4e</link>
      <guid>https://dev.to/svehla/world-first-static-time-regex-engine-with-o-0-time-complexity-4k4e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-the-heck-is-that" class="anchor"&gt;
  &lt;/a&gt;
  What the heck is that?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;RegEx&lt;/code&gt; engine written with static types?!&lt;/li&gt;
&lt;li&gt;Code which evaluates &lt;code&gt;RegEx&lt;/code&gt; "templates" in compile time so you know the result before you run your app?!&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;RegEx&lt;/code&gt; engine which works with &lt;code&gt;O(0)&lt;/code&gt; run-time complexity?!&lt;/li&gt;
&lt;li&gt;Minified 0-bite (GZip) length output?!&lt;/li&gt;
&lt;li&gt;Fully bugged and not ready for production?!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#im-not-kidding-this-is-not-just-a-dream" class="anchor"&gt;
  &lt;/a&gt;
  I'm not kidding!!! This is not just a dream!
&lt;/h2&gt;

&lt;p&gt;This is the first world &lt;code&gt;RegEx&lt;/code&gt; engine written in pure Typescript types.&lt;/p&gt;

&lt;p&gt;Check the working examples!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VccASX_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y8prms2crwgmv1f8x0gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VccASX_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y8prms2crwgmv1f8x0gd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zStbqYyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mk7fc7el9gd0wssss0km.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zStbqYyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mk7fc7el9gd0wssss0km.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y38cscOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ke701al6bah7sbgkp9te.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y38cscOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ke701al6bah7sbgkp9te.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vYjtP7eh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pvwot2lj8ef8gfv5h9ac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vYjtP7eh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pvwot2lj8ef8gfv5h9ac.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Svehla/ts-generics-RegEx-engine"&gt;Github Repo - ts-generics-RegEx-engine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/play?target=1&amp;amp;ssl=1&amp;amp;ssc=1&amp;amp;pln=321&amp;amp;pc=1#code/PTAEFpK6dv4YgsAKBBRtQFkCGAXAC1AHsAHAUwCcCBLEgOwGcNN5V02vufxV8AnpVABJfNTqM8ZUAF5QAb1ShQAcnABGDaoBcoANqaNAGjXhVp9RoBMFsxoAMd1VtUBdZfad7Djy+f9XfwBOZ0d3T3VQn3Bg-2dNJ38ADmdQjxQVdVSY5PiQhIB2Z1SMrPBimML8s1T-ADZnYrKzRpj6mvVi-wBWZ0aW9T6Yns7wRv8AFmc+wfBpmMmxvv8AZmdpufWY1bHp-1tLdbnbGOsx9cDnWzntGJMzBMO1JLVtQe8DB0tXqzDnJyDO4GB6qADUAOuCXekVOBnOaghlm0RyeEUyam2Bl2iKhln2ZmOkQWBiWuNRlhWZk2kWGBlG5LUBNUEzMs0ibQMHUZqipqm6rXRWUqBmqPNZqjqZmakRyBjyPIFqlCKSFamiBjiPKlLl+sTVut0IO+PJVbxRXgNrh8WksSLevxs0JhGJccP0NjtYQtLku9hukQ0WI9OPBYWeLmZmiJro0JI9ZLDyL9Lj5mhpsbpHoZSbezI0Es07NjnI93NzqbCSs0A0DIo9YorBbCOs0Mtjco9CqbSo0ZqspUDGo9WqbOuser7BonRv0E69yP71h94Bng2Xs+XC7UM8s1gjq5dWX3m4RFY3e5Tq4Druswbv29UJ73Ubv0-j1kT9qfKesac-05Zn+j4AXuhZ-tOpbWOW34QXu1bQdO9bWI2sEStYrYodOnYYSBSrWP2q6Drew4ESBOqrHqBEGpRs6USB-arCutGDExdGgt+tFHAebGse6qxnpxPqrFeAk0cGImPmJRxRiJNHxqsX7OHJRxpopNFZqsOaccyqyFlpNGlnpUl8qs1Z6TR9ZmVJEqrK2Zk0Z2dlSUqqyEXZNHDm5Uk6pMepuQafmzn5Un9pMK5BRkAC+qAcGAAAC+BMOAFAAB6UAAxvgKVUFQJBUPwQgUKAACCAAmZUaAAPAAKgAfHIojiDQ+D0Aw0j6DVbj6KsGToIlyVpZl2XUHlBUoIIwgAMoAK4AEbVfVjViBIrVSLgZCdd11gZIVwgAPrlWVtWmAAqqYABKFAsPIS3yAACrgVBMBQIgMPgVWnQ1aXiAwZUsA4oAAPygFdLB6IdFVVUdi11aYs0LZ9cOlRV1Vg3VdWxRNRWgPtCMnaA52g9djV3aAj3Pa971I6AP0UH9APA8T4O4-jCOw-D83VV9nOI+jmMoHFoADSl6UUFlOVjXtxUUy9b0fWTK0tW1HVdfoDi7djwhHQTX2NbLVMfZDx0G-LtXI6b1NfRj0ugPjNVnQ1D1PXL1N4-NVWWwrFsu4bSM24LaBgLwIch0LId2-gZUADK0HNrCh9A4eJynyCB5wkClbluACCwM2tQANkwtsABIULgx1kzVtOpb9-0GLQDAAGbUKAABitDPfgK0ALamAAdIPjct1QuNg-gbhMx3Xe96AegMBQABu1C2zVuC0AX5ukzXdcsPow+t-t09MN34h96Ag-9wfo-j5PIPj3PoAL8v42TcVV09yQy-R7gJ9b7dO96b130Jfa+zN8CmDAftH+J8RAUB7nfcBj9n4ry1sVGB3tt50wZgYUBzdD7j0gfg0eGDEEYOQUvVBtsP5fwoMfJKAA5XuTACYAGESAzXek7UA7DOH4EATgwGINq56BocvehTAmFnxYWvDe5teZVV4e9UwGgA7UIoGQAuuAMoUAwb3AmDCKAAHc9Fn24SAweYjdG-29qYQxJibG901m-cmM0mCEGhrlAR9dcAMAEPoNwphe7mMviVXKQSz7OJxgAUTKrQfApj4ElXwPgKgVVPBhNHtgnxfiAnGE8AAaQoAIbxLAT5UEbgAc3yRiAAargAuM1irZJYL4gQNSVA1UBvIAA8j3eJVUMGeKoMjIpAgGoADJFAGAANbFNAI3UAYy3B6HqY04qUUOmgBqhoRqSgMQqH0AUhZDBQBzIECQJu2yNZ6C6UcloMUUDcKupo7R1jYFn2GaYHZAtbaxPiYknuPSm6AuSak9JGJMmlNAG0gJeTCnzJaaAcpVStlrKadCtpqBnkaK0TowFXzQD-ISY4s+YK0lDMyaM4pph0UUDUWg1x7iaokAJVCpFsLuqBKavAnFrz8WkvgYS+6biPGUtysjYJvyg6sGRakqpedC7F0ZVNTR8Sao-VqtClFDBKncOrki1QqhPAgwCZ4W50KAAGAASBQYD6FRVtWA8eUVLUmtAP1JKothqS3yp4Q59CB6DxZXMhgtAABeFApryt1VVcedUWi3KxhnLgoAqAUEqWlUAZBfaj1DkLaN2iZmgDmr-CgZVs25pOUwMgndy0lpKUQWgrSjHXRID3YqTAOFUB0ULBqhAUlkCYDoEARix39wufneaFB+4ZXbcAIxBAMqECBovWQM0HAaAAFZzWSAATQYdYaORisYuJDfTCNUaY2VP-ts6FRr3VmoxBapFlqAA6b6nXEPAa691nrBpiwlqNP1ByDCqA-XYS+56w2RujRU2N8bE13tfV+ke7dO4n0dXa79Lq3UYhBv+714sRq5RAyoANGGIEX2DSQUNl64NVLjddfACbzXbNPTjA2V1KnRNStBmRHqABUSKdWVICYJ4A8N8BFsxbkye8h9ABLcPq6FT6VAg0LRlGZbGy4Vy3oa-uxr8Pk19tx3j-Harr03vVUwIrmWssFT3KqmmZmmAUKAN+ehVBGI3mVDKT0yqqAANygAAI4zV8a1JutBqBebSto-ABcBA9IXqoUAUUA4qD0Lpyu31a5AJYKoIGRn1MmcpmZvjtH6YyKs-IolcSSUfPgcC0FKS0kucsOFyLtBovUGcJGvKPSqApYoKoTLj8cv6fyzg1QgmStMy4xm8zVXmCWbkTZ+rALHMtcc+S5z0mtOdYi+9HrMWqD9eoCQIb2B8qjfG9l8uuX70QndYtnjlXQ0sP9eR2R1m4bfZUHZwgLKCUA-Ix1sHKh0BzrICUrRJ9aYF3gfTfhviK0zTIGVAgxUF4n3rec0Alqusnd61QPD5GKegCGcS1r4KhkueRqoYnUWzsXcG1QG76axsC0p6AHn5H+cPb00tQ1AAKebIM3vLc+2tv7tnRX7aLaYAJ93QCTZF9N+uqgACUEuysvQqxZsHv35Fg6ByDxzELedQ7ADVHpAARHpOh00MFwB2jzVmTn4BINm8gQN-eQ+Jp-b+NjFdaf+6Bin+zrfkc82oSpeUMfRKRx29682Y8n2x8OqnoeGeB5UMz07sW1Dxayklkb6fKePN5-zlQgu1ePam7vNQEHXumaWx96rVvKfoHiatYqtDR7WAWdImF-DGC9sj9s2rJv6oR95+bhzTWnOB4h1PlQ0eY8eaKnFlPKPK+88I0NYjvrxpb9AIvBpTTbkehaDHwvpO4upQS+X1Lgfq+U9r3ztjUvO+reNzPvPpTovgSh1tMnHqoBQHvmniFpfuskLrliFg-mdk-i-slqlull-tKkfoBiRlLIygbGVBVrer-hZtBvRteubHVOrJrCmogGmhmlmo3M1GQOms1AnGwELC4gABqNQlRkCaICDYAzQFytSaIUAABal212t2EK6AG+QsFOEBCeHCZAyeyOMBih5Gme4g2e+gWhUe2+lAu+Gh+AwWF+V+FAegAARHNNYUgcdizsXpAc-mXugaNkFpsgYeRu5hAVAaYeYXAdfqANYRlPYWFo4UXlQKgW4RXkFt4VFG4PETKhTsgcXtYQNldhzrdvYVoV4SkXbGqvgBqrXFVKoKlM-nNBlFUalGNjUvIaAKsH2rbPwYIcIaIbQOIVIezpzhQN3ugHbo7noC7m7sVN7qAAwiQGVBQJ4IWuINCu5kEVYTCn4iFnHm0iFjoddHoG0ullsiUfwiJtevChiG9NMalNCgwDND3HNNQGig0o1HMRQHgPgMutdAxrqskmcWlIruIN8j9EEn9GlEATgT6sBmfjwowEwNcfWvIGsrftio1OwswDCRWkig4I+sidCR2mVEhvoVPjrIHliaiVsofglF6sfkBqRqPF6t7iQAXLcaISjBWkYvlDMiwJUiQFMaAE3PlMiu2sVOmr-IwIHq0Ulu0WIUjt0Vkb0b8RQP8bXKYDrN8alKYMSTiRjDQWDl-lEtNNJuIC8W8UwB8ZUl8UCalN3k8QsRYfASsQIGsTvnaZsfqdsXaXsZ4AcdqscYEp4CqZcdcbceNE7J4AMT9LMS6foKoG-O4Pej5gXH5gFpXqaqkk0ionfo-E8ZGdGZPIav4anmYd9hphGaoEsTGUigcfoCqemaVvoCmfKaABoNWY-PoE3A0i9KYBrN9noJmVGUVGWZroVioUntAQWaBsIsxhVmQHKZGVsUwO4JdPArQhIlIvAjIgCaIOaRjKpoHmAiIEwIaYQOWqSZTmAuqeWmDk2SDHuQefWkinWYHsmVQKmZCSiTiU2VlgYK2UXPWWebiWDnoOgLjuIGidScDIHi2W2fWZ2aBvPJQqPOgJAdSQAITIqEAcLxlPxwWgCEAbSUAMBGarwTkd5TmTklRTQOzbLrl+nyAOA4rvZkBkUGoDkGAtCPnPlVlsagkn7gmeCTakXkXUFM6RGk79nN4uFoEV5-q24iD3R6BgLNorEkBECtzkBrSnJoVGIeY+5MC4DLw2kYpGKEAbzFSsEkA6JMBMBVKgBY7SZGEzGgZcVUn4EU5PE3nGnXpmnnFVR8XEWMXIwHGAnnF5bN74m867n7lLqHllTHkqCnlQmonfbplXkRWvFRXQr3lT7jknyTmy5Mb0V+UKlUbKnmlqnxUalf4fmhVb5fntn54bnnExWU6b7n6NznF6Aql1UqA2IIF5W8YMUCWdUeY-S3Jhnr6U5zqvnlp6C-l1Uf687pmwUvycXkkAZgnUm8WN78X1SRlpHnY5nMWqCZFDaSXGauWRXvEeXdzmnd4U6OV4FkaU4+X5UCWNUBVg4dWgbBUFYNzfrXnnXRUnJoa-lJWiApVvFonMUZW85ZX4A5Um5bX+XrnFUNUvnYnlrjYU4jXZXEW5UI2FWBXAldmYVLXPoeorVEZOUPVPV9V+U7XCWs77ViVHXZFc7upilCEiGSmSHSEs19Fg53Wn5g7U3pQFXG4AnvXmnfZfU4L7zfrA2FmUXY30W42+UvWUWKnMlVQqmlWTVlQY2PwapK19Uq3PUbYBX1WE2k2qBIU220zIU20EWMr24UBzQzSVKG0fSeCTlenwbVIek-Q+2oqeCEGenyCqoFzqqaoHFAFgykxEXK2EHEGTk+yUxlTR2ImyAhnk2Un3UQlgw0HpVPn2UU4EZgBvFaYLJXLKWK2w3EUj796kAvygCGX0mdrXr83Z24GC1T752NnQoh0-SRlI66pEBqgl3TLNprK0BlR6B1khYFwkCVKiIkxzXkZ6DuaT0NLT16A1UUAhbgnRyL3L1MAhbDwkBeaibWUkAkwMBKWgA9yRUeYbwFweaHm0x-Rpar3r0LJMBT0z08mQX73UmH1L3MzpYcbCAe29XpSB26qFWwN6qNTO2u3u3MbQNkCFWCWb0R2BaaxYwQPFQ7JIMu1u1QOqC4BAyi5zSi7hrhra6CYZTa5gg0MCBMO1GWBzS0NcPhrVG8PhoCC1HSr4OMo1TD63RoPkOUPUOpSsMMP0MZTOC4BzQyMyMZQKNCOByryrBx1-yqCi4fr6Nvr9wfra70POCi79za4WNWOWNjbJq24O49LDpCyDFO521jStLppPx32mU5qVLY4VplQkBGIMCoBAA"&gt;you can play with the source code here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer" class="anchor"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The code is not ready to use in production environment.&lt;/li&gt;
&lt;li&gt;Because of the stack limits of Typescript, some &lt;code&gt;regEx&lt;/code&gt;s stop working because they are too long and trigger recursion stack overflow known as &lt;code&gt;Type instantiation is excessively deep and possibly infinite&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;RegEx&lt;/code&gt; backtracking is not implemented yet. &lt;/li&gt;
&lt;li&gt;The parser supports only a small subset of &lt;em&gt;PCRE&lt;/em&gt; standard. Specifically &lt;code&gt;.?*+()\\&lt;/code&gt; symbols.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#motivation-usage" class="anchor"&gt;
  &lt;/a&gt;
  Motivation + usage
&lt;/h2&gt;

&lt;p&gt;Thanks to new features of Typescript 4.1.x we are able to parse a string into a Tuple of tokens and much more! So I decided to write my own custom &lt;code&gt;RegEx&lt;/code&gt; engine just by using Typescript static types to demonstrate how powerful the type system of Typescripts is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-the-regex-engine-work-under-the-hood" class="anchor"&gt;
  &lt;/a&gt;
  How does the RegEx engine work under the hood?
&lt;/h2&gt;

&lt;p&gt;As you may know, programming languages compilers + interpreters. You may know that they are pretty complex and includes &lt;em&gt;Lexers&lt;/em&gt;, &lt;em&gt;Parsers&lt;/em&gt;, &lt;em&gt;Interpreters&lt;/em&gt;, and so on.&lt;/p&gt;

&lt;p&gt;On the other side, this small engine is quite simple, so there are just 3 small modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Tokenizer&lt;/li&gt;
&lt;li&gt;2. Parser&lt;/li&gt;
&lt;li&gt;3. Interpreter&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-tokenizer" class="anchor"&gt;
  &lt;/a&gt;
  1. Tokenizer
&lt;/h3&gt;

&lt;p&gt;A small generic &lt;code&gt;type TokenizeString&amp;lt;T&amp;gt;&lt;/code&gt; just parses &lt;code&gt;RegEx&lt;/code&gt; template to tokens which are used as the input for &lt;code&gt;2. Parser&lt;/code&gt; to build &lt;code&gt;RegEx&lt;/code&gt; Abstract-Syntax-Tree (AST).&lt;/p&gt;

&lt;p&gt;Examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;T0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TokenizeString&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;(+(ab)+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lo1SJZnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9uh78sfkj4ysaz3i78qb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lo1SJZnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9uh78sfkj4ysaz3i78qb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;T1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TokenizeString&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;(+(a(xy)+(xx)b)+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pgXNAtyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/021b13vpyjxji5hmmcko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pgXNAtyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/021b13vpyjxji5hmmcko.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-parser" class="anchor"&gt;
  &lt;/a&gt;
  2. Parser
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;type ParseRegExTokens&amp;lt;T&amp;gt; = ...&lt;/code&gt; takes the tokenized template and does the syntax analysis which produces an Abstract-Syntax-Tree (AST) Model of the &lt;code&gt;RegEx&lt;/code&gt; template.&lt;/p&gt;

&lt;p&gt;Examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;T3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ParsedRegEx&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TokenizeString&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;(+(a(xy)+(xx)b)+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QAVtumUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0xd54719gs4nkg66hftf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QAVtumUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0xd54719gs4nkg66hftf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the parser supports nesting of structures (like brackets in brackets in brackets etc...)&lt;/p&gt;

&lt;p&gt;AST for &lt;code&gt;'\\(+(a(xy)+(xx)b)+'&lt;/code&gt; template will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exactlyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;zeroOrMore&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groupElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exactlyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groupElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exactlyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exactlyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}];&lt;/span&gt;
        &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exactlyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...;&lt;/span&gt; &lt;span class="c1"&gt;// and so on&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...;&lt;/span&gt; &lt;span class="c1"&gt;// and so on&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...;&lt;/span&gt; &lt;span class="c1"&gt;// and so on&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exactlyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-regex-interpreter" class="anchor"&gt;
  &lt;/a&gt;
  3. RegEx Interpreter
&lt;/h3&gt;

&lt;p&gt;The last step is to create a proper "interpreter" &lt;code&gt;type Test&amp;lt;RegExp, TestString&amp;gt; = ...&lt;/code&gt; which takes a template and a test string by applying rules from the &lt;code&gt;RegEx&lt;/code&gt; AST.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EK8lTaKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5umw20ejtalgkg7ycce3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EK8lTaKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5umw20ejtalgkg7ycce3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OuvHDzvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0yn2s582680afpldqt03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OuvHDzvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0yn2s582680afpldqt03.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGuRRjY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eln37sewq0c2pxmmbdpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGuRRjY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eln37sewq0c2pxmmbdpc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N5C4lYIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9o0rnkn6igyw1yow4xbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N5C4lYIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9o0rnkn6igyw1yow4xbq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--It1Z4JoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j68b3vpw0lukn0kljy38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--It1Z4JoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j68b3vpw0lukn0kljy38.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzuCRbeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yks04ob8eirrp7kh37qu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzuCRbeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yks04ob8eirrp7kh37qu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IopMX4BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ma5skyxop7s02nnierru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IopMX4BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ma5skyxop7s02nnierru.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oSzIMoxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rakc3ufzv1zbdjx6chfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oSzIMoxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rakc3ufzv1zbdjx6chfn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XahUHzrH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ezi0p2b4fzc71nle9u0r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XahUHzrH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ezi0p2b4fzc71nle9u0r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! ð ð&lt;/p&gt;

&lt;p&gt;If you don't believe, you can check the full source code in this GitHub repo: &lt;a href="https://github.com/Svehla/ts-generics-RegEx-engine"&gt;https://github.com/Svehla/ts-generics-RegEx-engine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait... And what about the real &lt;code&gt;Javascript&lt;/code&gt; output? Let's check it out!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azPaFkHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jskko6pefr28zqd5v50n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azPaFkHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jskko6pefr28zqd5v50n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Haha! A few hundreds line of static types and runtime output is empty with &lt;code&gt;O(0)&lt;/code&gt; time complexity! That's the magic of Typescript ð¦ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-whats-next" class="anchor"&gt;
  &lt;/a&gt;
  And what's next?
&lt;/h2&gt;

&lt;p&gt;If you're interested in another advanced usage of the Typescript type system, you can check these step-by-step articles/tutorials on how to create some advanced Typescript generics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/svehla/typescript-how-to-deep-merge-170c"&gt;Object Deep Merge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/svehla/typescript-object-fromentries-389c"&gt;How to Object.fromEntries tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/svehla/typescript-transform-case-strings-450b"&gt;UPPER_CASE to lowerCase transformator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/svehla"&gt;and so on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>regularexpression</category>
      <category>javascript</category>
      <category>regex</category>
    </item>
    <item>
      <title>forEach() Array Method</title>
      <author>Ali Taha Shakir</author>
      <pubDate>Mon, 15 Feb 2021 15:44:26 +0000</pubDate>
      <link>https://dev.to/alitahashakir/foreach-array-method-1d71</link>
      <guid>https://dev.to/alitahashakir/foreach-array-method-1d71</guid>
      <description>&lt;p&gt;JavaScript provide us with several built in functions to work with arrays which are know as Array Methods. Lets take a closer look at JavaScript  forEach() method.&lt;/p&gt;

&lt;p&gt;The forEach() method executes a callback function for each element of array. That callback function accepts between one and three arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Current Value (required) â The value of the current array element being processed in loop&lt;/li&gt;
&lt;li&gt;Index (optional) â The current elementâs index number&lt;/li&gt;
&lt;li&gt;Array (optional) â The array forEach() was called upon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering that we have the following array below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const numbersArray = [1, 2, 3, 4, 5];
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets apply forEach() method to numbers array, you need a callback function (or anonymous function):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;numbersArray.forEach(function() {
    // code
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The function will be executed on each element of the array. It requires the current value parameter which represents the element of an array which is currently being processed in loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;numbersArray.forEach(function(number) {
    console.log(number);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2VUZ0njB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/puaht7kosiosl1gzam5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2VUZ0njB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/puaht7kosiosl1gzam5a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the minimum required syntax to run forEach() method.&lt;/p&gt;

&lt;p&gt;Alternatively, you can use the ES6 arrow function representation for simplifying the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;numbersArray.forEach(number =&amp;gt; console.log(number));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>loops</category>
      <category>array</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CSS Dino game</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 15 Feb 2021 15:25:34 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/css-dino-game-1e20</link>
      <guid>https://dev.to/alvaromontoro/css-dino-game-1e20</guid>
      <description>&lt;p&gt;You probably have seen one of Chrome's "easter eggs": a game of a jumping dinosaur that show us with the "no internet connection" error page. If you haven't seen it, you can go to Chrome, and type &lt;code&gt;chrome://dino&lt;/code&gt; into the address bar.&lt;/p&gt;

&lt;p&gt;This weekend, I developed a small version of that game just using HTML and CSS, without a single line of JavaScript and without using images.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: the game changes the values of CSS variables on animations, and not all browsers like that. &lt;strong&gt;For best results, check the game on Chrome&lt;/strong&gt;. If you cannot play, here's a &lt;a href="https://www.youtube.com/watch?v=dzrwXWI17dE"&gt;video of how it looks&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see a &lt;a href="https://codepen.io/alvaromontoro/full/NWbrbzO"&gt;demo on Codepen&lt;/a&gt; (click on the dinosaur to make it jump before the cactus):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/NWbrbzO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Some fun facts about the game:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is responsive: it will adapt to large or small screens&lt;/li&gt;
&lt;li&gt;It is customizable: you can change speed, colors, obstacle number...&lt;/li&gt;
&lt;li&gt;It is good for practicing CSS animations and relative units.&lt;/li&gt;
&lt;li&gt;It only works on Chromium-based browsers (not on purpose ð­)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Initially, the game had a different dinosaur, it was bigger and more rounded, but I didn't fully like how it looked, so I changed it a little to make it look more like the original version from Chrome.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ajfgk91H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5b0675x4tp5k6zzstg6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ajfgk91H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5b0675x4tp5k6zzstg6o.png" alt="Screenshot of the start screen of CSS Dino, the dinosaur is slightly bigger and rounder, the font is Helvetica which is nice and round"&gt;&lt;/a&gt;&lt;/p&gt;
This was the initial look of the game&lt;br&gt;Â 



&lt;p&gt;I kept the original design behind a checkbox (all done with CSS again), but the pixelated drawings are now the default... and honestly they look much better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works" class="anchor"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;The idea of the game is to reach the end of the course without hitting any cacti on the way. You can skip a cactus by clicking on the dinosaur right before it reaches the obstacle...&lt;/p&gt;

&lt;p&gt;So, how is it done? It has 3 main parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The dinosaur&lt;/li&gt;
&lt;li&gt;The cacti&lt;/li&gt;
&lt;li&gt;The messages (start, win, and game over)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The dinosaur doesn't actually move, it was drawn using shadows (or gradients in the case of the rounded one) and remains static on its side of the screen. It is the world that moves around it.&lt;/p&gt;

&lt;p&gt;The cacti are inside a div which is the one that actually moves from right to left. They are done using &lt;code&gt;label&lt;/code&gt;s that activate checkboxes for each cactus.&lt;/p&gt;

&lt;p&gt;Finally, we have some screens to display the "Play", "Game over", or "You won" messages. They are simple &lt;code&gt;div&lt;/code&gt;s that will be displayed based on the cactus' checked boxes and some CSS variables explained below.&lt;/p&gt;

&lt;p&gt;To avoid some "cheating" we hide the &lt;code&gt;label&lt;/code&gt;s and only make them available for a small fraction of time when they need to be clicked.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TWlw12K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/20b7e17qije53tokrf12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TWlw12K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/20b7e17qije53tokrf12.png" alt="Screenshot of the game, some sections are highlighted in red to show where the labels would go"&gt;&lt;/a&gt;&lt;/p&gt;
Coloring the labels that will trigger the jump&lt;br&gt;&amp;amp;nsbp;



&lt;p&gt;This is the interesting part. We keep track of the number of cactus jumped with the checkboxes, and we keep track of how many should have been jumped with a CSS variable that we update inside an animation (which is what some browsers don't support.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* The percentages indicate the position of the cactus */&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;cactusSkipped&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;13&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;13&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;36&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;36&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;41&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;41&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;45&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;45&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;55&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;55&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;63&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;63&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;70&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;70&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;81&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;81&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;86&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;86&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;92&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;92&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;97&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;97&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By using the CSS functions &lt;code&gt;calc&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; we can calculate if the number of cacti jumped is the number of cacti that should have been jumped and show the game over message accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While writing for it, I realized that some of the things are overcomplicated. For example, instead of using checkboxes for the cactus, it would be easier to have radio buttons.&lt;/p&gt;

&lt;p&gt;Also, it could be improved by adding more background elements which would make it a bit slower too, but closer to the original (e.g. the clouds).&lt;/p&gt;

&lt;p&gt;I may try to make a second version with some improvements, and also try to figure out a way to make it work in all browsers and not just in Chromium.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>I Created Famous Logos with CSS</title>
      <author>Shahed Nasser</author>
      <pubDate>Mon, 15 Feb 2021 15:09:16 +0000</pubDate>
      <link>https://dev.to/shahednasser/i-created-famous-logos-with-css-2ock</link>
      <guid>https://dev.to/shahednasser/i-created-famous-logos-with-css-2ock</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://blog.shahednasser.com/i-created-famous-logos-with-css/"&gt;my personal blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;CSS is a powerful tool that can do almost anything once you have had a full grasp of it. Sometimes we're not aware of all the things you can do with CSS, and end up taking a complicated route to do what we need to be done. That's why we need to always practice CSS and grow our skills in it and knowledge of it.&lt;/p&gt;

&lt;p&gt;I decided to take on a challenge to use CSS to create famous logos we see every day. It was a challenge that helped me think better in CSS and understand what means I can use to achieve the expected result.&lt;/p&gt;

&lt;p&gt;I'll list the logos from the least difficult to the most difficult for me. You can check out the entire collection on &lt;a href="https://codepen.io/collection/ABrgEg"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#google" class="anchor"&gt;
  &lt;/a&gt;
  Google
&lt;/h2&gt;

&lt;p&gt;This one's concept is pretty simple. We have the letters of Google in different colors, and that's mostly it. However, there was one problem which is the font. Google uses a custom font for the logo called &lt;a href="https://fontmeme.com/google-new-logo-font/#:~:text=About%20Google%20New%20Logo%20Font&amp;amp;text=The%20new%20Google%20logotype%20is,old%20style%20serif%20typeface%20Catull."&gt;Product Sans&lt;/a&gt;, so I had to resort to what looked the closest to it from Google Fonts, and I choose &lt;a href="https://fonts.google.com/specimen/Poppins"&gt;Poppins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shahednasser/embed/RwoozNK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#youtube" class="anchor"&gt;
  &lt;/a&gt;
  Youtube
&lt;/h2&gt;

&lt;p&gt;This was another easy one. It was a box with a triangle inside essentially. However, I had some trouble with making the rounded borders similar to the logo and had to settle for the next closest thing.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shahednasser/embed/gOLmwEE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#facebook" class="anchor"&gt;
  &lt;/a&gt;
  Facebook
&lt;/h2&gt;

&lt;p&gt;My problem with the Facebook logo was similar to that of Google; I couldn't use the same font as it is a custom font, so I had to use &lt;a href="https://fonts.google.com/specimen/Prompt"&gt;Prompt&lt;/a&gt; as the f letter looked the most similar to the one in Facebook's logo.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shahednasser/embed/bGBqeoL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#instagram" class="anchor"&gt;
  &lt;/a&gt;
  Instagram
&lt;/h2&gt;

&lt;p&gt;The concept of the logo is simple in Instagram, however, the gradient was a little bit tough. I had to use the help of the internet as well to get it right, but it was a nice take on gradients and seeing what more can be done with it. I haven't really used gradients heavily before and all of my uses of it were pretty simple, so it was a good practice.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shahednasser/embed/JjbWRNN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#whatsapp" class="anchor"&gt;
  &lt;/a&gt;
  Whatsapp
&lt;/h2&gt;

&lt;p&gt;This one was interesting. So, as I was doing the entire logo in CSS I had to also make the phone shape in the middle with CSS as well. The problem that I had was that I couldn't figure out how to make the left side of the phone as rounded as it is in the logo. Usually, we use rounded corners a lot which are easy to make, but I've never really tried making sort of an arc shape in CSS.&lt;/p&gt;

&lt;p&gt;So I searched online and I came upon the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius"&gt;border-bottom-left-radius&lt;/a&gt; property, which I already knew. However, one thing I probably learned as a beginner but totally forgot about now is that this property can take two values, one for length and one for percentage. The length determines the size of the circle radius or the semi-major and semi-minor axes of the ellipses, whereas the percentage is of the width or height of the box(or element). The first value is for the horizontal axis whereas the second part is for the vertical axis. This property has 4 variations to achieve the same to all 4 sides of the element.&lt;/p&gt;

&lt;p&gt;After learning this, I was able to make the phone shape look better and I applied this as well to other logos I worked on. I never really tried using this property before so I still need more practice with it.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shahednasser/embed/ExNWNJO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#twitter" class="anchor"&gt;
  &lt;/a&gt;
  Twitter
&lt;/h2&gt;

&lt;p&gt;This one was so frustrating to do and took the longest. I had to leave it at some point and come back to it later. Although it may not look perfect, I'm still really proud of it.&lt;/p&gt;

&lt;p&gt;I had to rely a lot on :after and :before pseudo-elements and the border-radius property I learned with Whatsapp. I mostly needed to learn to look outside the box. I broke down the Twitter bird shape into 4 sections and worked my way through it. Although it was frustrating at some points, it was a needed practice not just for my skills in CSS, but also for my creativity as a developer.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shahednasser/embed/rNWWXmj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I will do part 2 of this challenge and take on other famous logos. If you have ideas for logos that would present a good challenge, leave them in the comments! I also encourage you to take on similar challenges as it is a nice break from the same old and a good way to learn or relearn what we knew but forgot about.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Spiral Matrices with Julia</title>
      <author>Warisul Imam</author>
      <pubDate>Mon, 15 Feb 2021 14:57:42 +0000</pubDate>
      <link>https://dev.to/leadersheir_/spiral-matrices-with-julia-1i06</link>
      <guid>https://dev.to/leadersheir_/spiral-matrices-with-julia-1i06</guid>
      <description>&lt;p&gt;&lt;a href="https://julialang.org"&gt;Julia&lt;/a&gt; gives you C-like speed with Python-like learning curve and easy syntax. In an attempt to solidify my Julia-lang skills I was working through the exercises on &lt;a href="https://exercism.io"&gt;Exercism&lt;/a&gt;&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; which, by the way, is an amazing resource to practice programming languages. That's where I where I came across the &lt;code&gt;Spiral Matrix&lt;/code&gt; problem.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G4z8SVsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uzowup9lr6cqvcjps6jk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G4z8SVsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uzowup9lr6cqvcjps6jk.png" alt="f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the problem requires you to write a function that takes in an integer &lt;code&gt;n&lt;/code&gt;, and outputs a spiral matrix of dimensions &lt;code&gt;n x n&lt;/code&gt; (which implies that it's also a square matrix) with &lt;code&gt;n^2&lt;/code&gt; elements sorted from smallest to largest in a [clockwise] spiral order&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tdlzyPIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3n1g0zey6pt5h70fauy7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tdlzyPIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3n1g0zey6pt5h70fauy7.png" alt="f_show"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I couldn't think of a way to accomplish this task right off the top of my head. But I refused to look up solutions and decided to figure it out entirely on my own. Three days of working on paper, in code, and hunting down repeating patterns which could be expressed in code through mathematical formulae - finally let me obtain the ever-desired spiral matrix. My hard-work paid off.&lt;/p&gt;

&lt;p&gt;The purpose of this article is to walk the reader through my entire thought process from the moment I began brainstorming about ways of solving this problem all the way to the moment when I finally acquired the desired result. We'll come across some pattern-hunting, a bit of math, a few code snippets in &lt;code&gt;Julia&lt;/code&gt; trying to achieve the individual parts that are finally put together to acquire the solution to the exercise. A basic understanding of linear algebra (vectors and matrices) will be helpful albeit not necessary.&lt;/p&gt;

&lt;h6 id="notes_"&gt;If anything in the Julia syntax looks confusing or odd, make sure to check out the &lt;a href="#notes"&gt;things you should know about Julia&lt;/a&gt; at the bottom of this article.&lt;/h6&gt;


&lt;h3&gt;
  &lt;a href="#how-i-did-it" class="anchor"&gt;
  &lt;/a&gt;
  How I did it
&lt;/h3&gt;

&lt;p&gt;The basic approach I took was to take an array containing the integers from &lt;code&gt;1&lt;/code&gt; through &lt;code&gt;n^2&lt;/code&gt; and map them to a two-dimensional array (a &lt;code&gt;n x n&lt;/code&gt; matrix) in a spiral manner. Every &lt;code&gt;n&lt;/code&gt; in the one-dimensional array can be paired with some tuple &lt;code&gt;(i,j)&lt;/code&gt; describing the location it is mapped to in the two dimensional array.&lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--66jBdyCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/696httbo8y4t23th4pm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--66jBdyCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/696httbo8y4t23th4pm1.png" alt="single_map"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DkrsDDfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/18c2qztay0awmha3sq3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DkrsDDfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/18c2qztay0awmha3sq3j.png" alt="map"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Thus we obtain a new array of tuples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lL85McN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z35vw6ecwuyo1vnfzevn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lL85McN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z35vw6ecwuyo1vnfzevn.png" alt="tuple_array"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we've obtained that array of tuples containing the coordinates of another two-dimensional array where each consecutive &lt;code&gt;n&lt;/code&gt; in the range of &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;n^2&lt;/code&gt; is to be mapped to in order to obtain a spiral matrix, the remaining task is pretty straight forward. Here's how it looks (the &lt;code&gt;linear_map&lt;/code&gt; variable is set for &lt;code&gt;n=4&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight julia"&gt;&lt;code&gt;&lt;span class="c"&gt;# initiate a spiral matrix of n x n dimensions filled with zeros&lt;/span&gt;
&lt;span class="n"&gt;spiral_mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spiral_mat&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;#=
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
=#&lt;/span&gt;

&lt;span class="c"&gt;# the array containing the coordinates&lt;/span&gt;
&lt;span class="n"&gt;linear_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="x"&gt;),&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# set n as the value of spiral_mat[i,j]&lt;/span&gt;
  &lt;span class="n"&gt;spiral_mat&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;],&lt;/span&gt; &lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spiral_mat&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;#=
 1  2  3 4
12 13 14 5
11 16 15 6
10  9  8 7
=#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#note-were-using-raw-display-endraw-instead-of-raw-print-endraw-or-raw-println-endraw-because-the-latter-two-print-the-output-as-inline-and-thus-dont-have-the-pretty-matrixlike-formatting-like-raw-display-endraw-does" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;Note: We're using &lt;code&gt;display()&lt;/code&gt; instead of &lt;code&gt;print()&lt;/code&gt; or &lt;code&gt;println()&lt;/code&gt; because the latter two print the output as inline and thus don't have the pretty matrix-like formatting like &lt;code&gt;display()&lt;/code&gt; does.&lt;/em&gt;
&lt;/h6&gt;

&lt;p&gt;Okay, that was easy enough, just a couple of lines of code. But how do we obtain the &lt;code&gt;linear_map&lt;/code&gt;? That's the fun part.. and also the relatively harder one ð.&lt;/p&gt;

&lt;p&gt;Let's go find some patterns! ð&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#hunting-for-patterns" class="anchor"&gt;
  &lt;/a&gt;
  Hunting for Patterns
&lt;/h3&gt;

&lt;p&gt;The first thing that came to my mind was to write down the &lt;code&gt;i&lt;/code&gt;s and &lt;code&gt;j&lt;/code&gt;s side by side and see if there's a specific incremental and/or decremental pattern that they followed.&lt;/p&gt;

&lt;p&gt;Here are the hand-written &lt;code&gt;linear_map&lt;/code&gt;s for &lt;code&gt;n=2&lt;/code&gt;, &lt;code&gt;n=3&lt;/code&gt;, and &lt;code&gt;n=4&lt;/code&gt; (&lt;code&gt;2x2&lt;/code&gt;, &lt;code&gt;3x3&lt;/code&gt;, and &lt;code&gt;4x4&lt;/code&gt; matrices).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2x2    3x3    4x4
1 1    1 1    1 1
1 2    1 2    1 2
2 2    1 3    1 3
2 1    2 3    1 4
       3 3    2 4
       3 2    3 4
       3 1    4 4
       2 1    4 3
       2 2    4 2
              4 1
              3 1
              2 1
              2 2
              2 3
              3 3
              3 2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Observe that in all three cases,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the right column increments while the left column remains at the same value&lt;/li&gt;
&lt;li&gt;the left column increments while the right column remains at the same value&lt;/li&gt;
&lt;li&gt;the right column decrements while the left column remains at the same value&lt;/li&gt;
&lt;li&gt;the left column decrements while the right column remains at the same value&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These four events take place in the order I've listed them and keep repeating till the center of the spiral matrix is reached.&lt;sup id="fnref4"&gt;&lt;a href="#fn4"&gt;4&lt;/a&gt;&lt;/sup&gt; I'm going to call this list the &lt;code&gt;actions&lt;/code&gt; and each of the elements, an &lt;code&gt;action&lt;/code&gt;, through out the rest of the article for the ease of addressing.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#well-discuss-shortly-about-how-the-algorithm-albeit-a-pretty-abstract-one-so-far-identifies-the-center" class="anchor"&gt;
  &lt;/a&gt;
  We'll discuss shortly about how the algorithm (albeit a pretty abstract one so far) identifies the center.
&lt;/h6&gt;

&lt;p&gt;To make it easier for you to remember, here's the same list in a more compact form. Keeping this in memory is going to prove helpful in a bit.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;right increments, left stays same&lt;/li&gt;
&lt;li&gt;left increments, right stays same&lt;/li&gt;
&lt;li&gt;right decrements, left stays same&lt;/li&gt;
&lt;li&gt;left decrements, right stays same&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alright. Now, how does the algorithm know when it's reached the center? The short answer is that it doesn't. I've left out a constraint from the algorithm which I'm going to add in now. Before each of the events take place, a check must be made whether the same configuration of &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; has been went over before. Namely, you can imagine adding &lt;code&gt;(i,j)&lt;/code&gt; pairs to an array as you go through the steps mentioned above; but before adding the tuple to the array you check whether it's already in the array or not - you carry out the step if it isn't in the array, pass on to the next step if it is already in the array, and stop the algorithm if you find yourself in the situation where you skip to the next step because you found a certain pair, say, &lt;code&gt;(a,b)&lt;/code&gt; in the array, but the pair generated from the next step, say, &lt;code&gt;(c,d)&lt;/code&gt;, is also in the array. That is to say that if you find two consecutively generated pairs to be in the array, that's when you stop.&lt;/p&gt;

&lt;p&gt;Now we make another observation - exactly how many times does each of the columns increment or decrement before moving to the next step in the &lt;code&gt;actions&lt;/code&gt;? Here's a Julia &lt;a href="https://repl.it/@leaderheir/linearmap#main.jl"&gt;repl&lt;/a&gt; you can play with and generate the &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; columns for any given &lt;code&gt;n&lt;/code&gt; to verify the claim I'm about to make.&lt;/p&gt;

&lt;p&gt;Here's the claim, or the observation, rather. If you observe enough of those columns, you would notice a general pattern. Here's what it looks like. It might be a little long, so bear with me. We take &lt;code&gt;i=1&lt;/code&gt; and &lt;code&gt;j=1&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;i   j
i   j+1
i   j+2
.   .
.   .
.   .
i   n
i+1 n
i+2 n
i+3 n
.   .
.   .
.   .
n   n
n   n-1
n   n-2
n   n-3
.   .
.   .
.   .
n   j
n-1 j
n-2 j
n-3 j
.   .
.   .
.   .
i+1 j
i+1 j+1
i+1 j+2
i+1 j+3
.   .
.   .
.   .
i+1 n-1
i+2 n-1
i+3 n-1
i+4 n-1
.   .
.   .
.   .
n-1 n-1
n-1 n-2
n-1 n-3
n-1 n-4
.   .
.   .
.   .
n-1 j+1
n-2 j+1
n-3 j+1
n-4 j+1
.   .
.   .
.   .
i+2 j+1
i+2 j+2
i+2 j+3
.   .
.   .
.   .
i+2 n-2
i+3 n-2
i+4 n-2
.   .
.   .
.   .
n-2 n-2
n-2 n-3
n-2 n-4
.   .
.   .
.   .
n-2 j+2
n-3 j+2
n-4 j+2
.   .
.   .
.   .
i+3 j+2
i+3 j+3
i+3 j+4
.   .
.   .
.   .
i+3 n-3
i+4 n-3
i+5 n-3
.   .
.   .
.   .
n-3 n-3
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Oookay, I suppose that was sufficient to show the pretty vague pattern that I spotted by observing a number of &lt;code&gt;(i,j)&lt;/code&gt; pair columns for hours.&lt;/p&gt;

&lt;p&gt;We can encode this pattern in a piece of pseudo-code. For a given &lt;code&gt;n&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#note-this-piece-of-pseudocode-although-still-not-dynamic-does-the-same-thing-as-the-general-pattern-showed-earlier" class="anchor"&gt;
  &lt;/a&gt;
  Note: This piece of pseudo-code, although still not dynamic, does the same thing as the general pattern showed earlier.
&lt;/h6&gt;

&lt;p&gt;At this point, we've got ourselves a new array to work with -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[n, n, 1, 2, n-1, n-1, 2, 3, n-2, n-2, 3, 4, n-3, n-3, ...]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's recall what this array actually contains. The right column (the &lt;code&gt;j&lt;/code&gt; column) increments till it reaches &lt;code&gt;n&lt;/code&gt;, then the &lt;code&gt;i&lt;/code&gt; increments till it reaches &lt;code&gt;n&lt;/code&gt;, then the &lt;code&gt;j&lt;/code&gt; decrements till it reaches 1, then the &lt;code&gt;i&lt;/code&gt; decrements till it reaches 2, and so on. In other words, our new array contains the upper-bounds and the lower-bounds up to and down to which &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; increment and decrement based on the &lt;code&gt;action&lt;/code&gt;. Naturally enough, I'm going to address this array as the &lt;code&gt;bounds&lt;/code&gt; for the rest of the article.&lt;/p&gt;

&lt;p&gt;Now let's implement the algorithm in the pseudo-code in &lt;code&gt;julia&lt;/code&gt; syntax and find the &lt;code&gt;linear_map&lt;/code&gt; for a value of &lt;code&gt;n&lt;/code&gt;, say, &lt;code&gt;n=2&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight julia"&gt;&lt;code&gt;&lt;span class="c"&gt;# initialize the linear map array&lt;/span&gt;
&lt;span class="n"&gt;linear_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[]&lt;/span&gt;

&lt;span class="c"&gt;# initialize i and j and set them equal to 1&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;# set a value for n&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
&lt;span class="cm"&gt;#= we're pushing (i,j) first and then incrementing/decrementing;
that is why we need to push in the final values
of i and j after the loop is over
=#&lt;/span&gt;


&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;#=
[(1,1), (1,2), (2,2), (2,1)]
=#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The capability of stopping the algorithm when the center is reached can not be deduced from this array. However, we'll find out soon that we won't need to stop when the center is reached, we can make use of another observation to select a part of this array, the &lt;code&gt;bounds&lt;/code&gt;, to work with and neglect the rest.&lt;sup id="fnref5"&gt;&lt;a href="#fn5"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The next task is to establish a one-to-one correspondence between the set of natural numbers (&lt;code&gt;1, 2, 3, ...&lt;/code&gt;) and the &lt;code&gt;bounds&lt;/code&gt;. Although it looks like a tricky job at the face of it, we're going to figure out a clever work around to simplify the problem in hand.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#order-within-the-chaos" class="anchor"&gt;
  &lt;/a&gt;
  Order within the Chaos
&lt;/h3&gt;

&lt;p&gt;Let's begin with establishing a one-to-one correspondence between the set of natural numbers and the &lt;code&gt;bounds&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLkuFXBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5dd8auuwxzvvef7uqd5p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLkuFXBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5dd8auuwxzvvef7uqd5p.png" alt="n_map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#apologies-please-pardon-my-messy-and-lousy-illustrations-working-with-graphics-isnt-quite-my-thing" class="anchor"&gt;
  &lt;/a&gt;
  Apologies: Please pardon my messy and lousy illustrations, working with graphics isn't quite my thing.
&lt;/h6&gt;

&lt;p&gt;Now as you can see, there's no easy function that can be used to map each of the elements of the set of natural numbers to the &lt;code&gt;bounds&lt;/code&gt;. Hence we're not going to work with the set of natural numbers directly. Instead, we're going to break it up into two subsets - one containing the  natural numbers that are mapped to the elements in the &lt;code&gt;bounds&lt;/code&gt; that have an &lt;code&gt;n&lt;/code&gt; in them, and the other containing the natural numbers being mapped to the constants in the &lt;code&gt;bounds&lt;/code&gt;. Then again, we'll make two more subsets from the two subsets of &lt;code&gt;bounds&lt;/code&gt; - one containing the odd numbers of its parent set and the other containing the even numbers of the same. Like so...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W5YYHu7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mhvhbyle5gpn9anhno5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W5YYHu7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mhvhbyle5gpn9anhno5e.png" alt="subsubset"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We have thus acquired four simple arrays/sets - &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;D&lt;/code&gt; - whose general formulae can now be easily deduced unlike earlier. The general formulae are as follows&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt;(k) = 4k - 3&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt;(k) = 4k - 2&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;C&lt;/code&gt;(k) = 4k - 1&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;D&lt;/code&gt;(k) = 4k&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, by noticing the mapping from the set of natural numbers to the &lt;code&gt;bounds&lt;/code&gt; once again, we observe that the general formulae of the sets to which each of &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;D&lt;/code&gt; are being mapped to are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;A'&lt;/code&gt;(k) = n - (k-1)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B'&lt;/code&gt;(k) = n - (k-1)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;C'&lt;/code&gt;(k) = k&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;D'&lt;/code&gt;(k) = k + 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;where &lt;code&gt;A'&lt;/code&gt;, &lt;code&gt;B'&lt;/code&gt;, &lt;code&gt;C'&lt;/code&gt;, and &lt;code&gt;D'&lt;/code&gt; are the respective ranges of the functions &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;D&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now is a good time to recall what we're working towards here. We want to be able to map each of the elements of the set of natural numbers to the &lt;code&gt;bounds&lt;/code&gt;. Alright, let's get back to doing that. We took &lt;code&gt;bounds&lt;/code&gt; apart, forming &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;D&lt;/code&gt;. This made our task of finding the general formulae easier. Now it's time to put them back together to obtain the original &lt;code&gt;bounds&lt;/code&gt; array. But that's not all, we also need to encode the natural numbers that are mapped to each element in &lt;code&gt;bounds&lt;/code&gt;. To do that, we'll simply replace each element of &lt;code&gt;bounds&lt;/code&gt; with a tuple whose first element will be the natural number mapped to the index of the element and second element will be the original element of &lt;code&gt;bounds&lt;/code&gt;. We'll not be doing that in the &lt;code&gt;bounds&lt;/code&gt; itself, though. We'll be doing it in the broken down arrays - &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;D&lt;/code&gt;. In fact, that is exactly why we broke down &lt;code&gt;bounds&lt;/code&gt;, to make the task just mentioned easier to accomplish. Here's how that's going to look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[(1,n)  (2,n)  (3,1)  (4,2)  (5,n-1)  (6,n-1)  (7,2)  (8,3)  (9,n-2)  (10,n-2)  (11,3)  (12,4)  (13,n-3)  (14,n-3)  ... ]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#label-well-call-this-one-raw-mappedbounds-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Label: We'll call this one &lt;code&gt;mapped_bounds&lt;/code&gt;.
&lt;/h6&gt;

&lt;p&gt;Here's how to do it in code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight julia"&gt;&lt;code&gt;&lt;span class="c"&gt;# broken down arrays with tuples&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# put the array containing 'n' together from its odd and even number subsets&lt;/span&gt;
&lt;span class="n"&gt;ens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dims&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# do the same for the array of the constants&lt;/span&gt;
&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dims&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;

&lt;span class="cm"&gt;#= Note: We're keeping 'ens' and 'nums' in variables because
later we'll also need them individually =#&lt;/span&gt;

&lt;span class="c"&gt;# finally, put bounds together by concatenating ens and nums&lt;/span&gt;
&lt;span class="n"&gt;bounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ens&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dims&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;)))&lt;/span&gt;

&lt;span class="cm"&gt;#= Note: We're sorting bounds by the first elements of the
tuples (by default) which puts the natural numbers in
progressive order =#&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that we have a dynamic piece of code (with respect to &lt;code&gt;n&lt;/code&gt;, that is) to generate the &lt;code&gt;bounds&lt;/code&gt; array, we're finally ready to dynamically generate the &lt;code&gt;linear_map&lt;/code&gt; and execute the few lines of code we saw toward the beginning of the article, finally acquiring our ever-desired spiral matrix.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#putting-it-all-together" class="anchor"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h3&gt;

&lt;p&gt;Alright, let's get the &lt;code&gt;linear_map&lt;/code&gt;. Here's what we gotta do - we gotta loop through &lt;code&gt;bounds&lt;/code&gt;, check whether the iterant (which is a tuple) belongs to the &lt;code&gt;ens&lt;/code&gt; or the &lt;code&gt;nums&lt;/code&gt;, check whether the first element of the iterant is even or odd, then do something with &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;j&lt;/code&gt; on the basis of the previous checks, and finally add (push) the tuple &lt;code&gt;(i,j)&lt;/code&gt; to the &lt;code&gt;linear_map&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's how the code looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight julia"&gt;&lt;code&gt;&lt;span class="c"&gt;#initialize linear_map variable&lt;/span&gt;
&lt;span class="n"&gt;linear_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[]&lt;/span&gt;

&lt;span class="cm"&gt;#= notice that the first elements of the tuples are A(k), B(k),
C(k), and D(k), while the second elements are A'(k), B'(k), C'(k),
and D'(k) =#&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;ens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dims&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dims&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;bounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ens&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dims&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;)))&lt;/span&gt;

&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
    &lt;span class="c"&gt;# why the slicing? check note 5 in footer&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ens&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;        
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c"&gt;# don't forget to push the final values of i and j after the loops&lt;/span&gt;
&lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that we have &lt;code&gt;linear_map&lt;/code&gt;, the rest is as easy as cake. Remember what we did earlier? That's exactly what we're going to do now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight julia"&gt;&lt;code&gt;&lt;span class="c"&gt;# create a n x n matrix of zeros&lt;/span&gt;
&lt;span class="n"&gt;spiral_mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zeroes&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;spiral_mat&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="x"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;],&lt;/span&gt; &lt;span class="n"&gt;linear_map&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="x"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spiral_mat&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And there you have it, a spiral matrix of &lt;code&gt;n x n&lt;/code&gt; dimensions and &lt;code&gt;n^2&lt;/code&gt; elements. Let's put this whole thing in the form of a function now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight julia"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nf"&gt; spiral&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt;&lt;span class="x"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="x"&gt;}(&lt;/span&gt;&lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;lin_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[]&lt;/span&gt; 
    &lt;span class="n"&gt;ens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="x"&gt;([(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;â&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;],&lt;/span&gt; &lt;span class="x"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;â&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dims&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="x"&gt;([(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;â&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;],&lt;/span&gt; &lt;span class="x"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;â&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dims&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;)))&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;â&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ens&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dims&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;)))[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;â&lt;/span&gt; &lt;span class="n"&gt;ens&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lin_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
                    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;end&lt;/span&gt;
            &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lin_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
                    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;end&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;â&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lin_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
                    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;end&lt;/span&gt;
            &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lin_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;
                    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;end&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;        
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;push!&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lin_map&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="x"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;spiral_mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int64&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;â&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lin_map&lt;/span&gt;&lt;span class="x"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;spiral_mat&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lin_map&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="x"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;],&lt;/span&gt; &lt;span class="n"&gt;lin_map&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="x"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="x"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;spiral_mat&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#end" class="anchor"&gt;
  &lt;/a&gt;
  End
&lt;/h1&gt;




&lt;h3 id="notes"&gt;Things you should know about Julia&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Julia&lt;/code&gt;, unlike most other languages you might be familiar with, is &lt;em&gt;not&lt;/em&gt; 0-indexed.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight julia"&gt;&lt;code&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="x"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="x"&gt;])&lt;/span&gt; &lt;span class="c"&gt;# ERROR: BoundsError: attempt to access 3-element Array{Int64,1} at index [0]&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="x"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="x"&gt;])&lt;/span&gt; &lt;span class="c"&gt;# a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Julia supports plenty of ASCII characters as part of its syntax. The only one used in this article is &lt;code&gt;â&lt;/code&gt;, which is the same as &lt;code&gt;in&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#notes_"&gt;back to article&lt;/a&gt;&lt;/p&gt;




&lt;h5&gt;
  &lt;a href="#closing-remarks" class="anchor"&gt;
  &lt;/a&gt;
  Closing Remarks
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#any-mistakes-pointed-out-corrections-recommended-and-suggestions-made-will-be-highly-appreciated-thank-you-for-taking-the-time-to-read-this-article-pray" class="anchor"&gt;
  &lt;/a&gt;
  Any mistakes pointed out, corrections recommended, and suggestions made, will be highly appreciated. Thank you for taking the time to read this article ð
&lt;/h6&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://exercism.io"&gt;Exercism&lt;/a&gt; is a brilliant resource if you're looking to learn new languages or just want to solidify your skills in an existing one. It has plenty of exercises ranged from &lt;code&gt;easy&lt;/code&gt; to &lt;code&gt;difficult&lt;/code&gt; for you to take on, solve, and improve your efficiency in the language that interests you the most. Although it doesn't teach you the highly advanced stuff, it's still a very good resource to widen your grasp on the basics.Â &lt;a href="#fnref1"&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;The counter-clockwise implementation of it can also be figured out using a similar approach to this one. The linear map of &lt;code&gt;n=2&lt;/code&gt;, for example, would then be &lt;code&gt;[(1,2),(1,1),(2,1),(2,2)]&lt;/code&gt;Â &lt;a href="#fnref2"&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;Note that we don't ever explicitly do the pairing. Instead, since Julia is 1-indexed instead of being 0-indexed, the very indexe of each of the elements in the &lt;code&gt;linear_map&lt;/code&gt; is the natural number that the element is paired with.Â &lt;a href="#fnref3"&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn4"&gt;
&lt;p&gt;There's no explicit center when &lt;code&gt;n&lt;/code&gt; is odd. To generalize, it can be referred to as the innermost element of the spiral.Â &lt;a href="#fnref4"&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn5"&gt;
&lt;p&gt;The number of iterations over the elements of &lt;code&gt;bounds&lt;/code&gt; needed to reach the center of the matrix is equal to &lt;code&gt;2n-1&lt;/code&gt;. That is, when &lt;code&gt;n=2&lt;/code&gt;, you'll reach the center after completing the &lt;code&gt;3rd&lt;/code&gt; step; when &lt;code&gt;n=3&lt;/code&gt;, the &lt;code&gt;5th&lt;/code&gt; step; when &lt;code&gt;n=7&lt;/code&gt;, the &lt;code&gt;13th&lt;/code&gt; step; and so on.Â &lt;a href="#fnref5"&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>julia</category>
      <category>julialang</category>
      <category>math</category>
      <category>matrices</category>
    </item>
    <item>
      <title>TLDR: Button to update status attribute of a table</title>
      <author>Yaroslav Shmarov</author>
      <pubDate>Mon, 15 Feb 2021 14:24:53 +0000</pubDate>
      <link>https://dev.to/yarotheslav/tldr-button-to-update-status-attribute-of-a-table-io1</link>
      <guid>https://dev.to/yarotheslav/tldr-button-to-update-status-attribute-of-a-table-io1</guid>
      <description>&lt;h3&gt;
  &lt;a href="#mission-add-buttons-to-change-the-raw-status-endraw-of-a-raw-task-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Mission: add buttons to change the &lt;code&gt;status&lt;/code&gt; of a &lt;code&gt;task&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XB0vG8-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.corsego.com/assets/images/change-status.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XB0vG8-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.corsego.com/assets/images/change-status.gif" alt="change-status.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#howto" class="anchor"&gt;
  &lt;/a&gt;
  HOWTO:
&lt;/h3&gt;

&lt;p&gt;migration - add &lt;code&gt;status&lt;/code&gt; column to &lt;code&gt;tasks&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add_column :tasks, :status, :string, null: false, default: "planned"

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;task.rb - list available statuses&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  validates :status, presence: true
  STATUSES = [:planned, :progress, :done]

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;tasks_controller.rb - add action to change status&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  def change_status
    @task = Task.find(params[:id])
    if params[:status].present? &amp;amp;&amp;amp; Task::STATUSES.include?(params[:status].to_sym)
      @task.update(status: params[:status])
    end
    redirect_to @task, notice: "Status updated to #{@task.status}"
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;routes.rb - add actionable link to change status.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  resources :tasks do
    member do
      patch :change_status
    end
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;tasks/show.html.erb&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;% Task::STATUSES.each do |status| %&amp;gt;
    &amp;lt;%= link_to change_status_task_path(@task, status: status), method: :patch do %&amp;gt;
      &amp;lt;%= status %&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;% end %&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Voila, that's it! &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>polymorphism</category>
    </item>
    <item>
      <title>Version control with Visual Studio Code</title>
      <author>Alex Georgiev</author>
      <pubDate>Mon, 15 Feb 2021 13:55:49 +0000</pubDate>
      <link>https://dev.to/alexgeorgiev17/version-control-with-visual-studio-code-9ii</link>
      <guid>https://dev.to/alexgeorgiev17/version-control-with-visual-studio-code-9ii</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As much as I love to use the terminal in order to do my daily tasks in the end I would rather do multiple tasks within one window (GUI) or perform everything from the terminal itself. &lt;/p&gt;

&lt;p&gt;In the past, I was using the text editors (vim, nano and etc) in my terminal to edit the code in my repositories and then go along with the git client to commit my changes, but then I switched to Visual Studio Code to manage and develop my code.&lt;/p&gt;

&lt;p&gt;I will recommend you to check this article on why you should use Visual Studio. It is an article from Visual Studio's website itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/docs/editor/whyvscode"&gt;Why you should use Visual Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visual Studio Code has integrated source control management (SCM) and includes Git support in-the-box. Many other source control providers are available through extensions on the VS Code Marketplace. It also has support for handling multiple Source Control providers simultaneously so you can open all of your projects at the same time and make changes whenever this is needed. I personally find this really handy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;You need to install Visual Studio Code. It runs on the macOS, Linux, and Windows operating systems.&lt;/p&gt;

&lt;p&gt;Follow the platform-specific guides below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/setup/mac"&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/setup/linux"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/setup/windows"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You need to install Git first before you get these features. Make sure you install at least version 2.0.0. If you do not have git installed on your machine feel free to check this really useful article on &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-contribute-to-open-source-getting-started-with-git"&gt;How to get started with Git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You need to set your username and email in the Git configuration or git will fail back to using information from your local machine when you commit. We need to provide this information because Git embeds this information into each commit we do.&lt;/p&gt;

&lt;p&gt;In order to set this you can execute the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "John Doe"
git config --global user.email "johnde@domain.com"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The information will be saved in your &lt;code&gt;~/.gitconfig&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[user]
    name = John Doe
    email = johndoe@domain.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With Git installed and set up on your local machine, you are now ready to use Git for version control with Visual Studio or using the terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloning-a-repository" class="anchor"&gt;
  &lt;/a&gt;
  Cloning a repository
&lt;/h2&gt;

&lt;p&gt;The good thing is that Visual Studio will auto-detect if you've opened a folder that is actually a repository. If you've already opened a repository it will be visible in the Source Control View.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ftl8ApLi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/february2021/article1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ftl8ApLi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/february2021/article1.png" alt="article1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you haven't opened a folder yet, the Source Control view will give you the options to Open Folder from your local machine or Clone Repository.&lt;/p&gt;

&lt;p&gt;If you select Clone Repository, you will be asked for the URL of the remote repository (for example on GitHub) and the parent directory under which to put the local repository.&lt;/p&gt;

&lt;p&gt;For a GitHub repository, you would find the URL from the GitHub Code dialog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-branch" class="anchor"&gt;
  &lt;/a&gt;
  Create a branch
&lt;/h2&gt;

&lt;p&gt;In order to create a branch open the command pallet:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows: Ctrl + Shift + P&lt;/li&gt;
&lt;li&gt;Linux: Ctrl + Shift _ P&lt;/li&gt;
&lt;li&gt;MacOS: Shift + CMD + P&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And select&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;Git Create Branch...&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ho0PVIYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/february2021/artcile3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ho0PVIYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/february2021/artcile3.png" alt="artcile3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;then you just need to enter a name for the branch. Keep in mind that in the bottom left corner you can see in which branch you are. The default one will be the main and if you successfully create the branch you should see the name of the newly created branch&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nc4OxelG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/february2021/article4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nc4OxelG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/february2021/article4.png" alt="article4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to switch branches you can open the command pallet and search for &lt;code&gt;Git checkout to&lt;/code&gt; and then select the main branch or switch to a different branch.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eY3FvEkA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/february2021/article5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eY3FvEkA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/february2021/article5.png" alt="article5.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup-a-commit-message-template" class="anchor"&gt;
  &lt;/a&gt;
  Setup a commit message template
&lt;/h2&gt;

&lt;p&gt;If you want to speed up the process and have a predefined template for your commit messages you can create a simple file that will contain this information.&lt;/p&gt;

&lt;p&gt;In order to do that open your terminal if you're on Linux or macOS and create the following file: .gitmessage in your home directory. In order to create the file, you can open it in your favourite text editor and then simply put the default content you would like and then just save and exit the file. Example content is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat ~/.gitmessage
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Title

#Summary of the commit

#Include Co-authored-by for all contributors.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To tell Git to use it as the default message that appears in your editor when you runÂ &lt;code&gt;git commit&lt;/code&gt; and set theÂ &lt;code&gt;commit.template&lt;/code&gt;Â configuration value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git config --global commit.template ~/.gitmessage
$ git commit
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you prefer to code in Visual Studio Code and you also use version control I will definitely recommend you to give it a go and interact with the repositories in VS code. I believe that everyone has their own style and they might do things differently depending from their mood as well. As long as you can add/modify your code and then commit your changes to the repository there is no exactly correct/wrong way to achieve this. For example you can edit your code in vim and push the changes using the git client in your terminal or do the coding in Visual Studio and then commit the changes using the terminal as well. You're free to do it the way you want it and the way you find it more convenient as well. I believe that using git witin VS code can make your workflow more efficient and robust.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-sources" class="anchor"&gt;
  &lt;/a&gt;
  Additional sources:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/docs/editor/versioncontrol"&gt;Version Control&lt;/a&gt;Â - Read more about integrated Git support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/docs/setup/setup-overview"&gt;Setup Overview&lt;/a&gt;Â - Set up and start using VS Code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.notion.so/Git-version-control-with-Visual-Studio-Code-8de38af5cf324b9d89c4827e32dfe173"&gt;GitHub with Visual Studio&lt;/a&gt; - Read more about the GitHub support in VS code&lt;/li&gt;
&lt;li&gt;You can also check this mini video tutorial on how to use the basics of Git version control in Visual Studio Code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AKNYgP0yEOY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Mastering NPM Scripts</title>
      <author>Paula SantamarÃ­a</author>
      <pubDate>Mon, 15 Feb 2021 13:15:23 +0000</pubDate>
      <link>https://dev.to/paulasantamaria/mastering-npm-scripts-2chd</link>
      <guid>https://dev.to/paulasantamaria/mastering-npm-scripts-2chd</guid>
      <description>&lt;p&gt;You may have come across the &lt;code&gt;scripts&lt;/code&gt; property in the &lt;code&gt;package.json&lt;/code&gt; file and even write some scripts yourself. But do you know all you can do with NPM Scripts? &lt;/p&gt;

&lt;p&gt;I've been using NPM Scripts for years, but I wanted to pass a parameter to a script a few weeks ago and realized &lt;em&gt;I didn't know how to do that&lt;/em&gt;. That's when I decided to learn everything I could about NPM scripts and write this article.&lt;/p&gt;

&lt;p&gt;In this article, I'll share my research about how to take full advantage of NPM scripts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#npm-run"&gt;npm run&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#built-in-scripts-and-aliases"&gt;Built-in scripts and Aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#executing-multiple-scripts"&gt;Executing multiple scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#understanding-errors"&gt;Understanding errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#run-scripts-silently-or-loudly"&gt;Run scripts silently or loudly&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#about-log-levels"&gt;About log levels&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#referencing-scripts-from-files"&gt;Referencing scripts from files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pre--post"&gt;Pre &amp;amp; Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#access-environment-variables"&gt;Access environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#passing-arguments"&gt;Passing arguments&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#arguments-as-environment-variables"&gt;Arguments as environment variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#naming-conventions"&gt;Naming conventions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#prefixes"&gt;Prefixes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;NPM Scripts are a &lt;strong&gt;set of built-in and custom scripts&lt;/strong&gt; defined in the &lt;code&gt;package.json&lt;/code&gt; file. Their goal is to provide a simple way to &lt;strong&gt;execute repetitive tasks&lt;/strong&gt;, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Running a linter tool on your code&lt;/li&gt;
&lt;li&gt;Executing the tests&lt;/li&gt;
&lt;li&gt;Starting your project locally&lt;/li&gt;
&lt;li&gt;Building your project&lt;/li&gt;
&lt;li&gt;Minify or Uglify JS or CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also use these scripts in your CI/CD pipeline to simplify tasks like build and generate test reports.&lt;/p&gt;

&lt;p&gt;To define an NPM script, all you need to do is set its name and write the script in the &lt;code&gt;script&lt;/code&gt; property in your &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"hello-world"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's important to notice that &lt;strong&gt;NPM makes all your dependencies' binaries available&lt;/strong&gt; in the scripts. So you can access them directly as if they were referenced in your PATH. Let's see it in an example:&lt;/p&gt;

&lt;p&gt;Instead of doing this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./node_modules/.bin/eslint ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint ."&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#npm-run" class="anchor"&gt;
  &lt;/a&gt;
  npm run
&lt;/h2&gt;

&lt;p&gt;Now all you need to do is run &lt;code&gt;npm run hello-world&lt;/code&gt; on the terminal from your project's root folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm run hello-world

&lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also run &lt;code&gt;npm run&lt;/code&gt;, without specifying a script, to get a &lt;strong&gt;list of all available scripts&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npm run

Scripts available in sample-project via `npm run-script`:
    hello-world
        echo "Hello World"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, &lt;code&gt;npm run&lt;/code&gt; prints both the name and the actual script for each script added to the &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;â¹ï¸ &lt;code&gt;npm run&lt;/code&gt; is an &lt;strong&gt;alias&lt;/strong&gt; for &lt;code&gt;npm run-script&lt;/code&gt;, meaning you could also use &lt;code&gt;npm run-script hello-world&lt;/code&gt;. In this article, we'll use &lt;code&gt;npm run &amp;lt;script&amp;gt;&lt;/code&gt; because it's shorter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#builtin-scripts-and-aliases" class="anchor"&gt;
  &lt;/a&gt;
  Built-in scripts and Aliases
&lt;/h1&gt;

&lt;p&gt;In the previous example, we created a &lt;em&gt;custom script&lt;/em&gt; called &lt;code&gt;hello-world&lt;/code&gt;, but you should know that npm also supports some &lt;em&gt;built-in scripts&lt;/em&gt; such as &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Interestingly, unlike our custom scripts, these scripts can be executed using &lt;em&gt;aliases&lt;/em&gt;, making the complete command &lt;strong&gt;shorter and easier to remember&lt;/strong&gt;. For example, all of the following commands will run the &lt;code&gt;test&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run-script &lt;span class="nb"&gt;test
&lt;/span&gt;npm run &lt;span class="nb"&gt;test
&lt;/span&gt;npm &lt;span class="nb"&gt;test
&lt;/span&gt;npm t
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similarly to the &lt;code&gt;test&lt;/code&gt; command, all of the following will run the &lt;code&gt;start&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run-script start
npm run start
npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For these built-in scripts to work, we need to define a script for them in the &lt;code&gt;package.json&lt;/code&gt;. Otherwise, they will fail. We can write the scripts just as any other script. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node app.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest ./test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"hello-world"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#executing-multiple-scripts" class="anchor"&gt;
  &lt;/a&gt;
  Executing multiple scripts
&lt;/h1&gt;

&lt;p&gt;We may want to &lt;strong&gt;combine&lt;/strong&gt; some of our scripts and run them together. To do that, we can use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To run multiple scripts &lt;strong&gt;sequentially&lt;/strong&gt;, we use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;. For example: &lt;code&gt;npm run lint &amp;amp;&amp;amp; npm test&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To run multiple scripts &lt;strong&gt;in parallel&lt;/strong&gt;, we use &lt;code&gt;&amp;amp;&lt;/code&gt;. Example: &lt;code&gt;npm run lint &amp;amp; npm test&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This only works in Unix environments. In Windows, it'll run sequentially.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, for example, we could create a script that combines two other scripts, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest ./test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ci"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run lint &amp;amp;&amp;amp; npm test"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#understanding-errors" class="anchor"&gt;
  &lt;/a&gt;
  Understanding errors
&lt;/h1&gt;

&lt;p&gt;When a script finishes with a &lt;strong&gt;non-zero exit code&lt;/strong&gt;, it means an &lt;strong&gt;error&lt;/strong&gt; occurred while running the script, and the execution is terminated.&lt;/p&gt;

&lt;p&gt;That means we can purposefully end the execution of a script with an error by exiting with a non-zero exit code, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;This script will fail&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When a script throws an error, we get a few other details, such as the error number &lt;code&gt;errno&lt;/code&gt; and the &lt;code&gt;code&lt;/code&gt;. Both can be useful for googling the error.&lt;/p&gt;

&lt;p&gt;And if we need more information, we can always access the complete log file. The path to this file is provided at the end of the error message. &lt;strong&gt;On failure, all logs are included in this file.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#run-scripts-silently-or-loudly" class="anchor"&gt;
  &lt;/a&gt;
  Run scripts silently or loudly
&lt;/h1&gt;

&lt;p&gt;Use &lt;code&gt;npm run &amp;lt;script&amp;gt; --silent&lt;/code&gt; to &lt;strong&gt;reduce logs&lt;/strong&gt; and to &lt;strong&gt;prevent the script from throwing an error&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--silent&lt;/code&gt; flag (short for &lt;code&gt;--loglevel silent&lt;/code&gt;) can be helpful when you want to run a script that you know may fail, but you don't want it to throw an error. Maybe in a CI pipeline, you want your whole pipeline to keep running even when the &lt;code&gt;test&lt;/code&gt; command fails. &lt;/p&gt;

&lt;p&gt;It can also be used as &lt;code&gt;-s&lt;/code&gt;: &lt;code&gt;npm run &amp;lt;script&amp;gt; -s&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;â¹ï¸ If we don't want to get an error when the script &lt;em&gt;doesn't exists&lt;/em&gt;, we can use &lt;code&gt;--if-present&lt;/code&gt; instead: &lt;code&gt;npm run &amp;lt;script&amp;gt; --if-present&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#about-log-levels" class="anchor"&gt;
  &lt;/a&gt;
  About log levels
&lt;/h2&gt;

&lt;p&gt;We saw how we can reduce logs using &lt;code&gt;--silent&lt;/code&gt;, but what about getting even &lt;strong&gt;more detailed logs&lt;/strong&gt;? Or something in between? &lt;/p&gt;

&lt;p&gt;There are different &lt;em&gt;log levels&lt;/em&gt;: "silent", "error", "warn", "notice", "http", "timing", "info", "verbose", "silly". The default is "notice". The log level determines &lt;strong&gt;which logs will be displayed&lt;/strong&gt; in the output. Any logs of a higher level than the currently defined will be shown. &lt;/p&gt;

&lt;p&gt;We can explicitly define which loglevel we want to use when running a command, using &lt;code&gt;--loglevel &amp;lt;level&amp;gt;&lt;/code&gt;. As we saw before, the &lt;code&gt;--silent&lt;/code&gt; flag is the same as using &lt;code&gt;--loglevel silent&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now, if we want to get more detailed logs, we'll need to use a higher level than the default ("notice"). For example: &lt;code&gt;--loglevel info&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;There are also short versions we can use to simplify the command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;--silent&lt;/code&gt;, &lt;code&gt;--loglevel silent&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-q&lt;/code&gt;, &lt;code&gt;--quiet&lt;/code&gt;, &lt;code&gt;--loglevel warn&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-d&lt;/code&gt;, &lt;code&gt;--loglevel info&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-dd&lt;/code&gt;, &lt;code&gt;--verbose&lt;/code&gt;, &lt;code&gt;--loglevel verbose&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-ddd&lt;/code&gt;, &lt;code&gt;--loglevel silly&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So to get the highest level of detail we could use &lt;code&gt;npm run &amp;lt;script&amp;gt; -ddd&lt;/code&gt; or &lt;code&gt;npm run &amp;lt;script&amp;gt; --loglevel silly&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#referencing-scripts-from-files" class="anchor"&gt;
  &lt;/a&gt;
  Referencing scripts from files
&lt;/h1&gt;

&lt;p&gt;You can execute scripts from files. This can be useful for especially &lt;em&gt;complex scripts&lt;/em&gt; that would be hard to read in the &lt;code&gt;package.json&lt;/code&gt; file. However, it doesn't add much value if your script is short and straightforward.&lt;/p&gt;

&lt;p&gt;Consider this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"hello:js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node scripts/helloworld.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"hello:bash"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bash scripts/helloworld.sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"hello:cmd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cd scripts &amp;amp;&amp;amp; helloworld.cmd"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We use &lt;code&gt;node &amp;lt;script-path.js&amp;gt;&lt;/code&gt; to execute JS files and &lt;code&gt;bash &amp;lt;script-path.sh&amp;gt;&lt;/code&gt; to execute bash files.&lt;/p&gt;

&lt;p&gt;Notice that you can't just call &lt;code&gt;scripts/helloworld.cmd&lt;/code&gt; for CMD and BAT files. You'll need to navigate to the folder using &lt;code&gt;cd&lt;/code&gt; first. Otherwise, you'll get an error from NPM.&lt;/p&gt;

&lt;p&gt;Another advantage of executing scripts from files is that, if the script is complex, it'll be easier to maintain in a separate file than in a single line inside the &lt;code&gt;package.json&lt;/code&gt; file. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pre-amp-post" class="anchor"&gt;
  &lt;/a&gt;
  Pre &amp;amp; Post
&lt;/h1&gt;

&lt;p&gt;We can create "pre" and "post" scripts for &lt;em&gt;any of our scripts&lt;/em&gt;, and NPM will automatically &lt;strong&gt;run them in order&lt;/strong&gt;. The only requirement is that the script's name, following the "pre" or "post" prefix, matches the main script. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"prehello"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;--Preparing greeting&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"posthello"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;--Greeting delivered&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we execute &lt;code&gt;npm run hello&lt;/code&gt;, NPM will execute the scripts in this order: &lt;code&gt;prehello&lt;/code&gt;, &lt;code&gt;hello&lt;/code&gt;, &lt;code&gt;posthello&lt;/code&gt;. Which will result in the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; script-test@1.0.0 prehello
&amp;gt; echo "--Preparing greeting"

"--Preparing greeting"

&amp;gt; script-test@1.0.0 hello
&amp;gt; echo "Hello World"

"Hello World"

&amp;gt; script-test@1.0.0 posthello
&amp;gt; echo "--Greeting delivered"

"--Greeting delivered"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;â¹ï¸ If we run &lt;code&gt;prehello&lt;/code&gt; or &lt;code&gt;posthello&lt;/code&gt; individually, NPM &lt;strong&gt;&lt;em&gt;will not&lt;/em&gt;&lt;/strong&gt; automatically execute any other scripts. It only works if you run the "main" script, in this case, &lt;code&gt;hello&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#access-environment-variables" class="anchor"&gt;
  &lt;/a&gt;
  Access environment variables
&lt;/h1&gt;

&lt;p&gt;While executing an NPM Script, NPM makes available a set of &lt;em&gt;environment variables&lt;/em&gt; we can use. These environment variables are generated by taking data from NPM Configuration, the package.json, and other sources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuration&lt;/strong&gt; parameters are put in the environment using the &lt;code&gt;npm_config_&lt;/code&gt; prefix. Here are a few examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"config:loglevel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Loglevel: $npm_config_loglevel&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"config:editor"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Editor: $npm_config_editor&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"config:useragent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;User Agent: $npm_config_user_agent&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's see what we get after executing the above commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm run config:loglevel
&lt;span class="c"&gt;# Output: "Loglevel: notice"&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm run config:editor
&lt;span class="c"&gt;# Output: "Editor: notepad.exe"&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm run config:useragent
&lt;span class="c"&gt;# Output: "User Agent: npm/6.13.4 node/v12.14.1 win32 x64"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;â¹ï¸ You can also run &lt;code&gt;npm config ls -l&lt;/code&gt; to get a &lt;strong&gt;list of all the configuration parameters&lt;/strong&gt; available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similarly, &lt;strong&gt;&lt;code&gt;package.json&lt;/code&gt; fields&lt;/strong&gt;, such as &lt;code&gt;version&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt;, are included with the &lt;code&gt;npm_package_&lt;/code&gt; prefix. Let's see a few examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"package:main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Main: $npm_package_main&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"package:name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Name: $npm_package_name&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"package:version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Version: $npm_package_version&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The results from these commands will be something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm run package:main
&lt;span class="c"&gt;# Output: "Main: app.js"&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm run package:name
&lt;span class="c"&gt;# Output: "Name: npm-scripts-demo"&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm run package:version
&lt;span class="c"&gt;# Output: "Version: 1.0.0"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, you can add &lt;strong&gt;your own environment variables&lt;/strong&gt; using the &lt;em&gt;&lt;code&gt;config&lt;/code&gt; field&lt;/em&gt; in your &lt;code&gt;package.json&lt;/code&gt; file. The values setup there will be added as environment variables using the &lt;code&gt;npm_package_config&lt;/code&gt; prefix.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"config"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"my-var"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Some value"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"script"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"packageconfig:port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Port: $npm_package_config_port&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"packageconfig:myvar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;My var: $npm_package_config_my_var&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we execute both commands we'll get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm run packageconfig:port
&lt;span class="c"&gt;# Output: "Port: 1234"&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm run packageconfig:myvar
&lt;span class="c"&gt;# Output: "My var: Some value"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;â¹ï¸ In Windows' &lt;code&gt;cmd&lt;/code&gt; instead of &lt;code&gt;$npm_package_config_port&lt;/code&gt; you should use &lt;code&gt;%npm_package_config_port%&lt;/code&gt; to access the environment variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#passing-arguments" class="anchor"&gt;
  &lt;/a&gt;
  Passing arguments
&lt;/h1&gt;

&lt;p&gt;In some cases, you may want to pass some &lt;strong&gt;arguments&lt;/strong&gt; to your script. You can achieve that using &lt;code&gt;--&lt;/code&gt; that the end of the command, like so: &lt;code&gt;npm run &amp;lt;script&amp;gt; -- --argument="value"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's see a few examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest ./test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If I wanted to run only the tests that changed, I could do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm run &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--onlyChanged&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And if I wanted to run the linter and save the output in a file, I could execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm run lint &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--output-file&lt;/span&gt; lint-result.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arguments-as-environment-variables" class="anchor"&gt;
  &lt;/a&gt;
  Arguments as environment variables
&lt;/h2&gt;

&lt;p&gt;Another way of &lt;strong&gt;passing arguments&lt;/strong&gt; is &lt;strong&gt;through environment variables&lt;/strong&gt;. Any key-value pairs we add to our script will be translated into an environment variable with the &lt;code&gt;npm_config&lt;/code&gt; prefix. Meaning we can create a script like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Hello $npm_config_firstname!&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And then use it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm run hello &lt;span class="nt"&gt;--firstname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Paula
&lt;span class="c"&gt;# Output: "Hello Paula"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#naming-conventions" class="anchor"&gt;
  &lt;/a&gt;
  Naming conventions
&lt;/h1&gt;

&lt;p&gt;There are no specific guidelines about how to name your scripts, but there are a few things we can keep in mind to make our scripts easier to pick up by other developers.&lt;/p&gt;

&lt;p&gt;Here's my take on the subject, based on my research:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep it &lt;strong&gt;short&lt;/strong&gt;: If you take a look at Svelte's NPM Scripts, you'll notice that most script names are &lt;em&gt;one word only&lt;/em&gt;. If we can manage to keep our script names short, it'll be easier to remember them when we need them.&lt;/li&gt;
&lt;li&gt;Be &lt;strong&gt;consistent&lt;/strong&gt;: You may need to use more than one word to name your script. In that case, choose a &lt;em&gt;naming style and stick to it&lt;/em&gt;. It can be camelCase, kebab-case, or anything you prefer. But avoid mixing them. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prefixes" class="anchor"&gt;
  &lt;/a&gt;
  Prefixes
&lt;/h2&gt;

&lt;p&gt;One convention that you may have seen is using a &lt;strong&gt;prefix and a colon to group scripts&lt;/strong&gt;, for example, "build:prod". This is simply a naming convention. It doesn't affect your scripts' behavior but can be helpful to create groups of scripts that are &lt;em&gt;easier to identify by their prefixes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lint:check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lint:fix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint . --fix"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"build:dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"build:prod"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"..."&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#documentation" class="anchor"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h1&gt;

&lt;p&gt;Consider adding documentation for your scripts so other people can easily understand &lt;em&gt;how and when to use them&lt;/em&gt;. I like to add a few lines explaining each script on my Readme file.  &lt;/p&gt;

&lt;p&gt;The documentation for each available script should include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Script name&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Accepted arguments (optional)&lt;/li&gt;
&lt;li&gt;Links to other documentation (optional): For example, if your script runs &lt;code&gt;tsc --build&lt;/code&gt;, you may want to include a link to Typescript docs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This is all I managed to dig up about NPM Scripts. I hope you find it useful! I certainly learned a lot just by doing this research. It took me way more time than I thought it would, but it was totally worth it.&lt;/p&gt;

&lt;p&gt;Let me know if there's anything missing that you'll like to add to make this guide even more complete! ð¬&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>npm</category>
    </item>
    <item>
      <title>8 Node.js Projects To Keep An Eye On 2021</title>
      <author>Arghya Ghosh</author>
      <pubDate>Mon, 15 Feb 2021 12:57:35 +0000</pubDate>
      <link>https://dev.to/uiuxarghya/8-node-js-projects-to-keep-an-eye-on-2021-229</link>
      <guid>https://dev.to/uiuxarghya/8-node-js-projects-to-keep-an-eye-on-2021-229</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-cytoscapejs" class="anchor"&gt;
  &lt;/a&gt;
  1. Cytoscape.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_Cohstx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mjlvgzn23wkchkd3u9b6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_Cohstx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mjlvgzn23wkchkd3u9b6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An open-source JavaScript library used for visualization and graph analysis which comes with rich and interactive implementation. It includes all out-of-the-box gestures which include box selection, panning,pinch-to-zoom, and so on.&lt;/p&gt;

&lt;p&gt;Cytoscape could be used on Node.js to perform graph analysis on a web server or in the terminal. Developers moving toward data science in their interest can choose Cytoscape as a good choice, also it has a wonderful contribution guide with documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-pdfkit" class="anchor"&gt;
  &lt;/a&gt;
  2. PDFKit
&lt;/h2&gt;

&lt;p&gt;Very useful PDF generation library for nodes which helps in building and downloading complex PDFs, also it supports text and font embedding, annotations, vector graphics. However, the project has no extensive documentation which makes it harder to contribute to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-socketio" class="anchor"&gt;
  &lt;/a&gt;
  3. Socket.IO
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jX4PM3Im--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eq8g29aqovow4v7mxufp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jX4PM3Im--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eq8g29aqovow4v7mxufp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bi-directional, real-time event-based communication and works on every browser device with equal focus on speed. A basic chat app is an example of two-way communication that the tool provides.&lt;/p&gt;

&lt;p&gt;A new message is received by the server then it sends it to the client and notifies them bypassing the need to send a request between the client and the server.&lt;/p&gt;

&lt;p&gt;Comes With Useful Features:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#binary-streaming" class="anchor"&gt;
  &lt;/a&gt;
  Binary Streaming
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#analytics-in-realtime" class="anchor"&gt;
  &lt;/a&gt;
  Analytics in real-time
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#document-collaboiration" class="anchor"&gt;
  &lt;/a&gt;
  Document Collaboiration
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#4-strapi" class="anchor"&gt;
  &lt;/a&gt;
  4. Strapi
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b0M0BvMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qg410oizgnb6ew4ehiig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b0M0BvMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qg410oizgnb6ew4ehiig.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An opensource content management system which a backend only system that provides functions to use with RESTful APIs, the main aim to get and deliver content across all devices structurally.&lt;/p&gt;

&lt;p&gt;Comes with plenty of features, includes an inbuilt email system, file upload, and JSON Web Token authentication. The content structure is created via Strapi which is very flexible and lets you create content groups and customizable APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-nest" class="anchor"&gt;
  &lt;/a&gt;
  5. Nest
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_H2Cc1Sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/723f7njgq820vlumszwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_H2Cc1Sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/723f7njgq820vlumszwj.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Nest is a popular progressive framework for creating efficient and scalable server-side apps. Uses TypeScript for combing functional and object-oriented programming elements &amp;amp; uses Express under the hood. This tool provides true flexibility by letting you use and libraries, thanks to its modular architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-datefns" class="anchor"&gt;
  &lt;/a&gt;
  6. Date-fns
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8EfIYTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hg8z3xsfbz8k78bab6cu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8EfIYTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hg8z3xsfbz8k78bab6cu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Still, the most consistent and simple set of tools to manipulate JavaScript dates in Node.js and a browser and works well with modern module bundlers like, Browserify,webpack, and Rollup. With amazing community support, the tool has dozen of locales where each function has a detailed description along with examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-sheetjs" class="anchor"&gt;
  &lt;/a&gt;
  7. SheetJS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qdhcJmF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g3925cppa0367xc9pzpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdhcJmF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g3925cppa0367xc9pzpj.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;A Node.js library that allows you to manipulate spreadsheets in Excel and a lot of other things with Excel, for example, exporting workbooks from scratch and converting HTML tables, JSON arrays into xlsx files that are downloadable. Comes with a big community and a well-documented contribution guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-expressjs" class="anchor"&gt;
  &lt;/a&gt;
  8. Express.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VQqYfqGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8so097bhf218lco3pgxk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQqYfqGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8so097bhf218lco3pgxk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the most popular Node.js open-source project that offers immense value because of its efficient HTTP request and even working with JavaScript, a server-side language and out of browser.&lt;/p&gt;

&lt;p&gt;A very helpful tool to accomplishing speed and security in applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#essential-features" class="anchor"&gt;
  &lt;/a&gt;
  Essential Features:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Different extensions and plugin support&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;URL-based routing mechanism uses HTTP methods&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Seamless database integration&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading" class="anchor"&gt;
  &lt;/a&gt;
  Thanks for Reading,
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Advanced Usage of Styled Components for your React App</title>
      <author>Olena Drugalya</author>
      <pubDate>Mon, 15 Feb 2021 12:12:29 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/advanced-usage-of-styled-components-for-your-react-app-2hfh</link>
      <guid>https://dev.to/olenadrugalya/advanced-usage-of-styled-components-for-your-react-app-2hfh</guid>
      <description>&lt;p&gt;In my previous post about &lt;a href="https://dev.to/olenadrugalya/intro-to-styled-components-for-your-react-app-2p6l"&gt;styled components&lt;/a&gt; I wrote about the general features of &lt;strong&gt;Styled Components&lt;/strong&gt;, how to set up and use them and why to use them in your React application.&lt;/p&gt;

&lt;p&gt;This post will cover and show some advanced usage of Styled Components, so you will have more wide understanding of their flexibility and probably could learn and use some techniques.  &lt;/p&gt;

&lt;p&gt;As we know already, &lt;strong&gt;styled-components&lt;/strong&gt; is a library, which helps you to create components already with a style. It removes the mapping between components and styles. This means that when you're defining your styles, you're actually creating a normal React component, that has your styles attached to it.&lt;/p&gt;

&lt;p&gt;So, let's get to practice and learn new features on the way. We are going to create a hamburger menu, which we can use for responsive application for mobile.&lt;/p&gt;

&lt;p&gt;Our menu will be a separate styled component, which in its turn will be created from smaller styled components. Menu will consist of a &lt;em&gt;MenuButton&lt;/em&gt; and &lt;em&gt;MenuNavigation&lt;/em&gt; components.&lt;br&gt;
We create a file called "Menu.js" and add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MenuButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MenuButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MenuNavigation&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavList&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavList&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MenuNavigation&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next step is styling. We create a file called "Menu.styles.js" and add there the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MenuButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  cursor: pointer;
  width: 3rem;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  width: 80%;
  height: 3px;
  background-color: white;
  margin: 0.2rem;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MenuNavigation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  position: fixed;
  width: 200px;
  max-width: 70%;
  height: 100%;
  left: 0;
  margin-top: 1.4rem;
  z-index: 200;
  background-color: white;
  padding: 1rem 2rem;
  transition: all 0.7s ease;
  box-shadow: 0px 8px 30px rgba(0, 0, 0, 0.2);
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NavList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="s2"&gt;`
  margin: 0;
  padding: 0;
  list-style: none;
  display: flex;
  flex-direction: column;
  align-items: center;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NavItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="s2"&gt;`
  margin: 5px 0;
  box-sizing: border-box;
  width: 100%;
  display: block;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NavLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #8f5c2c;
  text-decoration: none;
  width: 100%;
  box-sizing: border-box;
  display: block;
  padding: 0.5rem;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Afterwards we need to import all created styled components to out Menu.js file so we can use them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;MenuButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;MenuNavigation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;NavList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;NavItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;NavLink&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Menu.styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, these are some general styles we have added to every component in out application. &lt;br&gt;
For now our navigation links look exactly the same, but what if we want About link to be different?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#changing-style-based-on-props" class="anchor"&gt;
  &lt;/a&gt;
  Changing style based on Props
&lt;/h2&gt;

&lt;p&gt;Since our styled NavLink is a component, it accepts &lt;code&gt;props&lt;/code&gt; under the hood.  We can pass a function ("interpolations") to a styled component's template literal to adapt it based on received props.&lt;br&gt;&lt;br&gt;
We pass attribute to NavLink component (lets call it &lt;code&gt;green&lt;/code&gt;) and we can now use it in NavLink through &lt;code&gt;props&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;// Menu.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt; &lt;span class="na"&gt;green&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;// Menu.styles.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NavLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #8f5c2c;
  text-decoration: none;
  width: 100%;
  box-sizing: border-box;
  display: block;
  padding: 0.5rem;

&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="s2"&gt;`
    background: green;
    color: white;
  `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now it is styled differently. And this is amazing! :) But this is not all what we can do with &lt;code&gt;props&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changing-style-of-specific-property-based-on-props" class="anchor"&gt;
  &lt;/a&gt;
  Changing Style of Specific Property based on Props
&lt;/h2&gt;

&lt;p&gt;What if we want to change a style of just one single property for a specific component? We can do that also with using &lt;code&gt;props&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For now both Menu button and navigation links are showing on our page, but this is not what we want exactly. We want to see navigation links ONLY when we click a button. How we can do that?&lt;/p&gt;

&lt;p&gt;We can change &lt;code&gt;display&lt;/code&gt; property of a MenuNavigation by passing needed behaviour (in our case, a string) through &lt;code&gt;display&lt;/code&gt; attribute:&lt;/p&gt;

&lt;p&gt;// Menu.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MenuNavigation&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;//Menu.styles.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MenuNavigation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  position: fixed;
  width: 200px;
  max-width: 70%;
  height: 100%;
  left: 0;
  margin-top: 1.4rem;
  z-index: 200;
  background-color: white;
  padding: 1rem 2rem;
  transition: all 0.7s ease;
  box-shadow: 0px 8px 30px rgba(0, 0, 0, 0.2);
  display:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we don't see navigation links anymore. But this is also not the behaviour we wanted. We want to change &lt;code&gt;display&lt;/code&gt; dynamically: when we click MenuButton, we want to see navigation links, when we click button again, we want them to collapse again.  Let's implement that!&lt;/p&gt;

&lt;p&gt;## Changing Style of Specific Property based on Props Dynamically&lt;/p&gt;

&lt;p&gt;To implement the above behaviour, we need to pass either &lt;em&gt;true&lt;/em&gt; or &lt;em&gt;false&lt;/em&gt; to the &lt;code&gt;display&lt;/code&gt; attribute and based on that the &lt;code&gt;display&lt;/code&gt; property will be changed either to &lt;code&gt;block&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;.&lt;br&gt;
To do that, first we need to create a &lt;code&gt;state&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;//Menu.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDisplay&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We initialise &lt;code&gt;display&lt;/code&gt; variable  as &lt;em&gt;false&lt;/em&gt;, so if we use it now to set up &lt;em&gt;display&lt;/em&gt;, we wont see anything but the button. When we click MenuButton, we change &lt;code&gt;display&lt;/code&gt; variable  to 'true' and we should see navigation links.&lt;/p&gt;

&lt;p&gt;Let's see the code: &lt;/p&gt;

&lt;p&gt;//Menu.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MenuButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MenuNavigation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NavList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NavItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NavLink&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Menu.styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDisplay&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// This method will change display to opposite every time we call it&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setDisplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MenuButton&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MenuButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MenuNavigation&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavList&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt; &lt;span class="na"&gt;green&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavList&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MenuNavigation&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;//Menu.styles.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MenuNavigation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  position: fixed;
  width: 200px;
  max-width: 70%;
  height: 100%;
  left: 0;
  margin-top: 1.4rem;
  z-index: 200;
  background-color: white;
  padding: 1rem 2rem;
  transition: all 0.7s ease;
  box-shadow: 0px 8px 30px rgba(0, 0, 0, 0.2);
  display:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So here we receive &lt;code&gt;display&lt;/code&gt; attribute through &lt;code&gt;props&lt;/code&gt; to our component and we need to change &lt;code&gt;display&lt;/code&gt; property somehow based on if we get &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. How we can do it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ternary-operator-with-styled-components" class="anchor"&gt;
  &lt;/a&gt;
  Ternary Operator with Styled Components
&lt;/h2&gt;

&lt;p&gt;We can use Ternary Operator to change the style of property conditionally. &lt;br&gt;
In our example, we will write the logic for &lt;code&gt;display&lt;/code&gt; property like this:&lt;/p&gt;

&lt;p&gt;//Menu.styles.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MenuNavigation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  position: fixed;
  width: 200px;
  max-width: 70%;
  height: 100%;
  left: 0;
  margin-top: 1.4rem;
  z-index: 200;
  background-color: white;
  padding: 1rem 2rem;
  transition: all 0.7s ease;
  box-shadow: 0px 8px 30px rgba(0, 0, 0, 0.2);
  display:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now it's all set up with button and navigation as we wanted. But we still have adjustments we would like to make. For example, set some media-queries, so we can only see hamburger menu on a small screen. Or we would like to add some styles for &lt;code&gt;hover&lt;/code&gt; and &lt;code&gt;active&lt;/code&gt; pseudo-classes for links or button right? or may be we want to add a &lt;code&gt;className&lt;/code&gt; attribute to our component and use it instead? We can do all of these.....but in my next blog post!&lt;/p&gt;

&lt;p&gt;So stay tuned and may be you would like Styled Components as much as i do :)&lt;/p&gt;

&lt;p&gt;P.S. You can find the link to the project &lt;a href="https://codesandbox.io/s/advancedstyledcomponents-l5s0y"&gt;HERE&lt;/a&gt; if you need it.&lt;/p&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/olenadrugalya/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/OlenaDrugalya"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/J3J42JOOA"&gt;&lt;img height="12" width="30%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7c42cU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Understanding ARIA Landmarks - General Principles and Roles</title>
      <author>Gary Byrne</author>
      <pubDate>Mon, 15 Feb 2021 11:48:16 +0000</pubDate>
      <link>https://dev.to/garybyrne/understanding-aria-landmarks-general-principles-and-roles-10be</link>
      <guid>https://dev.to/garybyrne/understanding-aria-landmarks-general-principles-and-roles-10be</guid>
      <description>&lt;p&gt;ARIA landmarks are a set of ARIA roles that are provided to our HTML elements in order for us to identify the structure of a web page. When we visit a webpage, we get a sense of its visual structure from the beginning but this structure should also be present in our markup.&lt;/p&gt;

&lt;p&gt;We should use ARIA landmarks for a number of reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We are getting semantic markup that represents our visual structure. Perceivable content should have a semantically meaningful landmark.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keyboard navigation is supported for screen reader users. Screen reader users can navigate the web page based on its page structure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can create skip links that can enhance keyboard navigation for both screen reader users and sighted users. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#aria-general-principles" class="anchor"&gt;
  &lt;/a&gt;
  ARIA General Principles
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://www.w3.org"&gt;World Wide Web Consortium (W3C)&lt;/a&gt; has provided us with some &lt;a href="https://www.w3.org/TR/wai-aria-practices/examples/landmarks/index.html"&gt;general principles&lt;/a&gt; for using ARIA landmarks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-identify-the-logical-structure-of-a-web-page" class="anchor"&gt;
  &lt;/a&gt;
  1: Identify the logical structure of a web page
&lt;/h3&gt;

&lt;p&gt;What this means is that we should really think about the structure of our web page. We should break our page into perceivable areas. We can also break our page into further sub-areas if needed. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-assign-landmark-roles-to-each-area" class="anchor"&gt;
  &lt;/a&gt;
  2: Assign landmark roles to each area
&lt;/h3&gt;

&lt;p&gt;We should assign landmark roles to each area of our web page. Roles such as &lt;strong&gt;banner&lt;/strong&gt;, &lt;strong&gt;main&lt;/strong&gt;, &lt;strong&gt;complementary&lt;/strong&gt; and &lt;strong&gt;contentinfo&lt;/strong&gt; should be top/root level landmarks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-label-each-area" class="anchor"&gt;
  &lt;/a&gt;
  3: Label each area
&lt;/h3&gt;

&lt;p&gt;This principle is very important especially for users who are using assistive technologies. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If a webpage has multiple landmarks in its markup, then the label for each landmark should be unique.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of this is when we have multiple &lt;code&gt;navigation&lt;/code&gt; landmarks. We could have primary and secondary navigations on our webpage. So we should give each a unique label. The first navigation should have an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute"&gt;aria-label&lt;/a&gt; of &lt;code&gt;primary&lt;/code&gt; and the second navigation should have an aria-label of &lt;code&gt;secondary&lt;/code&gt; or whatever made sense in that context. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If a landmark area begins with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements"&gt;heading&lt;/a&gt; level element then we can provide a label to our area using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-labelledby_attribute"&gt;aria-labelledby&lt;/a&gt; attribute.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Screen readers announce the type of landmark we are currently visiting. Therefore we can omit the landmark from any labels provided to the element. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of this can be seen above when we use &lt;code&gt;Primary&lt;/code&gt; instead of &lt;code&gt;Primary Navigation&lt;/code&gt; in the label. If we kept &lt;code&gt;Primary Navigation&lt;/code&gt; then the screen reader would announce &lt;code&gt;Primary Navigation Navigation&lt;/code&gt; which may be confusing for the user. &lt;/p&gt;

&lt;p&gt;Here is some examples of these types of labels:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;nav role="navigation" aria-label="primary"&amp;gt;
   // code here
&amp;lt;/nav&amp;gt;
&amp;lt;nav role="navigation" aria-label="secondary"&amp;gt;
   // code here
&amp;lt;/nav&amp;gt;
&amp;lt;aside role="complementary" aria-labelledby="notice"&amp;gt;
 &amp;lt;h2 id="notice"&amp;gt;Site Notice&amp;lt;/h2&amp;gt;
&amp;lt;/side&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-list-of-aria-landmarks" class="anchor"&gt;
  &lt;/a&gt;
  A list of ARIA landmarks
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#toplevel-landmarks" class="anchor"&gt;
  &lt;/a&gt;
  Top-level landmarks
&lt;/h3&gt;

&lt;p&gt;Top-level landmarks stand for landmarks that are not contained within any other landmarks. For each of these landmarks, the W3C provides some &lt;a href="https://www.w3.org/TR/wai-aria-practices/examples/landmarks/banner.html"&gt;design patterns&lt;/a&gt; which are worth reading. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.w3.org/TR/wai-aria-practices/examples/landmarks/banner.html"&gt;banner&lt;/a&gt;  - this represents &lt;strong&gt;site-oriented&lt;/strong&gt; content such as a logo or site search. This role should appear at the start of each web page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.w3.org/TR/wai-aria-practices/examples/landmarks/contentinfo.html"&gt;contentinfo&lt;/a&gt; - this is to represent the &lt;strong&gt;footer&lt;/strong&gt; of a webpage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.w3.org/TR/wai-aria-practices/examples/landmarks/main.html"&gt;main&lt;/a&gt; - this is to represent the &lt;strong&gt;primary content&lt;/strong&gt; of a webpage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.w3.org/TR/wai-aria-practices/examples/landmarks/complementary.html"&gt;complementary&lt;/a&gt; - represents the &lt;strong&gt;supporting content&lt;/strong&gt; of a web page.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other-landmarks" class="anchor"&gt;
  &lt;/a&gt;
  Other landmarks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;navigation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;region&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;form&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;application&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;search&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read about all of these ARIA landmarks &lt;a href="https://www.w3.org/TR/wai-aria-practices/examples/landmarks/HTML5.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-sectioning-elements" class="anchor"&gt;
  &lt;/a&gt;
  HTML sectioning elements
&lt;/h2&gt;

&lt;p&gt;Before HTML5 was introduced, we would have had to apply these ARIA landmarks to elements like &lt;code&gt;divs&lt;/code&gt; in order for us to convey the structure of the webpage in our markup. &lt;/p&gt;

&lt;p&gt;For example, a header section might look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="banner" id="header"&amp;gt;
  // site-oriented content goes here
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;HTML5 introduced some new &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_HTML_sections_and_outlines"&gt;sectioning elements&lt;/a&gt; that provide ARIA landmarks by default.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Element&lt;/th&gt;
&lt;th&gt;Default Landmark Role&lt;/th&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;main&lt;/td&gt;
&lt;td&gt;&lt;code&gt;main&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;always&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nav&lt;/td&gt;
&lt;td&gt;&lt;code&gt;navigation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;always&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aside&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complementary&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;always&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;&lt;code&gt;banner&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;only when top level element  *&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;footer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;contentinfo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;only when top level element *&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;footer&lt;/code&gt; element no longer has the &lt;code&gt;contentinfo&lt;/code&gt; role and the &lt;code&gt;header&lt;/code&gt; element no longer has the &lt;code&gt;banner&lt;/code&gt; role when they are descendants of &lt;code&gt;section&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;aside&lt;/code&gt; or &lt;code&gt;article&lt;/code&gt; elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;section&lt;/code&gt; element has the role of &lt;code&gt;region&lt;/code&gt; and the &lt;code&gt;form&lt;/code&gt; element has the role of &lt;code&gt;form&lt;/code&gt; only when they have an accessible label by using the &lt;code&gt;aria-label&lt;/code&gt;, &lt;code&gt;aria-labelledby&lt;/code&gt; or &lt;code&gt;title&lt;/code&gt; attribute. Some of these labeling methods were mentioned above.&lt;/p&gt;

&lt;p&gt;Let's see this in action.&lt;/p&gt;

&lt;p&gt;If we visit the homepage for &lt;a href="https://css-tricks.com/"&gt;CSS-Tricks&lt;/a&gt; and open up our browser developer tools and navigate to its elements panel. Press Cmd + Option + C (Mac) or Ctrl + Shift + C (Windows, Linux, Chrome OS) to open it up. &lt;/p&gt;

&lt;p&gt;This is what you should see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zFnFK75Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613385873373/YP-MckYSO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zFnFK75Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613385873373/YP-MckYSO.png" alt="The CSS tricks home page opened up on chrome dev tools elements tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can see a few elements in the elements panel. If we inspect the page we can see some sectioning elements such as &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;section&lt;/code&gt;, and &lt;code&gt;footer&lt;/code&gt;. If we inspect the header, we can't see anything about its role without viewing its accessibility information.&lt;/p&gt;

&lt;p&gt;To do this, we need to visit the accessibility panel for that element. This will be on the bottom menu where we have our styles.&lt;/p&gt;

&lt;p&gt;The menu will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OFwKfDwy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613386144119/fkvdvFj9L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OFwKfDwy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613386144119/fkvdvFj9L.png" alt="The bottom menu panel in the chrome dev tools elements tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;code&gt;Accessibility&lt;/code&gt; tab. Do you notice anything about its role?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJO7GtvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613386246498/MhfQEGRiO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJO7GtvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613386246498/MhfQEGRiO.png" alt="The accessibility tab in chrome dev tools showing the header element with a default role of banner" title="Header element role of banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that by default it is given the role of &lt;code&gt;banner&lt;/code&gt;. This is because the &lt;code&gt;header&lt;/code&gt; element has a role of banner provided already by this element when it's in the context of the body element. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  Browser support
&lt;/h3&gt;

&lt;p&gt;At the time of writing, Internet Explorer (IE) 11, 10, and 9 support all sectioning elements except the &lt;code&gt;main&lt;/code&gt; element which only has &lt;a href="https://caniuse.com/html5semantic"&gt;partial&lt;/a&gt; support.&lt;/p&gt;

&lt;p&gt;For all elements, if you need to support IE version 8 or below then you will need to style each element as a &lt;code&gt;block&lt;/code&gt; level element and use some JavaScript to create the element if it is not supported. You can read about these steps &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_HTML_sections_and_outlines#using_html5_elements_in_non-html5_browsers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Landmarks are supported by most major screen readers. Scott O'Hara &lt;a href="https://www.scottohara.me/blog/2018/03/03/landmarks.html"&gt;wrote&lt;/a&gt; about the shortcuts and quirks when navigating landmarks via screen readers.&lt;/p&gt;

&lt;p&gt;Scott also &lt;a href="https://www.scottohara.me/blog/2018/03/03/landmarks.html"&gt;talked&lt;/a&gt; about issues with the footer element and its role of &lt;code&gt;contentinfo&lt;/code&gt; for Safari and Chrome with VoiceOver on macOS High Sierra/Mojave.&lt;/p&gt;

&lt;p&gt;Depending on your browser support requirements, it is suggested to manually test the browsers you support and use various screen readers in each test. &lt;/p&gt;

&lt;p&gt;It may also be a good idea to overcome bugs by adding redundant aria landmarks to those HTML5 sectioning elements. Scott also &lt;a href="https://www.scottohara.me/blog/2019/04/05/landmarks-exposed.html"&gt;talked&lt;/a&gt; about this in detail and you can see why some people would not perform this step as some of these landmarks do appear to be consistent.  I prefer to add redundant landmarks so we can expose those landmarks to as many people as possible and mitigate any of these edge cases. In the case of the footer issue above, this would mitigate that problem by supplying the &lt;code&gt;contentinfo&lt;/code&gt; role.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;If you enjoyed this blog and would like to see similar content in the future, or would like to get in touch then please follow me on &lt;a href="https://dev.to/garybyrne"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://twitter.com/garybyrne1995"&gt;Twitter&lt;/a&gt; and &lt;a href="//node.com/@garybyrne"&gt;Hashnode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also talked about ARIA landmarks on Youtube. You can view the video below.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/U1L8sV7FMZE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>html</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
