<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>SPA JWT stateless authorization</title>
      <author>Tomasz</author>
      <pubDate>Mon, 03 May 2021 21:23:38 +0000</pubDate>
      <link>https://dev.to/tomaszgaluszka/spa-jwt-stateless-authorization-34c7</link>
      <guid>https://dev.to/tomaszgaluszka/spa-jwt-stateless-authorization-34c7</guid>
      <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;I've been recently learning different ways to secure SPA's.&lt;/p&gt;

&lt;p&gt;The first one which took my attention was the Oauth 2.0 extension called PKCSE. I liked it, but it has some disadvantages: where to securely store the access_token and long lived refresh_token ...(local storage in memory etc. is not a case because of XSS)&lt;/p&gt;

&lt;p&gt;The second approach was to use a back-end for front-end server under the same domain (same nginx with routing all /api/* calls into my backend server). In this case the Oauth client will be my back-end server which can just implement the authorization flow.&lt;br&gt;
At the end of it it will redirect browser to the SPA home page with the following COOKIE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ACCESS_TOKEN=API_ACCESS_TOKEN&lt;/li&gt;
&lt;li&gt;secure: true&lt;/li&gt;
&lt;li&gt;httpOnly: true&lt;/li&gt;
&lt;li&gt;SameSite: secure&lt;/li&gt;
&lt;li&gt;expire: API_ACCESS_TOKEN_EXPIRE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The cookie from the above will be included into the all AJAX requests from SPA to my back-end api (via nginx - same domain). Also it will mitigate the risk of XSS and CSRF attacks.&lt;/p&gt;

&lt;p&gt;What do you think about this approach, do you have any better ideas of securing SPA ? Please share your thoughts.&lt;/p&gt;

&lt;p&gt;Links:&lt;br&gt;
&lt;a href="https://www.pingidentity.com/en/company/blog/posts/2021/refresh-token-rotation-spa.html"&gt;https://www.pingidentity.com/en/company/blog/posts/2021/refresh-token-rotation-spa.html&lt;/a&gt;&lt;br&gt;
&lt;a href="https://stackoverflow.com/questions/20963273/spa-best-practices-for-authentication-and-session-management"&gt;https://stackoverflow.com/questions/20963273/spa-best-practices-for-authentication-and-session-management&lt;/a&gt;&lt;br&gt;
&lt;a href="https://curity.io/resources/learn/spa-best-practices/"&gt;https://curity.io/resources/learn/spa-best-practices/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>jwt</category>
      <category>oauth</category>
      <category>authorization</category>
      <category>stateless</category>
    </item>
    <item>
      <title>React Best Practices</title>
      <author>awedis</author>
      <pubDate>Mon, 03 May 2021 20:09:20 +0000</pubDate>
      <link>https://dev.to/awedis/react-best-practices-4l4m</link>
      <guid>https://dev.to/awedis/react-best-practices-4l4m</guid>
      <description>&lt;p&gt;In this article, I want to share some details to take care of, which will make us better React developers&lt;/p&gt;




&lt;h5&gt;
  &lt;a href="#separate-logic-from-jsx"&gt;
  &lt;/a&gt;
  Separate logic from JSX
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;It's always good to spread the logic (or functional part) from the JSX, the code will be cleaner and more editable, check the example below how to handle an onClick event instead of putting it directly inside the element
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//do api call&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#split-into-small-components-amp-make-them-reusable"&gt;
  &lt;/a&gt;
  Split into small components &amp;amp; make them reusable
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;In this part let's try to split a UI component from a real project
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vnz_y1hW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjwrnj4w423y3t0tgjbm.png" alt="c5781d72c1298dc869b74702b4ee42a0"&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;NavBar: Top navbar container which contains the HamBtn&lt;/li&gt;
&lt;li&gt;HamBtn: The 3 horizontal lines button, that can be used in other parts &lt;/li&gt;
&lt;li&gt;TodoRow: Todo row, containing the text, and other action buttons&lt;/li&gt;
&lt;li&gt;RadioBtn: Toggle button&lt;/li&gt;
&lt;li&gt;DeleteBtn: Delete button for todo&lt;/li&gt;
&lt;li&gt;Button: Generic button component with several dynamic props&lt;/li&gt;
&lt;li&gt;Container: The whole container for the Todo list.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All these will be separate components, this will help us in the long run, if the project becomes bigger almost all the components can be reused üòé&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#state-management-redux-or-context"&gt;
  &lt;/a&gt;
  State Management (Redux or Context)
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the case of using Redux Library, I highly recommend using Sagas which will help you to make async API calls &lt;br&gt;
&lt;em&gt;Redux: Perfect for larger applications where there are high-frequency state updates&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And for Context Api, its much simple than the Redux, and you don't need to download any library&lt;br&gt;
&lt;em&gt;Context API: Resourceful and ideal for small applications where state changes are minimal&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#hooks-and-functional-components"&gt;
  &lt;/a&gt;
  Hooks and Functional Components
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;No more "this"&lt;/li&gt;
&lt;li&gt;Fewer lines of code&lt;/li&gt;
&lt;li&gt;It's easier to debug, test &amp;amp; refactor it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think the majority of developers are already using all their projects based on these two, but I just wanted to mention it üòÅ &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#styledcomponents"&gt;
  &lt;/a&gt;
  Styled-Components
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Styled-Components is one of the new ways to use CSS in modern JavaScript&lt;/li&gt;
&lt;li&gt;It is meant to be a successor of CSS Modules, a way to write CSS that's scoped to a single component, and not leak to any other element on the page
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./SubTitle.styled&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SubTitle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SubTitle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #AAA;
  font-size: 20px;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Unit Testing - (to check a single component of an application, for more critical functions)&lt;/li&gt;
&lt;li&gt;Integration Testing - (to check if different pieces of the modules are working together)&lt;/li&gt;
&lt;li&gt;End-to-End Testing - (involves testing an application's workflow from beginning to end, aims to replicate real user scenarios)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;TypeScript is a ‚Äútyped superset of JavaScript that compiles to plain JavaScript.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using Typescript in React will help you to develop more stable components, that are strongly typed and are faster to be integrated, lets check the simplest example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
      &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hPbkfg3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82nq5vtk5a6k51ues9b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hPbkfg3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82nq5vtk5a6k51ues9b5.png" alt="12345"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;React is an awesome library, you can split &amp;amp; organize your code in a way to become very flexible &amp;amp; scalable, wanted to keep it simple &amp;amp; high-level&lt;/p&gt;

&lt;p&gt;Wish it was helpful and that's it üòä&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>reactnative</category>
      <category>typescript</category>
    </item>
    <item>
      <title>How to Translate English to Mandalorian with Twilio Serverless and SMS</title>
      <author>Lizzie Siegle</author>
      <pubDate>Mon, 03 May 2021 20:09:14 +0000</pubDate>
      <link>https://dev.to/twilio/how-to-translate-english-to-mandalorian-with-twilio-serverless-and-sms-4mbc</link>
      <guid>https://dev.to/twilio/how-to-translate-english-to-mandalorian-with-twilio-serverless-and-sms-4mbc</guid>
      <description>&lt;p&gt;Celebrate Star Wars Day on May 4th by texting a sentence to +14807573107 to translate it into the Mandalorian language and read on to learn how to build the app using the &lt;a href="https://funtranslations.com/api/mandalorian"&gt;Mandalorian Translator API&lt;/a&gt;, &lt;a href="https://www.twilio.com/docs/runtime/functions"&gt;Twilio Functions&lt;/a&gt;, and the &lt;a href="https://www.twilio.com/docs/labs/serverless-toolkit"&gt;Twilio Serverless Toolkit&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X6tBKAPD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/1Y6xmX3R4bH3gbLIshNcHyjT4ccm6bwr9K9sXx4eh8nLr.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X6tBKAPD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/1Y6xmX3R4bH3gbLIshNcHyjT4ccm6bwr9K9sXx4eh8nLr.width-1000.png" alt="sms example"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;A Twilio account - &lt;a href="http://www.twilio.com/referral/iHsJ5D"&gt;sign up for a free one here and receive an extra $10 if you upgrade through this link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A Twilio phone number with SMS capabilities - &lt;a href="https://support.twilio.com/hc/en-us/articles/223135247-How-to-Search-for-and-Buy-a-Twilio-Phone-Number-from-Console"&gt;configure one here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; (you could alternatively make cURL requests from the command line)&lt;/li&gt;
&lt;li&gt;Node.js installed - &lt;a href="https://nodejs.org/en/download/"&gt;download it here&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#make-an-api-request-to-fun-translations"&gt;
  &lt;/a&gt;
  Make an API Request to Fun Translations
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jMhTJipX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/lOJ9DpnZR7HE-C4-hd1dsZz7VZXVke3MQ7trtIJIsPQ4Y_6gim7voifGQyJedsUZbh9kK3M5_dl2fz" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jMhTJipX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/lOJ9DpnZR7HE-C4-hd1dsZz7VZXVke3MQ7trtIJIsPQ4Y_6gim7voifGQyJedsUZbh9kK3M5_dl2fz" alt="kylo approves gif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://funtranslations.com/"&gt;Fun Translations&lt;/a&gt; offers multiple translator APIs--in addition to the Mandalorian, there's a Yoda translator, pirate speak translator, Dothraki speak translator, and more. To use the Mandalorian translator API, we need to hit this URL: &lt;code&gt;https://api.funtranslations.com/translate/mandalorian&lt;/code&gt; passing it some text to translate by appending &lt;code&gt;?text="&amp;lt;TEXT_TO_TRANSLATE_HERE&amp;gt;"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open Postman and paste that URL along with some text in the &lt;code&gt;&amp;lt;TEXT_TO_TRANSLATE_HERE&amp;gt;&lt;/code&gt; part such as "this is fun" into the URL bar.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Send&lt;/strong&gt; to hit it with a GET request to see the following data returned as seen below: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6xWqM1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/d4M0HW8jHEaZ2P8mUzjhw8TpXaPSyQItjEhu1DmoCBb4r.width-1600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6xWqM1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/d4M0HW8jHEaZ2P8mUzjhw8TpXaPSyQItjEhu1DmoCBb4r.width-1600.png" alt="postman"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"total"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"contents"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"translated"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Ibic is nuhur"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"this is fun"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"translation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mandalorian"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The free tier only lets you make five API requests an hour. You would need to request an API key in order to use the paid version. The URL would then turn into &lt;code&gt;https://api.funtranslations.com/translate/mandalorian.json?text=${&amp;lt;TEXT_TO_TRANSLATE_HERE&amp;gt;}&amp;amp;X-Funtranslations-Api-Secret=${YOUR_API_KEY}&lt;/code&gt;, returning data in the same matter as shown below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzH5Fux4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/babuih4e8wdqldwn25x1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzH5Fux4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/babuih4e8wdqldwn25x1.png" alt="postman with api key"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"total"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"contents"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"translated"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Nynir url ti api key"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"hit url with api key"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"translation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mandalorian"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can &lt;a href="https://funtranslations.com/api/mandalorian#subscribe"&gt;upgrade to a paid plan where you can make more HTTP requests here&lt;/a&gt;, but it's not necessary for this blog post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-started-with-the-twilio-serverless-toolkit"&gt;
  &lt;/a&gt;
  Get Started with the Twilio Serverless Toolkit
&lt;/h3&gt;

&lt;p&gt;The Serverless Toolkit is CLI tooling that helps you develop locally and deploy to &lt;a href="https://www.twilio.com/docs/runtime"&gt;Twilio Runtime&lt;/a&gt;. The best way to work with the Serverless Toolkit is through the &lt;a href="https://www.twilio.com/docs/twilio-cli/quickstart"&gt;Twilio CLI&lt;/a&gt;. If you don't have the Twilio CLI installed yet, run the following commands on the command line to install it and the Serverless Toolkit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;twilio-cli &lt;span class="nt"&gt;-g&lt;/span&gt;
twilio login
twilio plugins:install @twilio-labs/plugin-serverless
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create your new project and install our lone requirement &lt;code&gt;superagent&lt;/code&gt;, an HTTP client library to make HTTP requests in Node.js, by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;twilio serverless:init mandalorian-translation
&lt;span class="nb"&gt;cd &lt;/span&gt;mandalorian-translation
npm &lt;span class="nb"&gt;install &lt;/span&gt;superagent
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are on a paid subscription with Fun Translations, open the &lt;code&gt;.env&lt;/code&gt; file and add an environment variable for your API key. In this blog post below, the API key is called &lt;code&gt;FUNTRANSLATIONS_API_SECRET&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-a-twilio-function-with-javascript"&gt;
  &lt;/a&gt;
  Make a Twilio Function with JavaScript
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;\functions&lt;/code&gt; directory and make a new file called &lt;code&gt;translate.js&lt;/code&gt; containing the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;superagent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superagent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;apiurl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.funtranslations.com/translate/mandalorian.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;twiml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Twilio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;twiml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessagingResponse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;twiml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;msgToTranslate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;superagent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;apiurl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?text=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msgToTranslate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="c1"&gt;//.set('X-Funtranslations-Api-Secret',context.FUNTRANSLATIONS_API_SECRET) // use this line to reference your API key from a paid Fun Translations plan if you have one&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`"&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msgToTranslate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" in Mandalorian translates to "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;". May the 4th be with you!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.pixabay.com/photo/2015/09/04/18/55/yoda-922520_1280.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;twiml&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code imports &lt;code&gt;superagent&lt;/code&gt;, makes a &lt;a href="https://www.twilio.com/docs/sms/api/message-resource"&gt;Twilio Messaging Response object&lt;/a&gt;, retrieves the inbound text message and appends it to the URL we wish to make a HTTP request to. Then the code parses the response from the endpoint (as seen in Postman earlier), to return a text message containing the translated text and an image of Yoda!&lt;/p&gt;

&lt;p&gt;You can view the &lt;a href="https://github.com/elizabethsiegle/mandalorian-language-translator"&gt;complete app on GitHub here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-the-function-with-a-twilio-phone-number"&gt;
  &lt;/a&gt;
  Configure the Function with a Twilio Phone Number
&lt;/h3&gt;

&lt;p&gt;To open up our app to the web with a public-facing URL, go back to the &lt;em&gt;mandalorian-translation&lt;/em&gt; root directory and run &lt;code&gt;twilio serverless:deploy&lt;/code&gt;. You should see this at the bottom of your terminal:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYxo0Lmw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62b0pvvllxw775otme8y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYxo0Lmw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62b0pvvllxw775otme8y.png" alt="Function URLs"&gt;&lt;/a&gt;&lt;br&gt;
In the &lt;a href="https://www.twilio.com/console/phone-numbers/incoming"&gt;phone numbers section of your Twilio Console&lt;/a&gt;, select the Twilio number you purchased and scroll down to the &lt;em&gt;Messaging&lt;/em&gt; section. Under &lt;em&gt;A MESSAGE COMES IN&lt;/em&gt; change &lt;em&gt;Webhook&lt;/em&gt; to &lt;em&gt;Function&lt;/em&gt; and then under &lt;em&gt;Service&lt;/em&gt; select &lt;em&gt;Mandalorian-Translation&lt;/em&gt;, for &lt;em&gt;Environment&lt;/em&gt; select &lt;em&gt;dev-environment&lt;/em&gt;, and then for &lt;em&gt;Function Path&lt;/em&gt; select &lt;em&gt;/translate&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UBeJhWwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpfuic8rd1yvpnmjh3em.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UBeJhWwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpfuic8rd1yvpnmjh3em.png" alt="Messaging section of phone number"&gt;&lt;/a&gt;&lt;br&gt;
Click the &lt;strong&gt;Save&lt;/strong&gt; button below and tada! You can now text your Twilio number a phrase and receive the phrase translated from the Mandalorian language back in a response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next-for-twilio-serverless-apis-and-star-wars"&gt;
  &lt;/a&gt;
  What's Next for Twilio Serverless, APIs, and Star Wars?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QMiNeej8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/a0/90/cc/a090cc71d7d9ef95b22b18b9acc281f0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QMiNeej8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/a0/90/cc/a090cc71d7d9ef95b22b18b9acc281f0.gif" alt="lol gif"&gt;&lt;/a&gt;&lt;br&gt;
How are you celebrating May Fourth? Twilio's Serverless Toolkit makes it possible to deploy web apps quickly, and Twilio Runtime seamlessly handles servers for you.&lt;/p&gt;

&lt;p&gt;Let me know online what you're building with Serverless and what your favorite Star Wars quote is! Some of mine include "Never tell me the odds", "Do. Or do not. There is no try", and "Strike me down, and I will become more powerful than you could possibly imagine".&lt;br&gt;
-Twitter: &lt;a href="http://twitter.com/lizziepika"&gt;@lizziepika&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub: &lt;a href="http://github.com/elizabethsiegle"&gt;elizabethsiegle&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Email: &lt;a href="mailto:lsiegle@twilio.com"&gt;lsiegle@twilio.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Livestreams: &lt;a href="http://twitch.tv/lizziepikachu"&gt;twitch.tv/lizziepikachu&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>serverless</category>
      <category>javascript</category>
      <category>twilio</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How To Easily Use Animations From Cool Designers In Your Web App?</title>
      <author>Mohmed Ishak</author>
      <pubDate>Mon, 03 May 2021 20:06:21 +0000</pubDate>
      <link>https://dev.to/ishakmohmed/how-to-easily-use-animations-from-cool-designers-in-your-web-app-l6b</link>
      <guid>https://dev.to/ishakmohmed/how-to-easily-use-animations-from-cool-designers-in-your-web-app-l6b</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gZ_wOdTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06bu2bvrww2wdznfqgam.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZ_wOdTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06bu2bvrww2wdznfqgam.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The truth is, to have cool animations in your web app like loading animation, you don't need to be a good designer cause we've got designers who do that and you just need to get some help from them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ever-heard-of-lottie-files"&gt;
  &lt;/a&gt;
  Ever Heard Of Lottie Files?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MwwQVCqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjfdu97mxt1aacg924tg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MwwQVCqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjfdu97mxt1aacg924tg.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Lottie Files is an animation library from Airbnb where it is web developers' go-to site to look for awesome animations and then pretend like we did it from scratch to non-techies.&lt;/p&gt;

&lt;p&gt;Anyway, here's how to use it in your React project.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h5&gt;

&lt;p&gt;Add this package to your dependency&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;lottie&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h5&gt;

&lt;p&gt;Head over to &lt;a href="https://lottiefiles.com/search?q=loading&amp;amp;category=animations"&gt;https://lottiefiles.com/search?q=loading&amp;amp;category=animations&lt;/a&gt; and select any animation. Download the file in JSON format and keep it in your project file, preferably in a folder named assets.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h5&gt;

&lt;p&gt;Create an animation component- in this case a loader component (you can literally copy &amp;amp; paste the code snippet below and it'll work but be sure to import the right JSON file).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Lottie&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-lottie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;animationData&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../assets/6472-loading.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Loader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;autoplay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;animationData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;animationData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;rendererSettings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;preserveAspectRatio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xMidYMid slice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Lottie&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Loader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4:
&lt;/h5&gt;

&lt;p&gt;You probably know how to use this now. One common use case is to have a boolean variable like isVisible and show this component depending on the value like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Loader&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>A Comment on code comments</title>
      <author>Ahmad khatab</author>
      <pubDate>Mon, 03 May 2021 19:50:36 +0000</pubDate>
      <link>https://dev.to/rockwell/a-comment-on-code-comments-abb</link>
      <guid>https://dev.to/rockwell/a-comment-on-code-comments-abb</guid>
      <description>&lt;p&gt;Growing up in my junior years of development, i was convinced that code comments are evil and they are the bane of our existence, i got this impression through reading various articles, books, blog-posts on why you had to do every thing but doing code comments. &lt;/p&gt;

&lt;p&gt;But, after many trial and errors, i have came to the conclusion that code comments are sometimes necessary to the sustainability of a project. But, that doesn't negate the fact that you should always be careful with your code comments, sometimes comments can be expressed through the code itself.&lt;/p&gt;

&lt;p&gt;Some examples of where i would comments some piece of code, the language in focus will be Ruby, and ERB templates.&lt;/p&gt;

&lt;p&gt;I have started commenting various parts of my &lt;code&gt;.erb&lt;/code&gt; files. One area where comments stand out are with icons. You've seen icon, and you know how they look good and that extra touch to the UI and UX. Well, that same icon would something like this in code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-6 w-6"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M6 18L18 6M6 6l12 12"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you tell me what icon is this just by looking at the code? Probably not, and most of the times you find multiple &lt;code&gt;svg&lt;/code&gt;s on a file, what would you do to find out what &lt;code&gt;svg&lt;/code&gt; are you editing? You might need to boot up your server and pray what you have removed is the correct one. And, here comments excel. Let's take the same code and add a comment to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;#&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-6 w-6"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M6 18L18 6M6 6l12 12"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One line there, and some other developer, or even yourself after two months will be gratefull, because this saves you the pain of swithing to browser and seeing what is the &lt;code&gt;svg&lt;/code&gt; you are looking for. Let's illustrate one more example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;#&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-6 w-6"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M6 18L18 6M6 6l12 12"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;

#&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;tick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-6 w-6"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M5 13l4 4L19 7"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;

#&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-6 w-6"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Code comments are there to help us, they are a sharp knife and we must be careful on how we use this tool and not injure ourselves while using it.&lt;/p&gt;

&lt;p&gt;Lastly, Huge shoutout to &lt;a href="https://twitter.com/davetron5000"&gt;David&lt;/a&gt; on his book &lt;a href="https://sustainable-rails.com/"&gt;Sustainable rails&lt;/a&gt;, it's really a well written book containing practical solution for your daily Ruby and Rails code.&lt;/p&gt;

&lt;p&gt;In future blog posts i will be writing on why you should comment your Ruby and Rails code.&lt;/p&gt;

&lt;p&gt;Thank you for taking the time to read this, have a great day!.&lt;/p&gt;

&lt;p&gt;Related Links:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://heroicons.com/"&gt;Heroicons&lt;/a&gt;&lt;br&gt;
&lt;a href="https://sustainable-rails.com/"&gt;Sustainable Rails&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>computerscience</category>
      <category>rails</category>
    </item>
    <item>
      <title>Part 1: Basics of Hashing</title>
      <author>Mo Shoaib</author>
      <pubDate>Mon, 03 May 2021 19:50:15 +0000</pubDate>
      <link>https://dev.to/shoaib0023/part-1-basics-of-hashing-2fib</link>
      <guid>https://dev.to/shoaib0023/part-1-basics-of-hashing-2fib</guid>
      <description>&lt;p&gt;Hashing is the process of converting a given key into another value. A hash function is used to generate the new value according to the mathematical function. The result of the hash function is known as the hash value. Let's understand this with the help of an example - &lt;/p&gt;

&lt;p&gt;You have been provided a set S of numbers. You have to perform 3 kinds of&lt;br&gt;&lt;br&gt;
queries :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check if element X is present in the set.&lt;/li&gt;
&lt;li&gt;Add a new element X to this set, if not present&lt;/li&gt;
&lt;li&gt;Delete an element X from this set, if present&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Constraints :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each element of the set is distinct&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= X &amp;lt;= 10 power 5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Come on, think about the way how you will solve this problem?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution 1: Naive Approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This approach is generally the first hit of our mind. Here, we will loop over the set (you can assume the set as an array) and can easily check the element, add the element and delete an element.&lt;/p&gt;

&lt;p&gt;The complexity of the queries -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    O(N) [Linear Search]
    O(N) [Loop over all the elements in the worst case, add after the last element]
    O(N) [Create a new array excluding that element]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solution 2: Direct addressing Scheme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a boolean array of the size of the constraint. Initialize all the elements as False. Take the set of given numbers and change to True the corresponding elements in the array.&lt;/p&gt;

&lt;p&gt;Let's say the given set is S = [0, 3, 8, 10, 12]&lt;/p&gt;

&lt;p&gt;A = [T, F, F, T, F, F, F, F, T, F, T, F, T, ................. , F]  &amp;lt;-- dummy boolean array &lt;/p&gt;

&lt;p&gt;The complexity of the queries -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    O(1) [check the value of Xth index of the array, if True then present else not present]
    O(1) [change the value of Xth index to True]
    O(1) [change the value of Xth index to False]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The catch here is that the initialization of this boolean array is O(N) where N is the set's length as we have to loop over the set and populate the boolean dummy array also called the Addressing table. After initialization, all required queries will take O(1) right?&lt;/p&gt;

&lt;p&gt;Downsides of this approach - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory Limitation: In some cases, constraints can be too large to store &lt;/li&gt;
&lt;li&gt;Wastage of memory: If our set S has 5 elements, we still have to initialize an array of size of the constraint&lt;/li&gt;
&lt;li&gt;Limited to only positive integers: Can be used for negative integers with little modification. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Solution 3: Hashing&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The difference between direct addressing and hashing is instead of directly putting an element in the addressing table we will now pass the element first from the hash function (f(x)) then will store the output of that function in the addressing table.&lt;/p&gt;

&lt;p&gt;ex. f(x) = x % 11 where x is the element of set S&lt;/p&gt;

&lt;p&gt;Now whatever the input is the output of this hash function will be in [0,10]. So, our boolean dummy array will be of length 11&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A = [F, F, F, F, F, F, F, F, F, F, F, F]
Let's take S = {1, 2, 14, 20, 99} and hash function f(x) = x % 11

Calculate the value of hash function for every element of S - 
-  f(1) = 1 % 11 = 1
-  f(2) = 2 % 11 = 2
-  f(14) = 14 % 11 = 3
-  f(20) = 20 % 11 = 9
-  f(99) = 99 % 11 = 0

Now, we know in A only index 1, 2, 3, 9, 0 will be True

So, A = [T, T, T, T, F, F, F, F, F, T, F]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All three downsides are direct addressing approach is resolved here. &lt;strong&gt;The only catch here is to get the hash function right&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Note: The hash function f(x) = x % 11 is just an example taken for you guys to understand. It's not a good hash function as you can see the collision rate is too high. ex: for x = 3 and x = 25 this hash function will return the same output&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hashing&lt;/strong&gt; - A hash function should follow the mathematical definition of functions (either one to one or many to one) and should be consistent with respect to their outputs. A good hash function distributes the keys as uniformly as possible&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collision&lt;/strong&gt; - It happens when two or more different inputs to the hash function return the same output. Let's take a hash function,  f(x) = x % 11&lt;/p&gt;

&lt;p&gt;For x = 3 and x = 25 the value of f(x) is same i.e 3. This is known as a collision or a hit.&lt;br&gt;
Less number of hits corresponds to a good hash function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collision Resolution&lt;/strong&gt; - To resolve or reduced collision certain methods are used. Two well known used algorithms are &lt;strong&gt;Chaining&lt;/strong&gt; and &lt;strong&gt;Double Hashing Technique&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is just the prerequisite to get started on the real problems of hashing. In the next part, we will understand the String Hashing, performance load factor, and other sub-concepts that will give you a solid understanding of hashing and its real-world use case.&lt;/p&gt;

&lt;p&gt;Hope you like this knowledge, please like or comment, cheers. Thanks&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>programming</category>
      <category>productivity</category>
      <category>functional</category>
    </item>
    <item>
      <title>Intro to API Gateway</title>
      <author>Michael Liendo</author>
      <pubDate>Mon, 03 May 2021 19:49:16 +0000</pubDate>
      <link>https://dev.to/mtliendo/intro-to-api-gateway-g8e</link>
      <guid>https://dev.to/mtliendo/intro-to-api-gateway-g8e</guid>
      <description>&lt;p&gt;We‚Äôre halfway through and we have already discussed so much! Today, we‚Äôre going to start tying our knowledge together so that we can create practical applications.&lt;/p&gt;

&lt;p&gt;Kicking things off, we‚Äôre going to talk about API Gateway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-gateway-need-to-know-terms"&gt;
  &lt;/a&gt;
  API Gateway + Need to Know Terms
&lt;/h2&gt;

&lt;p&gt;This service allows us to quickly create endpoints for us to retrieve data.&lt;/p&gt;

&lt;p&gt;Much like the post on S3, API Gateway is a service that can help quite a bit once you get up and running. However, in practical terms, we‚Äôll be focusing on how we can quickly use it in our frontend applications.&lt;/p&gt;

&lt;p&gt;API Gateway comes in 3 flavors: REST, WebSocket, and the more newly announced HTTP. As usual, now is a pretty good time to knock out some definitions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method&lt;/strong&gt;: The action that should be applied when interacting with your data endpoint ie) PUT, POST, GET, DELETE&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resource&lt;/strong&gt;: A user-named item regarding your data. Ie, if you are creating an API about pets, then /pets is a likely resource. Each resource has one or more methods attached to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REST Endpoint&lt;/strong&gt;: A URL that will perform  This allows full customization over how we would like to create our APIs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WebSocket Endpoint&lt;/strong&gt;: Creates an open connection to allow for near-real-time communication.&lt;/p&gt;

&lt;p&gt;üî•Protip: AWS has better options if you‚Äôre considering WebSockets with API Gateway.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP Endpoint&lt;/strong&gt;: Slightly less flexible than REST Endpoints, while offering 40% of the cost savings and much of main functionality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stage&lt;/strong&gt;: An environment where your API lives. Typically used to keep separate production and development environments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-our-api"&gt;
  &lt;/a&gt;
  üèóÔ∏è Creating our API
&lt;/h2&gt;

&lt;p&gt;üóíÔ∏è This section assumes that you have completed the previous day‚Äôs task of creating a pet Lambda. If not, refer back to that email before continuing. However, if you just need a quick refresher, we created and deployed the following lambda function:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEe0r8V4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d95v1x7ixqmzauubjohe.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEe0r8V4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d95v1x7ixqmzauubjohe.jpeg" alt="basic lambda creation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Log into your account and search for API Gateway from the top search bar.&lt;/p&gt;

&lt;p&gt;Next, follow the steps below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Under HTTP API, select ‚ÄúBuild‚Äù&lt;/li&gt;
&lt;li&gt;Select ‚ÄúAdd Integration‚Äù, then select Lambda&lt;/li&gt;
&lt;li&gt;Select the region you used to create your Lambda function&lt;/li&gt;
&lt;li&gt;Click in the ‚ÄúLambda Function‚Äù box and select your lambda&lt;/li&gt;
&lt;li&gt;In the ‚ÄúAPI name‚Äù field, name your API pets-api&lt;/li&gt;
&lt;li&gt;When you're done, select ‚ÄúNext‚Äù&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Almost done!&lt;/p&gt;

&lt;p&gt;On the next page, we‚Äôll be configuring our API endpoint. Go ahead and follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For the Method field, change it to GET&lt;/li&gt;
&lt;li&gt;For the Resource Path, change that to /pets&lt;/li&gt;
&lt;li&gt;Click Next&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We‚Äôre not going to configure another stage, so go ahead and click next.&lt;/p&gt;

&lt;p&gt;If all went well, your screen should look just like mine in the screenshot below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aeJ6jhr8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i494cqcvama7b8qwrew8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aeJ6jhr8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i494cqcvama7b8qwrew8.png" alt="Review and create screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üéâ Congratulations! You just created an API endpoint on AWS without writing any code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-your-endpoint"&gt;
  &lt;/a&gt;
  Testing your endpoint
&lt;/h2&gt;

&lt;p&gt;With your API selected, you should see an ‚ÄúInvoke URL‚Äù. If you were hasty and clicked it, you already know it doesn‚Äôt work üòÖ&lt;/p&gt;

&lt;p&gt;That‚Äôs because we didn‚Äôt assign anything to the root or / resource. Our resource is /pets.&lt;/p&gt;

&lt;p&gt;Copy the Invoke URL paste it in your browser‚Äôs search bar, ensuring that you appends /pets to it. You should now see your list of pets!&lt;/p&gt;

&lt;p&gt;If you‚Äôre just wanting to use this endpoint on your server, then you‚Äôre all done! However, chances are you want to use this in your frontend applications too. Unfortunately, if you try that now, you‚Äôll be greeted by a friend that we‚Äôve all met:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CORS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MpoHQX2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tu3ydojwnnet99vfge0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MpoHQX2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tu3ydojwnnet99vfge0.png" alt="CORS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs saying ‚Äúhey, server to server is fine, but server to the browser isn‚Äôt configured‚Äù.&lt;/p&gt;

&lt;p&gt;Let‚Äôs fix that.&lt;/p&gt;

&lt;p&gt;Back in the AWS Console:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the CORS tab on the left-hand side (under Develop)&lt;/li&gt;
&lt;li&gt;Select the Configure button Under Access-Control-Allow-Origin enter an asterisk&lt;/li&gt;
&lt;li&gt;Click Add, then Save&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;üóíÔ∏è Access-Control-Allow-Origin with an asterisk as the value allows anyone to call our endpoint. In many scenarios, you‚Äôll want to lock that down to just your website‚Äôs domain.&lt;/p&gt;

&lt;p&gt;üéâ Congratulations! You just enabled CORS for your publicly available API endpoint. Feel free to test it out in a &lt;a href="https://codesandbox.io/"&gt;Codesandbox&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h2&gt;

&lt;p&gt;API Gateway &lt;strong&gt;doesn‚Äôt charge for the first one million API calls&lt;/strong&gt;. In my region (and most others) pricing after the free amount is $1.00 for every million requests.&lt;/p&gt;

&lt;p&gt;Not bad at all!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/api-gateway/pricing/"&gt;https://aws.amazon.com/api-gateway/pricing/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Over the course of a few posts, we have already covered a lot! Next time, we‚Äôll learn how to persist data to a NoSQL database by taking a look at DynamoDB.&lt;/p&gt;

&lt;p&gt;See ya then!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to develop A simple js calculator using HTML CSS and Javascript</title>
      <author>Zeenat Parveen</author>
      <pubDate>Mon, 03 May 2021 19:37:32 +0000</pubDate>
      <link>https://dev.to/zeeizee/how-to-develop-a-simple-js-calculator-using-html-css-and-javascript-3mpk</link>
      <guid>https://dev.to/zeeizee/how-to-develop-a-simple-js-calculator-using-html-css-and-javascript-3mpk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-to-develop-a-simple-js-calculator-using-html-css-and-javascript"&gt;
  &lt;/a&gt;
  How to develop A simple js calculator using HTML CSS and Javascript
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NswLjJBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69719511/116789828-4b65a380-aaca-11eb-8831-09b66819923a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NswLjJBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69719511/116789828-4b65a380-aaca-11eb-8831-09b66819923a.PNG" alt="cal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This calculator will help you to perform basic arithmetic operations addition, subtraction, multiplication, and division.&lt;br&gt;
&lt;a href="https://zeecalculator.netlify.app/"&gt;Live demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source Code:&lt;a href="https://github.com/Zeeizee/zeecalculator"&gt;Github &lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  prerequisite:
&lt;/h2&gt;

&lt;p&gt;A basic understanding of HTML, CSS, and javascript makes it easy to understand the logic of this calculator.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#technologies-used"&gt;
  &lt;/a&gt;
  Technologies used:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTML(Structure Building)&lt;/li&gt;
&lt;li&gt;CSS(Designing/Presentation)&lt;/li&gt;
&lt;li&gt;JavaScript(Logic Implemetation)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You must have an editor to write code. I will highly recommend you to use &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; for coding.VS Code is my most used and favorite editor.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's Get Started:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;Style.css&lt;/li&gt;
&lt;li&gt;Script.js
&lt;h2&gt;Let's Break Down Structure&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a graphical representation of the structure. This calculator basically designed by using the concept of &lt;code&gt;flex&lt;/code&gt; and &lt;code&gt;Grid&lt;/code&gt; layouts.&lt;br&gt;
By using these layouts it becomes very easy to responsive your web app very easily.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiyJDYqY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69719511/116796233-58978800-aaf4-11eb-9b6e-82d0db26a09b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiyJDYqY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69719511/116796233-58978800-aaf4-11eb-9b6e-82d0db26a09b.jpg" alt="html"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-lets-design-calulator-using-html-and-css"&gt;
  &lt;/a&gt;
  Step 1: Lets Design Calulator Using HTML and CSS
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTML(hypertext Markup Language) is the standard markup language used to create basic structure of the website.&lt;/li&gt;
&lt;li&gt;CSS (Cascading Style Sheets) describes how HTML elements are to be displayed on screen. It can control the layout of multiple web pages all at once.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;  &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Calculator&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;External CSS with name &lt;code&gt;style.css&lt;/code&gt; linked with html by using &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag to design calculator app.&lt;/li&gt;
&lt;li&gt;Content in &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag will be shown in the browser's title bar or in the page's tab
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Heading  --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Display Screen--&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Buttons--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#container"&gt;
  &lt;/a&gt;
  .Container
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Outer container conatins All elements of calculator like calculator headind, display screen and buttons.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;        
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#4f9b9440&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;214&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;238&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;236&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;-12px&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;161&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="m"&gt;36px&lt;/span&gt; &lt;span class="m"&gt;-18px&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;Display&lt;/span&gt;&lt;span class="nd"&gt;:flex&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;flex-direction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;column&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;justify-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;align-items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Display properties are used to set the direction of elements from inner side of container and align them in center of the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt; &lt;span class="nt"&gt;position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;absolute&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="nt"&gt;top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%;&lt;/span&gt;
 &lt;span class="nt"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%;&lt;/span&gt;
 &lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;translate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-50&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;&lt;span class="nt"&gt;-50&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;postion properties are used to set the container in center of the media screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#display"&gt;
  &lt;/a&gt;
  #display
&lt;/h3&gt;

&lt;p&gt;Display screen is the representation of input numbers, Operators and their results&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"display"&lt;/span&gt; &lt;span class="na"&gt;readonly&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#display&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;98%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;readonly&lt;/code&gt; proprty restrict the use of text input. It will display values instead of taking direct input from the user. &lt;code&gt;text-align:right&lt;/code&gt; property used to align numbers to the right side of the display screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gridcontainer"&gt;
  &lt;/a&gt;
  .grid-container
&lt;/h3&gt;

&lt;p&gt;This container consist of all input buttons having numbers and operators&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;       
&lt;span class="c"&gt;&amp;lt;!-- grid Items --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.grid-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.grid-item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;59px&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;182&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;182&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;211&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;-12px&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="m"&gt;36px&lt;/span&gt; &lt;span class="m"&gt;-18px&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Grid container is used to fix button in rows and columns.To use grid layout  &lt;code&gt;display: grid&lt;/code&gt; property is used. &lt;code&gt;grid-template-columns:auto auto auto auto&lt;/code&gt; will decide there will be four columns in one row. Each button in grid container is designed and maintained by using &lt;code&gt;grid-item&lt;/code&gt; class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#row-1"&gt;
  &lt;/a&gt;
  Row 1:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="c"&gt;&amp;lt;!-- row 1 --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item plus"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;+&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item minus"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;-&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item multiply"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;*&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item divide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;/&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In row 1 there are four buttons having values +, -, *, / respectively.&lt;/li&gt;
&lt;li&gt; These are basic arithmetic operators used in calculation.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.plus&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#F79F1F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.minus&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#A3CB38&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.multiply&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#D980FA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.divide&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFC312&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.plus&lt;/code&gt;,&lt;code&gt;.minus&lt;/code&gt;,&lt;code&gt;.multiply&lt;/code&gt; and &lt;code&gt;.divide&lt;/code&gt; classes applying different colors to buttons. Different color scheme make this calculator more eye catchy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#row-2"&gt;
  &lt;/a&gt;
  Row 2:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- row 2 --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;8&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;9&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item equal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;=&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In row 2 there are four buttons having values 7, 8, 9 and = operator. &lt;code&gt;.equal&lt;/code&gt; class used to design exqal button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt; &lt;span class="nc"&gt;.equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#29696b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;grid-row: span 4&lt;/code&gt; property expands the equal button to the 4 rows.&lt;/p&gt;


&lt;h3&gt;Row 3:&lt;/h3&gt;
&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="c"&gt;&amp;lt;!-- row 3 --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Row 4:&lt;/h3&gt;
&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- row 4 --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Row 5:&lt;/h3&gt;
&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- row 5 --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Row 3, 4 and 5 consist of value &lt;code&gt;4,5,6&lt;/code&gt; , &lt;code&gt;1,2,3&lt;/code&gt; , &lt;code&gt;0,.,C&lt;/code&gt; respectively.&lt;/p&gt;

&lt;h3&gt;active selector&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.grid-item&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#757474&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;:active selector is used to selecting and styling the active element. An element becomes active when you click on it. when grid items clicked their background color turns into grey.&lt;/p&gt;

&lt;h1&gt;Step 2: Let's Implement javascript logic:&lt;/h1&gt;
 


&lt;h2&gt;Methodology:&lt;/h2&gt;

&lt;h4&gt; When you click on a button &lt;/h4&gt;
 

&lt;ul&gt;
&lt;li&gt;If is a number (0-9) or operator (+,-,*,/) it will be concatenated into the display screen.&lt;/li&gt;
&lt;li&gt;If it is an equal(=) button then the expression in the display screen be evaluated and show the result in the display screen.&lt;/li&gt;
&lt;li&gt;If it is ( C ) it will reset the calculator and set the screen value to 0.&lt;/li&gt;
&lt;li&gt;If it is (.) it will concatenate to the display screen one time in one operand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First of all, you have to take control of the HTML element. You will use selectors to call these inputs and store them in a variable.&lt;br&gt;
 querySelector() returns the Element within the document that matches the specified selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;screenValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#display&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using id selector display screen will b accessed and assign to the screenValue variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To access all button &lt;code&gt;document.querySelectorAll("button")&lt;/code&gt; is used and assigned this to the buttonValue variable.&lt;br&gt;
 As we do &lt;code&gt;console.log(buttonValue)&lt;/code&gt; it shows NodeList of all Buttons&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8dJ60EKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69719511/116821317-d8742f80-ab92-11eb-998d-d51bae5f3f49.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8dJ60EKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69719511/116821317-d8742f80-ab92-11eb-998d-d51bae5f3f49.PNG" alt="allnodes"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;buttonValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;


        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;buttonText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
     &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;forEach() callback method is used to access all node items and add click event listener.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;let buttonText = e.target.innerText;&lt;/code&gt; access value  of clicked button and store it in buttonText variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Note:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Expression is the combination of operators and operands.&lt;/li&gt;
&lt;li&gt;There is only one operator between two operands.&lt;/li&gt;
&lt;li&gt;Only &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; operators can be a prefix of number.&lt;/li&gt;
&lt;li&gt;Only one &lt;code&gt;.&lt;/code&gt; is allowed in one operand
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;refreshCalculator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isOperator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;isdot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;refreshCalculator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if user click on &lt;code&gt;C&lt;/code&gt; button it will refresh calculator setting and reset screen value to 0.&lt;br&gt;
&lt;code&gt;isOperator=true&lt;/code&gt; and &lt;code&gt;isNumber=true&lt;/code&gt; means it user can enter a number or an operator.&lt;code&gt;isDot=false&lt;/code&gt; means there is no precision in operand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isdot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;isdot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If user click on &lt;code&gt;.&lt;/code&gt; button &lt;code&gt;isdot&lt;/code&gt; wil be checked. if there is no percision in value &lt;code&gt;.&lt;/code&gt; will be concatenate and make &lt;code&gt;isdot=true&lt;/code&gt;.it ensure the duplication of percision in operand because only one &lt;code&gt;.&lt;/code&gt; is allowed in one value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isOperator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// checking if display screen vaule is not equal to zero operator will b concatenate like 23+&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="c1"&gt;//if display value is 0 then + will be add as prefix of the operand&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;isOperator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;isdot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;if user clicks on &lt;code&gt;+&lt;/code&gt; button &lt;code&gt;isOperator&lt;/code&gt; will be checked if there is already an operator no more operator will be added otherwise operator will be added.&lt;/li&gt;
&lt;li&gt;if display screen vaue is 0 and user enter + operator. The opertor will be added as prefix on the left side of the operand otherwise it will be concatenated on the right side of the operand.&lt;/li&gt;
&lt;li&gt;Now its time to set the values of boolean &lt;code&gt;isOperator=false&lt;/code&gt; which means no more operators will b concatenated until another operand will be added.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isNumber=true&lt;/code&gt; means user can enter another operand.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isdot=false&lt;/code&gt; means user can add &lt;code&gt;.&lt;/code&gt; in another operand.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isOperator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;isOperator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;isdot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;if user click on &lt;code&gt;-&lt;/code&gt; button &lt;code&gt;isOperator&lt;/code&gt; will be checked if there is already an operator no more operator will be added otherwise operator will be added.&lt;/li&gt;
&lt;li&gt;if display screen vaue is 0 and user enter - operator. The opertor will bs added as prefix on the left side of the operand otherwise it will be concatenated on the right side of the operand.&lt;/li&gt;
&lt;li&gt;Now its time to set the values of boolean &lt;code&gt;isOperator=false&lt;/code&gt; which means no more operators will b concatenated until another operand will be added.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isNumber=true&lt;/code&gt; means user can enter another operand.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isdot=false&lt;/code&gt; means user can add &lt;code&gt;.&lt;/code&gt; in another operand.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isOperator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;isOperator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;isdot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;if user click on &lt;code&gt;*&lt;/code&gt; button &lt;code&gt;isOperator&lt;/code&gt; will be checked if there is already an operator no more operator will be added otherwise operator will be added.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;*&lt;/code&gt; can never be used as prefix operator so it will only be concatenated if the display screen having value &amp;gt; 0&lt;/li&gt;
&lt;li&gt;Now its time to set the values of boolean &lt;code&gt;isOperator=false&lt;/code&gt; which means no more operators will b concatenated until another operand will be added.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isNumber=true&lt;/code&gt; means user can enter another operand.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isdot=false&lt;/code&gt; means user can add &lt;code&gt;.&lt;/code&gt; in another operand.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isOperator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;isOperator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;isdot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If user click on &lt;code&gt;/&lt;/code&gt; button &lt;code&gt;isOperator&lt;/code&gt; will be checked if there is already an operator no more operator will be added otherwise operator will be added.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt; can never be used as prefix operator so it will only be concatenated if the display screen having value &amp;gt; 0&lt;/li&gt;
&lt;li&gt;Now its time to set the values of boolean &lt;code&gt;isOperator=false&lt;/code&gt; which means no more operators will b concatenated until another operand will be added.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isNumber=true&lt;/code&gt; means user can enter another operand.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isdot=false&lt;/code&gt; means user can add &lt;code&gt;.&lt;/code&gt; in another operand.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;buttonText&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//do nothing.&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//conver the 0 to the button value&lt;/span&gt;
                &lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//append 0 into the value&lt;/span&gt;
                &lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="c1"&gt;// allow user to add operator after operand &lt;/span&gt;
            &lt;span class="nx"&gt;isOperator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Values from ( 0-9 ) will b inserted and concatenated.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;buttonText === '0' &amp;amp;&amp;amp; screenValue.value === '0'&lt;/code&gt; it will do nothing maens display screen value will remain 0.&lt;/li&gt;
&lt;li&gt;If  &lt;code&gt;screenValue.value === '0'&lt;/code&gt; but &lt;code&gt;buttonText &amp;gt; 0&lt;/code&gt; then display  screen value will be equal to buttonText value.&lt;/li&gt;
&lt;li&gt;Otherwise &lt;code&gt;0&lt;/code&gt; will be append display screen value.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screenValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If user click &lt;code&gt;=&lt;/code&gt; button display screen expression will be evaluated and result will b shown in display screen.&lt;/p&gt;

&lt;p&gt;When all the individual components are pieced together, we have a fully functional calculator. Now you can play with it.&lt;br&gt;
If you are ready to do more, then:&lt;/p&gt;

&lt;p&gt;try to add some more buttons like backspace which clears the last character.&lt;br&gt;
or add some more operators like the remainder operator (%). Just play with it...&lt;br&gt;
I hope you enjoyed this tutorial.&lt;/p&gt;

&lt;p&gt;If you had any doubts, then please comment them below. And if you enjoyed this tutorial, then please hit the like button below. Thank you ;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommendation"&gt;
  &lt;/a&gt;
  Recommendation:
&lt;/h2&gt;

&lt;p&gt;Whether you are building a calculator in JavaScript or working on a more complex project, the idea is to break down the contents in a logical and construed manner. This will help you derive the exact syntax and will lead to a fluid web application. Instead of starting with coding directly, try to understand what is the real purpose of the project you are going to build, How it works, what will be the input and desired output, it will lead you to the code.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>calculator</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>‚ú® Learning is not a destination... it's a lifelong journey</title>
      <author>Treehouse</author>
      <pubDate>Mon, 03 May 2021 19:21:13 +0000</pubDate>
      <link>https://dev.to/teamtreehouse/learning-is-not-a-destination-it-s-a-lifelong-journey-2kng</link>
      <guid>https://dev.to/teamtreehouse/learning-is-not-a-destination-it-s-a-lifelong-journey-2kng</guid>
      <description>&lt;p&gt;While the path may be full of twists and turns, bumps and burns... there are some essential checkpoints that will help you along the way.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%F0%9F%8F%9E-find-your-path"&gt;
  &lt;/a&gt;
  üèû Find your path
&lt;/h3&gt;

&lt;p&gt;As your learning journey begins, you may feel overwhelmed with all of your options. Which programming language should you start with? Front-end, back-end, design, something else?!&lt;/p&gt;

&lt;p&gt;Take a deep breath... and know that there's no wrong place to start. What interests you the most? What feels like it will be the best starting point for you? Just start somewhere... and grow from there.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#learn-and-grow"&gt;
  &lt;/a&gt;
  üå± Learn and grow
&lt;/h3&gt;

&lt;p&gt;Once you've found and committed to your learning path, you're well on your way! Design a learning groove that works for your daily lifestyle. If learning 15 minutes per day is most beneficial for you, go for it! &lt;/p&gt;

&lt;p&gt;Again, there's no wrong way. Just make sure you set yourself up for success with reasonable daily goals so you are building momentum. Be sure to also take breaks so that you can digest everything you're learning - you'll come back fresh!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#ask-for-help"&gt;
  &lt;/a&gt;
  üí¨ Ask for help
&lt;/h3&gt;

&lt;p&gt;You may encounter challenges along the way. You may sail right through. One thing's for sure, you will eventually come upon roadblocks - it's part of the journey! It's important to surround yourself with folx and resources that can help you unblock things and move forward.&lt;/p&gt;

&lt;p&gt;Be sure to reach out to your loved ones and friends for support. Build or join a community that you can reach out to and ask for help when challenges arise. Utilize your resources - Google-it, Stack Overflow-it, Dev.to-it.&lt;/p&gt;

&lt;p&gt;Overcoming challenges along the way will help you to successfully learn... and your support networks and online resources are key to that success.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%F0%9F%9B%A4-stay-on-track"&gt;
  &lt;/a&gt;
  üõ§ Stay on track
&lt;/h3&gt;

&lt;p&gt;There may come a point along your learning journey where you start to deviate from the path... you might miss a day (or a few). That's okay! Life happens. The most important thing is to hop back on the track when you are able and start moving again. &lt;/p&gt;

&lt;p&gt;You may have needed a bit of time to digest everything you've been working with. Just don't give up on your goals - know that you can reach the top of that mountain you're climbing.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#achieve-your-goals"&gt;
  &lt;/a&gt;
  ‚úÖ Achieve your goals
&lt;/h3&gt;

&lt;p&gt;Whether you're working on small daily goals, or big picture goals... reaching those achievements is vital to feeling like you're getting somewhere on your learning journey. It will propel you from success to success.&lt;/p&gt;

&lt;p&gt;We know it's not always easy. Be sure to give yourself some props! You are doing an amazing job juggling life alongside learning. Keep receipts of your achievements so that you can refer back to them if you feel like giving up or if Imposter Syndrome sets in.&lt;/p&gt;

&lt;p&gt;Once you've accomplished your goals ‚Äì go after new ones. The key to being a lifelong learner is doing it for the love of learning... and finding joy in the growing process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-going-dont-give-up"&gt;
  &lt;/a&gt;
  Keep going - don't give up! üíú
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#join-the-conversation"&gt;
  &lt;/a&gt;
  üí¨ Join the conversation
&lt;/h2&gt;

&lt;p&gt;Every learning journey is unique. Are there any other essential checkpoints you have to keep you motivated and growing?  &lt;strong&gt;Leave a comment below!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>career</category>
      <category>programming</category>
      <category>design</category>
    </item>
    <item>
      <title>Beautify your GitHub!</title>
      <author>philip-haines</author>
      <pubDate>Mon, 03 May 2021 19:19:13 +0000</pubDate>
      <link>https://dev.to/philiphaines/beautify-your-github-40hh</link>
      <guid>https://dev.to/philiphaines/beautify-your-github-40hh</guid>
      <description>&lt;p&gt;If you have ever visited someones GitHub and noticed that they have some fancy pictures, cool emojis, and stats on their homepage you may have wondered how to make a page like that on your own. If this sounds like you, keep reading, because in this blog post I'm going to tell you exactly how to make your GitHub &lt;code&gt;README&lt;/code&gt; sparkle! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AACisvwi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1dptsjjls6mdgvjdvor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AACisvwi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1dptsjjls6mdgvjdvor.png" alt="Screen Shot 2021-05-03 at 12.23.15 PM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-your-own"&gt;
  &lt;/a&gt;
  How to Make Your Own
&lt;/h2&gt;

&lt;h6&gt;
  &lt;a href="#its-easier-than-you-think"&gt;
  &lt;/a&gt;
  (Its easier than you think!)
&lt;/h6&gt;

&lt;p&gt;Creating a GitHub profile &lt;code&gt;README&lt;/code&gt; is super simple super simple but a little hard to find by yourself. Once you are signed into GitHub, initialize a new repository by going to &lt;a href="https://github.com/new"&gt;https://github.com/new&lt;/a&gt;. Name your new repository the name of your GitHub account (hint: this can be found by hovering over your profile icon in the top right of the screen), and click "Create Repository". How easy was that? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_P3qZ-u9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxthfaope9v7iotiufm6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_P3qZ-u9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxthfaope9v7iotiufm6.png" alt="Screen Shot 2021-05-03 at 11.58.53 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a shortcut checkoff "Add a README file" when creating your repository. The &lt;code&gt;README&lt;/code&gt; has to be there in order for your new fancy profile to be fancy. Speaking of which... &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-it-stand-out"&gt;
  &lt;/a&gt;
  Make It Stand Out
&lt;/h2&gt;

&lt;p&gt;Now that you have your GitHub &lt;code&gt;README&lt;/code&gt; created, theres a few things you need to know about making it pretty. GitHub &lt;code&gt;README&lt;/code&gt; uses something called Markdown language. You can use Markdown to add images, link, gifs, headers, and so much more. No need to memories Markdown, just use the &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet"&gt;cheat sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing that I really like on a GitHub profile page is a header. It's a nice personal touch, and really easy to make with a program like PhotoShop, Sketch, or even Google Docs. Or for something even easier check out &lt;a href="https://www.canva.com/search/templates?q=header"&gt;Canva Headers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c5FUcBcw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vvgfeazzphvsvkc3opb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5FUcBcw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vvgfeazzphvsvkc3opb.png" alt="Screen Shot 2021-05-03 at 12.30.26 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your header could have your name, photo, job title, location, and a plethora of other things. Here are a few examples that I really like: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jlengstorf"&gt;https://github.com/jlengstorf&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/bdougie"&gt;https://github.com/bdougie&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/sindresorhus"&gt;https://github.com/sindresorhus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's super simple to add pictures into your GitHub &lt;code&gt;README&lt;/code&gt;. If you have the file saved locally you can just drag and drop it into your Markup and its imported. If you want to add a link as a photo you can use the &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; tag and add a &lt;code&gt;src&lt;/code&gt; with a path to the photo you want to add. Remember, the &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; is a self closing tag, you can still have bugs in Markdown so be sure to close that tag! &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tell-people-about-yourself"&gt;
  &lt;/a&gt;
  Tell People About Yourself
&lt;/h2&gt;

&lt;p&gt;People are interested in other people, tell your story. A couple of lines of text about your dev philosophy could go a long way to showing a potential employer or collaborator who you are! Even better, give a list of things you're currently working on, excited to learn about, and link to a few of your projects. Looking for collaborators on your current projects is one of the best ways to network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0wnYPN5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhsirq9bjxrp3a8p667z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0wnYPN5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhsirq9bjxrp3a8p667z.png" alt="Screen Shot 2021-05-03 at 1.01.16 PM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is another great opportunity to also slip in an interesting fact about yourself. Make sure to keep your bullet points short and to the point. Add emojis for a little fun, who doesn't like emojis?&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highlighting-your-skills"&gt;
  &lt;/a&gt;
  Highlighting Your Skills
&lt;/h2&gt;

&lt;p&gt;Displaying your skills right on your GitHub homepage is highly recommended. You worked hard for those skills, show them off! When potential employers or collaborators land on your GitHub page this small future will give them a quick understanding of the languages that you can work in. &lt;/p&gt;

&lt;p&gt;There are a couple of ways of doing this, you can have logos of all of the languages, tools, and technologies that you're adept in. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zv5fkHJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cznw99fmy9en0ro9x0u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zv5fkHJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cznw99fmy9en0ro9x0u8.png" alt="Screen Shot 2021-05-03 at 12.29.53 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to find these icons is to use google images and then click on "tools", then "color", then "transparent". This should return a large number of &lt;code&gt;.png&lt;/code&gt; images that you can easily resize in your Markdown.&lt;br&gt;
&lt;code&gt;&amp;lt;img height="20"src="https://img.icons8.com/color/452/graphql.png"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Some other awesome places to look for logos or icons are &lt;a href="https://simpleicons.org/"&gt;https://simpleicons.org/&lt;/a&gt; and if you're looking for something a little fancier, check out &lt;a href="https://shields.io"&gt;https://shields.io&lt;/a&gt;. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-off-your-work"&gt;
  &lt;/a&gt;
  Show Off Your Work
&lt;/h2&gt;

&lt;p&gt;Another really good way to boast your skills is by showcasing your repos. The first way to do this is by pinning your top repos directly to your home page. While you don't technically do this in the &lt;code&gt;README&lt;/code&gt;, it's still super important to make sure that your top repositories are actually your top repos. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OCUOMeOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh3fzj7d0ryrvtkco04o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OCUOMeOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh3fzj7d0ryrvtkco04o.png" alt="Screen Shot 2021-05-03 at 12.44.40 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To change your pinned repositories, go to your GitHub homepage (github.com/) and scroll to your "pinned" section. On the top right of your currently pinned repositories, there is some clickable text that says "Customize pinned". Click that and a modal with a list of all of your work will pop up. Check off the work you want to show off, you can pin up to six repos on your home page.   &lt;/p&gt;

&lt;p&gt;If you want to take it to the next level, look no further than &lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;GitHub README Stats&lt;/a&gt;. GitHub README Stats is a tool that allows you display stats on your GitHub homepage in nicely formatted cards. You can pass in many information options such as &lt;code&gt;top_langs&lt;/code&gt;, which will give you a card for your &lt;code&gt;README&lt;/code&gt; that displays your top languages. There are many other arguments that you can pass into the stats URL and the &lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;docs&lt;/a&gt; are super helpful.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it All Together
&lt;/h2&gt;

&lt;p&gt;Now that you're a Markdown master, and a champion of the GitHub homepage, go ahead and push your &lt;code&gt;README&lt;/code&gt; to the master branch and brag about your beautiful new GitHub on LinkedIn! Remember, you can always go back and edit your &lt;code&gt;README&lt;/code&gt; at any point so make sure to market test a few different setups. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ifmUGM_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fno82ya50jueyoclrkpk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ifmUGM_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fno82ya50jueyoclrkpk.png" alt="Github-full-page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding, and remember to keep that GitHub green!&lt;/p&gt;

</description>
      <category>github</category>
      <category>markdown</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>My Dev Journey: Bootcamp Pre-Course</title>
      <author>Harry York</author>
      <pubDate>Mon, 03 May 2021 19:08:25 +0000</pubDate>
      <link>https://dev.to/harryyork97/dev-journey-pre-course-2dn5</link>
      <guid>https://dev.to/harryyork97/dev-journey-pre-course-2dn5</guid>
      <description>&lt;p&gt;Thanks for checking out my first blog post on my journey into tech! I'm aiming to do one of these each week as a retrospective, to see how far I've come! üèÉüèª‚Äç‚ôÇÔ∏è&lt;br&gt;
Consider following me on &lt;a href="https://github.com/harryyork97"&gt;GitHub&lt;/a&gt; and &lt;a href="https://twitter.com/grand_oldduke"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-i-am"&gt;
  &lt;/a&gt;
  Who I am!
&lt;/h2&gt;

&lt;p&gt;I‚Äôm Harry, I‚Äôm a trainee Software Developer, about to start my bootcamp through &lt;a href="https://northcoders.com/"&gt;Northcoders&lt;/a&gt;. I live in Leeds, West Yorkshire with my partner &lt;a href="https://dev.to/samroebuck_"&gt;Sam&lt;/a&gt;, and our two Gerbils, &lt;a href="https://www.instagram.com/gussandjim/"&gt;Guss and Jim&lt;/a&gt;. üê≠ üê≠&lt;/p&gt;

&lt;p&gt;I went to University and did my degree in Design Engineering, which is just Industrial/Product Design with a different name slapped on it. For just over a year I worked as a Technical Designer for a prop and set design company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-knew-before-applying"&gt;
  &lt;/a&gt;
  What I knew before applying
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A little bit of Python&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A little HTML and CSS from a while back&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That I enjoyed learning about what makes the tech I use work, and honestly I think this is the most important pre-requisite rather than any knowledge/experience.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learnt-since-applying"&gt;
  &lt;/a&gt;
  What I‚Äôve learnt since applying
&lt;/h2&gt;

&lt;p&gt;Here's a list of some of the things I've learnt and links to resources I've found useful!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-basics"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;JavaScript Basics&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;On freeCodeCamp I've gone through everything from comments and variables through to loops and recursion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#es6"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#es6"&gt;ES6&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;LOTS&lt;/em&gt;&lt;/em&gt; of ES6 content, from let and const variables through to Promises.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-data-structures"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#basic-data-structures"&gt;Basic Data Structures&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Manipulating Arrays and Objects! Great fun ü•≥&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#debugging"&gt;Debugging&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;console.log()&lt;/code&gt; is now my most typed phrase ‚Äî &lt;em&gt;and I love it&lt;/em&gt; ‚Äî it's such a valuable tool for understanding what is happening at any point in my code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cli"&gt;
  &lt;/a&gt;
  &lt;a href="https://openclassrooms.com/en/courses/4614926-learn-the-command-line-in-terminal?status=published"&gt;CLI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://ohmyz.sh/"&gt;ohmyzsh&lt;/a&gt; is a great way to style your terminal to a less threatening theme (I use &lt;a href="https://github.com/denysdovhan/spaceship-prompt"&gt;Spaceship&lt;/a&gt;) which can really help take the barrier of fear down using the command line.&lt;/p&gt;

&lt;p&gt;The best advice from this course is to stop using Finder for searching through your docs, use your Terminal! I now use mine for as much as possible, and it's taken a lot of the fear out of the mysterious black box.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-basics-and-using-github"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/playlist?list=PLRqwX-V7Uu6ZF9C0YMKuns9sLDzK6zoiV"&gt;Git basics and using GitHub&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Very daft video series and really enjoyable, if you have a GitHub and haven't got a clue where to start, why not with a rainbow poems üòÇ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-vscode"&gt;
  &lt;/a&gt;
  Using VSCode
&lt;/h3&gt;

&lt;p&gt;Here's a couple of extensions and themes that I've been enjoying so far, if you know some good extensions let me know!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag"&gt;Auto Close Tag&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula"&gt;Dracula Theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codewars"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codewars.com/dashboard"&gt;CodeWars&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Such a great way to warm up in a morning or to try out some theory work that I just covered. Highly recommend for anyone starting out, it's a great way to put your skills to work!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-found-difficult"&gt;
  &lt;/a&gt;
  What I found difficult
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#background-processes"&gt;
  &lt;/a&gt;
  Background processes
&lt;/h3&gt;

&lt;p&gt;Grasping processes that happen in the background, especially the processes that compound and have no observable steps. &lt;/p&gt;

&lt;p&gt;As an example, mapping over an array rather than creating a for loop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instance-properties-and-instance-methods"&gt;
  &lt;/a&gt;
  Instance properties and instance methods
&lt;/h3&gt;

&lt;p&gt;The reason why length() doesn't work. (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_properties"&gt;MDN&lt;/a&gt; says it best)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-path-of-least-resistance"&gt;
  &lt;/a&gt;
  The path of least resistance
&lt;/h3&gt;

&lt;p&gt;If after trying and trying again to get a solution to work I start to feel like there's a better way. And there usually is.&lt;/p&gt;

&lt;p&gt;The path of least resistance isn't about cutting corners but is about working smart not hard.&lt;/p&gt;

&lt;p&gt;This means thinking about the problem logically rather than rationally, i.e. not always needing to split a string down to an array, or not always needing to create a for loop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exiting-vim"&gt;
  &lt;/a&gt;
  Exiting Vim üò®
&lt;/h3&gt;

&lt;p&gt;Got stuck in Vim?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Esc&lt;/code&gt; then &lt;code&gt;:wq&lt;/code&gt; then &lt;code&gt;Return&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#possibly-the-most-important"&gt;
  &lt;/a&gt;
  Possibly the most important
&lt;/h3&gt;

&lt;p&gt;Not defining where I am in my tech journey based on  where others are. üíú&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-enjoyed-so-far"&gt;
  &lt;/a&gt;
  What I've enjoyed so far
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Learning, it's great fun to grasp something new and there's so much more to come!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ternary operators and syntactic sugar in ES6&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Template literals &lt;em&gt;chef's kiss&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.codewars.com/dashboard"&gt;CodeWars&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>bootcamp</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Endless Scroll / Infinite Loading with Turbo Streams &amp; Stimulus</title>
      <author>Stefan Wienert</author>
      <pubDate>Mon, 03 May 2021 19:00:00 +0000</pubDate>
      <link>https://dev.to/zealot128/endless-scroll-infinite-loading-with-turbo-streams-stimulus-5d89</link>
      <guid>https://dev.to/zealot128/endless-scroll-infinite-loading-with-turbo-streams-stimulus-5d89</guid>
      <description>&lt;p&gt;&lt;a href="https://turbo.hotwire.dev/"&gt;Hotwire Turbo&lt;/a&gt; by the Ruby on Rails developers is the new solution to enhance server side rendered apps with interactive behavior without much Javascript at all.&lt;/p&gt;

&lt;p&gt;In this post, I want to show you, how I built an &lt;strong&gt;infinite scrolling&lt;/strong&gt; feature, meaning: When reaching the bottom of a list, load the next page and add it to the DOM. There are many many ways in handling this kind of solution, like, using a 3rd party library like ‚Äúlazyload‚Äù and more. To get more familiar with the Hotwire Stack of Stimulus + Turbo, I decided to use &lt;strong&gt;Turbo Streams&lt;/strong&gt; for handling the DOM-part, and Stimulus to connect with an &lt;strong&gt;Interaction Observer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For this post, I will make the following assumptions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We hava a controller &lt;code&gt;PostsController&lt;/code&gt; with an &lt;code&gt;index&lt;/code&gt; action&lt;/li&gt;
&lt;li&gt;We already handling pagination via the great &lt;code&gt;pagy&lt;/code&gt; Gem&lt;/li&gt;
&lt;li&gt;Turbo + Stimulus are all set up&lt;/li&gt;
&lt;li&gt;I use &lt;strong&gt;SLIM&lt;/strong&gt; as the template language, because I like it‚Äôs brevity and clearness&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disclaimer: When &lt;a href="https://github.com/hotwired/turbo/pull/146"&gt;this PR&lt;/a&gt; get‚Äôs released, this solution might be simplified much more, but just using &lt;code&gt;&amp;lt;turbo-frame action="append"&amp;gt;&lt;/code&gt; with a little glue code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-stimulus-to-our-posts"&gt;
  &lt;/a&gt;
  Add stimulus to our posts
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight slim"&gt;&lt;code&gt;&lt;span class="c"&gt;// index.html.slim&lt;/span&gt;

&lt;span class="nc"&gt;.list-group&lt;/span&gt;(&lt;span class="na"&gt;data-controller&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"infinite-scroll"&lt;/span&gt;)
  &lt;span class="c"&gt;// If you need to enable Live Updates, you could connect to a&lt;/span&gt;
  &lt;span class="c"&gt;// = turbo_stream_from current_user, :posts&lt;/span&gt;
  &lt;span class="nf"&gt;#posts&lt;/span&gt;
    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt;
  &lt;span class="nt"&gt;div&lt;/span&gt;(&lt;span class="na"&gt;data-infinite-scroll-target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'scrollArea'&lt;/span&gt;)

  &lt;span class="nf"&gt;#pagination&lt;/span&gt;&lt;span class="nc"&gt;.list-group-item.pt-3&lt;/span&gt;(&lt;span class="na"&gt;data-infinite-scroll-target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"pagination"&lt;/span&gt;)
    &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pagy_bootstrap_nav&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@pagy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this index we,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wrap our posts with a Stimulus Controller and&lt;/li&gt;
&lt;li&gt;mark the posts into a div with id=posts (to later append to)&lt;/li&gt;
&lt;li&gt;add a &lt;code&gt;scrollArea&lt;/code&gt; empty element div just below our posts list - This area will be used for our Intersection Observer later on&lt;/li&gt;
&lt;li&gt;add the &lt;code&gt;pagy_nav&lt;/code&gt; or &lt;code&gt;pagy_bootstrap_nav&lt;/code&gt; pagination tags on the bottom, also wrapped in a Stimulus Target to later on pick the next page‚Äôs link from it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, before we modify the controller to respond to Turbo events, we implement the Stimulus Controller&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stimulus-controller"&gt;
  &lt;/a&gt;
  Stimulus controller
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/javascript/controllers/infinite_scoll_controller.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scrollArea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pagination&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObserver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;createObserver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleIntersect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// https://github.com/w3c/IntersectionObserver/issues/124#issuecomment-476026505&lt;/span&gt;
        &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollAreaTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;handleIntersect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadMore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;loadMore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paginationTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[rel=next]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/vnd.turbo-stream.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Turbo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderStreamMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We define the areas ScrollArea + Pagination&lt;/li&gt;
&lt;li&gt;When loaded, the controller puts an Interaction Observer onto the scroll area&lt;/li&gt;
&lt;li&gt;When the scroll area get‚Äôs into the viewport, we &lt;code&gt;loadMore&lt;/code&gt; posts, by picking the next page‚Äôs url from the pagination&lt;/li&gt;
&lt;li&gt;Import: We can‚Äôt use &lt;code&gt;Turbo.visit&lt;/code&gt; but we are using &lt;code&gt;fetch&lt;/code&gt; instead, because the Turbo-Stream Magic &lt;a href="https://github.com/hotwired/turbo/pull/52"&gt;only works on POST/PATCH/&lt;/a&gt;‚Ä¶ requests. But we want our controller to respond to this GET request with a specific Turbo Stream that handles the DOM manipulation. That‚Äôs why we use &lt;code&gt;fetch&lt;/code&gt; manually with the special &lt;code&gt;Accept: text/vnd.turbo-stream.html&lt;/code&gt; header here.&lt;/li&gt;
&lt;li&gt;When the fetch returns, &lt;a href="https://github.com/hotwired/turbo/issues/34"&gt;we pipe the result manually&lt;/a&gt; to &lt;code&gt;Turbo.renderStreamMessage&lt;/code&gt; which evaluates the html content for Turbo Stream actions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#postscontroller"&gt;
  &lt;/a&gt;
  PostsController
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Pagy&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Backend&lt;/span&gt;
  &lt;span class="n"&gt;helper&lt;/span&gt; &lt;span class="no"&gt;Pagy&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Frontend&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="vi"&gt;@pagy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pagy&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:created_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;turbo_stream&lt;/span&gt;
      &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Straight forward Turbo: we respond with ‚Äúturbo_stream‚Äù format, or with html (template at the top in this post). Let‚Äôs show the turbo_stream template:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexturbostreamslim-turbo-stream-response"&gt;
  &lt;/a&gt;
  index.turbo_stream.slim - Turbo Stream response
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight slim"&gt;&lt;code&gt;&lt;span class="nt"&gt;turbo&lt;/span&gt;-stream&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"append"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"posts"&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;
    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'posts/post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;collection: &lt;/span&gt;&lt;span class="vi"&gt;@posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;formats: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:html&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nt"&gt;turbo&lt;/span&gt;-stream&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"update"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"pagination"&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;
    &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pagy_bootstrap_nav&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@pagy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We &lt;strong&gt;append&lt;/strong&gt; this page‚Äôs posts to the div with id=posts&lt;/li&gt;
&lt;li&gt;We &lt;strong&gt;replace&lt;/strong&gt; the pagination completely to reflect the new page&lt;/li&gt;
&lt;li&gt;Important to switch the format to html to get our ‚Äòpost‚Äô partial, don‚Äôt know &lt;a href="https://github.com/hotwired/turbo-rails/issues/65"&gt;if intended or bug&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That‚Äôs it! Because the scroll area will be always on the bottom, it will trigger over and over, Stimulus will pick out the current next page‚Äôs url from the pagination part, and Rails will respond with a Turbo stream that updates both the new posts and replace the pagination.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>stimulus</category>
    </item>
  </channel>
</rss>
