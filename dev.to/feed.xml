<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I Design, You Build! - Frontend Challenge #3</title>
      <author>Zernonia</author>
      <pubDate>Thu, 14 Oct 2021 02:18:13 +0000</pubDate>
      <link>https://dev.to/zernonia/i-design-you-build-frontend-challenge-3-gda</link>
      <guid>https://dev.to/zernonia/i-design-you-build-frontend-challenge-3-gda</guid>
      <description>&lt;h2&gt;
  &lt;a href="#appreciation"&gt;
  &lt;/a&gt;
  Appreciation
&lt;/h2&gt;

&lt;p&gt;What an overwhelming response from the first two challenges! I know I said it before, but I really enjoy seeing every submission, and appreciate every feedback given. If you haven't give the challenge a try, I &lt;strong&gt;strongly encourage&lt;/strong&gt; you to join us in this fun challenge! ü§©‚ú®&lt;/p&gt;

&lt;p&gt;I know everyone is in different level of HTML/CSS/Javascript, but don't worry, I will try to mix in different difficulties in the coming challenge, so stay tuned! üîî&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#challenge"&gt;
  &lt;/a&gt;
  Challenge
&lt;/h2&gt;

&lt;p&gt;There's a few 1 pager (or should I say 1 section üòÜ) design previously, how about let's make a Homepage for a Modern Interior Furniture Store?&lt;/p&gt;

&lt;p&gt;So, in this challenge, we will be creating a &lt;strong&gt;minimalistic E-commerce Website&lt;/strong&gt; with the touch of modern UI. Create a homepage following the design. Fulfill Target and/or Extra below:&lt;/p&gt;

&lt;p&gt;Target:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üéØ Target : User can see the similar design&lt;/li&gt;
&lt;li&gt;üéØ Target : Responsive design&lt;/li&gt;
&lt;li&gt;üéØ Target : Filter products&lt;/li&gt;
&lt;li&gt;üéØ Target : Multiple showcase (use arrow button to navigate)&lt;/li&gt;
&lt;li&gt;üéØ Target : On mobile, when I select the hamburger menu, I can see a navigation (use your own creativity)&lt;/li&gt;
&lt;li&gt;üéØ Target : On mobile, I can slide the products to left-right.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üåü Extra : Add animation to the filtering&lt;/li&gt;
&lt;li&gt;üåü Extra : Add animation when scrolling down the page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üìÉ Icon : &lt;a href="https://icones.js.org/collection/all"&gt;https://icones.js.org/collection/all&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìÉ Hosting: &lt;a href="https://vercel.com/"&gt;https://vercel.com/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ö† It will defeat the purpose of learning if you just copy and paste someone else's answer üò≠!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#start-coding"&gt;
  &lt;/a&gt;
  Start Coding!
&lt;/h2&gt;

&lt;p&gt;If you are ready to take on the challenge, then&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Help üíñ this design on &lt;a href="https://dribbble.com/shots/16649336-SHPX-Modern-Interior-Furniture-Store-Design"&gt;Dribbble&lt;/a&gt;, and follow me! Please... üò≥&lt;/li&gt;
&lt;li&gt;Bookmark this post so that you can submit it easier.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Right-click&lt;/strong&gt; &lt;a href="https://www.figma.com/file/e7u4jp5OqyHybDZzRCTMvi/SHPX?node-id=0%3A1"&gt;here&lt;/a&gt; and open &lt;strong&gt;Open link in a New Tab&lt;/strong&gt; to see the Figma Design.&lt;/li&gt;
&lt;li&gt;Enjoy coding! ü§©&lt;/li&gt;
&lt;li&gt;Come back to submit!&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;All the &lt;strong&gt;images&lt;/strong&gt; and &lt;strong&gt;assets&lt;/strong&gt; are free to use, and can be exported from the Figma Design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/file/e7u4jp5OqyHybDZzRCTMvi/SHPX?node-id=0%3A1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kih-yIBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwacxb8wvrum5zy2swxm.png" alt="Zernonia Frontend Challenge #3"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#submission"&gt;
  &lt;/a&gt;
  Submission
&lt;/h2&gt;

&lt;p&gt;Once you've completed, come back to this post, and submit your solution using the following &lt;code&gt;template&lt;/code&gt; in the comment section. You are encouraged to &lt;strong&gt;comment&lt;/strong&gt; and &lt;strong&gt;upvotes&lt;/strong&gt; other's answer!&lt;/p&gt;

&lt;p&gt;Thank you!üíò&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Feedback: This is awesome!

Demo: &amp;lt;url&amp;gt;
Github: &amp;lt;url&amp;gt;
Tech-Stack: Vue, TailwindCSS
Learning Outcome: 
  1. 
  2.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;I share these design freely so that anyone who wanted to practice or challenge Web design be able to do so without paying other platform (&lt;em&gt;ahem) to get their **Figma Design&lt;/em&gt;*üé® file. &lt;/p&gt;

&lt;p&gt;You are free to use the Design you've created in your portfolio. No copyright claims or anything.&lt;/p&gt;

&lt;p&gt;But if you are loving my work, you are most welcomed to follow me on &lt;code&gt;Dev.to&lt;/code&gt; and &lt;a href="https://twitter.com/zernonia"&gt;Twitter&lt;/a&gt; üòÑ&lt;/p&gt;

&lt;p&gt;Also, check out my own &lt;a href="https://zernonia.com"&gt;Website&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-your-time-and-attention-hope-youll-enjoy"&gt;
  &lt;/a&gt;
  Thank you for your time and attention! Hope you'll enjoy!
&lt;/h3&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>idesignyoubuild</category>
    </item>
    <item>
      <title>Props in react </title>
      <author>Lupita Rivera</author>
      <pubDate>Thu, 14 Oct 2021 02:01:18 +0000</pubDate>
      <link>https://dev.to/lupitalee/props-in-react-1ogp</link>
      <guid>https://dev.to/lupitalee/props-in-react-1ogp</guid>
      <description>&lt;p&gt;This short blog post will attempt to clearly summarize the concept of props in a way that the newest of programming students can understand.&lt;/p&gt;

&lt;p&gt;Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called ‚Äúprops‚Äù).&lt;br&gt;
props(stands for properties)and return React elements describing what should appear on the screen.&lt;/p&gt;

&lt;p&gt;Props can be strings, objects, arrays or functions&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jsXxbnYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghsf5tzjnnukc23k8ya4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jsXxbnYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghsf5tzjnnukc23k8ya4.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;following the &lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;React Docs&lt;/a&gt; Props are Read-Only, immutable and the Component cannot change its own props. &lt;br&gt;
They are also able to be passed between your components, generally from parent to child.&lt;/p&gt;

&lt;p&gt;on the other hand you can pass props from CHILD component back up to the PARENT component. how you might ask ?&lt;/p&gt;

&lt;p&gt;We have 2 components:&lt;br&gt;
Parent: App.js&lt;br&gt;
Child: Child.js&lt;/p&gt;

&lt;p&gt;Use the following steps:&lt;br&gt;
-Create a function inside your parent component, pass it a parameter and log that parameter using console.log .&lt;/p&gt;

&lt;p&gt;-Pass the function name as props into your child component render.&lt;/p&gt;

&lt;p&gt;-Invoke the function from props inside your child component.&lt;/p&gt;

&lt;p&gt;-Pass in your data as an argument inside the invocation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parent-component"&gt;
  &lt;/a&gt;
  Parent Component
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--maYodH7e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwvmx2gc7k1rh5uq7p8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--maYodH7e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwvmx2gc7k1rh5uq7p8u.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#child-component"&gt;
  &lt;/a&gt;
  Child Component
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rMF4rQNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu7u4t2deg019pog8bsl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rMF4rQNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu7u4t2deg019pog8bsl.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading ‚Äî I hope this provided some good value&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Easiest Way to Send Emails With JavaScript by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Thu, 14 Oct 2021 01:56:41 +0000</pubDate>
      <link>https://dev.to/silvenleaf/easiest-way-to-send-emails-with-javascript-by-silvenleaf-252b</link>
      <guid>https://dev.to/silvenleaf/easiest-way-to-send-emails-with-javascript-by-silvenleaf-252b</guid>
      <description>&lt;p&gt;Ahoy there Sweetlings! Let's send some emails! But in a SUPER FUN Way!! For a Sweeter fun, let's add TypeScript as well! Even if you don't know it, don't worry, we will be going from Level 0!! As long as you know the basics for JavaScript, hop on!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-0-begin-the-project"&gt;
  &lt;/a&gt;
  Step 0: Begin the Project
&lt;/h2&gt;

&lt;p&gt;Create a folder and open it in your favorite editor (mine VS Code). Then type this command on your project terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a package.json file to track all the packages that you'd download and so on)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-step-adding-typescript"&gt;
  &lt;/a&gt;
  Bonus Step: Adding TypeScript
&lt;/h2&gt;

&lt;p&gt;For those who are a bit lost on how to set up the environment and run the TypeScript files, check this one out &lt;strong&gt;&lt;a href="https://dev.to/silvenleaf/typescript-setup-by-silvenleaf-1aen"&gt;TypeScript SETUP by SilvenLEAF&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well anyway, in short (for details, checkout the above link)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install typescript
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i typescript 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;init our tsconfig
(make sure you already have typescript globally installed, if not type &lt;strong&gt;npm i -g typescript&lt;/strong&gt;. And don't get it confused with the previous normal &lt;strong&gt;npm i typescript&lt;/strong&gt; command)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a &lt;strong&gt;.tsconfig&lt;/strong&gt; file)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install &lt;strong&gt;ts-node&lt;/strong&gt; and &lt;strong&gt;ts-node-dev&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i ts-node ts-node-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's create an &lt;strong&gt;app.ts&lt;/strong&gt; file and send some freaking emails!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-sending-emails"&gt;
  &lt;/a&gt;
  Step 1: Sending Emails
&lt;/h2&gt;

&lt;p&gt;First install the required packages with this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i nodemailer @types/nodemailer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(By the way, &lt;strong&gt;"npm i X"&lt;/strong&gt; is the short version for &lt;strong&gt;"npm install X"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Now let's send some freaking emails! Inside the &lt;strong&gt;app.ts&lt;/strong&gt; file, write these&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodemailer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;// let's create the transport (it's the postman/delivery-man who will send your emails)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myTransport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gmail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_GMAIL_ACCOUNT@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your gmail account which you'll use to send the emails&lt;/span&gt;
    &lt;span class="na"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_GMAIL_PASSWORD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// the password for your gmail account&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;






&lt;span class="c1"&gt;// defining the content of the email (I mean, what will be on the email)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mailOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&amp;lt;YOUR_GMAIL_ACCOUNT@gmail.com&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// from where the email is going, you can type anything or any name here, it'll be displayed as the sender to the person who receives it&lt;/span&gt;
  &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user1@gmail.com,user2@crazy.com,user3@anything.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// the email address(es) where you want to send the emails to. If it's more than one person/email, seperate them with a comma, like here how I seperated the 3 users with a comma&lt;/span&gt;

  &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sending Some Freaking Email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your email subject (optional but better to have it)&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hello there my sweetling! Let's send some freaking emails!`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your email body in plain text format (optional) &lt;/span&gt;

  &lt;span class="c1"&gt;// your email body in html format (optional)&lt;/span&gt;
  &lt;span class="c1"&gt;// if you want to send a customly and amazingly designed html body&lt;/span&gt;
  &lt;span class="c1"&gt;// instead of a boring plain text, then use this "html" property&lt;/span&gt;
  &lt;span class="c1"&gt;// instead of "text" property&lt;/span&gt;
  &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h1 style="color: red;text-align:center"&amp;gt;Hello there my sweetling!&amp;lt;/h1&amp;gt;
         &amp;lt;p style="text-align:center"&amp;gt;Let's send some &amp;lt;span style="color: red"&amp;gt;freaking&amp;lt;/span&amp;gt; emails!&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;






&lt;span class="c1"&gt;// sending the email&lt;/span&gt;
&lt;span class="nx"&gt;myTransport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Email is failed to send!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Email is successfully sent!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yohoooo! We just created the email sender file. Now, let's run it. Type this following command in your terminal to run this typescript file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ts-node app.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It's the TypeScript version of &lt;strong&gt;node app.js&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Yahoooo! We just send a freaking email to some freaking users!! Yay! But really? You must have seen a crazy error like this right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oAAvUc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y4qey6y8gmw7qhihp5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oAAvUc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y4qey6y8gmw7qhihp5u.png" alt="Failed to send"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because Google blocked that request! So in order to make it work, we need to allow it first to send emails from that email account. How? Google &lt;strong&gt;"less secure apps"&lt;/strong&gt; and open the first link.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fs6zE-BY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71g2jait16s2ols1me5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fs6zE-BY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71g2jait16s2ols1me5f.png" alt="Google Less Secure Apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you'll see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ohXk3e3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7yxu67f0h5cm01tco7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ohXk3e3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7yxu67f0h5cm01tco7t.png" alt="Less Secure Apps"&gt;&lt;/a&gt;&lt;br&gt;
Make the toggle button on (Allow less secure apps: ON)&lt;/p&gt;

&lt;p&gt;Now run that email sender file once again! And HURRAH!!! You just sent a freaking email!! Congrats Sweetling!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  1. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  2. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  3. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-how-to-automate-anything"&gt;
  &lt;/a&gt;
  4. How to automate anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-sequelize-hooks"&gt;
  &lt;/a&gt;
  5. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-automate-creating-db-schemas"&gt;
  &lt;/a&gt;
  6. Automate creating DB Schemas
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>TypeScript SETUP by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Thu, 14 Oct 2021 01:56:29 +0000</pubDate>
      <link>https://dev.to/silvenleaf/typescript-setup-by-silvenleaf-1aen</link>
      <guid>https://dev.to/silvenleaf/typescript-setup-by-silvenleaf-1aen</guid>
      <description>&lt;p&gt;Ahoy there! Let's set up the environment for playing with TypeScript and learn how to run those TypeScript files! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-0-install-typescript"&gt;
  &lt;/a&gt;
  Step 0: Install TypeScript
&lt;/h1&gt;

&lt;p&gt;First let's install TypeScript globally if you don't have it yet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(By the way, &lt;strong&gt;"npm i X"&lt;/strong&gt; is the short-hand for &lt;strong&gt;"npm install X"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Now, let's create your project folder and open it in your beloved editor (mine VS Code)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-init-tsconfig"&gt;
  &lt;/a&gt;
  Step 1: init tsconfig
&lt;/h2&gt;

&lt;p&gt;Let's init the tsconfig file, type the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(This &lt;strong&gt;"tsc"&lt;/strong&gt; command will only work if you have typescript globally installed)&lt;/p&gt;

&lt;p&gt;It'll create a &lt;strong&gt;"tsconfig.json"&lt;/strong&gt; file. Now, what does it do you ask? TypeScript is the superset of JavaScript and how we want to compile it will be defined by this tsconfig file. The best part is, it'll give you &lt;strong&gt;linting&lt;/strong&gt; (the red lines whenever there is an error in your code or logic) and also explicitly tell you what mistakes you are doing and in some cases possible solutions as well. Amazing right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-run-typescript-files"&gt;
  &lt;/a&gt;
  Step 2: run TypeScript files
&lt;/h2&gt;

&lt;p&gt;Now you created a TypeScript file, wrote your code, for example an &lt;strong&gt;app.ts&lt;/strong&gt; file with this content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;console.log&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello there TypeScript! You are AMAIZING!!'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now how to run this file? If it were a JavaScript file, like app.js, you might run &lt;strong&gt;"node app.js"&lt;/strong&gt; or &lt;strong&gt;"nodemon app.js"&lt;/strong&gt;, right? So let's find the TypeScript versions for those!&lt;/p&gt;

&lt;p&gt;Let's install the packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i ts-node ts-node-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;"ts-node"&lt;/strong&gt; is the TypeScript version for &lt;strong&gt;"node"&lt;/strong&gt; and &lt;strong&gt;"ts-node-dev"&lt;/strong&gt; is the TypeScript version for &lt;strong&gt;"nodemon"&lt;/strong&gt;. So to run the TypeScript file use either of these commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ts-node app.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Which is basically &lt;strong&gt;"node app.js"&lt;/strong&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ts-node-dev app.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Which is basically &lt;strong&gt;"nodemon app.js"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;YIPPIE!! You just set up the environment for coding in TypeScript and also learnt how to run those FILES!! YOOOHOOOO!!! But now what?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  1. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  2. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  3. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-how-to-automate-anything"&gt;
  &lt;/a&gt;
  4. How to automate anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-sequelize-hooks"&gt;
  &lt;/a&gt;
  5. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-automate-creating-db-schemas"&gt;
  &lt;/a&gt;
  6. Automate creating DB Schemas
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>node</category>
      <category>express</category>
    </item>
    <item>
      <title>Kubernetes Best Practices Validation in Azure Pipelines with Datree</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Thu, 14 Oct 2021 01:04:25 +0000</pubDate>
      <link>https://dev.to/n3wt0n/kubernetes-best-practices-validation-in-azure-pipelines-with-datree-33i3</link>
      <guid>https://dev.to/n3wt0n/kubernetes-best-practices-validation-in-azure-pipelines-with-datree-33i3</guid>
      <description>&lt;p&gt;In this third article dedicated to &lt;strong&gt;&lt;em&gt;Datree&lt;/em&gt;&lt;/strong&gt; we will explore how to use the tool with Azure Pipelines to validate and secure our Kubernetes deployments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aM7EVflmEt4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/aM7EVflmEt4"&gt;Link to the video: https://youtu.be/aM7EVflmEt4&lt;/a&gt;. The part about &lt;strong&gt;&lt;em&gt;Azure Pipelines&lt;/em&gt;&lt;/strong&gt; starts at minute &lt;a href="https://youtu.be/aM7EVflmEt4?t=993"&gt;16:33&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The Basics
&lt;/h3&gt;

&lt;p&gt;While I will not cover how to install and use the service in general (&lt;em&gt;check the video and the first article of this series if you want to know more about it&lt;/em&gt;), there are few things worth remembering and that will be useful later on in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Datree is a &lt;strong&gt;CLI&lt;/strong&gt; tool, which works on Linux, MacOS and Windows&lt;/li&gt;
&lt;li&gt;The Centralized Policy Management uses a &lt;strong&gt;Token&lt;/strong&gt; as &lt;em&gt;connection&lt;/em&gt; between the scans and the account&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#datree-in-azure-pipelines"&gt;
  &lt;/a&gt;
  Datree in Azure Pipelines
&lt;/h3&gt;

&lt;p&gt;Alright, let's do this. First thing we have to do, as we would in a local environment, is to &lt;strong&gt;install the CLI&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;curl https://get.datree.io | /bin/bash&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Install&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Datree'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case the pipeline is running on Linux, so I can use the bash script for installing it.&lt;/p&gt;

&lt;p&gt;This step will take only few seconds to execute.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is necessary if you are using the &lt;em&gt;Microsoft Hosted Agents&lt;/em&gt;. If you are instead on &lt;em&gt;Self-hosted Agents&lt;/em&gt; you can install the CLI directly on the agent machine so you can skip this step. However, you'd need to manually take care of updating the CLI&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we can &lt;strong&gt;invoke the validation&lt;/strong&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;datree test ~/.datree/k8s-demo.yaml&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;DATREE_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$(DATREE_TOKEN)&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;datree&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;scan'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, nothing different from what we would normally do.&lt;/p&gt;

&lt;p&gt;Since we don't have access to the config file in our CI environment, we need to &lt;strong&gt;pass the Token as environment variable&lt;/strong&gt;. Best practice is to save it as a protected variable in Pipelines, and retrieve it using &lt;code&gt;$(YOUR_SECRET_NAME)&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the example above the Token is passed as environment variable directly in the task to minimize exposure. If you have multiple scans in the same workflow, you can also add it as job, stage, or pipeline environment variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this is basically all you need.&lt;/p&gt;

&lt;p&gt;So the &lt;strong&gt;full pipeline&lt;/strong&gt; will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Pipeline to show Datree scan&lt;/span&gt;

&lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;curl https://get.datree.io | /bin/bash&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Install&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Datree'&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;datree test ~/.datree/k8s-demo.yaml&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;DATREE_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$(DATREE_TOKEN)&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;datree&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;scan'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course you can also integrate this into your own CI or PR validation pipelines rather than keeping it separate if you wish so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#execution-and-results"&gt;
  &lt;/a&gt;
  Execution and Results
&lt;/h3&gt;

&lt;p&gt;First thing to notice is that, as Ive said before, the &lt;strong&gt;installation step is very quick&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWTAC7nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jln3krt0kink37mfs8ye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWTAC7nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jln3krt0kink37mfs8ye.png" alt="Installation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is why it is probably a good idea to leave it there even on Self-hosted agents so you don't have to worry about updating it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6rL3wqKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju4vviy66ne9uiupxmt2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6rL3wqKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju4vviy66ne9uiupxmt2.png" alt="Execution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the validation scan is also very quick.&lt;/p&gt;

&lt;p&gt;Second thing to notice is that by design &lt;strong&gt;if a validation fails it will break the build/run&lt;/strong&gt;. This is to ensure the enforcement of the policies and best practices.&lt;/p&gt;

&lt;p&gt;Finally, let's take a look at the results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1cS0StW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt7fy319ele9srkhlkqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1cS0StW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt7fy319ele9srkhlkqv.png" alt="Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;strong&gt;output is exactly the same&lt;/strong&gt; as when executing the CLI on any local environment, or anywhere else for what batters, keeping the experience very consistent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#offer"&gt;
  &lt;/a&gt;
  Offer
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Datree is free&lt;/strong&gt; to use up to 1000 scans per month, and you can pay for more scans and enhanced support. However...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FKp3WlAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d21dd4pybgm67x8js18f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKp3WlAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d21dd4pybgm67x8js18f.png" alt="A Month for Free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;You can get 1 month of the Premium plan for FREE is you use this link&lt;/em&gt;&lt;/strong&gt;: &lt;a href="https://app.datree.io/?utm_source=coder-dave&amp;amp;medium=youtube"&gt;https://app.datree.io/?utm_source=coder-dave&amp;amp;medium=youtube&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;So, what do you think about Datree? Is it something you will adopt as part of your workflow? Let me know in the comment section below, I'd really like to know it.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/4Oa5HneTuKs"&gt;this video&lt;/a&gt; in which show you how to deploy to Kubernetes in Azure Pipelines starting from scratch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üìß &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aM7EVflmEt4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>azuredevops</category>
      <category>kubernetes</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Cannot read property 'jwtoken' of undefined</title>
      <author>SuvamRay</author>
      <pubDate>Thu, 14 Oct 2021 00:42:00 +0000</pubDate>
      <link>https://dev.to/suvamray/cannot-read-property-jwtoken-of-undefined-jik</link>
      <guid>https://dev.to/suvamray/cannot-read-property-jwtoken-of-undefined-jik</guid>
      <description>&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/69563747/cannot-read-property-jwtoken-of-undefined" rel="noopener noreferrer"&gt;
               Cannot read property 'jwtoken' of undefined
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;Oct 14 '21&lt;/span&gt;
            &lt;span&gt;Comments: 1&lt;/span&gt;
            &lt;span&gt;Answers: 0&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/69563747/cannot-read-property-jwtoken-of-undefined" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          0
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;p&gt;here I generate the token at backend in express
..............&lt;/p&gt;
&lt;div class="snippet" data-lang="js"&gt;
&lt;div class="snippet-code"&gt;
&lt;pre class="snippet-code-js lang-js prettyprint-override"&gt;&lt;code&gt;router.post("/login",async(req,res)=&amp;gt;{
    const {email,password}=req.body;
    if(!email || !password){
        return res.status(401).send({error:"please filled the data properly"});
    }
    try {
        const loginUser=await User.findOne({email:email});
        if(!loginUser){
            return res.status(400).send({error:"not found"});
        }
        const isMatch = await bcrypt.compare(password,loginUser.password);    
        if(isMatch){
            const token=await loginUser.generateToken();
            res.cookie("jwtoken",token,{
                expires:new Date(Date.now()+15000000),
                httpOnly:true,
                //secure:true  //it&lt;/code&gt;&lt;/pre&gt;‚Ä¶&lt;/div&gt;
&lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
    
      &lt;a href="https://stackoverflow.com/questions/69563747/cannot-read-property-jwtoken-of-undefined" rel="noopener noreferrer"&gt;Open Full Question&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


</description>
    </item>
    <item>
      <title>what are arrow functions</title>
      <author>Lupita Rivera</author>
      <pubDate>Thu, 14 Oct 2021 00:13:35 +0000</pubDate>
      <link>https://dev.to/lupitalee/what-are-arrow-functions-15me</link>
      <guid>https://dev.to/lupitalee/what-are-arrow-functions-15me</guid>
      <description>&lt;p&gt;before we jump into what is an arrow function lets talk about functions in JavaScript. before ES6 every time we wrote a function we use the word Function Keyword,&lt;/p&gt;

&lt;p&gt;ex,&lt;br&gt;
&lt;code&gt;const divide = function (x,y){&lt;br&gt;
return x/y;&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;we could had an Anonymous function&lt;br&gt;
or a name function &lt;/p&gt;

&lt;p&gt;ex,&lt;br&gt;
&lt;code&gt;function divide(){&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;but we still using the &lt;code&gt;function&lt;/code&gt; keyword. and that could get kinda lengthy in our code specially when we are using more complex code and always passing in the function keyword.&lt;/p&gt;

&lt;p&gt;so this is where arrow functions come in.&lt;/p&gt;

&lt;p&gt;Arrow function is one of the features introduced in the ES6 version of JavaScript. It allows you to create functions in a cleaner way compared to regular function expression.&lt;/p&gt;

&lt;p&gt;but theres also on some situations they do behave differently. we will talk about that as we go but for now what this really means is that makes the function shorter in a way of writing a function.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  SYNTAX
&lt;/h2&gt;

&lt;p&gt;ex, from the divide function from above lets write in as an arrow function &lt;/p&gt;

&lt;p&gt;&lt;code&gt;const divide = (x,y) =&amp;gt; {&lt;br&gt;
return x/y;&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-return"&gt;
  &lt;/a&gt;
  Implicit Return
&lt;/h3&gt;

&lt;p&gt;we can also write as an implicit return  that means i wont need the return keyword and we get rid of the curly braces and replace it with  parenthesis &lt;/p&gt;

&lt;p&gt;ex,&lt;br&gt;
&lt;code&gt;cont divide = (x,y) =&amp;gt; (x / y)&lt;/code&gt; whatever expression is inside of the parenthesis will be automatically returned, it's an explicit return. &lt;/p&gt;

&lt;p&gt;but we can also write it even shorter &lt;code&gt;cont divide = (x,y) =&amp;gt; x / y&lt;/code&gt;  by taking out the parenthesis. you can only do this if you have a single expression, you cannot pass a &lt;code&gt;if else statement&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;but this is not the only difference between arrow functions and regular functions. if we go to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-differences"&gt;
  &lt;/a&gt;
  other differences:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#use-of-this-keyword"&gt;
  &lt;/a&gt;
  Use of this keyword
&lt;/h3&gt;

&lt;p&gt;unlike Regular functions, arrow function does not have their own "this" keyword. like a regular function expression does.&lt;br&gt;
the keyword this is going to change is going to be set in a given function depending on how the function is called.&lt;/p&gt;

&lt;p&gt;but with an arrow function the keyword this is not going to change relative to the context or the parent that the function is define in.&lt;/p&gt;

&lt;p&gt;ex, &lt;/p&gt;

&lt;p&gt;&lt;code&gt;const person ={&lt;br&gt;
    name: "Lupita",&lt;br&gt;
    sayHi: function () {&lt;br&gt;
console.log(this.name, "says hi!")&lt;br&gt;
    }&lt;br&gt;
}&lt;/code&gt;&lt;br&gt;
&lt;code&gt;person.sayHi()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;okay when i call person.sayHi the value of &lt;code&gt;this&lt;/code&gt; is going to be determined by how I'm calling it, I'm calling it sayHi() on person the object person will be the value of this - this.name should be Lupita. so when i run the code i get &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Lupita says hi!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However if i use an arrow function instead &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDEF-8sL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q45tn95d4o8d2kkc01zf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDEF-8sL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q45tn95d4o8d2kkc01zf.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we just get &lt;code&gt;says hi!&lt;/code&gt; so whats going on here is that the value of this is not being changed , not being set when im calling person.sayHi() like a normal function would. if we look at just &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const person ={&lt;br&gt;
    name: "Lupita",&lt;br&gt;
    sayHi:()=&amp;gt; {&lt;br&gt;
console.log(this)&lt;br&gt;
console.log(this.name, "says hi!")&lt;br&gt;
    }&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8i_Jqb8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrq3ax02h4bhou1kszm6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8i_Jqb8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrq3ax02h4bhou1kszm6.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we see here this is just set to the window objet, just as if this function where defined on its own no inside of the person object. and it doesn't matter how i call that function &lt;br&gt;
if its an arrow function the value of this is not going to be set to that person object unless i where to bind it. but it's own an arrow function does not  get a new or diff value for this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-a-new-keyword"&gt;
  &lt;/a&gt;
  Using a new keyword
&lt;/h2&gt;

&lt;p&gt;Regular functions created using function declarations or expressions are constructible and callable. Regular functions are constructible; they can be called using the new keyword.&lt;/p&gt;

&lt;p&gt;However, the arrow functions are only callable and not constructible, i.e., arrow functions can never be used as constructor functions.&lt;/p&gt;

&lt;p&gt;ex,&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#regular-function"&gt;
  &lt;/a&gt;
  regular function
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clWPKJRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ljdzd91c360k4nr1jsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clWPKJRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ljdzd91c360k4nr1jsv.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as you can see it returns 5, &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#arrow-function"&gt;
  &lt;/a&gt;
  Arrow function
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDkcwNhJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nufeeoy1bsi3s1uqzdm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDkcwNhJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nufeeoy1bsi3s1uqzdm4.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this is basically Arrow functions. If you want further reference, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;MDN&lt;/a&gt;&lt;br&gt;
is a good place to check.&lt;/p&gt;

&lt;p&gt;Thank you for reading :)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Creating through a crisis</title>
      <author>Jason Leow ~ golifelog.com</author>
      <pubDate>Wed, 13 Oct 2021 23:09:52 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/creating-through-a-crisis-228o</link>
      <guid>https://dev.to/jasonleowsg/creating-through-a-crisis-228o</guid>
      <description>&lt;h3&gt;
  &lt;a href="#youre-a-maker-right-why-dont-you-make-something"&gt;
  &lt;/a&gt;
  &lt;em&gt;You‚Äôre a maker, right? Why don‚Äôt you make something?&lt;/em&gt;
&lt;/h3&gt;




&lt;p&gt;There‚Äôs a scene in Iron Man 3 where Tony Stark was having a panic attack from the work as a superhero, and he called Harley, the kid who sheltered him while he was hiding from his enemies. Harley goes console Stark, and said, ‚ÄúYou‚Äôre a mechanic, right? Why don‚Äôt you build something?‚Äù&lt;/p&gt;

&lt;p&gt;That line really stuck with me. Floated around in my subconscious. &lt;/p&gt;

&lt;p&gt;Then it appeared as a mini-epiphany. I‚Äôm not sure when this happened, but there‚Äôs a repeating pattern that I observed about how I cope with crisis. And it‚Äôs about building something.&lt;/p&gt;

&lt;p&gt;First it was a chronic medical condition in 2018 (which I had since recovered from, thankfully). While I was seeking treatment, I wasn‚Äôt taking on paid projects then, but I continued to work. In fact, it was that same time that I tried out the 12 startups in 12 months challenge. I called it &lt;a href="https://twitter.com/jasonleowsg/status/970890710751723521"&gt;#1mvp1month&lt;/a&gt;. I didn‚Äôt end up making 12 products, but was close ‚Äì 8 products. That was a strange experience, because on one hand, I was going through a low period in terms of health and mental wellbeing. But yet I was creating like nobody‚Äôs business. &lt;/p&gt;

&lt;p&gt;Then in 2019, in a bid to get my health back, I turned to keto and intermittent fasting. Hard as f**k, trying to stop eating carbs. But I did. In the process of changing my diet and my health, I made a product called &lt;a href="https://ketolistsingapore.com"&gt;Keto List Singapore&lt;/a&gt; ‚Äì a directory of keto resources and links. That helped me in a big way, and now it‚Äôs a little side business.&lt;/p&gt;

&lt;p&gt;Then, COVID-19 came. Complete topsy-turvy of life. I‚Äôm safe at home, but also stuck at home. For someone who enjoys being outside, what can I do to cope? I create. I made products &lt;em&gt;again&lt;/em&gt; - websites, apps, software to help people in the pandemic. Like a man possessed, I kept making. In the end I made a total of 11 products! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some examples of the 11 products I made:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sheet2site.com/s/dabaodash/"&gt;Dabao Dash&lt;/a&gt; - a self-help community board of offers and requests, matching hawkers and small F&amp;amp;Bs with delivery riders affected&lt;br&gt;
&lt;a href="https://sheet2site.com/s/majulahbelanja/"&gt;Majulah Belanja&lt;/a&gt; - an offers/requests board for to help match donors with employers and migrant workers.&lt;br&gt;
&lt;a href="https://visualaid.sg"&gt;VisualAid&lt;/a&gt; - translated illustrations to help healthcare workers communicate better with migrant worker patients.&lt;br&gt;
&lt;a href="https://gogranthunt.com/"&gt;Grant Hunt&lt;/a&gt; - A chat bot to find grants for charities and non-profits in Singapore.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I realised that the intensity of my creating is directly proportional to how challenged I am in a crisis, or inversely proportional to how low I feel. I guess I needed something to balance it out. Creating always felt energizing and uplifting. It gives life, right when I need to feel more alive. It‚Äôs like I can almost hear Harley say that to me over the phone (though I‚Äôm under no illusions of being a superhero):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ÄúYou‚Äôre a maker, right? Why don‚Äôt you make something?‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Damned hell I will.&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>covid19</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>Building a dropdown menu using Alpine.js</title>
      <author>Michael Burrows</author>
      <pubDate>Wed, 13 Oct 2021 22:23:35 +0000</pubDate>
      <link>https://dev.to/michaelburrows/building-a-dropdown-menu-using-alpinejs-47o3</link>
      <guid>https://dev.to/michaelburrows/building-a-dropdown-menu-using-alpinejs-47o3</guid>
      <description>&lt;p&gt;&lt;a href="https://alpinejs.dev/"&gt;AlpineJS&lt;/a&gt; is a small JavaScript framework for composing behavior directly in HTML markup. In this tutorial I‚Äôll show you how the framework can be used to build a dropdown menu component. If you‚Äôve never worked with Alpine before this will serve as a simple introduction to the framework.&lt;/p&gt;

&lt;p&gt;For the purposes of this tutorial you can load the framework via CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Alpine loaded create a wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the following attributes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;x-data=&lt;/span&gt;&lt;span class="s"&gt;"{ open: false }"&lt;/span&gt; &lt;span class="na"&gt;x-on:click.outside=&lt;/span&gt;&lt;span class="s"&gt;"open = false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  // ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;x-data&lt;/code&gt; defines a chunk of HTML as an Alpine component and provides data for that component to reference. &lt;code&gt;x-on:click.outside&lt;/code&gt; set‚Äôs the open data to false which will hide the dropdown when anywhere outside the component is clicked.&lt;/p&gt;

&lt;p&gt;Next inside the wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; add a button that‚Äôll trigger the dropdown‚Äôs visibility:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;x-on:click=&lt;/span&gt;&lt;span class="s"&gt;"open = !open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  My Account
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another &lt;code&gt;x-on:click&lt;/code&gt; this time we‚Äôre only tracking clicks directly on the button itself.&lt;/p&gt;

&lt;p&gt;Now for the dropdown menu which is an unordered list with a &lt;code&gt;x-show&lt;/code&gt; attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;x-show=&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Edit Profile&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Settings&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Log Out&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;        
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;open&lt;/code&gt; equals &lt;code&gt;true&lt;/code&gt; the &lt;code&gt;x-show&lt;/code&gt; attribute will change the visibility of the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element. At this point in the tutorial we have a basic functioning dropdown, let‚Äôs add a couple of finishing touches to improve the look and feel. First let‚Äôs add an icon that‚Äôll represent the state of the dropdown menu:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;x-on:click=&lt;/span&gt;&lt;span class="s"&gt;"open = !open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  My Account 
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{'rotated': open}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;raquo;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you view the source code after the button has been clicked you‚Äôll see the rotated class has been applied to the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qegb0q93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofi8dnqwbhgq417y1ffy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qegb0q93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofi8dnqwbhgq417y1ffy.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now apply some CSS to rotate the icon indicating the menu is open:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.rotated&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we‚Äôll add a transition so the opening and closing of the dropdown appears smoother:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;x-show=&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt; &lt;span class="na"&gt;x-transition.opacity&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 ...       
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That‚Äôs all for this tutorial. As you‚Äôve just seen by adding some simple Alpine attributes to HTML markup it relatively easy to create a functioning dropdown menu. With what you learnt in this tutorial you could also start building other UI elements with show/hide functionality and Alpine.js.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>alpinejs</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Improving Angular tests by enabling Angular testing module teardown</title>
      <author>Lars Gyrup Brink Nielsen</author>
      <pubDate>Wed, 13 Oct 2021 22:22:58 +0000</pubDate>
      <link>https://dev.to/this-is-angular/improving-angular-tests-by-enabling-angular-testing-module-teardown-38kh</link>
      <guid>https://dev.to/this-is-angular/improving-angular-tests-by-enabling-angular-testing-module-teardown-38kh</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/photos/dfOnZMEzI4Q"&gt;Marian Kroell&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;destroyAfterEach&lt;/code&gt; Angular testing module teardown option addresses several long-time issues when using the Angular testbed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The host element is not removed from the DOM until another component fixture is created&lt;/li&gt;
&lt;li&gt;Component styles are never removed from the DOM&lt;/li&gt;
&lt;li&gt;Application-wide services are never destroyed&lt;/li&gt;
&lt;li&gt;Feature-level services using the any provider scope are never destroyed&lt;/li&gt;
&lt;li&gt;Angular modules are never destroyed&lt;/li&gt;
&lt;li&gt;Components are destroyed 1 time less than the number of tests&lt;/li&gt;
&lt;li&gt;Component-level services are destroyed 1 time less than the number of tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The two first issues have the biggest impact when using Karma which runs the component tests in a browser.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Did you know?&lt;/strong&gt; Angular modules and services support hooking into the &lt;code&gt;OnDestroy&lt;/code&gt; lifecycle moment by implementing an &lt;code&gt;ngOnDestroy&lt;/code&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this guide, we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explore the &lt;code&gt;ModuleTeardownOptions#destroyAfterEach&lt;/code&gt; option for the Angular testbed&lt;/li&gt;
&lt;li&gt;List full Angular testing module teardown configurations for Karma and Jest for reference&lt;/li&gt;
&lt;li&gt;Examine how to opt in or opt out of Angular testing module teardown in a test suite or test case&lt;/li&gt;
&lt;li&gt;Discuss caveats and remaining issues with the Angular testing module&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#exploring-the-destroyaftereach-angular-testing-module-teardown-option"&gt;
  &lt;/a&gt;
  Exploring the destroyAfterEach Angular testing module teardown option
&lt;/h2&gt;

&lt;p&gt;Angular version 12.1 adds the &lt;code&gt;teardown&lt;/code&gt; option object &lt;a href="https://angular.io/api/core/testing/ModuleTeardownOptions"&gt;&lt;code&gt;ModuleTeardownOptions&lt;/code&gt;&lt;/a&gt; which can be passed to &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; for a test case or to &lt;code&gt;TestBed.initTestEnvironment&lt;/code&gt; as a global setting.&lt;/p&gt;

&lt;p&gt;We can enable the &lt;code&gt;destroyAfterEach&lt;/code&gt; option as part of the &lt;code&gt;teardown&lt;/code&gt; option object. This in turn enables the &lt;code&gt;rethrowErrors&lt;/code&gt; option which is not covered by this guide.&lt;/p&gt;

&lt;p&gt;In Angular versions 12.1 and 12.2, &lt;code&gt;ModuleTeardownOptions#destroyAfterEach&lt;/code&gt; has a default value of &lt;code&gt;false&lt;/code&gt;. In Angular version 13.0 and later, its default value is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;destroyAfterEach&lt;/code&gt; is enabled, the following happens after each test case or when testing module teardown is otherwise triggered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The host element is removed from the DOM&lt;/li&gt;
&lt;li&gt;Component styles are removed from the DOM&lt;/li&gt;
&lt;li&gt;Application-wide services are destroyed&lt;/li&gt;
&lt;li&gt;Feature-level services using the any provider scope are destroyed&lt;/li&gt;
&lt;li&gt;Angular modules are destroyed&lt;/li&gt;
&lt;li&gt;Components are destroyed&lt;/li&gt;
&lt;li&gt;Component-level services are destroyed&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Angular testing gotcha:&lt;/strong&gt; Platform-level services are never destroyed in Angular tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#angular-testing-teardown-triggers"&gt;
  &lt;/a&gt;
  Angular testing teardown triggers
&lt;/h3&gt;

&lt;p&gt;The following events trigger Angular testing teardown when &lt;code&gt;destroyAfterEach&lt;/code&gt; is enabled:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;TestBed.resetTestEnvironment&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TestBed.resetTestingModule&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;A test case finishes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, let's look at full configuration examples for the Karma and Jest test runners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enabling-angular-testing-module-teardown-in-karma"&gt;
  &lt;/a&gt;
  Enabling Angular testing module teardown in Karma
&lt;/h2&gt;

&lt;p&gt;Until Angular version 12.1 (inclusive) and in Angular 13.0 and later versions, a generated main Karma test file (&lt;code&gt;test.ts&lt;/code&gt;) looks as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This file is required by karma.conf.js and loads recursively all the .spec and framework files&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zone.js/dist/zone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zone.js/dist/zone-testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser-dynamic/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// First, initialize the Angular testing environment.&lt;/span&gt;
&lt;span class="nx"&gt;getTestBed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;initTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Then we find all the tests.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;spec&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;ts$/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// And load the modules.&lt;/span&gt;
&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
test.ts generated by Angular version 12.1 and 13.0





&lt;p&gt;Angular version 12.1 adds a 3rd parameter to &lt;code&gt;TestBed.initTestEnvironment&lt;/code&gt; as seen in the following snippet generated by Angular version 12.2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This file is required by karma.conf.js and loads recursively all the .spec and framework files&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zone.js/dist/zone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zone.js/dist/zone-testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser-dynamic/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// First, initialize the Angular testing environment.&lt;/span&gt;
&lt;span class="nx"&gt;getTestBed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;initTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// üëà&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Then we find all the tests.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;spec&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;ts$/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// And load the modules.&lt;/span&gt;
&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
test.ts generated by Angular version 12.2





&lt;p&gt;For reference, &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; also accepts a &lt;code&gt;teardown&lt;/code&gt; option in Angular 12.1 and later versions as seen in this snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configureTestingModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// üëà&lt;/span&gt;
  &lt;span class="c1"&gt;// (...)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Test suite setup enabling Angular testing module teardown





&lt;h2&gt;
  &lt;a href="#enabling-angular-testing-module-teardown-in-jest"&gt;
  &lt;/a&gt;
  Enabling Angular testing module teardown in Jest
&lt;/h2&gt;

&lt;p&gt;If our workspace or project is using Jest for unit tests, &lt;code&gt;test-setup.ts&lt;/code&gt; files probably look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jest-preset-angular/setup-jest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
test-setup.ts with Angular preset for Jest





&lt;p&gt;To enable Angular testing module teardown in Angular versions 12.1 and 12.2, use the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jest-preset-angular/setup-jest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser-dynamic/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;getTestBed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resetTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;getTestBed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;initTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// üëà&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
test-setup.ts for Jest with Angular testing module teardown





&lt;p&gt;The Angular preset for Jest already initializes the Angular testbed environment so we have to reset it before configuring and initializing the Angular testbed environment.&lt;/p&gt;

&lt;p&gt;With enabling Angular testing module teardown globally covered, let's move on to opting out of Angular testing module teardown.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disabling-angular-testing-module-teardown"&gt;
  &lt;/a&gt;
  Disabling Angular testing module teardown
&lt;/h2&gt;

&lt;p&gt;If our Angular tests break after enabling Angular testing module teardown, we can opt out globally or locally.&lt;/p&gt;

&lt;p&gt;We might want to opt out because various Angular testing libraries might break when &lt;code&gt;destroyAfterEach&lt;/code&gt; is enabled or they might not accept or specify this option.&lt;/p&gt;

&lt;p&gt;Use the following snippet to opt out of Angular testing module teardown in an entire test suite:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser-dynamic/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resetTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// üëà&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the following snippet to opt out of Angular testing module teardown in one or multiple test cases&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configureTestingModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// üëà&lt;/span&gt;
    &lt;span class="c1"&gt;// (...)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a component fixture has already been created, we must call &lt;code&gt;TestBed.resetTestingModule&lt;/code&gt; before &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, it's possible to opt out of Angular testing module teardown across our entire workspace by applying the optional Angular migration named &lt;code&gt;migration-v13-testbed-teardown&lt;/code&gt; using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;ng&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;angular/cli&lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="nx"&gt;13&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--migrate-only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;migration-v13-testbed-teardown&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When Angular testing module teardown is enabled by setting &lt;code&gt;ModuleTeardownOptions#destroyAfterEach&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, the Angular testbed manages resources between test case runs by triggering the &lt;code&gt;OnDestroy&lt;/code&gt; lifecycle moment for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application-level services&lt;/li&gt;
&lt;li&gt;Feature-level services&lt;/li&gt;
&lt;li&gt;Angular modules&lt;/li&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Component-level services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, the &lt;code&gt;ngOnDestroy&lt;/code&gt; hook of platform-level services is never triggered between tests.&lt;/p&gt;

&lt;p&gt;Host elements and component styles are removed from the DOM which is especially important when using Karma which runs tests in a browser.&lt;/p&gt;

&lt;p&gt;This all happens when &lt;code&gt;TestBed.resetTestEnvironment&lt;/code&gt; or &lt;code&gt;TestBed.resetTestingModule&lt;/code&gt; is called or at the latest when a test case finishes.&lt;/p&gt;

&lt;p&gt;We discussed how &lt;a href="https://angular.io/api/core/testing/ModuleTeardownOptions"&gt;&lt;code&gt;ModuleTeardownOptions&lt;/code&gt;&lt;/a&gt; were introduced by Angular version 12.1 but that schematics-generated values and default values changed in Angular versions 12.2 and 13.0 as seen in the following table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Angular version&lt;/th&gt;
&lt;th&gt;Default value of &lt;code&gt;destroyAfterEach&lt;/code&gt;
&lt;/th&gt;
&lt;th&gt;Schematics-generated value for &lt;code&gt;destroyAfterEach&lt;/code&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=12.0&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12.2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=13.0&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In the sections &lt;em&gt;Enabling Angular testing module teardown in Karma&lt;/em&gt; and &lt;em&gt;Enabling Angular testing module teardown in Jest&lt;/em&gt;, we referenced full sample global Angular testing module teardown configurations for both the Karma and Jest test runners.&lt;/p&gt;

&lt;p&gt;We learnt how we can opt out of Angular testing module teardown on a global level by calling &lt;code&gt;TestBed.resetTestEnvironment&lt;/code&gt; followed by &lt;code&gt;TestBed.initTestEnvironment&lt;/code&gt;, specifying the &lt;code&gt;teardown&lt;/code&gt; option with &lt;code&gt;destroyAfterEach&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We discussed how to opt out of Angular testing module teardown on one or more test cases by passing a &lt;code&gt;teardown&lt;/code&gt; option object with &lt;code&gt;destroyAfterEach&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;TestBed.configureTestinModule&lt;/code&gt;, optionally preceded by a call to &lt;code&gt;TestBed.resetTestingModule&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, we learnt how to apply the &lt;code&gt;migration-v13-testbed-teardown&lt;/code&gt; migration to opt out of Angular testing module teardown across our entire workspace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;Findings in this guide are based on the following Angular pull requests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular/pull/42566"&gt;feat(core): add opt-in test module teardown configuration #42566&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular/pull/43353"&gt;Enable test module teardown by default #43353&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wrote a few hundred tests to compare initialization and teardown behavior when &lt;code&gt;ModuleTeardownOptions#destroyAfterEach&lt;/code&gt; is enabled and disabled. If you're curious, they're available at &lt;a href="https://github.com/LayZeeDK/angular-module-teardown-options"&gt;github/LayZeeDK/angular-module-teardown-options&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>testing</category>
    </item>
    <item>
      <title>Be careful Of This Java Optional Method</title>
      <author>Abdulcelil Cercenazi</author>
      <pubDate>Wed, 13 Oct 2021 22:21:16 +0000</pubDate>
      <link>https://dev.to/jarjanazy/be-careful-of-this-java-optional-method-439</link>
      <guid>https://dev.to/jarjanazy/be-careful-of-this-java-optional-method-439</guid>
      <description>&lt;h2&gt;
  &lt;a href="#lets-remember-java-optional"&gt;
  &lt;/a&gt;
  Let's Remember Java Optional ü§ì
&lt;/h2&gt;

&lt;p&gt;According to &lt;strong&gt;Oracle&lt;/strong&gt; it's "A container object which may or may not contain a non-null value."&lt;br&gt;
Optional was introduced in Java 8 and has been used by the SpringBoot team in many projects.&lt;/p&gt;



&lt;p&gt;The most common usage of Optionals is in the Spring Data project. Let's look at the &lt;code&gt;JpaRepository&lt;/code&gt; interface and an example method.&lt;br&gt;
Say we have a User entity with an Id type of integer and that we have a JpaRepository for it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Repository&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IUserRepo&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;JpaRepository&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="nc"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findByUserName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We defined a method that searches for a user via their user name and returns an &lt;code&gt;Optional&lt;/code&gt; of a User.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#optionals-convenience-methods"&gt;
  &lt;/a&gt;
  Optional's Convenience Methods üôå
&lt;/h2&gt;

&lt;p&gt;Optional comes in with many method meant to enable us to write clean and readable code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;map(..).or(...)&lt;/li&gt;
&lt;li&gt;map(...).orElse(...)&lt;/li&gt;
&lt;li&gt;check out Oracle's &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html"&gt;docs&lt;/a&gt; for the full list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;However, there is one method with a dangerously unexpected behavior&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#meet-the-raw-orelse-endraw-method"&gt;
  &lt;/a&gt;
  Meet The &lt;code&gt;orElse&lt;/code&gt; Method üëÄ
&lt;/h2&gt;

&lt;p&gt;According to Oracle's doc:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public T orElse(T other) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Return the value if present, otherwise return other.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we can add a method call as the parameter of the orElse, which will be run if the Optional is empty, right?&lt;/p&gt;

&lt;p&gt;Yes, that's correct, BUT, what if I tell you that it will run anyways regardless of the presence of the value in Optional or not.&lt;/p&gt;




&lt;p&gt;Let's test it ‚úçÔ∏è&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;orElseTest&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;  
&lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;orElse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someMethod&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;  
    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;isEqualTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;someMethod&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;  
&lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I am running !!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"hola"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The test does pass, but we notice that on the console we have the string &lt;strong&gt;"I am running"&lt;/strong&gt; printed out.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-is-that"&gt;
  &lt;/a&gt;
  Why is that? ü§®
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Java runs the methods and caches its result in case it's to be returned for performance reasons.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-be-careful-%EF%B8%8F"&gt;
  &lt;/a&gt;
  So Be Careful ‚õîÔ∏è
&lt;/h2&gt;

&lt;p&gt;We want to be careful if the method inside the &lt;code&gt;orElse&lt;/code&gt; might have a side effect, because it will be run anyways.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#also-check-out-how-to-escape-nullpointerexceptions-in-java-using-optional"&gt;
  &lt;/a&gt;
  üëâüèæ Also check out &lt;a href="https://dev.to/jarjanazy/how-to-escape-nullpointerexceptions-in-java-using-optional-pek"&gt;How to escape NullPointerExceptions in Java using Optional&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TOP 10 JOBS IN CLOUD COMPUTING</title>
      <author>Onumaku chibuike victory </author>
      <pubDate>Wed, 13 Oct 2021 22:13:16 +0000</pubDate>
      <link>https://dev.to/onumaku_bobby/top-10-jobs-in-cloud-computing-4gah</link>
      <guid>https://dev.to/onumaku_bobby/top-10-jobs-in-cloud-computing-4gah</guid>
      <description>&lt;p&gt;Job Opportunities in Cloud Computing are rising in the upside-down era of this unexpected pandemic. As per T4 research, the market share of cloud computing in 2021 is 406 Billion US Dollars and can exponentially grow up to 663 Billion US Dollars. With such a market share, companies whether small, medium, or large can shift from their traditional data-centric approach to the one stuffed with cloud computing services thereby rewarding the masses with the suddenly popped up benefits of this technological transformation. Does this really NOT FORCE US to think if or not we can make our career in the emerging field of cloud computing!!&lt;/p&gt;

&lt;p&gt;Top-10-Job-Opportunities-in-Cloud-Computing&lt;/p&gt;

&lt;p&gt;Yes, there are ample opportunities in this sector that organizations are giving to those individuals ready to extract the chief outcomes from the investment a company makes to leverage a cloud-based architecture. And according to your technical and leadership skills tailored well with years of experience, you can grab an offer letter of any of the positions like Cloud Consultant, Cloud Engineer, UI Developer, and so on‚Ä¶‚Ä¶.Let‚Äôs know about the top opportunities through which one will get benefited in terms of perks, work type, and performance bound to cloud-based models companies adopt to leverage the graph of their sales corresponding to their investments.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Cloud Engineer&lt;br&gt;
Cloud Engineer, in a broader sense, responsibly manages many technical processes through the provided cloud-based systems. Worried about with what aim the processes are carried forward!! Each of them comprises technologically advanced tasks correlated well with either designing, maintenance, planning, and monitoring of their existing business infrastructures for faster innovation and scalable leads through those technical processes. Most specifically, to be a cloud engineer, you should have knowledge about Python, PHP, .NET, SQL, general N/W (Network) Management Functions, and a deeper understanding of virtual networks. Besides, you should work whippily with cross-functional team members who can uninterruptedly provide application product support for better budgeting and forecasting of project analysis migrated to the cloud. What else does an organization need now to integrate all their server-based technologies and deploy their products and services negotiating well with the interests and loyalty of their customers in a shorter period of time?  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Architect&lt;br&gt;
Cloud Architect is another cloud-based career opportunity in which you will act as a person responsibly preparing a cloud-computing strategy inclusive of action plans and designs for cloud systems. Thinking if I can become this sort of person who has the potential of moving the business processes of various organizations to the cloud platform!! Yes, you can achieve milestones in this career opportunity and for that, you should have a thorough understanding of DNS i.e. Domain Name System, TCP and IP protocols, and other aspects of computer networks. Side-by-side, you should also be having flexibility in computer programming languages like JavaScript, Python, Go, and Java and can work on the related projects with minimal help or guidance. So, you can proceed ahead on the path of becoming a Cloud Architect who can work well on his/her day-to-day expectations like negotiating third-party contracts, by communicating with vendors, related to hardware, cloud technologies; closely working with IT security to monitor privacy and incidents responding to that as per scaled budgets and estimation costs of cloud adoption plans.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Consultant&lt;br&gt;
A Cloud Consultant is always on the course of providing technical researches and studies that justify his/her cloud management plans along with the suggestions regarding the cloud services and architecture adhered to by the organization as per its requirements. Planning to reserve your seat for this job role!! Yes, you can but do this after you acquire a strong IT background for yourself so that you can implement, migrate, design, or maintain cloud applications and the business processes associated with any of those applications. And for doing this better, you must have an in-depth knowledge of at least one operating system from this list: a) Windows b) Linux c) Ubuntu d) Fedora; basics of HTML Apex, JavaScript, and lastly, excellent customer service skills so that you can help the clients meet their requirements. Hence, the time has now come to showcase the IT background acquired by you, consisting of in-depth knowledge about OSs, networking protocols, communication, and technical skills for your as well as the organization‚Äôs growth for which you will be working in your future endeavors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DevOps Cloud Engineer&lt;br&gt;
DevOps Cloud Engineers are intensively involved with coordinating with various cloud developers with the sole purpose of integrating cloud-based solutions for better performance of cloud-based projects bound to the organization‚Äôs architecture. And primarily, this architecture revolves around technologies like Google Cloud Program, Microsoft Azure, or AWS. So, you need to excel yourself on any of those technologies and simultaneously, on the programming languages like Ruby, Java, Python, or Pearl. After you excel yourself with the ones aforementioned, you will be collaborating with the members of Research and Development like the ones known in the market as Developers to deliver automated solutions regarding expansion capability of the existing software, monitoring the users‚Äô feedbacks and responses towards the newer product release and communicating the same with R&amp;amp;D teams for an improvised product‚Äôs interface intuitive from user‚Äôs perspective. Just enroll yourself in any of the industry-led training which will help you make a cakewalk on the day-to-day expectations of a DevOps Cloud Engineer!!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Infrastructure Engineer&lt;br&gt;
The job role of a cloud engineer is to keep on revolving around a motto and that is developing a secure and robust cloud-based infrastructure that can associate itself well with the systems somewhere demanding cloud networks. Indeed, the infrastructure engineers work closely with H/W i.e. Hardware Engineers and other developers gifted with excellent thinking, analytical, and verbal skills. Imagining what I need to do to become a person known in the market for assessing an organization‚Äôs existing infrastructure and explore the options through which the infrastructure can be moved or shifted to the cloud!! For this, you need to be effective with Python, Go, Linux, SLAs (Service Level Agreements)/SLOs (Service Level Objectives), and high-transactional IP Routing protocols. Only then, you can execute the determined best course of action in accordance with the roles and responsibilities assigned to you for this position on which you will be working on a daily or quarterly basis. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Security Engineer&lt;br&gt;
A Cloud Security Engineer never takes a step back when it comes to attracting organizations with the solutions related to designing and workload implementation on cloud-based systems in a secure manner. Wondering how the security engineer uses the potential of the cloud to deploy solutions!! To achieve the same, the engineer creates cloud-based programs that can be installed, maintained, or upgraded on the available cloud computing environments. Later, threat simulations and penetration tests are performed to determine whether or not risks are there impacting the security design and application development. If required, a set of practices like the use of cryptography, data encryption, MFA i.e. Multi-Factor Authentication, and Single Sign-In can be implemented to give people security recommendations while detecting incidents. Noteworthily, you should try becoming an in-demand cloud security engineer who knows about programming languages like Java, Python, but is handier with upgrading the existing security environments an organization may adopt thereby serving as the voice of their customers.      &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data Engineer&lt;br&gt;
Data Engineer is always on the better side of the coin by preparing data stored encrypted over the cloud for not only the analytical but the operational uses as well. Thinking about how that data is prepared!! For doing so, data engineers take the help of data acquisition methods like sharing, transforming, and purchasing of data to build data lakes from the relevant and multiple data sources keeping in mind auditing and data governance. Many times, they need to align the cloud infrastructure with the existing business requirements through programming languages like MongoDB, SQL, Python, and tools like Apache Spark, Amazon Redshift, and Snowflake. Simply, they are enthusiastic with their identified ways of improving efficiency, quality, and reliability of data developed, constructed, or maintained by taking updates from the stakeholders patient enough to govern the creative translations performed by the data engineers. Without any doubt, you can also be a part of this better side of the coin just after you participate in analyzing data through programming languages and tools essential for functional and technical design support in detail.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Full-Stack Developer&lt;br&gt;
Full-Stack Developers, honestly speaking, are the prime-time engineers of today‚Äôs technologically advanced world. Anticipating how they are listed in primetime!! Those Full-Stack Developers work dedicatedly with mobile, web, or native application stacks thereby helping clients during every planning phase of the assigned or upcoming projects. Furthermore, they can descriptively work with both front-end and back-end development ideas with their extensive programming knowledge of CSS, JavaScript, and HTML essential for front-end whereas knowledge of PHP, Angular JS, Apache, and Linux for back-end. And all this is vital for repeatable business continuity and scalability. Are you curious to be friends with the roles and responsibilities of a Full-Stack Developer? They are like developing precisely front-end web architecture that meets both the technical and customer needs, designing and then developing APIs for wider reach, and creating databases plus the servers of variable compatibility levels which are accessed speedily from mobile or web. So, you have a chance to move forward continuously on the path of development either front-end/ backend and work with stacks well-relatable with the functional capabilities of mobile, web, or native cloud applications. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud System Administrator&lt;br&gt;
Cloud System Administrator has a knack for maintaining, troubleshooting, and developing the network connections through their real-world experience of cloud-network types and managing on-demand firewall related requests. Besides, the administrator also mixes up with implementing and defining policies for cloud-based systems so that the customers can speedily communicate with all the services that systems can potentially reciprocate live. This helps the organization a lot since they are assured of the seamless delivery of all of their services at every level ‚Äì small or large. Calculating if your skills can help you get yourself introduced to the cloud system administrator job role!! Yes, you are free to involve in the operational efficiency demanded by the role through coding languages like Python, Ruby, Pearl, Java, or .NET; familiarity with tools like Puppet, Chef, &amp;amp; Ansible properly administering the network types all the time. All this will benefit you really while you are shaping your career as a Cloud System Administrator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI Developer&lt;br&gt;
UI Developer as the name translates itself inches day-by-day towards translating creatively software design components and associated ideas into reality. Contemplating how a UI Developer handles such an innovative translation!! The answer is that with the smarter use of front-end technologies like Angular, Flutter, frameworks like Django, and languages like CSS, Java; the translations are handled creatively by a UI Developer. Collaboratively, the developer will be writing Unit Tests and also working responsibly with QA engineers to define end-to-end test cases somewhere involved with agility and user satisfaction. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>cloudcomputing</category>
    </item>
  </channel>
</rss>
