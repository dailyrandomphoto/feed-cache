<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Add a Default Value to an Existing Column in MySQL</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 08 Nov 2021 15:33:31 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/how-to-add-a-default-value-to-an-existing-column-in-mysql-28dk</link>
      <guid>https://dev.to/bobbyiliev/how-to-add-a-default-value-to-an-existing-column-in-mysql-28dk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;In this quick tutorial, you will learn how to add a default value to an existing column in MySQL.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;You always need to be careful, when changing the structure of an existing column in your database. Make sure to always have backups of your database before making such changes. &lt;/p&gt;

&lt;p&gt;For MySQL, you could use the following script to generate a backup of your database:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/bobbyiliev/how-to-exportbackup-a-mysqlmariadb-database-with-mysqldump"&gt;Script to backup a MySQL/MariaDB database&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#add-a-default-value-to-an-existing"&gt;
  &lt;/a&gt;
  Add a default value to an existing
&lt;/h1&gt;

&lt;p&gt;When making changes to a column in your database, you can use the &lt;code&gt;ALTER TABLE&lt;/code&gt; statement followed by the &lt;code&gt;ALTER COLUMN&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;The syntax is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE name_of_the_table ALTER name_of_the_column SET DEFAULT your_new_default_value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say that we had a table called users and a column called &lt;code&gt;is_admin&lt;/code&gt;. We want all new users to have the &lt;code&gt;is_admin&lt;/code&gt; value set to &lt;code&gt;0&lt;/code&gt;. To do so we would use the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE users ALTER COLUMN is_admin SET DEFAULT 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you were to use the &lt;code&gt;DESCRIBE users;&lt;/code&gt; statement you will get the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;describe users;
+----------+--------------+------+-----+---------+----------------+
| Field    | Type         | Null | Key | Default | Extra          |
+----------+--------------+------+-----+---------+----------------+
...
| is_admin | int          | NO   |     | 0       |                |
...
+----------+--------------+------+-----+---------+----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#add-a-default-value-to-a-new-column"&gt;
  &lt;/a&gt;
  Add a default value to a new column
&lt;/h1&gt;

&lt;p&gt;In case that you wanted to actually create a new table with a default value, you would again use the &lt;code&gt;ALTER TABLE&lt;/code&gt; statement followed by the &lt;code&gt;ADD&lt;/code&gt; keyword and the name of the column that you wanted to create.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE `name_of_the_table` ADD `name_of_the_column` INT NOT NULL DEFAULT your_new_default_value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say that you did not yet have the &lt;code&gt;is_admin&lt;/code&gt; column form the example above and wanted to create it with a default value of &lt;code&gt;0&lt;/code&gt;, the query would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE `users` ADD `is_admin` INT NOT NULL DEFAULT 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you were to create a new record in the &lt;code&gt;users&lt;/code&gt; table, it would have a default value without you having to specify it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This is pretty much it! Now you know how to add a default value to both an existing column and to a new column in MySQL.&lt;/p&gt;

&lt;p&gt;To learn more about SQL, make sure to check out this free eBook here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;💡 Introduction to SQL eBook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you already know the basics and wanted to take your data infrastructure to the next level, I would recommend checking out &lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XMy5AXa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/52d9a6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMy5AXa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/52d9a6h.png" alt="Materialize - a streaming database" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Materialize is a Streaming Database for Real-time Analytics. Materialize is a reactive database that delivers incremental view updates and it helps developers easily build with streaming data using standard SQL.&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>mysql</category>
      <category>devops</category>
    </item>
    <item>
      <title>30 Projects Ideas!</title>
      <author>Danish Saleem</author>
      <pubDate>Mon, 08 Nov 2021 15:15:06 +0000</pubDate>
      <link>https://dev.to/mrdanishsaleem/30-projects-ideas-3e0g</link>
      <guid>https://dev.to/mrdanishsaleem/30-projects-ideas-3e0g</guid>
      <description>&lt;ol&gt;
&lt;li&gt;To-do list app&lt;/li&gt;
&lt;li&gt;Note-taking app&lt;/li&gt;
&lt;li&gt;Calendar Application&lt;/li&gt;
&lt;li&gt;Chat System&lt;/li&gt;
&lt;li&gt;Weather application&lt;/li&gt;
&lt;li&gt;Portfolio website&lt;/li&gt;
&lt;li&gt;Image search&lt;/li&gt;
&lt;li&gt;Chess game&lt;/li&gt;
&lt;li&gt;Donation website&lt;/li&gt;
&lt;li&gt;Budget tracker&lt;/li&gt;
&lt;li&gt;Tic Tac Toe game&lt;/li&gt;
&lt;li&gt;Form validator&lt;/li&gt;
&lt;li&gt;Web Scraper&lt;/li&gt;
&lt;li&gt;Simple FTP client&lt;/li&gt;
&lt;li&gt;Port Scanner&lt;/li&gt;
&lt;li&gt;MP3 Player&lt;/li&gt;
&lt;li&gt;Tetris game&lt;/li&gt;
&lt;li&gt;Netflix clone&lt;/li&gt;
&lt;li&gt;Discord bot&lt;/li&gt;
&lt;li&gt;Video chat system&lt;/li&gt;
&lt;li&gt;Pacman game&lt;/li&gt;
&lt;li&gt;Alarm clock&lt;/li&gt;
&lt;li&gt;Stock trading app&lt;/li&gt;
&lt;li&gt;Issue tracker&lt;/li&gt;
&lt;li&gt;Music Store App&lt;/li&gt;
&lt;li&gt;Twitter Bot&lt;/li&gt;
&lt;li&gt;Spam Classifier&lt;/li&gt;
&lt;li&gt;Content Aggregator&lt;/li&gt;
&lt;li&gt;Snake game&lt;/li&gt;
&lt;li&gt;File manager&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect!
&lt;/h2&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/MrDanishSaleem"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mrdanishsaleem/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mrdanishsaleem/"&gt;GitHub&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like this post. Kindly support me by &lt;a href="https://www.buymeacoffee.com/mrdanishsaleem"&gt;Buying Me a Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IrvJezlq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0ikih5nlsqs0oops11e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrvJezlq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0ikih5nlsqs0oops11e.png" alt="Buy Me a Coffee" width="880" height="193"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Is Crypto More than NFT Scams?</title>
      <author>K (he/him)</author>
      <pubDate>Mon, 08 Nov 2021 15:10:45 +0000</pubDate>
      <link>https://dev.to/fllstck/is-crypto-more-than-nft-scams-1o8p</link>
      <guid>https://dev.to/fllstck/is-crypto-more-than-nft-scams-1o8p</guid>
      <description>&lt;p&gt;Two months ago, I started looking into NFTs and crypto in general. The hype for NFTs was so high that a client of mine asked if I could write a piece for them to get more exposure in that space. I saw the hype too, and as with all tech a client asks me to write about, I did it. Getting paid to learn new tech is pretty awesome and the whole reason why I’m doing this writing business anyway.&lt;/p&gt;

&lt;p&gt;Right at the start, I saw the first problem with that topic. The internet is plastered with investment advice and scammers who wanna sell you their latest media NFT. I dug through the crap and decided to buy two books instead of just doing research online.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/dp/3982103819?ref_=pe_3052080_397514860"&gt;Token Economy&lt;/a&gt; by &lt;a href="https://twitter.com/sherminvo"&gt;Shermin Voshmgir&lt;/a&gt; and &lt;a href="https://www.oreilly.com/library/view/hands-on-smart-contract/9781492045250/"&gt;Hands-On Smart Contract Development with Solidity &amp;amp; Ethereum&lt;/a&gt; by Kevin Solorio, &lt;a href="https://twitter.com/RandallKanna"&gt;Randall Kanna&lt;/a&gt;, and David H. Hoover. They both gave me some insights into the crypto space in general with its fungible and non-fungible tokens and how to implement systems in that space with Solidity. It helped that the authors weren’t your run-of-the-mill crypto dudes.&lt;/p&gt;

&lt;p&gt;Next, I started following some people on Twitter to be up-to-date on my research, and rather quickly, I got a taste of the fact that many people hate blockchains. I’ve been in the IT industry for over a decade and as a JavaScript, React, and serverless developer, I experienced quite some resentment in my time. It’s nothing new for me to use a promising new technology and find out many people don’t like it. &lt;/p&gt;

&lt;p&gt;I wouldn’t consider these critics dumb just because they don’t understand that specific topic in all its depth. I don’t understand many things and still can help people with the knowledge I have. Also, I was in that place myself. I saw people I hold in high regard moving into the crypto, and I was sad that they would do such a dumb thing. How could they support all these scammers with their hideous jpegs?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-smart-people-do-this"&gt;
  &lt;/a&gt;
  How Can Smart People Do This?
&lt;/h2&gt;

&lt;p&gt;What does “smart people” even mean in that context?&lt;/p&gt;

&lt;p&gt;I have the feeling; smart doesn’t mean smart in the classical sense here. The type of people we talk about here are influencers, somewhat prominent people in an industry that are either good at marketing or consistent enough to improve their luck with “the algorithm.” So, we’re not talking about “people I consider smart” but “people whose opinion I like.” They can be dumb as they come on both sides.&lt;/p&gt;

&lt;p&gt;On a side note: I see it as a good sign if I like one opinion of a person and disagree with their other views. That way, I’m sure I’m not just doing it because I like that person too much.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-did-i-leave-for-crypto"&gt;
  &lt;/a&gt;
  Why did I Leave for Crypto?
&lt;/h2&gt;

&lt;p&gt;First of all, I didn’t leave. I only got one NFT-related article paid for by a client and still make almost all of my money with non-crypto-related writing. But I thought, I’m fresh in the space, and it would remove many assumptions if I just write about my personal experience.&lt;/p&gt;

&lt;p&gt;Next, I wouldn’t consider myself particularly smart. I had many experiences that showed me I’m a slow learner. Learned swimming with 9, biking with 13, took me years to grasp functions in programming. But I made things work with persistence, and after some time, I figured out what helped me learn better.&lt;/p&gt;

&lt;p&gt;I might not be one of these “smart people” who are leaving “the old world” for crypto, blockchain, or web3. But we also learned that we’re not talking about “smart people,” but just “people whose opinions we value,” so I don’t think it’s too far-fetched to extrapolate my own experience on other people.&lt;/p&gt;

&lt;p&gt;Why do I spend so much time with crypto? Is it more than just a bunch of dudes shilling their JPEG NFTs? Is it destroying the environment, or could it help society? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-fun"&gt;
  &lt;/a&gt;
  It’s Fun
&lt;/h2&gt;

&lt;p&gt;It’s pretty fun. I joined &lt;a href="https://www.developerdao.com/"&gt;a community of developers&lt;/a&gt; that are interested in that space. Like many things in this young crypto world, the community is just forming, and it’s just lovely to be part of something that feels new and significant. I like to learn about new technology, and this is the newest of the new.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-inclusive"&gt;
  &lt;/a&gt;
  It’s Inclusive
&lt;/h2&gt;

&lt;p&gt;I also had the impression that the communities I interacted with were pretty inclusive. I’m a white dude, so I’m biased, but in the two months in that space, the books that gave me the most crucial insights were written by women. &lt;/p&gt;

&lt;p&gt;Also, I regularly talked with queer people, people of color, and women. I bought and read their books, got advice from them, and helped them out when they had problems themselves. This experience felt like crypto is open for everyone who wants to learn. &lt;/p&gt;

&lt;p&gt;I’ve been in IT for over a decade, and I encountered that kind of inclusion only recently in communities like one of the Rust programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-has-a-low-entry-barrier"&gt;
  &lt;/a&gt;
  It has a Low Entry Barrier
&lt;/h2&gt;

&lt;p&gt;The entry barrier is low for a developer in that space. You don’t have to sign up for a cloud provider. To get started, you can just open your browser and use a blockchain. There are free blockchain-gateways that allow you to connect to a chain from a browser, and all the test networks are basically free, too, and they’re already up and running.&lt;/p&gt;

&lt;p&gt;In terms of backend development, I’m coming from the serverless side of things, where things are straightforward, but even that feels quite a bit complicated compared to blockchain development.&lt;/p&gt;

&lt;p&gt;Sure, signing up for a blockchain-gateway service is a good idea when you get into developing smart contracts, but it isn’t necessary to get started, and I’d say you can go by for the first one or two weeks without doing it.&lt;/p&gt;

&lt;p&gt;A counterargument here is that the learning resources are a bit cumbersome. As an educator, I think most people who create learning resources in that space could do a bit better. Also, the whole security aspect is something that throws people off at the beginning. Asymmetric cryptography usually isn’t something a developer learns on the side.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-a-new-paradigm"&gt;
  &lt;/a&gt;
  It’s a New Paradigm
&lt;/h2&gt;

&lt;p&gt;The next point unique to the blockchain is that it’s a new paradigm of doing things. Decentralization and protocol-level payment integration might seem incredible but not that important. Critics say blockchain is like AWS but more expensive, slow, and bad for the environment.&lt;/p&gt;

&lt;p&gt;And it’s already alienating people who are curious about crypto. A private message I got on Twitter asked, &lt;em&gt;“is this something i should do or is this like a earth harming fracking thing? lol. i'm desperately looking for a developer tech job period.”&lt;/em&gt; Which I found sad.&lt;/p&gt;

&lt;p&gt;It feels a bit like the anti-serverless arguments to me. Sure, a Lambda function is more expensive per execution than a container or VM that’s always under full load. But that isn’t the point. Lambda removes much of the work running low-level infrastructure brings and, in turn, removes the costs of that work. You might pay more per execution, but you can also do with less personnel. &lt;/p&gt;

&lt;p&gt;The same goes for blockchain-based infrastructure. All the critics are correct, but it might be that the points they deem unimportant are so much more valuable in the long run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decentralization"&gt;
  &lt;/a&gt;
  Decentralization
&lt;/h3&gt;

&lt;p&gt;While not in full gear with younger blockchains, decentralization might be a killer feature alone. We’ve all seen what happened with Tumblr or how OnlyFans wanted to rid themselves of sex workers. We’ve all seen the power that payment providers have. Even everyday services like social networks are prone to censorship, so the whole “is decentralization really needed” might not be answered with “yes, but only in a very few special cases.”&lt;/p&gt;

&lt;p&gt;While decentralized technology is in its infancy and desperately needs improvements, especially in terms of energy consumption, I think it could be a step in the right direction. I don’t know how things will go, and it probably won’t be a utopia in 10 years from now. Still, decentralized systems could swing the pendulum more to the masses, not single entrepreneurs who blow it on space holidays.&lt;/p&gt;

&lt;p&gt;Now, you might ask, “Why does it have to be blockchain? There are decentralized systems out there that are more efficient than blockchains; why shouldn’t we use those?” which is an excellent question that brings us to the next point.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#payment-at-protocol-level"&gt;
  &lt;/a&gt;
  Payment at Protocol Level
&lt;/h3&gt;

&lt;p&gt;While payment providers like Stripe made “getting paid for your service” simpler in recent years, it still feels like payment isn’t an integral part of software architectures.&lt;/p&gt;

&lt;p&gt;If it’s ad-financed, you integrate an ad-provider, it pays you for the ads your users viewed, and then you pay your employees, cloud provider, and hopefully yourself in the end.&lt;/p&gt;

&lt;p&gt;If it’s subscription-based, you integrate a payment provider, users pay them for a subscription, the provider pays you, and you pay what you have to pay, etc.&lt;/p&gt;

&lt;p&gt;There are many ways you could make money with your service, some more offline, some more online, but overall they all feel like grafted on a software that could work perfectly well without payment.&lt;/p&gt;

&lt;p&gt;It seems, at least to me, that blockchains are the first mainstream(-ish) technology that includes payment as an integral part of its design.&lt;/p&gt;

&lt;p&gt;You can’t write or execute things on-chain without paying for it. Heck, you can’t even deploy your programs on-chain without paying for it. This makes it obvious, right from the start, who will pay for all that decentralized infrastructure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-contracts"&gt;
  &lt;/a&gt;
  Smart Contracts
&lt;/h3&gt;

&lt;p&gt;Smart contracts are what make decentralization and protocol-level payment accessible for the everyday developer. While cryptography might not be the most accessible concept to grasp, Solidity isn’t much more complicated than, let’s say, Python or JavaScript.&lt;/p&gt;

&lt;p&gt;JavaScript gave us much good on the web, but it was also used for popups and user tracking. I realize that many people out there still think JavaScript is a stain on the internet. But I think it’s a net plus with all the rich applications I use daily, without a need to consider if I have the right operating system or have synchronized my data to all my machines.&lt;/p&gt;

&lt;p&gt;People use them to build cryptocurrencies and now to make NFTs, and both have good and bad applications. NFTs aren’t just about media ownership certificates stored on a blockchain. They can be much more, proof of access, knowledge, or membership, etc. &lt;/p&gt;

&lt;p&gt;I own two NFTs, one for a DAO membership and one for an ENS domain, and they have nothing to do with jpeg shilling. They can’t be “right-clicked and saved because the ownership gives me more options than looking at them or listening to them.&lt;/p&gt;

&lt;p&gt;Smart contracts don’t solve scamming, and their “code is law” pledge doesn’t fix bad laws in any way. They make applying such rules more transparent and remove steps between creating such a law and enforcing it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The points above work together and set the “like AWS but more expensive, slower, and worse for the environment” and “Is Crypto More than just JPEG NFTs?” in context.&lt;/p&gt;

&lt;p&gt;Are blockchains more expensive than AWS? Sure, but you’re buying something that is just similar to AWS infrastructure, but not the same. Depending on your circumstances, what you buy can have much more value than what AWS is selling.&lt;/p&gt;

&lt;p&gt;Are blockchains slower than AWS? Sure, they have limited application, and in many cases, you might not be able to wait for the execution of a transaction. If you need blockchain-specific features, waiting might not seem bad.&lt;/p&gt;

&lt;p&gt;Are blockchains bad for the environment? I don’t know! They might be, but this question isn’t trivial to answer. It’s not that you replace AWS with Ethereum, and everything else stays the same. A blockchain gets you rid of payment providers and banks, which all have a pretty hefty CO2 footprint themselves. With every update, these systems get more efficient, and some layer two solutions for Ethereum already claim to be carbon neutral.&lt;/p&gt;

&lt;p&gt;Is there more to it than JPEG shilling? I very much think so. NFTs are a way for artists to make money, and where money can be made, scammers aren’t far. &lt;/p&gt;

&lt;p&gt;This is what’s in the news right now, but NFTs isn’t just about media ownership; they can be so much more and already are. “Code is law” might not lead to just laws, but it removes much of the interpretations between the creation of law and its application, which can help eliminate some amount of human bias.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-future-bring"&gt;
  &lt;/a&gt;
  What Does the Future Bring?
&lt;/h2&gt;

&lt;p&gt;Just to make things clear, I don’t know if the upsides will play out in the long run. In the end, it might very well be that the old wealthy class will take over the blockchain space and distribute it between themselves like they always did. At least right now, the whole blockchain space feels like in the 90s, when the internet was in its infancy.&lt;/p&gt;

&lt;p&gt;What about me? Will I keep using non-blockchain technology? Of course!&lt;/p&gt;

&lt;p&gt;I love serverless tech and for many workloads, spinning up a Lambda function or a Cloudflare Worker is more than enough.&lt;/p&gt;

&lt;p&gt;But blockchain technology opened my eyes to solutions to problems I knew existed but had no idea how to solve them. So, when I now try to build something, I ask myself which part of the system should better live on-chain.&lt;/p&gt;

</description>
      <category>crypto</category>
      <category>blockchain</category>
      <category>nft</category>
    </item>
    <item>
      <title>HOW TO PRACTICE FOR WEB-DEVELOPMENT ?</title>
      <author>Mihir Amin</author>
      <pubDate>Mon, 08 Nov 2021 15:00:00 +0000</pubDate>
      <link>https://dev.to/dynamicmortal/how-to-practice-for-web-development--56pc</link>
      <guid>https://dev.to/dynamicmortal/how-to-practice-for-web-development--56pc</guid>
      <description>&lt;p&gt;The best way to master something, is to Practice, practice &amp;amp; practice. Continuous practice leads to mastery. You can be &lt;strong&gt;PERFECT&lt;/strong&gt; too, because&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Practice Makes a Man Perfect!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Let's explore&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="www.codepen.io"&gt;&lt;h2&gt;Codepen&lt;/h2&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each week there is a challenge at Codepen. The most loved pens would get featured in the Trending Page of Codepen.io&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYT-l4A---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jqb0xg5oxafwp90iwf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYT-l4A---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jqb0xg5oxafwp90iwf7.png" alt="Image description" width="880" height="391"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="www.freecodecamp.org"&gt;&lt;h2&gt;freeCodeCamp&lt;/h2&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;freeCodeCamp is the most famous free learning hub for Beginners to learn Coding. freeCodeCamp has many challenges after every course. You can also obtain Certificate after every course completed. &lt;br&gt;&lt;em&gt;Attempt it for perfection.&lt;/em&gt;
![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj5soer8dtjhzwu5zf0j.png)
&lt;a href="www.dailyui.co"&gt;&lt;h2&gt;DailyUI&lt;/h2&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Mails with challenges everyday after sign-up. Daily Challenges can help you maintain streak !!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--joJrb4wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s7tdtlvsbrgm6f3g9br.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--joJrb4wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s7tdtlvsbrgm6f3g9br.png" alt="Image description" width="880" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Best 3 Youtube channel for Learning DevOps</title>
      <author>Atharva Shirdhankar</author>
      <pubDate>Mon, 08 Nov 2021 14:49:22 +0000</pubDate>
      <link>https://dev.to/star_trooper/best-3-youtube-channel-for-learning-devops-51m0</link>
      <guid>https://dev.to/star_trooper/best-3-youtube-channel-for-learning-devops-51m0</guid>
      <description>&lt;h1&gt;&lt;a href="https://www.youtube.com/c/TechWorldwithNana"&gt;1.TechWorld with Nana&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14SXDKgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3srq7jxwmyrlj00pvob6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14SXDKgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3srq7jxwmyrlj00pvob6.png" alt="Techworld with Nana" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#website"&gt;
  &lt;/a&gt;
  Website:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.techworld-with-nana.com/"&gt;TechWorld with Nana&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-"&gt;
  &lt;/a&gt;
  About :
&lt;/h4&gt;


&lt;li&gt;TechWorld with Nana youtube channel is focused on Cloud and DevOps founded by &lt;a class="mentioned-user" href="https://dev.to/techworld_with_nana"&gt;@techworld_with_nana&lt;/a&gt;
 . &lt;/li&gt;
&lt;li&gt;You can find beginner friendly crash course in which you will learn concepts of Docker , Kubernetes , Github Actions , AgroCD , Terraform etc from scratch.

&lt;h1&gt;&lt;a href="https://www.youtube.com/c/DevOpsDirective"&gt;2.DevOps Directive&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z0m60u46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrftmpdev8ss3uoqs1oj.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z0m60u46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrftmpdev8ss3uoqs1oj.JPG" alt="DevOps Directive" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#website"&gt;
  &lt;/a&gt;
  Website:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://devopsdirective.com/"&gt;DevOps Directive&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-"&gt;
  &lt;/a&gt;
  About :
&lt;/h4&gt;




&lt;/li&gt;
&lt;li&gt;DevOps Directive youtube channel also focuses on Cloud and DevOps concepts, founded by &lt;a class="mentioned-user" href="https://dev.to/sidpalas"&gt;@sidpalas&lt;/a&gt;
  . &lt;/li&gt;
&lt;li&gt;You can find beginner friendly tutorial in which you will learn concepts of Docker , Github Actions and Cloud platforms like AWS from scratch. &lt;/li&gt;
&lt;li&gt; Sid also shares tips and best practices about how to build small size docker images.
&lt;/li&gt;
&lt;li&gt;On DevOps Directive youtube channel you will also find talks and podcast with professionals working in Tech Industry which are hundred percent insightful to watch.

&lt;h1&gt;&lt;a href="https://www.youtube.com/c/Freecodecamp/"&gt;3.FreeCodeCamp&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TwEQU2AX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdt8b4bbwid9p6wzq3fp.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TwEQU2AX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdt8b4bbwid9p6wzq3fp.JPG" alt="FreeCodeCamp" width="880" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#website"&gt;
  &lt;/a&gt;
  Website:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h3&gt;




&lt;/li&gt;
&lt;li&gt;On Freecodecamp youtube channel you will find numereous Devops and Cloud related tutorials and complete crash course t
&lt;/li&gt;
&lt;li&gt; It doesn't focus only on DevOps and Cloud but reason to add the youtube channel in this blog is for getting started with DevOps you need to have basic knowledge of Web Development for which Freecodecamp have covered you.
I guess every web languages and framework tutorial are present on FreeCodeCamp.
&lt;/li&gt;
&lt;li&gt; Freecodecamp also has amazing blogs written by amazing professional folks which you will find on there official website.
&lt;/li&gt;

</description>
      <category>devops</category>
      <category>resources</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Cannot import name 'TextField' from 'wtforms'</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 08 Nov 2021 14:38:57 +0000</pubDate>
      <link>https://dev.to/sm0ke/cannot-import-name-textfield-from-wtforms-58n8</link>
      <guid>https://dev.to/sm0ke/cannot-import-name-textfield-from-wtforms-58n8</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This short article explains how to fix &lt;strong&gt;"Cannot import name TextField from wtforms"&lt;/strong&gt; error that recently bumped after &lt;strong&gt;WTForms&lt;/strong&gt; library update to version 3.x. For newcomers, &lt;strong&gt;WTForms&lt;/strong&gt; is a flexible forms validation and rendering library for Python/Flask web development. It can work with whatever web framework and template engine you choose. It supports data validation, CSRF protection, internationalization (I18N). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#error-text"&gt;
  &lt;/a&gt;
  Error Text
&lt;/h2&gt;

&lt;p&gt;In case your legacy app uses WTForms without an explicit version in &lt;code&gt;requirements.txt&lt;/code&gt; file (like me) the next compilation might lead to   a runtime error in case &lt;strong&gt;TextField&lt;/strong&gt; type provided by the concerned library occurs somewhere in the codebase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TextField&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;name&lt;/span&gt; &lt;span class="s"&gt;'TextField'&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s"&gt;'wtforms'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above error occurs when the &lt;code&gt;TextField&lt;/code&gt; property is used with &lt;strong&gt;WTForms&lt;/strong&gt; version &lt;code&gt;3.0&lt;/code&gt; or above because the &lt;code&gt;wtforms.TextField&lt;/code&gt; deprecated in favor of &lt;code&gt;wtforms.StringField&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-fix-it"&gt;
  &lt;/a&gt;
  How to fix it
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Solution 1 - Replace &lt;code&gt;TextField&lt;/code&gt; type with &lt;code&gt;StringField&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note: This solution works with WTForms 3.x and 2.x versions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;TextField&lt;/span&gt; &lt;span class="n"&gt;usages&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Solution 2 - Use the latest stable 2.x version of WTForms&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// Use 2.x version
pip &lt;span class="nb"&gt;install &lt;/span&gt;&lt;span class="nv"&gt;WTForms&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;2.3.3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using an older version provides a quick fix for your codebase but is not recommended in the long run. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#free-sample"&gt;
  &lt;/a&gt;
  Free Sample
&lt;/h2&gt;

&lt;p&gt;For this open-source sample, I've used the 2nd solution where the &lt;strong&gt;Cannot import name TextField from wtforms&lt;/strong&gt; error is solved by freezing the WTForms version in &lt;a href="https://github.com/app-generator/flask-datta-able/blob/master/requirements.txt"&gt;requirements.txt&lt;/a&gt; file, without a codebase update. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/flask-datta-able"&gt;Datta Able Flask&lt;/a&gt; - Source Code &lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-datta-able.appseed-srv1.com/"&gt;Datta Able Flask&lt;/a&gt; - LIVE deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aYcrWAOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/545s8xf4hhdhsr0p83no.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYcrWAOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/545s8xf4hhdhsr0p83no.gif" alt="Cannot import name TextField from wtforms - Free sample for the fix." width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access: &lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://wtforms.readthedocs.io/en/3.0.x/"&gt;WTForms&lt;/a&gt; - official documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt; - library documentation&lt;/li&gt;
&lt;li&gt;Join the &lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt; community on &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt; and connect to other fellow developers. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flask</category>
      <category>errors</category>
      <category>wtforms</category>
    </item>
    <item>
      <title>Node.js GitHub Authentication using Passport.js and MongoDB</title>
      <author>Joshua Evuetapha</author>
      <pubDate>Mon, 08 Nov 2021 14:38:54 +0000</pubDate>
      <link>https://dev.to/joshuajee/nodejs-github-authentication-using-passportjs-and-mongodb-2lfd</link>
      <guid>https://dev.to/joshuajee/nodejs-github-authentication-using-passportjs-and-mongodb-2lfd</guid>
      <description>&lt;p&gt;In this article, you will learn how to authenticate with GitHub using Passport.js in a Nodejs express app. &lt;/p&gt;

&lt;p&gt;You can get the source code for this project &lt;a href="https://github.com/Joshuajee/passport-github-auth"&gt;here&lt;/a&gt;, this project can be used as a boilerplate code when setting up an express app that uses Passportjs for authentication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic Knowledge of NodeJS&lt;/li&gt;
&lt;li&gt;Node JS should be installed on your system.
## What is Passport.js?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Passport is authentication middleware for Node.js. It is very flexible and modular. A comprehensive set of strategies supports authentication using a username and password, Google, Facebook, Apple, Twitter, and more. Find out more about Passport &lt;a href="http://www.passportjs.org/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-github-application"&gt;
  &lt;/a&gt;
  Creating a Github Application
&lt;/h2&gt;

&lt;p&gt;Before using passport-github2, you must have a Github account and register an application with Github. If you have not done this, You can do that &lt;a href="https://github.com/settings/applications/new"&gt;here&lt;/a&gt;.&lt;br&gt;
Your Homepage URI and Callback URI should match the one in your application. Your application will be issued a Client ID and Client secret, which this strategy needs to work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FoBDr9ip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_96D7FF9291F95727D81A56AA1A763CC4A64AC3AFC24A94BFB0A28786BA9BD4FB_1635810132201_git.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FoBDr9ip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_96D7FF9291F95727D81A56AA1A763CC4A64AC3AFC24A94BFB0A28786BA9BD4FB_1635810132201_git.png" alt="Github Application setup page" width="608" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-project"&gt;
  &lt;/a&gt;
  Setting up our Project
&lt;/h2&gt;

&lt;p&gt;To start, create a Nodejs project by running this command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Install the following packages by running these commands.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express express-session ejs mongoose passport passport-github2 dotenv nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If the command is successful, you will see something like the image below, &lt;code&gt;node_modules&lt;/code&gt; folder will be created and &lt;code&gt;package-lock.json&lt;/code&gt; file will also be created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbOLKHx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_96D7FF9291F95727D81A56AA1A763CC4A64AC3AFC24A94BFB0A28786BA9BD4FB_1635801691464_pack.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbOLKHx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_96D7FF9291F95727D81A56AA1A763CC4A64AC3AFC24A94BFB0A28786BA9BD4FB_1635801691464_pack.png" alt="" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is the project structure for this project.&lt;br&gt;
📦passportjs&lt;br&gt;
 ┣ 📂controller&lt;br&gt;
 ┃ ┣ 📜account.js&lt;br&gt;
 ┃ ┗ 📜auth.js&lt;br&gt;
 ┣ 📂model&lt;br&gt;
 ┃ ┗ 📜UserModel.js&lt;br&gt;
 ┣ 📂routes&lt;br&gt;
 ┃ ┣ 📜account.js&lt;br&gt;
 ┃ ┗ 📜auth.js&lt;br&gt;
 ┣ 📂utils&lt;br&gt;
 ┃ ┗ 📜github.js&lt;br&gt;
 ┣ 📂views&lt;br&gt;
 ┃ ┣ 📜account.ejs&lt;br&gt;
 ┃ ┗ 📜index.ejs&lt;br&gt;
 ┣ 📜.env&lt;br&gt;
 ┣ 📜.gitignore&lt;br&gt;
 ┣ 📜app.js&lt;br&gt;
 ┣ 📜package-lock.json&lt;br&gt;
 ┣ 📜package.json&lt;br&gt;
 ┣ 📜README.md&lt;br&gt;
 ┗ 📜server.js&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-express-server"&gt;
  &lt;/a&gt;
  Setting up our Express Server
&lt;/h2&gt;

&lt;p&gt;At this point, our application set. Now let’s go ahead and set up our express server. To get started, first create &lt;code&gt;server*.js&lt;/code&gt; file* in the project root directory. &lt;br&gt;
Next, import the mongoose for our database connection and &lt;code&gt;dotenv&lt;/code&gt; to lead our &lt;a href="https://www.twilio.com/blog/2017/08/working-with-environment-variables-in-node-js.html"&gt;environment variables&lt;/a&gt; with the code below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose');
const dotenv = require('dotenv');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, create a &lt;code&gt;.env&lt;/code&gt; file in your project root directory, where we will store our environment variables later in this session. Then make the available in our application with the code below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotenv.config({ path: './.env' });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Import app.js into the code in this file export an express app, this app will be explained next in this article.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = require('./app');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, we make a connection to the mongoose database with the code below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongoose
  .connect(process.env.DATABASE, { useUnifiedTopology: true })
  .then(() =&amp;gt; console.log('DB connection successful!'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, we assign a port to the express application. The application will be listening to the port provided by the environment or port 8081 if there is no environment port.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const port = process.env.PORT || 8081;

app.listen(port, () =&amp;gt; {
  console.log(`App running on port ${port}...`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The following line of codes listens for the following events &lt;code&gt;uncaughtException&lt;/code&gt;, &lt;code&gt;unhandledRejection&lt;/code&gt;, and &lt;code&gt;SIGTERM&lt;/code&gt; respectively, and shut down the server once either one of them occurs.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;process.on('uncaughtException', err =&amp;gt; {
    console.log('UNCAUGHT EXCEPTION! 💥 Shutting down...');
    console.log(err.name, err.message);
    process.exit(1);
});

process.on('unhandledRejection', err =&amp;gt; {
    console.log('UNHANDLED REJECTION! 💥 Shutting down...');
    console.log(err.name, err.message);
    server.close(() =&amp;gt; {
      process.exit(1);
    });
});

process.on('SIGTERM', () =&amp;gt; {
    console.log('👋 SIGTERM RECEIVED. Shutting down gracefully');
    server.close(() =&amp;gt; {
      console.log('💥 Process terminated!');
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Your &lt;code&gt;.env&lt;/code&gt; file should look like this. Put your credentials on the required fields. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATABASE = your-mongo-db-uri
GITHUB_CLIENT_ID = your-github-app-client-id
GITHUB_CLIENT_SECRET = your-github-app-client-secret
GITHUB_CALLBACK_URL = your-github-app-callback-url
SESSION_SECRET = your-app-session-secret-it-can-be-any-string-of-your-choice
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-our-express-application"&gt;
  &lt;/a&gt;
  Setting up our Express Application
&lt;/h2&gt;

&lt;p&gt;Now let’s go ahead and setup our express application. To get started, create an &lt;code&gt;app.js&lt;/code&gt; in the project root directory.  first we import &lt;code&gt;express&lt;/code&gt;, next we import &lt;code&gt;express-session&lt;/code&gt; this is a middleware for handling user sessions in express.&lt;br&gt;
Then import two route handlers on for handling authentication request and the other for handling request in user account. These route handlers will be explained next.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const session = require('express-session');
const authRouter = require('./routes/auth');
const accountRouter = require('./routes/account');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here is where we create the express and by calling the express function which is a top level function exported by the express module and assign it to the &lt;code&gt;app&lt;/code&gt; variable.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = express();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, we configure the directory where the template files will be located. The first line of code set the view directory to &lt;code&gt;/views&lt;/code&gt;. The second line set the view engine to ejs. Learn more about ejs &lt;a href="https://ejs.co/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.set('views', __dirname + '/views');
app.set('view engine', 'ejs');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next we use the &lt;code&gt;express-session&lt;/code&gt; middleware so that we can support persistent login from users. the session(options) receives an object of settings read the express-session documentation to learn &lt;a href="https://expressjs.com/en/resources/middleware/session.html"&gt;more&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The default server-side session storage, MemoryStore, is not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing. For a list of stores, see &lt;a href="https://expressjs.com/en/resources/middleware/session.html#compatible-session-stores"&gt;compatible session stores&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(
  session(
    { 
      secret: process.env.SESSION_SECRET, 
      resave: false, 
      saveUninitialized: false 
    }));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here we redirect the user to the &lt;code&gt;localhost:8081/auth&lt;/code&gt; route once they visit &lt;code&gt;localhost:8081/&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/', function(req, res){
  res.redirect('/auth');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, we configure two routers on the app for handling &lt;code&gt;localhost:8081/auth/*&lt;/code&gt; requests and the other for handling account request &lt;code&gt;localhost:8081/account/*&lt;/code&gt; these routers will be discussed next.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// set Routes
app.use('/auth', authRouter);
app.use('/account', accountRouter);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;export the express app&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = app;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-our-application-routers"&gt;
  &lt;/a&gt;
  Creating our Application Routers
&lt;/h2&gt;

&lt;p&gt;First, we create a route directory. The files in this directory will be used as route handlers to handle different routes in our application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create Authentication Router&lt;/strong&gt;&lt;br&gt;
Create &lt;code&gt;auth.js&lt;/code&gt; file inside the &lt;code&gt;route&lt;/code&gt; directory, then import &lt;code&gt;express&lt;/code&gt;  and &lt;code&gt;passport&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const passport = require('passport');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We import &lt;code&gt;github&lt;/code&gt; which is an authentication middleware based on passport GitHub strategy this middleware will be explained later in this article. Also, import &lt;code&gt;authController&lt;/code&gt;. This module is meant to contain a bunch of functions that control user authentication but for now, it just contains the logout function.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const github = require('./../utils/github');
const authController = require('./../controller/auth');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We configure passport to use the &lt;code&gt;github&lt;/code&gt; middleware.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;passport.use(github);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here we use the &lt;code&gt;express.Router()&lt;/code&gt; class to create modular, mountable route handlers. then we use the &lt;code&gt;passport.initialize()&lt;/code&gt; function in the router this function is needed to initialize &lt;code&gt;passportjs&lt;/code&gt; on our routes, &lt;code&gt;passport.session()&lt;/code&gt; function enables persistent login with &lt;code&gt;passportjs&lt;/code&gt; in our route it handles session.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const router = express.Router();

router.use(passport.initialize());
router.use(passport.session());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;code&gt;serializeUser&lt;/code&gt; determines which data of the user object should be stored in the session. The result of the &lt;code&gt;serializeUser&lt;/code&gt; function is attached to the session as &lt;code&gt;req.session.passport.user = {}&lt;/code&gt;. Here we store the whole user object&lt;/p&gt;

&lt;p&gt;The first argument of &lt;code&gt;deserializeUser&lt;/code&gt; corresponds to the user object that was given to the &lt;code&gt;done&lt;/code&gt; function.  The object is attached to the request object as &lt;code&gt;req.user&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;passport.serializeUser(function(user, done) {
    done(null, user);
});

passport.deserializeUser(function(obj, done) {
    done(null, obj);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This line of code renders the &lt;code&gt;index.ejs&lt;/code&gt; file in the view directory once the user visits the &lt;code&gt;localhost:8081/auth&lt;/code&gt; route.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get('/', function(req, res){
    res.render('index', { user: req.user });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This line of codes tries to authenticate the user with GitHub once the &lt;br&gt;
&lt;code&gt;localhost:8081/auth/github&lt;/code&gt; route is visited. It Redirect the user to a GitHub conscent page and request for the user authorization, once the user authorize the app, it redirects the user back to the callback url which is &lt;code&gt;localhost:8081/auth/github/callback&lt;/code&gt; for this application on successful login the user will be redirected to &lt;code&gt;localhost:8081/account&lt;/code&gt;  by this line of code &lt;code&gt;res.redirect('/account'));&lt;/code&gt; . &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get('/github', passport.authenticate('github', { scope: [ 'user:email' ] }));

router.get('/github/callback', 
    passport.authenticate('github', { failureRedirect: '/' }),
    (req, res) =&amp;gt;  res.redirect('/account'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Once the user visit &lt;code&gt;localhost:8081/auth/logout&lt;/code&gt;. the session will be destroyed and the user will have to login again.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get('/logout', authController.logout);

module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Create account routes&lt;/strong&gt;&lt;br&gt;
Create &lt;code&gt;account.js&lt;/code&gt; file inside the &lt;code&gt;route&lt;/code&gt; directory, the following codes below do the same function as the ones on &lt;code&gt;auth.js&lt;/code&gt; , &lt;code&gt;accountController.js&lt;/code&gt; contains functions for handling user accounts.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const passport = require('passport');
const accountController = require('./../controller/account');

const router = express.Router();

router.use(passport.initialize());
router.use(passport.session());

passport.serializeUser(function(user, done) {
    done(null, user);
});

passport.deserializeUser(function(obj, done) {
    done(null, obj);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This route handler, handles get requests sent to this route &lt;code&gt;localhost:8081/account&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get('/', accountController.user);
module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-utility"&gt;
  &lt;/a&gt;
  Creating Utility
&lt;/h2&gt;

&lt;p&gt;First, we create a &lt;code&gt;utils&lt;/code&gt; directory. This directory is going to contain all our utility functions, for this project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create github middleware&lt;/strong&gt;&lt;br&gt;
This code exports a middleware this middleware is required when making an authentication request with &lt;code&gt;passport-github2&lt;/code&gt; strategy. Here we use passport-github2 strategy, we pass the configuration object which includes the &lt;code&gt;ClientId&lt;/code&gt;, &lt;code&gt;ClientSecret&lt;/code&gt;, and &lt;code&gt;CallbackUrl&lt;/code&gt;, these values should match the one used in creating the github application. if these values are correct and up to date the callback function with four parameters with be called&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;accessToken - GitHub access Token&lt;/li&gt;
&lt;li&gt;refreshToken - GitHub refresh Token&lt;/li&gt;
&lt;li&gt;profile - contains user data gotten from GitHub&lt;/li&gt;
&lt;li&gt;done - this is callback function with two arguments error and data is called, the profile.id data is used to query the mongo database to check if the user account exists, if it doesn't exist the user is created with the data gotten from github.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;User.findOne({githubId: profile.id })&lt;/code&gt; checks if a user with the same &lt;code&gt;github&lt;/code&gt; profile exists in the database, if it does exist the &lt;code&gt;return done(null, data);&lt;/code&gt; function will be called with the user data. If no user exists the user will be created and the &lt;code&gt;return done(null, data);&lt;/code&gt; will be called with the user data.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const GitHubStrategy = require('passport-github2').Strategy;
const User = require('../model/UserModel');

module.exports = new GitHubStrategy({
    clientID: process.env.GITHUB_CLIENT_ID,
    clientSecret: process.env.GITHUB_CLIENT_SECRET,
    callbackURL: process.env.GITHUB_CALLBACK_URL
  },
  function(accessToken, refreshToken, profile, done) {

    User.findOne({githubId: profile.id }).then((data, err) =&amp;gt; {

      if (!data) return User.create({
        githubId: profile.id,
        fullname: profile.displayName,
        username: profile.username,
        location: profile._json.location,
        phone: profile._json.phone,
        email: profile._json.email,
        profilePhoto: profile._json.avatar_url
      }).then((data, err) =&amp;gt; {
        return done(null, data);
      });

      else return done(null, data);
    });
  }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-database-model"&gt;
  &lt;/a&gt;
  Creating Database Model
&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;model&lt;/code&gt; directory. This directory is going to contain all our database Models, for this project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create User Model&lt;/strong&gt;&lt;br&gt;
First, we create a &lt;code&gt;userModel.js&lt;/code&gt; file inside the &lt;code&gt;model&lt;/code&gt; directory, import &lt;code&gt;mongoose&lt;/code&gt; into the project, then create a user schema.&lt;/p&gt;

&lt;p&gt;Everything in Mongoose starts with a Schema. Each schema maps to a MongoDB collection and defines the shape of the documents within that collection.&lt;/p&gt;

&lt;p&gt;Models are fancy constructors compiled from &lt;code&gt;Schema&lt;/code&gt; definitions. An instance of a model is called a document. Models are responsible for creating and reading documents from the underlying MongoDB database.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose');

const userSchema = new mongoose.Schema(
  {
    fullname: { type: String },
    username: { type: String },
    githubId: { type: String, unique: true },
    location: { type: String },
    phone: { type: String },
    email: { type: String, lowercase: true },
    profilePhoto: { type: String, default: '' }
  },
  { timestamps: true }
);

const User = mongoose.model('User', userSchema);

module.exports = User;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-controllers"&gt;
  &lt;/a&gt;
  Creating Controllers
&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;controller&lt;/code&gt; directory. This directory is going to contain all our controllers for this project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authentication controller&lt;/strong&gt;&lt;br&gt;
The &lt;code&gt;auth.js&lt;/code&gt; controller contains one function &lt;code&gt;logout&lt;/code&gt; to destroy user session and redirect user to the homepage.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.logout = (req, res, next) =&amp;gt; {
    req.logout();
    res.redirect('/');
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Authentication controller&lt;/strong&gt;&lt;br&gt;
The &lt;code&gt;account.js&lt;/code&gt; controller contains one function &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;req.user&lt;/code&gt; get the user data from the request parameter, &lt;code&gt;if (!user) res.redirect('/');&lt;/code&gt; redirect the user to &lt;code&gt;localhost:8081/&lt;/code&gt; if the user exist it readers the &lt;code&gt;account.ejs&lt;/code&gt; templete.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.user = (req, res, next) =&amp;gt; {
    const user = req.user;

    if (!user) res.redirect('/');

    res.render('account', {user: user});
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-views"&gt;
  &lt;/a&gt;
  Creating Views
&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;views&lt;/code&gt; directory, this directory will hold all the ejs templating codes for the application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create the Index ejs template&lt;/strong&gt;&lt;br&gt;
Create a file &lt;code&gt;index.ejs&lt;/code&gt; inside the &lt;code&gt;views&lt;/code&gt; directory. This templete renders a link to authenticate with github when user session is not available &lt;code&gt;&amp;lt;h2&amp;gt;Welcome! &amp;lt;a href="/auth/github"&amp;gt;Login with GitHub&amp;lt;/a&amp;gt; &amp;lt;/h2&amp;gt;&lt;/code&gt; and renders a link to view user account, when user session is available &lt;code&gt;&amp;lt;h2&amp;gt;Hello, &amp;lt;%= user.fullname %&amp;gt; &amp;lt;a href="/account"&amp;gt;View Account&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;% if (!user) { %&amp;gt;
    &amp;lt;h2&amp;gt;Welcome! &amp;lt;a href="/auth/github"&amp;gt;Login with GitHub&amp;lt;/a&amp;gt; &amp;lt;/h2&amp;gt;
&amp;lt;% } else { %&amp;gt;
    &amp;lt;h2&amp;gt;Hello, &amp;lt;%= user.fullname %&amp;gt; &amp;lt;a href="/account"&amp;gt;View Account&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;% } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Create the Account ejs template&lt;/strong&gt;&lt;br&gt;
Create a file &lt;code&gt;account.ejs&lt;/code&gt; inside the &lt;code&gt;views&lt;/code&gt; directory. This template simply displays user information, stored in the database.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;br&gt;
    &amp;lt;p&amp;gt;Full Name: &amp;lt;%= user.fullname %&amp;gt;&amp;lt;/p&amp;gt;&lt;br&gt;
    &amp;lt;p&amp;gt;Username: &amp;lt;%= user.username %&amp;gt;&amp;lt;/p&amp;gt;&lt;br&gt;
    &amp;lt;p&amp;gt;Email: &amp;lt;%= user.email %&amp;gt;&amp;lt;/p&amp;gt;&lt;br&gt;
    &amp;lt;p&amp;gt;location: &amp;lt;%= user.location %&amp;gt;&amp;lt;/p&amp;gt;&lt;br&gt;
    &amp;lt;p&amp;gt;&amp;lt;a href="/auth/logout"&amp;gt;Logout &amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;br&gt;
    &amp;lt;img src=&amp;lt;%= user.profilePhoto %&amp;gt; /&amp;gt;&lt;br&gt;
&amp;lt;/div&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#conclusion"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Conclusion&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;In this article you have learned how to authenticate users, using &lt;code&gt;passport-github2&lt;/code&gt; strategy, You learned how to create and configure a github application, and maintain user sessions within your application while using ejs as templating engine. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>mongodb</category>
      <category>node</category>
      <category>github</category>
    </item>
    <item>
      <title>The top 10 Linux Commands that Every Data Engineer Should Know</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 08 Nov 2021 14:38:19 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/the-top-10-linux-commands-that-every-data-engineer-should-know-mbg</link>
      <guid>https://dev.to/bobbyiliev/the-top-10-linux-commands-that-every-data-engineer-should-know-mbg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;No matter if you are a data analyst or a system administrator when working with unstructured files in Linux there are a set of commands that would help you a lot in your daily tasks.&lt;/p&gt;

&lt;p&gt;In this tutorial, you will learn the basics of the following commands and how to combine them using a pipe (&lt;code&gt;|&lt;/code&gt;) and analyze some raw data files.&lt;/p&gt;

&lt;p&gt;The list of the commands that we will go over are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cat&lt;/li&gt;
&lt;li&gt;head and tail&lt;/li&gt;
&lt;li&gt;pipe (&lt;code&gt;|&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;wc&lt;/li&gt;
&lt;li&gt;grep&lt;/li&gt;
&lt;li&gt;awk&lt;/li&gt;
&lt;li&gt;sort&lt;/li&gt;
&lt;li&gt;uniq&lt;/li&gt;
&lt;li&gt;sed&lt;/li&gt;
&lt;li&gt;tr&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;Here is a very simple example file that I will be using to go over each of the commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Username    ID  Name    Orders
rachel  9012    Rachel  2
laura   2070    Laura   3
craig   4081    Craig   4
mary    9346    Mary    1
jamie   5079    Jamie   2
bobby   1456    Bobby   3
tony 5489 Tony  6
devdojo 9874 DevDojo    3
tom 2589 Tom    2
rachel  9012    Rachel  2
laura   2070    Laura   3
craig   4081    Craig   4
mary    9346    Mary    1
jamie   5079    Jamie   2
bobby   1456    Bobby   3
tony 5489 Tony  6
devdojo 9874 DevDojo    3
tom 2589 Tom    2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, install &lt;code&gt;nano&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt install nano
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the text above and by using your favorite text editor create a new file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then paste the text and save the file.&lt;/p&gt;

&lt;p&gt;With the demo data in place, let's go ahead and learn some of the most important commands that you should know in order to analyze the data!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-cat-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;cat&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;cat&lt;/code&gt; command is used to print out the content of the file directly on your screen.&lt;/p&gt;

&lt;p&gt;The syntax is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat file_name_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our case, as the file name is &lt;code&gt;demo.txt&lt;/code&gt; we would run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is very useful when you do not know what's in the file and want to quickly take a quick glance.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-head-and-tail-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;head and tail&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;cat&lt;/code&gt; command is great as you can get the content of a file without opening it with an actual editor. &lt;/p&gt;

&lt;p&gt;However in some cases, if the file is huge, it might take a while to print out the whole content on your screen. So let's see how we could limit that!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-head-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;head&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;You would use the &lt;code&gt;head&lt;/code&gt; command to get the first 10 lines of a particular file.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;head demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would only print the first 10 lines of the file and would be very handy if you were working with a huge file and did not need to see the whole content on your screen.&lt;/p&gt;

&lt;p&gt;You can also add the &lt;code&gt;-n&lt;/code&gt; flag followed by the number of lines that you wanted to get in order to override the default behavior of only printing out 10 lines. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;head -n 5 demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above would only print out the first 5 lines of the file.&lt;/p&gt;

&lt;p&gt;You could actually exclude the &lt;code&gt;-n&lt;/code&gt; flag altogether and use a dash followed by the number of lines directly, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tail -12 demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is going to be the same as &lt;code&gt;tail -n 12 demo.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-tail-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;tail&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;tail&lt;/code&gt; command has the exact same syntax as the &lt;code&gt;head&lt;/code&gt; command and is also used to limit the number of lines that you get on the screen, however rather than getting the first lines of the file, using the &lt;code&gt;tail&lt;/code&gt; command, you would get the last lines instead.&lt;/p&gt;

&lt;p&gt;For example, if you wanted to get the last 2 lines of a specific file, you would use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tail -2 demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just as with &lt;code&gt;head&lt;/code&gt;, if you don't specify a number &lt;code&gt;tail&lt;/code&gt; would default to 10.&lt;/p&gt;

&lt;p&gt;Another very useful flag for the &lt;code&gt;tail&lt;/code&gt; command is the &lt;code&gt;-f&lt;/code&gt; flag. &lt;/p&gt;

&lt;p&gt;It is useful very handy as it will print out the last 10 lines of the file and then wait for new content to be added to the file and print it out on your screen in real-time. This is very useful when monitoring your server logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tail -f /var/log/nginx/access.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-pipe-raw-endraw-command"&gt;
  &lt;/a&gt;
  The pipe &lt;code&gt;|&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The pipe (&lt;code&gt;|&lt;/code&gt;) is probably one of the most powerful commands out there. The pipe lets you redirect the output of one command to another command. This allows you to chain multiple commands together and manipulate/analyze so that you could get the exact output that you need.&lt;/p&gt;

&lt;p&gt;For example, both &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; can be combined with the &lt;code&gt;cat&lt;/code&gt; command using a pipe, &lt;code&gt;|&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | head -2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, we would redirect the output of the &lt;code&gt;cat&lt;/code&gt; command and pass it to the &lt;code&gt;head -2&lt;/code&gt; command. &lt;/p&gt;

&lt;p&gt;We are going to use the pipe command later on to combine most of the commands that we are going to review in this tutorial!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-wc-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;wc&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;wc&lt;/code&gt; command stands for &lt;code&gt;Word Count&lt;/code&gt; and it does exactly that, it counts the lines, words, and characters in a text file.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wc demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; 19  76 362 demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a quick rundown of the output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;19&lt;/code&gt;: this indicates that there are 19 lines in the file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;76&lt;/code&gt;: this is the total number of words in the file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;362&lt;/code&gt;: and finally this is the total count of characters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some handy flags that you could use in order to get one of those 3 feeds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-l&lt;/code&gt;: print only the number of lines&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-w&lt;/code&gt;: print only the number of words&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-c&lt;/code&gt;: print only the number of characters&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-grep-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;grep&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;grep&lt;/code&gt; command is probably my favorite one, you can use it to search for a specific string in a file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d2BRV4xK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/ncE2E3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d2BRV4xK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/ncE2E3w.png" alt="grep command in linux" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The syntax is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep some_string demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say that you wanted to get all of the lines that include the string &lt;code&gt;bobby&lt;/code&gt; in them. To do so you would use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep bobby demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bobby   1456    Bobby   3
bobby   1456    Bobby   3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, the grep command is case sensitive, so if you were to search for the string &lt;code&gt;bOBbY&lt;/code&gt; you would not get any results back:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep bOBbY demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, there is a handy flag that you could use in order to make the &lt;code&gt;grep&lt;/code&gt; command case insensitive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -i bOBbY demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CdgWMTOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/d7rf2Ho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CdgWMTOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/d7rf2Ho.png" alt="output of grep command" width="576" height="91"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, &lt;code&gt;grep&lt;/code&gt; would match all string references:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -i to demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XMs6obEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/2fuJxo7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMs6obEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/2fuJxo7.png" alt="grep -i output" width="245" height="93"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see we are getting a match in all words. This might be a problem if you are looking for a specific word and not just a substring in the word. For example, in the output above, we are getting a match for &lt;code&gt;Tom&lt;/code&gt; and &lt;code&gt;Tony&lt;/code&gt; as we are looking for the &lt;code&gt;to&lt;/code&gt; string. &lt;/p&gt;

&lt;p&gt;To only match whole words, you can use the &lt;code&gt;-w&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -w to demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above, would not match the &lt;code&gt;tony&lt;/code&gt; and &lt;code&gt;tom&lt;/code&gt; words. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-awk-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;awk&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;AWK is actually not just a command but a while scripting language. It is used for text processing. For the scope of this post, we are only going to scratch the surface of &lt;code&gt;awk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;awk&lt;/code&gt; command lets you print out specific columns. By default, the delimiter that &lt;code&gt;awk&lt;/code&gt; uses is a space or a tab.&lt;/p&gt;

&lt;p&gt;In our case, each column would be considered as: &lt;code&gt;Username&lt;/code&gt;, &lt;code&gt;ID&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Orders&lt;/code&gt;. Each column would be represented as &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt; and &lt;code&gt;$4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So if we wanted to print out only the name column, we would use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{ print $3 }'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Name
Rachel
Laura
Craig
Mary
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could print multiple columns as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{ print $3 " " $1 }'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could also specify a different delimiter based on your data file by using the &lt;code&gt;-F&lt;/code&gt; flag. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-sort-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;sort&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;sort&lt;/code&gt; command lets you sort your file in a particular order. By default, &lt;code&gt;sort&lt;/code&gt; would expect ASCII content and would sort the content alphabetically.&lt;/p&gt;

&lt;p&gt;To sort the users alphabetically, you could just use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | sort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's combine this with &lt;code&gt;awk&lt;/code&gt; and sort the users by orders:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First let's get the 4th and the 3th columns which are the orders and the name of each user:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{print $4 " " $3 }'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then with an extra pipe let's sort them:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{print $4 " " $3 }' | sort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To sort the items in reverse order, you could add the &lt;code&gt;-r&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{print $4 " " $3 }' | sort -r
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A very handy flag is the &lt;code&gt;-h&lt;/code&gt; flag, which lets you sort by human-readable numbers which includes comparing numbers in GB, KB and etc.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-uniq-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;uniq&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;As the name suggests, the &lt;code&gt;uniq&lt;/code&gt; command, lets you filter out and only show the &lt;code&gt;uniq&lt;/code&gt; line records. In most cases, you would use the &lt;code&gt;uniq&lt;/code&gt; command together with the &lt;code&gt;sort&lt;/code&gt; command, as &lt;code&gt;uniq&lt;/code&gt; only filters out identical lines that are right after each other.&lt;/p&gt;

&lt;p&gt;I intentionally created the file so that there are some duplicate lines. Let's filter them out by using the &lt;code&gt;uniq&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{ print $1 }' | sort | uniq 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Username
bobby
craig
devdojo
jamie
laura
mary
rachel
tom
tony
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding the &lt;code&gt;-c&lt;/code&gt; flag, you would also get a count of how many times each line repeats in the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{ print $1 }' | sort | uniq -c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      1 Username
      2 bobby
      2 craig
      2 devdojo
      2 jamie
      2 laura
      2 mary
      2 rachel
      2 tom
      2 tony
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-raw-sed-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;sed&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;sed&lt;/code&gt; command let's you do a search and replace for a specific string in a text or a file. SED stands for stream editor.&lt;/p&gt;

&lt;p&gt;Let's go ahead and use the &lt;code&gt;grep&lt;/code&gt; command to find all of the references for &lt;code&gt;devdojo&lt;/code&gt; in the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | grep devdojo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;devdojo 9874 DevDojo    3
devdojo 9874 DevDojo    3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's go and use &lt;code&gt;sed&lt;/code&gt; to change the &lt;code&gt;devdojo&lt;/code&gt; username to something else, like &lt;code&gt;thedevdojo&lt;/code&gt; for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | grep devdojo | sed 's/devdojo/thedevdojo/g'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;thedevdojo  9874 DevDojo    3
thedevdojo  9874 DevDojo    3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's have another example and change all of the references of the small latter &lt;code&gt;b&lt;/code&gt; to a capital case &lt;code&gt;B&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | sed 's/b/B/g'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's have a quick rundown of the &lt;code&gt;sed&lt;/code&gt; command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;s&lt;/code&gt; - this stands for search and searches for a specific string.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt; - this is the delimiter and could be changed in case that you are searching for the &lt;code&gt;/&lt;/code&gt; character.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;search_string&lt;/code&gt; - the string that you are searching for.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;replace_string&lt;/code&gt; - the string that you want to replace the matches with&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g&lt;/code&gt; - stands for global and indicates that all matches on a specific line should be replaced.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could also the &lt;code&gt;sed&lt;/code&gt; command to implement the changes directly to the file by using the &lt;code&gt;-i&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sed -i 's/devdojo/thedevdojo/g' demo.txt 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would change the file and update all of the references for &lt;code&gt;devdojo&lt;/code&gt; to &lt;code&gt;thedevdojo&lt;/code&gt;. You would not get any output back.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that this process is irreversible, so if you are changing an important file, make sure to take a backup first!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-tr-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;tr&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;tr&lt;/code&gt; command is used to change or delete characters. For example, you could use &lt;code&gt;tr&lt;/code&gt; to change all lower case characters to upper case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | tr "[:lower:]" "[:upper:]"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;USERNAME    ID  NAME    ORDERS
RACHEL  9012    RACHEL  2
LAURA   2070    LAURA   3
CRAIG   4081    CRAIG   4
MARY    9346    MARY    1
JAMIE   5079    JAMIE   2
BOBBY   1456    BOBBY   3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also change the &lt;code&gt;tab&lt;/code&gt; character to a command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | tr '\t' ','
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is quite handy when you want to change the formatting of a specific file. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#materialize"&gt;
  &lt;/a&gt;
  &lt;a href="https://materialize.com"&gt;Materialize&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;The above shell commands are very handy to ad-hoc analyze a specific file. &lt;br&gt;
However, if you want to take this to the next level and be able to use SQL to actually analyze a dynamically changing file source, I would recommend taking a look at Materialize.&lt;/p&gt;

&lt;p&gt;Materialize is a streaming database for real-time analytics.&lt;/p&gt;

&lt;p&gt;It is not a substitution for your transaction database, instead, it accepts input data from a variety of sources like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Messages from streaming sources like Kafka&lt;/li&gt;
&lt;li&gt;Archived data from object stores like S3&lt;/li&gt;
&lt;li&gt;Change feeds from databases like PostgreSQL&lt;/li&gt;
&lt;li&gt;Date in Files: CSV, JSON, and even unstructured files like logs (what we'll be using today.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it lets you write standard SQL queries (called materialized views) that are kept up-to-date instead of returning a static set of results from one point in time.&lt;/p&gt;

&lt;p&gt;To see the full power of Materialize, make sure to check out this demo from their official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/demos/log-parsing/"&gt;Materialize Log Parsing Demo&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;As a next step I would recommend testing out the commands that you've just learned with different data files that you have in place!&lt;/p&gt;

&lt;p&gt;I would also recommend taking a look at this script there that I've created to parse Nginx/Apache access logs which includes the majority of the commands that we've used in this tutorial:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/bobbyiliev/bash-script-to-summarize-your-nginx-and-apache-access-logs"&gt;BASH Script to Summarize Your NGINX and Apache Access Logs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about Bash scripting, make sure to check out this free ebook here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/bobbyiliev/open-source-introduction-to-bash-scripting-ebook-guide"&gt;Open-Source Introduction to Bash Scripting Ebook/Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have tried out Materialize, make sure to star the project on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/MaterializeInc/materialize"&gt;Materialize GitHub Repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope that you've found this tutorial helpful!&lt;/p&gt;

</description>
      <category>database</category>
      <category>linux</category>
      <category>bash</category>
      <category>devops</category>
    </item>
    <item>
      <title>jQuery is a fun</title>
      <author>sankha</author>
      <pubDate>Mon, 08 Nov 2021 14:37:52 +0000</pubDate>
      <link>https://dev.to/jsankha/jquery-is-a-fun-5bki</link>
      <guid>https://dev.to/jsankha/jquery-is-a-fun-5bki</guid>
      <description>&lt;p&gt;As a web designer or developer, we have few beautiful weapons in our armory that showcase our creativity while developing a web page and enhanced the user experience lot more. One of such mechanism is manipulating of the Document Object Model (the Dom) by jQuery.  Before we jump into the nitty-gritty of the DOM manipulation when first see what the Document Object Model all about. According to W3 school “the DOM defines a standard for accessing documents” and The HTML DOM is a standard object model and programming interface for HTML. So, when a web page is loaded, the browser creates and define a logical structure of HTML elements for a web page, and based on that structure browser render the HTML elements page on its screen. &lt;/p&gt;

&lt;p&gt;The HTML DOM model is look like a tree of Objects &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QkHxNx7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w1dr9yqs4c0v5h7yf95.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QkHxNx7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w1dr9yqs4c0v5h7yf95.jpg" width="588" height="342"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, we see what is jQuery all about, again according the W3 school “jQuery is a lightweight, write less, do more, JavaScript library.” It is a cross-platform and all most all major browsers, like Internet Explorer, Chrome, Mozilla Firefox, Safari and opera as well mobile browsers are supporting it. &lt;/p&gt;

&lt;p&gt;So, why we need to do The HTML DOM manipulation with the jQuery. Actually, with jQuery we can access all the HTML DOM elements and can change the properties and behavior of the HTML DOM very easily and effortlessly. Obviously, with the HTML DOM manipulation, user experience enhances a lot. The jQuery provides various methods to add, edit or delete DOM element(s) in an HTML page, but in this article, it is not possible to provide details of all methods. &lt;/p&gt;

&lt;p&gt;In my view, with the combination of the HTML DOM, CSS and jQuery we can provide very useful front-end features without any back-end dependency. For example, nowadays, one of the very popular features, which I often called as utilities is to show password value in a text format in the password field input box by the clicking on an eye icon or checkbox check status, or masking a few characters of a bank account number or any user id, citizenship number and so on. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Here is a small JavaScript code to show hides password values in a text box clicking on an eye icon. &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;HTML&lt;/b&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;div class="row"&amp;gt;
        &amp;lt;div class="col-12"&amp;gt;
            &amp;lt;label for="Password" class="form-lable__login"&amp;gt;&amp;lt;b&amp;gt;Enter Password&amp;lt;/b&amp;gt;&amp;lt;/label&amp;gt;
            &amp;lt;input type="password" class="frmInp logRegi__inp showHidePass" id="userpassword" placeholder="" name="psw" &amp;gt;

             &amp;lt;i class='fa fa-eye eyeNormal ShowHidePass' aria-hidden="true"&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;!-- font asesome eye icon fa fa-eye--&amp;gt;
             &amp;lt;i class='fa fa-eye-slash eyeSlash ShowHidePass' style="display: none;" aria-hidden="true"&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;!-- font asesome eye icon fa fa-eye--&amp;gt;


        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;JavaScript&lt;/b&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;script&amp;gt;
          $(function() {
              $(".ShowHidePass").click(function() {
                  var checkClassStatus = $(this).hasClass("fa-eye");

                  if(checkClassStatus) {
                    $(".showHidePass").attr("type","text");
                     $(this).removeClass("fa-eye").addClass("fa-eye-slash");
                  }

                  else {
                    $(".showHidePass").attr("type","password");
                     $(this).removeClass("fa-eye-slash").addClass("fa-eye");
                  }

              })
          });

      &amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can do a lot of useful and user-friendly front-end functionality with the help of jQuery. Another nice example is when a user puts focus on an input box, the input box label moves up automatically creating a space to enter a value. Though this is totally depending up to the designer/developers’ choice where to put the input label, but as most of the time we do the responsive design, i.e., same design content adjusts automatically to various device screen sizes based on available screen width, so it’s best practice to user to available screen space judiciously. As if we place a label above of an input box, for font-size and other CSS property label will take for the height space which sometimes creates unnecessary scrolling in the browser. But if we place the label top of an input box and move the label up and decrease the font-size a bit while user put focus on the input box not only, we save some space as well as it’s given you a nice animation effect.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Here is a small snippet of the code &lt;/b&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
     $(function() {   
    $(".logRegi__inp").each(function() {
      /* While user focusing on an input textbox moves the label upward */
       $(this).focus(function() {
           $(this).siblings(".form-lable__login").addClass("form-lable__login--active");
           $(".frmInp").removeClass("InpBoxError");
           $(".txtError").removeClass("showErrorHide");
           $(".txtError").siblings(".loginInpIcon").removeClass("loginInpIconError");
       });

/*when user clicks outside of the input box, i.e., anywhere in the browser screen without typing anything in the textbox, bringing back the label top of the input textbox, which already move up while focused */
       $(this).blur(function() {
        var getTxt = $(this).val();
        if(getTxt!="") {
            $(this).siblings(".form-lable__login").addClass("form-lable__login--active");   
        }

        else {
            $(this).siblings(".form-lable__login").removeClass("form-lable__login--active");
        }
    });

       $(this).keyup(function(e) {
            var getTxt = $(this).val();

            var keyCode = e.keyCode || e.which; 

            $(this).val($(this).val().replace(/\s/g, '')); // disable typing whitespace in textbox // 

           if(getTxt!="" || keyCode == 9) {
               $(this).siblings(".form-lable__login").addClass("form-lable__login--active");

           }

           else {
               $(this).siblings(".form-lable__login").removeClass("form-lable__login--active");
           } 
       });
    });
});.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;HTML&lt;/b&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
      &amp;lt;div class="container"&amp;gt;
                                &amp;lt;div class="row mb-30P"&amp;gt;
                                    &amp;lt;div class="col-12"&amp;gt;
                                         &amp;lt;input type="text" class="frmInp logRegi__inp" id="username" placeholder="" name="uname" &amp;gt;
                                         &amp;lt;label for="uname" class="form-lable__login"&amp;gt;&amp;lt;b&amp;gt;UserID&amp;lt;/b&amp;gt;&amp;lt;span class="req"&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;/label&amp;gt;
                                         &amp;lt;i class='fas fa-user loginInpIcon'&amp;gt;&amp;lt;/i&amp;gt;
                                         &amp;lt;p class="txtError username mb-0"&amp;gt;&amp;lt;/p&amp;gt;
                                    &amp;lt;/div&amp;gt;
                                &amp;lt;/div&amp;gt;


                                &amp;lt;div class="row mb-30P"&amp;gt;
                                    &amp;lt;div class="col-12"&amp;gt;
                                        &amp;lt;input type="password"  class="frmInp logRegi__inp showHidePass" id="userpassword" placeholder="" name="psw" &amp;gt;
                                        &amp;lt;label for="Password" class="form-lable__login"&amp;gt;&amp;lt;b&amp;gt;Password&amp;lt;/b&amp;gt;&amp;lt;span class="req"&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;/label&amp;gt;
                                         &amp;lt;i class='fas fa-lock loginInpIcon'&amp;gt;&amp;lt;/i&amp;gt;
                                         &amp;lt;p class="txtError userpassword mb-0"&amp;gt;&amp;lt;/p&amp;gt;
                                         &amp;lt;p class="mb-0 pt-2"&amp;gt;
                                            &amp;lt;input type="checkbox" class="showHidePassCheck"&amp;gt;&amp;lt;span class="common-text__msg pl-2"&amp;gt;Show Password&amp;lt;/span&amp;gt;
                                         &amp;lt;/p&amp;gt;

                                    &amp;lt;/div&amp;gt;
                                &amp;lt;/div&amp;gt;


                                &amp;lt;div class="row btn-row"&amp;gt;
                                    &amp;lt;div class="col-12 text-center"&amp;gt;
                                                &amp;lt;input type="submit" value="Login" class="btnCommon"&amp;gt;
                                                  &amp;lt;button class="btnCommon" type="reset"&amp;gt;Cancel&amp;lt;/button&amp;gt;
                                    &amp;lt;/div&amp;gt;
                                    &amp;lt;div class="col-12 text-center"&amp;gt;
                                        &amp;lt;p class="ForGotpsw mb-0 w-100"&amp;gt; &amp;lt;a href="forgotPassWord.html"&amp;gt;Forgot password?&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
                                        &amp;lt;p class="ForGotpsw mb-0 pt-0"&amp;gt; Don't have an account &amp;lt;a href="registration.html" class="createAccount"&amp;gt;Create Now&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
                                    &amp;lt;/div&amp;gt;
                                &amp;lt;/div&amp;gt;

                            &amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;CSS for label Active Class&lt;/b&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
.form-lable__login {
    position: absolute;
    top: 16px;
    left: 30px;
    font-size: 0.875rem;
    pointer-events: none;
    transition: all 0.3s ease-in;
    margin-bottom: 0rem;
    transform: translateY(0px);
}

/*active label Class */
.form-lable__login.form-lable__login--active {
    top: -20px;
    left: 17px;
    font-size: 0.688rem;
    color: #5f6368;
    opacity: 0.5;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
It’s very difficult to sum up all the small interactive code in a single article. But as we all know with the advancement of jQuery; we can do lots of front-end user interactivity that enhanced the user experience more attractive and entertaining. 
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to upload a file to Azure Blob using Spring Boot?</title>
      <author>ROHAN KADAM</author>
      <pubDate>Mon, 08 Nov 2021 14:34:32 +0000</pubDate>
      <link>https://dev.to/rohan2596/how-to-upload-a-file-to-azure-blob-using-spring-boot-3c3a</link>
      <guid>https://dev.to/rohan2596/how-to-upload-a-file-to-azure-blob-using-spring-boot-3c3a</guid>
      <description>&lt;p&gt;Hello👋, Its Rohan Kadam😊&lt;/p&gt;

&lt;p&gt;Today cloud is becoming come standard for the development of any software. We used the cloud in every aspect of the programming cycle be it uploading our code to &lt;a href="https://medium.com/javarevisited/7-best-courses-to-master-git-and-github-for-programmers-d671859a68b2?source=---------9------------------"&gt;Github &lt;/a&gt;or Gitlab or be it using Google Drive or Dropbox or uploading our personal files. In the article, we are going to understand how we can implement file** upload to Azure Blob Using &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-spring-boot-in-2020-best-of-lot-6ffce88a1b6e"&gt;Spring Boot&lt;/a&gt;**.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcPkeYVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6000/1%2AtzvH8h7KT6vuFZjSatf8sA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcPkeYVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6000/1%2AtzvH8h7KT6vuFZjSatf8sA.jpeg" alt="How to upload a file to Azure Blob Using Spring Boot?" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-blob-storage-mean"&gt;
  &lt;/a&gt;
  What Does Blob Storage Mean?
&lt;/h3&gt;

&lt;p&gt;Blob storage is a feature in Microsoft Azure that lets developers store unstructured data in Microsoft’s cloud platform. This data can be accessed from anywhere in the world and can include audio, video and text. Blobs are grouped into “containers” that are tied to user accounts. Blobs can be manipulated by using any programming language. Blobs are widely used by streaming companies with high volumes of audio and video data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-used-blob-storage"&gt;
  &lt;/a&gt;
  Why used Blob Storage?
&lt;/h3&gt;

&lt;p&gt;Blob storage is ideal for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Accessing images or documents directly to devices.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Storing files for distributed access.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Streaming video and audio.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Storing data for backup and restore disaster recovery, and archiving.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Storing data for analysis by an on-premises or Azure-hosted service&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-implement-blob-storage"&gt;
  &lt;/a&gt;
  How to implement blob Storage?
&lt;/h3&gt;

&lt;p&gt;Blob Storage is widely been used by the industry today for developing great user-friendly apps. Its best known for storing files, images and binary data. Today we are going to implement the Azure Blob using the spring boot and the programming language Java. In this part of we going to cover the Read, Write and Upload operations for the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-how-to-generate-spring-boot-project"&gt;
  &lt;/a&gt;
  Step 1: How to generate Spring Boot Project?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://start.spring.io/"&gt;&lt;strong&gt;Spring Initializr&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-which-dependencies-should-i-include"&gt;
  &lt;/a&gt;
  Step 2: Which dependencies should I include?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5L_AEiFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2720/1%2A2aMKmXTE1xAakZdoFY_ZFA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5L_AEiFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2720/1%2A2aMKmXTE1xAakZdoFY_ZFA.png" alt="Dependencies" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-what-will-the-configuration-be-for-my-azure"&gt;
  &lt;/a&gt;
  Step 3: What will the configuration be for my Azure?
&lt;/h3&gt;

&lt;p&gt;When we talk of configuration is we required three main parts&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Blob Container Name&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Account Key — Secret Key&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blob Container Endpoint&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PmzSVf_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AmnsXLS2Id_oUinI5HH1jVg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PmzSVf_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AmnsXLS2Id_oUinI5HH1jVg.png" alt="Credits: Microsoft" width="331" height="111"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ULSi5NxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2404/1%2ArnflQLltovS_bR8ba0rItg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULSi5NxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2404/1%2ArnflQLltovS_bR8ba0rItg.png" alt="" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note:- Need to get the above from the Azure website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-need-to-create-a-controller-endpoint-for-upload-amp-read-file"&gt;
  &lt;/a&gt;
  Step 4:- Need to Create a Controller endpoint for Upload &amp;amp; Read file.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1 →How to upload files to Azure Blob Storage?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q38IJFu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3364/1%2AD2mgF8EqN1VFRZ2VO-nNoQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q38IJFu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3364/1%2AD2mgF8EqN1VFRZ2VO-nNoQ.png" alt="Upload File to Blob Storage" width="880" height="590"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2 →How to read files from Azure Blob Storage?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OawH_oj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2468/1%2A-rAVHk2JHlezGFGUL6y6xQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OawH_oj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2468/1%2A-rAVHk2JHlezGFGUL6y6xQ.png" alt="Read File From Blob Storage" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3 →How to write files to Azure Blob Storage?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRWnRK-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3100/1%2AulPxjmgjvlw4Fxb2UbWopA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRWnRK-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3100/1%2AulPxjmgjvlw4Fxb2UbWopA.png" alt="Write Blob From Storage" width="880" height="538"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-postman-endpoint-upload-file"&gt;
  &lt;/a&gt;
  Step 5: Postman Endpoint Upload File.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3zNwDIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ALpRngwHh_lYRPXwSTte8bQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3zNwDIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ALpRngwHh_lYRPXwSTte8bQ.png" alt="azure_blob_upload_file" width="880" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-postman-endpoint-for-reading-file"&gt;
  &lt;/a&gt;
  Step 6: Postman Endpoint for reading File.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_nbXZe5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ARvIVKbXyUFSFuo526cENaQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_nbXZe5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ARvIVKbXyUFSFuo526cENaQ.png" alt="azure_blob_read_file" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:-
&lt;/h3&gt;

&lt;p&gt;In the article, we tried to answers many questions related to Azure Blob and how to implement the same using Spring boot. Blob storage has widely been used to store unstructured data such as text, images or binary etc are used by many fortune 500 companies to provide service to their users.&lt;/p&gt;

&lt;p&gt;Please do share and like💖 if you find the article useful. Follow me on medium &lt;a href="https://dev.toundefined"&gt;Rohan Ravindra Kadam&lt;/a&gt; and on Twitter at &lt;a href="https://twitter.com/rohankadam25"&gt;**rohankadam25&lt;/a&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-azure-storage"&gt;&lt;strong&gt;How to use the Spring Boot Starter for Azure Storage&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" alt="Thank You, Viewers — Rohan Kadam" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>programming</category>
      <category>opensource</category>
      <category>devops</category>
    </item>
    <item>
      <title>What is Serverless?</title>
      <author>Abhinav Pandey</author>
      <pubDate>Mon, 08 Nov 2021 14:32:44 +0000</pubDate>
      <link>https://dev.to/abh1navv/what-is-serverless-36on</link>
      <guid>https://dev.to/abh1navv/what-is-serverless-36on</guid>
      <description>&lt;p&gt;Serverless computing is considered the future(if not already the present) of application deployment.&lt;/p&gt;

&lt;p&gt;It is widely popular in microservices architecture which speaks in the favour of small, isolated and stateless applications. &lt;/p&gt;

&lt;p&gt;Here I will introduce serverless computing in the most beginner friendly way and leave you with already curated resources from Microsoft to explore further.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TJ1QzSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://benjaminwfox.com/images/blog/tech/server-no-server-serverless-apps/princess-bride-serverless-meme.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TJ1QzSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://benjaminwfox.com/images/blog/tech/server-no-server-serverless-apps/princess-bride-serverless-meme.jpg" alt="Princess bride serverless meme" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt; (key phrases from Wikipedia):&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;cloud provider allocates machine resources on demand&lt;/li&gt;
&lt;li&gt;when an app is not in use, there are no computing resources allocated to the app&lt;/li&gt;
&lt;li&gt;pricing is based on the actual amount of resources consumed by an application&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Traditional application deployment includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Buying or renting servers.&lt;/li&gt;
&lt;li&gt;Keeping them updated.&lt;/li&gt;
&lt;li&gt;Taking care of availability and security.&lt;/li&gt;
&lt;li&gt;Paying for them even if nobody uses them.&lt;/li&gt;
&lt;li&gt;Add more servers if people get fond of your application.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;How is serverless different?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cloud provider takes care of the servers.&lt;/li&gt;
&lt;li&gt;Security and availability are the provider's responsibility.&lt;/li&gt;
&lt;li&gt;Pay only for the time when the services are in use.&lt;/li&gt;
&lt;li&gt;Service scales up and down instantly(almost) as per the load.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;What are the popular serverless products?&lt;/strong&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;AWS Lambda&lt;/li&gt;
&lt;li&gt;Azure Functions&lt;/li&gt;
&lt;li&gt;Google Cloud Functions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Technical features&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code being executed is typically called "function"&lt;/li&gt;
&lt;li&gt;Functions are stateless - they cannot hold data across requests like in-memory objects. Any persistence needs to be handled with the help of connected services like a database or file storage.&lt;/li&gt;
&lt;li&gt;Functions are started using triggers - types of triggers include HTTP(s) requests, events and cron-jobs. Events is a vague type which can include a huge list of possibilites from changing a row in a DB to getting an error in logs of another application.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-happens-when-a-request-is-received-for-the-first-time"&gt;
  &lt;/a&gt;
  What happens when a request is received for the first time?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The function is deployed and started - for e.g. a command like "node server.js" is executed on a random machine.&lt;/li&gt;
&lt;li&gt;When the request has been attended to, the function is available to be shut down.&lt;/li&gt;
&lt;li&gt;The provider could be lazy here and may keep it on for some more time.&lt;/li&gt;
&lt;li&gt;If another request comes in the meantime, it can go to the same server which was already running. If no requests for some time, the server cleans up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This leads to some important observations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You can never be sure if consequent requests will lead to the same server - therefore, as mentioned above, treat functions as stateless - the design should not rely on any state being maintained on the server. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The first request may take some time (cold start) - there will be a delay in attending to the first request if there are no servers already running. (typically 100ms to a few seconds)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Best practice&lt;/strong&gt; - keep functions lighter for quicker deployments and start-up time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-should-you-care-about-serverless-computing"&gt;
  &lt;/a&gt;
  Why should you care about serverless computing?
&lt;/h3&gt;

&lt;p&gt;There are a lot of boring reasons but one reason should be enough - &lt;strong&gt;Money&lt;/strong&gt; 💰 &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serverless is the cheapest way to deploy a backend application. &lt;/li&gt;
&lt;li&gt;There are free quotas every month based on the number of requests and the pricing tier.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;No popularity = No bill&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: We deployed a few functions on Azure for a popular global website and it cost us 8 USD for 3 months. The e-commerce sale made due to those functions was around 100,000 USD.&lt;/p&gt;

&lt;p&gt;Thank you for reading. &lt;/p&gt;

&lt;p&gt;If this gets you interested about Serverless, you can check out these resources from Azure.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Deploy your own function in a free sandbox - &lt;a href="https://docs.microsoft.com/en-in/learn/modules/create-serverless-logic-with-azure-functions"&gt;https://docs.microsoft.com/en-in/learn/modules/create-serverless-logic-with-azure-functions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In depth modules for learning - &lt;a href="https://docs.microsoft.com/en-in/learn/paths/create-serverless-applications"&gt;https://docs.microsoft.com/en-in/learn/paths/create-serverless-applications&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you want to connect with me, you can find me on &lt;a href="https://www.twitter.com/abh1navv"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>architecture</category>
      <category>azure</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Automate deployment in simplest way by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Mon, 08 Nov 2021 14:22:43 +0000</pubDate>
      <link>https://dev.to/silvenleaf/automate-deployment-in-simplest-way-by-silvenleaf-17p</link>
      <guid>https://dev.to/silvenleaf/automate-deployment-in-simplest-way-by-silvenleaf-17p</guid>
      <description>&lt;p&gt;Ahoy there! Let's automate deploying our Web App! We'll be using React for this. Don't worry, because react or angular or vue, that's not important. The core concept is same for all! Also we'll be going from level 0. So even if you don't know React or any of these, just hop on!!&lt;/p&gt;

&lt;p&gt;It is a part of my future DevOps and automation blogs. So stay tuned for more amazing stuff!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-lets-create-a-react-app"&gt;
  &lt;/a&gt;
  Step 0: Let's create a React App
&lt;/h3&gt;

&lt;p&gt;To deploy an app, we need an app, right? So let's create one. But if you don't like React, go with Angular, Vue or whatever you like.&lt;/p&gt;

&lt;p&gt;First create a github repo (assuming you have a github account, if not, create one and then create a github repo) and then clone it onto your computer. Open it in your favorite text-editor (mine VS Code). Then type the following command to create a react app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app client &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a React App named &lt;strong&gt;client&lt;/strong&gt; in TypeScript. Replace &lt;strong&gt;client&lt;/strong&gt; with your own app name, I prefer &lt;strong&gt;client&lt;/strong&gt; but you can name it anything)&lt;/p&gt;

&lt;p&gt;Now, type the following command to go inside it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then type this to start your react app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! Wait a while and it'll start the development server and open the React App in your browser. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdXphk1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0ypxpk86ccsxi4mj9mv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdXphk1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0ypxpk86ccsxi4mj9mv.png" alt="React App" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's get into the fun stuff. Let's deploy the app!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-1-deploy-app"&gt;
  &lt;/a&gt;
  Step 1: Deploy App
&lt;/h3&gt;

&lt;p&gt;Type this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm i &lt;span class="nt"&gt;-D&lt;/span&gt; gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll go inside client folder and then install that "gh-pages" package.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;"npm i -D X"&lt;/strong&gt; is the shorthand for &lt;strong&gt;"npm install --save-dev X"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Now open the &lt;strong&gt;package.json&lt;/strong&gt; file of &lt;strong&gt;client&lt;/strong&gt; folder and add the &lt;strong&gt;"homepage"&lt;/strong&gt; property, and also add the following &lt;strong&gt;"deploy"&lt;/strong&gt; and &lt;strong&gt;"predeploy"&lt;/strong&gt; scripts, something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stuff&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://{YOUR_GITHUB_USERNAME}.github.io/{YOUR_APP_NAME_HERE}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

   &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="nl"&gt;"predeploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"deploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gh-pages -d build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts eject"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="err"&gt;...your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stuff&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open your terminal, and type this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll start deploying your app. Wait for it to complete. Once done, go to the homepage URL that you specified and you'll see your app live.&lt;/p&gt;

&lt;p&gt;Your URL: &lt;a href="https://SilvenLEAF.github.io/"&gt;"http://{YOUR_GITHUB_USERNAME}.github.io/{YOUR_APP_NAME_HERE}"&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdXphk1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0ypxpk86ccsxi4mj9mv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdXphk1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0ypxpk86ccsxi4mj9mv.png" alt="React App" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#step-2-automate-deployment"&gt;
  &lt;/a&gt;
  Step 2: Automate Deployment
&lt;/h3&gt;

&lt;p&gt;Yes, we deployed our app, but that's not what we want right? We want to make it all automated. So let's do this. &lt;/p&gt;

&lt;p&gt;Open a new terminal and type the following command on the root level of your repo (NOT inside &lt;strong&gt;client&lt;/strong&gt; folder).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; .github/workflows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll create a &lt;strong&gt;".github"&lt;/strong&gt; folder in the root level and create another folder inside it named &lt;strong&gt;workflows&lt;/strong&gt;. I mean, create &lt;strong&gt;"workflows"&lt;/strong&gt; folder inside &lt;strong&gt;".github"&lt;/strong&gt; folder which is on the root level of our project (at the same level as &lt;strong&gt;"client"&lt;/strong&gt; react app folder).&lt;/p&gt;

&lt;p&gt;[NOTE: &lt;strong&gt;"mkdir"&lt;/strong&gt; bash command create a directory/folder. The &lt;strong&gt;"-p"&lt;/strong&gt; flag creates them recursively. In other words, if you pass this flag, you can create nested folders, even if they did not exist. Otherwise, it would've thrown a "Directory does not exist" error]&lt;/p&gt;

&lt;p&gt;Now, create a yaml file inside that &lt;strong&gt;"workflows"&lt;/strong&gt; folder named &lt;strong&gt;"Deploy.yml"&lt;/strong&gt; by typing the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .github/workflows/Deploy.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[NOTE: &lt;strong&gt;touch&lt;/strong&gt; bash command creates a file]&lt;/p&gt;

&lt;p&gt;Fill this &lt;strong&gt;Deploy.yml&lt;/strong&gt; file with these following content. Also PRO TIP: Read the comments to understand what each word and each line does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# By SilvenLEAF&lt;/span&gt;

&lt;span class="c1"&gt;# Let's create a basic automated deployment&lt;/span&gt;
&lt;span class="c1"&gt;# It'll work something like this:&lt;/span&gt;
&lt;span class="c1"&gt;# Whenever push our code to "main" branch, &lt;/span&gt;
&lt;span class="c1"&gt;# We'll check if it's deployable (I mean, the app works and does not break)&lt;/span&gt;
&lt;span class="c1"&gt;# If so, we'll deploy it&lt;/span&gt;
&lt;span class="c1"&gt;# And everything will be done automatically&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DevOps Deploy&lt;/span&gt; &lt;span class="c1"&gt;# This is the name of our Action, you can name anything, I just casually gave this name &lt;/span&gt;

&lt;span class="c1"&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# We'll be triggering the workflow on push event but only for the main branch&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# You can have any branch or multiple branches, if you want to add more branches, add them in this array&lt;/span&gt;

&lt;span class="c1"&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# This workflow contains a single job called "testAndDeploy"&lt;/span&gt;
  &lt;span class="na"&gt;testAndDeploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# The type of OS that this job will run on. I chose ubuntu, you can choose anything, windows, mac, anything at all&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="c1"&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="c1"&gt;#  Runs a single command using the runners shell&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install packages&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cd client &amp;amp;&amp;amp; npm install&lt;/span&gt;

      &lt;span class="c1"&gt;# Runs a set of commands using the runners shell&lt;/span&gt;
      &lt;span class="c1"&gt;# Notice I gave "CI=false" command. It's because normally when we build react app, there's always a lot of warnings&lt;/span&gt;
      &lt;span class="c1"&gt;# And Github action by default has "CI=true", and because of that, it treats warnings as errors&lt;/span&gt;
      &lt;span class="c1"&gt;# So, it'll fail the job (because if there is any error, the job fails)&lt;/span&gt;
      &lt;span class="c1"&gt;# That's why we set "CI=false" so that it can ignore the warnings&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo started Building&lt;/span&gt;
          &lt;span class="s"&gt;cd client &amp;amp;&amp;amp; CI=false &amp;amp;&amp;amp; npm run build&lt;/span&gt;

      &lt;span class="c1"&gt;# if there are errors or bugs in our app, then the build will fail&lt;/span&gt;
      &lt;span class="c1"&gt;# which will also cause the Deployment to fail as well&lt;/span&gt;
      &lt;span class="c1"&gt;# because in order to deploy, it has to pass all steps successfully&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy 🚀&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JamesIves/github-pages-deploy-action@4.1.5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt; &lt;span class="c1"&gt;# The branch the action should deploy to. You can choose any branch&lt;/span&gt;
          &lt;span class="na"&gt;folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;client/build&lt;/span&gt; &lt;span class="c1"&gt;# The folder the action should deploy. Here the build folder is inside client with respect to the root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now commit all your changes and push! Voila! You just automated your deployment. Now let's test it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-3-testing-deployment"&gt;
  &lt;/a&gt;
  Step 3: Testing Deployment
&lt;/h3&gt;

&lt;p&gt;Now go inside &lt;strong&gt;client/src/App.tsx&lt;/strong&gt;, and replace everything with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// By SilvenLEAF&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;textAlign&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#d00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;SilvenLEAF&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now commit you changes and push it with this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s2"&gt;"Testing Deployment"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(&lt;strong&gt;git commit -am "lorem ipsum"&lt;/strong&gt; is the shorthand for &lt;strong&gt;git add . &amp;amp;&amp;amp; git commit -m "lorem ipsum"&lt;/strong&gt;. Also, &lt;strong&gt;"X &amp;amp;&amp;amp; Y"&lt;/strong&gt; in bash, runs X and Y command one after the other)&lt;/p&gt;

&lt;p&gt;So after pushing your updated codes, go to your repo in your github. And go to the &lt;strong&gt;"actions"&lt;/strong&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mNr-W4kb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1h4q8s3g691fvh44s8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mNr-W4kb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1h4q8s3g691fvh44s8c.png" alt="Go to actions tab" width="880" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you'll see your action &lt;strong&gt;"DevOps Deploy"&lt;/strong&gt; and the running &lt;strong&gt;"Testing Deployment"&lt;/strong&gt; commit workflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3hTZum---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzo0ex1no1h0fe7nrr65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3hTZum---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzo0ex1no1h0fe7nrr65.png" alt="Actions Tab" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on that ongoing &lt;strong&gt;"Testing Deployment"&lt;/strong&gt; workflow, and you'll see all it's jobs that's running. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NUHmsMyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/194rqh30mqixbbvi2qeh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NUHmsMyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/194rqh30mqixbbvi2qeh.png" alt="Workflow jobs" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We had only one, so you'll see only &lt;strong&gt;"testAndDeploy"&lt;/strong&gt; job. To see all its details and steps, click it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nWdB1-Kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38pmgflyncqeh1r92mkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nWdB1-Kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38pmgflyncqeh1r92mkr.png" alt="Workflow job details" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once all of the steps are done, and it successfully finished. Go to your website and see it updated live!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNRFGeaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uirww1bfmepa932kcm7j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNRFGeaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uirww1bfmepa932kcm7j.png" alt="Updated Site" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now every time you make changes and push to &lt;strong&gt;main&lt;/strong&gt; branch, it'll automatically test if it's good and doesn't have any errors, if so, will deploy it. You have to do nothing!&lt;/p&gt;

&lt;p&gt;Amazing right? But that's just the beginning of the story my friend! Because we'll learn some more amazing DevOps and Automations stuffs and advanced github actions too! So stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEXT blog is coming November 13th&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-how-to-deploy-in-the-cloud-azure-vms"&gt;
  &lt;/a&gt;
  1. How to deploy in the Cloud (Azure VMs)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-learning-devops-with-github-actions"&gt;
  &lt;/a&gt;
  2. Learning DevOps with Github Actions
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  3. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  4. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  5. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-sequelize-hooks"&gt;
  &lt;/a&gt;
  6. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
