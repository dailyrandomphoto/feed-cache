<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React Custom Hooks: useBoolean</title>
      <author>Ludal 🚀</author>
      <pubDate>Tue, 05 Oct 2021 19:18:39 +0000</pubDate>
      <link>https://dev.to/iamludal/react-custom-hooks-useboolean-3m6c</link>
      <guid>https://dev.to/iamludal/react-custom-hooks-useboolean-3m6c</guid>
      <description>&lt;p&gt;React hooks initially allow you to "hook into" React state and lifecycle features, like we used to do with the &lt;code&gt;componentDidMount&lt;/code&gt; or &lt;code&gt;componentWillUnmount&lt;/code&gt; methods when using class based components. What we'll discover in this article is that we can implement our own custom hooks, using the few primitives hooks React provides us, like &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt;. This way, you can drastically reduce the cognitive complexity of your components, by moving away some logic into functions that you will be able to reuse anywhere in the other components of your React applications. Your code will look cleaner, and you're following the Single Responsibility Principle (SRP), which states that each class or function (or, in our case, component) should have responsibility over a single part of a program's functionality, and it should encapsulate that part.&lt;/p&gt;

&lt;p&gt;Enough talk, let's get to work and implement our first custom hook: &lt;code&gt;useBoolean&lt;/code&gt;! 😎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;First of all, why are we going to implement such a hook? Let's have a look a this simple component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Spoil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowSpoil&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spoil"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setShowSpoil&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hide&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Show&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spoil-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The component receives a &lt;code&gt;content&lt;/code&gt; prop, that only appears once the button gets clicked to show the spoil. Of course, clicking the button again will hide it back, and so on.&lt;/p&gt;

&lt;p&gt;Here, the component is so simple that it is very easy to read, but we could improve its readability by extracting the button &lt;code&gt;onClick&lt;/code&gt; listener to a separate function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Spoil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowSpoil&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setShowSpoil&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spoil"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hide&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Show&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spoil-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's better. We've simplified the return value of our function, but we've added a new line between the state initialization and the return statement. Of course this is not a major problem in our case, but when dealing with more complex components, this can lead to redundant functions declarations.&lt;/p&gt;

&lt;p&gt;In fact, our component could be further simplified if we had a &lt;code&gt;useBoolean&lt;/code&gt; hook, that we would use like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Spoil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowSpoil&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useBoolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spoil"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setShowSpoil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hide&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Show&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spoil-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See? We didn't add any extra function, and the &lt;code&gt;onClick&lt;/code&gt; listener is easier to read. Now, let's move into the implement of this simple hook, shall we? 😎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;First, we define a function in which we can use the &lt;code&gt;useState&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useBoolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;⚠️ Be careful: you'll only be able to use the &lt;code&gt;useBoolean&lt;/code&gt; function (or should I say hook) in React components, as it uses the &lt;code&gt;useState&lt;/code&gt; hook.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So far, we've just created an alias for the &lt;code&gt;useState&lt;/code&gt; hook. &lt;/p&gt;

&lt;p&gt;Not very useful...😅&lt;/p&gt;

&lt;p&gt;The interesting part comes now: instead of having the &lt;code&gt;setValue&lt;/code&gt; function in the return array, we will use an object that will contain 3 methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;toggle()&lt;/code&gt; to toggle the value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;on()&lt;/code&gt; to set the value  to &lt;code&gt;true&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;off()&lt;/code&gt; to set the value to &lt;code&gt;false&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our hook now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useBoolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldValue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;off&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here it is, you've just created your first custom hook, congratulations! 🥳&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setArticles&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useBoolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useBoolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setArticles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setIsError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;⚠️ Be careful: you can't use &lt;code&gt;setIsLoading(true)&lt;/code&gt; as we don't export a function anymore but an object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for reading me. I hope you enjoyed this article, and if that's the case, don't hesitate to have a look at my other ones. Also, feel free to post some comments if you have any questions, or if you just want to say "hi". 😎&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#next-hook-raw-usecounter-endraw-"&gt;
  &lt;/a&gt;
  Next hook: &lt;code&gt;useCounter&lt;/code&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-overview.html"&gt;https://reactjs.org/docs/hooks-overview.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;https://en.wikipedia.org/wiki/Single-responsibility_principle&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Quit Your Job (Even if You Just Started)</title>
      <author>Lani 🪴</author>
      <pubDate>Tue, 05 Oct 2021 19:12:30 +0000</pubDate>
      <link>https://dev.to/lani/how-to-quit-your-job-even-if-you-just-started-ang</link>
      <guid>https://dev.to/lani/how-to-quit-your-job-even-if-you-just-started-ang</guid>
      <description>&lt;p&gt;By now you’ve surely heard the news...&lt;/p&gt;

&lt;p&gt;We’re all quitting our jobs at record rates. 👋&lt;/p&gt;

&lt;p&gt;4 million of us left in April, 3.4 million in May, and Elpha's recent &lt;a href="https://elpha.com/resources/should-quit-job-quiz"&gt;should I quit my job quiz&lt;/a&gt; found that 90% of 4,500 respondents scored "speak up" or "start looking," indicating unhappiness with their current role. &lt;/p&gt;

&lt;p&gt;The pandemic gave us all time to think deeper about the future of our careers. More than ever, we’re wanting to work for companies who share our values. (&lt;em&gt;To instantly match with companies that have the values you care about, check out the &lt;a href="https://elpha.com/talent-pool"&gt;Elpha Talent Pool&lt;/a&gt;.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;But the truth is, deciding &lt;a href="https://elpha.com/resources/post-covid-career-moves-should-you-stay-or-should-you-go"&gt;when to quit a job&lt;/a&gt; and then going through with it is rarely so straightforward. As Deb Liu, CEO at Ancestry, &lt;a href="https://debliu.substack.com/p/quitting-cutting-the-cord-that-holds"&gt;remarked recently&lt;/a&gt;, “&lt;em&gt;Knowing when to quit is just as important as knowing when to double down. So many people cling to situations that aren’t conducive to their growth and success because they are afraid to quit&lt;/em&gt;.” The social stigma associated with quitting keeps people stuck in bad jobs.&lt;/p&gt;

&lt;p&gt;We believe that sometimes, quitting is the best thing you can do for your future. It means making a courageous decision to continue developing your career. Or walking away from an unhappy situation knowing you deserve better.&lt;/p&gt;

&lt;p&gt;Even when you know you’re making the right decision by quitting, tricky situations may come up in those final few weeks. We’re here to help you navigate them with all the best wisdom from the &lt;a href="https://elpha.com/"&gt;Elpha community&lt;/a&gt; on gracefully quitting your job and moving onto what’s next.&lt;/p&gt;

&lt;p&gt;We’ll answer these questions and more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do you know it’s time to quit your job?&lt;/li&gt;
&lt;li&gt;Can you quit your job without another job lined up?&lt;/li&gt;
&lt;li&gt;What do you say when quitting a job?&lt;/li&gt;
&lt;li&gt;How much notice should you give when quitting?&lt;/li&gt;
&lt;li&gt;What do you say when people ask why you’re leaving?&lt;/li&gt;
&lt;li&gt;Can you quit a job you just started?&lt;/li&gt;
&lt;li&gt;How can you stay in touch with people at your company after quitting?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s dive in!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-know-when-its-time-to-quit"&gt;
  &lt;/a&gt;
  How to know when it’s time to quit
&lt;/h2&gt;

&lt;p&gt;You’re considering a move but you’re not sure if you should stay or go. Here are five signs that the time might be right to resign:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. You feel unhappy or upset most days at work.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your happiness is more important than your company's success. Tune into how your work is making you feel. If it’s mostly negative, it might be time to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/lobauman"&gt;Lo&lt;/a&gt;, Communications Manager, shared what this felt like for her, &lt;em&gt;“I realized it was time to quit when despite loving my role and the company's mission, I was unhappy, bored, and got overly upset at anything remotely bad that happened. I also noticed my mental health declining because work was upsetting me too much.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/asebold"&gt;Allison&lt;/a&gt;, Developer &amp;amp; Founder, shared:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“If I've been at a place for around a year and dread going into work, I know it's time for a change. There's no time in life for a job that makes you miserable. If things haven't gotten better within a year's time, it's probably never going to get better.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. You’re not set up for success by your organization.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;At most companies, this looks like clear objectives and milestones for your growth. Do you and your boss agree on your most important deliverables that would represent successful performance? Having a clear understanding of what success looks like in your role is important for your future career growth. &lt;a href="https://elpha.com/members/BeccaCamp"&gt;Becca&lt;/a&gt;, Leadership Coach at Fearless Femmes, shared her thoughts: “&lt;em&gt;When there are no shared criteria for success, you will stall as a result--no praise, no feedback, unpredictable advancement, all confusion. Skidaddle&lt;/em&gt;.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. You’re not learning or growing.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;If you feel like you’re not learning anything new in your role, or growing towards the next step in your career, it might be time to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/juliarieger/"&gt;Julia&lt;/a&gt;, Product Marketer, shares the way she’s learned to determine whether she’s stopped learning. “&lt;em&gt;I've found it helpful to think about updating my resume or LinkedIn, what new things do I have to add there? What have I learned in the past year? This helps me get out of the rut of just enjoying my coworkers (and what has now become an *easy* job).&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/mayleejacob"&gt;Maylee&lt;/a&gt;, Director of Marketing, made the decision to leave when she felt “&lt;em&gt;a lack of alignment at the company, not feeling valued or empowered to do my role, and micromanaged. I didn’t see a match for my end goals here, so I recognized the need to move on.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Your work environment feels toxic.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The word “toxic” is thrown around a lot, so sometimes it’s hard to know if the environment you’re in fits into this category.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/jenebawint"&gt;Jeneba&lt;/a&gt;, Assistant VP of Content Ops, shared three of her non-negotiables that indicate she’s in a bad place and it’s time to leave:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Behavior that violates my boundaries or goes against my values&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;An environment that does not provide an opportunity to grow and expand but instead fosters a culture that causes me to shrink&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;An environment where my ideas are not valued or heard but instead repackaged by someone else, reshared, and repurposed without being credited.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5. You’ve tried to improve your situation at your current company but it hasn’t helped.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Think of it as “remodeling” before you “move out.”&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://elpha.com/members/saracaldwell"&gt;Sara&lt;/a&gt; , Head of Program Operations at Reforge shares, &lt;em&gt;“It is almost always easier to advance internally at an organization... you have all the social capital and institutional knowledge.&lt;/em&gt; &lt;em&gt;&lt;strong&gt;Make sure you've exhausted internal options before starting a search.&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;This starts with discussions with your boss.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/katieholmanoneill"&gt;Katie&lt;/a&gt;, Account Management Lead at Outschool, on how she approaches it, &lt;em&gt;“For roles where it's just obviously a really bad fit (like expectations and reality don't match at all), I've given the opportunity to "make it right.” If it's clear that the company is unable or unwilling to make good on the expectations that they set (and in the case where I am unable or unwilling to live with the reality), it’s time to go.”&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#is-it-okay-to-quit-without-anything-lined-up"&gt;
  &lt;/a&gt;
  Is it okay to quit without anything lined up?
&lt;/h2&gt;

&lt;p&gt;The question of whether to leave your job before you’ve got your next one lined up is tricky. You've likely heard the common advice that doing so is “wrong”.&lt;/p&gt;

&lt;p&gt;The reality is more dependent on your specific situation and how comfortable you are financially. These are the 5 steps we recommend before making a decision. Consider it your “Should I quit ASAP?” checklist.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Trust your instincts.&lt;/strong&gt; Observe your body's reaction when thinking about work or while at work. How long have you felt that this is not the right job for you and what have you tried to improve the situation?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Assess your financial situation.&lt;/strong&gt; If you’ll be unemployed for a while, the most important question is whether you can support yourself financially. Experts recommend at least 6 months of savings. If you don’t have that, do you have another skill you could monetize? A partner or family member you could lean on?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Talk to trusted people in your life.&lt;/strong&gt; Ask the people who have your best interest in mind for their honest input. Share the facts of your current situation and ask what they’d suggest.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Start browsing opportunities.&lt;/strong&gt; Without making a decision yet, start scoping out other jobs and companies. Are there other potential opportunities out there that seem exciting or more aligned with your career trajectory?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Consider talking to a mental health professional.&lt;/strong&gt; If you’re feeling really stuck and burnt-out, or if you feel you’re in a toxic job environment, this can really help guide your decision.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sometimes taking action and leaving before you have your next step planned out is helpful for your future career. &lt;a href="https://elpha.com/members/SarahMarling"&gt;Sarah M&lt;/a&gt; shared how having a break between jobs helped her be more deliberate about her next move.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Having time and space to finish up the role and not go straight into a new role really helped me to work through my experience and to understand what I wanted next, without my decisions being reactively based on the experience I had just left.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another reason to quit before securing your next move is if your current job is significantly slowing down your search. As &lt;a href="https://elpha.com/members/MWags"&gt;Meaghan&lt;/a&gt;, Career Development Coach, advises,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Job hunting, when done right, is at least a very draining part-time job. If you're already unhappy at work, adding a job hunt to your nights and weekends is a fast track to misery and exhaustion. And trying to engage with an unsatisfying job will drain the creativity and confidence needed to network and put yourself out in the job market authentically.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you are in a role that involves lengthy interview processes (eg. an engineer), consider whether you have the bandwidth while working to also prep for interviews. &lt;a href="https://elpha.com/resources/how-to-prepare-for-and-ace-your-software-engineering-interview"&gt;Engineering interviewing&lt;/a&gt; is a separate skill from the job itself, so having the time to brush up before you start interviews is important.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/saracaldwell"&gt;Sara&lt;/a&gt;, Head of Program Operations at Reforge, agrees;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“I found that trying to run a search while fully employed at a high level wasn't feasible for me -- it meant that I was splitting my attention between two really important aspects of my career and not executing at a high level at either.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But, it’s also important to consider the additional stress that leaping into the unknown without anything lined up can bring. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/kelliemason"&gt;Kellie&lt;/a&gt;, Product Manager, had this experience:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“I quit a job without having one lined up and it was not the right decision for me. I had some money reserved but it felt I was jobless longer than I actually was. I was really scared and depressed because I was getting rejection after rejection and I know I wouldn't have taken them so personally if I was working and looking for something new.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you can't or don't want to risk a break in employment, one solution is to set a deadline for yourself by which you’d like to transition. This can help motivate you to look for new opportunities. &lt;a href="https://elpha.com/members/anapantelic"&gt;Ana&lt;/a&gt; , Chief of Social Policy a.i. at UNICEF, shared how this worked for her:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“I decided to set a hard deadline for myself, using my contract renewal date as the benchmark. I started exploring the market and cast a wide net, scoping both open opportunities and interesting organizations about six months before my deadline, to get a sense of what was out there, and didn't mentally commit to that deadline until about 3 months later.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*&lt;/em&gt; The exception here is if you feel like your physical and mental health are at a breaking point. Then, it’s best to get out ASAP and lean on those in your life to help you through. As &lt;a href="https://elpha.com/members/laurenvriens"&gt;Lauren&lt;/a&gt; reminds us, “&lt;em&gt;It's just work, after all, which no one ever mentions on their deathbed as something they wish they did more of.&lt;/em&gt;”&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-do-you-quit-your-job"&gt;
  &lt;/a&gt;
  How do you quit your job?
&lt;/h2&gt;

&lt;p&gt;You’ve determined it’s time to say move on. How do you share the news? Here’s the order we recommend:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Prepare.&lt;/strong&gt; Know what you’ll say, the reasons you’ll share for leaving, and how much notice you’ll give. (more on that below)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Plan.&lt;/strong&gt; Book a time to share the news with your manager, face-to-face or via video chat if working remotely.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Communicate.&lt;/strong&gt; After talking to your manager, come up with a communications plan to the rest of the team/company together, if possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Accept.&lt;/strong&gt; Be ready for an expedited departure, the possibility of a counteroffer, and/or potential questions from your team. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Transition.&lt;/strong&gt; As you move on from your position, support your team by putting together a transition document. Also, be ready for an exit interview on your final day.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first thing to do is prepare for those final conversations. It can be really helpful to write out what you’ll say and practice in advance with someone you trust (not from your company). Be sure to do this when you’re in a rational, calm state instead of emotionally charged after a workday.&lt;/p&gt;

&lt;p&gt;Here are some powerful statements that are truthful and succinct: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;There's no easy way to say this so I'll be direct... I’ve found a role elsewhere.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;I'm so grateful for the time I spent at [Company].&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;  &lt;em&gt;I’ve decided that it’s best for me to move on from [Company].&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;I'm going to be pursuing my career somewhere that better aligns with my aspirations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;gt;&amp;gt;&amp;gt; I'm putting in my two weeks notice. My last day will be [date].&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you’ve come up with what you’ll say, schedule a chat with your manager. &lt;a href="https://elpha.com/members/dianasingkornrat"&gt;Diana&lt;/a&gt; , Portfolio Marketing Manager, suggests you touch on these three things in your conversation with your manager:&lt;/p&gt;

&lt;p&gt;1. &lt;strong&gt;Appreciation&lt;/strong&gt; for the opportunity and experience you’ve had at the company&lt;/p&gt;

&lt;p&gt;2. &lt;strong&gt;Your decision&lt;/strong&gt; to move on to a new opportunity&lt;/p&gt;

&lt;p&gt;3. &lt;strong&gt;An explanation&lt;/strong&gt; that your decision is based on personal and professional growth&lt;/p&gt;

&lt;p&gt;It’s up to you what reasons you want to share when leaving. But generally, we recommend framing your decision so it’s &lt;strong&gt;not&lt;/strong&gt; about the shortcomings of your current employer, and instead is focused on your own career growth. If you do have feedback you want to share, keep that for your exit interview (more on that below!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/ninaherndon"&gt;Nina&lt;/a&gt; , Director of Communications, says to also practice follow-up questions that you think might arise.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Q: “Why would you leave at such a busy time when we don’t have anyone to replace you and so much work?”&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;A: I understand that it’s a very stressful time, and I’ll continue to support the project/team until [LAST DAY].”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;They may ask what they can do to make you stay. Be prepared to reiterate that your decision is based on personal and professional growth, or whatever the reasons are that you’ve already shared.&lt;/p&gt;

&lt;p&gt;They may also ask where you’re going next. If you’re not sure, or not ready to share, you don’t have to! You can simply reply, "&lt;em&gt;I will share how we can stay in touch once I am settled&lt;/em&gt;."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resignation Letters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After talking to your manager, you’ll likely need to follow up with a resignation letter via email. That email could look something like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Hi X,&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Confirming what we spoke about earlier: I'll be moving on from [Company] and [date] will be my last day.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you again for the opportunity to be a part of [Company] team -- I’ve learned so much in my time here.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I’ll be working to hand off my ongoing projects. Let me know if there’s anything else I can do to help make this transition smoother.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/rachelserwetz"&gt;Rachel&lt;/a&gt; , CEO at WOKEN, suggests offering any support you're willing to give, like help finding a replacement for your position. But be sure to set boundaries here, so you make your decision clear and stick to it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#possibility-of-a-counteroffer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Possibility of a Counteroffer&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Be ready to respond to a counteroffer. If you’re clear on why you’re leaving, you’ll know if a counteroffer (and of what amount) would be enough to make you stay.&lt;/p&gt;

&lt;p&gt;In general, while more money is great in the short term, the same problems will still be there. So unless salary &lt;em&gt;&lt;strong&gt;is&lt;/strong&gt;&lt;/em&gt; your main reason for quitting, we don’t recommend staying for a counteroffer. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transition-document"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Transition Document&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Putting together a robust transition document is a great way to build bridges even as you exit. Make it as easy as possible for people to take over your work. We’ve created a template for a transition document that will be constructive and helpful to your team.&lt;/p&gt;

&lt;p&gt;As one Elpha remarked, &lt;em&gt;People may remember your last weeks and the legacy that you leave behind for them more than they will remember your history of accomplishments with the company.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exit-interviews"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Exit Interviews&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Right before you move on, you’ll likely have an exit interview and your company will ask for feedback. Now’s the time to share more in-depth, &lt;a href="https://matterapp.com/blog/constructive-feedback"&gt;constructive feedback&lt;/a&gt; , if you’re comfortable and if you feel your company will be receptive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/Lindapham"&gt;Linda&lt;/a&gt; , Group Product Manager at &lt;a href="https://elpha.com/companies/webflow"&gt;Webflow&lt;/a&gt; , shared how one of her exit interviews went: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;“In my exit interview, I took the opportunity to have a constructive but candid conversation with the founders on some of the more prominent problems that I saw. These are hard conversations and are much easier coming from someone that will no longer have direct ties to the company.”&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-much-notice-should-you-give-when-quitting"&gt;
  &lt;/a&gt;
  How much notice should you give when quitting?
&lt;/h2&gt;

&lt;p&gt;Two weeks of notice is generally standard in the US. But if you’re in a more senior role or you know it’ll take your company longer to transition, giving some extra time is often appreciated.&lt;/p&gt;

&lt;p&gt;Some Elphas shared that they’d given an extra week of notice, or even a few months. &lt;a href="https://elpha.com/members/EmilyClay"&gt;Emily&lt;/a&gt; shared:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“I gave 6 weeks notice at a job I'd had for 5.5 years. I did this as a courtesy so that I would have time to get all the signed contracts that I could and set them up for success.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/Lindapham"&gt;Linda&lt;/a&gt; shared her approach:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“I gave my manager and my founders three months of notice. I knew that my institutional knowledge was not written down and needed to be and that I had 1-2 unfinished products that I wanted to ship. I had no ill will towards the company and I wanted to make sure that I did what I could to set them up for success while also clearly establishing expectations.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You should also be prepared for an expedited departure. &lt;a href="https://elpha.com/members/ninaherndon"&gt;Nina&lt;/a&gt; shared her boss’s reaction to her submitting her notice:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“My boss said, ‘I think it’s better if today is your last day. I’ll pay you for two weeks but today should be your last day.’ Everything in me wanted to hang my head in shame, become invisible, and run out the door never to show my face again. But at that moment I had a choice: I could let my toxic boss write the ending to my story, or I could write my ending. And I chose to write my ending.” 👏&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-do-you-say-to-people-who-ask-why-youre-leaving"&gt;
  &lt;/a&gt;
  What do you say to people who ask why you’re leaving?
&lt;/h2&gt;

&lt;p&gt;Once your news has been shared, you’ll likely be asked by coworkers why you’re quitting. People are naturally curious and may want to find out the “gossip.” Here’s what to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Be honest and straightforward&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/camieee"&gt;Camille&lt;/a&gt; , Content Writer, suggests speaking truthfully and honestly. “&lt;em&gt;I won't lie about why I'm leaving as I don't think it helps anybody. I don't mean that I'm rude, but more so that I don't hide when something isn't working for me.&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;How transparent you decide to be with coworkers is completely up to you. Many people will likely ask where you’re going next. If you're comfortable, be honest about your future direction, interests, and goals - you never know how they can help you in your next steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Keep it focused &amp;amp; future-oriented&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No matter what your personal reasons might be for leaving, keep the reason you share purely focused on your professional and career goals.&lt;/p&gt;

&lt;p&gt;If you’re a manager, share the news with your direct reports, individually if possible. Let them know you still believe in your team’s future, and be clear that your reasons for leaving are about your own desire to explore a new challenge, rather than about them. Explain what they can expect next and who their next manager will be. This will help the transition go smoothly for them and keep their morale high.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/laurenvriens"&gt;Lauren&lt;/a&gt; , National Strategy &amp;amp; Business Operations at Revel, suggests you say something like, “&lt;em&gt;I'm ready to start my next phase of growth, take on more responsibility, or try something different&lt;/em&gt;.”&lt;/p&gt;

&lt;p&gt;Another great way to put it is, &lt;em&gt;“I got an opportunity that perfectly fits where I see myself headed, but I’ll miss everyone here.”&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Stick to only one story&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://elpha.com/members/saracaldwell"&gt;Sara&lt;/a&gt; , Head of Program Operations at Reforge, says you should have one story, and tell it that way, to everyone. It's tempting -- especially when you have close relationships or you're leaving for complicated reasons -- to let people in on the juicy details. But don't. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;"If you have a single story or phrase, and repeat that in every conversation, there's no chance that alternative narratives start circulating. Tech is super small and you want to be able to call people again without hesitation."&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#can-you-quit-a-job-you-just-started"&gt;
  &lt;/a&gt;
  Can you quit a job you just started?
&lt;/h2&gt;

&lt;p&gt;Let’s say you started a job recently and have only been there for a month or two. But you’re having doubts about whether your new role was the right choice. Can you quit even though you just started? &lt;/p&gt;

&lt;p&gt;If it’s only been weeks, or months, &lt;a href="https://elpha.com/members/teresaman"&gt;Teresa&lt;/a&gt; , Community Lead at Elpha, recommends staying for a little longer to ensure you’ve done all the due diligence you can and give them (and yourself) enough time to evaluate the situation. She suggests identifying what your non-negotiables and important questions are and the timeline in which you’d like to finish evaluating. Then, you can see how things stack up after that amount of time so your decision is better informed.&lt;/p&gt;

&lt;p&gt;With that said, here are three reasons you might want to move on, however long it’s been:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;The job is very different from what you expected.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maybe your role as it was described to you in interviews is very different from what your day-to-day actually looks like. If there is a major misalignment in what you were brought in to do vs. what you’re actually being asked to do, you may need to move on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Your instincts are telling you this role is wrong for you.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A bad situation can impact your mental health and self-confidence, and it’s not worth it. It’s okay to acknowledge you made the best choice at the time you took the job, knowing what you knew then, and that now it might be time to make a different choice.&lt;/p&gt;

&lt;p&gt;One Elpha who left her job after six weeks shared her experience: &lt;em&gt;“Life is too short to stay in unhealthy jobs, and I personally wanted to leave before it started to impact me and my self-confidence.”&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Your job isn’t covering your most important “job must-haves.”&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember, everything is a learning opportunity. Take the time to write out – daily, if you can – the details that are bringing you to this decision. Maybe it’s unsupportive teammates or not trusting management. This understanding can be helpful when you're looking for your next step. If you do decide to leave soon after starting, in your future job search, you have options for how to talk about your decision. &lt;/p&gt;

&lt;p&gt;You could choose to not mention this job on your resume or in interviews. &lt;/p&gt;

&lt;p&gt;Or, you can say it was an opportunity that helped you figure out what you really want. You can honestly share your story, talk through what did and did not work well in the role, and describe how the experience helped you clarify who you are as an employee and what the right workplace looks like for you.&lt;/p&gt;

&lt;p&gt;To avoid a similar situation in the future, take some advice from &lt;a href="https://elpha.com/members/elizabethpietrzak"&gt;Elizabeth&lt;/a&gt; , who says, “&lt;em&gt;When I interview for new jobs I always ask the hiring manager or recruiter to give me 3 references to speak to within the company... It absolutely sucks to go through a honeymoon, 90 days, to discover things you probably could have found out if you were allowed to speak to the team upfront. If a company can ask for references, so can you!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Read more about leaving a job soon after starting in &lt;a href="https://elpha.com/posts/klcd66fv/how-soon-is-too-soon-to-leave-a-new-job"&gt;this members-only conversation&lt;/a&gt; .&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-can-you-stay-in-touch-with-people-at-your-company-after-quitting"&gt;
  &lt;/a&gt;
  How can you stay in touch with people at your company after quitting?
&lt;/h3&gt;

&lt;p&gt;Before you leave, and assuming it’s OK with your company, ask for personal emails or social handles from people you’d like to keep in touch with. You can also send out an email to colleagues and provide your contact info.&lt;/p&gt;

&lt;p&gt;You’re definitely not obliged to stay in touch, but if you feel you’ve formed important connections, you don’t have to say goodbye just because you’re moving on from the company.&lt;/p&gt;

&lt;p&gt;As Career Coach &lt;a href="https://elpha.com/members/anemari"&gt;Anemari&lt;/a&gt; says, “&lt;em&gt;As a general rule, putting the effort into building long-lasting relationships with people is always worth it, professionally and personally. You never know what the future might bring.&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;Here are 3 unique ways to set up a recurring relationship with the people you care about before you leave:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt; &lt;strong&gt;Get feedback from them before you leave.&lt;/strong&gt; As one Elpha shared, &lt;em&gt;I’ve found that people will give me great feedback in the last few days/weeks, and it’s been helpful to set up informal time from cross-functional partners to ensure a smooth exit and to get their feedback. This can also be an opportunity to identify future references if you're applying to jobs in the future.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ask your boss or executives to join your "&lt;/strong&gt; &lt;a href="https://www.forbes.com/sites/forbescoachescouncil/2018/02/20/everyone-needs-a-personal-board-of-directors/?sh=128d0ec72bbc"&gt;&lt;strong&gt;board of directors&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;"&lt;/strong&gt; and let them know that you'd love to have a monthly or quarterly call to check in. If this feels natural to your situation, &lt;a href="https://elpha.com/members/saracaldwell"&gt;Sara&lt;/a&gt; suggests owning that calendar invite and agenda.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create an alumni Slack channel&lt;/strong&gt; - if you’re at a big enough company and one doesn’t exist already! This is an easy way to stay in touch with those you’ve worked with.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Quitting a job takes a lot of courage. If you’re in this process right now, take care of yourself! Remind yourself often of all your successes and the skills you’ve learned so far. Celebrate your tiny wins! And for more support in finding your next role, &lt;a href="https://elpha.com/talent-pool?modal=quiz"&gt;join the Talent Pool&lt;/a&gt; to connect with companies that are a match for &lt;em&gt;&lt;strong&gt;your&lt;/strong&gt;&lt;/em&gt; cultural values and skills.&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>womenintech</category>
      <category>career</category>
      <category>leadership</category>
    </item>
    <item>
      <title>Fun with Rails Enums and PORO</title>
      <author>Petr Hlavicka</author>
      <pubDate>Tue, 05 Oct 2021 19:00:39 +0000</pubDate>
      <link>https://dev.to/citronak/fun-with-rails-enums-and-poro-o86</link>
      <guid>https://dev.to/citronak/fun-with-rails-enums-and-poro-o86</guid>
      <description>&lt;p&gt;I really like enums. They can be really powerful if they are used wisely. Let’s see what we can do with them in a multilingual Rails app with a little help from PORO (Plain Old Ruby Object).&lt;/p&gt;

&lt;p&gt;In this article, I will quickly explain the basics and introduce a few tasks that can occur when you are using enums in the Rails app. For each, I will try to show the usual way (which I know about) and a more fun way (at least for me) with PORO.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h2&gt;

&lt;p&gt;I believe enums don’t need to be heavily introduced. Below is a short description from the &lt;a href="https://api.rubyonrails.org/v6.1.4/classes/ActiveRecord/Enum.html"&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Declare an enum attribute where the values map to integers in the database, but can be queried by name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that’s it. You can also set the default value, get scopes with optional prefix or suffix, a few nice methods and default validation. A small example that will be used in the article:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;enum&lt;/span&gt; &lt;span class="ss"&gt;theme_color: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;classic: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;dark: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;brown: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;_suffix: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;_suffix&lt;/code&gt;, &lt;code&gt;_prefix&lt;/code&gt; and &lt;code&gt;_default&lt;/code&gt; will be changed in not yet released (in time of writing the article) Rails 7 to a version without the &lt;code&gt;_&lt;/code&gt; prefix (according to the &lt;a href="https://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html"&gt;edge docs&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;classic_theme_color&lt;/span&gt; &lt;span class="c1"&gt;# scope with the suffix&lt;/span&gt;
&lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_colors&lt;/span&gt; &lt;span class="c1"&gt;# enum hash&lt;/span&gt;

&lt;span class="n"&gt;setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;classic_theme_color!&lt;/span&gt; &lt;span class="c1"&gt;# update&lt;/span&gt;
&lt;span class="n"&gt;setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;classic_theme_color?&lt;/span&gt; &lt;span class="c1"&gt;# check&lt;/span&gt;
&lt;span class="n"&gt;setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_color&lt;/span&gt; &lt;span class="c1"&gt;# string instead of the integer from the database&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As was already noted, Rails will store values as integers in the database, so you can easily change keys (that are mainly used in Rails) in the enum. That can be handy if you don’t exactly know the right name for them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-should-you-use-them"&gt;
  &lt;/a&gt;
  When should you use them?
&lt;/h3&gt;

&lt;p&gt;I was tempted to write “it depends”, but my rule is simple: use enums, if you have an array of options for a single attribute, that is not editable by any user and the codebase depends on its content.&lt;/p&gt;

&lt;p&gt;Especially the part "depends on its content" is my favourite. Imagine you have enum &lt;code&gt;format&lt;/code&gt; with available export formats (&lt;code&gt;pdf&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt; and so on). &lt;/p&gt;

&lt;p&gt;You can then easily create a class structure that is based on the values and you will know that adding a new format will require changing the enum and adding a new export class. &lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Document&lt;/span&gt;
  &lt;span class="n"&gt;enum&lt;/span&gt; &lt;span class="ss"&gt;format: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;pdf: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;html: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;_prefix: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;export&lt;/span&gt;
    &lt;span class="s2"&gt;"Exports::&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;classify&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Export"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constantize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;export&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#task-1-translations"&gt;
  &lt;/a&gt;
  Task 1: Translations
&lt;/h2&gt;

&lt;p&gt;The first and the most common one: how to translate enums?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-helper"&gt;
  &lt;/a&gt;
  With helper
&lt;/h3&gt;

&lt;p&gt;The easiest way is to use &lt;code&gt;I18n&lt;/code&gt; with &lt;code&gt;scope&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="s2"&gt;"activerecord.enums.setting"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s make it more versatile and use a helper method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/helpers/application_helper.rb&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enum_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"activerecord.enums"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the final usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;enum_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="s2"&gt;"setting.theme_color"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If we would have only this task, I would stick with this solution. There would be no need to make it a little bit more complex only for translations. But I know we will have much more to do :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#with-object"&gt;
  &lt;/a&gt;
  With object
&lt;/h3&gt;

&lt;p&gt;Let’s start the fun with PORO and create our enum object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/enums/setting/theme_color.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Setting::ThemeColor&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="s2"&gt;"activerecord.enums.setting.theme_color"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I chose a custom folder &lt;code&gt;enums&lt;/code&gt; inside of the &lt;code&gt;app&lt;/code&gt; folder, instead of having them inside eg. &lt;code&gt;app/models&lt;/code&gt;. It is much cleaner for me to have them in their own specific folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ThemeColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is very similar, but we are now directly using a simple class that makes it more readable. Another benefit is that we can use it everywhere and not only in views and it is also easily testable.&lt;/p&gt;

&lt;p&gt;This example is not the same as above, as it is limited to the enum only and it is not versatile as the helper method. We will get there in the next task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#task-2-list-values-in-a-form"&gt;
  &lt;/a&gt;
  Task 2: List values in a form
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-usual-way"&gt;
  &lt;/a&gt;
  The usual way
&lt;/h3&gt;

&lt;p&gt;You can use this below, but it would be without translations with nicer output for users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;options_for_select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could prepare options data in each controller or add it as a method inside the model, but to make it more versatile, let’s use a helper method again.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am one of those who do not like fat controllers and models. It is also the reason, why I am using PORO for enums and not models or view helpers.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/helpers/application_helper.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enum_options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tkey&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
  &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;enum_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="n"&gt;tkey&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="ss"&gt;:theme_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options_for_select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enum_options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_colors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;tkey: &lt;/span&gt;&lt;span class="s2"&gt;"setting.theme_color"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_color&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;prompt: &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"shared.views.select"&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt; &lt;span class="ss"&gt;required: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#with-object"&gt;
  &lt;/a&gt;
  With object
&lt;/h3&gt;

&lt;p&gt;For only one enum, we could leave it. When you will have them more (and you probably will), you can refactor it (make it more versatile) and create a base class for our enums with shared code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/enums/base_enum.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseEnum&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"activerecord.enums"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;translation_key&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;translation_key&lt;/span&gt;
      &lt;span class="nb"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"::"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:underscore&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our enum class will be a little bit empty after it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/enums/setting/theme_color.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Setting::ThemeColor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;BaseEnum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can update the base class with the code we will need to help us display our values in the form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/enums/base_enum.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseEnum&lt;/span&gt;
  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="vi"&gt;@id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;
    &lt;span class="vi"&gt;@title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;all&lt;/span&gt;
      &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;source&lt;/span&gt;
      &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;NotImplementedError&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# the rest…&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can find the final version of all used classes &lt;a href="#final-version-of-classes"&gt;at the end&lt;/a&gt; of the article.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And finally, we can add something to the &lt;code&gt;Setting::ThemeColor&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/enums/setting/theme_color.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Setting::ThemeColor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;BaseEnum&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;source&lt;/span&gt;
    &lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_colors&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;collection_select&lt;/span&gt; &lt;span class="ss"&gt;:theme_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ThemeColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;include_blank: &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"shared.views.select"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;allow_blank: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;autofocus: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;required: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It now looks like we basically only have more code for removing one thing &lt;code&gt;key: "setting.theme_color"&lt;/code&gt; for translations and we have a different form method. But all changes will help us with upcoming tasks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You probably noticed that I did not use the value (integer) from our enum. It is because Rails returns the string instead of the integer in the model attribute. Thanks to that we can display the saved value in the form easily.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#task-3-descriptions"&gt;
  &lt;/a&gt;
  Task 3: Descriptions
&lt;/h2&gt;

&lt;p&gt;One day, you will get a feature request: add description text to theme color options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-usual-way"&gt;
  &lt;/a&gt;
  The usual way
&lt;/h3&gt;

&lt;p&gt;The solution is easy, we can just add a new helper method that will use a different key for translations. We will add a title key to the previous translations and add a new description key to keep the structure nice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enum_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"activerecord.enums"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enum_description_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"activerecord.enums"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we have now 3 helper methods in total. Maybe it would be good to move them into a single file to have them in at least one place without any other unrelated methods.&lt;/p&gt;

&lt;p&gt;For me, this is not a good solution (obviously) because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you need to know that there are these methods (not the hardest one, but it is still better not to need to know it)&lt;/li&gt;
&lt;li&gt;for each new “attribute” (like the description), you will have a new method (or you would create a general where you would state the attribute in params), in each case, you will need to look to translation file to know, what attributes are available for the enum&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#with-object"&gt;
  &lt;/a&gt;
  With object
&lt;/h3&gt;

&lt;p&gt;First, we need to change the translation key in &lt;code&gt;BaseEnum&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"activerecord.enums"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;translation_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will need to add a new method that will return us the object for needed enum. We can add it as a class method on &lt;code&gt;BaseEnum&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/enums/base_enum.rb&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could make the description attribute available for all and add it into the &lt;code&gt;BaseEnum&lt;/code&gt; class, but we don’t need it right now…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/enums/setting/theme_color.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;description&lt;/span&gt;
  &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"activerecord.enums"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;translation_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ThemeColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_color&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;description&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can finally fully benefit from the PORO way and have it clean and readable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#task-4-custom-methods"&gt;
  &lt;/a&gt;
  Task 4: Custom methods
&lt;/h2&gt;

&lt;p&gt;Imagine, you would like to have the color in hex (eg. &lt;code&gt;dark&lt;/code&gt; = &lt;code&gt;#000000&lt;/code&gt;). With a usual way, we would create just another helper method or add a method to the model… but with enum object we can just add a new method to the class and have it all in one place.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/enums/setting/theme_color.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hex&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;
  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"classic"&lt;/span&gt;
    &lt;span class="s2"&gt;"#FF0000"&lt;/span&gt;
  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"dark"&lt;/span&gt;
    &lt;span class="s2"&gt;"#000000"&lt;/span&gt;
  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"brown"&lt;/span&gt;
    &lt;span class="s2"&gt;"#D2691E"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are now able to use it everywhere, not only in views.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ThemeColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"dark"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;hex&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was just an example. But the main point is, you now have a place where you can add these kinds of methods when you will need them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#task-5-limit-displaying-values"&gt;
  &lt;/a&gt;
  Task 5: Limit displaying values
&lt;/h2&gt;

&lt;p&gt;Another interesting task: allowing to display &lt;code&gt;brown&lt;/code&gt; option only for admins (for some weird reason). Again, with the usual way, we would have another helper or model method.&lt;/p&gt;

&lt;p&gt;Luckily we have our enum class, where we can change the source method to our needs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/enums/setting/theme_color.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;source&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;admin?&lt;/span&gt;
    &lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_colors&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;except&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"brown"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In this example, I am using &lt;a href="https://api.rubyonrails.org/classes/ActiveSupport/CurrentAttributes.html"&gt;CurrentAttributes&lt;/a&gt; for storing the current user.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;With enum objects, you can make your enums more fun and it opens you a lot of possibilities.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;your code will be cleaner (slimmer models or helpers) &lt;/li&gt;
&lt;li&gt;enums will have their own place where you can extend them to your needs&lt;/li&gt;
&lt;li&gt;you will be able to use them everywhere&lt;/li&gt;
&lt;li&gt;all added logic will be easily testable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you found this article interesting. If you find any inconsistencies or you know a better way, I would be glad if you let me know on &lt;a href="https://twitter.com/citronak"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-version-of-classes"&gt;
  &lt;/a&gt;
  Final version of classes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-baseenum-endraw-class"&gt;
  &lt;/a&gt;
  &lt;code&gt;BaseEnum&lt;/code&gt; class
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/enums/base_enum.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseEnum&lt;/span&gt;
  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="vi"&gt;@id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;
    &lt;span class="vi"&gt;@title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;all&lt;/span&gt;
      &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;source&lt;/span&gt;
      &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;NotImplementedError&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"activerecord.enums"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;translation_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;translation_key&lt;/span&gt;
      &lt;span class="nb"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"::"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:underscore&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-settingthemecolor-endraw-class"&gt;
  &lt;/a&gt;
  &lt;code&gt;Setting::ThemeColor&lt;/code&gt; class
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/enums/setting/theme_color.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Setting::ThemeColor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;BaseEnum&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;description&lt;/span&gt;
    &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"activerecord.enums"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;translation_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hex&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"classic"&lt;/span&gt;
      &lt;span class="s2"&gt;"#FF0000"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"dark"&lt;/span&gt;
      &lt;span class="s2"&gt;"#000000"&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;"brown"&lt;/span&gt;
      &lt;span class="s2"&gt;"#D2691E"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;source&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;admin?&lt;/span&gt;
      &lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_colors&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="no"&gt;Setting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;theme_colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;except&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"brown"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>rails</category>
      <category>ruby</category>
      <category>enum</category>
      <category>poro</category>
    </item>
    <item>
      <title>E-learning Website Templates
</title>
      <author>Md Delowar</author>
      <pubDate>Tue, 05 Oct 2021 18:57:21 +0000</pubDate>
      <link>https://dev.to/delowar77680635/e-learning-website-templates-1c07</link>
      <guid>https://dev.to/delowar77680635/e-learning-website-templates-1c07</guid>
      <description>&lt;p&gt;Hi Everyone&lt;br&gt;
Here we come with another design.&lt;br&gt;
E-learning Website Templates ❤️&lt;/p&gt;

&lt;p&gt;Download From UIHUT. Get Lifetime Access Only for 99$. Use “dol10” coupon for the extra 10% off.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DvoO54FB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m80cu8kh52gu6iu2bo7e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DvoO54FB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m80cu8kh52gu6iu2bo7e.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
e-learning Website Template designed to sell your online courses. Landing page made for students, teachers, offline institutes.&lt;/p&gt;

&lt;p&gt;Your feedback will be appreciated❤️.&lt;/p&gt;

&lt;p&gt;Find it on here 👇&lt;br&gt;
&lt;a href="https://htmltemplates.org/downloads/e-learning-website-templates/"&gt;https://htmltemplates.org/downloads/e-learning-website-templates/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More than 14,000 high-quality ui design resources for commercial use. It's easy to download and use. Create your best design website easily. Download from &lt;a href="http://www.uihut.com"&gt;www.uihut.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elearningwebsitetemplate</category>
      <category>elearingwebsite</category>
      <category>webtemplate</category>
      <category>uiresources</category>
    </item>
    <item>
      <title>Open-source multi-channel notification management library</title>
      <author>Dima Grossman</author>
      <pubDate>Tue, 05 Oct 2021 18:50:59 +0000</pubDate>
      <link>https://dev.to/scopsy/open-source-multi-channel-notification-management-library-40nc</link>
      <guid>https://dev.to/scopsy/open-source-multi-channel-notification-management-library-40nc</guid>
      <description>&lt;p&gt;After years of writing a multichannel notification management systems from scratch for every project i've been involved with. Me and my partner in crime Tomer Barnea decided to solve this thing once and for all and created the opensource library called Notifire.&lt;/p&gt;

&lt;p&gt;Are main goal is to abstract the heavy lifting of managing notifications in code, provide a single API to work with all communication providers (Email, SMS, InApp, Push). &lt;/p&gt;

&lt;p&gt;And later help with: Timezone awareness, priority, channel selection, templating, subscription management, in app widgets and etc...&lt;/p&gt;

&lt;p&gt;Would to hear your thoughts about the API and library. Any help will be appreciated.&lt;/p&gt;

&lt;p&gt;Our GitHub Page: &lt;a href="https://github.com/notifirehq/notifire/"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>news</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>React &amp; TypeScript: use generics to improve your types</title>
      <author>Pierre Ouannes</author>
      <pubDate>Tue, 05 Oct 2021 18:32:40 +0000</pubDate>
      <link>https://dev.to/pierreouannes/react-typescript-use-generics-to-improve-your-types-ha8</link>
      <guid>https://dev.to/pierreouannes/react-typescript-use-generics-to-improve-your-types-ha8</guid>
      <description>&lt;p&gt;While TypeScript is a godsend for React developers, its syntax is fairly intimidating to newcomers. I think generics are a big part of that: they look weird, their purpose isn't obvious, and they can be quite hard to parse.&lt;/p&gt;

&lt;p&gt;This article aims to help you understand and demystify TypeScript generics in general, and their application to React in particular. They aren't that complex: if you understand functions, then generics aren't that far off.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-generics-in-typescript"&gt;
  &lt;/a&gt;
  What are generics in TypeScript?
&lt;/h2&gt;

&lt;p&gt;To understand generics, we'll first start by comparing a standard TypeScript type to a JavaScript object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// a JavaScript object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// and its TypeScript type&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, very close. The main difference is that in JavaScript you care about the values of your variables, while in TypeScript you care about the type of your variables.&lt;/p&gt;

&lt;p&gt;One thing we can say about our &lt;code&gt;User&lt;/code&gt; type is that its &lt;code&gt;status&lt;/code&gt; property is too vague. A status usually has predefined values, let's say in this instance it could be either "online" or "offline". We can modify our type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But that assumes we already know the kind of statuses there are. What if we don't, and the actual list of statuses changes? That's where generics come in: &lt;strong&gt;they let you specify a type that can change depending on the usage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We'll see how to implement this new type afterward, but for our &lt;code&gt;User&lt;/code&gt; example using a generic type would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// `User` is now a generic type&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// we can easily add a new status "idle" if we want&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What the above is saying is "the &lt;code&gt;user&lt;/code&gt; variable is an object of type &lt;code&gt;User&lt;/code&gt;, and by the way the status options for this user are either 'online' or 'offline'" (and in the second example you add "idle" to that list).&lt;/p&gt;

&lt;p&gt;All right, the syntax with angle brackets &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; looks a bit weird. I agree. But you get used to it.&lt;/p&gt;

&lt;p&gt;Pretty cool right? Now here is how to implement this type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generic type definition&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StatusOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StatusOptions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;StatusOptions&lt;/code&gt; is called a "type variable" and &lt;code&gt;User&lt;/code&gt; is said to be a "generic type".&lt;/p&gt;

&lt;p&gt;Again, it might look weird to you. But this is really just a function! If I were to write it using a JavaScript-like syntax (&lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; valid TypeScript), it would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StatusOption&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StatusOptions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, it's really just the TypeScript equivalent of functions. And you can do cool stuff with it.&lt;/p&gt;

&lt;p&gt;For example imagine our &lt;code&gt;User&lt;/code&gt; accepted an array of statuses instead of a single status like before. This is still very easy to do with a generic type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// defining the type&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StatusOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StatusOptions&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// the type usage is still the same&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to learn more about generics, you can check out &lt;a href="https://www.typescriptlang.org/docs/handbook/2/generics.html"&gt;TypeScript's guide on them&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-generics-can-be-very-useful"&gt;
  &lt;/a&gt;
  Why generics can be very useful
&lt;/h3&gt;

&lt;p&gt;Now that you know what generic types are and how they work, you might be asking yourself why we need this. Our example above is pretty contrived after all: you could define a type &lt;code&gt;Status&lt;/code&gt; and use that instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's true in this (fairly simple) example, but there are a lot of situations where you can't do that. It's usually the case when you want to have a shared type used in multiple instances that each has some difference: you want the type to be dynamic and adapt to how it's used.&lt;/p&gt;

&lt;p&gt;A very common example is having a function that returns the same type as its argument. The simplest form of this is the identity function, which returns whatever it's given:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty simple right? But how would you type this, if the &lt;code&gt;arg&lt;/code&gt; argument can be any type? And don't say using &lt;code&gt;any&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;That's right, generics:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ArgType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ArgType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once again, I find this syntax a bit complex to parse, but all it's really saying is: "the &lt;code&gt;identity&lt;/code&gt; function can take any type (&lt;code&gt;ArgType&lt;/code&gt;), and that type will be both the type of its argument and its return type".&lt;/p&gt;

&lt;p&gt;And this is how you would use that function and specify its type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this specific instance &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; isn't necessary since TypeScript can infer the type itself, but sometimes it can't (or does it wrongly) and you have to specify the type yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-type-variables"&gt;
  &lt;/a&gt;
  Multiple type variables
&lt;/h3&gt;

&lt;p&gt;You're not limited to one type variable, you can use as many as you want. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;identities&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ArgType1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ArgType2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgType1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgType2&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ArgType1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ArgType2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this instance, &lt;code&gt;identities&lt;/code&gt; takes 2 arguments and returns them in an array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generics-syntax-for-arrow-functions"&gt;
  &lt;/a&gt;
  Generics syntax for arrow functions
&lt;/h3&gt;

&lt;p&gt;You might have noticed that I've only used the regular function syntax for now, not the arrow function syntax introduced in ES6.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// an arrow function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The reason is that TypeScript doesn't handle arrow functions quite as well as regular functions. You might think that you can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this doesn't work&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ArgType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ArgType&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// this doesn't work either&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ArgType&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(arg: ArgType): ArgType =&amp;gt; &lt;span class="si"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But this doesn't work in TypeScript. Instead, you have to do one of the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// use this&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ArgType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ArgType&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// or this&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ArgType&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ArgType&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I would advise using the first option because it's cleaner, but the comma still looks a bit weird to me.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-word-of-warning-on-type-variable-names"&gt;
  &lt;/a&gt;
  A word of warning on type variable names
&lt;/h3&gt;

&lt;p&gt;For some reason, it's conventional in the TypeScript world to give one letter names to the type variable in generic types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// instead of this&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ArgType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ArgType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// you would usually see this&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using full words for the type variable name can indeed make the code quite verbose, but I still think that it's way easier to understand than when using the single-letter option.&lt;/p&gt;

&lt;p&gt;I encourage you to use actual words in your generic names like you would do elsewhere in your code. But be aware that you will very often see the single-letter variant in the wild.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-a-generic-type-example-from-open-source-raw-usestate-endraw-itself"&gt;
  &lt;/a&gt;
  Bonus: a generic type example from open source: &lt;code&gt;useState&lt;/code&gt; itself!
&lt;/h3&gt;

&lt;p&gt;To wrap up this section on generic types, I thought it could be fun to have a look at a generic type in the wild. And what better example than the React library itself?&lt;/p&gt;

&lt;p&gt;Fair warning: this section is a bit more complex than the others in this article. Feel free to revisit it later if you don't get it at first.&lt;/p&gt;

&lt;p&gt;Let's have a look at the type definition for our beloved hook &lt;code&gt;useState&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Dispatch&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SetStateAction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can't say I didn't warn you - type definitions with generics aren't very pretty. Or maybe that's just me!&lt;/p&gt;

&lt;p&gt;Anyway, let's understand this type definition step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We begin by defining a function, &lt;code&gt;useState&lt;/code&gt;, which takes a generic type called &lt;code&gt;S&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;That function accepts one and only one argument: an &lt;code&gt;initialState&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;That initial state can either be a variable of type &lt;code&gt;S&lt;/code&gt; (our generic type), &lt;em&gt;or&lt;/em&gt; a function whose return type is &lt;code&gt;S&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useState&lt;/code&gt; then returns an array with two elements:

&lt;ul&gt;
&lt;li&gt;The first is of type &lt;code&gt;S&lt;/code&gt; (it's our state value).&lt;/li&gt;
&lt;li&gt;The second is of the &lt;code&gt;Dispatch&lt;/code&gt; type, to which the generic type &lt;code&gt;SetStateAction&amp;lt;S&amp;gt;&lt;/code&gt; is applied. &lt;code&gt;SetStateAction&amp;lt;S&amp;gt;&lt;/code&gt; itself is the &lt;code&gt;SetStateAction&lt;/code&gt; type with the generic type &lt;code&gt;S&lt;/code&gt; applied (it's our state setter).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last part is a bit complicated, so let's look into it a bit further.&lt;/p&gt;

&lt;p&gt;First up, let's look up &lt;code&gt;SetStateAction&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SetStateAction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All right so &lt;code&gt;SetStateAction&lt;/code&gt; is also a generic type that can either be a variable of type &lt;code&gt;S&lt;/code&gt;, or a function that has &lt;code&gt;S&lt;/code&gt; as both its argument type and its return type.&lt;/p&gt;

&lt;p&gt;This reminds me of what we provide to &lt;code&gt;setState&lt;/code&gt;, right? You can either directly provide the new state value, or provide a function that builds the new state value off the old one.&lt;/p&gt;

&lt;p&gt;Now what's &lt;code&gt;Dispatch&lt;/code&gt;?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Dispatch&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All right so this simply has an argument of type whatever the generic type is, and returns nothing.&lt;/p&gt;

&lt;p&gt;Putting it all together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this type:&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Dispatch&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SetStateAction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// can be refactored into this type:&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So it's a function that accepts either a value &lt;code&gt;S&lt;/code&gt; or a function &lt;code&gt;S =&amp;gt; S&lt;/code&gt;, and returns nothing.&lt;/p&gt;

&lt;p&gt;That indeed matches our usage of &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that's the whole type definition of &lt;code&gt;useState&lt;/code&gt;! Now in reality the type is overloaded (meaning other type definitions might apply, depending on context), but this is the main one. The other definition just deals with the case where you give no argument to &lt;code&gt;useState&lt;/code&gt;, so &lt;code&gt;initialState&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here it is for reference:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Dispatch&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SetStateAction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-generics-in-react"&gt;
  &lt;/a&gt;
  Using generics in React
&lt;/h2&gt;

&lt;p&gt;Now that we've understood the general TypeScript concept of generic types, we can see how to apply it in React code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generic-types-for-react-hooks-like-raw-usestate-endraw-"&gt;
  &lt;/a&gt;
  Generic types for React hooks like &lt;code&gt;useState&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Hooks are just normal JavaScript functions that React treats a bit differently. It follows that using a generic type with a hook is the same as using it with a normal JavaScript function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// normal JavaScript function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// useState&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setGreeting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the examples above you could omit the explicit generic type as TypeScript can infer it from the argument value. But sometimes TypeScript can't do that (or does it wrongly), and this is the syntax to use.&lt;/p&gt;

&lt;p&gt;We'll see a live example of that in the next section.&lt;/p&gt;

&lt;p&gt;If you want to learn how to type all hooks in React, stay tuned! An article on that subject will be out next week. Subscribe to be sure to see it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generic-types-for-component-props"&gt;
  &lt;/a&gt;
  Generic types for Component props
&lt;/h3&gt;

&lt;p&gt;Let's say you're building a &lt;code&gt;Select&lt;/code&gt; component for a form. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ChangeEvent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]?.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLSelectElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// `Select` usage&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Banana 🍌&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple 🍎&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;coconut&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Coconut 🥥&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;watermelon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Watermelon 🍉&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Select&lt;/span&gt; &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;mockOptions&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're unsure about what's going on with the type of the &lt;code&gt;event&lt;/code&gt; object in &lt;code&gt;handleChange&lt;/code&gt;, I have an article explaining &lt;a href="https://devtrium.com/posts/react-typescript-events"&gt;how to use TypeScript with events in React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say that for the &lt;code&gt;value&lt;/code&gt; of the options we can accept either a string or a number, but not both at the same time. How would you enforce that in the &lt;code&gt;Select&lt;/code&gt; component?&lt;/p&gt;

&lt;p&gt;The following doesn't work the way we want, do you know why?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SelectProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;SelectProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]?.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLSelectElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The reason it doesn't work is that in one &lt;code&gt;options&lt;/code&gt; array you could have an option with a value of type number, and another option with a value of type string. We don't want that, but TypeScript would accept it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this would work with the previous `Select`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Banana 🍌&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple 🍎&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;coconut&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Coconut 🥥&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;watermelon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Watermelon 🍉&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way to enforce the fact that we want &lt;em&gt;either&lt;/em&gt; a number &lt;em&gt;or&lt;/em&gt; an integer is by using generics:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;OptionValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;OptionValue&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SelectProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;OptionValue&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;OptionValue&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;SelectProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]?.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLSelectElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a minute to understand the code above. If you're not familiar with generic types, it probably looks quite weird.&lt;/p&gt;

&lt;p&gt;One thing you might be asking is why we had to define &lt;code&gt;OptionValue&lt;/code&gt; and then put &lt;code&gt;extends OptionValue&lt;/code&gt; in a bunch of places.&lt;/p&gt;

&lt;p&gt;Well imagine we don't do that, and instead of &lt;code&gt;Type extends OptionValue&lt;/code&gt; we just put &lt;code&gt;Type&lt;/code&gt; instead. How would the &lt;code&gt;Select&lt;/code&gt; component know that the type &lt;code&gt;Type&lt;/code&gt; can either be a &lt;code&gt;number&lt;/code&gt; or a &lt;code&gt;string&lt;/code&gt; but nothing else?&lt;/p&gt;

&lt;p&gt;It can't. That's why we have to say: "Hey, this &lt;code&gt;Type&lt;/code&gt; thing can either be a string or a number".&lt;/p&gt;

&lt;p&gt;It's a detail unrelated to generics, but if you use the above code in an actual editor you'll probably get a TypeScript error inside the &lt;code&gt;handleChange&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The reason for that is that &lt;code&gt;event.target.value&lt;/code&gt; will be converted to a string, even if it was a number. And &lt;code&gt;useState&lt;/code&gt; expects the type &lt;code&gt;Type&lt;/code&gt;, which can be a number. So there's an issue there.&lt;/p&gt;

&lt;p&gt;The best way I've found to handle this is by using the index of the selected element instead, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLSelectElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectedIndex&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;I hope this article helped you to better understand how generic types work. When you get to know them, they aren't so scary anymore 😊&lt;/p&gt;

&lt;p&gt;Yes, the syntax can get some getting used to, and isn't very pretty. But generics are an important part of your TypeScript toolbox to create great TypeScript React applications, so don't shun them just for that.&lt;/p&gt;

&lt;p&gt;Have fun building apps!&lt;/p&gt;

&lt;p&gt;PS: Are there other generic type applications in React that I should mention in this article? If so, feel free to ping me on &lt;a href="https://twitter.com/PierreOuannes"&gt;Twitter&lt;/a&gt; or shoot me an email at &lt;a href="mailto:pierre@devtrium.com"&gt;pierre@devtrium.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My bio</title>
      <author>Baboi Júnior</author>
      <pubDate>Tue, 05 Oct 2021 18:03:20 +0000</pubDate>
      <link>https://dev.to/homolibero014/my-bio-4b8a</link>
      <guid>https://dev.to/homolibero014/my-bio-4b8a</guid>
      <description>&lt;p&gt;Hello, my name is Baboi and I'm a technology lover.&lt;br&gt;
I'm now working for the justice at Superior Council of Magistracy of the Public Ministry and in my free times I learn new technologies and develop solutions to help the society.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Launching A SonarQube Docker Container</title>
      <author>Shariq</author>
      <pubDate>Tue, 05 Oct 2021 18:02:58 +0000</pubDate>
      <link>https://dev.to/shariq/launching-a-sonarqube-docker-container-2p1</link>
      <guid>https://dev.to/shariq/launching-a-sonarqube-docker-container-2p1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-sonarqube"&gt;
  &lt;/a&gt;
  What Is SonarQube
&lt;/h2&gt;

&lt;p&gt;SonarQube, before 2013 known as Sonar, is a tool for inspecting code quality with static analysis, bug detection, code smells, and security vulnerabilities. It's best to run these scans at build time with your CI/CD tools such as Jenkins or GitLab CI/CD. There are plenty of tools with which SonarQube can integrate seamlessly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-should-i-use-sonarqube"&gt;
  &lt;/a&gt;
  Why Should I Use SonarQube
&lt;/h3&gt;

&lt;p&gt;SonarQube has a few advantages over its alternatives. Namely, it has a long history as it's been continuously developed since 2008 as an open-source tool. Additionally, if you are integrating SonarQube within your CI/CD pipelines, you can automatically stop build and deployments if any of the analyses run don't meet your pre-defined thresholds. It supports over 25 programming languages, including Java, Swift, JavaScript, and C#. The full list can be &lt;a href="https://www.sonarqube.org/features/multi-languages/"&gt;found here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's basically free automated code review for every single push, merge, and deployment!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-docker"&gt;
  &lt;/a&gt;
  Why Docker
&lt;/h2&gt;

&lt;p&gt;For most use cases, a Docker container running SonarQube will be ample for testing if you want to bring a SAST tool into your main production pipelines. Docker makes it easy to build and destroy images with minimal impact on your systems. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.shariq.dev/blog/docker-series/pt-1-installing-docker-and-docker-compose"&gt;Installing Docker and Docker Compose&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Be sure to have Docker installed and running on your system. See the guide tagged above for help!&lt;/p&gt;

&lt;p&gt;I'll cover the installation steps for a bare minimum test instance and also a more reliable solution that can be torn down and rebuilt with no data loss (well you still can lose data if you wipe the database and volumes).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-instance"&gt;
  &lt;/a&gt;
  Test Instance
&lt;/h3&gt;

&lt;p&gt;To pull the &lt;a href="https://hub.docker.com/_/sonarqube/"&gt;official SonarQube Docker image&lt;/a&gt;, run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--name&lt;/span&gt; sonarqube &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;SONAR_ES_BOOTSTRAP_CHECKS_DISABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-p&lt;/span&gt; 9000:9000 &lt;span class="se"&gt;\&lt;/span&gt;
    sonarqube:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#somewhat-reliable-test-instance"&gt;
  &lt;/a&gt;
  Somewhat Reliable Test Instance
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;You need a running instance of one of the &lt;a href="https://docs.sonarqube.org/latest/requirements/requirements/"&gt;supported databases&lt;/a&gt;. I opted for PostgreSQL.&lt;/li&gt;
&lt;li&gt;Then you'll need to create three new Docker volumes.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker volume create &lt;span class="nt"&gt;--name&lt;/span&gt; sonarqube_data
docker volume create &lt;span class="nt"&gt;--name&lt;/span&gt; sonarqube_logs
docker volume create &lt;span class="nt"&gt;--name&lt;/span&gt; sonarqube_extensions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now pull the image and bind to the database and volumes.&lt;/p&gt;

&lt;p&gt;If using Oracle will have to install the extension first. Find it &lt;a href="https://www.oracle.com/database/technologies/appdev/jdbc-downloads.html"&gt;here&lt;/a&gt; and move it to the &lt;code&gt;sonarqube_extensions/jdbc-driver/oracle&lt;/code&gt; location]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--name&lt;/span&gt; sonarqube &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;SONAR_JDBC_URL&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;INSERT JDBC URL&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;SONAR_JDBC_USERNAME&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;INSERT JDBC USERNAME&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;SONAR_JDBC_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;INSERT JDBC PASSWORD&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt; sonarqube_data:/opt/sonarqube/data &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt; sonarqube_extensions:/opt/sonarqube/extensions &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt; sonarqube_logs:/opt/sonarqube/logs &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-p&lt;/span&gt; 9000:9000 &lt;span class="se"&gt;\&lt;/span&gt;
    sonarqube:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't include the curly braces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breakdown"&gt;
  &lt;/a&gt;
  Breakdown
&lt;/h3&gt;

&lt;p&gt;I'll dissect each of the Docker commands and flags above if you're new to this.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker&lt;/code&gt; simply invokes the Docker daemon that you have installed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;run&lt;/code&gt; has three use cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pull the image from Docker Hub. You can specify other locations from Docker Hub, but that's not for this tutorial.&lt;/li&gt;
&lt;li&gt;Create a container based on the image. Think of the image as a class and the container as an instance of that class i.e. an object.&lt;/li&gt;
&lt;li&gt;Start the container based on the parameters provided as flags to Docker.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; is shorthand for detached. This will keep your terminal on its current instance instead of porting you into a new container's terminal instance.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--name sonarqube&lt;/code&gt; is, well, the name you want to assign the container. If you don't include it, Docker will assign it a random name like jubilant_powerwasher. In this case, it will be sonarqube. Much better.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true&lt;/code&gt; is adding and setting the environment variable &lt;code&gt;SONAR_ES_BOOTSTRAP_CHECKS_DISABLE&lt;/code&gt;. This will disable some checks that a production level SonarQube determines are necessary with its ElasticSearch integration and could otherwise break your build. Generally, these are memory checks to make sure there's enough available for smooth operation. When using an external database, this setting will be ignored. Bootstrap checks will run every time and probably fail your build.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-p 9000:9000&lt;/code&gt; binds the &lt;a href="http://localhost"&gt;localhost&lt;/a&gt;'s port 9000 to the Docker container's port of 9000. The localhost port (the first number) can be changed to any open port you have, but the container port (the second number, after the colon) is pre-determined by whoever created the image. Do not change the second port number.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sonarqube:latest&lt;/code&gt; is the final parameter passed. It tells Docker which image to pull and what version (identified as tags after the colon). In this case, it's pulling the latest version, which at the time of writing this article is &lt;code&gt;9.0.1-community&lt;/code&gt;. You could replace the &lt;code&gt;latest&lt;/code&gt; tag with this explicit version or &lt;code&gt;lts&lt;/code&gt; which is &lt;code&gt;8.9.2-community&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-steps"&gt;
  &lt;/a&gt;
  Final Steps
&lt;/h2&gt;

&lt;p&gt;You can now navigate to &lt;a href="http://localhost:9000"&gt;localhost:9000&lt;/a&gt; in your web browser and be presented with the login screen. The default log-in credentials for SonarQube are username: admin and password: admin.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-note-about-databases"&gt;
  &lt;/a&gt;
  A Note About Databases
&lt;/h3&gt;

&lt;p&gt;SonarQube runs with an embedded H2 instance for its database on initial creation after these specific steps. This is okay for the actual testing of SonarQube but bad in a real-world scenario. Be sure to bind it to a persistent relational database. Support exists for Oracle, Microsoft SQL Server, and PostgreSQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h2&gt;

&lt;p&gt;To see the logs for your container, run the following. This section of the document will be updated as I find more errors (or readers tell me about them!)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker logs sonarqube
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bootstrap-checks-failed"&gt;
  &lt;/a&gt;
  Bootstrap checks failed
&lt;/h3&gt;

&lt;p&gt;If you're getting this or a similar error message, follow the below steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ERROR: &lt;span class="o"&gt;[&lt;/span&gt;1] bootstrap checks failed. You must address the points described &lt;span class="k"&gt;in &lt;/span&gt;the following &lt;span class="o"&gt;[&lt;/span&gt;1] lines before starting Elasticsearch.
bootstrap check failure &lt;span class="o"&gt;[&lt;/span&gt;1] of &lt;span class="o"&gt;[&lt;/span&gt;1]: max virtual memory areas vm.max_map_count &lt;span class="o"&gt;[&lt;/span&gt;65530] is too low, increase to at least &lt;span class="o"&gt;[&lt;/span&gt;262144]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will need to increase the memory areas available. However, be sure to understand the &lt;a href="https://www.suse.com/support/kb/doc/?id=000016692"&gt;risks associated with doing so&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;vim /etc/sysctl.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vm.max_map_count&lt;span class="o"&gt;=&lt;/span&gt;262144
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Source the new settings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sysctl &lt;span class="nt"&gt;--system&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#everything-docker-is-frozen"&gt;
  &lt;/a&gt;
  Everything Docker is frozen
&lt;/h3&gt;

&lt;p&gt;Restart the Docker daemon. Worst case, restart the machine. With volumes and databases set up, you shouldn't lose any data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;service docker restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>docker</category>
      <category>testing</category>
      <category>codequality</category>
      <category>sonar</category>
    </item>
    <item>
      <title>Detasheet: Google Sheets as a Database</title>
      <author>Nathan Pham</author>
      <pubDate>Tue, 05 Oct 2021 18:01:54 +0000</pubDate>
      <link>https://dev.to/phamn23/detasheet-google-sheets-as-a-database-5h08</link>
      <guid>https://dev.to/phamn23/detasheet-google-sheets-as-a-database-5h08</guid>
      <description>&lt;p&gt;Have you ever considered using Google Sheets as a database? You haven't? Well you just did! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-why"&gt;
  &lt;/a&gt;
  The Why
&lt;/h2&gt;

&lt;p&gt;Google Sheets is free, provides a built-in method to visualize data (with charts and graphs), and allows you to export data in a variety of formats. &lt;/p&gt;

&lt;p&gt;Obviously, Google Sheets was never intended to be a database. The API is verbose and would be difficult to reuse across new projects. &lt;/p&gt;

&lt;p&gt;As a result, I created &lt;a href="https://www.npmjs.com/package/detasheet"&gt;Detasheet&lt;/a&gt;! Detasheet is a wrapper around the official Google Sheets API, allowing you to intuitively create and manage databases.&lt;/p&gt;

&lt;p&gt;The documentation is available on &lt;a href="https://github.com/nathan-pham/detasheet"&gt;Github&lt;/a&gt; (give it a star!) or &lt;a href="https://www.npmjs.com/package/detasheet"&gt;NPM&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-works"&gt;
  &lt;/a&gt;
  It Works!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i0iVg7Mh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7u4jysz15z24c85526xr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0iVg7Mh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7u4jysz15z24c85526xr.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dilfkzDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i0qc83rfdf6qcbomoyc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dilfkzDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i0qc83rfdf6qcbomoyc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons Learned
&lt;/h2&gt;

&lt;p&gt;OAuth is an absolute nightmare to deal with. It also doesn't make much sense to request a refresh token when initializing and interacting with the database should be relatively permanent. I opted to create a service account instead, using a private key and client email to authenticate my Google Sheets client. &lt;/p&gt;

&lt;p&gt;After creating the service client, I realized I could read spreadsheets but not write to them. I found out that you could actually share your documents to the service account, which enabled realtime editing. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GsZbFyHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixp0mydioumfcngvha6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GsZbFyHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixp0mydioumfcngvha6v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Internally, I tried to use some bleeding-edge object-oriented JavaScript (Node v14+), like real private methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// won't work!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've also had experience publishing modules to NPM before, so it wasn't that difficult (literally just &lt;code&gt;npm publish --access public&lt;/code&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Detasheets was definitely an interesting and fun experiment. If you actually build something with it, let me know!&lt;/p&gt;

</description>
      <category>googlecloud</category>
      <category>javascript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>9 questions to ask nontechnical folks before working on a project</title>
      <author>Ryland King 🛠</author>
      <pubDate>Tue, 05 Oct 2021 17:58:40 +0000</pubDate>
      <link>https://dev.to/rylandking/9-questions-to-ask-nontechnical-folks-before-working-on-a-project-3gf6</link>
      <guid>https://dev.to/rylandking/9-questions-to-ask-nontechnical-folks-before-working-on-a-project-3gf6</guid>
      <description>&lt;h4&gt;
  &lt;a href="#1-whats-your-website-do-today"&gt;
  &lt;/a&gt;
  1/ What's your website do today?
&lt;/h4&gt;

&lt;p&gt;Encourage them to complain about what's frustrating them. Learn their true problems. &lt;/p&gt;

&lt;p&gt;Once done, repeat their problems back to them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-what-does-your-ideal-website-accomplish"&gt;
  &lt;/a&gt;
  2/ What does your ideal website accomplish?
&lt;/h4&gt;

&lt;p&gt;Wrong Answer: "It gets more customers."&lt;br&gt;
Right Answer: “It enables us to sell our products to people who live far from our store location.”  &lt;/p&gt;

&lt;p&gt;Learn their ideal end-state. Repeat it back to them. They'll love hearing you understand.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-can-you-tell-me-more-about-x"&gt;
  &lt;/a&gt;
  3/ Can you tell me more about X?
&lt;/h4&gt;

&lt;p&gt;Keep them talking with phrases like:&lt;/p&gt;

&lt;p&gt;What do you mean?&lt;br&gt;
Why is it done that way?&lt;br&gt;
How do you like that? &lt;/p&gt;

&lt;p&gt;Extract as much as possible about their pains, needs, and use-cases.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-whos-responsible-for-design"&gt;
  &lt;/a&gt;
  4/ Who's responsible for design?
&lt;/h4&gt;

&lt;p&gt;Clarify that design is separate from development.  &lt;/p&gt;

&lt;p&gt;Are you responsible for design? Do you have to find the person? Are they giving you a design?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-how-many-different-component-amp-page-layouts"&gt;
  &lt;/a&gt;
  5/ How many different component &amp;amp; page layouts?
&lt;/h4&gt;

&lt;p&gt;Devs are infamously optimistic. &lt;/p&gt;

&lt;p&gt;Use the number of layouts to help estimate your project timeline. &lt;/p&gt;

&lt;p&gt;You should overestimate the time you think it'll take on every project — even double it! You may still be under.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-whos-responsible-for-content"&gt;
  &lt;/a&gt;
  6/ Who's responsible for content?
&lt;/h4&gt;

&lt;p&gt;Content is a beast of its own.&lt;/p&gt;

&lt;p&gt;Make sure it's crystal clear exactly who owns content creation. Add that to your estimates.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-what-3rd-party-services-will-we-use"&gt;
  &lt;/a&gt;
  7/ What 3rd party services will we use?
&lt;/h4&gt;

&lt;p&gt;It's likely they won't have an exact answer.&lt;/p&gt;

&lt;p&gt;Audit their existing site, propose services based on their needs, and recommend tech based on what their in-house teams may be using.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-how-will-we-communicate-during-the-project"&gt;
  &lt;/a&gt;
  8/ How will we communicate during the project?
&lt;/h4&gt;

&lt;p&gt;Check-in consistently — even if you don't have an update.   &lt;/p&gt;

&lt;p&gt;Simply message them, "No new updates since we chatted last." They will appreciate it and you may get new info from them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-offer-multiple-tiers"&gt;
  &lt;/a&gt;
  9/ Offer multiple tiers.
&lt;/h4&gt;

&lt;p&gt;Offer 3 tiers of solutions from "everything and more" to "just the basics." &lt;/p&gt;

&lt;p&gt;Let them move items around and customize their own tier. This will help you land more deals because you give the client flexibility.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;If this helped you, let me know by giving the article a like. :-) &lt;/p&gt;

&lt;p&gt;Also, I'm building a website builder for NextJS. If you're interest in testing it out email me at &lt;a href="mailto:ryland@stackbit.com"&gt;ryland@stackbit.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;❤️ More articles to come!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 05 Oct 2021 17:52:14 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1l1d</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1l1d</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#happy-hacktoberfest"&gt;
  &lt;/a&gt;
  Happy Hacktoberfest!
&lt;/h2&gt;

&lt;p&gt;Hacktoberfest is here and this post from &lt;a class="mentioned-user" href="https://dev.to/ayushi7rawat"&gt;@ayushi7rawat&lt;/a&gt;
 is a great primer on what it's all about. We hope all participants have a blast this month! &lt;em&gt;Pro tip; We're celebrating on DEV, too! Learn how to maximize your Hacktoberfest experience in partnership with this community &lt;a href="https://dev.to/devteam/hacktoberfest-2021-is-here-4a3l"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ayushi7rawat" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NP9DC7xq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rSq1_0WY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/602187/e7a9f681-495a-4ca8-aa6e-c572f3a99f2a.jpg" alt="ayushi7rawat"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ayushi7rawat/beginner-s-guide-to-hacktoberfest-2021-24d1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Beginner's guide to Hacktoberfest 2021&lt;/h2&gt;
      &lt;h3&gt;Ayushi Rawat  ・ Sep 30 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#hacktoberfest&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#mere-semantics-are-crucial"&gt;
  &lt;/a&gt;
  Mere Semantics (... are crucial!)
&lt;/h2&gt;

&lt;p&gt;"A semantically correct HTML tag informs the browser and the developer about its content. It also helps keyboards and assistive technologies to navigate through a website." &lt;/p&gt;

&lt;p&gt;-&lt;a class="mentioned-user" href="https://dev.to/polgarj"&gt;@polgarj&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;I learned a lot from this article and I hope you do, too!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/polgarj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cjWlF5iv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GD42SaIS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/453470/3b14ce30-941e-4f9e-a830-61c342d1e4ba.jpg" alt="polgarj"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/polgarj/a-short-guide-to-help-you-pick-the-correct-html-tag-56l9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A short guide to help you pick the correct HTML tag&lt;/h2&gt;
      &lt;h3&gt;Jozsef Polgar ・ Sep 28 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#promises-promises"&gt;
  &lt;/a&gt;
  Promises, Promises
&lt;/h2&gt;

&lt;p&gt;A clear and concise explanation of promises and async/await in JavaScript — with a singing analogy 🎤 Thanks, &lt;a class="mentioned-user" href="https://dev.to/santan47"&gt;@santan47&lt;/a&gt;
&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/santan47" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bhefq3ve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_m2UqHwH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/617037/0ce86226-e5db-45bb-85ab-9e6af265aa63.jpeg" alt="santan47"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/santan47/promise-async-await-in-javascript-mlb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Promise &amp;amp; Async await in JavaScript.&lt;/h2&gt;
      &lt;h3&gt;Santan kr Sharma ・ Sep 29 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-doppler-effect-securing-and-managing-your-facebook-amp-google-api-keys"&gt;
  &lt;/a&gt;
  The Doppler Effect: Securing and Managing Your Facebook &amp;amp; Google API keys.
&lt;/h2&gt;

&lt;p&gt;Following the widespread Facebook outage this week, proper organization and security of Facebook (and Google!) processes is top of mind. &lt;a class="mentioned-user" href="https://dev.to/zion"&gt;@zion&lt;/a&gt;
 delivers with this tutorial all about using Doppler to manage API keys securely and in a straightforward manner. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/zion" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uW-fD0YW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--raTz_OO2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/629105/b7e4e2fa-ea9a-49b0-97c8-d24f9714c26d.jpg" alt="zion"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/zion/facebook-and-google-authentication-with-node-js-and-doppler-maf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Facebook and Google Authentication with Node.js and Doppler&lt;/h2&gt;
      &lt;h3&gt;Ekekenta Odioyenfe .C ・ Sep 28 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#mind-blown"&gt;
  &lt;/a&gt;
  Mind = Blown
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/trekhleb"&gt;@trekhleb&lt;/a&gt;
 shows us how train a car in a simulator to do self-parking using a genetic algorithm — need I say more? So cool.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/trekhleb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_xKZvdeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vEQB6cia--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/75714/b0158eeb-ee34-4382-9afd-ca9f9bede62c.JPG" alt="trekhleb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/trekhleb/self-parking-car-in-500-lines-of-code-58ea" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Self-Parking Car in &amp;lt;500 Lines of Code&lt;/h2&gt;
      &lt;h3&gt;Oleksii Trekhleb ・ Sep 28 ・ 25 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#what-it-means-to-have-good-commits-and-how-to-accomplish-it"&gt;
  &lt;/a&gt;
  What it Means to Have Good Commits — and How to Accomplish It.
&lt;/h2&gt;

&lt;p&gt;Another super relevant guide for Hacktoberfest! &lt;a class="mentioned-user" href="https://dev.to/mishmanners"&gt;@mishmanners&lt;/a&gt;
 reviews how to make good commits and how good commits make you a great team player in this article&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mishmanners" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Rph_F4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ak56TdXS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/397557/4eb4ece3-2832-407c-b933-f1b4b58829e6.jpg" alt="mishmanners"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mishmanners/how-to-make-a-good-git-commit-1ed7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to make a good `git commit`&lt;/h2&gt;
      &lt;h3&gt;Michelle Mannering ・ Oct 1 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-chris-got-the-job"&gt;
  &lt;/a&gt;
  How Chris Got the Job
&lt;/h2&gt;

&lt;p&gt;HUGE congrats to &lt;a class="mentioned-user" href="https://dev.to/dailydevtips1"&gt;@dailydevtips1&lt;/a&gt;
 for landing a job at Daily.dev. Find out how he made it happen in this post. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dailydevtips1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0-ei4oTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--edQh_ULI--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370165/083a25f4-e79b-42c4-9e5f-0332b834ca5e.png" alt="dailydevtips1"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dailydevtips1/how-i-landed-a-job-at-daily-dev-50ii" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I landed a job at Daily.dev&lt;/h2&gt;
      &lt;h3&gt;Chris Bongers ・ Oct 1 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Unpaid CTO adventures: Getting my fiancee`s business to generating 100k a month.</title>
      <author>Nick DeJesus</author>
      <pubDate>Tue, 05 Oct 2021 17:43:50 +0000</pubDate>
      <link>https://dev.to/dayhaysoos/unpaid-cto-adventures-getting-my-fiancee-s-business-to-generating-100k-a-month-2004</link>
      <guid>https://dev.to/dayhaysoos/unpaid-cto-adventures-getting-my-fiancee-s-business-to-generating-100k-a-month-2004</guid>
      <description>&lt;p&gt;You ever wonder about what people do at the C-level of a company? I did too, and no matter how many times people described it to me or I looked it up, it still never really clicked. That is until my fianceè, &lt;a href="https://twitter.com/parissAthena"&gt;Pariss&lt;/a&gt;, decided to launch her own business, Black Tech Pipeline (BTP). I've been witnessing her growth as an entrepreneur, Founder, CEO, and overall business woman. I'm extremely proud of how she's been handling it all on this first-time journey. &lt;/p&gt;

&lt;p&gt;One side-effect of Pariss launching her business was me somehow becoming her CTO. It's different from what you might expect for most CTO's. I'm in an unpaid position and held in this role indefinitely. Since this is the case, I've been alongside Pariss in this journey of learning and growing, but on the technical side. Black Tech Pipeline has also become my baby, and I see the great potential it has to become one of the best digital platforms on the internet. With that being said, I have a better understanding of what C-level exec people worry and care about. &lt;/p&gt;

&lt;p&gt;To oversimplify everything: &lt;/p&gt;

&lt;p&gt;CEO's have to make sure that the business can make money and scale.&lt;/p&gt;

&lt;p&gt;CTO's have to help the CEO with their goal, but focus on the tech side of things to make that goal come true.&lt;/p&gt;

&lt;p&gt;These roles can look wildly different for everyone. It really depends on the business itself and what the people running it envision it to become. This is why my take may sound so vague.&lt;/p&gt;

&lt;p&gt;Right now, BTP is doing &lt;em&gt;very&lt;/em&gt; well, but I have a feeling that I can help Pariss grow and scale it into a business that can be generating $100,000 a month. There is a lot of context that needs to be painted for me to get to that part, so let me break down her business and give insight on the things I've had to care about as Unpaid CTO.&lt;/p&gt;

&lt;p&gt;In this blog post, I'm going to break down my fianceé’s business model and talk about how I, Unpaid CTO, plan to alleviate a lot of the work that Pariss has on her shoulders, while also helping Black Tech Pipeline make more money.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-business"&gt;
  &lt;/a&gt;
  The business:
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Black Tech Pipeline&lt;/em&gt;✨&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blacktechpipeline.com"&gt;blacktechpipeline.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BTP is a job board and recruiting agency focused on connecting Black technologists to open job opportunities in the tech industry.  &lt;/p&gt;

&lt;p&gt;First order of business, as CTO, was for me to build the website!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blacktechpipeline.com"&gt;https://blacktechpipeline.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BTP has two business models: A job board and a recruiting service.&lt;/p&gt;

&lt;p&gt;The job board:&lt;/p&gt;

&lt;p&gt;Every company on the BTP job board receives a landing page that contains content around that companies values, diversity, equity, and inclusion (DE&amp;amp;I) initiatives, safety policies, what type of leadership they have, an overview of their interview process, benefits, and images of their team.&lt;/p&gt;

&lt;p&gt;Companies interested in being on the BTP job board have to take a discovery call with Pariss. She wants to learn more about the interested company, share more information on BTP, and talk about whether partnering may be a good fit or not. After every call, they receive an automated rate sheet that details BTP's services and pricing structure. If the company is interested in partnering, Pariss sends the company a legal agreement, and once that's signed, the company receives a questionnaire to fill out that Pariss uses to build them their landing page for the job board. Every job board is completely unique, thanks to MDX (I'll talk a bit about that later).&lt;/p&gt;

&lt;p&gt;Recruitment:&lt;/p&gt;

&lt;p&gt;BTP has a talent database with over 1,500 Black tech candidates from all around the world! They're mainly in the US, but also in Canada, the EU, UK, and Africa. They range from junior, to mid-level, to senior, and up. They're diverse in gender, education, tech stack, field in tech, and more.&lt;/p&gt;

&lt;p&gt;When companies are interested in recruitment, Pariss sends them a form that asks questions about the roles they'd like her and her team to source for, and anything they should keep in mind while sourcing. Then, Pariss and her sourcing assistants search the talent database for candidates that fit the requirements of that companies open roles. They connect interested candidates over to those companies, and if the company hires a BTP candidate, BTP gets a 20% cut of the hires first year base salary- standard pricing for recruiting. &lt;/p&gt;

&lt;p&gt;BTP's recruitment service has a unique and valuable model. After a company hires a candidate through recruitment, there is a 90 day check-in model where Pariss meets with the candidate and the organization separately, virtually, and bi-weekly to make sure that everything the hire is having a good experience and being set up for success. If there are any issues with the employer, she works with them on reviewing policies or procedures to improve the hires experience and to help the company retain them. So not only is her service a recruiting platform, her clients are also paying for transparent feedback on themselves as an employer that will improve the current and futures hires experience.&lt;/p&gt;

&lt;p&gt;She does have other miscellaneous revenue streams from the website but we're not going to get into those.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-business-has-been-doing"&gt;
  &lt;/a&gt;
  How business has been doing
&lt;/h2&gt;

&lt;p&gt;Phenomenal! Since launching BTP in September 2020, Pariss is averaging around 20k a month and business isn't slowing down at all. She's partnered with some of the biggest companies in the world, as well as start ups and everything in between. She has many returning clients and gets new ones from word of mouth, news articles and social media. She hasn't had to do any outreach at all.&lt;/p&gt;

&lt;p&gt;Honestly, if she wanted to continue this way forever, I don't think it's a bad idea as a life style business. If you think in terms of scalability and growth, there are definitely things that can be worked on, but I'll get to that in a moment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-current-stack"&gt;
  &lt;/a&gt;
  The current stack:
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#gatsby-hosted-on-netlify"&gt;
  &lt;/a&gt;
  Gatsby hosted on Netlify
&lt;/h4&gt;

&lt;p&gt;Gatsby was my go-to choice for me on this because I absolutely love how you can process and format data and bake it into a GraphQL layer. We knew we'd be needing a job board for the site and would have to have a page for every client. To keep things simple and affordable, I wanted to use Markdown as the source of data and figured I could use Gatsby's life cycle methods to build out the pages.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#forestry-cms"&gt;
  &lt;/a&gt;
  Forestry CMS
&lt;/h4&gt;

&lt;p&gt;I wanted a CMS that connected directly to GitHub that also allowed you to create Markdown files. They have a very generous free-tier and it allowed her the ability to launch her business until she could afford to pay.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mdx"&gt;
  &lt;/a&gt;
  MDX
&lt;/h4&gt;

&lt;p&gt;I love MDX so much! MDX allows you to use React in Markdown files. With MDX, she's given enough flexibility on the landing pages for companies to speak from their own voices and brand the way they want to. If you look at each page on the job board, they are completely unique. Most job boards have a specified format that displays the same amount of data per employer. Some clients have videos, some have more pictures than others and they're all in whatever order they want.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Magic links 🪄&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conceptually, magic links are a form of passwordless login.&lt;/p&gt;

&lt;p&gt;We use magic links that allow clients to update the job board roles on their own. Instead of giving them a log in, they use the magic link on an interface that actually updates the Black Tech Pipeline GitHub repo, which then triggers a Netlify build. &lt;/p&gt;

&lt;p&gt;We got help setting this up by an agency called &lt;a href="https://upstatement.com/"&gt;Upstatement&lt;/a&gt;. Would highly recommend hiring them for marketing, design or dev work, they have some geniuses over there!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Airtable
We hold all the candidate data in Airtable. It's been a tremendous help with getting kicked off, however, we are starting to find it limiting and might have to look elsewhere (my biggest problem to solve, yet).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-problems"&gt;
  &lt;/a&gt;
  The Problems
&lt;/h2&gt;

&lt;p&gt;Earlier, I said that business is going great and it'd be totally fine if Pariss wanted to continue the way she is now. From a scalibility perspective, there's quite a few problems we have:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#black-tech-pipeline-cant-run-without-pariss"&gt;
  &lt;/a&gt;
  Black Tech Pipeline can't run without Pariss
&lt;/h4&gt;

&lt;p&gt;Pariss literally &lt;em&gt;is&lt;/em&gt; the business. There is no way that Black Tech Pipeline can function without her existence. This might sound nice because it places a really heavy importance on an individual, which allows for extreme job security, but there are quite a few issues with this. When a person is the business itself, that usually means there aren't enough systems in place that help the business move along  to reach its full potential. It also means that she is doing a lot of the work on her own.&lt;/p&gt;

&lt;p&gt;I believe that a good solution for this is to set her up so that BTP is a business that anyone could run. We could set up very detailed documentation to talk through processes we have in place, and/or leverage my Unpaid CTO skills to build something that handles some of these processes for her (spoilers).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#airtable-isnt-sustainable-long-term"&gt;
  &lt;/a&gt;
  Airtable isn't sustainable long term
&lt;/h4&gt;

&lt;p&gt;If you're a candidate that's part of the database, you submit your data once and that's that. If something changes, like location or number, you have to resubmit instead of updating your data. We'd like to actually start putting out ads to get more candidates in the database, but we are hesitant to do that while everything is relying on Airtable at the moment.&lt;/p&gt;

&lt;p&gt;It would be ideal to allow candidates to submit their application and keep it up to date over time. This would make us feel better about the integrity of our data.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getting-a-hold-of-candidates-is-hard"&gt;
  &lt;/a&gt;
  Getting a hold of candidates is hard
&lt;/h4&gt;

&lt;p&gt;Recruiting seems easy because you're simply asking people if they'd like to interview for a high paying job. However, it's not that simple at all. The solution to this, in my perspective, wouldn't be to build something to contact people easier and faster. If people want to be available, they will be available. Along with waiting for replies, sourcing also requires a lot of time and energy to search and reach out.&lt;/p&gt;

&lt;p&gt;I think the answer here would be to increase the amount of candidates in our database. Right now, we have over 1,500 candidates and it's hard to get them to reply to cold emails in general. If we had a database with over 10,000 candidates, perhaps our chances of getting a response would be easier. If there was a way to increase the chance of individual responses alone, I'd go that route but I can't think of a reasonable way to go about solving that.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-cant-display-candidate-data"&gt;
  &lt;/a&gt;
  We can't display candidate data
&lt;/h4&gt;

&lt;p&gt;Many clients have asked if there was a way that they could view the candidates in the database themselves but we can't allow it. We always want to vet employers and understand their DE&amp;amp;I and safety practices before introducing them to our candidates. We also want to keep track of who's reaching out to who, and where everyone is in their interview process. &lt;/p&gt;

&lt;p&gt;However, finding a way to allow employers to source candidates themselves would give us back a lot of time to focus on other tasks and allows the recruitment model to scale itself. It's an interesting obstacle to overcome. &lt;/p&gt;

&lt;p&gt;So to quickly recap on the problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We need more systems in place to handle Pariss' tasks. We want BTP to be in a position where other people can run it on their own.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Airtable was great for starting but not ideal long term. Mostly want to allow candidates to update their data as time goes on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's too hard to recruit as more and more companies request that service. It's very time consuming and it's hard to get candidates to respond.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can't give clients direct access to the database.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ultimately, the recruiting part of her business is a significant money making part. We'd like to get better at landing recruits by increasing the number of candidates in the database, but  Airtable is not going to scale well for that. It's sort of a chicken and egg problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;I'm going to build a platform for Black Tech Pipeline, a web app on Next JS and AWS Amplify. Both Candidates and Employers will both be able to create accounts and will get assigned specific roles.&lt;/p&gt;

&lt;p&gt;Candidates will be able to upload similar data to what they do now in the Airtable database, but also get the ability to update info as things change and delete their info from the backend.&lt;/p&gt;

&lt;p&gt;Pariss and her assistants will be able to search the database as they already do with Airtable, but the integrity of the data will be better since I can set up forms with validation and formatting a bit better than Airtable can.&lt;/p&gt;

&lt;p&gt;There's also something I want to try out and see if I can take things further.&lt;/p&gt;

&lt;p&gt;We want to give the employers the ability to search the an anonymous version of the talent database. Basically, there will be only enough information to know if they would be interested in talking to the candidate, not enough to identify. We also will give the candidates a space in the form for an "anonymous pitch", where we ask them to write a paragraph about their experiences and what they're looking for in a way that doesn't give away who they are. &lt;/p&gt;

&lt;p&gt;I want to provide a system where an employer will "like" an anonymous candidates profile, Black Tech Pipeline employees will get notified of that interest, and they can go and reach out to the candidates on the employer's behalf if they want. It can also be looked at as a way of "bookmarking" a candidate for future reference. This, of course, is optional for companies that have active recruiters.&lt;/p&gt;

&lt;p&gt;To be honest, I'm probably going to need to talk to some lawyers about this "anonymous search" approach, but I'm excited to do some exploring.&lt;/p&gt;

&lt;p&gt;If things go really well, Pariss will be able to land multiple 4-5 recruits a month, which would bring her around 100k a month (if most salaries are near 100k and she takes 20% cut of first year salary). From there, she'll get so tied up in consultations with her hires and employer partners that she'll have to use those funds to hire more people to help her run the business, taking things to the next level.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;If you've made it this far, I want to say thank you so much for reading. I really enjoy my role as Unpaid CTO and figured I'd share parts of what it's like having such an important role. I've already started building and want to say I'm maybe 60% through the things I've detailed above, I'll be saving much more technical blog posts for later. &lt;/p&gt;

&lt;p&gt;If anyone has any questions or suggestions, feel free to hit me up on Twitter!&lt;/p&gt;

</description>
      <category>business</category>
      <category>cto</category>
      <category>diversity</category>
    </item>
  </channel>
</rss>
