<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>24/7 Tetap Nyaman Dimanapun Kapanpun </title>
      <author>Ramzy Izza </author>
      <pubDate>Sun, 23 Jan 2022 10:21:49 +0000</pubDate>
      <link>https://dev.to/ramzyizza/247-tetap-nyaman-dimanapun-kapanpun-1pmj</link>
      <guid>https://dev.to/ramzyizza/247-tetap-nyaman-dimanapun-kapanpun-1pmj</guid>
      <description>&lt;p&gt;Sebagai mahasiswa yang berasal dari Jakarta, menjalani perkuliaan jauh dari tempat tinggal, hingga harus merantau meninggalkan keluarga dan rumah tempat dimana aku dibesarkan, pastinya banyak banyak sekali rintangan yang harus dihadapi, terutama karena ini merupakan pengalamanku merantau pertama kalinya untuk melaksanakan kelas praktikum offline januari ini. Pada awalnya, aku sangat percaya bahwa Jogja merupakan kota yang aman, nyaman, murah, dan sangat bersahabat bagi para mahasiswa yang merantau karena terkenal dengan label kota pelajar. Tetapi, baru-baru ini telah muncul beberapa masalah yang telah menjadi concern hingga &lt;strong&gt;&lt;em&gt;red flag&lt;/em&gt;&lt;/strong&gt; bagi aku dan juga keluargaku. &lt;/p&gt;

&lt;p&gt;Salah satu masalah besar yang telah aku observed dan alami selama hampir sebulan tinggal di Jogja adalah rasa aman. Belum lama ini, telah viral mengenai berita dengan istilah klitih di platform media sosial seperti twitter, news media, dan youtube. Secara singkat, klitih merupakan fenomena permasalahan sosial yang dilakukan oleh anak dibawah umur atau pelajar SMP dan SMA yang melakukan tindakan kriminal dengan membacok, menyerang dengan senjata tajam, menakuti, menerror, hingga menyakiti siapapun di jalan raya tanpa memandang bulu atau membabi buta. Krisis akhlak yang dilakukan oleh mereka mendorong ketakutan masyarakat tidak hanya warga lokal tapi juga warga yang merantau. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6R2iyyRN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1i3dfzluz1zn1gcws57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6R2iyyRN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1i3dfzluz1zn1gcws57.png" alt="Image description" width="741" height="672"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uniknya, motif atau tujuan yang dilakukan oleh perlakuan klitih ini hanyalah untuk kesenangan semata atau sebagai kepemilikikan rasa hebat dan apresiasi dari geng motor bukan untuk membegal, mencuri motor, atau memalak orang-orang tertentu. Peristiwa ini telah mencemarkan nama baik kota Jogja sebagai kota yang aman dan nyaman untuk para pengendara motor dan pedestrian di jalan untuk melakukan aktivitas dimalam hari khususnya diatas jam 10 malam. Tak hanya itu, permasalan keamanan sosial ini terjadi tidak hanya itungan jari, tapi dalam hanya kurung waktu 1 tahun saja (data 2021) menunjukan bahwa telah terjadi peristiwa klitih sebanyak 58 kali! bayangkan saja itu merupakan peristiwa yang terlapor saja, belum mencakup peristiwa yang mungkin belom terlapor. Hebatnya lagi, aku memiliki teman yang baru pindah ke jogja selama satu bulan ini dan sudah mendengarkan berita dari teman, tetangga, sodara bahkan menyaksikan langsung peristiwa pembacokan terjadi di jalan raya pada malam hari hingga harus dibawa kerumah sakit UGD.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7DqTMLDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcq63wru21zwcltsjd29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7DqTMLDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcq63wru21zwcltsjd29.png" alt="Image description" width="750" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mengapa topik permasalahan ini ingin aku angkat, karena darurat dan urgensinya keamanan sipil yang menjadikan nyawa sebagai taruhan untuk menjalani aktivitas dimalam hari apalagi para mitra Gojek, Grab, dan ShopeeFood yang sedang mencari nafkah bahkan mahasiswa/i yang harus lembur malam mengerjakan projek dan tugas bisa menjadi korban! Contohnya saja peristiwa yang telah dialami oleh Almarhumah salah satu mahasiswi UGM harus merenggut nyawanya ketika menjalani sahur di dini hari akibat telah diserang oleh "klitih". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CcFE8Bfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf3mcmgpu3u8q73o6q75.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CcFE8Bfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf3mcmgpu3u8q73o6q75.png" alt="Image description" width="663" height="568"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Menanggapi problematika sosial yang terjadi ini, respon netizen di media sosial seperti twitter telah menggebu-gebu hingga menuntut ke pihak berwajib menanyakan dimanakah pertanggung jawaban mereka untuk memberikan masyarakat sipil rasa 'aman'? Bahkan salah satu korban yang terkena klitih di underpass Jakal harus melapor dan menggunggah pengalamannya melalui twitter agar masalah ini diangkat dan viral dengan tagar #YogyaTidakAman, #YogyaDaruratKlitih, hingga #SriSultanDaruratKlitih. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ezclxw0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux319bdeqfwbzcok5iwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ezclxw0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux319bdeqfwbzcok5iwa.png" alt="Image description" width="352" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dari peristiwa diatas sudah menunjukan bahwa terdapat tidak hanya satu masalah saja, tetapi masalah ini sudah mengakar dan bercabang mulai dari kurangnya edukasi, akhlak, dan moral para pelaku hingga pihak berwajib yang semestinya memberikan layanan keamanan dengan selalu siap siaga di lapangan membantu meredakan situasi dan kondisi klitih. Hal yang juga memperburuk kondisi dan patut diprihatinkan adalah, berita korban yang terkena klitih tersebut malah dibantah oleh pihak polisi yang mengatakan bahwa Jogja adalah kota yang aman tanpa memberikan validasi atau argumentasi yang konkrit, sehingga membuka peluang untuk para oknum klitih untuk melancarkannya aksinya dari hari ke hari. Perbuatan tersebut juga mencerminkan suatu masalah yang besar dimana polisi dan pemerintah yang semestinya bisa jadi tempat aduan bagi masyarakat malah berpaling dan menolak kenyataan yang ada. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ddKN85M_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amb8g2uus7h4k9w3ibp6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ddKN85M_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amb8g2uus7h4k9w3ibp6.png" alt="Image description" width="683" height="823"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dalam case ini, aku sebagai mahasiswa ilmu komputer bergerak dan berinisiatif untuk membuat sebuah solusi melalui media teknologi informasi khususnya aplikasi emergency yang bisa digunakan oleh seluruh WNI di seluruh wilayah Indonesia. Aplikasi ini akan memberikan layanan darurat pertama yaitu berupa servis Polisi, Ambulans, Pemadam Pembakaran, dan SAR. Mengapa aplikasi ini sangat patut untuk dikembangkan? karena banyak sekali kelebihan dan keuntungan yang didapat dari menggunakan platform aplikasi dibanding harus berkomunikasi melalui telfon langsung. Poin pro dari dikembangkannya aplikasi ini yang didapatkan yaitu berupa:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Memesan servis layanan dengan akurasi GPS dan maps yang sangat akurat dengan live location oleh pemesan tanpa harus memberikan penjelasan alamat yang panjang lebar (apalagi tidak hafal dimana)&lt;/li&gt;
&lt;li&gt;Bisa melakukan tracking lokasi (polisi, ambulans, atau pemadam kebakaran) secara realtime mulai dari profilnya, nomor kontak cadangan yang bisa dihubungi hingga approximate ETA sampai di TKP &lt;/li&gt;
&lt;li&gt;Melakukan sistem tracing dan tracking data yang terintegrasi jadi satu menggunakan NIK atau eKTP sehingga pendataan korban bisa langsung terekam secara automatis.&lt;/li&gt;
&lt;li&gt;Fitur utama sebelum melakukan pemesanan servis yaitu realtime video call dengan call center pusat untuk melihat situasi, kondisi, dan keperluan tim servis yang diperlukan untuk mengatasi masalah. Selain itu juga bisa menjadi bahan bukti kriminalitas jika diperlukan. (misal ada orang jantungan atau kecelakaan, atau terjadi kebakaran yang dahsyat, dan perampokan)&lt;/li&gt;
&lt;li&gt;Untuk layanan kesehatan, pemesan bisa terlebih dahulu mengisi data saat registrasi seperti riwayat penyakit atau alergi yang nantinya akan berguna untuk bagi tenaga kesehatan ambulans&lt;/li&gt;
&lt;li&gt;Untuk mengindari penyalahgunaan pesanan layanan fitur-fitur seperti fitur live tracking, realtime video call, tracking identitas NIK, eKTP dan No.HP teregistrasi akan membantu meminimalisir terjadinya prank call atau pesanan bodong.&lt;/li&gt;
&lt;li&gt;Saat registrasi, user bisa mendaftarkan kontak emergency tambahan untuk relasi terdekat seperti keluarga, teman, atau kerabat lainnya untuk pertolongan pertama dengan sharing GPS live location, realtime audio dan juga camera.&lt;/li&gt;
&lt;li&gt;Terdapat shortcut tambahan untuk langsung click SOS atau emergency call jika sewaktu-waktu diperlukan. &lt;/li&gt;
&lt;li&gt;Aplikasi bisa menjadi platform cadangan yang bebas biaya pulsa selain harus menelfon service center untuk meminta bantuan ambulans, polisi, SAR atau pemadam kebakaran&lt;/li&gt;
&lt;li&gt;Terdapat fitur RS &amp;amp; Polsek terdekat bedasarkan data geolokasi user yang bisa terintegrasi dengan google maps. &lt;/li&gt;
&lt;li&gt;Terdapat menu lapor atau pengaduan masyarakat untuk dibantu oleh pihak yang berwajib.&lt;/li&gt;
&lt;li&gt;Dan masih banyak fitur lainnya yang masih bisa di develop agar seamless dan terintegrasi menjadi satu&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dari penjabaran diatas, dapat disimpulkan bahwa solusi yang diberikan, yaitu membuat sebuah aplikasi layanan servis seamless terintegrasi yang akan dinamakan *&lt;em&gt;Siaga *&lt;/em&gt; akan meningkatkan keamanan, kenyamanan, dan kewaspadaan warga secara signifikan dan juga membantu mendorong transformasi digital ke tingkat yang lebih lanjut sehingga mempermudah segala aktivitas yang dilakukan tidak hanya untuk user (warga) tapi juga call center dan pihak berwajib dalam menerima laporan yang akan terbantu oleh fitur-fitur tambahan seperti realtime GPS location, video call, dan tracing NIK. Dengan kehadiran aplikasi ini, diharapkan juga tingkat kriminalitas akan berturun secara drastis karena akses ke layanan keamanan semakin mudah yang bisa diakses dimanapun kapanpun 24/7.&lt;/p&gt;

&lt;p&gt;Artikel by Ramzy Izza Wardhana, Internship SRD KOMATIK 2022&lt;/p&gt;

</description>
      <category>magangkomatiksrd</category>
      <category>android</category>
      <category>ios</category>
      <category>services</category>
    </item>
    <item>
      <title>Backend: Layered Architecture</title>
      <author>Blind Kai</author>
      <pubDate>Sun, 23 Jan 2022 10:04:45 +0000</pubDate>
      <link>https://dev.to/blindkai/backend-layered-architecture-514h</link>
      <guid>https://dev.to/blindkai/backend-layered-architecture-514h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;Choosing the correct architecture for your backend application is an important decision because you will get the most of it in a long shot. This article is written to give Backend Developers an understanding of how to structure the code in order to make it properly incapsulated correspondingly to its purpose. Properly structured code that follows the same rules for each inner domain is easier to be read and maintain for you and other developers that would work with it. Better code you write at the start - less pain you get later when requirements will change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considering-layered-architecture"&gt;
  &lt;/a&gt;
  Considering Layered Architecture
&lt;/h2&gt;

&lt;p&gt;When developers work in the backend, they've mostly worked with data and business logic around that data. No matter if you're dealing with API or if it's CLI - you need to structure your code properly.&lt;/p&gt;

&lt;p&gt;Layered Architecture is a great example of lightweight architecture which is not overwhelmed with redundant abstractions, contracts or boilerplate code.&lt;/p&gt;

&lt;p&gt;In order to implement this architecture correctly, you just need to place your code in a place according to its properties and purpose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-schema"&gt;
  &lt;/a&gt;
  General schema
&lt;/h2&gt;

&lt;p&gt;For example, we need to design REST API architecture. If you're interested in reading more about REST API design, please check &lt;a href="https://dev.to/blindkai/rest-api-design-27j9"&gt;this link&lt;/a&gt;.&lt;br&gt;
The general schema of layers is shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----7SGCAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wuk9zhfszle8qa4jfzof.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----7SGCAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wuk9zhfszle8qa4jfzof.jpg" alt="General schema for layered architecture" width="484" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have three layers, let's discuss them in detail:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Controller layer&lt;/strong&gt;: Controllers themselves should only be responsible for work delegation. They should not contain any logic or direct data manipulation. The main purpose of a controller is to get the request, then pass it to the service that will process it and then return the response that is given from the service. See controllers like a manager for requests.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Service layer&lt;/strong&gt;: Generally services contain information that is related to their domain. For example, if we have "Mail Service" we expect that sending/receiving emails happens there like in a real life. The same is fair for the codebase. Services (and their methods) handle the business logic which means that they are responsible for transforming data, performing additional actions &lt;em&gt;(like asking the repository for additional data or another service for processing some logic for it)&lt;/em&gt;. So if we need to send a mail, the service is responsible for getting the data as parameters, formatting them into the mail itself and sending it thru an external service or saving it thru the repository if it's an internal functionality.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Repository layer&lt;/strong&gt;: If there is code that somehow works with the database here is the place for this code to live. No matter if we're fetching the data from the DB or saving/modifying objects, it's the place where SQL queries or ORM operations should be placed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#detailed-schema"&gt;
  &lt;/a&gt;
  Detailed schema
&lt;/h2&gt;

&lt;p&gt;Let's discuss a few workflows to have a better understanding of how things could work if we're building the REST API for some "Shop orders" domains.&lt;br&gt;
Below you can see a few cases for writing domain code that follows the architecture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDARQ4Hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/of739v9cu7namgc9m2am.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDARQ4Hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/of739v9cu7namgc9m2am.jpg" alt="Image description" width="484" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenario-a-user-creates-order"&gt;
  &lt;/a&gt;
  Scenario A: User creates order
&lt;/h3&gt;

&lt;p&gt;For example, we have a user that wants to create a new order. The request comes into the controller, the request is validated so we ensure that we're working with valid parameters.&lt;br&gt;
Let's assume that the user also had discounts so we need to apply them in order to get the final price. For example, we have the service &lt;code&gt;UserOrderService&lt;/code&gt; which has the method &lt;code&gt;createOrder(user, order)&lt;/code&gt;. Within this method, we calculate the discount that is available for the user &lt;em&gt;(for example the user has a premium account or have a corporative discount so prices are lower)&lt;/em&gt;. The calculations are the business logic so they live inside a service method &lt;code&gt;calculateFinalPrice(order, discounts)&lt;/code&gt;. After we are done with the logic, we could use &lt;code&gt;UserOrderRepository&lt;/code&gt; with a method &lt;code&gt;createOrder(order)&lt;/code&gt; which contains all fields like orderId, userId, creation date etc. Inside this method, we simply write our "INSERT" statement.&lt;/p&gt;

&lt;p&gt;So we have a controller that passes the data into a service that process it and then the data is saved using the repository.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenario-b-confirm-order-choose-to-ship-and-pay-for-the-order"&gt;
  &lt;/a&gt;
  Scenario B: Confirm order, choose to ship and pay for the order
&lt;/h3&gt;

&lt;p&gt;As you already see, here we have several things to work with. We have an order that should be confirmed, shipping options to be configured and money-related operations to be done.&lt;br&gt;
So in practice, we get the request in our controller and pass it to the &lt;code&gt;UserOrderService&lt;/code&gt; which handle logic that checks if the order can be confirmed with those parameters. After that, we're triggering services that have logic to work with external &lt;code&gt;ShippingService&lt;/code&gt; and &lt;code&gt;PaymentService&lt;/code&gt;. Those may contain some additional logic or utility methods that belong to them so we will need to implement some additional features for it. Finally, those services might trigger our repositories because we need to save that we need to pass the order to a shipping company and we know that the order is paid already.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenario-c-user-creates-a-comment-below-the-bought-product"&gt;
  &lt;/a&gt;
  Scenario C: User creates a comment below the bought product
&lt;/h3&gt;

&lt;p&gt;The user got the order and want to give feedback &lt;em&gt;(or post the comment on the product page)&lt;/em&gt;. In this scenario, there is not much logic to work with the data &lt;em&gt;(if comment moderation is manual. If it's done by AI it could have some logic in &lt;code&gt;CommentService&lt;/code&gt; in method &lt;code&gt;checkComment(comment)&lt;/code&gt;)&lt;/em&gt;. If we have no logic there, we can simply pass the comment into &lt;code&gt;CommentRepository&lt;/code&gt; which has a method called &lt;code&gt;addComment(user, comment)&lt;/code&gt; and that's it. If no service is required you can simply trigger repository functionality from the controller.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Layered architecture is pretty simple and doesn't require developers to have big experience as well as it doesn't force developers to write too much boilerplate or deal with complicated abstractions and structures.&lt;br&gt;
If you need to design MVP or if your project is not that big (yet) consider using layered architecture as a base architecture.&lt;/p&gt;

</description>
      <category>backend</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Python Failed building wheel for backports.zoneinfo on Linux</title>
      <author>Shrikant Dhayje</author>
      <pubDate>Sun, 23 Jan 2022 09:38:53 +0000</pubDate>
      <link>https://dev.to/shriekdj/python-failed-building-wheel-for-backportszoneinfo-on-linux-2mo8</link>
      <guid>https://dev.to/shriekdj/python-failed-building-wheel-for-backportszoneinfo-on-linux-2mo8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Python Failed building wheel for backports.zoneinfo For Operating System Other Than Windows Like Linux Or MacOs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#details"&gt;
  &lt;/a&gt;
  Details
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The issue is mostly related to retrieving data from OS About Current Time With IANA And &lt;code&gt;backports.zoneinfo&lt;/code&gt; is pre-builted for Windows And We Have to Build The Package For Linux Or MacOS With Ruby Compiler Or Any Other Language Specified By Error Also.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#first-solution"&gt;
  &lt;/a&gt;
  First Solution
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Upgrade the &lt;code&gt;pip&lt;/code&gt; with &lt;code&gt;wheel&lt;/code&gt; and Try Again Installing.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; pip wheel

pip &lt;span class="nb"&gt;install &lt;/span&gt;backports.zoneinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#second-solution"&gt;
  &lt;/a&gt;
  Second Solution
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Try Installing the Alternative Package Named &lt;code&gt;tzdata&lt;/code&gt;. ( Worked for My &lt;code&gt;fastapi&lt;/code&gt; project. )&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Package Supports Python 3 But It's Readme Is Not Updated About the Python 2 Support By Dev IDK Why 🤔.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;tzdata
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#third-solution"&gt;
  &lt;/a&gt;
  Third Solution
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Install &lt;code&gt;Ruby Compiler&lt;/code&gt; From Your System Package Manager and Run The pip code again.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given Below is for &lt;code&gt;Ubuntu&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;ruby-full

pip &lt;span class="nb"&gt;install &lt;/span&gt;backports.zoneinfo 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give a reaction if any one solutions helped you in any way.&lt;br&gt;
Bye 👋.&lt;/p&gt;

</description>
      <category>python</category>
      <category>linux</category>
      <category>windows</category>
      <category>shriekdj</category>
    </item>
    <item>
      <title>CSS Pseudo-classes: Forms</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 23 Jan 2022 09:14:50 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/css-pseudo-classes-forms-5fjb</link>
      <guid>https://dev.to/dailydevtips1/css-pseudo-classes-forms-5fjb</guid>
      <description>&lt;p&gt;Yesterday we started looking at pseudo-classes that relate to links. In this article, we'll take a look at form-related pseudo-classes.&lt;/p&gt;

&lt;p&gt;I've split this up into a series of four, where this is the second part about form pseudo-states.&lt;/p&gt;

&lt;p&gt;The other parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/css-pseudo-classes-links/"&gt;Link pseudo-states&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Form pseudo-states&lt;/em&gt; (this one 💖)&lt;/li&gt;
&lt;li&gt;Element state selectors (coming soon)&lt;/li&gt;
&lt;li&gt;Other pseudo states (coming soon)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#form-pseudostates"&gt;
  &lt;/a&gt;
  Form pseudo-states
&lt;/h2&gt;

&lt;p&gt;Another significant use case for pseudo-classes is forms.&lt;br&gt;
We already had a glimpse at the &lt;code&gt;focus&lt;/code&gt; states, which can also be used on form elements.&lt;/p&gt;

&lt;p&gt;But there are some more we can leverage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:disabled&lt;/code&gt;: Element is disabled&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:enabled&lt;/code&gt;: Element is active. However, is the default case so rarely used&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:checked&lt;/code&gt;: Checkbox/radio is checked&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:indeterminate&lt;/code&gt;: Checkbox/radio is not true or false&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:placeholder-shown&lt;/code&gt;: Placeholder is active and has no value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:valid&lt;/code&gt;: Field is valid&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:invalid&lt;/code&gt;: Field is invalid&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:in-range&lt;/code&gt;: Number field is in range of options&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:required&lt;/code&gt;: Field is required&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:optional&lt;/code&gt;: Field is optional, again a default state so rarely used&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#-raw-disabled-endraw-amp-raw-enabled-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:disabled&lt;/code&gt; &amp;amp; &lt;code&gt;:enabled&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;As mentioned in the descriptive text for &lt;code&gt;:enabled&lt;/code&gt;, it's also a default state, so it's not often used. As we instead use the main selector to style on.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;:disabled&lt;/code&gt; state to indicate when a form field is disabled, and the user can't change anything in there.&lt;/p&gt;

&lt;p&gt;Let's say we have a button that is disabled until they fill out all fields, for instance.&lt;br&gt;
It's an excellent way to showcase that it's not yet valid to the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:disabled&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lightGray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;not-allowed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the difference in the following CodePen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/QWqzBbW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-checked-endraw-amp-raw-indeterminate-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:checked&lt;/code&gt; &amp;amp; &lt;code&gt;:indeterminate&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The checked and indeterminate pseudo-classes can help style checkboxes and radio buttons.&lt;/p&gt;

&lt;p&gt;The checked class will fire if the element is on, and indeterminate is funny as it targets non-binary states.&lt;/p&gt;

&lt;p&gt;What does that even mean?&lt;br&gt;
A checkbox can be on/off right, but there are rare cases where it can be neither. And that's precisely where indeterminate kicks in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: To be honest never needed for it in my life&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How can we style with the &lt;code&gt;checked&lt;/code&gt; state?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'checkbox'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="no"&gt;hotpink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using the box-shadow here as this is one of the view things that work well for checked states.&lt;/p&gt;

&lt;p&gt;If you plan to style the checkbox further, it might be best to opt for a &lt;a href="https://daily-dev-tips.com/posts/css-custom-checkbox/"&gt;custom checkbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As for the &lt;code&gt;indeterminate&lt;/code&gt;, it's not worth going into detail here as it's such a niche use-case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/indeterminate-checkboxes/"&gt;CSS-tricks has an excellent article&lt;/a&gt; on it if you wish more information.&lt;/p&gt;

&lt;p&gt;Try it out in this CodePen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/NWaeBGQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-placeholdershown-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:placeholder-shown&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Before, I dedicated a more detailed article about the &lt;a href="https://daily-dev-tips.com/posts/css-placeholder-shown-class/"&gt;CSS &lt;code&gt;:placeholder-shown&lt;/code&gt; pseudo class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It can be used to indicate which fields have their placeholder showing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:placeholder-shown&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;teal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which results in this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/mdBajOa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Try and add a value in the bottom input. It should change the appearance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#-raw-valid-endraw-raw-invalid-endraw-amp-raw-inrange-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:valid&lt;/code&gt;, &lt;code&gt;:invalid&lt;/code&gt;, &amp;amp; &lt;code&gt;:in-range&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These are validation classes and can be used to showcase a field that is not valid.&lt;/p&gt;

&lt;p&gt;Let's use an email field. It's the easiest to showcase both the invalid and the valid states.&lt;/p&gt;

&lt;p&gt;We can add a red/green border and shadow based on the validation state like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:invalid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:valid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can try it out in the below CodePen by adding a non-email and email value.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;in-range&lt;/code&gt; one is in line with these two and can be used for number fields to determine if they are in the correct range.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:in-range&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also try this one out, but pick a number between 1 and 10. (Which is the range for the number input)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/poWqZey?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-required-endraw-amp-raw-optional-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:required&lt;/code&gt; &amp;amp; &lt;code&gt;:optional&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This can be used to determine if a field is required or not. The optional state is the default state, so it is unnecessary to state this explicitly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:required&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give all required fields an orange background.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/xxXmJrp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Add Stories to your highlights on Instagram without showing it to stories</title>
      <author>Shaswat Raj</author>
      <pubDate>Sun, 23 Jan 2022 09:04:41 +0000</pubDate>
      <link>https://dev.to/sh20raj/add-stories-to-your-highlights-on-instagram-without-showing-it-to-stories-3g1g</link>
      <guid>https://dev.to/sh20raj/add-stories-to-your-highlights-on-instagram-without-showing-it-to-stories-3g1g</guid>
      <description>&lt;p&gt;Steps :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just upload a story to Instagram.&lt;/li&gt;
&lt;li&gt;Delete it and it will be stored till 30 days in Recently Deleted Section.&lt;/li&gt;
&lt;li&gt;Restore it After 24 hours.&lt;/li&gt;
&lt;li&gt;It will came to your Archive.&lt;/li&gt;
&lt;li&gt;Then Add it to your highlights.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>instagram</category>
      <category>tips</category>
      <category>tricks</category>
      <category>sh20raj</category>
    </item>
    <item>
      <title>Micro Frontends: After one year with Single-SPA</title>
      <author>Samim Pezeshki</author>
      <pubDate>Sun, 23 Jan 2022 09:00:42 +0000</pubDate>
      <link>https://dev.to/psamim/micro-frontends-after-one-year-with-single-spa-1eoo</link>
      <guid>https://dev.to/psamim/micro-frontends-after-one-year-with-single-spa-1eoo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-did-we-choose-micro-frontend-architecture"&gt;
  &lt;/a&gt;
  Why did we choose micro frontend architecture?
&lt;/h2&gt;

&lt;p&gt;We have a codebase that was originally written using AngularJS. After some years and when finally the news about AngularJS end of life came around, we started migrating to Angular (actually hybrid Angular/AngularJS). Finally, two years ago we successfully migrated to Angular (You can read the details in &lt;a href="https://dev.to/psamim/steps-for-upgrading-angularjs-to-angular-9-5508"&gt;another post&lt;/a&gt;) having high hopes that by migrating to it we can leverage a new ecosystem. But after some months it became evident that Angular and AngularJS are so different that we need to rewrite everything, which is not very pleasant. Also, the React ecosystem and talent pool seemed much more vibrant so investing again in Angular for new upcoming features seemed like a non-optimal long-term solution. Over the years there were more experienced React developers in our teams so developing features in React would be much faster than having them in Angular.&lt;/p&gt;

&lt;p&gt;So we were looking for options to be able to keep our current Angular app while being able to add new upcoming features and sections using React or other frameworks. After some search, we found out that micro frontends were the solution we were looking for! Using Single-SPA one can have multiple frameworks, Angular and React, running side by side. Single-SPA is composed of so-called apps each being a SystemJS or ES module. Each app can use a different framework and technology and it only needs to mount itself somewhere on the page. Apps are mounted and unmounted based on the page route. All of this happens client-side. As a side note, I was thinking if we had known about micro frontends, maybe we would never have migrated to hybrid Angular and would have chosen Single-SPA from the beginning.&lt;/p&gt;

&lt;p&gt;Micro frontends are created for various purposes. Mainly it is discussed as a solution for keeping release cycles, deployments, and decisions in each team independent of others, like microservices but for frontend. In our case, we settled on micro frontends to be able to extend the lifetime of a legacy codebase by being able to take advantage of newer frameworks alongside old ones.&lt;/p&gt;

&lt;p&gt;We also assessed some other micro frontend frameworks and solutions, even using iframes and server-side routing, but finally, we decided to go with SignleSPA as it is less opinionated, simple and the best fit for our current codebase. The website is fully static (Angular/AngularJS) and is served from a CDN, so using server-side routing was out of options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;p&gt;The main benefit was improving the developer experience. Each Single-SPA app is developed separately, so when a developer starts to work on a React app (Single-SPA app) he/she does not need to install all the dependencies for other apps, like Angular, or to know how other apps are configured. Also because each app is small the development cycle of local builds, hot-reloads, and tests are much shorter in time. Developers can build features (Single-SPA apps) truly independently and separately. So now we could use all the experiences of our React developers in our legacy website.&lt;/p&gt;

&lt;p&gt;Each app in single-SPA is bundled separately. Using different apps for different features results in multiple small chunks, instead of a big fat bundle. Splitting the bundle can also be done by configuring Webpack without Single-SPA, but here we got it for free.&lt;/p&gt;

&lt;p&gt;Apart from smaller chunks and bundles we got lazy loading too. Some features are not used frequently, so their bundle can be loaded separately in the background after the initial load.&lt;/p&gt;

&lt;p&gt;As new feature apps are developed using React, even after migration to a whole new framework like NextJS in the future, those parts can be re-used without the need to rewrite everything from scratch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h2&gt;

&lt;p&gt;One &lt;a href="https://github.com/angular-microfrontends/navbar/issues/1"&gt;issue&lt;/a&gt; I had was that I could not generate source maps for Angular when it was built as a SystemJS module. I did not dig deep into the issue as it did not have a great impact on the project. But it is was nice to have source maps.&lt;/p&gt;

&lt;p&gt;Another issue was the integration between the apps. We used local storage, global events, and shared modules for this and they all worked pretty well. But deciding on the best option was sometimes challenging.&lt;/p&gt;

&lt;p&gt;Also as the whole concept is new, it took some time for the new developers to learn how to get on track, although this was negligible and even sometimes exciting to learn about new trends.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-structure-and-deployment-pipelines"&gt;
  &lt;/a&gt;
  Code structure and deployment pipelines
&lt;/h2&gt;

&lt;p&gt;All Single-SPA apps are put into a single repository. Each app has its own &lt;code&gt;package.json&lt;/code&gt; file and is developed and built separately. There is also the root app which contains the main router responsible for mounting and unmounting other apps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── apps
│   ├── root
│   │   ├── node_modules
│   │   ├── package.json
│   │   └── src
│   │       └── index.html
│   ├── feature-one (Angular)
│   │   ├── node_modules
│   │   └── package.json
│   └── feature-two (React)
│       ├── node_modules
│       └── package.json
└── scripts
    ├── build.sh
    ├── deploy.sh
    └── start.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;During deployment, there is a shell script that installs and builds each app and assembles them by copying the built files into a final build directory. Then it uses AWS Cloudformation to create a static website on S3, CloudFront, and Route53.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;ROOT_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4.0-&lt;span class="si"&gt;$(&lt;/span&gt;git log &lt;span class="nt"&gt;-1&lt;/span&gt; &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"%h"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_NUMBER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;-&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="nt"&gt;--iso&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for &lt;/span&gt;d &lt;span class="k"&gt;in&lt;/span&gt; ./apps/&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
  if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$d&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" * Installing dependencies for &lt;/span&gt;&lt;span class="nv"&gt;$d&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;echo
    cd&lt;/span&gt; &lt;span class="nv"&gt;$d&lt;/span&gt;
    npm &lt;span class="nb"&gt;install
    &lt;/span&gt;npm run build
    &lt;span class="nb"&gt;mv &lt;/span&gt;dist &lt;span class="nv"&gt;$ROOT_PATH&lt;/span&gt;/dist/&lt;span class="nv"&gt;$d&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; -
  &lt;span class="k"&gt;fi
done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a single deployment pipeline and repository is used for all the apps, we are not gaining from one of the main benefits of using micro frontends architecture which is independent release cycles for each app. But by putting everything in a single repository we could achieve what we were looking for without dealing with the complexity of managing multiple repositories and deciding on how to update import maps (solutions like &lt;a href="https://github.com/single-spa/import-map-deployer"&gt;import-map-deployer&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-experience"&gt;
  &lt;/a&gt;
  Development Experience
&lt;/h2&gt;

&lt;p&gt;There are two ways to start developing. One is using the single-spa-inspector browser extension. This way the developer opens the fully-deployed live website (not localhost:3000 or any local address) and overrides the import maps to make the live website connect to the Single-SPA app running locally. This way the developer only runs the one feature app he/she is working on while running it inside the live deployed website. It frees the developer from running the whole website locally and even has the side benefit of seeing and developing the feature app in the context of the deployed website connected to the live database. This way of development was personally very unique and new to me, it was amazing.&lt;/p&gt;

&lt;p&gt;Another approach is to start all Single-SPA apps locally. This approach is sometimes needed for debugging the integration between the apps. The below script is used to run all apps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;SCRIPT_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3000

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"⚜    Starting &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT_ENV&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;..."&lt;/span&gt;
&lt;span class="nb"&gt;echo
echo&lt;/span&gt; ⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"📡   Listening on https://localhost:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽
&lt;span class="nb"&gt;echo

echo&lt;/span&gt; &lt;span class="s2"&gt;"⚠    Ignore if the below single-spa apps report about their ports! root app is served on port &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;
&lt;span class="nb"&gt;echo

&lt;/span&gt;npx concurrently &lt;span class="nt"&gt;--names&lt;/span&gt; &lt;span class="s2"&gt;"ROOT,FEATURE1,FEATURE2"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"#E0E0E0,#26C6DA,#FFA726"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s2"&gt;"cd apps/root &amp;amp;&amp;amp; env PORT=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; npm run start:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT_ENV&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s2"&gt;"cd apps/feature-one &amp;amp;&amp;amp; env PORT=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;expr&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; + 1&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; npm run start:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT_ENV&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s2"&gt;"cd apps/feature-two &amp;amp;&amp;amp; env PORT=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;expr&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; + 2&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; npm run start:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT_ENV&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#road-ahead"&gt;
  &lt;/a&gt;
  Road ahead
&lt;/h2&gt;

&lt;p&gt;Adopting micro frontend architecture (Single-SPA) enabled us to further keep our legacy website while utilizing more trendy technologies to deliver new features. Otherwise, we had to rewrite the whole website or stick to what we had. Now that new features are delivered on time and we are on schedule plans can be made to rewrite the whole website without a rush. &lt;/p&gt;

&lt;p&gt;With new trends, frameworks, and ideas popping up in the web development space every day, like server-side rendering, statically generated dynamic content, edge serverless workers, etc., I am not sure if we would again choose Single-SPA for a project creating from scratch. But for our use case, the micro frontend architecture served us well. If you have any framework or architecture in mind to suggest for our next project, please share, I would appreciate it.&lt;/p&gt;

</description>
      <category>singlespa</category>
      <category>microfrontend</category>
      <category>react</category>
      <category>angular</category>
    </item>
    <item>
      <title>Deep dive into React codebase [EP3: Reverse engineer the most famous React snippet]</title>
      <author>Nikita Grechino</author>
      <pubDate>Sun, 23 Jan 2022 08:26:32 +0000</pubDate>
      <link>https://dev.to/fromaline/deep-dive-into-react-codebase-ep3-reverse-engineer-the-most-famous-react-snippet-njj</link>
      <guid>https://dev.to/fromaline/deep-dive-into-react-codebase-ep3-reverse-engineer-the-most-famous-react-snippet-njj</guid>
      <description>&lt;p&gt;In &lt;a href="https://dev.to/fromaline/deep-dive-into-react-codebase-ep2-what-package-from-the-repo-is-the-most-popular-on-npm-2328"&gt;the previous episode&lt;/a&gt; we finished with the React repository setup.&lt;br&gt;
In today's episode, we'll scratch the surface of the actual source code and reverse engineer probably the most well-known React snippet.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#recall"&gt;
  &lt;/a&gt;
  Recall
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#what-we-learned-in-the-previous-episodes"&gt;
  &lt;/a&gt;
  What we learned in the previous episodes
&lt;/h3&gt;

&lt;p&gt;The React monorepo contains a lot of &lt;strong&gt;React-related packages&lt;/strong&gt;, including React core, renderers, reconciler, utility packages, devtools, and testing utilities. &lt;br&gt;
Some of them (like &lt;code&gt;react&lt;/code&gt;, &lt;code&gt;react-dom&lt;/code&gt; and &lt;code&gt;react-reconciler&lt;/code&gt;) are more relevant for developing a good understanding of React source code as &lt;strong&gt;a library for building UI in browser environment&lt;/strong&gt;.&lt;br&gt;
Others are related to more advanced stuff, like testing, tooling, or React Native, and only relevant if we would explore &lt;strong&gt;React with its toolset&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Knowing all this, we are ready to dive straight into the code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#finding-the-right-approach"&gt;
  &lt;/a&gt;
  Finding the right approach
&lt;/h2&gt;

&lt;p&gt;It's hard to come up with the right approach for exploring React codebase, mainly because it's tremendously huge and complex in its current state.&lt;br&gt;
I've already tried to do it a couple of times head-first without an approximate understanding or a plan of how to do it.&lt;br&gt;
This time, we'll try it another way.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#plan-for-today"&gt;
  &lt;/a&gt;
  Plan for today
&lt;/h3&gt;

&lt;p&gt;We'll try to discover the codebase in the most logical way, I could come up with. We won't do the *"start with the &lt;code&gt;package.json&lt;/code&gt;, find an entry &lt;code&gt;index.js&lt;/code&gt; file and move from there"*because it's extremely hard to not get lost this way. &lt;br&gt;
Instead, we'll start with the simplest React code, which most of us have seen dozens of times, and reverse engineer it with the help of the real React source code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This approach &lt;strong&gt;keeps things simple&lt;/strong&gt;, follows a gentle learning curve and allows you to start with the most practical and intriguing stuff. It's similar to how we create production-ready code, starting with the outline of a solution and going into details on demand. Simply put, we forge our own path from the basics to the final destination, not the other way around.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: It's an experimental approach, thus I don't know whether it actually works well in scale.&lt;br&gt;
So if you like it and it works for you, leave a comment to let me know, that I should continue using it. &lt;br&gt;
Or if it's the other way around for you, leave a comment on what was wrong and I'll try to design a better approach, based on your feedback. &lt;br&gt;
Thanks in advance 🙏🏻&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#materials-for-the-episode"&gt;
  &lt;/a&gt;
  Materials for the episode
&lt;/h3&gt;

&lt;p&gt;I set up &lt;a href="https://github.com/fromaline/deep-dive-into-react-codebase"&gt;a repository on GitHub&lt;/a&gt; for this series. We'll explore, experiment, and play around there.&lt;br&gt;
It's a monorepo (yeah, like the React repository), so it will contain a directory for each episode from now on.&lt;br&gt;
Clone the repo to your local machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/fromaline/deep-dive-into-react-codebase.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or open it in your favorite online code editor, like &lt;a href="https://gitpod.io/#https://github.com/fromaline/deep-dive-into-react-codebase"&gt;Gitpod&lt;/a&gt; or &lt;a href="https://githubbox.com/fromaline/deep-dive-into-react-codebase"&gt;CodeSandbox&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-setup"&gt;
  &lt;/a&gt;
  Our setup
&lt;/h3&gt;

&lt;p&gt;In the repo you'll find a directory for the current episode, called &lt;code&gt;ep3&lt;/code&gt; with the simplest possible React setup. It's just an &lt;em&gt;html&lt;/em&gt; page, where &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; is added through &lt;code&gt;unpkg&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/react@17.0.0/umd/react.development.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/react-dom@17.0.0/umd/react-dom.development.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script  &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;em&gt;js&lt;/em&gt; file with a well-known setup, that you can find in virtually any React web application source code in some way or another.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Such a simple setup declutters our experience of investigation. It removes complexity, that modern frontend tooling, like &lt;em&gt;webpack&lt;/em&gt; and &lt;em&gt;babel&lt;/em&gt; introduce for the convenience of end-users. But we don't want to be just end-users, we aspire to develop in-depth understanding, thus we don't need these tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-up-and-running"&gt;
  &lt;/a&gt;
  Get up and running
&lt;/h3&gt;

&lt;p&gt;Now we need to spin up the &lt;code&gt;index.html&lt;/code&gt; in the browser. &lt;br&gt;
I use &lt;a href="https://www.npmjs.com/package/http-server"&gt;&lt;code&gt;http-server&lt;/code&gt;&lt;/a&gt;, but you may use your favorite one, like &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;&lt;code&gt;live-server&lt;/code&gt;&lt;/a&gt; from VSCode or Python &lt;a href="https://docs.python.org/3/library/http.server.html"&gt;&lt;code&gt;http.server&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http-server episodes/ep3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing, that we see is an error like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Uncaught SyntaxError: Unexpected token '&amp;lt;' index.js:1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K7dei-G0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z46qjkg9g0p1z1wb0m2u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K7dei-G0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z46qjkg9g0p1z1wb0m2u.png" alt="error in jsx" width="566" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This error occurred because we use JSX without an appropriate tool, like &lt;em&gt;Babel&lt;/em&gt; to compile it. So we need to &lt;strong&gt;"compile" JSX ourselves&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What Babel does internally is pretty straightforward. It replaces JSX with calls to React.createElement or other function if it was explicitly specified with special annotation syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @jsx React.createElement&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So after the transpilation phase happened the code looks like plain old JavaScript. You may double-check it in &lt;a href="https://babeljs.io/repl#?browsers=defaults&amp;amp;build=&amp;amp;builtIns=false&amp;amp;corejs=3.6&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=MYewdgzgLgBApgDwIYFsAOAbOMC8MA8AJgJYBuAfABJwYYgwDuIAThoQIT4D0JFQA&amp;amp;debug=false&amp;amp;forceAllTransforms=true&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=false&amp;amp;fileSize=true&amp;amp;timeTravel=false&amp;amp;sourceType=module&amp;amp;lineWrap=true&amp;amp;presets=react&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.16.11&amp;amp;externalPlugins=&amp;amp;assumptions=%7B%7D"&gt;Babel REPL&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n4LKAip_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2jawb9w0nwzj5frr36t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n4LKAip_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2jawb9w0nwzj5frr36t.png" alt="screenshot of the browser with the example" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Now we see our &lt;code&gt;Hello world&lt;/code&gt; example and may finally go on!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reverse-engineering"&gt;
  &lt;/a&gt;
  Reverse engineering
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#the-goal"&gt;
  &lt;/a&gt;
  The goal
&lt;/h3&gt;

&lt;p&gt;Our goal for today's and the next episode is to grasp how &lt;code&gt;react-dom&lt;/code&gt; mounts the tree of React components to the real DOM. It's important to understand this process, because it's the first thing, that you initialize in React app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-hypothesis"&gt;
  &lt;/a&gt;
  The hypothesis
&lt;/h3&gt;

&lt;p&gt;Let's form a hypothesis to start with. &lt;br&gt;
I assume from my understanding of how real DOM works, that &lt;code&gt;react-dom&lt;/code&gt; traverses a tree of React components (virtual DOM), formed by &lt;code&gt;react&lt;/code&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then &lt;code&gt;react-dom&lt;/code&gt; creates a real DOM structure, based on the virtual DOM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then &lt;code&gt;react-dom&lt;/code&gt; mounts the result in provided container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#test-the-hypothesis"&gt;
  &lt;/a&gt;
  Test the hypothesis
&lt;/h3&gt;

&lt;p&gt;Now we'll test the hypothesis and find out whether we were right or not.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-raw-reactcreateelement-endraw-does-and-how-it-works"&gt;
  &lt;/a&gt;
  What &lt;code&gt;React.createElement&lt;/code&gt; does and how it works?
&lt;/h4&gt;

&lt;p&gt;First of all, let's check out how &lt;code&gt;React.createElement&lt;/code&gt; actually works and what it returns. We already know, that it relates to the &lt;code&gt;react&lt;/code&gt; package, thus let's check the &lt;code&gt;packages/react&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// packages/react/index.js&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here it is, so then find the place from where it's exported.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// packages/react/src/React.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;__DEV__&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;createElementWithValidation&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createElementProd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, &lt;code&gt;createElement&lt;/code&gt;'s value differs, based on &lt;code&gt;__DEV__&lt;/code&gt; global variable, which in turn defines whether code was compiled in so-called &lt;em&gt;development mode&lt;/em&gt; or not.&lt;/p&gt;

&lt;p&gt;Based on the name of these two functions and the meaning of the &lt;code&gt;__DEV__&lt;/code&gt; variable, I assume, that the &lt;code&gt;createElementWithValidation&lt;/code&gt; does additional validation to provide meaningful error messages and warnings in &lt;em&gt;development mode&lt;/em&gt;. And &lt;code&gt;createElementProd&lt;/code&gt; is probably more performant and generally tailored towards production use.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-raw-createelementwithvalidation-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;createElementWithValidation&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;Firstly let's check the former assumption by introducing an error in our React app. We provide a null value instead of the actual valid type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now we see a typical React warning and can easily trace where it was initialized.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E5DMNs5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7aqb84jg60gpgyouwu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E5DMNs5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7aqb84jg60gpgyouwu1.png" alt="Warning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: null. from react.development.js:245" width="880" height="110"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The place, where it was initially called is our &lt;code&gt;createElementWithValidation&lt;/code&gt; function, so click on the &lt;code&gt;react.development.js:2240&lt;/code&gt; to see the actual code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vD7_kyWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axgg2987b3hvzx3od8jz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vD7_kyWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axgg2987b3hvzx3od8jz.png" alt="trace warning" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It becomes clear from this code snippet, that our first assumption is near the truth. &lt;code&gt;createElementWithValidation&lt;/code&gt; checks whether provided &lt;code&gt;type&lt;/code&gt; is valid and if not throws different warnings, based on what exactly is wrong with provided type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: You may ask, why is there such weird statement in the code?&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React.createElement: type is invalid...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Simply put, it's a block statement, but without &lt;code&gt;if&lt;/code&gt; condition. &lt;br&gt;
&lt;code&gt;if&lt;/code&gt; statement was stripped out by webpack, because it's a development build, thus all warnings and errors must show up.&lt;br&gt;
This topic is a bit out of scope of the article, for more info check out &lt;a href="https://twitter.com/fromaline/status/1484949311897096192"&gt;my Twitter thread&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now let's remove the error and observe what else happens inside this function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createElementWithValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;validType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isValidElementType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// We warn in this case but don't throw. We expect the element creation to&lt;/span&gt;
  &lt;span class="c1"&gt;// succeed and there will likely be errors in render.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;validType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// warnings, but no returns!&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first interesting bit here is how error handling is implemented, there is even a comment about it right after the &lt;code&gt;validType&lt;/code&gt; variable.&lt;br&gt;
React developers don't throw an exception in case the type is invalid, instead, they proceed but expect some errors in the render.&lt;br&gt;
We know that render in React is handled by renderers, in our case&lt;code&gt;react-dom&lt;/code&gt;. &lt;br&gt;
So from this, we can assume, that there are some validations regarding React components and appropriate warnings inside &lt;code&gt;react-dom&lt;/code&gt; itself. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: It's an interesting assumption because it implies, that output of the &lt;code&gt;react&lt;/code&gt; package is not valid all the time and renderers need to validate, what they get from it on its own.&lt;br&gt;
We'll definitely test this assumption in one of the next articles.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's continue with the function. After the initial check, it calls the more general-purpose &lt;code&gt;createElement&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, this fact probably indicates, that there is a single &lt;code&gt;createElement&lt;/code&gt; function, which actually creates the element. And &lt;code&gt;createElementWithValidation&lt;/code&gt; and &lt;code&gt;createElementProd&lt;/code&gt; are only wrappers, that add some extra functionality. &lt;br&gt;
We'll test this assumption after we are done with current observations.&lt;/p&gt;

&lt;p&gt;Here we see the check against null with type coercion and the useful comment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The result can be nullish if a mock or a custom function is used.&lt;/span&gt;
&lt;span class="c1"&gt;// TODO: Drop this when these are no longer allowed as the type argument.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This snippet shows, that &lt;code&gt;element&lt;/code&gt; can be null or even undefined if "a mock or a custom function" is used. &lt;br&gt;
It's hard to say for sure now, how custom function can be used here, because &lt;code&gt;createElement&lt;/code&gt;is hardcoded, but we definitely will figure it out later.&lt;br&gt;
&lt;em&gt;Sidenote: Right now I can't fully understand what's the &lt;code&gt;TODO&lt;/code&gt; part means. My initial guess is, that this check could be removed, whenever null or undefined won't be allowed as a value of the element.&lt;br&gt;
If you have a better idea of what it means, write it in the comments section! I would be grateful.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next thing is a validation of child keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Skip key warning if the type isn't valid since our key validation logic&lt;/span&gt;
&lt;span class="c1"&gt;// doesn't expect a non-string/function type and can throw confusing errors.&lt;/span&gt;
&lt;span class="c1"&gt;// We don't want exception behavior to differ between dev and prod.&lt;/span&gt;
&lt;span class="c1"&gt;// (Rendering will throw with a helpful message and as soon as the type is&lt;/span&gt;
&lt;span class="c1"&gt;// fixed, the key warnings will appear.)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;validateChildKeys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the actual snippet, we can conclude, that key validation only happens, if the initially provided element's type was valid. From the first two sentences of the comment it becomes more obvious what's the reason behind such behavior. &lt;code&gt;validateChildKey&lt;/code&gt; doesn't expect a non-string/function type and as a result can throw confusing errors, that would differ from the production version.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: it's a bit mind-blowing for me, that key validation logic requires the type of the element to be valid because at first glance they seem mostly unrelated.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the third sentence of the comment we again see, that proper error handling is expected from a renderer, instead of the &lt;code&gt;react&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Finally, functions ends with some other validation and a return statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;validateFragmentProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;validatePropTypes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we see a simple return and two separate validations before it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Fragment's&lt;/em&gt; props validation&lt;/li&gt;
&lt;li&gt;General element's props validation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we can conclude, that &lt;a href="https://www.npmjs.com/package/prop-types"&gt;prop-types&lt;/a&gt; validation happens here and props validation is handled differently if the element is &lt;em&gt;fragment&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now let's check what &lt;code&gt;createElementProd&lt;/code&gt; does and how it differs from &lt;code&gt;createElementWithValidation&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-raw-createelementprod-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;createElementProd&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;Let's get back to our &lt;code&gt;packages/react/src/React.js&lt;/code&gt; and trace from where &lt;code&gt;createElementProd&lt;/code&gt; is exported.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// packages/react/src/React.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;__DEV__&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;createElementWithValidation&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createElementProd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use the standard feature of modern IDEs to find where &lt;code&gt;createElementProd&lt;/code&gt; is implemented or just check the imports at the beginning of the file. I'll use the later method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// packages/react/src/React.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createElement&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;createElementProd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ReactElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact &lt;code&gt;createElementProd&lt;/code&gt; is just an &lt;a href="https://twitter.com/fromaline/status/1485147294559350787"&gt;import alias&lt;/a&gt; for the &lt;code&gt;createElement&lt;/code&gt; functions.&lt;br&gt;
So out initial assumption regarding &lt;code&gt;createElementWithValidation&lt;/code&gt; and &lt;code&gt;createElementProd&lt;/code&gt; was nearly correct, but not quite.&lt;br&gt;
In reality, the case is even simpler: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We just have a single &lt;code&gt;createElement&lt;/code&gt; function, that is used in the production environment.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;createElementWithValidation&lt;/code&gt; function adds additional validation to provide meaningful warnings and it's used in the development environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#-raw-createelement-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;createElement&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;With our new knowledge about this whole create-element situation, we just need to figure out what &lt;code&gt;createElement&lt;/code&gt; returns to understand how elements are created in both the prod and dev environment.&lt;br&gt;
To do this let's jump to &lt;code&gt;createElement&lt;/code&gt; function from its call inside &lt;code&gt;createElementWithValidation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N2Fq5K66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3qcaewr6w3i9ndv5bhm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N2Fq5K66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3qcaewr6w3i9ndv5bhm.png" alt="createElement function" width="880" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And put a debugger breakpoint right after the return statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B7U8xP6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w16rpyksjteywzkk9wv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B7U8xP6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w16rpyksjteywzkk9wv6.png" alt="return inside createElement" width="880" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we see what we get from the &lt;code&gt;React.createElement&lt;/code&gt; call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ref&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;props&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;children&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_owner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's fix the inaccurate part of the hypothesis to reflect our new knowledge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tweak-the-hypothesis"&gt;
  &lt;/a&gt;
  Tweak the hypothesis
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I assume from my understanding of how real DOM works, that &lt;code&gt;react-dom&lt;/code&gt; traverses a tree of React components (virtual DOM), formed by &lt;code&gt;react&lt;/code&gt; package.&lt;/p&gt;


&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
 &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;In reality the tree of React components looks more like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$$typeof&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ref&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;props&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;children&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_owner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_self&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_source&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where we were wrong in the original version?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;children&lt;/code&gt; is not separate property, instead, it's a property inside &lt;code&gt;props&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If there is only one child, it's passed without wrapping array. At least if the only child is a text.&lt;/li&gt;
&lt;li&gt;React components have a couple of other properties &lt;em&gt;(we have yet to figure out what are they about)&lt;/em&gt;, more specifically:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$$typeof&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_owner&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_store&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_self&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But overall the first part of our hypothesis was pretty accurate! We just broaden it and fix minor issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;It was a long journey and we learned a ton today! &lt;br&gt;
In the next episode, we are going to continue with our hypothesis. More precisely we'll try to find out what exactly &lt;code&gt;react-dom&lt;/code&gt; does with virtual DOM and how the render actually works. &lt;br&gt;
So I'm looking forward to seeing you in the next episode!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-we-learned-today"&gt;
  &lt;/a&gt;
  What we learned today
&lt;/h3&gt;

&lt;p&gt;IMO, the main thing, that we learned today has nothing to do with React's inner workings. It is rather the approach we can take to understand how some code works under the hood. &lt;br&gt;
So, I hope you'll apply it yourself!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-am-looking-forward-to-similar-content"&gt;
  &lt;/a&gt;
  I am looking forward to similar content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/fromaline"&gt;Follow me on Twitter&lt;/a&gt; for:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fromaline/status/1484449170283024387"&gt;Daily JS/TS tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fromaline/status/1484285901672955912"&gt;Weekly in-depth threads about React source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fromaline/status/1482611926488297473"&gt;Announcements about new articles I make&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/fromaline"&gt;Follow me here on dev.to&lt;/a&gt; to read this weekly series. I am going to post the next episode on January 30 (next Sunday!).&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Best programming tools for every beginner</title>
      <author>SnowBit</author>
      <pubDate>Sun, 23 Jan 2022 08:21:48 +0000</pubDate>
      <link>https://dev.to/codewithsnowbit/best-programming-tools-for-every-beginner-41g3</link>
      <guid>https://dev.to/codewithsnowbit/best-programming-tools-for-every-beginner-41g3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello Folks 👋
&lt;/h3&gt;

&lt;p&gt;What's up friends, this is &lt;strong&gt;SnowBit&lt;/strong&gt; here. I am a young passionate and self-taught developer and have an intention to become a successful developer.&lt;/p&gt;

&lt;p&gt;Today, I am here with a cool list of tools that every newbie should use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-and-hosting-replit"&gt;
  &lt;/a&gt;
  Coding and Hosting - &lt;a href="https://replit.com/"&gt;Repl.it&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eE17czyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0jvserc7su91i9g512u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eE17czyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0jvserc7su91i9g512u.png" alt="Replit" width="880" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is an online platform where you as a new developer can code in different languages and frameworks (JavaScript, React, Python).&lt;/li&gt;
&lt;li&gt;You can even collaborate in real-time with your friend/mate just like in Google Docs.&lt;/li&gt;
&lt;li&gt;It also works as a hosting platform, your site deploys with a unique URL that works as a live preview for your site and even you can share it.&lt;/li&gt;
&lt;li&gt;You can even try for &lt;a href="https://glitch.com/"&gt;Glitch&lt;/a&gt; and &lt;a href="https://codepen.io/"&gt;Codepen&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sites-to-learn"&gt;
  &lt;/a&gt;
  Sites to learn
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;br&gt;
It is a good platform to learn following topics: 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzegVcpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isyizinet7f9nrph4qyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzegVcpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isyizinet7f9nrph4qyi.png" alt="list" width="774" height="1098"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://scrimba.com/"&gt;Scrimba.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is the best platform to learn HTML, CSS, JavaScript, TypeScript, React and many more.&lt;/p&gt;

&lt;p&gt;The cool thing about &lt;strong&gt;Scrimba&lt;/strong&gt; is its interactive screencast, basically, you get to teach in a live code editor where you can edit the code whenever you wish. It's hard to explain check out their demo, you'll love it: &lt;a href="https://scrimba.com/scrim/czvKPPsw"&gt;Scrimba Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gRqhvtL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spglinum2gu2wtt6ig0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gRqhvtL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spglinum2gu2wtt6ig0l.png" alt="Scrimba.com" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design-figma"&gt;
  &lt;/a&gt;
  Design - &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is the best tool for designers to collaborate UI/UX design. Nothing to say more try once 🙂.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oo-xrnez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drb57s2oq6bpcjnbr2ha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oo-xrnez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drb57s2oq6bpcjnbr2ha.png" alt="Figma" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-apis-insomnia"&gt;
  &lt;/a&gt;
  Testing APIs - &lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Postman is a popular tool for testing APIs, but it looks a bit complicated for a newbie. Try giving a chance on Insomnia which has a very simple and well-designed interface. Here, you can perform &lt;code&gt;GET/POST/PUT/DELETE&lt;/code&gt; requests.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw3v9vDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcsm3rlyplh7g4hv6omq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw3v9vDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcsm3rlyplh7g4hv6omq.png" alt="Insomnia" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-challenges-codewars"&gt;
  &lt;/a&gt;
  Coding Challenges - &lt;a href="https://www.codewars.com/"&gt;Codewars&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To sharpen your skills, master them and learn new tricks to keep up with competent programmers, there is where Codewars comes in. &lt;br&gt;
It provides various small tests in almost common computer languages. Tests are categorized on the basis of difficulty level. It is fun to solve them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8ffUVCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf03ppv9og3pe8ndg90u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8ffUVCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf03ppv9og3pe8ndg90u.png" alt="codewars" width="880" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, this was a quick list of programming tools for every beginner. If you know some more tools, feel free to share them in comments&lt;/p&gt;




&lt;p&gt;Thank you for reading, have a nice day!&lt;br&gt;
&lt;strong&gt;Your appreciation is my motivation 😊&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on Twitter - &lt;a href="https://twitter.com/codewithsnowbit"&gt;@codewithsnowbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subscribe to me on YouTube - &lt;a href="https://www.youtube.com/channel/UCNTKqF1vhFYX_v0ERnUa1RQ?view_as=subscriber&amp;amp;sub_confirmation=1"&gt;Code With SnowBit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@jeshoots?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;JESHOOTS.COM&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>MAKE YOUR FIRST APP IN FLUTTER</title>
      <author>TINTU JOSEPH</author>
      <pubDate>Sun, 23 Jan 2022 08:14:43 +0000</pubDate>
      <link>https://dev.to/tintujoseph/make-your-first-app-in-flutter-21gl</link>
      <guid>https://dev.to/tintujoseph/make-your-first-app-in-flutter-21gl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h2&gt;

&lt;p&gt;it is open source UI developing kit  ,that developed by google in 2015 but it was released in 2017.Main feature of the flutter is used in cross platform application developing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  DART
&lt;/h2&gt;

&lt;p&gt;The one and only programming language that  used in flutter is dart.The main feature of the dart language is it is an platform  Independent programming language .object oriented ,Mainly it it is a opensource  programming language and it easy to learn&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-started"&gt;
  &lt;/a&gt;
  Let Started....
&lt;/h2&gt;

&lt;p&gt;Firstly we install the flutter  from given (&lt;a href="https://docs.flutter.dev/get-started/install"&gt;https://docs.flutter.dev/get-started/install&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-project"&gt;
  &lt;/a&gt;
  Create Project
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;flutter create&lt;/em&gt; command used to create the flutter project&lt;/p&gt;

&lt;p&gt;syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter create flutters
cd flutters
code .

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(here we are use vs code to create our project)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-start-our-code"&gt;
  &lt;/a&gt;
  Lets Start Our Code
&lt;/h3&gt;

&lt;p&gt;In flutter  mainly we are importing to libraries one is &lt;em&gt;cupertino.dart&lt;/em&gt; and &lt;em&gt;material.dart&lt;/em&gt;. the first one is for Ios app and second one is Android app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package:flutter/material.dart
package:flutter/cupertino.dart'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use material.dart.which include may widgets  materialapp , statefull and stateless etc..&lt;/p&gt;

&lt;p&gt;The sample Code given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package:flutter/material.dart
void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter',
      home: Scaffold(
        appBar: AppBar(
          title:  Text(' Our Project'),
        ),
        body:  Center(
          child: Text('HELLO'),
        ),
      ),
    );
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;void main() -it is the main method \ function of our project.&lt;/p&gt;

&lt;p&gt;Scaffold -It is  from the Material library, It provides  app bar, and a body which contain homescreen.&lt;/p&gt;

&lt;p&gt;title - which give title of our app.&lt;br&gt;
center - which is widget which give the text in the center of the screen.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>flutter</category>
      <category>firstpost</category>
      <category>dart</category>
    </item>
    <item>
      <title>Adding Google Authentication Feature.</title>
      <author>Kirti </author>
      <pubDate>Sun, 23 Jan 2022 08:13:11 +0000</pubDate>
      <link>https://dev.to/kirtisingh3008/adding-google-authentication-feature-25a4</link>
      <guid>https://dev.to/kirtisingh3008/adding-google-authentication-feature-25a4</guid>
      <description>&lt;p&gt;Hey everyone! In this article, we will be adding a new feature &lt;strong&gt;Google AUTH&lt;/strong&gt; to our login Form.&lt;br&gt;
Let's start with basics install a react app using the below commands in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;google_auth&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;google_auth&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's quickly install a very popular package  &lt;em&gt;react-google-login&lt;/em&gt;  to display a “Log in with Google” button which will help us in retrieving information about the user and will also handle displaying a google login prompt.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now after that write these lines of code in the App.js file i have added the explanation to each line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;GoogleLogin&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-google-login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// importing library&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// Function for displaying response in console&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profileObj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* It takes some props as clientId , ButtonText
      onSuccess , onFailure, cookiePolicy= {single_host_origin} */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GoogleLogin&lt;/span&gt;
         &lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;
         &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Login with Google&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
         &lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;displayResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nx"&gt;onFailure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;displayResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nx"&gt;cookiePolicy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;single_host_origin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, as you can see the clientId is yet not there, so for that go to "Google API console" and in there add a new project, just add your project name and done.&lt;br&gt;
Now switch to the project which you just added. Go to credentials.&lt;br&gt;
After that go to &lt;strong&gt;configure consent screen&lt;/strong&gt; and after that click on &lt;strong&gt;"External"&lt;/strong&gt; after that click on create.&lt;br&gt;
Now it will ask you to fill in some more details like application name(not the same as your project's name). You have to also enter the support email id and after that just keep on clicking save and next.&lt;br&gt;
Now, go back to the credentials tab again and click on create credentials. Here click on &lt;strong&gt;Create OAuth client ID&lt;/strong&gt; and in there add application type to be Web application and add URI to where you want to use your google login.&lt;br&gt;
Yuhuu!!! we generated our keys.&lt;br&gt;
Now, simply copy and paste the code in the code editor where clientID ="Our Above steps result".&lt;/p&gt;

&lt;p&gt;Now, just run your react app and click on the login button you will see something like this &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1OVam-3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4az8nbfnzqkarmb90c2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1OVam-3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4az8nbfnzqkarmb90c2.jpg" alt="Working" width="880" height="890"&gt;&lt;/a&gt;&lt;br&gt;
and after you log in with any of the accounts it will display it in the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C80ZUme2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibcr11i0z459qus869z3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C80ZUme2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibcr11i0z459qus869z3.png" alt="Working" width="880" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have attached the GitHub code for the same.&lt;br&gt;
&lt;a href="https://github.com/kirtisingh3008/web-dev/tree/main/google_auth"&gt;Github&lt;/a&gt;&lt;br&gt;
Thank You!!!🙂🙂&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Pug HTML for beginners | All-time-dev?</title>
      <author>All-time-dev</author>
      <pubDate>Sun, 23 Jan 2022 08:03:28 +0000</pubDate>
      <link>https://dev.to/alltimedev/what-is-pug-html-for-beginners-all-time-dev-5d38</link>
      <guid>https://dev.to/alltimedev/what-is-pug-html-for-beginners-all-time-dev-5d38</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-pug-html-for-beginners-alltimedev"&gt;
  &lt;/a&gt;
  What is Pug HTML for beginners | All-time-dev?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1iE2JuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gputhzsk5gtp8ej3n2ct.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1iE2JuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gputhzsk5gtp8ej3n2ct.jpg" alt="Pug HTML" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, we are going to know about PUG which is a very important topic for you if you are a backend developer we will know the history of PUG, what is a pug and its uses what are template engines, and more. So, if you are interested and if you like our today's post then share it with your developer friends. So, that they can also gain some knowledge about PUG.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-pug"&gt;
  &lt;/a&gt;
  What is PUG?
&lt;/h2&gt;

&lt;p&gt;Pug is a template engine for NODE JS means that if you write any PUG code then it will compile into HTML and its syntax will become simple which will help you understand your code better and eventually, it will increase productivity while coding and it also helps in writing reusable HTML code and it also helps in pulling data from a database while using an API from Rapid Apis or any other site but if you don't know what is a template Engine then it enables you to use Static template files on your web app. At Runtime means Node JS which is a JS(JavaScript) runtime. In this case, Pug which is a template engine will replace the variables in the file with actual values and will transform the file into an HTML file which helps you to design an HTML page and will also help you make it dynamic easily if you are using NODE JS and Mongo DB. So, simple Pug is a template engine for NODE JS which helps you to write HTML in the backend for a better understanding of code and easy reusability, and if you are thinking that if I am writing Node JS then can we only use PUG with Node JS then no we can also use with PHP, Python and several other languages and different languages have there different template engines like Python have its own template engine named Mako and JavaScript also has its own template engine named Jade/Pug, ejs (Embedd JavaScript)and some template engines also supports more than one language like Mustache which supports Ruby, JavaScript, Python, Erlang, Objective-C, Go, Lua, Scala, Node JS, Python, Java, .Net, Android, C++, C, C# and more and there is a important fact about Pug is that its old name was Jade which was changed into pug due to a trademark.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-5-tools-which-are-integrable-with-pug"&gt;
  &lt;/a&gt;
  Top 5 tools which are integrable with Pug
&lt;/h2&gt;

&lt;p&gt;Pug is very awesome and it has some integrable with some tools that you can use to increase your productivity and to use it for more uses like creating backend, for generating HTML websites, charting and more. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Lad which is a Node JS framework&lt;/li&gt;
&lt;li&gt;Node JS which is JavaScript Runtime&lt;/li&gt;
&lt;li&gt;Prepros which is a compiler&lt;/li&gt;
&lt;li&gt;Squido which is a HTML website generator&lt;/li&gt;
&lt;li&gt;Anychart for charting&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#popular-companies-using-pug"&gt;
  &lt;/a&gt;
  Popular companies using Pug
&lt;/h2&gt;

&lt;p&gt;As Pug is very popular for serving dynamic content with Node JS then there are a lot of companies who is using Pug for growing their business like -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Glovo&lt;/li&gt;
&lt;li&gt;Coursera&lt;/li&gt;
&lt;li&gt;1mg&lt;/li&gt;
&lt;li&gt;Chiper&lt;/li&gt;
&lt;li&gt;Shimo website&lt;/li&gt;
&lt;li&gt;Barogo&lt;/li&gt;
&lt;li&gt;Accenture&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Top 10 template engines rather than Pug&lt;br&gt;
Pug is a very popular JavaScript template engine but there some more template engines which are even more better than Pug. Now, I will tell only the names of those template engines but if you want a complete post on that topic then you can comment below. I will definitely create a post on that topic.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mustache. &lt;/li&gt;
&lt;li&gt;Underscore Templates&lt;/li&gt;
&lt;li&gt;Embedded JS Templates&lt;/li&gt;
&lt;li&gt;HandlebarsJS. &lt;/li&gt;
&lt;li&gt;NunJucks&lt;/li&gt;
&lt;li&gt;UnderScore JS&lt;/li&gt;
&lt;li&gt;Webix&lt;/li&gt;
&lt;li&gt;Hogan.JS&lt;/li&gt;
&lt;li&gt;Swig&lt;/li&gt;
&lt;li&gt;Marko&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, these are some of the popular template engines rather than Pug HTML that you can use as an alternative all of them are very good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-using-pug-better-than-using-html-and-react"&gt;
  &lt;/a&gt;
  Is using Pug better than using HTML and React?
&lt;/h2&gt;

&lt;p&gt;Many people have doughts that why should we use Pug instead of just using HTML which every web developer already knows instead of learning template engines which is new for us then the simple answer is that Pug is more powerful and provides features like conditions, loops, included, mixins like SASS that we can render on reference data or whenever when the users inputs data and it natively supports JavaScript as it is both a JavaScript library and also a JavaScript template engine and an important reference that I have given you in the introduction is that, Pug is important to make website dynamic then yes its very important as if you want to make a website dynamic then at that time you must need Pug to serve dynamic content with NODE JS. So, in this case using Pug with Node JS will be better idea then using HTML with it. but if we choose to use Pug instead of React that's not a good idea as React JS is not only a template engine like Pug JS it is also framework that you can use to create web apps frontend and everyone knows that if you want to create a web app then the best stack is MERN STACK which includes React with Node JS, Express JSand Mongo DB. So, in this case if you want to create a web app then I would recommend using React JS. &lt;/p&gt;

&lt;p&gt;To continue reading the post visit &lt;a href="https://all-time-devlopment.blogspot.com/2022/01/what-is-pug-html-for-beginners-all-time.html"&gt;https://all-time-devlopment.blogspot.com/2022/01/what-is-pug-html-for-beginners-all-time.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Financing your open source project</title>
      <author>VORG</author>
      <pubDate>Sun, 23 Jan 2022 08:00:48 +0000</pubDate>
      <link>https://dev.to/vorg/financing-your-open-source-project-4i2l</link>
      <guid>https://dev.to/vorg/financing-your-open-source-project-4i2l</guid>
      <description>&lt;p&gt;Funding doesn’t mean your open source project is no longer pure. Financing means you want to take your project further.&lt;/p&gt;

&lt;p&gt;The best form of financing for an open source project is a DAO. But ICO makes people feel that it is purely for making money. Therefore, most DAO tools are not suitable.&lt;/p&gt;

&lt;p&gt;Here is a DAO tool built for developers: &lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt; is a decentralized DAO registry based on Ethereum.&lt;/p&gt;

&lt;p&gt;You can create your unique DAO on &lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt; and get an associated unique domain name. At the same time, you can raise funds as needed by increasing capital and expanding shares on &lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The trading of shares can be completed on &lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt;, and the currency medium of the transaction is &lt;em&gt;Ether&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can refer to &lt;a href="https://dev.to/vorg/vorg-decentralized-company-and-domain-name-registry-599a"&gt;VORG: Decentralized company and domain name registry&lt;/a&gt; to learn how to build a DAO, increase capital and shares, trade, and configure domain names.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>web3</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
