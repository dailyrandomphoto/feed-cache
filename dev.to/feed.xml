<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Ember 3.26 Released</title>
      <author>Ember.js</author>
      <pubDate>Mon, 12 Apr 2021 19:34:53 +0000</pubDate>
      <link>https://dev.to/emberjs/ember-3-26-released-2mef</link>
      <guid>https://dev.to/emberjs/ember-3-26-released-2mef</guid>
      <description>&lt;p&gt;Today the Ember project is releasing version 3.26 of Ember.js, Ember Data, and Ember CLI.&lt;/p&gt;

&lt;p&gt;This release kicks off the 3.27 beta cycle for all sub-projects. We encourage our community (especially addon authors) to help test these beta builds and report any bugs before they are published as a final release in six weeks' time. The &lt;a href="https://github.com/ember-cli/ember-try"&gt;ember-try&lt;/a&gt; addon is a great way to continuously test your projects against the latest Ember releases.&lt;/p&gt;

&lt;p&gt;You can read more about our general release process here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/releases/"&gt;Release Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.emberjs.com/new-ember-release-process/"&gt;The Ember Release Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.emberjs.com/ember-project-at-2-0/"&gt;The Ember Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.emberjs.com/announcing-embers-first-lts/"&gt;Ember LTS Releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#emberjs"&gt;
  &lt;/a&gt;
  Ember.js
&lt;/h2&gt;

&lt;p&gt;Ember.js is the core framework for building ambitious web applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changes-in-emberjs-326"&gt;
  &lt;/a&gt;
  Changes in Ember.js 3.26
&lt;/h3&gt;

&lt;p&gt;Ember.js 3.26 is an incremental, backwards compatible release of Ember with bug fixes, performance improvements, and minor deprecations.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h4&gt;

&lt;p&gt;Ember.js 3.26 introduced 5 bug fixes. Here are a few notable ones:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Ember router and the &lt;code&gt;router&lt;/code&gt; service have been updated so that an infinite recursion does not occur when the &lt;code&gt;router&lt;/code&gt; service is injected into &lt;code&gt;app/router.js&lt;/code&gt;. (&lt;a href="https://github.com/emberjs/ember.js/pull/19405"&gt;#19405&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;You can pass to an observer a dependent key whose name includes a colon. (&lt;a href="https://github.com/emberjs/ember.js/issues/19343"&gt;#19343&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The Glimmer VM has been updated to prevent eagerly consuming arguments during modifier destruction. (&lt;a href="https://github.com/emberjs/ember.js/pull/19469"&gt;#19469&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;p&gt;Ember.js 3.26 introduced 0 features.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deprecations"&gt;
  &lt;/a&gt;
  Deprecations
&lt;/h4&gt;

&lt;p&gt;Ember.js 3.26 introduced several deprecations in preparation for v4.0 release. To learn more how to update your code, please check the provided link to the Deprecations Guide.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Transition methods of controllers and routes have been deprecated. Inject the &lt;code&gt;router&lt;/code&gt; service and use the service's methods instead. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_routing-transition-methods"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19255"&gt;#19255&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Invoking the &lt;code&gt;&amp;lt;LinkTo&amp;gt;&lt;/code&gt; component with positional arguments has been deprecated. Please provide named arguments such as &lt;code&gt;@route&lt;/code&gt;, &lt;code&gt;@model&lt;/code&gt;, &lt;code&gt;@models&lt;/code&gt;, and &lt;code&gt;@query&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_ember-glimmer-link-to-positional-arguments"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19345"&gt;#19345&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;{{with}}&lt;/code&gt; helper has been deprecated, in favor of using &lt;code&gt;{{let}}&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_ember-glimmer-with-syntax"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19346"&gt;#19346&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Implicit injection has been deprecated. In particular, the &lt;code&gt;store&lt;/code&gt; service from Ember Data must be explicitly injected into controllers and routes if they refer to &lt;code&gt;this.store&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_implicit-injections"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19358"&gt;#19358&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Browser support of Internet Explorer 11 has been deprecated. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_3-0-browser-support-policy"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19359"&gt;#19359&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Property fallback for implicit &lt;code&gt;this&lt;/code&gt; has been deprecated. Please review the templates in your app and write &lt;code&gt;this.&lt;/code&gt; when it is appropriate, e.g. change &lt;code&gt;{{localProperty}}&lt;/code&gt; to &lt;code&gt;{{this.localProperty}}&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_this-property-fallback"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19371"&gt;#19371&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ember Classic has been deprecated.&lt;/strong&gt; (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_editions-classic"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19372"&gt;#19372&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In preparation for v4.0 release, developers are encouraged to update their app to Ember Octane by following these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;config/optional-features.json&lt;/code&gt;, update the feature flags for Octane.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"application-template-wrapper"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jquery-integration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"template-only-glimmer-components"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Specify the Octane edition in &lt;code&gt;package.json&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ember"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"edition"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"octane"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check the &lt;a href="https://guides.emberjs.com/release/upgrading/current-edition/"&gt;official upgrade guide&lt;/a&gt; and seek help in the &lt;code&gt;#help&lt;/code&gt; channel on &lt;a href="https://discord.gg/emberjs"&gt;Ember Discord&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(list continued from above)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Component managers that use the &lt;code&gt;v3.4&lt;/code&gt; capabilities should update to the most recent component capabilities available, which is currently &lt;code&gt;v3.13&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_manager-capabilities-components-3-4"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19373"&gt;#19373&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Modifier managers that use the &lt;code&gt;v3.13&lt;/code&gt; capabilities should update to the most recent modifier capabilities available, which is currently &lt;code&gt;v3.22&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_manager-capabilities-modifiers-3-13"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19373"&gt;#19373&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;{{hasBlock}}&lt;/code&gt; and &lt;code&gt;{{hasBlockParams}}&lt;/code&gt; properties have been deprecated. Use &lt;code&gt;{{has-block}}&lt;/code&gt; and &lt;code&gt;{{has-block-params}}&lt;/code&gt; helpers instead. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_has-block-and-has-block-params"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19374"&gt;#19374&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Passing &lt;code&gt;classBinding&lt;/code&gt; and &lt;code&gt;classNameBindings&lt;/code&gt; as arguments has been deprecated. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_class-binding-and-class-name-bindings-in-templates"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19375"&gt;#19375&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Accessing named arguments via &lt;code&gt;{{attrs}}&lt;/code&gt; has been deprecated. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_attrs-arg-access"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19375"&gt;#19375&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Array observers have been deprecated. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_array-observers"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19381"&gt;#19381&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Deprecations are added to Ember.js when an API will be removed at a later date. Each deprecation has an entry in the deprecation guide describing the migration path to a more stable API. Deprecated public APIs are not removed until a major release of the framework.&lt;/p&gt;

&lt;p&gt;Consider using the &lt;a href="https://github.com/mixonic/ember-cli-deprecation-workflow"&gt;ember-cli-deprecation-workflow&lt;/a&gt; addon if you would like to upgrade your application without immediately addressing deprecations.&lt;/p&gt;

&lt;p&gt;For more details on changes in Ember.js 3.26, please review the &lt;a href="https://github.com/emberjs/ember.js/releases/tag/v3.26.0"&gt;Ember.js 3.26.0 release page&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-data"&gt;
  &lt;/a&gt;
  Ember Data
&lt;/h2&gt;

&lt;p&gt;Ember Data is the official data persistence library for Ember.js applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changes-in-ember-data-326"&gt;
  &lt;/a&gt;
  Changes in Ember Data 3.26
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h4&gt;

&lt;p&gt;Ember Data 3.26 introduced 0 bug fixes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;p&gt;Ember Data 3.26 introduced 0 features.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deprecations"&gt;
  &lt;/a&gt;
  Deprecations
&lt;/h4&gt;

&lt;p&gt;Ember Data 3.26 introduced 0 deprecations.&lt;/p&gt;

&lt;p&gt;For more details on changes in Ember Data 3.26, please review the&lt;br&gt;
&lt;a href="https://github.com/emberjs/data/releases/tag/v3.26.0"&gt;Ember Data 3.26.0 release page&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#ember-cli"&gt;
  &lt;/a&gt;
  Ember CLI
&lt;/h2&gt;

&lt;p&gt;Ember CLI is the command line interface for managing and packaging Ember.js applications.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#upgrading-ember-cli"&gt;
  &lt;/a&gt;
  Upgrading Ember CLI
&lt;/h3&gt;

&lt;p&gt;You may upgrade Ember CLI using the &lt;code&gt;ember-cli-update&lt;/code&gt; project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx ember-cli-update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This utility will help you to update your app or addon to the latest Ember CLI version. You will probably encounter merge conflicts, in which the default behavior is to let you resolve conflicts on your own. For more information on the &lt;code&gt;ember-cli-update&lt;/code&gt; project, see &lt;a href="https://github.com/ember-cli/ember-cli-update"&gt;the GitHub README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While it is recommended to keep Ember CLI versions in sync with Ember and Ember Data, this is not required. After updating ember-cli, you can keep your current version(s) of Ember or Ember Data by editing &lt;code&gt;package.json&lt;/code&gt; to revert the changes to the lines containing &lt;code&gt;ember-source&lt;/code&gt; and &lt;code&gt;ember-data&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changes-in-ember-cli-326"&gt;
  &lt;/a&gt;
  Changes in Ember CLI 3.26
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h4&gt;

&lt;p&gt;Ember CLI 3.26 introduced 2 bug fixes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Issue a better error message for add-on's missing an entry point. (&lt;a href="https://github.com/ember-cli/ember-cli/pull/9473"&gt;#9473&lt;/a&gt;); and&lt;/li&gt;
&lt;li&gt;Add Prettier files to &lt;code&gt;.npmignore&lt;/code&gt; file in addon blueprint (&lt;a href="https://github.com/ember-cli/ember-cli/pull/9437"&gt;#9437&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;p&gt;Ember CLI 3.26 introduced 1 feature.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;ember-try&lt;/code&gt; test scenarios for &lt;code&gt;embroider-safe&lt;/code&gt; and &lt;code&gt;embroider-optimized&lt;/code&gt; for addons are now enabled using &lt;a href="https://github.com/embroider-build/embroider/tree/master/packages/test-setup"&gt;@embroider/test-setup&lt;/a&gt; allowing Embroider compatibility testing for addons test matrix (&lt;a href="https://github.com/ember-cli/ember-cli/pull/9436"&gt;#9436&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#deprecations"&gt;
  &lt;/a&gt;
  Deprecations
&lt;/h4&gt;

&lt;p&gt;Ember CLI 3.26 introduced 0 deprecations.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember CLI 3.26 and detailed upgrade&lt;br&gt;
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v3.26.0"&gt;Ember CLI 3.26.0 release page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You!
&lt;/h2&gt;

&lt;p&gt;As a community-driven open-source project with an ambitious scope, each of these releases serves as a reminder that the Ember project would not have been possible without your continued support. We are extremely grateful to our contributors for their efforts.&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>news</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Axios PUT Verb</title>
      <author>Tim Myers</author>
      <pubDate>Mon, 12 Apr 2021 19:19:49 +0000</pubDate>
      <link>https://dev.to/denvercoder/axios-put-verb-4d0f</link>
      <guid>https://dev.to/denvercoder/axios-put-verb-4d0f</guid>
      <description>&lt;h1&gt;
  &lt;a href="#axios-put-verb-and-why-i-suck"&gt;
  &lt;/a&gt;
  Axios PUT Verb And Why I Suck
&lt;/h1&gt;

&lt;p&gt;So this is one of those posts where I had such a hard time I just wanted to document it so I would have a note for myself in the future.&lt;/p&gt;

&lt;p&gt;Here's the issue I was having:&lt;/p&gt;

&lt;p&gt;We have a project that uses React for the frontend and Azure Functions for the API. One of our Azure functions for submitting an order required, GET, PUT, POST, DELETE.&lt;/p&gt;

&lt;p&gt;I got the function setup and all of the backend code was working using Postman to submit requests to the API.&lt;/p&gt;

&lt;p&gt;When I started working on the front end everything was working except for the PUT verb.&lt;/p&gt;

&lt;p&gt;The DELETE verb code looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleOrderDelete = async (orderId) =&amp;gt; {
  const token = await getTokenSilently()
  var response = axios.delete(`http:localhost:3000/${orderId}`, {
      headers: {
          Authorization: `Bearer ${token}`,
          'content-type': 'application/json',
          'x-functions-key': "AZURE FUNCTION KEY HERE",
      },
  })
  if (response.statusCode === 200) {
      console.log(response)
  } else {
      console.error(response)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The PUT verb code looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleOrderEdit = async (orderId) =&amp;gt; {
  const token = await getTokenSilently()
  var response = axios.put(`http:localhost:3000/${orderId}`, {
      headers: {
          Authorization: `Bearer ${token}`,
          'content-type': 'application/json',
          'x-functions-key': "AZURE FUNCTION KEY HERE",
      },
  })
  if (response.statusCode === 200) {
      console.log(response)
  } else {
      console.error(response)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now at this point it's important to note that I copied the &lt;code&gt;handleOrderEdit&lt;/code&gt; code from the &lt;code&gt;handleOrderDelete&lt;/code&gt; code. They are VERY similar, the only main difference being the &lt;code&gt;.put&lt;/code&gt; and &lt;code&gt;.delete&lt;/code&gt; verbs themselves.&lt;/p&gt;

&lt;p&gt;Now if you're astute and you are familiar with Axios you may already see the issue. If not see if you can figure it out.&lt;/p&gt;

&lt;p&gt;So the DELETE was working, but when I ran the PUT I was getting a 401 on the Network tab in chrome devtools. In my C# console I was getting the error, &lt;code&gt;NO TOKEN. ERROR&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;When I looked at the request payload I saw that I had a token, "Bearer 8df7saf8d7sa8f9dsa7f89saf6798saf" or whatever. Most importantly my breakpoint I set in Visual Studio right on the opening bracket of the PUT method was not being hit.&lt;/p&gt;

&lt;p&gt;I replaced the &lt;code&gt;axios.put&lt;/code&gt; call with a fetch call since they use a similar API. I had narrowed my search down to some issue with axios at this point because it was working in Postman.&lt;/p&gt;

&lt;p&gt;I added the fetch like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fetch(`http://localhost:3000/${orderId}`, {
            headers: {
                Authorization: `Bearer ${token}`,
                'content-type': 'application/json',
                'x-functions-key': 'AZURE FUNCTION KEY HERE',
            },
        })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and it worked just fine. I started looking a bit closer and I noticed something. When I submitted my request with axios the Bearer token was in the Payload, not in the Request Header. Hmm.&lt;/p&gt;

&lt;p&gt;So, to make a long story short, (too late amirite???), I didn't realize that the PUT verb requires a body. We're not sending a body because all we're doing is setting the order back to a different status but we're using the PUT because all of the other verbs are being used.&lt;/p&gt;

&lt;p&gt;Typically you would ALWAYS send a body with a PUT because you're updating a record and you need to send the information your replacing. Ours is a unique usecase and since we're sending the &lt;code&gt;orderId&lt;/code&gt; in the url then we didn't need to send a body.&lt;/p&gt;

&lt;p&gt;The code that fixed this whole thing is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const handleOrderSign = async (orderId) =&amp;gt; {
        const token = await getTokenSilently()
        var response = axios.put(
            `${api.order.url}/${orderId}`,
            {orderId}, // &amp;lt; -- this
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'content-type': 'application/json',
                    'x-functions-key': api.order.key,
                },
            }
        )
        if (response.statusCode === 200) {
            console.log(response)
        } else {
            console.error(response)
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though I don't need to send a body I'm sending the &lt;code&gt;orderId&lt;/code&gt; in the body just so I better conform to the axios standard.&lt;/p&gt;

&lt;p&gt;So this is either one of those things that everyone knows and I'm just slow on the uptake, or this is something that happened because we're not using the tool the way it was intended, or it's a lack of documentation on axios' side. &lt;/p&gt;

&lt;p&gt;Anyway,&lt;/p&gt;

&lt;p&gt;Thanks for reading and that's all y'all.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>iamdumb</category>
    </item>
    <item>
      <title>React - mouse button press and hold example</title>
      <author>Dirask-React</author>
      <pubDate>Mon, 12 Apr 2021 19:19:45 +0000</pubDate>
      <link>https://dev.to/diraskreact/react-mouse-button-press-and-hold-example-1eck</link>
      <guid>https://dev.to/diraskreact/react-mouse-button-press-and-hold-example-1eck</guid>
      <description>&lt;p&gt;Hi there! 👋😊&lt;/p&gt;

&lt;p&gt;In this article, I would like to show you mouse button press and hold example in React. 🖱&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before we start&lt;/strong&gt;, I would highly recommend you to check out the &lt;strong&gt;runnable example&lt;/strong&gt; for the solution on our website:&lt;br&gt;
&lt;a href="https://dirask.com/posts/pzrAap"&gt;React - mouse button press and hold example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the beginning, I wanted to tell you that unfortunately there is no press and hold mouse button event in React. 😥&lt;br&gt;
However, I will show you how to perform some logic when the mouse button is pressed and held, and how to break this logic when we stop pressing the button or when our cursor leaves the button field.&lt;/p&gt;

&lt;p&gt;Final result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cNb0reoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtt7saxvvl8ea6jm7k9q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cNb0reoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtt7saxvvl8ea6jm7k9q.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below example presents how to create a &lt;code&gt;counter&lt;/code&gt; which increments on button press and hold every 0.1s. As the &lt;code&gt;counter&lt;/code&gt; increases, the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; of my element also increase, as they depend precisely on the &lt;code&gt;counter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the example I've used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useState&lt;/code&gt; hook - to manage the &lt;code&gt;counter&lt;/code&gt; as App component's state,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useRef&lt;/code&gt; hook - to create a reference that will help us to set and clear the interval,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onMouseDown&lt;/code&gt; event - to start incrementing the &lt;code&gt;counter&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onMouseUp&lt;/code&gt; / &lt;code&gt;onMouseLeave&lt;/code&gt; events  - to stop incrementing the &lt;code&gt;counter&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useEffect&lt;/code&gt; hook - to stop the &lt;code&gt;counter&lt;/code&gt; when App component is destroyed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Practical example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;intervalRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;stopCounter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// when App is unmounted we should stop counter&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;span class="c1"&gt;// styles --------------------------------------&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containerStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;300px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;300px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elementStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(at 25% 25%, #2b86c5, #562b7c, #ff3cac)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2px solid black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;50%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;boxShadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10px 5px 5px #BEBEBE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// functions -----------------------------------&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;intervalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevCounter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevCounter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stopCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;intervalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;containerStyle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
        &lt;span class="na"&gt;onMouseDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;startCounter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onMouseUp&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stopCounter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onMouseLeave&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stopCounter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;elementStyle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run this example &lt;a href="https://dirask.com/posts/pzrAap"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's my version of handling mouse press and hold event in React.&lt;br&gt;
Let me know what you think in the comments. 💬&lt;br&gt;
Maybe you have a better solution? I would be glad if you share it with me! 😊&lt;/p&gt;

&lt;p&gt;Thanks for your time and see you in the next posts! 🔥&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#write-to-us-%E2%9C%89"&gt;
  &lt;/a&gt;
  Write to us! ✉
&lt;/h2&gt;

&lt;p&gt;If you have any problem to solve or questions that no one can answer related to a React or JavaScript topic, or you're looking for a mentoring write to us on &lt;a href="https://dirask.com/questions"&gt;dirask.com -&amp;gt; Questions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also join our &lt;a href="https://www.facebook.com/groups/125343696143974"&gt;facebook group&lt;/a&gt; where we share  coding tips and tricks with others! 🔥&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A Beginner's Guide to Unit-testing with Jest</title>
      <author>Daniel Sasse</author>
      <pubDate>Mon, 12 Apr 2021 19:12:23 +0000</pubDate>
      <link>https://dev.to/dsasse07/a-beginner-s-guide-to-unit-testing-with-jest-45cc</link>
      <guid>https://dev.to/dsasse07/a-beginner-s-guide-to-unit-testing-with-jest-45cc</guid>
      <description>&lt;p&gt;Unit testing is an integral part of Test-Driven Development (TDD) which is the process of defining the desired actions of a function and what we expect it to do (or not do) before we begin work on the actual function. Approaching software development in this fashion serves a number of purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;this process can help define a path to success by outlining the tasks that must be done over the course of the function. &lt;/li&gt;
&lt;li&gt;this process can help identify edge-case scenarios and ensure that your code continues to function as expected in these situations. &lt;/li&gt;
&lt;li&gt;As the codebase continues to grow and be modified, this process also ensures that changes to other parts of the codebase do not negatively effect the performance of the tested function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Programming languages have their own frameworks for developing unit tests. For Javascript, Jest is one of the most widely used testing frameworks, and I hope this blog serves as a beginner's guide for those looking to get started in writing their own Jest tests.&lt;/p&gt;

&lt;p&gt;We will walk through the process of setting up basic Jest tests and the files, but you can view &lt;a href="https://github.com/dsasse07/jest-example"&gt;the repo containing all of the code here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#setting-up-jest"&gt;Setting Up Jest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#identify-desired-actions"&gt;Identifying Desired Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initializing-the-test-file"&gt;Initializing the Test File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-tests"&gt;Writing Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-the-tests"&gt;Running the Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-the-functions"&gt;Writing the Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-jest"&gt;
  &lt;/a&gt;
  Setting Up Jest
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new directory, and &lt;code&gt;cd&lt;/code&gt; into that directory.&lt;/li&gt;
&lt;li&gt;Set up the NPM environment
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;jest-example &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;jest-example 
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install Jest
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i jest &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Configure the NPM environment to use Jest by modifying the &lt;code&gt;package.json&lt;/code&gt; file created earlier. This edit will cause the command &lt;code&gt;npm test&lt;/code&gt; to run the tests we will be building.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In package.json&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#identify-desired-actions"&gt;
  &lt;/a&gt;
  Identify Desired Actions
&lt;/h2&gt;

&lt;p&gt;To begin writing the tests, we must define what the function we will be building &lt;em&gt;should&lt;/em&gt; do, and what the &lt;em&gt;expected&lt;/em&gt; outcome should be when the function is invoked.&lt;/p&gt;

&lt;p&gt;For our example, let's consider an object containing information about a user's blog posts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 1 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 2 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be writing two functions, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;getTotalLikes&lt;/code&gt; to get the total number of likes of the given user's posts,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getMostPopularBlog&lt;/code&gt; to return the blog object of a specified user with the most likes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following the TDD process, we will develop tests for these functions prior to working out the logic for the functions themselves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initializing-the-test-file"&gt;
  &lt;/a&gt;
  Initializing the Test File
&lt;/h2&gt;

&lt;p&gt;Typically, tests are written in a &lt;code&gt;tests&lt;/code&gt; or &lt;code&gt;__tests__&lt;/code&gt; subdirectory of the app, and we will follow this same convention. From the root of our example project, let's create a &lt;code&gt;tests&lt;/code&gt; directory and the file which will contain our tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;tests &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;tests &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;exampleFunctions.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we must do in this new file is to import the functions that we will be testing (it's ok that they have not yet been written.) For the sake of this blog, we will be writing both of the sample functions into the same &lt;code&gt;.js&lt;/code&gt; file, and we will use destructuring in the import to get access to both of those functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// jest-example/tests/exampleFunctions.test.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../exampleFunctions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both of the example functions discussed above will be tested using the same sample &lt;code&gt;user&lt;/code&gt; object mentioned previously, so we can define this globally for our tests file as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// jest-example/tests/exampleFunctions.test.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../exampleFunctions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 1 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 2 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#writing-tests"&gt;
  &lt;/a&gt;
  Writing tests
&lt;/h2&gt;

&lt;p&gt;Tests typically contain these general components: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;describe&lt;/code&gt; function is invoked which accepts two arguments: 

&lt;ul&gt;
&lt;li&gt;a string (a description that will appear in the terminal when tests are run, which "describes" the test block)&lt;/li&gt;
&lt;li&gt;a callback function which will contain the individual tests..&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;One (or more) &lt;code&gt;test&lt;/code&gt; function which accepts two arguments: 

&lt;ul&gt;
&lt;li&gt;a string describing the action of the specific test, &lt;/li&gt;
&lt;li&gt;a callback function containing an &lt;code&gt;expect&lt;/code&gt; function and a &lt;code&gt;matcher&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;expect&lt;/code&gt; function accepts the function invocation being tested, and is chained to the &lt;code&gt;matcher&lt;/code&gt; which describes the expected results.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;getTotalLikes&lt;/code&gt; function, we &lt;strong&gt;expect&lt;/strong&gt; that when the function is passed a user object, the return value &lt;strong&gt;will be&lt;/strong&gt; an integer that is the sum of the &lt;code&gt;likes&lt;/code&gt; on all of the blogs of that user. Including this into our test file would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// jest-example/tests/exampleFunctions.test.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../exampleFunctions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 1 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 2 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;getTotalLikes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return the total likes of a user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;230&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the &lt;code&gt;.toBe&lt;/code&gt; matcher is used to define the expected output of the function invocation written in the preceeding &lt;code&gt;expect&lt;/code&gt; statement. The &lt;code&gt;.toBe&lt;/code&gt; matcher returns truthy if the output of the function is equal to the value passed into the matcher. The Jest framework has a number of defined matchers, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;toBeNull&lt;/code&gt; matches only null&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toBeUndefined&lt;/code&gt; matches only undefined&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toBeDefined&lt;/code&gt; is the opposite of toBeUndefined&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toBeTruthy&lt;/code&gt; matches anything that an if statement treats as true&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toBeFalsy&lt;/code&gt; matches anything that an if statement treats as false&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toBeGreaterThan&lt;/code&gt; or &lt;code&gt;toBeLessThan&lt;/code&gt; for number value comparisons&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toMatch&lt;/code&gt; accepts a Regex pattern to match a string output&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toContain&lt;/code&gt; can be used to see if a value is contained in an Array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More common Jest Matchers can be found in the &lt;a href="https://jestjs.io/docs/using-matchers"&gt;official introduction here&lt;/a&gt; or a complete list can be found &lt;a href="https://jestjs.io/docs/expect"&gt;in the official docs here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For our second function, we can define the expected output object within the &lt;code&gt;describe&lt;/code&gt; block's scope and pass this object into our matcher. Doing this, we will again be checking for equality; however when dealing with objects, we must use &lt;code&gt;.toEqual&lt;/code&gt; instead, which iterates through all of the values of the objects to check for equality.&lt;/p&gt;

&lt;p&gt;With this in mind, we must add this final &lt;code&gt;describe&lt;/code&gt; block to our test file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;getMostPopularBlog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return the most popular blog of a user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 1 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-the-tests"&gt;
  &lt;/a&gt;
  Running the Tests
&lt;/h2&gt;

&lt;p&gt;The tests we have written should clearly fail because we have not yet written the functions; however, we can run the test to ensure that they are properly set up.&lt;/p&gt;

&lt;p&gt;To run the tests, run &lt;code&gt;npm test&lt;/code&gt; (which matches the command we defined in the &lt;code&gt;package.json&lt;/code&gt;). We are wonderfully greeted with the expected failures that our functions are not defined, and it indicates that our test file is prepared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;FAIL&lt;/span&gt;  &lt;span class="nx"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;exampleFunctions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
  &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;
    &lt;span class="err"&gt;✕&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt;
    &lt;span class="err"&gt;✕&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;popular&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;

  &lt;span class="err"&gt;●&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt; &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;

    &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#writing-the-functions"&gt;
  &lt;/a&gt;
  Writing the functions
&lt;/h2&gt;

&lt;p&gt;Create a new file in &lt;code&gt;/jest-example&lt;/code&gt; which will contain our functions. The name of the file should match the filename of the test file, minus the &lt;code&gt;.test&lt;/code&gt; extension.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;/jest-example&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;exampleFunctions.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this file we need to define out two functions, and ensure that we export those functions so that our test file can access them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we save and run our tests again, we will see that all four tests still fail (which is expected), but Jest provides a ne message to us indicating what happened.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;
    &lt;span class="err"&gt;✕&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt;
    &lt;span class="err"&gt;✕&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;popular&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="err"&gt;●&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt; &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;received&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Object.is equality&lt;/span&gt;

    &lt;span class="nx"&gt;Expected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;230&lt;/span&gt;
    &lt;span class="nx"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This message indicates that our test is able to find the matching function, unlike before, but now instead of getting the expected value that was passed to the &lt;code&gt;matcher&lt;/code&gt;, no value is being returned from our function. Let's implement the logic for our two functions as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="c1"&gt;// iterate through the blog entries and sum the like values&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalLikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;likes&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;totalLikes&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="c1"&gt;// Iterate through users blogs, and update the tracking object to&lt;/span&gt;
  &lt;span class="c1"&gt;// continually have the index of the blog with most likes, and the &lt;/span&gt;
  &lt;span class="c1"&gt;// number of likes for comparison&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxLikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
          &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;likes&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;//Select get the blog object by looking up the index stored in the tracker&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;topBlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;maxLikes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;topBlog&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we run the tests one final time, we are greeted with pass indicators:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
 &lt;span class="nx"&gt;PASS&lt;/span&gt;  &lt;span class="nx"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;exampleFunctions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
  &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;
    &lt;span class="err"&gt;✓&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt;
    &lt;span class="err"&gt;✓&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;popular&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="nx"&gt;Suites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Tests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Snapshots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;0.713&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;estimated&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Testing is powerful. Even with these limited tests, we would would be able to see if changes further along in the development process negatively impact the work we have already done. For example, if the structure of the API response that we used to build the &lt;code&gt;user&lt;/code&gt; object changed, running the test file would indicate an issue prior to that change going into effect. This is especially important in development teams, where multiple developers are working on the same codebase. The tests help ensure that new code remains compatible and functional with the codebase and with that of other developers.&lt;/p&gt;

&lt;p&gt;However, the reliability and power of testing is limited by the comprehensiveness of the test scenarios. As you are building tests, remember to consider the edge case scenarios that could break the function of your application, and write tests to simulate those. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What would we expect to happen if the user was not found?&lt;/li&gt;
&lt;li&gt;What is the expected behavior if two posts have the same number of likes?&lt;/li&gt;
&lt;li&gt;What is the expected behavior if a user has no blogs?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The topic of testing goes very deep, but hopefully this helps you get started with understanding the testing process and developing your own tests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jestjs.io/docs/getting-started"&gt;Getting Started in Jest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jestjs.io/docs/using-matchers"&gt;Common Jest Matchers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jestjs.io/docs/expect"&gt;Jest Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.valentinog.com/blog/jest/"&gt;Jest Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dsasse07/jest-example"&gt;Blog Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How I Implemented A Smart Contact-Me Form</title>
      <author>RD</author>
      <pubDate>Mon, 12 Apr 2021 18:49:25 +0000</pubDate>
      <link>https://dev.to/rodiwa/how-i-implemented-a-smart-contact-me-form-1a48</link>
      <guid>https://dev.to/rodiwa/how-i-implemented-a-smart-contact-me-form-1a48</guid>
      <description>&lt;p&gt;This is not a coding tutorial, but a very high level overview of my implementation. Nonetheless, I’ve shared links to my &lt;a href="https://github.com/rodiwa/contact-form-python"&gt;github code&lt;/a&gt; and various references inline. The contact-me form is on my &lt;a href="http://rohitdiwakar.com/"&gt;website&lt;/a&gt; (scroll to the end).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;I wanted a practical contact-me form for my website so I could be notified when somebody left me a message. I also wanted to reply back to the user so they have my contact info as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;For notification, I decided to have a &lt;a href="https://api.slack.com/messaging/webhooks"&gt;Slack Incoming Webhook&lt;/a&gt;. I would create a Slack channel and messages sent to me from my website would show up here. For the reply-back, I decided to send an email to the user only if they shared an existing/ valid email address.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pIuMOZZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knh4c80qg93wpj37tw21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pIuMOZZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knh4c80qg93wpj37tw21.png" alt="Solution diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-brainstorming"&gt;
  &lt;/a&gt;
  The Brainstorming
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I initially had a NodeJS backend + Mongodb Atlas cluster to save message details (name, email, message) directly from the website. But this data was not of any use really. I just wanted to be notified and send a response back to the user.&lt;/li&gt;
&lt;li&gt;To check if email is existing, python has a good library - &lt;a href="https://pypi.org/project/validate_email/"&gt;validate_email&lt;/a&gt;. NodeJS didn’t really have a lot of ‘obvious’ options, and some had to be &lt;a href="https://soshace.com/verifying-an-email-address-without-sending-an-email-in-nodejs/"&gt;done manually&lt;/a&gt; (by &lt;a href="https://stackoverflow.com/questions/29272695/node-js-email-existence-check"&gt;sending an actual email&lt;/a&gt; to verify, which I didn’t want).&lt;/li&gt;
&lt;li&gt;I didn’t want a server running at all times, since this feature would be sparingly used. Azure Functions &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/serverless/serverless-design-examples#web-apps-and-apis"&gt;was a good choice&lt;/a&gt; as I needed it to run (read as “cost me”) only when triggered by an HTTP request.&lt;/li&gt;
&lt;li&gt;I also wanted to perform steps in sequence, and I wanted a way to store the state of my previous step (is email valid or not) and it made sense to use Azure Durable Functions for this.&lt;/li&gt;
&lt;li&gt;Since Python libraries had a lot of my requirements covered, I chose Python over NodeJS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-implementation"&gt;
  &lt;/a&gt;
  The Implementation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Setup Azure Functions

&lt;ul&gt;
&lt;li&gt;I started with a quickstart Azure Functions (Python) project on my local VS Code &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/durable/quickstart-python-vscode"&gt;as given&lt;/a&gt; on the Azure docs. I then published this demo to my Az account, and tested the example using Postman and the Az function URL. I now only had to swap out the examples with my own implementations.&lt;/li&gt;
&lt;li&gt;Az Durable Functions has &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-types-features-overview"&gt;3 types of functions&lt;/a&gt; (now 4 types) - Client (this kicks off the orchestrator), Orchestrator (manages different tasks or activities), and an Activity (what you’re really trying to do). The quickstart-demo gives you these.&lt;/li&gt;
&lt;li&gt;Since I had 3 main activities to do, I created 3 Activity functions; one each to -  send slack notification (&lt;code&gt;notifySlackChannel&lt;/code&gt; file in repo), check if email is valid (&lt;code&gt;isEmailExists&lt;/code&gt;) and send email (&lt;code&gt;sendEmail&lt;/code&gt;). VS Code Az Functions plugin has quick-actions to create these. Then plug these new activities into the demo code, replacing the calls to Hello with your new 3 activities.&lt;/li&gt;
&lt;li&gt;I started by passing payload from website &lt;code&gt;{user, email, message}&lt;/code&gt; into the Az Durable Functions.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Slack Notification - see &lt;a href="https://github.com/rodiwa/contact-form-python/tree/master/sendEmail"&gt;&lt;code&gt;sendEmail&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Create a Slack account, and create a channel where you want your messages.&lt;/li&gt;
&lt;li&gt;Create a Slack app, enable and create an &lt;a href="https://slack.com/intl/en-in/help/articles/115005265063-Incoming-webhooks-for-Slack"&gt;incoming webhook&lt;/a&gt;. You will get a slack URL which you can use to POST messages by sending a payload to it; like { text: “your message comes here” }.&lt;/li&gt;
&lt;li&gt;I also added formatting to my messages by using Slack’s &lt;a href="https://api.slack.com/block-kit"&gt;Block kit UI&lt;/a&gt;. It’s pretty neat because all you have to do is send some additional JSON objects (for a button, etc) to the payload data. Rest remains the same. Sweet.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Check if email is valid - see &lt;a href="https://github.com/rodiwa/contact-form-python/tree/master/isEmailExists"&gt;&lt;code&gt;isEmailExists&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;This is a simple python code that checks if the given email exists&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Send email - see &lt;a href="https://github.com/rodiwa/contact-form-python/tree/master/sendEmail"&gt;&lt;code&gt;sendEmail&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Get output of previous operation - &lt;code&gt;isEmailExists&lt;/code&gt;. If this value is &lt;code&gt;True&lt;/code&gt;, only then go ahead with this step.&lt;/li&gt;
&lt;li&gt;This was a simple implementation, almost as given &lt;a href="https://dev.mailjet.com/email/guides/send-api-v31/"&gt;in their examples&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Environment variables

&lt;ul&gt;
&lt;li&gt;Best to not check-in config with code, and to use environment variables instead.&lt;/li&gt;
&lt;li&gt;Az funcs allow you to add &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-how-to-use-azure-function-app-settings?tabs=portal"&gt;variables as configuration&lt;/a&gt; which can be used by your code.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#troubleshoots"&gt;
  &lt;/a&gt;
  Troubleshoots
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The python smtplib works fine when you test it on local, but when you deploy code to AZ functions, &lt;a href="https://stackoverflow.com/questions/58953123/i-can-not-send-email-from-python-azure-function-smtp-office365-com-587#:~:text=1%20Answer&amp;amp;text=The%20only%20way%20to%20use,provides%20these%20type%20of%20services.&amp;amp;text=So%20the%20e%2Dmails%20sent,as%20SPAM%20by%20mail%20servers."&gt;AZ does not pass the emails&lt;/a&gt; through. You need to use a &lt;a href="https://stackoverflow.com/questions/50059171/not-able-to-connect-to-smtp-from-azure-cloud-service/50075862#50075862"&gt;SMTP relay services&lt;/a&gt; (SendGrid, Mailjet) to get this done on Azure.&lt;/li&gt;
&lt;li&gt;Passing parameters from HTTP request to Az function is not very intuitive.
Debugging on Az functions after deployment is a pain. Use &lt;code&gt;logger.info&lt;/code&gt; instead of &lt;code&gt;print()&lt;/code&gt; (python) or &lt;code&gt;console.log&lt;/code&gt; (JS).&lt;/li&gt;
&lt;li&gt;The running logs on Az functions are not consistent and do not show/ run at times. AZ portal has to be refreshed.&lt;/li&gt;
&lt;li&gt;I had trouble with SendGrid. Looks like &lt;a href="https://stackoverflow.com/questions/17666161/sending-email-from-azure/55470893#55470893"&gt;others have too&lt;/a&gt;. For me, they asked for way too many details (organization, address, reason to use this service, etc) on account creation and I wanted to be vague since I was only setting up for a dev project. They did not let me use SendGrid and forced me to create a ticket with support to justify how I wanted to use SendGrid for sending emails. Rude. Screw that. &lt;a href="https://www.mailjet.com/"&gt;Mailjet&lt;/a&gt; was way easier to set up and their free account gives more emails (Mailjet allows 200, as compared to SendGrids 100 emails per day).&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>learning</category>
      <category>python</category>
      <category>serverless</category>
      <category>showdev</category>
    </item>
    <item>
      <title>VS Code Commands Cheatsheet 🔥 - Increase Productivity 🚀</title>
      <author>Garvit Motwani</author>
      <pubDate>Mon, 12 Apr 2021 18:35:25 +0000</pubDate>
      <link>https://dev.to/worldindev/vs-code-commands-cheatsheet-increase-productivity-o6d</link>
      <guid>https://dev.to/worldindev/vs-code-commands-cheatsheet-increase-productivity-o6d</guid>
      <description>&lt;p&gt;Hey Devs, This is a cheat sheet for all the VSCode users out there, these shortcuts can increase your speed and productivity!!&lt;/p&gt;

&lt;p&gt;So let's start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shortcuts"&gt;
  &lt;/a&gt;
  Shortcuts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#command-palette"&gt;
  &lt;/a&gt;
  Command palette
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show all commands&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌘P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show files&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#sidebars"&gt;
  &lt;/a&gt;
  Sidebars
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌘B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Toggle sidebar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘E&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Explorer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Debug&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Extensions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧^G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Git (SCM)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#search"&gt;
  &lt;/a&gt;
  Search
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌘F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Find&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌥⌘F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Replace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Find in files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Replace in files&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#panel"&gt;
  &lt;/a&gt;
  Panel
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌘J&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Toggle panel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘M&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Problems&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘U&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘Y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Debug console&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^`&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;{: .-shortcuts}&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  View
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;⌘k&lt;/code&gt; &lt;code&gt;z&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Zen mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;⌘k&lt;/code&gt; &lt;code&gt;u&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Close unmodified&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;⌘k&lt;/code&gt; &lt;code&gt;w&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Close all&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#debug"&gt;
  &lt;/a&gt;
  Debug
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Start&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Stop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Restart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Start without debugging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F9&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Toggle breakpoint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Step over&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F11&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Step into&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧F11&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Step out&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Debug sidebar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘Y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Debug panel&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf"&gt;Keyboard shortcuts (MacOS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf"&gt;Keyboard shortcuts (Windows)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf"&gt;Keyboard shortcuts (Linux)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devhints.io/vscode"&gt;DevHints VSCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;PLEASE FOLLOW, LIKE, SHARE, AND COMMENT ANY COMMAND YOU THINK I MISSED OUT!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#giveaway"&gt;
  &lt;/a&gt;
  ⚡Giveaway ⚡
&lt;/h2&gt;

&lt;p&gt;We are giving away any course you need on Udemy. Any price any course.&lt;br&gt;
Steps to enter the giveaway&lt;br&gt;
--&amp;gt; React to this post&lt;br&gt;
--&amp;gt; &lt;a href="https://worldindev.ck.page/"&gt;Subscribe to our Newsletter&lt;/a&gt; &lt;strong&gt;&amp;lt;--&lt;/strong&gt; Very important&lt;/p&gt;




&lt;p&gt;Happy Coding.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>cheatsheet</category>
    </item>
    <item>
      <title>Java vs Python</title>
      <author>Konchada Sai Ansul</author>
      <pubDate>Mon, 12 Apr 2021 18:30:24 +0000</pubDate>
      <link>https://dev.to/saiansulsblog/java-vs-python-5fla</link>
      <guid>https://dev.to/saiansulsblog/java-vs-python-5fla</guid>
      <description>&lt;p&gt;Hello Guys, Welcome back to another post of &lt;strong&gt;Sai Ansul's Blog&lt;/strong&gt;.&lt;br&gt;
In this blog we are gonna find which programming language is better.&lt;/p&gt;

&lt;p&gt;So let's start,&lt;/p&gt;

&lt;p&gt;Firstly let us know what is programming? &lt;br&gt;&lt;br&gt;
Programming is the way we can make the computer perform various tasks.&lt;/p&gt;

&lt;p&gt;What is programming language? &lt;br&gt;&lt;br&gt;
It is a formal language to perform various tasks, there are several protocols and algorithms to be followed.&lt;/p&gt;

&lt;p&gt;Let us know the types of programming languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Procedural Programming Language. &lt;/li&gt;
&lt;li&gt;Functional Programming Language. &lt;/li&gt;
&lt;li&gt;Object-oriented Programming Language. &lt;/li&gt;
&lt;li&gt;Scripting Programming Language. &lt;/li&gt;
&lt;li&gt;Logic Programming Language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some names of programming language are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++ Language. &lt;/li&gt;
&lt;li&gt;C Language. &lt;/li&gt;
&lt;li&gt;Pascal Language.&lt;/li&gt;
&lt;li&gt;Python Language.&lt;/li&gt;
&lt;li&gt;Java Language.&lt;/li&gt;
&lt;li&gt;Perl Language&lt;/li&gt;
&lt;li&gt;Lisp Language&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-comparison-factors-are"&gt;
  &lt;/a&gt;
  The Comparison Factors are &lt;br&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Speed
&lt;/li&gt;
&lt;li&gt;Legacy
&lt;/li&gt;
&lt;li&gt;Code
&lt;/li&gt;
&lt;li&gt;Practical Agility
&lt;/li&gt;
&lt;li&gt;Trends
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-speed"&gt;
  &lt;/a&gt;
  1. Speed
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HJl57eej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614613345245/zTg0kFpcL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HJl57eej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614613345245/zTg0kFpcL.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
In the terms of speed Java is faster than Python as it is a compiled language, so it takes less time to carry out the program as compared Python is an interpreter language and it takes more time than Java language to carry out the program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-legacy"&gt;
  &lt;/a&gt;
  2. Legacy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q71TDESk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614613782923/7cbAl7gJf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q71TDESk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614613782923/7cbAl7gJf.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java's legacy problems are typically larger and more numerous than python’s .&lt;br&gt;
Python has less legacy problem so world finds difficulty for the script to copy and paste codes and gives it a slight edge over the other languages.&lt;/p&gt;

&lt;p&gt;The other confusion that arises when we say that the two languages that is which one is easier between Java &amp;amp; python. So let’s have a look at the number of lines required while writing a code in both the languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-code"&gt;
  &lt;/a&gt;
  3. Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5LYPCPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614614056196/VedCUfUbD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5LYPCPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614614056196/VedCUfUbD.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Java is very talkative as compared to Python. It takes 10 lines of code to read from a file in Java.&lt;br&gt;
Python only takes 2 lines of code in Python. This makes Python a more preferable language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-practical-agility"&gt;
  &lt;/a&gt;
  4. Practical Agility
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1YAvEi1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614616253879/zbH93Al2K.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1YAvEi1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614616253879/zbH93Al2K.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Java enjoys more support than python thanks to its static type system and universality of IDE’s in development. It is more popular for mobile and web apps.&lt;br&gt;
Python has an existence in the talent space and is considered to be the most favorable language for Machine Learning, Artificial Intelligence, Internet of Things and a lot more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-trends"&gt;
  &lt;/a&gt;
  5. Trends
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QpfZz-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614616478560/PkqM5SUSL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QpfZz-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614616478560/PkqM5SUSL.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
While not as trendy as Java was, it is still the most popular programming language by virtually any measure. On the other hand, Python’s growth has been astronomical, especially in developed, high-income countries. The reasons for this amazing growth include developer productivity, language flexibility, library support, community support, and ease of learning.&lt;/p&gt;

&lt;p&gt;Now with this, we come to an end of this comparison on Java vs Python. Python has a slight edge over Java and wins the battle in most of the factors. So, if you have read this, you might have a clear idea about which programming language is better and which one you should use.&lt;/p&gt;

&lt;p&gt;If you liked this blog and want to support my efforts, do share it with as many friends as possible. And feel free to drop in suggestions for improvements.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Bump: GitHub Actions</title>
      <author>Doug Sillars</author>
      <pubDate>Mon, 12 Apr 2021 18:09:42 +0000</pubDate>
      <link>https://dev.to/bump/bump-github-actions-30f4</link>
      <guid>https://dev.to/bump/bump-github-actions-30f4</guid>
      <description>&lt;p&gt;Here at Bump, we want your documentation to look beautiful. That’s why we designed our layout to work with both OpenAPI and AsyncAPI specifications — just provide your API in these formats, and we’ll make it look amazing.&lt;/p&gt;

&lt;p&gt;But where we really simplify things is the ability to update your docs automatically, so you don’t even have to think about updating. Just push your code, and we’ll make sure your docs are updated.&lt;/p&gt;

&lt;p&gt;In this post, we’ll walk through the Bump GitHub Action. If you keep your code (with your API specification) on GitHub, this action will do the documentation updates for you. You’ll need a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://bump.sh/users/sign_up"&gt;Bump.sh account&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Your api location at Bump. You don’t actually need to upload your docs, you just need to create the location where it will reside. Once created, you’ll need a

&lt;code&gt;Doc id&lt;/code&gt;

and an

&lt;code&gt;Access token&lt;/code&gt;

from your docs settings. (Settings &amp;gt; CI deployment).&lt;/li&gt;
&lt;li&gt;Your code (with your API document) hosted on Github.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  GitHub Actions
&lt;/h2&gt;

&lt;p&gt;GitHub Actions are automated tasks that GitHub will run over your repository. In this case, when a commit is made, it will take the API specification file denoted in the action (a YAML or JSON), and use it to update your documentation on Bump.&lt;br&gt;
In this case, I will be updating my &lt;a href="https://github.com/dougsillars/jokeAPI"&gt;JokeAPI&lt;/a&gt; on Bump whenever new code is pushed.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-create-your-documentation-at-bump"&gt;
  &lt;/a&gt;
  Step 1: create your documentation at Bump.
&lt;/h2&gt;

&lt;p&gt;In this case, I want to update my Joke API, so I’ll create a version of my API called “JokeAPI — updating from GitHub Action” You can see this version on my &lt;a href="https://bump.sh/hub/MyApis/doc/jokeapi-updating-from-github-action"&gt;Bump account&lt;/a&gt;. I uploaded the current YAML file so that some content would be present on the site.&lt;/p&gt;

&lt;p&gt;Inside my new API’s settings, under the “CI deployment” settings, there is a Doc id and an Access token:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkJocBC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Apk6kSzq4iFOgz-Qk-9QvLw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkJocBC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Apk6kSzq4iFOgz-Qk-9QvLw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll need these to implement our GitHub Action. But your Access token needs to remain private, so keep it under wraps (or a salmon coloured rectangle).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-create-github-action"&gt;
  &lt;/a&gt;
  Step 2: Create GitHub Action
&lt;/h2&gt;

&lt;p&gt;In your GitHub repository, we’ll create our GitHub Action. Click “Actions” at the top of your repo, and then click “New Workflow”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oF2L1qb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n2b2aisb6ysqeh8n3qz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oF2L1qb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n2b2aisb6ysqeh8n3qz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’re going to get a lot of options on workflows you can create, but we can ignore these. We’ll create our workflow from scratch, so click the “set up a workflow yourself” link. (Don’t worry, you’re not doing it yourself — we’ll do it together!)&lt;/p&gt;

&lt;p&gt;Paste in the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Deploy documentation 
on:
  push:
    branches:
      - master
jobs:
  deploy-doc:
    name: Deploy API doc on Bump
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Deploy API documentation
        uses: bump-sh/github-action@0.2
        with:
          doc: &amp;lt;BUMP_DOC_ID&amp;gt;
          token: ${{secrets.BUMP_TOKEN}}
          file: doc/api-documentation.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few fields you’ll need to change:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Branch: If your main branch is master - you're set. If you have a newer repo, your main branch is probably called main. If your branch has a different name - enter the branch you'd like to update on.&lt;/li&gt;
&lt;li&gt;Doc: Enter the Doc id from your Bump CI deployment settings.&lt;/li&gt;
&lt;li&gt;Token: Leave in this state. This is referencing a GitHub Secret. So we can use this variable to keep your Access token private.&lt;/li&gt;
&lt;li&gt;File: The link to your yaml/json file. In my jokes api, this became: file: joke_api_0001.yaml as my yaml is in the root directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#github-secrets"&gt;
  &lt;/a&gt;
  GitHub Secrets
&lt;/h2&gt;

&lt;p&gt;To keep your API token private, we’ll use GitHub Secrets. In your repository, click Settings: Secrets&lt;br&gt;
There’s a button to create a new secret.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kfnSsuEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AmZ5on7MSnoKOkjlI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfnSsuEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AmZ5on7MSnoKOkjlI.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see I have created a secret called BUMP_TOKEN that holds the API token for me repo. This is referenced in the workflow using $ { { secrets.BUMP_TOKEN } }.&lt;/p&gt;

&lt;p&gt;That’s it! Your workflow is now ready to go.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#testing-out-your-workflow"&gt;
  &lt;/a&gt;
  Testing out your workflow.
&lt;/h2&gt;

&lt;p&gt;To test my workflow, I’ll add a fake endpoint to my API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/fake_entry:
  post:
    tags:
      - users
    summary: fakeentry
    operationId: fake
    description: fake
    parameters: 
      - in: header
        name: x-admin
        schema: 
          type: string 
        required: true

    requestBody:
      content:
        application/json: 
          schema: 
            type: object
            required:
              - fake
              - fake1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Saving this to my repo, I’ll push this code to GitHub with the commit message “adding fake params”. Immediately on the actions page, I see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nU2EAeOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2A8fR7pB5pFphNBGie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nU2EAeOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2A8fR7pB5pFphNBGie.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And after a few seconds: the yellow turns green, indicating that the push to Bump was successful!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looking-at-the-docs"&gt;
  &lt;/a&gt;
  Looking at the Docs
&lt;/h2&gt;

&lt;p&gt;The new /fake_entry endpoint is visible under Users:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Sb24W72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AJh7KbmvcimaHUjM8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Sb24W72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AJh7KbmvcimaHUjM8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changelog"&gt;
  &lt;/a&gt;
  Changelog
&lt;/h2&gt;

&lt;p&gt;Bump reports every change made to the API, and we can see the GitHub action report:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aTGSEoNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AZ0U5wj1E9DM542Px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aTGSEoNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AZ0U5wj1E9DM542Px.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By clicking on the date of the item, we are directed to the diff:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mbuuvRWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2APkdvwimOIOHA699a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbuuvRWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2APkdvwimOIOHA699a.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;My next edit was to remove this fake entry endpoint, so that I might continue building my Joke API:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TiHbswut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2Ahs-fzJcAfErxdBwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TiHbswut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2Ahs-fzJcAfErxdBwj.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the fake entry, we were able to demonstrate the power of using GitHub actions — simply updating the code in my GitHub repository resulted in the new documentation being pushed live to users.&lt;/p&gt;

&lt;p&gt;Removing the manual step of uploading your documents ensures that whatever code is pushed to production — the docs are pushed at the same time, resulting in up-to-date documentation. Every time.&lt;/p&gt;

</description>
      <category>githubactions</category>
      <category>documentation</category>
    </item>
    <item>
      <title>Tips from someone who interviews Junior Frontend Engineers</title>
      <author>Jordi Enric</author>
      <pubDate>Mon, 12 Apr 2021 17:57:06 +0000</pubDate>
      <link>https://dev.to/jordienr/tips-from-someone-who-interviews-junior-frontend-engineers-5g38</link>
      <guid>https://dev.to/jordienr/tips-from-someone-who-interviews-junior-frontend-engineers-5g38</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tips-from-someone-who-interviews-junior-frontend-developers"&gt;
  &lt;/a&gt;
  Tips from someone who interviews Junior Frontend Developers
&lt;/h1&gt;

&lt;p&gt;I've been doing interviews to junior frontend developers to help at my current job. I also designed a technical test which candidates do before the interview. &lt;/p&gt;

&lt;p&gt;I read through the code, check the repository, try the app and decide if the candidate would be a good fit. After that in the interviews I usually want to get to know the candidate a bit more and give them an opportunity to show me what they think would be appropriate that they have not yet shown in previous interviews or in the technical test.&lt;/p&gt;

&lt;p&gt;Here are some tips I'd give to anyone who wants to get a job as a Junior Frontend Developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-git-correctly"&gt;
  &lt;/a&gt;
  Use git correctly
&lt;/h2&gt;

&lt;p&gt;Try to follow some standards like gitflow on your technical tests. Nothing fancy, some branch for development, and commits with prefixes like "hotfix" or "feature" would be enough for me. Just don't add the whole app in a single commit and be done with it.&lt;/p&gt;

&lt;p&gt;What this shows me is that you know the basics of git, and you are trying to keep your repo tidy which is really important.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-small-commits-pull-requests"&gt;
  &lt;/a&gt;
  Do small commits / pull requests
&lt;/h2&gt;

&lt;p&gt;Small commits and pull requests are easy to handle and isolate. I always say that I'd rather have 5 PR with one feature / bug fix each than 1 big ass PR with 5 features / bug fixes.&lt;/p&gt;

&lt;p&gt;Easier to rollback if something breaks, easier to manage, easier to correct and give feedback on the PR. So, small PRs, clear commits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-separation-of-concerns"&gt;
  &lt;/a&gt;
  Learn Separation of concerns
&lt;/h2&gt;

&lt;p&gt;One recurring mistake I find is having your API access logic directly in components. Now you don't have to architect your technical tests perfectly just have things in their place. A few files to handle data access logic that are consumed by components is enough.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-to-write-semantic-html"&gt;
  &lt;/a&gt;
  Try to write semantic HTML
&lt;/h2&gt;

&lt;p&gt;Writing semantic HTML shows me that you've done your homework on HTML. Some junior developers skip learning HTML correctly because they jump directly to JS or React/Vue. Creating scalable component libraries depends on writing clear and simple code. Code that is easy to read is less complex and is easier to fix down the line. HTML is a big part of frontend applications and writing semantic HTML should be in your learning to-do list if you haven't already.&lt;/p&gt;

&lt;p&gt;It also helps with accessibility and SEO.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-a-pattern-for-your-cssscss"&gt;
  &lt;/a&gt;
  Follow a pattern for your CSS/SCSS
&lt;/h2&gt;

&lt;p&gt;What I mean here is don't just put a class on a div and fill it up with styles. Try to think this through a bit.&lt;/p&gt;

&lt;p&gt;This will show me that you've also made your homework on CSS. You could use a utility class framework like Bootstrap or Tailwind. You could use BEM. You could just write the styles you need for your test but as utility classes.&lt;/p&gt;

&lt;p&gt;Do some googling on this and try things out. There's no 100% correct answer here sadly 😅&lt;/p&gt;

&lt;p&gt;I don't personally like utility classes because it bloats the HTML, but I believe they are really useful for creating scalable CSS codebases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-repeat-code"&gt;
  &lt;/a&gt;
  Don't repeat code
&lt;/h2&gt;

&lt;p&gt;If you find yourself writing &lt;code&gt;padding: 1rem;&lt;/code&gt; 15 times in your app that's repeating code.&lt;/p&gt;

&lt;p&gt;If you find yourself writing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"actions"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Cancel&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"primary-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's also repeating code.&lt;/p&gt;

&lt;p&gt;Try to find those places where you repeat code and create components, reusable classes, or utility JS functions, so you don't have to repeat code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-some-documentation"&gt;
  &lt;/a&gt;
  Write some documentation
&lt;/h2&gt;

&lt;p&gt;Google "how to write good documentation" or "how to write a good README".&lt;/p&gt;

&lt;p&gt;Read the docs you really like and see what they add to their docs, what are they talking about, what questions do they answer, how do they structure the docs?&lt;/p&gt;

&lt;p&gt;Having a basic grasp of this will go a long way when writing documentation. It will make you look superb to the engineers who will review your technical tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-some-basic-design-skills"&gt;
  &lt;/a&gt;
  Learn some basic design skills
&lt;/h2&gt;

&lt;p&gt;If you're not that great with design, and you feel like your UIs are kinda ugly (we all start there). I recommend you read some articles about design to improve your skills. There are tons of videos, articles, books and tools out there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-this-important-arent-there-usually-designers-who-take-care-of-that-stuff"&gt;
  &lt;/a&gt;
  Why is this important? Aren't there usually designers who take care of that stuff?
&lt;/h3&gt;

&lt;p&gt;Yes, good question me. But designers are people who can make mistakes too. It's nice to know that the people who are building the UIs also have some eye for the basics of UI Design.&lt;/p&gt;

&lt;p&gt;Creating a good-looking app is something we all want and actually provides a lot of value. Makes your product easier to market. Makes people want to use your product. If you're able to help with that part you're providing extra value to your team. Go flex them design skills boi.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-your-packagejson-correctly"&gt;
  &lt;/a&gt;
  Use your package.json correctly
&lt;/h2&gt;

&lt;p&gt;I always check the package.json file in projects to see the dependencies that are being used. Also, I check the different development dependencies to have an idea of what stack is being used, you could be using rollup, vite, webpack... I just want to get an idea. When you're installing dependencies make sure that you're adding them to the correct place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tests-good-idea-to-add-but-dont-go-crazy"&gt;
  &lt;/a&gt;
  Tests: good idea to add but don't go crazy
&lt;/h2&gt;

&lt;p&gt;Yes tests are important and yes I'm glad that you wrote some. But you don't need an 80% coverage. If you write 2/3 unit tests that'd be enough. I don't want you to spend 8 hours on the technical test.&lt;/p&gt;

&lt;p&gt;Make sure that your tests are actually useful and good and don't have false positives. I recommend reading Ken C. Dodds:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kentcdodds.com/blog/?q=testing"&gt;https://kentcdodds.com/blog/?q=testing&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prepare-some-questions"&gt;
  &lt;/a&gt;
  Prepare some questions
&lt;/h2&gt;

&lt;p&gt;Show interest, show that you're also trying to find out if the company is a good fit &lt;strong&gt;for you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I have a list of questions I usually ask here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jordienric.com/blog/questions-to-ask-in-interviews"&gt;I wrote a list of questions you can ask&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-article-is-highly-opinionated"&gt;
  &lt;/a&gt;
  This article is highly opinionated
&lt;/h2&gt;

&lt;p&gt;You will find interviewers that are not as flexible as me. You will find interviewers that are looking for a senior developer for the price of a junior (lots of these out there watch out).&lt;br&gt;
You will find interviewers that just want to get to know you and ask you some questions about JS and will offer you a job.&lt;/p&gt;

&lt;p&gt;You will probably go through 100s of interviews throughout your career so don't stress if one or two go wrong. Specially your first interviews. Use the interview as an opportunity to learn. Ask questions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You don't have to be an expert in any of these things I listed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Being good at these things or even having a basic understanding of them will make you a great candidate for frontend jobs. I have hired people that didn't know some things in this list. But when I have a candidate who understands these things and another one that doesn't... the choice is usually pretty clear.&lt;/p&gt;

&lt;p&gt;PD: Make sure that the company is a good fit for you just like the company is trying to learn if you're a good fit for them.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/jordienr"&gt;twitter&lt;/a&gt; for more :)&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Your Static Site to a PWA!</title>
      <author>Rishi Vishwakarma</author>
      <pubDate>Mon, 12 Apr 2021 17:54:49 +0000</pubDate>
      <link>https://dev.to/prorishi/your-static-site-to-a-pwa-24dl</link>
      <guid>https://dev.to/prorishi/your-static-site-to-a-pwa-24dl</guid>
      <description>&lt;p&gt;A &lt;strong&gt;&lt;em&gt;Progressive Web App&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;PWA&lt;/em&gt;&lt;/strong&gt; for short, is a website with added native capabilities. They are installable just like normal apps and even work offline and run in a separate browser process. They also support features like push notifications etc. PWAs have recently rose in importance because of the features they offer. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fun Fact:&lt;/em&gt;&lt;/strong&gt; DEV Community is also a PWA!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Building a basic PWA is not-so-difficult. Let's see how we can convert a static site into a PWA with a little changes.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;But First things First, understand a little more&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Additional Components necessary for a PWA:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Manifest&lt;/li&gt;
&lt;li&gt;A Service Worker&lt;/li&gt;
&lt;li&gt;A HTTPS connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us see their roles in building a PWA.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;&lt;em&gt;Manifest&lt;/em&gt;&lt;/strong&gt; is a JSON file that describes the properties of our PWA. It contains information like app name, theme-color, icons, app shortcuts etc.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;em&gt;Service Worker&lt;/em&gt;&lt;/strong&gt; is JS worker that runs in background process. It manages the state and cache of the app, handles notifications and syncs latest data with the offline one.&lt;/li&gt;
&lt;li&gt;HTTPS connection is needed for security purposes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here I am starting with a simple Clock made with the awesome trio (HTML, CSS, JS)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#try-the-app-first"&gt;
  &lt;/a&gt;
  Try the app first!!
&lt;/h3&gt;


&lt;div class="glitch-embed-wrap"&gt;
  &lt;iframe src="https://glitch.com/embed/#!/embed/clockkk?previewSize=100&amp;amp;path=index.html" alt="clockkk on glitch"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://clockkk.glitch.me"&gt;Click here&lt;/a&gt; to be able to install it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-note"&gt;
  &lt;/a&gt;
  !!! Note:
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#not-all-browsers-support-pwa-now-but-support-will-come-soon-latest-versions-of-chrome-firefox-edge-support-it-recently"&gt;
  &lt;/a&gt;
  Not all browsers support PWA now but support will come soon. Latest versions of Chrome, FireFox, Edge support it recently.
&lt;/h5&gt;

&lt;p&gt;Our project structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/Clock
    +-- /components
    |      +-- /images
    |      |      +-- favicon.png
    |      |      +-- clock-face.png
    |      +-- /scripts
    |      |      +-- main.js
    |      |      +-- redirect.js
    |      |      +-- pwa-handler.js
    |      +-- /styles
    |             +-- main.css
    +-- index.html
    +-- manifest.json
    +-- service-worker.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;A-not-so-Fun Fact&lt;/em&gt;&lt;/strong&gt;: Adobe has discontinued their PhoneGap Build; which is a cloud service for building apps because of the rise of PWA.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#indexhtml-gt-remember-to-link-the-manifest"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; -&amp;gt; Remember to link the manifest!
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Some basic meta tags. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"text/html;charset=UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, height=device-height,user-scalable=no, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- This one is important for the manifest. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"theme-color"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"#0d085c"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Clock&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Reference the StyleSheet. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/components/main.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Reference the manifest file; is must for PWA. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"manifest"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/manifest.json"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Reference the icons --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"shorcut icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/components/favicon.png"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/x-icon"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/components/favicon.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Clock&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"install"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Install App&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"clocks"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"analog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"second"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"minute"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hour"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"digital"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Reference the main and helper scripts. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/components/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/components/pwa-handler.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#i-have-not-shown-the-maincss-and-mainjs-files-as-they-dont-do-much-with-the-pwa-but-you-could-find-them-on-the-github-repo"&gt;
  &lt;/a&gt;
  I have not shown the main.css and main.js files as they don't do much with the PWA but you could find them on the GitHub repo.
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#componentsscriptspwahandlerjs"&gt;
  &lt;/a&gt;
  /components/scripts/&lt;strong&gt;&lt;em&gt;pwa-handler.js&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Reference the serviceWorker.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serviceWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Register our ServiceWorker script, if serviceWorker is available.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;serviceWorker&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/service-worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ServiceWorker Registered to the Application!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed to Register the ServiceWorker.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a variable to defer the beforeinstallprompt event.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;beforeInstallEvent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Reference the install button from DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;installButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;install&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Watch for the beforeinstallevent and defer it.&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;beforeinstallprompt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;beforeInstallEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;installButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Prompt for Installation when install button is clicked.&lt;/span&gt;
&lt;span class="nx"&gt;installButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;beforeInstallEvent&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Hide the install button as its purpose is over.&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outcome&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accepted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;installButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I have provided a button for prompting for installation in the &lt;code&gt;index.html&lt;/code&gt; and it disappears as soon as the app is installed.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#componentsimagesfaviconpng"&gt;
  &lt;/a&gt;
  /components/images/&lt;strong&gt;&lt;em&gt;favicon.png&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l9gJDidl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://clockkk.glitch.me/components/images/favicon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l9gJDidl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://clockkk.glitch.me/components/images/favicon.png" alt="favicon.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#componentsimagesclockfacepng"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;/components/images/clock-face.png&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkudBlQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://clockkk.glitch.me/components/images/clock-face.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkudBlQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://clockkk.glitch.me/components/images/clock-face.png" alt="favicon.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#manifestjson-gt-a-512x512-icon-is-a-must"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;manifest.json&lt;/em&gt;&lt;/strong&gt; -&amp;gt; A 512x512 icon is a must!
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Clock"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"standalone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"theme_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#0d085c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"icons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/components/images/favicon.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"512x512"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"purpose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"any maskable"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is a bare-minimum manifest file; you will find a whole bunch of other properties that are available upon searching.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#serviceworkerjs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;service-worker.js&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Name of the Cache.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CACHE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cacheV1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Select files for caching.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;urlsToCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/images/favicon.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/images/clock-face.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/scripts/main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/scripts/pwa-handler.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/styles/main.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Cache all the selected items once application is installed.&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;install&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CACHE&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Caching started.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urlsToCache&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Whenever a resource is requested, return if its cached else fetch the resourcefrom server.&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;respondWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#with-this-much-knowledge-your-are-ready-to-dive-into-the-world-of-pwa"&gt;
  &lt;/a&gt;
  With this much knowledge your are ready to dive into the world of PWA.
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#here-is-the-github-repo"&gt;
  &lt;/a&gt;
  Here is the GitHub repo:
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/prorishi"&gt;
        prorishi
      &lt;/a&gt; / &lt;a href="https://github.com/prorishi/Clock"&gt;
        Clock
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Features an analog and digital clock with an installable PWA.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#thanks-for-your-time-and-do-reference-your-pwas-in-the-discussions-area"&gt;
  &lt;/a&gt;
  Thanks for your time and do Reference your PWAs in the discussions area.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;btw this is my first post ever on Internet!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>pwa</category>
      <category>html</category>
    </item>
    <item>
      <title>I need some advice on Freelancing</title>
      <author>𝐋𝐄𝑽𝐈𝑨𝐓𝐇𝐀𝐍 Programming</author>
      <pubDate>Mon, 12 Apr 2021 17:38:43 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/i-need-some-advice-on-freelancing-c0m</link>
      <guid>https://dev.to/leviathanprogramming/i-need-some-advice-on-freelancing-c0m</guid>
      <description>&lt;p&gt;Hello everyone, I am going to start freelancing soon and would like some advice on it and an answer for my question below.&lt;/p&gt;

&lt;p&gt;I am a fifteen-year-old fullstack developer and I'm going to be starting to actually put my skills to use, starting with making free websites for people, and then charging little y little until I get much better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-charge-your-customers-for-a-domain-name"&gt;
  &lt;/a&gt;
  Do you charge your customers for a domain name?
&lt;/h3&gt;

&lt;p&gt;My question is, Do you buy a domain name yourself and then charge your customer for it?&lt;br&gt;
If you buy the domain for them and link it to the website, you can get a higher control level over it and can manage it in case something goes wrong.&lt;br&gt;
If your customer buys it, they might not be able to link it properly and might not set it up properly.  Linking domains was a very difficult task for me at first.&lt;/p&gt;

&lt;p&gt;Also, I'd appreciate some advice on freelancing if you have any.  Thanks!&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>help</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Demystifying Time Complexity &amp; Big O Notation</title>
      <author>Sai Ashish</author>
      <pubDate>Mon, 12 Apr 2021 17:12:45 +0000</pubDate>
      <link>https://dev.to/theinsightfulcoder/demystifying-time-complexity-big-o-notation-2f20</link>
      <guid>https://dev.to/theinsightfulcoder/demystifying-time-complexity-big-o-notation-2f20</guid>
      <description>&lt;p&gt;One of the most important concepts in software development is analysing the time complexity of an algorithm. In technical interviews, you'd often find interviewers asking, "What's the time complexity of this algorithm?" or "Can you improve the time complexity?" If you've no idea what time complexity means or what the fuss about Big O is all about, stick till the end to find out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-time-complexity"&gt;
  &lt;/a&gt;
  What is Time Complexity?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmBpRLJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618086630981/i1Xrzpbef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmBpRLJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618086630981/i1Xrzpbef.png" alt="Time Complexity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time complexity is the &lt;strong&gt;time taken&lt;/strong&gt; by an algorithm as a &lt;strong&gt;function of the length of the input&lt;/strong&gt;. In short, it tells the running time or &lt;strong&gt;performance&lt;/strong&gt; of a program as the size of the input is varied.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-to-understand-time-complexity"&gt;
  &lt;/a&gt;
  Why do we need to understand Time Complexity?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7PZFqt4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085877205/GCNqIjS2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PZFqt4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085877205/GCNqIjS2y.png" alt="Understanding Time Complexity"&gt;&lt;/a&gt;&lt;br&gt;
Time complexity helps us to determines the &lt;strong&gt;scalability&lt;/strong&gt; of an algorithm. Suppose, you're at a party and you want to use an Instagram filter to capture the joyous occasion. Alas, the filter takes years to load. Your smiles turn into a frown as your mood gets ruined. So much for a party, huh?&lt;/p&gt;

&lt;p&gt;As a developer, it is necessary to understand which is the most efficient and optimised method to use in an application. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-compare-the-time-complexity-of-an-algorithm"&gt;
  &lt;/a&gt;
  How to compare the time complexity of an algorithm?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1T7Sm-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085987351/2UtWwoe7H.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1T7Sm-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085987351/2UtWwoe7H.png" alt="Compare time complexity of algorithm"&gt;&lt;/a&gt;&lt;br&gt;
Let us take an example to understand this problem. Ali and Jack were given a task to write a program to find the sum of &lt;em&gt;n&lt;/em&gt; numbers. Jack is a very hardworking guy who has mastered the fundamentals of a programming language. He doesn't pay attention to anything except programming. Here's how he coded the program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int n=10, sum = 0;
for(int i=1; i&amp;lt;=n; i++)
{
     sum = sum + i;
}
System.out.println(sum);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ali was smart. He focused on every subject in school and solved problems in a jiffy. When Ali was granted the same problem, he chuckled and used Mathematics to his aid. Here's  how Ali built his program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int n=10;
System.out.println((n*(n+1))/2);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see from the above scenario, Ali was much more efficient as he avoided the shackles of using a loop to calculate his answer. If the size of the input increases, Jack's program will start to freeze and eventually int will overflow to present the wrong answer. Ali's magical line saves time and gives the right answer even for larger numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-big-o"&gt;
  &lt;/a&gt;
  What is Big O?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqO-JOx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084695849/cgaFO-C_x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqO-JOx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084695849/cgaFO-C_x.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image Source: &lt;a href="https://www.bigocheatsheet.com/"&gt;BigOCheatSheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Based on logic, we have understood time complexity and its comparison but we need something very distinct to compare the performance of different algorithms. If we start comparing the different type of sorting techniques by logic, it would get real tedious for our brain to execute the complexity of our problem. To optimise this, there's a superhero called the Big O.&lt;/p&gt;

&lt;p&gt;As per  &lt;a href="https://en.wikipedia.org/wiki/Big_O_notation"&gt;Wikipedia&lt;/a&gt;, Big O or asymptotic notation is a &lt;strong&gt;mathematical function&lt;/strong&gt; that describes the &lt;strong&gt;limiting behaviour&lt;/strong&gt; of a function when the argument tends towards a particular value or infinity.&lt;/p&gt;

&lt;p&gt;Big O basically tells us the &lt;strong&gt;time complexity in mathematical terms&lt;/strong&gt; which can be easily compared. Our superhero Big O comes in different forms and sizes. I'll introduce you to them, right away!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-o1"&gt;
  &lt;/a&gt;
  Understanding O(1)
&lt;/h2&gt;

&lt;p&gt;O(n) stands for &lt;strong&gt;constant time complexity&lt;/strong&gt;. O(1) represents that no matter the size of the input, it takes the same amount of time to execute. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int b = {1,2,3,4,5}
System.out.println(b[0]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No matter the length of the array, the program will require one unit, constant time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-on"&gt;
  &lt;/a&gt;
  Understanding O(n)
&lt;/h2&gt;

&lt;p&gt;O(n) stands for &lt;strong&gt;linear time complexity&lt;/strong&gt;. Linear represents the time takes by the algorithm is directly proportional to the size of the input. One of the most famous examples is the Linear Search algorithm. In linear search, we iterate over each element of the loop until we find a match. In the best-case scenario, the element could be present in the first position itself, thus effectively reducing the time complexity to O(1) as seen above. On the other hand, if the element is present at the end of the array or not at all, the loop has to iterate over all the elements in the array. Hence, the time complexity increases to O(n).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int a = 0, n[] = {1,2,3,4,5};
for(int i = 0; i &amp;lt;n.length; i++)
{
     if(n[i]==a)
     {
          System.out.println("Found");
          break;
     }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If there are two for loops in a program, the effective time complexity is still considered as O(n) and not O(2n). We typically ignore the constants in front of the variables in such cases, because they both still represent a linear function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-ologn"&gt;
  &lt;/a&gt;
  Understanding O(logn)
&lt;/h2&gt;

&lt;p&gt;O(logn) also known as &lt;strong&gt;logarithmic time complexity&lt;/strong&gt; denotes the time taken by the program to execute is proportional to the logarithm of the size of the input. The most famous example of this is the Binary Search algorithm. Let's suppose the worst-case scenario in the Binary search algorithm. We keep on halving our search array until we find the element or realise it is not present. In an array of 8 elements it will take maximum of 3 iterations(log28) to execute. If there are 1 million elements, it'll take just 19 iterations. This makes Binary Search so much more powerful than Linear Search.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int arr[] = {10,20,30,40,50}; 
int l = 0, r = arr.length - 1;
while (l &amp;lt;= r) {
      int m = l + (r - l) / 2;
      if (arr[m] == x)
          return m;
      if (arr[m] &amp;lt; x)
           l = m + 1;
      else
           r = m - 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#understanding-on2"&gt;
  &lt;/a&gt;
  Understanding O(n&lt;sup&gt;2&lt;/sup&gt;)
&lt;/h2&gt;

&lt;p&gt;O(n&lt;sup&gt;2&lt;/sup&gt;) is also known as &lt;strong&gt;Quadratic time complexity&lt;/strong&gt;. It represents that input is proportional to the square of the size of the input. It is most commonly seen in Bubble sort, Insertion sort and Patterns. Nested loops are an easy way to identify the O(n&lt;sup&gt;2&lt;/sup&gt;) complexity. &lt;/p&gt;

&lt;p&gt;As the number of nested loops increases so does the power.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(int i = 1; i&amp;lt;=5; i++)
{
     for(int j = 1; j&amp;lt;=i; j++)
     {
         System.out.print(j);
     }
System.out.println();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If there are instances of multiple nested loops of different orders only the highest power will contribute to time complexity. For example, if T(n) = 3n&lt;sup&gt;3&lt;/sup&gt; + 2n&lt;sup&gt;2&lt;/sup&gt;+n. The time complexity will be Cubic, O(n&lt;sup&gt;3&lt;/sup&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-o2n"&gt;
  &lt;/a&gt;
  Understanding O(2&lt;sup&gt;n&lt;/sup&gt;)
&lt;/h2&gt;

&lt;p&gt;O(2&lt;sup&gt;n&lt;/sup&gt;) represents the &lt;strong&gt;exponential function&lt;/strong&gt;. It is opposite to the logarithmic function. This mostly occurs in the case of Recursive functions, like recursive calculation of Fibonacci numbers. Another famous example of this complexity is the Hanoi Tower Problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void solve_hanoi(int N, string from_peg, string to_peg, string spare_peg)
{
    if (N&amp;lt;1) {
        return;
    }
    if (N&amp;gt;1) {
        solve_hanoi(N-1, from_peg, spare_peg, to_peg);
    }
    print "move from " + from_peg + " to " + to_peg;
    if (N&amp;gt;1) {
        solve_hanoi(N-1, spare_peg, to_peg, from_peg);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Program Source: &lt;a href="https://stackoverflow.com/questions/34915869/example-of-big-o-of-2n"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-on"&gt;
  &lt;/a&gt;
  Understanding O(n!)
&lt;/h2&gt;

&lt;p&gt;O(n!) represents that the time complexity is the function of n &lt;strong&gt;factorial.&lt;/strong&gt; This is the costliest it can get. One of the most classic examples is the Travelling Salesman Problem. Another example of O(n!) is given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const nFacRuntimeFunc = (n) =&amp;gt; {
  for(let i=0; i&amp;lt;n; i++) {
    nFacRuntimeFunc(n-1);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should at all costs &lt;strong&gt;avoid&lt;/strong&gt; the O(n!) complexity. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-recap"&gt;
  &lt;/a&gt;
  Let's Recap:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O(1)&lt;/strong&gt; - Constant time complexity (Best🎯)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n)&lt;/strong&gt; - Linear time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(log n)&lt;/strong&gt; - Logarithmic time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt; - Quadratic time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt; - Exponential time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n!)&lt;/strong&gt; - Factorial time complexity (Worst😭)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#valuable-resource-big-o-cheatsheet"&gt;
  &lt;/a&gt;
  Valuable Resource:  &lt;a href="https://www.bigocheatsheet.com/"&gt;Big O Cheatsheet&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Our superhero deserves a website of his own. I stumbled upon this website called the  &lt;a href="https://www.bigocheatsheet.com/"&gt;BigOCheatSheet.com&lt;/a&gt; made by &lt;a href="https://twitter.com/ericdrowell"&gt;Eric&lt;/a&gt;. It contains an amazing comparison of the time complexity for different data structures and array sorting elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3L0qsJym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084611822/5039Vbory.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3L0qsJym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084611822/5039Vbory.png" alt="Time Complexity of common data structures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EbhkONez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084629307/BR6c2vUa8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EbhkONez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084629307/BR6c2vUa8.png" alt="Time Complexity of various sorting algorithms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In today's world, people are learning various frameworks, libraries &amp;amp; technologies without learning time complexity or Data Structures &amp;amp; Algorithms(DSA). If you ask any developer working in the top MNC's, they'll advise you to master the fundamentals and learn DSA as it greatly helps in problem-solving and writing efficient code. With that said, I hope our superhero continues to be our guardian angel forever. Cheers🍻&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>beginners</category>
      <category>algorithms</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
