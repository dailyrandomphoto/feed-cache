<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 Best Python Libraries for Data Science and Machine Learning</title>
      <author>javinpaul</author>
      <pubDate>Sun, 02 Jan 2022 06:57:37 +0000</pubDate>
      <link>https://dev.to/javinpaul/10-best-python-libraries-for-data-science-and-machine-learning-33li</link>
      <guid>https://dev.to/javinpaul/10-best-python-libraries-for-data-science-and-machine-learning-33li</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/data-analysis-processing-with-pandas?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ovgrng24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/cdn-cgi/image/f%3Dauto%2Cfit%3Dcover%2Cw%3D600/v2api/collection/6374784699990016/5687664457023488/image/5244256324157440" alt="best Data Analysis &amp;amp;and Processing with Pandas - Learn Interactively" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, if you want to become a data scientist or machine learning engineer in 2022 and looking for best Python libraries for data science, machine learning, data analysis and deep learning then you have come to the right place. &lt;/p&gt;

&lt;p&gt;Earlier, I have shared best &lt;a href="https://javarevisited.blogspot.com/2021/01/10-tools-data-scientists-and-machine-learning-engineers.html"&gt;tools&lt;/a&gt; and resources to learn &lt;a href="https://javarevisited.blogspot.com/2018/03/top-5-data-science-and-machine-learning-online-courses-to-learn-online.html"&gt;&lt;strong&gt;Machine learning&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2020/08/top-10-coursera-courses-and-certification-for-artificial-intelligence-and-machine-learning.html"&gt;&lt;strong&gt;Artificial Intelligence&lt;/strong&gt;&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2019/08/top-5-courses-to-learn-deep-learning.html"&gt;&lt;strong&gt;Deep Learning&lt;/strong&gt;&lt;/a&gt;, and in this article, I am going to share best libraries python developers can learn for data science and machine learning. &lt;/p&gt;

&lt;p&gt;But if you are a beginner into field of Data Science and Machine learning then let me congratulate you for making right decision and learning this in-demand skills but learning these skilsl are not easy, there are a lot of choices to make and each choices has its own consequences. &lt;/p&gt;

&lt;p&gt;When I started my journey of Machine learning and Data Science, I had to first make a choice about choosing the right programming language as both &lt;a href="http://www.java67.com/2018/09/top-5-free-R-programming-courses-for-Data-Science-Machine-Learning-Programmers.html"&gt;R&lt;/a&gt; and &lt;a href="http://javarevisited.blogspot.sg/2018/03/top-5-courses-to-learn-python-in-2018.html"&gt;Python&lt;/a&gt; were doing great.&lt;/p&gt;

&lt;p&gt;I eventually chose Python because of a bigger community, general purpose in nature, and some prior experience of writing Python code. But, there was one more reason which helps me to chose &lt;a href="https://javarevisited.blogspot.com/2020/05/why-python-is-best-programming-language.html"&gt;Python for Data Science and Machine learning&lt;/a&gt;, the wide range of &lt;strong&gt;awesome libraries available in Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Today, I am going to introduce you to some of those awesome libraries like TensorFlow, NumPy, Pandas, SciPy, Scikit-learn, Seaborn, Keras, and Matplotlib. I know there are many more libraries but with my limited experience and exposure, I have heard of these main libraries so far.&lt;/p&gt;

&lt;p&gt;I'll definitely add new libraries into this list as and when I come across but till then knowing these libraries will help you a lot, particularly if you are also learning Data Science, Artificial Intelligence, and Machine learning using Python.&lt;/p&gt;

&lt;p&gt;Whether you are a beginner or already know Data Science, learning these libraries can make you more productive and enhance your profile. By the way, if you are a complete beginner, I suggest you to start with a hands-on course like  &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-coding%2F"&gt;Python A-Z™: Python For Data Science With Real Exercises!&lt;/a&gt;&lt;/strong&gt; which will teach you both Python and Data Science from scratch. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-coding%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--878E0T-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-D8dMkxJt0CY/XsEvzpWud0I/AAAAAAAAJRc/vavqyhra0bE0UxwEQgBaGLzsxav6Z8ghgCLcBGAsYHQ/s1600/python-coding.jpg" alt="Python A-Z™: Python For Data Science With Real Exercises!" width="750" height="422"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-best-python-libraries-for-data-science-analysis-visualization-and-machine-learning"&gt;
  &lt;/a&gt;
  10 Best Python libraries for Data Science, Analysis, Visualization and Machine learning
&lt;/h2&gt;

&lt;p&gt;Without any further ado, here is a basic introduction of some of the most popular Python libraries for Data Science and Machine learning. I have tried to keep the explanation short and sweet and pointed it out to the resource to learn more just for the sake of brevity and clarity.&lt;/p&gt;

&lt;p&gt;As I am also learning Python and Machine learning, will write in detail about each of these libraries in the future because you would need at least one post to explain them in a little bit of detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-tensorflow"&gt;
  &lt;/a&gt;
  1. TensorFlow
&lt;/h3&gt;

&lt;p&gt;This is one of the most popular machine learning library and there is a good chance that you might have already heard about it. You might know that &lt;a href="https://www.tensorflow.org/"&gt;TensorFlow&lt;/a&gt; is from Google and invented by their Brains team and used in the RankBrain algorithm which powers millions of search questions on Google's search engine.&lt;/p&gt;

&lt;p&gt;In general, it is a symbolic math library and is also used for machine learning applications such as neural networks. There are many applications of TensorFlow and a lot of stories you can find on the web like how a Japanese farmer used TensorFlow to filter Cucumber.&lt;/p&gt;

&lt;p&gt;If you are interested in learning TensorFlow then I suggest you start with &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fcomplete-guide-to-tensorflow-for-deep-learning-with-python%2F"&gt;&lt;strong&gt;The Complete Guide to TensorFlow for Deep Learning with Python&lt;/strong&gt;&lt;/a&gt;, it will not only teach you TensorFlow but also the basics of machine learning and How Neural Networks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fcomplete-guide-to-tensorflow-for-deep-learning-with-python%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TAOO4DkK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-qs9ggv4Q3Ak/W7iKza2MJzI/AAAAAAAAMWk/Qo9ph-3D2k8WBC-1cLttzM4AGyBLC5N9ACLcBGAs/w400-h225/Deep%252BLearning%252Bwith%252BKeras%252BPluralsight%252Bcourse.png" alt="Tensorflow best python library for Machine Learning" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In short, one of the &lt;a href="https://becominghuman.ai/top-10-courses-to-learn-tensorflow-for-machine-learning-in-2020-39a31e7cd84b"&gt;best courses to learn TensorFlow&lt;/a&gt;, but, if you need more choices, you can also take a look at my list of best TensorFlow courses for Machine learning programmers and Data Scientists.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-keras"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Keras&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;One of the main problems with creating machine learning and deep learning-based solutions is that Implementing them can be tedious to create and require you to write many lines of complex code. Keras is a library that makes it much easier for you to create these deep learning solutions.&lt;/p&gt;

&lt;p&gt;In a few lines of code, you can create a model that could require hundreds of lines of conventional code.&lt;/p&gt;

&lt;p&gt;If you want to learn more about Keras, I suggest you check out &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-tensorflow-2-and-keras-deep-learning-bootcamp%2F"&gt;Complete Tensorflow 2 and Keras Deep Learning Bootcamp&lt;/a&gt;&lt;/strong&gt; course by Jose Portilla on Udemy. This is the highest-rated course to learn Keras.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-tensorflow-2-and-keras-deep-learning-bootcamp%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iNogrpsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ggqbOyusg8o/W7iTuiBQ4kI/AAAAAAAAMX0/SzZzEHa3YcEuulIt03Kw5AHEi1lvrVyegCLcBGAs/s400/Deep%252BLearning%252Bwith%252BKeras%252BPluralsight%252Bcourse%252B2.jpg" alt="Top 8 Python Libraries for Data Science, Machine Learning, and Artificial Intelligence" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a great course by Jerry Kurata, a Solutions Architect at InStep Technologies, who is also an instructor of some of the popular machine learning courses on Pluralsight like &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Ftensorflow-getting-started"&gt;&lt;strong&gt;TensorFlow: Getting Started&lt;/strong&gt;&lt;/a&gt;, if you are just starting with machine learning, Jerry's courses can be a great guide. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-scikitlearn"&gt;
  &lt;/a&gt;
  3. Scikit-learn
&lt;/h3&gt;

&lt;p&gt;This is another popular Python library for machine learning. In fact, Scikit-learn is the primary library for machine learning. It has algorithms and modules for pre-processing, cross-validation, and other such purposes.&lt;/p&gt;

&lt;p&gt;Some of the algorithms deal with regression, decision trees, ensemble modeling, and non-supervised learning algorithms like clustering.&lt;/p&gt;

&lt;p&gt;If you want to learn Scikit-Learn in-depth, I suggest you enroll in &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fpython-for-data-science-and-machine-learning-bootcamp%2F"&gt;&lt;strong&gt;Python for Data Science and Machine Learning Bootcamp&lt;/strong&gt;&lt;/a&gt; course on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fpython-for-data-science-and-machine-learning-bootcamp%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMMQEfkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-cophU-kVFUw/W7iNwoSZZ_I/AAAAAAAAMXc/pLGasSZ6nR0b9EnzCkueXBbxAoof7UVEgCLcBGAs/s400/Python%252Bfor%252BData%252BScience%252Band%252BMachine%252BLearning%252BBootcamp%252B%252BUdemy.jpg" alt="Scikit learning best python library for data science" width="299" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is one of the most comprehensive course on Data Science and Machine Learning with Python and along with Scikit-learn also teach you other popular machine learning algorithms like &lt;a href="https://www.java67.com/2021/11/top-5-free-courses-to-learn-numpy-for.html"&gt;NumPy&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2021/11/top-5-free-pandas-courses-for-beginners.html"&gt;Pandas&lt;/a&gt;, Seaborn, Matplotlib, Plotly, Scikit-Learn, Machine Learning, Tensorflow, and more!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-numpy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. NumPy&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;NumPy is another wonderful Python library for machine learning and heavy computation. &lt;a href="http://www.numpy.org/"&gt;NumPy&lt;/a&gt; facilitates easy and efficient numeric computation. It has many other libraries built on top of it like Pandas.&lt;/p&gt;

&lt;p&gt;You should at least make sure to learn NumPy arrays, which is basic and has a lot of applications in machine learning, data science, and artificial intelligence-based programs.&lt;/p&gt;

&lt;p&gt;You can use the previous course (Data Science and Machine Learning Bootcamp) mentioned in the list to learn NumPy but if you are from a finance background and thinking to use NumPy, you can also take a look at &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fpython-for-finance-and-trading-algorithms%2F"&gt;&lt;strong&gt;Python for Financial Analysis and Algorithmic Trading&lt;/strong&gt;&lt;/a&gt; course on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2021/10/top-5-courses-to-learn-numpy-for-python.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siXfH442--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://2.bp.blogspot.com/-a7Du_1MbJMw/W7iMgCu3dmI/AAAAAAAAMXM/-UB-1R5nwo0Nj-FOJZY4d4IuHMY22edeACEwYBhgL/w400-h298/data%252Bstructure%252Band%252Balgorithm%252Bdeep%252Bdive%252Budemy%252Bcourse.png" alt="NumPy best python library for numerical calculation" width="397" height="298"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-scipy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. SciPy&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is a python library for scientific and technical computing. It will provide you with all the tools you need for scientific and technical computing.&lt;/p&gt;

&lt;p&gt;It has modules for optimization, linear algebra, integration, interpolation, special functions, FFT, signal and image processing, ODE solvers, and other tasks.&lt;/p&gt;

&lt;p&gt;There is a wonderful FREE course to learn SciPy with Python, &lt;strong&gt;&lt;a href="http://bit.ly/2CwoE3b"&gt;Deep Learning Prerequisites: The Numpy Stack in Python&lt;/a&gt;&lt;/strong&gt;. It's my favorite and more than 100K other developers have also enrolled in it. You can check this out before it converts to the paid course.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2CwoE3b"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ITmQck9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4.bp.blogspot.com/-qMkz7wxjHsI/W7iMh88r1CI/AAAAAAAAMXI/AcUd_IbKtLEVRYJ_WzcqY9AZ0Clkp5h7wCEwYBhgL/w640-h259/SciPy%252BPython%252BMachine%252Blearning%252Blibraries.jpg" alt="SciPy best python library for Scientific calculation" width="633" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need more choices, I suggest you take a look at my earlier post about the &lt;a href="https://becominghuman.ai/10-free-courses-to-learn-python-machine-learning-libraries-scikit-learn-numpy-pandas-keras-3c77ba1a6907?"&gt;top 5 machine learning courses for Python developers&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-matplotlib"&gt;
  &lt;/a&gt;
  6. Matplotlib
&lt;/h3&gt;

&lt;p&gt;If you need plotting then Matlotlib is one option. It provides a flexible plotting and visualization library, Matplotlib is powerful. However, it is cumbersome, so, you may go for Seaborn instead.&lt;/p&gt;

&lt;p&gt;If you want to learn Matplotlib in-depth then once again &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fpython-for-data-science-and-machine-learning-bootcamp%2F"&gt;&lt;strong&gt;Python for Data Science and Machine Learning Bootcamp&lt;/strong&gt;&lt;/a&gt; is a great course to start with&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.java67.com/2018/09/top-5-free-R-programming-courses-for-Data-Science-Machine-Learning-Programmers.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zHQWgbf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://2.bp.blogspot.com/-7etQyzdxcW8/W7iLpx1x49I/AAAAAAAAMW0/CaHdRdkYM2ksFeQJJ8UU_ARX4sxyIBJSgCEwYBhgL/w320-h240/Matplotlib%252BPython%252Bmachine%252Blearning%252Blibrary.png" alt="MetaPlotlib best python library for Data Visualization" width="320" height="240"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-pandas"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Pandas&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the Python libraries which is built on top of NumPy). It comes in handy with data structures and exploratory analysis. Another important feature it offers is DataFrame, a 2-dimensional data structure with columns of potentially different types.&lt;/p&gt;

&lt;p&gt;Pandas will be one of the most important libraries you will need all the time and that's why it's very important to learn Pandas well. If you want to learn Pandas in-depth then &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-analysis-with-pandas%2F"&gt;&lt;strong&gt;Data Analysis with Pandas and Python&lt;/strong&gt;&lt;/a&gt; is a great resource, to begin with.&lt;/p&gt;

&lt;p&gt;This course will teach you about DataFrame, Merging, Joining, and Concatenating, group by and multi-index, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://becominghuman.ai/5-best-courses-to-learn-pythons-pandas-libary-for-data-analysis-and-data-science-34b62abb0e96"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9WHZ2KMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://3.bp.blogspot.com/-UeuTJG3b2K4/W7iLnO9FUkI/AAAAAAAAMWs/cNWiCjHaDiIWOECKCVN4eR6t31nDRM6BwCEwYBhgL/s400/Data%252BAnalysis%252Bwith%252BPandas%252Band%252BPython%252BUdemy%252Bcourse.jpg" alt="Pandas best python library for deep learning" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#8seaborn"&gt;
  &lt;/a&gt;
  8.Seaborn
&lt;/h3&gt;

&lt;p&gt;Like Matplotlib, it's also a good library for plotting but with Seaborn, it is easier than ever to plot common data visualizations. &lt;/p&gt;

&lt;p&gt;It is built on top of Matplotlib and offers a more pleasant, high-level wrapper. You should learn effective data visualization.&lt;/p&gt;

&lt;p&gt;Once again, I suggest, &lt;strong&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fpython-for-data-science-and-machine-learning-bootcamp%2F"&gt;Python for Data Science and Machine Learning Bootcamp&lt;/a&gt;&lt;/strong&gt; to learn about the Seaborn library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fpython-for-data-science-and-machine-learning-bootcamp%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cUHMb68c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-IqNnSwlGd4k/W7iLoYSYH_I/AAAAAAAAMWw/Hpb_S4pHwbAIRdeoI3L_8N0URJpwCoBtQCEwYBhgL/w320-h301/Seaborn%252BPython%252Bdatascience%252Blibrary.png" alt="best Python library for data visualization" width="320" height="301"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#9-opencv"&gt;
  &lt;/a&gt;
  9. OpenCV
&lt;/h3&gt;

&lt;p&gt;This is another important library for Python developers for computer vision. If you don't know, Computer Vision is one of the most exciting fields in Machine Learning and AI. &lt;/p&gt;

&lt;p&gt;It has applications in many industries, such as self-driving cars, robotics, augmented reality, and much more and OpenCV is the best computer vision library. &lt;/p&gt;

&lt;p&gt;Although, you can use OpenCV with many programming languages like C++, its python version is beginner friendly and easy to use which makes it a great library to included in this list. &lt;/p&gt;

&lt;p&gt;If you want to learn Python and OpenCV for basic image processing and perform image classification and object detection in 2022 and need a course then I highly recommend you to join &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fintroduction-computer-vision-watson-opencv"&gt;&lt;strong&gt;Introduction to Computer Vision and Image Processing course&lt;/strong&gt;&lt;/a&gt; on Coursera. This is an hands-on course and will teach you Open CV with several labs and exercise.&lt;/p&gt;

&lt;p&gt;This course is also part of multiple Specializations or Professional Certificates programs and completing this course will count towards any of the following programs:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprofessional-certificates%2Fai-engineer"&gt;IBM AI Engineering Professional Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprofessional-certificates%2Fapplied-artifical-intelligence-ibm-watson-ai"&gt;IBM Applied AI Professional Certificate&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You don't need to have any prior experience on Machine Learning or Computer Vision to join this course. However, some knowledge of the Python programming language and high school math is necessary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fintroduction-computer-vision-watson-opencv"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBQE21fA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfagqrjbrt7efdcasr37.png" alt="best Introduction to Computer Vision and Image Processing | Coursera" width="880" height="443"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#10-pytorch"&gt;
  &lt;/a&gt;
  10. PyTorch
&lt;/h3&gt;

&lt;p&gt;This is another exciting and powerful Python library for data science and Machine learning and something which every data scientist should learn. &lt;/p&gt;

&lt;p&gt;If you don't know PyTorch is one of the best deep learning libraries developed by Facebook which can be used in deep learning applications like face recognition and self-driving cars, and so on.&lt;/p&gt;

&lt;p&gt;You can also use Pytorch to build machine learning models like NLP and computer vision, just to name a few. You can also use PyTorch to create deep neural networks. &lt;/p&gt;

&lt;p&gt;If you want to learn PyTorch in 2022 then I highly recommend you to join &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fdeep-neural-networks-with-pytorch"&gt;Deep Neural Networks with PyTorch&lt;/a&gt; course by Joseph Santarcangelo on Coursera. &lt;/p&gt;

&lt;p&gt;This course is also part of the &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprofessional-certificates%2Fai-engineer"&gt;IBM AI Engineering Professional Certificate&lt;/a&gt;  which is a great program for anyone who wants to become an AI engineer in 2022. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fdeep-neural-networks-with-pytorch"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UEkH84sl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pytorch.org/tutorials/_static/img/thumbnails/cropped/profiler.png" alt="Deep Neural Networks with PyTorch | Coursera" width="600" height="600"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;By the way, If you are planning to join multiple Coursera courses or specialization then consider taking &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fcourseraplus"&gt;&lt;strong&gt;Coursera Plus subscription&lt;/strong&gt;&lt;/a&gt; which provides you unlimited access to their most popular courses, specialization, professional certificate, and guided projects. It cost around $399/year but its complete worth of your money as you get unlimited certificates.&lt;/p&gt;

&lt;p&gt;That's all about some of the &lt;strong&gt;best Python libraries for Data Science, Machine Learning, and Artificial Intelligence&lt;/strong&gt;. Depending upon what exactly you are doing with machine learning and data science, you can choose these libraries to help you out. &lt;/p&gt;

&lt;p&gt;If you are starting afresh, I suggest you &lt;a href="https://medium.com/javarevisited/is-courseras-tensorflow-advanced-techniques-specialization-worth-it-review-de51ba2ee385"&gt;learn TensorFlow&lt;/a&gt; or &lt;a href="https://javarevisited.blogspot.com/2021/10/top-5-courses-to-learn-scikit-learn.html"&gt;Scikit-learn&lt;/a&gt;, two of the most popular and primary libraries for machine learning.&lt;/p&gt;

&lt;p&gt;Other useful &lt;strong&gt;Programming and Software Development&lt;/strong&gt; resources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2018/02/5-free-python-online-courses-for-beginners.html"&gt;5 Free courses to learn Python in 2021&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-free-data-science-online-courses-for-beginners-a5fe78c2cb7b"&gt;10 Free Data Science Courses for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/7-best-courses-to-learn-artificial-intelligence-in-2020-26d59d62f6fe"&gt;7 Best Artificial Intelligence Courses for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/5-best-computer-vision-courses-for-beginners-85f901a8f88a"&gt;My Favorite Courses to learn Computer Vision&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2021/01/10-tools-data-scientists-and-machine-learning-engineers.html#axzz6skoVdG6z"&gt;10 Essential tools for Data Science Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-free-machine-learning-courses-for-beginners-181f83b4c816"&gt;10 Free Machine Learning Courses for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://hackernoon.com/top-5-data-science-and-machine-learning-course-for-programmers-e724cfb9940a"&gt;Top 5 Data Science and Machine Learning courses&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://hackernoon.com/top-5-tensorflow-and-ml-courses-for-programmers-8b30111cad2c"&gt;Top 5 TensorFlow and Machine Learning Courses&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-react-js-and-redux-courses-to-learn-online.html"&gt;Top 5 Courses to Learn React JS and Redux Course&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://becominghuman.ai/top-5-free-courses-to-learn-r-programming-for-data-science-and-statistics-in-2020-305bf1c6f24e"&gt;5 Free courses to learn R Programming for Machine learning&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-best-r-programming-courses-for-data-science-and-statistics-8f84ebec4974"&gt;10 Best Courses to learn R Programming&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/06/top-10-courses-to-learn-javascript-in.html"&gt;Top 10 JavaScript Tutorials and Courses for Web Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-5-programming-language-for-data-science-and-machine-learning-badc2f8eff72"&gt;Top 5 Programming Language for Data Science&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://cloud.google.com/blog/products/gcp/how-a-japanese-cucumber-farmer-is-using-deep-learning-and-tensorflow"&gt;How a Japanese cucumber farmer is using deep learning and TensorFlow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-machine-learning-and-data-science-certifications-and-training-courses-for-beginners-and-a6308497b764"&gt;10 Best Machine Learning Courses to Join in 2021&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you find these &lt;em&gt;best Python libraries for machine learning, data science, and Artificial Intelligence&lt;/em&gt; useful then please share them with your friends and colleagues. If you have any questions or feedback then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are new to Data Science and Machine Learning and looking for free online courses to learn then you can also check out these &lt;strong&gt;&lt;a href="https://www.java67.com/2020/08/top-5-free-courses-to-learn-data-science-and-analysis.html"&gt;free Data Science and Machine Learning courses&lt;/a&gt;&lt;/strong&gt; to start your career in this lucrative field.&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>machinelarning</category>
      <category>programming</category>
    </item>
    <item>
      <title>Decode Bridge Pattern</title>
      <author>Gaurav</author>
      <pubDate>Sun, 02 Jan 2022 06:51:49 +0000</pubDate>
      <link>https://dev.to/gauravratnawat/decode-bridge-pattern-3a3p</link>
      <guid>https://dev.to/gauravratnawat/decode-bridge-pattern-3a3p</guid>
      <description>&lt;p&gt;Decouple an abstraction from its implementation so that the two can vary independently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When run-time binding of the implementation is required.&lt;/li&gt;
&lt;li&gt;To support a proliferation of classes resulting from a coupled interface and numerous implementations,&lt;/li&gt;
&lt;li&gt;To share an implementation among multiple objects and to map orthogonal class hierarchies.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#intent"&gt;
  &lt;/a&gt;
  Intent
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Decouple an abstraction from its implementation so that the two can vary independently.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1YGrTgjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shfcs0v1i6l0xxx0mlp6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1YGrTgjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shfcs0v1i6l0xxx0mlp6.png" alt="Image description" width="488" height="469"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;The Bridge pattern is an application of the old advice, "prefer composition over inheritance". It becomes handy when you must subclass different times in ways that are orthogonal with one another. Say you must implement a hierarchy of colored shapes. You wouldn't want to subclass Shape with Rectangle and Circle and then subclass Rectangle with RedRectangle, BlueRectangle and GreenRectangle and the same for Circle. You would prefer to say that each Shape has a Color and to implement a hierarchy of colors, and that is the Bridge Pattern.&lt;/p&gt;

&lt;p&gt;1 Design a color-oriented interface that is minimal, necessary, and sufficient. Its goal is to decouple the abstraction from the color. Define a derived class of that interface for each color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.dp.bridge;

public interface Color {

  void applyColor();

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2 Define a derived class of that interface for each color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.dp.bridge;

public class Red implements Color {

  public void applyColor() {

    System.out.println("Red");

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.dp.bridge;

public class Green implements Color {

  public void applyColor() {

    System.out.println("Green");

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3 Create the abstraction base class that "has a" color object and delegates the color-oriented functionality to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.dp.bridge;

public abstract class Shape {

  protected Color color;

  public Shape(Color c) {
    color = c;
  }

  public abstract void draw();

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4 Define specializations of the abstraction class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.dp.bridge;

public class Circle extends Shape {

  public Circle(Color color) {
    super(color);
  }

  public void draw() {
    System.out.print("Draw Circle in ");
    color.applyColor();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.dp.bridge;

public class Rectangle extends Shape {
  public Rectangle(Color color) {
      super(color);
  }

  public void draw() {
    System.out.print("Draw Rectangle in ");
    color.applyColor();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.dp.bridge;

public class Square extends Shape {

  public Square(Color color) {
      super(color);
  }

  public void draw() {
    System.out.print("Draw Square in ");
    color.applyColor();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5 The Client code. The Bridge Pattern allows one to mix and match without needing to create a rigid hierarchy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.dp.client;

import com.gaurav.dp.bridge.Circle;
import com.gaurav.dp.bridge.Green;
import com.gaurav.dp.bridge.Rectangle;
import com.gaurav.dp.bridge.Red;
import com.gaurav.dp.bridge.Shape;
import com.gaurav.dp.bridge.Square;

public class BridgeClient {

  public static void main(String[] args) {

    Shape[] shapes = { 
        new Circle(new Red()), 
        new Square(new Red()),
        new Rectangle(new Green()) 
        };

    for (Shape shape : shapes) {
      shape.draw();
    }

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[output]
Draw Circle in Red
Draw Square in Red
Draw Rectangle in Green
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Decoupling allows us to choose the implementations at runtime.&lt;/li&gt;
&lt;li&gt;Compile-time dependencies on the implementation are eliminated.&lt;/li&gt;
&lt;li&gt;Improved extensibility and flexibility.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The delegation from the Entities to the Behaviors can degrade performance.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#real-world-examples"&gt;
  &lt;/a&gt;
  Real World Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The display of different image formats on different operating systems is a good example of the Bridge pattern. You might have different image abstractions for both jpeg and png images. The image structure is the same across all operating systems, but the how it's viewed (the implementation) is different on each OS. This is the type of decoupling that the Bridge pattern allows.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#software-examples"&gt;
  &lt;/a&gt;
  Software Examples
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;UnifiedPOS or UPOS that provides vendor-neutral APIs for numerous Point Of Sale peripherals.&lt;/li&gt;
&lt;li&gt;OS specific Device Driver interfaces that define common standards for various devices.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>pattern</category>
      <category>java</category>
      <category>design</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Build a NextJS Blog with MDX and Tailwind.</title>
      <author>Shaan Alam</author>
      <pubDate>Sun, 02 Jan 2022 06:44:58 +0000</pubDate>
      <link>https://dev.to/shaan_alam/build-a-nextjs-blog-with-mdx-and-tailwind-1il1</link>
      <guid>https://dev.to/shaan_alam/build-a-nextjs-blog-with-mdx-and-tailwind-1il1</guid>
      <description>&lt;p&gt;Hello programmers, &lt;/p&gt;

&lt;p&gt;Do you want start your blog where you educate others, or may be you want a blog as a repository of all the information you’ve gathered over the years. Anyway, blogs can be a great source of information providers for others as well as yourself. It can really help you connect deep with the content you want to consume. Setting up a blog is easy, especially if you’re a programmer. You can create your own blog with &lt;strong&gt;Next.JS&lt;/strong&gt; and &lt;strong&gt;MDX.&lt;/strong&gt; In this article, I will show you exactly how to do that!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-we-going-to-build"&gt;
  &lt;/a&gt;
  What are we going to build?
&lt;/h2&gt;

&lt;p&gt;By the end of this article, we will have a blog site for ourselves, which is going to look like this. You can off course make it look more beautiful, but for the sake of tutorial, I made it look very simple.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---uBqnHSQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knali8ys7wcdh2rjvl5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---uBqnHSQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knali8ys7wcdh2rjvl5v.png" alt="Blog" width="880" height="614"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#what-do-we-need"&gt;
  &lt;/a&gt;
  What do we need?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A decent knowledge of Next.JS framework&lt;/li&gt;
&lt;li&gt;Dependencies - &lt;code&gt;path fs gray-matter next-mdx-remote&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Tailwind CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let’s Start!
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#create-a-next-project"&gt;
  &lt;/a&gt;
  Create a next project
&lt;/h2&gt;

&lt;p&gt;First of al, we’ll start by creating a next project&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn create next-app blog&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd blog&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install all the necessary dependencies.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add fs path gray-matter next-mdx-remote&lt;/code&gt; &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;fs&lt;/th&gt;
&lt;th&gt;Provides a way to work with files&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Provides a way to work with directories and paths.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gray-matter&lt;/td&gt;
&lt;td&gt;Parses the front-matter from a string or file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;next-mdx-remote&lt;/td&gt;
&lt;td&gt;To render your mdx content on the page&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-tailwind"&gt;
  &lt;/a&gt;
  Setting up Tailwind
&lt;/h2&gt;

&lt;p&gt;Run the following commands, in your terminal to install tailwind.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add tailwindcss postcss autoprefixer -D&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run this command to create a tailwind.config.js file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx tailwindcss init -p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Inside the tailwind.config.js, paste the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;   
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./pages/**/*.{js,ts,jsx,tsx}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/**/*.{js,ts,jsx,tsx}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="p"&gt;],&lt;/span&gt;  
&lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; 
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Include these in your &lt;strong&gt;styles/globals.css&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* globals.css */&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#homepage"&gt;
  &lt;/a&gt;
  Homepage
&lt;/h2&gt;

&lt;p&gt;In index.js file, create an &lt;strong&gt;async&lt;/strong&gt; function &lt;strong&gt;getStaticProps(). getStaticProps()&lt;/strong&gt; is used in data fetching and returning the result as a prop to the same component. Next.JS will render this page at build time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Read the pages/posts dir&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pages/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// Get only the mdx files&lt;/span&gt;
  &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mdx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Read each file and extract front matter&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mdWithData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pages/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontMatter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mdWithData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Return all the posts frontMatter and slug as props&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside &lt;strong&gt;getStaticProps&lt;/strong&gt; we will use the &lt;strong&gt;fs&lt;/strong&gt; and &lt;strong&gt;path&lt;/strong&gt; module to read the &lt;strong&gt;.mdx&lt;/strong&gt; stored inside the &lt;strong&gt;/pages/posts&lt;/strong&gt; directory. &lt;/p&gt;

&lt;p&gt;We will then filter the result to only get the MDX files and not the &lt;strong&gt;[slug.js]&lt;/strong&gt; file that we will create ahead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mdx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will then map through each file using the &lt;strong&gt;.map&lt;/strong&gt; array function and then read each individual file using the &lt;strong&gt;fs&lt;/strong&gt; and &lt;strong&gt;path&lt;/strong&gt; module and extract the front matter of the file using the &lt;strong&gt;matter()&lt;/strong&gt; function (imported from gray-matter) and store the front matter along with slug of every file in the posts variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// import matter from 'gray-matter';&lt;/span&gt;

&lt;span class="c1"&gt;// Read each file and extract front matter&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// read file&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mdWithData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pages/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// extract front matter&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontMatter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mdWithData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;posts&lt;/code&gt; variable will look somethings like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// frontMatter object extracted from the mdx file&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At last, we will map through each post (inside the props) and render it in the UI. We will also use the &lt;code&gt;Link&lt;/code&gt; component from next to create a link to each post.&lt;/p&gt;

&lt;p&gt;The final index.js file will look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray-matter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PostCard&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/PostCard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/Layout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container w-[80%] md:w-[60%] mx-auto"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-blue-700 text-3xl font-bold my-12"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My Blog 📙&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"posts md:grid md:grid-cols-3 gap-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PostCard&lt;/span&gt; &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Read the pages/posts dir&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pages/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// Get only the mdx files&lt;/span&gt;
  &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mdx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Read each file and extract front matter&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mdWithData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pages/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontMatter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mdWithData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Return all the posts frontMatter and slug as props&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#postcard-component"&gt;
  &lt;/a&gt;
  PostCard Component
&lt;/h2&gt;

&lt;p&gt;Create a component &lt;strong&gt;components/PostCard.js.&lt;/strong&gt; We will use this component to return card for each post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"rounded-md w-72 border transition-all hover:text-blue-700 hover:shadow-lg hover-scale:105 cursor-pointer"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cover_image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Cover Image"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mt-2 p-2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-semibold text-xl"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostCard&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#post-page"&gt;
  &lt;/a&gt;
  Post page
&lt;/h2&gt;

&lt;p&gt;Create a &lt;strong&gt;/pages/posts/[slug].js&lt;/strong&gt; page to render each post separately on a different route.&lt;/p&gt;

&lt;p&gt;We will use the &lt;strong&gt;getStaticPaths&lt;/strong&gt; async function to generate separate routes according to the slug for each post at the build time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Read the files inside the pages/posts dir&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pages/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// Generate path for each file&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.mdx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will the &lt;strong&gt;getStaticProps&lt;/strong&gt; once again to read files and extract front matter as well as the content from it using the gray-matter module. The content of the mdx files need to be serailized in order to render it using the next-mdx-remote module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// read each file&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pages/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.mdx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Extract front matter&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mdxSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;mdxSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We wil then render the mdx source recieved inside the props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/posts/[slug.js]&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray-matter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next-mdx-remote/serialize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MDXRemote&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next-mdx-remote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../styles/Post.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mdxSource&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-semibold my-8 text-3xl text-blue-700"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MDXRemote&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mdxSource&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#styling-post-page"&gt;
  &lt;/a&gt;
  Styling Post page
&lt;/h2&gt;

&lt;p&gt;We will also add some basic styling for the post page using tailwind directives. Create a &lt;strong&gt;styles/Post.module.css&lt;/strong&gt; file and include these styles for a better look.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;styles&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;Post&lt;/span&gt;&lt;span class="nc"&gt;.module.css&lt;/span&gt;

&lt;span class="nc"&gt;.post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;container&lt;/span&gt; &lt;span class="err"&gt;w-[90%]&lt;/span&gt; &lt;span class="py"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;w-&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;mx-auto&lt;/span&gt; &lt;span class="n"&gt;my-12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.post&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;leading-7&lt;/span&gt; &lt;span class="err"&gt;my-4;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.post&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;my-4&lt;/span&gt; &lt;span class="err"&gt;w-full;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus-syntax-highlighting"&gt;
  &lt;/a&gt;
  Bonus - Syntax Highlighting! 🎉
&lt;/h2&gt;

&lt;p&gt;If you want to see, how to add syntax highlighting for your code elements in the mdx files, you can checkout my full video tutorial I did on my YouTube channel &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c4ge3tgGZuw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;p&gt;Twitter - &lt;a href="https://twitter.com/shaancodes"&gt;shaancodes&lt;/a&gt;&lt;br&gt;
Github - &lt;a href="https://github.com/shaan-alam"&gt;shaan-alam&lt;/a&gt;&lt;br&gt;
YouTube - &lt;a href="https://www.youtube.com/channel/UC9eR4oVH9IWR8SVvrw61Cog"&gt;shaancodes&lt;/a&gt;&lt;br&gt;
Instgram - &lt;a href="https://instagram.com/shaancodes"&gt;shaancodes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Advanced Git Concepts You Should Know</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 02 Jan 2022 06:34:05 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/advanced-git-concepts-you-should-know-nle</link>
      <guid>https://dev.to/ruppysuppy/advanced-git-concepts-you-should-know-nle</guid>
      <description>&lt;p&gt;Have you gotten accustomed to the basics of &lt;code&gt;git&lt;/code&gt;, but the advanced concepts make you &lt;em&gt;scratch your head&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6RJ3eDks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eboh3yha9sgh0xi2u79f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6RJ3eDks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eboh3yha9sgh0xi2u79f.gif" alt="head scratch" width="426" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article got you covered, not only will it &lt;em&gt;introduce you to the advanced &lt;code&gt;git&lt;/code&gt; concepts&lt;/em&gt;, but also &lt;em&gt;show you how to use them in a real-world scenario&lt;/em&gt;! Let's dive in.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stash"&gt;
  &lt;/a&gt;
  Stash
&lt;/h1&gt;

&lt;p&gt;Let's first check the definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Git stash is a built-in command with the distributed version control tool in Git that locally stores all the most recent changes in a workspace and resets the state of the workspace to the prior commit state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;stash&lt;/strong&gt; can be thought of as a &lt;em&gt;temporary storage&lt;/em&gt; for the &lt;em&gt;changes you made, but did not &lt;strong&gt;commit&lt;/strong&gt;&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;The real-world use case for this feature would be when you are &lt;em&gt;not done working on the changes&lt;/em&gt;, but &lt;em&gt;need to pull the updates from the remote repository&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To use &lt;strong&gt;stash&lt;/strong&gt;, you need to &lt;em&gt;add the files to the &lt;strong&gt;staging area&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and push it to the &lt;strong&gt;stash&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git stash push

     OR

git stash push &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;stash message&amp;gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get back the changes you made, use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git stash apply

     OR

git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference between &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; is &lt;code&gt;pop&lt;/code&gt; applies the changes in the &lt;strong&gt;stash&lt;/strong&gt; and removes it from the &lt;strong&gt;stash&lt;/strong&gt; too, but &lt;code&gt;apply&lt;/code&gt; keeps the changes in the &lt;strong&gt;stash&lt;/strong&gt; even after applying it.&lt;/p&gt;

&lt;p&gt;To view the items in the &lt;strong&gt;stash&lt;/strong&gt; use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jW3_g57p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjk1jhlh1aj6wc84ditj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jW3_g57p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjk1jhlh1aj6wc84ditj.jpg" alt="Stash" width="487" height="67"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have multiple &lt;strong&gt;stashed&lt;/strong&gt; changes, you can use the index to select the one you need&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash apply stash@{&amp;lt;n&amp;gt;}

     OR

git stash apply &amp;lt;n&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#get-back-deleted-commits"&gt;
  &lt;/a&gt;
  Get Back Deleted Commits
&lt;/h1&gt;

&lt;p&gt;Ever used the &lt;code&gt;reset&lt;/code&gt; command with the &lt;code&gt;--hard&lt;/code&gt; flag? If you have, it's the right time to freak out, as it &lt;em&gt;completely removes the number of commits specified&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uhbURIhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10v9u3ivu87p8supv4vn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uhbURIhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10v9u3ivu87p8supv4vn.gif" alt="freak out" width="220" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't panic, &lt;code&gt;reflog&lt;/code&gt; got you covered! To view the changes, you recently made, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reflog show HEAD

     OR

git reflog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now view the changes you made recently.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ne2YPJDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwy9hugh885lirz2ttt4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ne2YPJDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwy9hugh885lirz2ttt4.PNG" alt="find commit" width="435" height="89"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can directly get back the commit using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --hard &amp;lt;commit hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you have any &lt;em&gt;local modifications&lt;/em&gt;, &lt;em&gt;the command will destroy it&lt;/em&gt; as well, so it would be wise to use the &lt;strong&gt;stash&lt;/strong&gt; before &lt;strong&gt;resetting&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cherry-pick-commits"&gt;
  &lt;/a&gt;
  Cherry Pick Commits
&lt;/h1&gt;

&lt;p&gt;Need a feature introduced in a &lt;strong&gt;commit&lt;/strong&gt; in another branch, but the branch is not ready to be &lt;strong&gt;merged&lt;/strong&gt; yet? No, you don't have to take the &lt;em&gt;500-year long nap&lt;/em&gt; till the branch is merged!&lt;/p&gt;

&lt;p&gt;You can just &lt;strong&gt;Cherry Pick&lt;/strong&gt; the commits you require&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git cherry-pick -x &amp;lt;commit hash&amp;gt;

     OR

git cherry-pick &amp;lt;commit hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's highly suggested that you do use &lt;code&gt;-x&lt;/code&gt; flag as it will generate a &lt;em&gt;standardized commit message&lt;/em&gt;, informing users where it was &lt;code&gt;cherry-picked&lt;/code&gt; from.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rebase"&gt;
  &lt;/a&gt;
  Rebase
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Rebasing&lt;/strong&gt; is the process of &lt;em&gt;moving or combining a sequence of commits to a new base commit&lt;/em&gt;. The primary reason you would like to use &lt;code&gt;rebase&lt;/code&gt; in your project is to &lt;em&gt;maintain a linear project history&lt;/em&gt;, making it much easier to view the logs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5R-bGv0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqtnc6n0x5ji8vmqo1b3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5R-bGv0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqtnc6n0x5ji8vmqo1b3.png" alt="Git Rebase" width="663" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thus &lt;code&gt;rebase&lt;/code&gt; allows you to work off the &lt;em&gt;latest changes on any branch, even though you started working before the changes were introduced&lt;/em&gt;. It also helps you in the case of &lt;strong&gt;Fast Forward Merge&lt;/strong&gt; discussed in the &lt;strong&gt;Merge Strategies&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;To rebase, use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase &amp;lt;source branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thus to &lt;em&gt;recreate the example in the image&lt;/em&gt;, you would move to the &lt;strong&gt;feature&lt;/strong&gt; branch and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#caution"&gt;
  &lt;/a&gt;
  Caution
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Rebasing creates new commits while rewriting the history.&lt;/strong&gt; Thus you should &lt;strong&gt;avoid rebasing once the branch is pushed to a public repository&lt;/strong&gt; as it might cause issues where &lt;em&gt;the old commits with new ones&lt;/em&gt; and &lt;em&gt;it would look like that part of your project history abruptly vanished&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#merge-strategies"&gt;
  &lt;/a&gt;
  Merge Strategies
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;"Why bother learning about the &lt;strong&gt;Merge Strategies&lt;/strong&gt;?"&lt;/em&gt; you may ask. My answer would be, I wanted to add 5 concepts instead of 4, so here we are 😛. PS: Don't forget to drop a ❤️ for honesty.&lt;/p&gt;

&lt;p&gt;This is one of the &lt;strong&gt;good-to-know&lt;/strong&gt; concepts, with &lt;em&gt;little repercussion if you don't know it&lt;/em&gt;. It can help you a bit while &lt;em&gt;navigating the commit logs&lt;/em&gt; though, where otherwise you might end up &lt;em&gt;wondering how the merge took place without commits&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are several &lt;strong&gt;Merge Strategies&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fast Forward&lt;/li&gt;
&lt;li&gt;Recursive&lt;/li&gt;
&lt;li&gt;Ours&lt;/li&gt;
&lt;li&gt;Octopus&lt;/li&gt;
&lt;li&gt;Resolve&lt;/li&gt;
&lt;li&gt;Subtree&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The commonly used strategies are &lt;strong&gt;Fast Forward&lt;/strong&gt; and &lt;strong&gt;Recursive&lt;/strong&gt;, which we will be looking at.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fast-forward-merge"&gt;
  &lt;/a&gt;
  Fast Forward Merge
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Fast Forward Merge&lt;/strong&gt; takes place when the &lt;em&gt;destination branch of the merge does not contain any new commits&lt;/em&gt;. In such a case, only the &lt;strong&gt;pointer&lt;/strong&gt; of the branch is &lt;em&gt;moved forward to the required commit&lt;/em&gt;. &lt;strong&gt;It does not add any new commits!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQp-Oud4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kk5iw6uaxiku1pypwq0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQp-Oud4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kk5iw6uaxiku1pypwq0e.png" alt="Fast Forward Merge" width="774" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example of merging &lt;strong&gt;feature&lt;/strong&gt; on &lt;strong&gt;master&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recursive-merge"&gt;
  &lt;/a&gt;
  Recursive Merge
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Recursive Merge&lt;/strong&gt; takes place where both the &lt;em&gt;source &amp;amp; destination branches of the merge contain new commits&lt;/em&gt;. In such a case, a &lt;em&gt;new commit is introduced in the destination branch&lt;/em&gt;, merging all changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_4pLQ-yV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhgt19t8xnp6ot90nq4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_4pLQ-yV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhgt19t8xnp6ot90nq4q.png" alt="Recursive Merge" width="784" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example of merging &lt;strong&gt;master&lt;/strong&gt; on &lt;strong&gt;feature&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also force &lt;strong&gt;Recursive Merge&lt;/strong&gt; using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge --no-ff
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;Starting the year with advanced &lt;code&gt;git&lt;/code&gt; skills in your arsenal, you are ready to take on the world!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Developing!&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Need a &lt;strong&gt;Top Rated Front-End Development Freelancer&lt;/strong&gt; to chop away your development woes? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Personal Website&lt;/a&gt; and &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to connect? Reach out to me on &lt;a href="https://www.linkedin.com/in/tapajyoti-bose/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a &lt;strong&gt;Digital Nomad&lt;/strong&gt; in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for &lt;strong&gt;Weekly new Tidbits&lt;/strong&gt; on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Login Without Email and Password | JavaScript</title>
      <author>Rajesh Joshi</author>
      <pubDate>Sun, 02 Jan 2022 05:43:04 +0000</pubDate>
      <link>https://dev.to/rajeshj3/login-without-email-and-password-javascript-38le</link>
      <guid>https://dev.to/rajeshj3/login-without-email-and-password-javascript-38le</guid>
      <description>&lt;p&gt;Whether a project is small, medium, or huge, it's most common necessity is &lt;code&gt;authentication&lt;/code&gt;. In few cases, it is just required to not to ask user for credentials, but just to log user in for proper authentication.&lt;/p&gt;

&lt;p&gt;The best way to solve this problem is to use Firebase's Anonymous Authentication.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Here's the YouTube video of me, demonstrate the same&lt;/em&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Wwl2bsvGeyE"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  INDEX
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create React Project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;:&lt;/em&gt; I'll recommend you, to use the &lt;code&gt;yarn&lt;/code&gt;, but it is completely up to you.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-1-create-react-app"&gt;
  &lt;/a&gt;
  &lt;em&gt;Step 1.&lt;/em&gt; Create React App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQtQCT1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cmefwuu2xqzgnsfl57n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQtQCT1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cmefwuu2xqzgnsfl57n.png" alt="Create React App" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-add-firebase"&gt;
  &lt;/a&gt;
  &lt;em&gt;Step 2.&lt;/em&gt; Add firebase
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zE1KalZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkch2ybyq7xogdcdn4k6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zE1KalZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkch2ybyq7xogdcdn4k6.png" alt="yarn add firebase" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It'll be reflected in &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ubzGrdfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0b93ckkmncg9huqrh4v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ubzGrdfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0b93ckkmncg9huqrh4v.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-create-raw-firebaseconfigjson-endraw-file"&gt;
  &lt;/a&gt;
  &lt;em&gt;Step 3.&lt;/em&gt; Create &lt;code&gt;firebaseConfig.json&lt;/code&gt; file
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r0h5q-QI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0szvxu3bxpoqzkpm5fh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r0h5q-QI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0szvxu3bxpoqzkpm5fh.png" alt="Create firebaseConfig.json" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-write-raw-appjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;em&gt;Step 4.&lt;/em&gt; Write &lt;code&gt;app.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1R-Jx0Gp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iigs789n5gij1qpl5po1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1R-Jx0Gp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iigs789n5gij1qpl5po1.png" alt="Write  raw `app.js` endraw " width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, create Flexbox&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X2CAB82D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxua6ohc4nn8nvmeg2cn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X2CAB82D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxua6ohc4nn8nvmeg2cn.png" alt="create Flexbox" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add HTML form&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jTyEVHRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcjrdd34efjnaysdptpx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jTyEVHRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcjrdd34efjnaysdptpx.png" alt="form" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;define &lt;code&gt;onSubmit&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u7AmswQY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4keu9l6w9o8d4myu2h1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u7AmswQY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4keu9l6w9o8d4myu2h1.png" alt="onSubmit" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Import further modules&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4nR5zPbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93en4fvhwy3o05lsuip7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4nR5zPbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93en4fvhwy3o05lsuip7.png" alt="imports" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, extend &lt;code&gt;handleSubmit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j1dIdsSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq3vx9y8cxcgm8w65qpb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j1dIdsSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq3vx9y8cxcgm8w65qpb.png" alt="extend handleSubmit" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Write, responses&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_yB4stZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiigbjrd6pxg0kxomlb9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_yB4stZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiigbjrd6pxg0kxomlb9.png" alt="responses" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-run-the-server"&gt;
  &lt;/a&gt;
  &lt;em&gt;Step 5.&lt;/em&gt; Run the server
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4u3E62AA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsh6vtywpa146bpsc7u6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4u3E62AA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsh6vtywpa146bpsc7u6.png" alt="Run the server" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;click &lt;code&gt;Login&lt;/code&gt; button and Open developer console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JElPEvwv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dc9q72j3smncsef2hs1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JElPEvwv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dc9q72j3smncsef2hs1f.png" alt="Login" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;Applications &amp;gt; IndexedDB&lt;/code&gt; you'll see user credentials saved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6iObIf5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cailm0m2wge26224o8gx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6iObIf5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cailm0m2wge26224o8gx.png" alt="IndexedDB" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-have-a-look-in-firebase-console"&gt;
  &lt;/a&gt;
  &lt;em&gt;Step 6.&lt;/em&gt; Have a look in Firebase Console
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y52riMsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gjxgxng1c2v82tr0gu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y52riMsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gjxgxng1c2v82tr0gu6.png" alt="Firebase Console" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Hurray! You just learned how to set up API end-points for Login &lt;code&gt;Without Email and Password&lt;/code&gt; in &lt;code&gt;JavaScript&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;I hope, you guys liked this quick tutorial. If so, then please don't forget to drop a Like ❤️&lt;/p&gt;

&lt;p&gt;And also, help me reach &lt;strong&gt;1k Subscribers&lt;/strong&gt; 🤩, on my &lt;a href="https://www.youtube.com/channel/UCCO4jIqmQVFDmVeeaAO5obA"&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding! 😃💻&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Basic Git cheat sheet (yet another)</title>
      <author>Gourav Singh Rawat</author>
      <pubDate>Sun, 02 Jan 2022 04:53:18 +0000</pubDate>
      <link>https://dev.to/seek4samurai/basic-git-cheat-sheet-yet-another-3551</link>
      <guid>https://dev.to/seek4samurai/basic-git-cheat-sheet-yet-another-3551</guid>
      <description>&lt;h2&gt;
  &lt;a href="#yet-another-git-cheat-sheet"&gt;
  &lt;/a&gt;
  Yet another Git cheat sheet.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This sheet only contains the basics of git like committing, viewing, cloning, removing, etc&lt;/strong&gt;&lt;br&gt;
Well to guys who gonna comment down, look at this duuuude...posting another cheat sheet, just move on bro.&lt;br&gt;
Anyways I hope you'll like this cheat sheet &amp;lt;3&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-snapshots"&gt;
  &lt;/a&gt;
  Creating Snapshots
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Initializing a Repository&lt;/strong&gt;&lt;br&gt;
Initializing - git init&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Staging Changes/Files&lt;/strong&gt;&lt;br&gt;
Stages a single file - git add file1.js &lt;br&gt;
Stages multiple files - git add file1.js file2.js&lt;br&gt;
Stages with a pattern - git add *.js&lt;br&gt;
Stages the current directory and all its content - git add .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unstaging Changes/Files&lt;/strong&gt;&lt;br&gt;
Copies the last version from repo - git restore --staged file.js&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Viewing Status&lt;/strong&gt;&lt;br&gt;
Full status - git status&lt;br&gt;
Short status - git status -s&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Viewing the staged/unstaged changes&lt;/strong&gt;&lt;br&gt;
Shows unstaged changes - git diff&lt;br&gt;
Shows staged changes - git diff --staged&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skipping the staging area&lt;/strong&gt;&lt;br&gt;
git commit -am “Message”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Removing files&lt;/strong&gt;&lt;br&gt;
Removes from working directory and staging area - git rm file1.js&lt;br&gt;
Removes from staging area only - git rm --cached file1.js&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Renaming or moving files&lt;/strong&gt;&lt;br&gt;
git mv file1.js file1.txt (first old name, new name)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browsing-history"&gt;
  &lt;/a&gt;
  Browsing History
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Viewing history&lt;/strong&gt;&lt;br&gt;
Full history - git log &lt;br&gt;
Full history from oldest to newest - git log --reverse&lt;br&gt;
Shows the list of last modified files - git log --stat&lt;br&gt;
Shows the actual changes - git log --patch&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Viewing the history of a file&lt;/strong&gt;&lt;br&gt;
Shows the commits that touched file.txt - git log file.txt &lt;br&gt;
Shows statistics (the number of changes) for file.txt - git log --stat file.txt&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Filtering history&lt;/strong&gt;&lt;br&gt;
Show last 3 changes - git log -3&lt;br&gt;
Filter by author - git log --author="Gourav"&lt;br&gt;
Filter by date - git log --before="2022-01-20"&lt;br&gt;
Filter by files modified (commit in which there are changes in file.txt) - git log file.txt&lt;br&gt;
Show Commits with “Fixed” in their message - git log --grep=“Fixed”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#branching-amp-merging"&gt;
  &lt;/a&gt;
  Branching &amp;amp; Merging
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Managing branches&lt;/strong&gt;&lt;br&gt;
Creates a new branch called alpha - git branch alpha&lt;br&gt;
Switching branch to alpha - git switch alpha&lt;br&gt;
Deleting branch alpha - git branch -d alpha&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Merging&lt;/strong&gt;&lt;br&gt;
Merges the alpha branch into the current branch - git merge alpha&lt;br&gt;
Aborting merge - git merge --abort&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Viewing the merged branches&lt;/strong&gt;&lt;br&gt;
Shows the merged branches - git branch --merged &lt;br&gt;
Shows the unmerged branches - git branch --no-merged &lt;/p&gt;

&lt;p&gt;If you think there's something wrong or I missed related to these types, please comment below. Thanks.&lt;br&gt;
&lt;em&gt;Hope you found this helpful &amp;lt;3&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>git</category>
    </item>
    <item>
      <title>Google Solution Challenge 2022 Announced 🤩</title>
      <author>YONKEU KWEYA STEVE JUNIOR</author>
      <pubDate>Sun, 02 Jan 2022 04:52:19 +0000</pubDate>
      <link>https://dev.to/yokwejuste/google-solution-challenge-2022-announced-3l28</link>
      <guid>https://dev.to/yokwejuste/google-solution-challenge-2022-announced-3l28</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-the-google-solution-challenge-all-about"&gt;
  &lt;/a&gt;
  What is The Google Solution Challenge all About.
&lt;/h1&gt;

&lt;p&gt;Annually, each January, the Google team enters a partnership with the &lt;a href="https://www.un.org/"&gt;United Nations&lt;/a&gt; aimed at solving some worldly faced problems all known as sustainable development goals using or with the help of one or more &lt;a href="https://developers.google.com/products"&gt;Google technologies&lt;/a&gt;, they are altogether 13 in number with some cool prices without forgetting about the recent Chrome books.&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2bRY-wqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641091466167/pLotNusCV.png" alt="image.png" width="880" height="495"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
Each sustainable development goal is to be understood by the candidate and understood by the candidate and a solution to the problem is being built, depending on the candidate's preference it can be a robot, software, website, or even a mobile app.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
While speaking about an app, I just remember something amazing that happened last year and made Google itself surprised, let's dive into the epic events of the solution challenge of 2021.
&lt;h1&gt;
  &lt;a href="#something-epic-from-last-year-session"&gt;
  &lt;/a&gt;
  Something Epic from last year session
&lt;/h1&gt;

&lt;p&gt;Teams upon teams have been participating in this challenge but last year we got amazed by &lt;strong&gt;Team Flow&lt;/strong&gt; from Cameroon, all students from the &lt;a href="https://uniba.com"&gt;University Of Bamenda&lt;/a&gt; in Cameroon developed a mobile application to help out the Bambili community facing serious portable water sources absence during the dry season. And by so doing gets an honorable mention from the google team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presentation-of-the-flow-app"&gt;
  &lt;/a&gt;
  Presentation of the Flow app💧
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-flow-just-go-with-the-flow"&gt;
  &lt;/a&gt;
  The Flow- Just go with the flow💧
&lt;/h3&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVUyHfPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093567954/ScOqYoaqh.png" alt="image.png" width="880" height="495"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
From a team of 4 young talented and incredible youths, TeamFluid, the flow app came about as a result of the persistent water crises in Bambili, Cameroon. Due to the high influx of students into this locality, water shortages have been the order of the day.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
The Flow app contains a map where different portable water sources in Bambili are identified as green and red points, depending on the condition of the tap(flowing or not) based on votes by the student community.
&lt;h3&gt;
  &lt;a href="#good-to-know"&gt;
  &lt;/a&gt;
  Good to know
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#key-features-of-flow"&gt;
  &lt;/a&gt;
  Key Features of Flow
&lt;/h4&gt;

&lt;p&gt;Locate all clean water sources around you by radius.&lt;br&gt;
Show approximate distance from user to a water source.&lt;br&gt;
Get directions to the water source.&lt;br&gt;
Save your favorite water sources.&lt;br&gt;
Indicate if water is flowing at a water source or not.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
It's available on &lt;a href="https://play.google.com/store/apps/details?id=com.team_fluid.flow"&gt;PlayStore💧&lt;/a&gt;, download, and get a try.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/Developer-Student-Clubs-UBa/Flow"&gt;Flow is an open-source project on Github&lt;/a&gt;, go make a fork and pull request, I guess they will be happy to hear from you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#solution-challenge-2022"&gt;
  &lt;/a&gt;
  Solution Challenge 2022
&lt;/h1&gt;

&lt;p&gt;Back to the session of this year, a global kickoff event has been scheduled for January 19, 2022, when it will be exactly 2:00 pm GMT. I guess will be something sweet is to happen by that day.&lt;/p&gt;

&lt;p&gt;The Google developers team made a tweet recently about that:&lt;br&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;📣 Attention students! RSVP for the Solution Challenge 2022 kickoff event on January 19! → &lt;a href="https://t.co/DAfJUXcMlp"&gt;&lt;/a&gt;&lt;a href="https://t.co/DAfJUXcMlp"&gt;https://t.co/DAfJUXcMlp&lt;/a&gt;&lt;br&gt;&lt;br&gt;New to the Solution Challenge? Each year, university students are invited to support the &lt;a href="https://twitter.com/UN?ref_src=twsrc%5Etfw"&gt;@UN&lt;/a&gt;’s Sustainable Development Goals using &lt;a href="https://twitter.com/Google?ref_src=twsrc%5Etfw"&gt;@Google&lt;/a&gt; tech.&lt;br&gt;&lt;br&gt;🎉 See you there! &lt;a href="https://t.co/5KvkRIstVl"&gt;pic.twitter.com/5KvkRIstVl&lt;/a&gt;&lt;/p&gt;— Google Developers (@googledevs) &lt;a href="https://twitter.com/googledevs/status/1476251707038437384?ref_src=twsrc%5Etfw"&gt;December 29, 2021&lt;/a&gt;
&lt;/blockquote&gt; 
&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Get more information about the &lt;a href="https://developers.google.com/community/gdsc-solution-challenge"&gt;Google Solution Challenge&lt;/a&gt; and have a try this year to propose a solution to help out your own community with.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>opensource</category>
      <category>flow</category>
    </item>
    <item>
      <title>Top 5 Most Popular Backend Framework for 2022</title>
      <author>virender</author>
      <pubDate>Sun, 02 Jan 2022 04:27:49 +0000</pubDate>
      <link>https://dev.to/virendebro/top-5-most-popular-backend-framework-for-2022-4g6e</link>
      <guid>https://dev.to/virendebro/top-5-most-popular-backend-framework-for-2022-4g6e</guid>
      <description>&lt;p&gt;&lt;strong&gt;Top 5 Most Popular Backend Framework for 2022&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this blog i am going to tell you Top 5 Most Popular Backend Framework for 2022. So Lets start this article:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Laravel&lt;/li&gt;
&lt;li&gt;Express.js&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Ruby on Rails&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can read the whole blog here👇&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2022/01/top-5-most-popular-backend-framework.html"&gt;Click Here&lt;/a&gt; to see this post in detailed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thankyou&lt;/em&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>django</category>
      <category>ruby</category>
      <category>javascript</category>
    </item>
    <item>
      <title>No way did Github Copilot just Rickroll me!</title>
      <author>Virej Dasani</author>
      <pubDate>Sun, 02 Jan 2022 04:22:07 +0000</pubDate>
      <link>https://dev.to/virejdasani/no-way-did-github-copilot-just-rickroll-me-4g02</link>
      <guid>https://dev.to/virejdasani/no-way-did-github-copilot-just-rickroll-me-4g02</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EF6laCaSQfo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Please subscribe for more &amp;lt;3&lt;/p&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>python</category>
    </item>
    <item>
      <title>3 Tricks on VS Code</title>
      <author>Marcos RJJunior</author>
      <pubDate>Sun, 02 Jan 2022 04:21:48 +0000</pubDate>
      <link>https://dev.to/marcosrjjunior/3-tricks-on-vs-code-36d0</link>
      <guid>https://dev.to/marcosrjjunior/3-tricks-on-vs-code-36d0</guid>
      <description>&lt;p&gt;I've been using the first one since the last update.&lt;/p&gt;

&lt;p&gt;The options are very minimal, but really helpful !! let me know how do you feel using them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enabling-bracket-pair-colorization"&gt;
  &lt;/a&gt;
  Enabling bracket pair colorization
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.bracketPairColorization.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1xcHQ-LG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://marcosrjjunior.com/_next/image%3Furl%3D%252Fimages%252Fposts%252F3-tricks-on-vscode%252Fpair-colorization.png%26w%3D1080%26q%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1xcHQ-LG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://marcosrjjunior.com/_next/image%3Furl%3D%252Fimages%252Fposts%252F3-tricks-on-vscode%252Fpair-colorization.png%26w%3D1080%26q%3D100" alt="bracket pair colorization" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enabling-auto-complete-your-sentence"&gt;
  &lt;/a&gt;
  Enabling Auto complete your sentence
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.suggest.preview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xscf-T4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://marcosrjjunior.com/_next/image%3Furl%3D%252Fimages%252Fposts%252F3-tricks-on-vscode%252Fautocomplete.png%26w%3D1080%26q%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xscf-T4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://marcosrjjunior.com/_next/image%3Furl%3D%252Fimages%252Fposts%252F3-tricks-on-vscode%252Fautocomplete.png%26w%3D1080%26q%3D100" alt="auto complete sentence" width="880" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sorting-code"&gt;
  &lt;/a&gt;
  Sorting code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"shift+alt+s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"editor.action.sortLinesAscending"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-multiple-actions-using-macros"&gt;
  &lt;/a&gt;
  Running multiple actions using macros
&lt;/h2&gt;

&lt;p&gt;Because this is still not native feature, I'm using the macros extension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"shift+alt+f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"macros.fixDocumentAndSort"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"when"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"editorHasDocumentFormattingProvider &amp;amp;&amp;amp; editorTextFocus &amp;amp;&amp;amp; !editorReadonly &amp;amp;&amp;amp; !inCompositeEditor"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"macros"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslintFixAndFormatDocument"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"eslint.executeAutofix"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"editor.action.formatDocument"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this binding, vscode is performing two actions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;formatting the document&lt;/li&gt;
&lt;li&gt;fixing eslint issues.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vscode</category>
      <category>vscodesettings</category>
      <category>vscodekeybindings</category>
    </item>
    <item>
      <title>Implementing a theme switcher using javascript</title>
      <author>Marcos RJJunior</author>
      <pubDate>Sun, 02 Jan 2022 04:06:47 +0000</pubDate>
      <link>https://dev.to/marcosrjjunior/implementing-a-theme-switcher-using-javascript-347d</link>
      <guid>https://dev.to/marcosrjjunior/implementing-a-theme-switcher-using-javascript-347d</guid>
      <description>&lt;p&gt;In this simple tutorial you are going to learn how to implement a theme switcher for your website using CSS and Javascript.&lt;/p&gt;

&lt;p&gt;Let's start by creating a simple HTML structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Simple theme switcher&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Simple theme switcher&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is your first paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a simple CSS to start, just to prepare the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are going to create a button that will trigger the theme.&lt;/p&gt;

&lt;p&gt;We can start with a dark-theme button and a script that will include a data-theme attribute to the body element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h5&amp;gt;&lt;/span&gt;Theme:&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;"switchTheme('dark')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Dark&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;switchTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to implement the themes.&lt;/p&gt;

&lt;p&gt;we start by creating the &lt;strong&gt;:root&lt;/strong&gt; variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--white&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFFFFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--black&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;--gray-100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#EEEEEE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--gray-800&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1c1c1c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0000b8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--white&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--black&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also include other themes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;"switchTheme('light')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Light&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;"switchTheme('dark')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Dark&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;"switchTheme('blue')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blue&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'light'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--white&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--black&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'dark'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gray-800&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gray-100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'blue'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--white&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to see the buttons and switch to the selected theme, but the theme is reset to the default theme when reloading the page. In the next section we will store that selected theme on localStorage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storing-theme-on-localstorage"&gt;
  &lt;/a&gt;
  Storing theme on localStorage
&lt;/h2&gt;

&lt;p&gt;Now let's store the selected theme, so we can keep the style even if the user reload the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;saveTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;switchTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;saveTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loadTheme&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it.&lt;/p&gt;




&lt;p&gt;Now challenge for you 🤔.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implement a toggle switcher from light to dark theme using only one button. You can use emoji to identify the states ☀️ and 🌙.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>darktheme</category>
      <category>themeswitch</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Public Solving: Caesar decipher in JavaScript</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 02 Jan 2022 04:06:10 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/public-solving-caesar-decipher-in-javascript-4n7i</link>
      <guid>https://dev.to/dailydevtips1/public-solving-caesar-decipher-in-javascript-4n7i</guid>
      <description>&lt;p&gt;Some kid elves are being naughty and sending themselves encrypted messages during elf class.&lt;/p&gt;

&lt;p&gt;Santa has asked us to decrypt these messages to see what's happening.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Caesar_cipher"&gt;Caesar cipher&lt;/a&gt; is pretty easy to understand. It's basically the alphabet but offset with an x amount of characters.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;abc 
// shift 1
bcd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we shift the letters up by the shift amount.&lt;/p&gt;

&lt;p&gt;To decipher a message, we have to do the opposite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-the-solution"&gt;
  &lt;/a&gt;
  Thinking about the solution
&lt;/h2&gt;

&lt;p&gt;At first, I started thinking about providing the alphabet as the shifted version and then mapping using that.&lt;br&gt;
But then I realized using the charCode might actually be a more straightforward solution.&lt;/p&gt;

&lt;p&gt;We used the charCode for &lt;a href="https://daily-dev-tips.com/posts/public-solving-hacking-santas-password/"&gt;hacking Santa's password&lt;/a&gt;.&lt;br&gt;
]&lt;/p&gt;

&lt;p&gt;However, we should only match on a-z and A-Z. Capital and lowercase use a different charCode offset, so it's vital to distinguish between them.&lt;/p&gt;

&lt;p&gt;Probably something that a regex and the replace function can help us with!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-a-caesar-decipher-in-javascript"&gt;
  &lt;/a&gt;
  Building a Caesar decipher in JavaScript
&lt;/h2&gt;

&lt;p&gt;As mentioned, we need to only replace &lt;code&gt;a-z&lt;/code&gt; and &lt;code&gt;A-Z&lt;/code&gt;, meaning all characters like &lt;code&gt;,.!&lt;/code&gt; etc. should remain.&lt;/p&gt;

&lt;p&gt;For this, we can use a regex and call another actual shift function for each of the two matches.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;letterShift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;A-Z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;letterShift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the starting offset for a lowercase letter is 97, and for uppercase, it's 65.&lt;/p&gt;

&lt;p&gt;This means the character code for &lt;code&gt;a&lt;/code&gt; is 97.&lt;br&gt;
And for &lt;code&gt;A&lt;/code&gt; it's 65.&lt;/p&gt;

&lt;p&gt;Now let's move on to making the actual &lt;code&gt;letterShift&lt;/code&gt; function we declared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;letterShift&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll break down each step of the following function and end with the complete function ready for use.&lt;/p&gt;

&lt;p&gt;Let's take &lt;code&gt;aol&lt;/code&gt; as our message. We know the offset here is 7.&lt;/p&gt;

&lt;p&gt;The first thing we need to do is retrieve the char code of the letter we received.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// a = 97 &lt;/span&gt;
&lt;span class="c1"&gt;// o = 111&lt;/span&gt;
&lt;span class="c1"&gt;// l = 108&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to offset this character code with the shift.&lt;br&gt;
In our case, the shift is &lt;code&gt;7&lt;/code&gt;, so we have to detract 7 from our character code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;shift&lt;/span&gt;

&lt;span class="c1"&gt;// a = 90&lt;/span&gt;
&lt;span class="c1"&gt;// o = 104&lt;/span&gt;
&lt;span class="c1"&gt;// l = 101&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those paying attention, you might have spotted an issue here.&lt;/p&gt;

&lt;p&gt;90 is not a valid letter since it should be more than 97.&lt;br&gt;
The &lt;code&gt;ol&lt;/code&gt; is correct already.&lt;/p&gt;

&lt;p&gt;To solve this, we need to add &lt;code&gt;26&lt;/code&gt; to negative numbers.&lt;br&gt;
This means any number negative should be at the end of the alphabet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;

&lt;span class="c1"&gt;// a = 116&lt;/span&gt;
&lt;span class="c1"&gt;// o = 130&lt;/span&gt;
&lt;span class="c1"&gt;// l = 127&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;a&lt;/code&gt; is fine, but the &lt;code&gt;ol&lt;/code&gt; are wrong as they should not have been plussed.&lt;/p&gt;

&lt;p&gt;To make a rock-solid solution, we can do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;letter char code&lt;/li&gt;
&lt;li&gt;minus the offset (97 for lowercase or 65 for uppercase)&lt;/li&gt;
&lt;li&gt;add the shift (-7 in our example)&lt;/li&gt;
&lt;li&gt;plus the alphabet length (+26)&lt;/li&gt;
&lt;li&gt;get the remainder of 26 (% 26)&lt;/li&gt;
&lt;li&gt;and then re-add the offset again&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way, we adhere to negative numbers as well as positive ones.&lt;/p&gt;

&lt;p&gt;Making the complete function look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// a = 116 = t&lt;/span&gt;
&lt;span class="c1"&gt;// o = 104 = h&lt;/span&gt;
&lt;span class="c1"&gt;// l = 101 = e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's run our test to see if this works for all the test cases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dgFli0Zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640232194932/7y6n0zweH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgFli0Zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640232194932/7y6n0zweH.png" alt="Tests turning greeen" width="626" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We did it!&lt;/p&gt;

&lt;p&gt;Would really love to hear what your solution would be to this puzzle. 👏&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
